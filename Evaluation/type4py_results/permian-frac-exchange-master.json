{
    "permian-frac-exchange-master/scripts/deploy.py": {
        "get_project_meta": {
            "name": "get_project_meta",
            "location": 32,
            "return": [
                "Dict[str, Any]",
                "str",
                "int",
                "Dict[str, Optional[str]]"
            ],
            "arguments": {}
        },
        "get_task_definition": {
            "name": "get_task_definition",
            "location": 86,
            "return": [
                "str",
                "int",
                "Callable[[str, str], None]",
                "bytes"
            ],
            "arguments": {
                "task_family": [
                    "str",
                    "Mapping[str, Any]",
                    "Callable",
                    "int"
                ],
                "image": [
                    "str",
                    "Mapping[str, Any]",
                    "Callable",
                    "int"
                ],
                "command": [
                    "str",
                    "Mapping[str, Any]",
                    "Callable",
                    "int"
                ],
                "container_name": [
                    "str",
                    "Mapping[str, Any]",
                    "Callable",
                    "int"
                ],
                "tags": [
                    "str",
                    "Mapping[str, Any]",
                    "Callable",
                    "int"
                ],
                "task_iam_role_arn": [
                    "str",
                    "Mapping[str, Any]",
                    "Callable",
                    "int"
                ]
            }
        },
        "AWSClient.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AWSClient.has_credentials": {
            "name": "has_credentials",
            "location": 130,
            "return": [
                "bool",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "AWSClient.ecr_url": {
            "name": "ecr_url",
            "location": 141,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AWSClient.credentials": {
            "name": "credentials",
            "location": 146,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AWSClient.get_client": {
            "name": "get_client",
            "location": 160,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "service_name": [
                    "str"
                ]
            }
        },
        "AWSClient.ecs": {
            "name": "ecs",
            "location": 174,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AWSClient.get_latest_revision": {
            "name": "get_latest_revision",
            "location": 177,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "task_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "permian-frac-exchange-master/scripts/make_role.py": {
        "get_project_meta": {
            "name": "get_project_meta",
            "location": 9,
            "return": [
                "Dict[str, Any]",
                "str",
                "int",
                "Dict[str, Optional[str]]"
            ],
            "arguments": {}
        }
    },
    "permian-frac-exchange-master/scripts/release.py": {
        "project_meta": {
            "name": "project_meta",
            "location": 19,
            "return": [
                "str",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "set_version": {
            "name": "set_version",
            "location": 34,
            "return": [
                "bytes"
            ],
            "arguments": {}
        },
        "publish": {
            "name": "publish",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "permian-frac-exchange-master/src/fracx/config.py": {
        "abs_path": {
            "name": "abs_path",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool"
                ],
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "make_config_path": {
            "name": "make_config_path",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "safe_load_yaml": {
            "name": "safe_load_yaml",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "get_active_config": {
            "name": "get_active_config",
            "location": 50,
            "return": [
                "bool",
                "float",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "get_default_port": {
            "name": "get_default_port",
            "location": 54,
            "return": [
                "str",
                "Tuple[int, int]",
                "int"
            ],
            "arguments": {
                "driver": [
                    "int"
                ]
            }
        },
        "get_default_driver": {
            "name": "get_default_driver",
            "location": 64,
            "return": [
                "str",
                "Tuple[int, int]",
                "int"
            ],
            "arguments": {
                "dialect": [
                    "str",
                    "Tuple[int, int]",
                    "int"
                ]
            }
        },
        "get_default_schema": {
            "name": "get_default_schema",
            "location": 74,
            "return": [
                "str",
                "Tuple[int, int]",
                "int"
            ],
            "arguments": {
                "dialect": [
                    "str",
                    "Tuple[int, int]",
                    "int"
                ]
            }
        },
        "make_url": {
            "name": "make_url",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "url_params": [
                    "List[str]",
                    "str",
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "_get_project_meta": {
            "name": "_get_project_meta",
            "location": 88,
            "return": [
                "Dict[str, Any]",
                "str",
                "int",
                "Dict[str, Optional[str]]"
            ],
            "arguments": {
                "pyproj_path": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "BaseConfig.show": {
            "name": "show",
            "location": 162,
            "return": [
                "str",
                "List[str]",
                "Sequence['cirq.Qid']",
                "int",
                "Tuple[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConfig.collector_params": {
            "name": "collector_params",
            "location": 171,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConfig.datadog_params": {
            "name": "datadog_params",
            "location": 175,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConfig.endpoints": {
            "name": "endpoints",
            "location": 179,
            "return": [
                "str",
                "int",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConfig.__repr__": {
            "name": "__repr__",
            "location": 182,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConfig.with_prefix": {
            "name": "with_prefix",
            "location": 196,
            "return": [
                "bool",
                "str",
                "Dict[str, str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "kw": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "permian-frac-exchange-master/src/fracx/loggers.py": {
        "mlevel": {
            "name": "mlevel",
            "location": 37,
            "return": [
                "str",
                "bool",
                "bytes",
                "slp.util.types.NdTensor",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "level": [
                    "int",
                    "set",
                    "float",
                    "List[str]"
                ]
            }
        },
        "get_formatter": {
            "name": "get_formatter",
            "location": 136,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "config": {
            "name": "config",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "level": [
                    "str",
                    "int",
                    "bool"
                ],
                "formatter": [
                    "str",
                    "dict"
                ],
                "logger": [
                    "logging.Logger",
                    "logging.FileHandler",
                    "str",
                    "Optional[logging.Logger]"
                ]
            }
        },
        "DatadogJSONFormatter.format": {
            "name": "format",
            "location": 88,
            "return": [
                "bool",
                "Sequence[Sequence[str]]",
                "Sequence[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "Optional[bool]",
                    "Optional[int]",
                    "bytearray"
                ]
            }
        },
        "DatadogJSONFormatter.to_json": {
            "name": "to_json",
            "location": 97,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "List[dict]",
                    "str",
                    "int"
                ]
            }
        },
        "DatadogJSONFormatter.json_record": {
            "name": "json_record",
            "location": 103,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "List[float]",
                    "str",
                    "dict",
                    "float",
                    "Sequence['cirq.Qid']"
                ],
                "record": [
                    "dict",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]"
                ]
            }
        }
    },
    "permian-frac-exchange-master/src/fracx/manage.py": {
        "get_terminal_columns": {
            "name": "get_terminal_columns",
            "location": 31,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "hr": {
            "name": "hr",
            "location": 35,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "collector": {
            "name": "collector",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "update_on_conflict": [
                    "int",
                    "bool",
                    "bytes",
                    "List[str]"
                ],
                "ignore_on_conflict": [
                    "int",
                    "bool",
                    "bytes",
                    "List[str]"
                ],
                "use_existing": [
                    "bool",
                    "dict",
                    "int"
                ]
            }
        },
        "endpoints": {
            "name": "endpoints",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "show": {
            "name": "show",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "init": {
            "name": "init",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "c": [
                    "str",
                    "bool"
                ]
            }
        },
        "recreate": {
            "name": "recreate",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "homeassistant_cli.config.Configuration"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 154,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "argv": [
                    "List[str]",
                    "bool",
                    "Optional[Sequence[str]]",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "permian-frac-exchange-master/src/fracx/wsgi.py": {},
    "permian-frac-exchange-master/src/fracx/__init__.py": {
        "create_app": {
            "name": "create_app",
            "location": 23,
            "return": [
                "flask.Flask"
            ],
            "arguments": {
                "script_info": [
                    "bool",
                    "List[str]",
                    "Sequence[str]",
                    "List[Tuple[str, str]]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "create_app.ctx": {
            "name": "ctx",
            "location": 32,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        }
    },
    "permian-frac-exchange-master/src/fracx/__main__.py": {},
    "permian-frac-exchange-master/src/fracx/__version__.py": {},
    "permian-frac-exchange-master/src/fracx/api/mixins.py": {
        "CoreMixin.s": {
            "name": "s",
            "location": 46,
            "return": [
                "bool",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoreMixin.pks": {
            "name": "pks",
            "location": 50,
            "return": [
                "Mapping",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type",
                    "guillotina.db.orm.interfaces.IBaseObject",
                    "Type[T]",
                    "cnaas_nms.db.session.sqla_session",
                    "bytes",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "CoreMixin.primary_key_columns": {
            "name": "primary_key_columns",
            "location": 55,
            "return": [
                "List[str]",
                "List[T]",
                "str",
                "List[Dict]",
                "List[Tuple[str, str, bool]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type[object]",
                    "T",
                    "bool"
                ]
            }
        },
        "CoreMixin.primary_key_names": {
            "name": "primary_key_names",
            "location": 66,
            "return": [
                "List[str]",
                "List[Tuple[str, str, bool]]",
                "List[dict]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "type",
                    "Optional[str]"
                ]
            }
        },
        "CoreMixin.persist_objects": {
            "name": "persist_objects",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Union[int, str]",
                    "T",
                    "Iterator[T]",
                    "int",
                    "denite.util.UserContext",
                    "denite.util.Candidate.s"
                ],
                "objects": [
                    "str",
                    "dict",
                    "bool",
                    "bytes"
                ]
            }
        },
        "CoreMixin.persist": {
            "name": "persist",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "CoreMixin.core_insert": {
            "name": "core_insert",
            "location": 95,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable",
                    "int"
                ],
                "records": [
                    "int",
                    "List[Dict]",
                    "Sized",
                    "List[int]"
                ],
                "size": [
                    "int",
                    "List[int]",
                    "Sized",
                    "Callable[[str, str], float]"
                ],
                "exclude_cols": [
                    "Optional[int]",
                    "bool",
                    "Tuple[int]"
                ],
                "update_on_conflict": [
                    "bool",
                    "int",
                    "List[Tuple[int, int]]"
                ],
                "ignore_on_conflict": [
                    "bool",
                    "int",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "CoreMixin.bulk_insert": {
            "name": "bulk_insert",
            "location": 170,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "Union[str, Tuple[str, ...]]"
                ],
                "records": [
                    "int",
                    "List[Dict]",
                    "List[int]",
                    "Sequence[T]",
                    "list"
                ],
                "size": [
                    "int",
                    "List[Dict]",
                    "Dict[str, Dict[str, Any]]",
                    "Sequence[int]"
                ]
            }
        },
        "CoreMixin.bulk_update": {
            "name": "bulk_update",
            "location": 186,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "Tuple[int]"
                ],
                "records": [
                    "List[Dict]",
                    "int",
                    "str",
                    "List[T]",
                    "list",
                    "List[int]"
                ],
                "size": [
                    "int",
                    "List[Dict]",
                    "List[T]",
                    "Dict[str, Dict[str, Any]]",
                    "List[int]",
                    "Dict[str, str]"
                ]
            }
        },
        "CoreMixin.bulk_merge": {
            "name": "bulk_merge",
            "location": 201,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Optional[List[int]]",
                    "Dict[str, object]",
                    "django.db.models.Model",
                    "float",
                    "Optional[int]"
                ],
                "records": [
                    "List[Dict]",
                    "int",
                    "str",
                    "List[int]"
                ],
                "size": [
                    "int",
                    "List[Dict]",
                    "Dict[str, Dict[str, Any]]",
                    "Sequence[int]"
                ]
            }
        },
        "CoreMixin.post_op_metrics": {
            "name": "post_op_metrics",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "method_type": [
                    "str",
                    "Set[str]",
                    "int",
                    "List[int]"
                ],
                "method": [
                    "str",
                    "int"
                ],
                "n": [
                    "str",
                    "int",
                    "float",
                    "Optional[str]"
                ],
                "exc_time": [
                    "str",
                    "int",
                    "float",
                    "Optional[str]"
                ]
            }
        }
    },
    "permian-frac-exchange-master/src/fracx/api/models.py": {},
    "permian-frac-exchange-master/src/fracx/collector/collector.py": {
        "Collector.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "functions": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        },
        "Collector.functions": {
            "name": "functions",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Collector.model": {
            "name": "model",
            "location": 40,
            "return": [
                "List[app.models.Question]",
                "app.models.Question",
                "allennlp.models.model.Model"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collector.tf": {
            "name": "tf",
            "location": 46,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collector.transform": {
            "name": "transform",
            "location": 55,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "bytes"
                ]
            }
        },
        "FracScheduleCollector.collect": {
            "name": "collect",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "iterable": [
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "List[Tuple[int, int]]",
                    "float"
                ],
                "update_on_conflict": [
                    "bool"
                ],
                "ignore_on_conflict": [
                    "bool"
                ]
            }
        },
        "FracScheduleCollector.persist": {
            "name": "persist",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rows": [
                    "allennlp.models.Model",
                    "abilian.core.models.subjects.User",
                    "bool",
                    "text_recognizer.models.base.Model"
                ],
                "update_on_conflict": [
                    "List[List[int]]",
                    "bool",
                    "Optional[\"AbstractPurpose\"]",
                    "Optional[gdpr.models.LegalReason]",
                    "bytes"
                ],
                "ignore_on_conflict": [
                    "List[List[int]]",
                    "bool",
                    "Optional[\"AbstractPurpose\"]",
                    "Optional[gdpr.models.LegalReason]",
                    "bytes"
                ]
            }
        },
        "FracScheduleCollector.filter": {
            "name": "filter",
            "location": 95,
            "return": [
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "dict",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "permian-frac-exchange-master/src/fracx/collector/downloader.py": {
        "Ftp.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "destination": [
                    "str",
                    "bytes",
                    "bool",
                    "int"
                ],
                "basepath": [
                    "str",
                    "bytes",
                    "bool",
                    "int"
                ],
                "port": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "Ftp.basepath": {
            "name": "basepath",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.Path",
                    "str",
                    "cerulean.path.Path",
                    "logging.Logger",
                    "List[str]"
                ]
            }
        },
        "Ftp.list_files": {
            "name": "list_files",
            "location": 116,
            "return": [
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "pathlib.Path"
                ],
                "contains": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "Ftp.from_config": {
            "name": "from_config",
            "location": 135,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Optional[Dict[int, int]]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "c": [
                    "Dict[str, str]",
                    "io.StringIO",
                    "Mapping[str, str]",
                    "Tuple[int, int]",
                    "Dict[str, Any]",
                    "Optional[Tuple[str, str]]"
                ]
            }
        },
        "Ftp.stringify": {
            "name": "stringify",
            "location": 166,
            "return": [
                "str"
            ],
            "arguments": {
                "data": [
                    "Dict[str, str]",
                    "dict",
                    "bytes"
                ]
            }
        },
        "Ftp.check_connection_details": {
            "name": "check_connection_details",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "type",
                    "IO[bytes]",
                    "bytes",
                    "Callable"
                ],
                "details": [
                    "dict",
                    "Mapping",
                    "Sequence",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "Ftp.upload": {
            "name": "upload",
            "location": 185,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "to": [
                    "str"
                ]
            }
        },
        "Ftp.get_all": {
            "name": "get_all",
            "location": 217,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ftp.get": {
            "name": "get",
            "location": 235,
            "return": [
                "str",
                "bool",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "Ftp.latest_filename": {
            "name": "latest_filename",
            "location": 285,
            "return": [
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ftp.get_latest": {
            "name": "get_latest",
            "location": 300,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ftp.cleanup": {
            "name": "cleanup",
            "location": 303,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "permian-frac-exchange-master/src/fracx/collector/endpoint.py": {
        "Endpoint.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "bool"
                ],
                "model": [
                    "int",
                    "str",
                    "List[str]",
                    "bool"
                ],
                "version": [
                    "bool",
                    "Sequence",
                    "Optional[str]",
                    "str",
                    "Iterable[str]"
                ],
                "path": [
                    "str",
                    "int"
                ],
                "mappings": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "int",
                    "Dict[str, 'LabwareDefinition']"
                ],
                "url_params": [
                    "bool",
                    "Sequence",
                    "Optional[str]",
                    "str",
                    "Iterable[str]"
                ],
                "exclude": [
                    "bool",
                    "Sequence",
                    "Optional[str]",
                    "str",
                    "Iterable[str]"
                ],
                "options": [
                    "bool",
                    "str"
                ],
                "normalize": [
                    "bool",
                    "Sequence",
                    "Optional[str]",
                    "str",
                    "Iterable[str]"
                ],
                "updated_column": [
                    "bool",
                    "Sequence",
                    "Optional[str]",
                    "str",
                    "Iterable[str]"
                ],
                "enabled": [
                    "bool",
                    "Sequence",
                    "Optional[str]",
                    "str",
                    "Iterable[str]"
                ],
                "ignore_unknown": [
                    "bool",
                    "Sequence",
                    "Optional[str]",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "Endpoint.__repr__": {
            "name": "__repr__",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Endpoint.__iter__": {
            "name": "__iter__",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Endpoint.model": {
            "name": "model",
            "location": 55,
            "return": [
                "List[app.models.Question]",
                "app.models.Question",
                "allennlp.models.model.Model"
            ],
            "arguments": {
                "self": []
            }
        },
        "Endpoint.exclude": {
            "name": "exclude",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Endpoint.known_columns": {
            "name": "known_columns",
            "location": 65,
            "return": [
                "str",
                "bool",
                "bytes",
                "tuple",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Endpoint.alias_map": {
            "name": "alias_map",
            "location": 69,
            "return": [
                "bool",
                "str",
                "int",
                "float",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Endpoint.mapped_names": {
            "name": "mapped_names",
            "location": 73,
            "return": [
                "List[str]",
                "bool",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Endpoint.mapped_aliases": {
            "name": "mapped_aliases",
            "location": 77,
            "return": [
                "str",
                "List[Dict]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Endpoint.locate_model": {
            "name": "locate_model",
            "location": 80,
            "return": [
                "allennlp.models.model.Model",
                "List[app.models.Question]",
                "app.models.Question"
            ],
            "arguments": {
                "self": [],
                "model_name": [
                    "str",
                    "Type[T]"
                ]
            }
        },
        "Endpoint.load_from_config": {
            "name": "load_from_config",
            "location": 104,
            "return": [
                "str",
                "dict",
                "Union[int, float, complex]",
                "Type[Dict[str, Any]]"
            ],
            "arguments": {
                "app_config": [
                    "str"
                ],
                "load_disabled": [
                    "bool",
                    "Type[T]",
                    "int"
                ]
            }
        },
        "Endpoint.from_dict": {
            "name": "from_dict",
            "location": 128,
            "return": [
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ],
                "data": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "permian-frac-exchange-master/src/fracx/collector/filehandler.py": {
        "BytesFileHandler.xlsx": {
            "name": "xlsx",
            "location": 15,
            "return": [
                "typing.Generator[typing.Dict, None, None]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "content": [
                    "str",
                    "Optional[str]"
                ],
                "sheet_no": [
                    "str",
                    "Optional[str]"
                ],
                "date_columns": [
                    "str",
                    "datetime.date",
                    "datetime.datetime",
                    "datetime.timezone",
                    "int"
                ]
            }
        },
        "BytesFileHandler._parse_excel_date": {
            "name": "_parse_excel_date",
            "location": 40,
            "return": [
                "datetime.datetime",
                "str",
                "Union[datetime.datetime, str]",
                "datetime.date"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "list",
                    "datetime.date",
                    "bool"
                ],
                "value": [
                    "int",
                    "Union[float, None]",
                    "static_frame.core.util.DateInitializer",
                    "datetime.datetime"
                ],
                "date_mode": [
                    "int",
                    "Union[float, None]",
                    "static_frame.core.util.DateInitializer",
                    "datetime.datetime"
                ]
            }
        }
    },
    "permian-frac-exchange-master/src/fracx/collector/parser.py": {
        "safe_convert": {
            "name": "safe_convert",
            "location": 15,
            "return": [
                "Dict[str, Dict[str, int]]",
                "int",
                "str"
            ],
            "arguments": {
                "func": [
                    "Type"
                ]
            }
        },
        "locate_resource": {
            "name": "locate_resource",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "safe_convert.func_wrapper": {
            "name": "func_wrapper",
            "location": 19,
            "return": [
                "int",
                "Mapping",
                "str",
                "Callable[..., None]",
                "Optional[Set[str]]",
                "Callable[[KT], VT]"
            ],
            "arguments": {}
        },
        "Criterion.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "func": [
                    "int",
                    "str",
                    "bool",
                    "datetime.datetime",
                    "Sequence",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "Criterion.__call__": {
            "name": "__call__",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "int",
                    "dict"
                ]
            }
        },
        "Criterion.__repr__": {
            "name": "__repr__",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegexCriterion.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "regex": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "Callable",
                    "Dict[str, str]",
                    "Union[str, List[str], Tuple[str, ...]]"
                ]
            }
        },
        "RegexCriterion.__call__": {
            "name": "__call__",
            "location": 57,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "List[float]"
                ]
            }
        },
        "RegexCriterion.__repr__": {
            "name": "__repr__",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeCriterion.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dtype": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "Optional[Sequence[str]]",
                    "List[List[int]]",
                    "List[int]",
                    "bool"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Optional[int]"
                ]
            }
        },
        "ValueCriterion.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[str]",
                    "str",
                    "List[int]",
                    "Optional[Sequence[str]]",
                    "Dict[str, int]",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "int",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "ParserRule.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "criteria": [
                    "bool",
                    "str"
                ],
                "name": [
                    "str"
                ],
                "allow_partial": [
                    "bool",
                    "str"
                ]
            }
        },
        "ParserRule.__repr__": {
            "name": "__repr__",
            "location": 104,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserRule.__call__": {
            "name": "__call__",
            "location": 108,
            "return": [
                "Tuple[float, float]",
                "str",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Sequence[Dict[str, Any]]",
                    "List[str]",
                    "Dict[str, Any]",
                    "Union[str, bytes]"
                ],
                "return_partials": [
                    "bool",
                    "Callable"
                ]
            }
        },
        "ParserRule.match_mode": {
            "name": "match_mode",
            "location": 134,
            "return": [
                "int",
                "str",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserRule.from_list": {
            "name": "from_list",
            "location": 139,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "Type[T]",
                    "int",
                    "Optional[float]",
                    "Optional[int]",
                    "Sequence[Any]"
                ],
                "criteria": [
                    "str",
                    "dict",
                    "Optional[bool]",
                    "Callable"
                ]
            }
        },
        "Parser.__init__": {
            "name": "__init__",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rules": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "List[str]",
                    "str",
                    "dict"
                ],
                "parse_dtypes": [
                    "str",
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "Parser.__repr__": {
            "name": "__repr__",
            "location": 168,
            "return": [
                "str",
                "bool",
                "int",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.init": {
            "name": "init",
            "location": 172,
            "return": [
                "int",
                "Type",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable[..., T]",
                    "Optional[str]"
                ],
                "ruleset": [
                    "Dict[str, List]",
                    "bool",
                    "Iterable[Tuple[Hashable, Any]]",
                    "str",
                    "Callable",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "Callable[..., T]",
                    "Optional[str]"
                ]
            }
        },
        "Parser.try_int": {
            "name": "try_int",
            "location": 181,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "Parser.try_float": {
            "name": "try_float",
            "location": 188,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "Parser.try_date": {
            "name": "try_date",
            "location": 193,
            "return": [
                "list",
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Parser.try_bool": {
            "name": "try_bool",
            "location": 201,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Parser.try_empty_str_to_none": {
            "name": "try_empty_str_to_none",
            "location": 212,
            "return": [
                "List[\"InlineContent\"]",
                "Optional[str]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "Parser.add_rule": {
            "name": "add_rule",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "float",
                    "int"
                ]
            }
        },
        "Parser.run_checks": {
            "name": "run_checks",
            "location": 218,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "dict",
                    "Tuple[str, Any]",
                    "float",
                    "T",
                    "list",
                    "Type",
                    "Tuple[List[str], bool]"
                ],
                "return_partials": [
                    "bool",
                    "Optional[T]",
                    "int",
                    "Type",
                    "str"
                ]
            }
        },
        "Parser.parse_dtype": {
            "name": "parse_dtype",
            "location": 233,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[None, str, bytes]",
                    "Optional[int]",
                    "bytes",
                    "bool",
                    "dict"
                ]
            }
        },
        "Parser.parse": {
            "name": "parse",
            "location": 257,
            "return": [
                "str",
                "int",
                "dict",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Union[int, float]",
                    "type",
                    "bool",
                    "dict"
                ]
            }
        },
        "Parser.parse_many": {
            "name": "parse_many",
            "location": 264,
            "return": [
                "List[str]",
                "str",
                "Optional[dict]",
                "int",
                "Counter",
                "Sequence[int]"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "list",
                    "str",
                    "float",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        }
    },
    "permian-frac-exchange-master/src/fracx/collector/row_parser.py": {
        "RowParser.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "aliases": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "exclude": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "normalize": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "parsers": [
                    "str",
                    "Optional[Callable[[Dict], Any]]",
                    "bool"
                ]
            }
        },
        "RowParser.__repr__": {
            "name": "__repr__",
            "location": 34,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RowParser.add_parser": {
            "name": "add_parser",
            "location": 38,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "list",
                    "str",
                    "List[str]",
                    "Callable",
                    "int"
                ],
                "ruleset": [
                    "list",
                    "str",
                    "List[str]",
                    "Callable",
                    "int"
                ],
                "name": [
                    "list",
                    "str",
                    "List[str]",
                    "Callable",
                    "int"
                ]
            }
        },
        "RowParser.normalize_keys": {
            "name": "normalize_keys",
            "location": 44,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str"
                ]
            }
        },
        "RowParser.parse_value_dtypes": {
            "name": "parse_value_dtypes",
            "location": 47,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Optional[float]",
                "int",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "T"
                ]
            }
        },
        "RowParser.parse": {
            "name": "parse",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "bool",
                    "str",
                    "Set[str]",
                    "list"
                ],
                "parse_dtypes": [
                    "Iterator[Dict[str, Any]]",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "RowParser.load_from_config": {
            "name": "load_from_config",
            "location": 61,
            "return": [
                "List[str]",
                "Optional[List[str]]",
                "Dict[str, str]",
                "bool",
                "theHarvester.parsers.myparser.Parser",
                "xml_parsers.Parser"
            ],
            "arguments": {
                "parser_conf": [
                    "str",
                    "type",
                    "bool"
                ]
            }
        }
    },
    "permian-frac-exchange-master/src/fracx/collector/transformer.py": {
        "Transformer.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "aliases": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "exclude": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "normalize": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "parser": [
                    "bool",
                    "str",
                    "aule.parser.Parser"
                ],
                "ignore_unknown": [
                    "str",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "Transformer.__repr__": {
            "name": "__repr__",
            "location": 41,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transformer.transform": {
            "name": "transform",
            "location": 47,
            "return": [
                "Tuple[int, int]",
                "float",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "dict"
                ]
            }
        },
        "Transformer.apply_aliases": {
            "name": "apply_aliases",
            "location": 77,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "dict",
                    "list",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "Transformer.drop_exclusions": {
            "name": "drop_exclusions",
            "location": 80,
            "return": [
                "Tuple[int, int]",
                "float",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "permian-frac-exchange-master/src/fracx/collector/yammler.py": {
        "Yammler.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fspath": [
                    "str",
                    "bytes"
                ],
                "data": [
                    "Dict[str, Any]",
                    "Optional[Dict]",
                    "dict"
                ]
            }
        },
        "Yammler.dump": {
            "name": "dump",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Yammler.stamp": {
            "name": "stamp",
            "location": 33,
            "return": [
                "str",
                "datetime.datetime",
                "datetime.date",
                "int"
            ],
            "arguments": {}
        },
        "Yammler.context": {
            "name": "context",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[int]",
                    "bool",
                    "Type",
                    "complex",
                    "bytes"
                ],
                "fspath": [
                    "str",
                    "Optional[int]",
                    "bool",
                    "Type",
                    "complex",
                    "bytes"
                ]
            }
        },
        "Yammler.durable": {
            "name": "durable",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "List[int]",
                    "bool",
                    "List[str]",
                    "int",
                    "Callable[[Any], T]"
                ],
                "fspath": [
                    "str",
                    "int",
                    "list",
                    "callable",
                    "float",
                    "List[str]"
                ],
                "mode": [
                    "str",
                    "int",
                    "list",
                    "callable",
                    "float",
                    "List[str]"
                ]
            }
        }
    },
    "permian-frac-exchange-master/src/fracx/collector/__init__.py": {},
    "permian-frac-exchange-master/src/fracx/metrics/metrics.py": {
        "load": {
            "name": "load",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "c": [
                    "bool",
                    "Iterator[str]",
                    "str",
                    "dict"
                ]
            }
        },
        "post": {
            "name": "post",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "Dict[str, Any]"
                ],
                "points": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "Dict[str, str]"
                ],
                "metric_type": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "bool"
                ],
                "tags": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "post_event": {
            "name": "post_event",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "title": [
                    "str",
                    "Union[Dict, List, str]",
                    "Optional[str]"
                ],
                "text": [
                    "str",
                    "Union[Dict, List, str]",
                    "Optional[str]"
                ],
                "tags": [
                    "str",
                    "Union[Dict, List, str]",
                    "Optional[str]"
                ]
            }
        },
        "post_heartbeat": {
            "name": "post_heartbeat",
            "location": 102,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "to_tags": {
            "name": "to_tags",
            "location": 107,
            "return": [
                "str",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {
                "values": [
                    "Union[Dict, List, str]",
                    "str",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "sep": [
                    "str"
                ]
            }
        }
    },
    "permian-frac-exchange-master/src/fracx/metrics/__init__.py": {},
    "permian-frac-exchange-master/src/fracx/util/deco.py": {
        "classproperty.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[[], bool]",
                    "bool",
                    "List[Tuple[str, str, str, str]]",
                    "List[Tuple[str, str, str]]",
                    "List[str]"
                ]
            }
        },
        "classproperty.__get__": {
            "name": "__get__",
            "location": 5,
            "return": [
                "Optional[str]",
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Type['Signature']",
                    "Type[Any]"
                ],
                "owner": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "permian-frac-exchange-master/src/fracx/util/exc.py": {},
    "permian-frac-exchange-master/src/fracx/util/jsontools.py": {
        "DateTimeEncoder.default": {
            "name": "default",
            "location": 9,
            "return": [
                "str",
                "int",
                "Union[str, int]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "datetime.datetime",
                    "float",
                    "datetime.timedelta",
                    "str"
                ]
            }
        },
        "ObjectEncoder.default": {
            "name": "default",
            "location": 18,
            "return": [
                "int",
                "bool",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "type"
                ]
            }
        }
    },
    "permian-frac-exchange-master/src/fracx/util/strings.py": {
        "StringProcessor.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "replacement": [
                    "int",
                    "bool",
                    "float"
                ],
                "tolower": [
                    "int",
                    "bool",
                    "float"
                ],
                "toupper": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "StringProcessor.alphanum_only": {
            "name": "alphanum_only",
            "location": 20,
            "return": [
                "str",
                "Union[str, Dict]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "bytes"
                ]
            }
        },
        "StringProcessor.numeric_only": {
            "name": "numeric_only",
            "location": 28,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "bytes"
                ]
            }
        },
        "StringProcessor.dedupe_whitespace": {
            "name": "dedupe_whitespace",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "bytes"
                ]
            }
        },
        "StringProcessor.remove_whitespace": {
            "name": "remove_whitespace",
            "location": 41,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "bytes",
                    "Set[int]"
                ]
            }
        },
        "StringProcessor.fill_whitespace": {
            "name": "fill_whitespace",
            "location": 46,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "Optional[str]"
                ],
                "replacement": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Iterable[str]",
                    "Optional[Collection[str]]",
                    "Optional[bool]"
                ]
            }
        },
        "StringProcessor.normalize": {
            "name": "normalize",
            "location": 50,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "Optional[bytes]",
                    "Set[Tuple[int, Any, Any]]",
                    "int"
                ],
                "int_compatable": [
                    "AnyStr",
                    "Union[bytes, bytearray]",
                    "Iterable[T]",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "permian-frac-exchange-master/src/fracx/util/__init__.py": {
        "hf_size": {
            "name": "hf_size",
            "location": 9,
            "return": [
                "bytes",
                "str"
            ],
            "arguments": {
                "size_bytes": [
                    "Union[str, int]",
                    "int",
                    "float",
                    "Union[str, int, float]",
                    "str",
                    "Optional[int]",
                    "List[int]"
                ]
            }
        },
        "chunks": {
            "name": "chunks",
            "location": 34,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "float",
                    "bool"
                ],
                "n": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "apply_transformation": {
            "name": "apply_transformation",
            "location": 46,
            "return": [
                "dict",
                "List[str]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Union[int, str]",
                    "list",
                    "str",
                    "int"
                ],
                "convert": [
                    "Callable",
                    "bool",
                    "dict",
                    "Optional[Exception]",
                    "Iterable",
                    "type"
                ],
                "keys": [
                    "bool",
                    "str"
                ],
                "values": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "permian-frac-exchange-master/tests/conftest.py": {
        "conf": {
            "name": "conf",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "app": {
            "name": "app",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "endpoint": {
            "name": "endpoint",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "conf": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ftp": {
            "name": "ftp",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "ftpserver": [
                    "int"
                ]
            }
        }
    },
    "permian-frac-exchange-master/tests/test_config.py": {
        "TestConfig.test_load_config_from_yaml_file_no_exists": {
            "name": "test_load_config_from_yaml_file_no_exists",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "capsys": [
                    "str",
                    "Type"
                ]
            }
        },
        "TestConfig.test_get_default_port_mssql": {
            "name": "test_get_default_port_mssql",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_get_default_driver_mssql": {
            "name": "test_get_default_driver_mssql",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_get_default_schema_mssql": {
            "name": "test_get_default_schema_mssql",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_get_default_port_postgres": {
            "name": "test_get_default_port_postgres",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_get_default_driver_postgres": {
            "name": "test_get_default_driver_postgres",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_get_default_schema_postgres": {
            "name": "test_get_default_schema_postgres",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_get_project_meta": {
            "name": "test_get_project_meta",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_show_config_attrs": {
            "name": "test_show_config_attrs",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_get_collector_params": {
            "name": "test_get_collector_params",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "permian-frac-exchange-master/tests/test_downloader.py": {
        "TestsFTP.test_ftpserver_class": {
            "name": "test_ftpserver_class",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ftpserver": []
            }
        },
        "TestsFTP.test_ftpserver": {
            "name": "test_ftpserver",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ftpserver": [
                    "str"
                ]
            }
        },
        "TestsFTP.test_load_ftp_from_config": {
            "name": "test_load_ftp_from_config",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ftpserver": [
                    "int"
                ],
                "conf": []
            }
        },
        "TestsFTP.test_load_ftp_from_config_bad_password": {
            "name": "test_load_ftp_from_config_bad_password",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ftpserver": [
                    "int"
                ],
                "conf": [
                    "str"
                ]
            }
        },
        "TestsFTP.test_ftp_access_basepath": {
            "name": "test_ftp_access_basepath",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ftp": []
            }
        },
        "TestsFTP.test_ftp_set_basepath_to_same_value": {
            "name": "test_ftp_set_basepath_to_same_value",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ftp": []
            }
        },
        "TestsFTP.test_ftp_set_basepath_to_invalid_value": {
            "name": "test_ftp_set_basepath_to_invalid_value",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ftpserver": [
                    "int"
                ]
            }
        },
        "TestsFTP.test_check_credentials_all_present": {
            "name": "test_check_credentials_all_present",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ftp": [],
                "conf": [
                    "dict"
                ]
            }
        },
        "TestsFTP.test_missing_credentials": {
            "name": "test_missing_credentials",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ftp": [],
                "conf": [
                    "str",
                    "float"
                ]
            }
        },
        "TestsFTP.test_ftp_upload": {
            "name": "test_ftp_upload",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ftp": [
                    "str"
                ],
                "tmpdir": []
            }
        },
        "TestsFTP.test_ftp_upload_file_no_exist": {
            "name": "test_ftp_upload_file_no_exist",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ftp": [
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "TestsFTP.test_ftp_get_file": {
            "name": "test_ftp_get_file",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ftp": [
                    "Optional[str]",
                    "str",
                    "bool"
                ],
                "tmpdir": [
                    "str"
                ]
            }
        },
        "TestsFTP.test_ftp_get_latest_file": {
            "name": "test_ftp_get_latest_file",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ftp": [
                    "str"
                ],
                "tmpdir": [
                    "Callable"
                ]
            }
        },
        "TestsFTP.test_ftp_cleanup": {
            "name": "test_ftp_cleanup",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ftp": [],
                "tmpdir": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "permian-frac-exchange-master/tests/test_endpoint.py": {
        "prototype": {
            "name": "prototype",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "conf": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestEndpoint.test_endpoint_loaded": {
            "name": "test_endpoint_loaded",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "endpoint": []
            }
        },
        "TestEndpoint.test_load_from_config": {
            "name": "test_load_from_config",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "conf": []
            }
        },
        "TestEndpoint.test_model_found": {
            "name": "test_model_found",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "keanu.Model",
                    "TestModule.Model"
                ]
            }
        },
        "TestEndpoint.test_exclustions_are_valid": {
            "name": "test_exclustions_are_valid",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "prototype": []
            }
        },
        "TestEndpoint.test_create_from_dict": {
            "name": "test_create_from_dict",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEndpoint.test_alias_mapping_properties_are_valid": {
            "name": "test_alias_mapping_properties_are_valid",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "prototype": []
            }
        },
        "TestEndpoint.test_known_columns_are_valid": {
            "name": "test_known_columns_are_valid",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "prototype": []
            }
        }
    },
    "permian-frac-exchange-master/tests/test_jsontools.py": {
        "kv": {
            "name": "kv",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "datetime_encoder": {
            "name": "datetime_encoder",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestDatetimeEncoder.test_encode_datetime": {
            "name": "test_encode_datetime",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "datetime_encoder": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "TestDatetimeEncoder.test_encode_non_datetime": {
            "name": "test_encode_non_datetime",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "datetime_encoder": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestDatetimeEncoder.test_dump_datetime": {
            "name": "test_dump_datetime",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDatetimeEncoder.test_super_class_raise_type_error": {
            "name": "test_super_class_raise_type_error",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "datetime_encoder": [
                    "int",
                    "bool"
                ]
            }
        },
        "TestObjectEncoder.test_encode_datetime": {
            "name": "test_encode_datetime",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestObjectEncoder.test_encode_with_dict_attribute": {
            "name": "test_encode_with_dict_attribute",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestObjectEncoder.test_encode_with_to_json": {
            "name": "test_encode_with_to_json",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestObjectEncoder.test_encode_timedelta": {
            "name": "test_encode_timedelta",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestObjectEncoder.test_encode_with_dict_attribute.ObjectForEncoding.__dict__": {
            "name": "__dict__",
            "location": 53,
            "return": [
                "str",
                "bytes",
                "IO[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestObjectEncoder.test_encode_with_to_json.ObjectForEncoding.to_json": {
            "name": "to_json",
            "location": 64,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "permian-frac-exchange-master/tests/test_loggers.py": {
        "logger": {
            "name": "logger",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestLogger.test_logger": {
            "name": "test_logger",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "caplog": [
                    "str",
                    "float"
                ],
                "logger": []
            }
        },
        "TestLogger.test_convert_qualifier_to_log_level": {
            "name": "test_convert_qualifier_to_log_level",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "logger": []
            }
        },
        "TestLogger.test_colorized_stream_handler_nt": {
            "name": "test_colorized_stream_handler_nt",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "monkeypatch": [
                    "str"
                ],
                "logger": [
                    "logging.Logger",
                    "Optional[logging.Logger]"
                ],
                "caplog": [
                    "str",
                    "float"
                ]
            }
        },
        "TestLogger.test_datadog_json_formatter": {
            "name": "test_datadog_json_formatter",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "logging.Logger"
                ],
                "caplog": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "TestLogger.test_datadog_json_formatter_tracing": {
            "name": "test_datadog_json_formatter_tracing",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "logging.Logger"
                ],
                "caplog": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "permian-frac-exchange-master/tests/test_manage.py": {
        "table_names": {
            "name": "table_names",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "conf": [
                    "str"
                ]
            }
        },
        "TestManage.test_endpoints_command": {
            "name": "test_endpoints_command",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestManage.test_run_collector_command": {
            "name": "test_run_collector_command",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ftpserver": [],
                "monkeypatch": [
                    "bool",
                    "float"
                ]
            }
        },
        "TestManage.test_db_init": {
            "name": "test_db_init",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestManage.test_db_recreate": {
            "name": "test_db_recreate",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestManage.test_run_cli": {
            "name": "test_run_cli",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestManage.test_print_hr": {
            "name": "test_print_hr",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "permian-frac-exchange-master/tests/test_metrics.py": {
        "TestMetrics.test_load_datadog_lib": {
            "name": "test_load_datadog_lib",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "conf": [
                    "int",
                    "bytes"
                ]
            }
        },
        "TestMetrics.test_dict_to_tags": {
            "name": "test_dict_to_tags",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMetrics.test_list_to_tags": {
            "name": "test_list_to_tags",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMetrics.test_comma_delimited_string_to_tags": {
            "name": "test_comma_delimited_string_to_tags",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "permian-frac-exchange-master/tests/test_mixins.py": {
        "records": {
            "name": "records",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestModelMixins.test_bulk_insert": {
            "name": "test_bulk_insert",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [],
                "records": []
            }
        },
        "TestModelMixins.test_core_insert_ignore_on_conflict": {
            "name": "test_core_insert_ignore_on_conflict",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [],
                "records": []
            }
        },
        "TestModelMixins.test_core_insert_update_on_conflict": {
            "name": "test_core_insert_update_on_conflict",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [],
                "records": []
            }
        },
        "TestModelMixins.test_get_pks": {
            "name": "test_get_pks",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [],
                "records": []
            }
        },
        "TestModelMixins.test_bulk_merge": {
            "name": "test_bulk_merge",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [],
                "records": [
                    "Dict[str, Any]"
                ]
            }
        },
        "TestModelMixins.test_persist_objects": {
            "name": "test_persist_objects",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [],
                "records": [
                    "Iterable[Tuple[int, int]]"
                ]
            }
        },
        "TestModelMixins.test_core_insert_invalid_data": {
            "name": "test_core_insert_invalid_data",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "TestModelMixins.test_get_primary_key_names": {
            "name": "test_get_primary_key_names",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        }
    },
    "permian-frac-exchange-master/tests/test_parser.py": {
        "parser": {
            "name": "parser",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "conf": [
                    "bool",
                    "Dict[str, Any]",
                    "str",
                    "Callable"
                ]
            }
        },
        "arbitrary_callable": {
            "name": "arbitrary_callable",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "rule": {
            "name": "rule",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "arbitrary_callable.return1": {
            "name": "return1",
            "location": 24,
            "return": [
                "float",
                "int",
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestParser.test_parse_signed_int": {
            "name": "test_parse_signed_int",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "Dict[str, Sequence[str]]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestParser.test_parse_unsigned_int": {
            "name": "test_parse_unsigned_int",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "Dict[str, Sequence[str]]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestParser.test_parse_signed_float": {
            "name": "test_parse_signed_float",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "Dict[str, Sequence[str]]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestParser.test_parse_unsigned_float": {
            "name": "test_parse_unsigned_float",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "Dict[str, Sequence[str]]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestParser.test_parse_datetime": {
            "name": "test_parse_datetime",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "str",
                    "Dict[str, Sequence[str]]",
                    "List[str]",
                    "int",
                    "Callable"
                ]
            }
        },
        "TestParser.test_ignore_clouded_datetime": {
            "name": "test_ignore_clouded_datetime",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "bbcode.Parser",
                    "bool",
                    "str"
                ]
            }
        },
        "TestParser.test_ignore_incomplete_datetime": {
            "name": "test_ignore_incomplete_datetime",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "bbcode.Parser",
                    "bool",
                    "str"
                ]
            }
        },
        "TestParser.test_parse_bool": {
            "name": "test_parse_bool",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "Dict[str, Sequence[str]]",
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestParser.test_parser_repr": {
            "name": "test_parser_repr",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "str"
                ]
            }
        },
        "TestParser.test_parser_rule_repr": {
            "name": "test_parser_rule_repr",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "TestParser.test_try_date": {
            "name": "test_try_date",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "dict",
                    "Container"
                ]
            }
        },
        "TestParser.test_try_date_handle_none": {
            "name": "test_try_date_handle_none",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "Optional[str]"
                ]
            }
        },
        "TestParser.test_add_rule": {
            "name": "test_add_rule",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rule": []
            }
        },
        "TestCriterion.test_criterion_repr_works": {
            "name": "test_criterion_repr_works",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCriterion.test_regexcriterion_repr_works": {
            "name": "test_regexcriterion_repr_works",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCriterion.test_criterion_callable": {
            "name": "test_criterion_callable",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCriterion.test_regex_criterion": {
            "name": "test_regex_criterion",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCriterion.test_type_criterion_int": {
            "name": "test_type_criterion_int",
            "location": 201,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCriterion.test_type_criterion_string_is_not_int": {
            "name": "test_type_criterion_string_is_not_int",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCriterion.test_value_criterion_parse_value": {
            "name": "test_value_criterion_parse_value",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCriterion.test_rule_repr": {
            "name": "test_rule_repr",
            "location": 213,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "str",
                    "float"
                ]
            }
        },
        "TestCriterion.test_rule_return_partials": {
            "name": "test_rule_return_partials",
            "location": 216,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rule": []
            }
        },
        "TestCriterion.test_get_match_mode": {
            "name": "test_get_match_mode",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rule": []
            }
        },
        "TestCriterion.test_toggle_match_mode": {
            "name": "test_toggle_match_mode",
            "location": 222,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rule": []
            }
        },
        "TestCriterion.test_partial_parse": {
            "name": "test_partial_parse",
            "location": 226,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "str"
                ]
            }
        },
        "TestCriterion.test_full_parse": {
            "name": "test_full_parse",
            "location": 234,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "permian-frac-exchange-master/tests/test_strings.py": {
        "sp": {
            "name": "sp",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestStringProcessor.test_sp_props": {
            "name": "test_sp_props",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sp": [
                    "str"
                ]
            }
        },
        "TestStringProcessor.test_remove_special_chars": {
            "name": "test_remove_special_chars",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sp": []
            }
        },
        "TestStringProcessor.test_dedupe_whitespace": {
            "name": "test_dedupe_whitespace",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sp": [
                    "str",
                    "float"
                ]
            }
        },
        "TestStringProcessor.test_remove_all_whitespace": {
            "name": "test_remove_all_whitespace",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sp": []
            }
        },
        "TestStringProcessor.test_normalize_string": {
            "name": "test_normalize_string",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sp": [
                    "str"
                ]
            }
        },
        "TestStringProcessor.test_normalize_string_to_int": {
            "name": "test_normalize_string_to_int",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sp": [
                    "float"
                ]
            }
        },
        "TestStringProcessor.test_replace_all_non_numeric": {
            "name": "test_replace_all_non_numeric",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sp": [
                    "dict"
                ]
            }
        },
        "TestStringProcessor.test_normalize_to_uppercase": {
            "name": "test_normalize_to_uppercase",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "permian-frac-exchange-master/tests/test_util.py": {
        "TestUtil.test_hf_size_zero_bytes": {
            "name": "test_hf_size_zero_bytes",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUtil.test_hf_size_string_arg": {
            "name": "test_hf_size_string_arg",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUtil.test_hf_format_kb": {
            "name": "test_hf_format_kb",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUtil.test_hf_format_mb": {
            "name": "test_hf_format_mb",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUtil.test_hf_format_gb": {
            "name": "test_hf_format_gb",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUtil.test_apply_transformation_nested_dict": {
            "name": "test_apply_transformation_nested_dict",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "permian-frac-exchange-master/tests/test_yammler.py": {
        "tmpyaml": {
            "name": "tmpyaml",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "TestYammler.test_load_yaml": {
            "name": "test_load_yaml",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmpyaml": [
                    "List[Dict[str, Any]]",
                    "int",
                    "float"
                ]
            }
        },
        "TestYammler.test_dump_to_file": {
            "name": "test_dump_to_file",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmpdir": []
            }
        },
        "TestYammler.test_stamp": {
            "name": "test_stamp",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmpdir": []
            }
        },
        "TestYammler.test_generic_context_manager": {
            "name": "test_generic_context_manager",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tmpyaml": []
            }
        }
    },
    "permian-frac-exchange-master/tests/__init__.py": {}
}
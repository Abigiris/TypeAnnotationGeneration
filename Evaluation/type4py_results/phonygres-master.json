{
    "phonygres-master/setup.py": {
        "TestCommand.initialize_options": {
            "name": "initialize_options",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommand.finalize_options": {
            "name": "finalize_options",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommand.run": {
            "name": "run",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LintCommand.initialize_options": {
            "name": "initialize_options",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LintCommand.finalize_options": {
            "name": "finalize_options",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LintCommand.run": {
            "name": "run",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "phonygres-master/phonygres/database.py": {
        "Database.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "phonygres-master/phonygres/errors.py": {
        "PhonygresError.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "int",
                    "str",
                    "float"
                ],
                "message": [
                    "str",
                    "Union[Literal, str]"
                ]
            }
        }
    },
    "phonygres-master/phonygres/transaction.py": {
        "Transaction.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Transaction.begin": {
            "name": "begin",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Transaction.commit": {
            "name": "commit",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Transaction.rollback": {
            "name": "rollback",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "phonygres-master/phonygres/util.py": {
        "skip_whitespace": {
            "name": "skip_whitespace",
            "location": 5,
            "return": [
                "typing.Iterator[sqlparse.sql.Token]"
            ],
            "arguments": {
                "tokens": [
                    "str",
                    "Iterable[Token]",
                    "Iterator[str]",
                    "Token",
                    "List[str]",
                    "List[lark.Token]"
                ]
            }
        }
    },
    "phonygres-master/phonygres/__init__.py": {
        "execute_sql": {
            "name": "execute_sql",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "db": [
                    "database.Database",
                    "deeplearning.ml4pl.ir.ir_database.Database",
                    "List[recidiviz.persistence.database.schema.state.schema.StatePerson]"
                ],
                "sql": [
                    "str",
                    "pymongo.database.Database",
                    "Tuple[float, float]",
                    "deeplearning.ml4pl.bytecode.bytecode_database.Database"
                ]
            }
        }
    },
    "phonygres-master/phonygres/ast/base.py": {},
    "phonygres-master/phonygres/ast/create.py": {},
    "phonygres-master/phonygres/ast/transactions.py": {},
    "phonygres-master/phonygres/ast/__init__.py": {},
    "phonygres-master/phonygres/ddl/column.py": {
        "Column.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ],
                "data_type": [
                    "str",
                    "int"
                ],
                "collate": [
                    "int",
                    "Optional[str]",
                    "bool",
                    "Optional[List[str]]",
                    "Sequence"
                ]
            }
        },
        "Column.__repr__": {
            "name": "__repr__",
            "location": 15,
            "return": [
                "List[str]",
                "Mapping[str, Any]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "phonygres-master/phonygres/ddl/data_types.py": {
        "DataType.__eq__": {
            "name": "__eq__",
            "location": 4,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AbstractSet"
                ]
            }
        },
        "Unsupported.__new__": {
            "name": "__new__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "int",
                    "Type",
                    "Type[T]",
                    "str",
                    "Callable[[None], None]"
                ]
            }
        },
        "Bit.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "BitVarying.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "Character.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "Interval.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "int",
                    "List[int]",
                    "dict",
                    "str",
                    "frozenset",
                    "AbstractSet[str]"
                ],
                "p": [
                    "int",
                    "Optional[str]",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "bool"
                ]
            }
        },
        "Numeric.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "str",
                    "list",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "s": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "Time.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "bool",
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[bool]",
                    "List['cirq.Circuit']"
                ],
                "with_time_zone": [
                    "bool",
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[bool]",
                    "List['cirq.Circuit']"
                ]
            }
        },
        "Timestamp.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "bool",
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[bool]",
                    "List['cirq.Circuit']"
                ],
                "with_time_zone": [
                    "bool",
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[bool]",
                    "List['cirq.Circuit']"
                ]
            }
        }
    },
    "phonygres-master/phonygres/ddl/schema.py": {
        "Schema.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "Schema.add_table": {
            "name": "add_table",
            "location": 16,
            "return": [
                "str",
                "bool",
                "List[str]",
                "Tuple[int, int, int]"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "bool",
                    "str"
                ]
            }
        },
        "Schema.drop_table": {
            "name": "drop_table",
            "location": 23,
            "return": [
                "int",
                "list",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "str",
                    "bool",
                    "Callable",
                    "Set[str]"
                ]
            }
        }
    },
    "phonygres-master/phonygres/ddl/table.py": {
        "Table.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[Sequence[Any]]",
                    "bool"
                ],
                "columns": [
                    "str",
                    "list",
                    "Tuple[float, float]"
                ]
            }
        }
    },
    "phonygres-master/phonygres/ddl/__init__.py": {},
    "phonygres-master/phonygres/engine/executor.py": {
        "execute": {
            "name": "execute",
            "location": 20,
            "return": [
                "T"
            ],
            "arguments": {
                "tx": [
                    "database.Database",
                    "transaction.Transaction",
                    "tuple",
                    "str"
                ],
                "statement": [
                    "database.Database",
                    "transaction.Transaction",
                    "tuple",
                    "str"
                ],
                "target": [
                    "database.Database",
                    "transaction.Transaction",
                    "tuple",
                    "str"
                ]
            }
        }
    },
    "phonygres-master/phonygres/engine/__init__.py": {},
    "phonygres-master/phonygres/parser/parse.py": {
        "parse_sql": {
            "name": "parse_sql",
            "location": 12,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "sql": [
                    "str",
                    "Type[OrderedDict]",
                    "Type",
                    "Dict[str, str]"
                ]
            }
        },
        "parse_statement": {
            "name": "parse_statement",
            "location": 27,
            "return": [
                "type",
                "list"
            ],
            "arguments": {
                "it": [
                    "str"
                ]
            }
        }
    },
    "phonygres-master/phonygres/parser/parse_create.py": {
        "parse_create": {
            "name": "parse_create",
            "location": 11,
            "return": [
                "Optional[int]",
                "Optional[bool]",
                "Optional[str]"
            ],
            "arguments": {
                "it": [
                    "Callable[[Mapping], Awaitable]",
                    "str",
                    "int"
                ]
            }
        },
        "parse_create_table": {
            "name": "parse_create_table",
            "location": 94,
            "return": [
                "str",
                "markdown.util.etree.Element"
            ],
            "arguments": {
                "it": [
                    "Exception",
                    "Type",
                    "Optional[Exception]"
                ]
            }
        },
        "parse_columns": {
            "name": "parse_columns",
            "location": 114,
            "return": [
                "int",
                "List[str]",
                "Dict[int, int]",
                "str",
                "OrderedDict"
            ],
            "arguments": {
                "it": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "phonygres-master/phonygres/parser/util.py": {
        "StatementIter.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "statement": [
                    "int",
                    "str"
                ]
            }
        },
        "StatementIter._iter": {
            "name": "_iter",
            "location": 18,
            "return": [
                "ebl.transliteration.domain.tokens.Token"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatementIter.peek": {
            "name": "peek",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatementIter.next": {
            "name": "next",
            "location": 46,
            "return": [
                "set",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatementIter.next_opt": {
            "name": "next_opt",
            "location": 52,
            "return": [
                "FrozenSet[int]",
                "bool",
                "Optional[T]",
                "set",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatementIter.has_next": {
            "name": "has_next",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatementIter.assert_next": {
            "name": "assert_next",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[Exception]"
                ]
            }
        }
    },
    "phonygres-master/phonygres/parser/__init__.py": {},
    "phonygres-master/stubs/sqlparse/tokens.py": {},
    "phonygres-master/stubs/sqlparse/__init__.py": {
        "parse": {
            "name": "parse",
            "location": 5,
            "return": [],
            "arguments": {
                "sql": [],
                "encoding": []
            }
        }
    },
    "phonygres-master/stubs/sqlparse/sql/__init__.py": {
        "Token.match": {
            "name": "match",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "ttype": [],
                "values": []
            }
        },
        "TokenList.__iter__": {
            "name": "__iter__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TokenList.token_next": {
            "name": "token_next",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "idx": [],
                "skip_ws": [],
                "skip_cm": []
            }
        },
        "Statement.get_type": {
            "name": "get_type",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Statement._pprint_tree": {
            "name": "_pprint_tree",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Identifier.is_wildcard": {
            "name": "is_wildcard",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Identifier.get_typecast": {
            "name": "get_typecast",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Identifier.get_ordering": {
            "name": "get_ordering",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Identifier.get_array_indices": {
            "name": "get_array_indices",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "phonygres-master/tests/conftest.py": {
        "db": {
            "name": "db",
            "location": 4,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {}
        }
    },
    "phonygres-master/tests/ddl/test_create_table.py": {
        "test_empty_create": {
            "name": "test_empty_create",
            "location": 3,
            "return": [
                ""
            ],
            "arguments": {
                "db": []
            }
        },
        "test_basic_create": {
            "name": "test_basic_create",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "db": []
            }
        }
    }
}
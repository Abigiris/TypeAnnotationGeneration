{
    "phypy-master/setup.py": {},
    "phypy-master/docs/conf.py": {},
    "phypy-master/phypy/analog.py": {
        "PowerAmp.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "order": [
                    "int",
                    "Tuple[int, int]",
                    "bool"
                ],
                "memory_depth": [
                    "float",
                    "bool",
                    "dict",
                    "list"
                ],
                "memory_stride": [
                    "int",
                    "Tuple[int, int]",
                    "bool"
                ],
                "noise_variance": [
                    "bool",
                    "int",
                    "Sequence[Sequence[float]]",
                    "float"
                ],
                "add_lo_leakage": [
                    "bool",
                    "Tuple[str, int]",
                    "int",
                    "str"
                ],
                "add_iq_imbalance": [
                    "bool",
                    "Tuple[str, int]",
                    "int",
                    "str"
                ],
                "seed": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "PowerAmp.transmit": {
            "name": "transmit",
            "location": 54,
            "return": [
                "bool",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "PowerAmp.make_new_model": {
            "name": "make_new_model",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pa_input": [
                    "int",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray",
                    "Tuple[int, int]"
                ],
                "pa_output": [
                    "numpy.array",
                    "float",
                    "Union[int, float]",
                    "bool"
                ]
            }
        },
        "PowerAmp.calculate_nmse": {
            "name": "calculate_nmse",
            "location": 65,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "desired": [
                    "int",
                    "Callable",
                    "str"
                ],
                "actual": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "phypy-master/phypy/cli.py": {
        "main": {
            "name": "main",
            "location": 9,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "phypy-master/phypy/corrections.py": {
        "ILA_DPD.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "order": [
                    "int",
                    "List[float]",
                    "float"
                ],
                "memory_depth": [
                    "int",
                    "bool",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "memory_stride": [
                    "int",
                    "List[float]",
                    "float"
                ],
                "n_iterations": [
                    "int",
                    "list",
                    "Tuple[float, float]",
                    "float"
                ]
            }
        },
        "ILA_DPD.perform_learning": {
            "name": "perform_learning",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pa": [
                    "bytes",
                    "int",
                    "Tuple[Union[int, slice], Union[int, slice]]",
                    "str",
                    "list"
                ],
                "signal": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "phypy-master/phypy/dsp.py": {
        "frequency_shift": {
            "name": "frequency_shift",
            "location": 5,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "signal": [
                    "int",
                    "str",
                    "List[Tuple[int, int]]",
                    "numpy.ndarray",
                    "Optional[numpy.ndarray]"
                ],
                "shift_amount": [
                    "int",
                    "str",
                    "List[Tuple[int, int]]",
                    "numpy.ndarray",
                    "Optional[numpy.ndarray]"
                ],
                "sampling_rate": [
                    "int",
                    "str",
                    "List[Tuple[int, int]]",
                    "numpy.ndarray",
                    "Optional[numpy.ndarray]"
                ]
            }
        }
    },
    "phypy-master/phypy/modulators.py": {
        "OFDM.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_subcarriers": [
                    "int",
                    "List[List[int]]"
                ],
                "subcarrier_spacing": [
                    "int"
                ],
                "cp_length": [
                    "int"
                ],
                "constellation": [
                    "int"
                ],
                "seed": [
                    "int"
                ]
            }
        },
        "OFDM.use": {
            "name": "use",
            "location": 52,
            "return": [
                "str",
                "Dict[str, Any]",
                "Sequence[str]",
                "OrderedDict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "n_symbols": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "OFDM.frequency_to_time_domain": {
            "name": "frequency_to_time_domain",
            "location": 74,
            "return": [
                "str",
                "numpy.ndarray",
                "int"
            ],
            "arguments": {
                "self": [],
                "fd_symbol": [
                    "int",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "OFDM.time_to_frequency_domain": {
            "name": "time_to_frequency_domain",
            "location": 93,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "td_symbol": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "OFDM.add_cyclic_prefix": {
            "name": "add_cyclic_prefix",
            "location": 100,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "td_waveform": [
                    "bool"
                ]
            }
        },
        "OFDM.remove_cyclic_prefix": {
            "name": "remove_cyclic_prefix",
            "location": 118,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "td_grid": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "OFDM.qam_alphabet": {
            "name": "qam_alphabet",
            "location": 123,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "constellation": [
                    "List[numpy.ndarray]",
                    "dict",
                    "List[float]",
                    "str"
                ]
            }
        },
        "OFDM.demodulate": {
            "name": "demodulate",
            "location": 148,
            "return": [
                "str",
                "bool",
                "Optional[int]",
                "int",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "time_domain_rx_signal": [
                    "bool",
                    "List[int]",
                    "dict",
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "OFDM.calculate_evm": {
            "name": "calculate_evm",
            "location": 159,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "fd_rx_signal": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "phypy-master/phypy/structures.py": {
        "MemoryPolynomial.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "order": [
                    "str",
                    "int",
                    "Union[int, str]",
                    "Dict[str, Any]"
                ],
                "memory_depth": [
                    "str",
                    "Callable",
                    "int",
                    "Dict[str, Any]"
                ],
                "memory_stride": [
                    "str",
                    "int",
                    "Union[int, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "MemoryPolynomial.transmit": {
            "name": "transmit",
            "location": 19,
            "return": [
                "bool",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "numpy.ndarray",
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "MemoryPolynomial.perform_least_squares": {
            "name": "perform_least_squares",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "numpy.ndarray",
                    "int",
                    "float",
                    "str",
                    "T"
                ],
                "y": [
                    "numpy.ndarray",
                    "float",
                    "Sequence[int]",
                    "Sequence[float]"
                ]
            }
        },
        "MemoryPolynomial.setup_basis_matrix": {
            "name": "setup_basis_matrix",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "numpy.ndarray",
                    "numpy.array"
                ]
            }
        },
        "MemoryPolynomial.check_for_errors": {
            "name": "check_for_errors",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "order": [
                    "str",
                    "Sequence",
                    "Tuple[int]"
                ],
                "memory_depth": [
                    "Exception"
                ],
                "memory_stride": [
                    "Exception"
                ]
            }
        },
        "MemoryPolynomial.n_coeffs": {
            "name": "n_coeffs",
            "location": 62,
            "return": [
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryPolynomial.n_rows": {
            "name": "n_rows",
            "location": 67,
            "return": [
                "float",
                "numpy.ndarray",
                "str",
                "Dict[str, str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "phypy-master/phypy/__init__.py": {},
    "phypy-master/phypy/mimo/channels.py": {},
    "phypy-master/phypy/mimo/mimo.py": {
        "MimoTransmitter.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_antennas": [
                    "float",
                    "bool",
                    "int",
                    "numpy.ndarray"
                ],
                "n_users": [
                    "int",
                    "float"
                ],
                "precoder": [
                    "int",
                    "Optional[int]",
                    "Sequence[int]"
                ],
                "update_precoder_frequency": [
                    "int",
                    "Optional[int]",
                    "Sequence[int]"
                ]
            }
        },
        "MimoTransmitter.update_channel": {
            "name": "update_channel",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "str",
                    "Callable",
                    "bool",
                    "Optional[Any]"
                ]
            }
        },
        "MimoTransmitter.transmit": {
            "name": "transmit",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "symbols": [
                    "bool",
                    "Iterable[str]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "LinearPrecoder.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearPrecoder.precode": {
            "name": "precode",
            "location": 30,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "symbols": [
                    "str",
                    "Union[int, List[int]]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "LinearPrecoder.precode_update_process": {
            "name": "precode_update_process",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Optional[\"TreeNode\"]",
                    "int",
                    "List[str]",
                    "Callable",
                    "str",
                    "List[Type]"
                ]
            }
        },
        "ZeroForcing.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "channel_matrix": [
                    "int",
                    "bool",
                    "Union[str, int]"
                ],
                "update_rate": [
                    "int",
                    "bool",
                    "List[float]",
                    "bytes"
                ]
            }
        },
        "ZeroForcing.create_precoder_matrix": {
            "name": "create_precoder_matrix",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "channel_matrix": [
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "MIMO_Channel.channel_update_process": {
            "name": "channel_update_process",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str"
                ]
            }
        },
        "MimoAwgn.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_users": [
                    "int",
                    "bool",
                    "Optional[List[Any]]",
                    "float"
                ],
                "n_antennas": [
                    "int",
                    "bool",
                    "str"
                ],
                "n_subcarriers": [
                    "int",
                    "bool",
                    "str"
                ],
                "update_rate": [
                    "int",
                    "bool",
                    "BinaryIO",
                    "bytes"
                ]
            }
        },
        "MimoAwgn.update_channel": {
            "name": "update_channel",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "phypy-master/phypy/mimo/precoders.py": {},
    "phypy-master/phypy/mimo/__init__.py": {},
    "phypy-master/tests/test_phypy.py": {
        "response": {
            "name": "response",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_content": {
            "name": "test_content",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "response": [
                    "List[str]",
                    "dict"
                ]
            }
        },
        "test_command_line_interface": {
            "name": "test_command_line_interface",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_pa_setup": {
            "name": "test_pa_setup",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_pa_transmission_with_unit_coeff": {
            "name": "test_pa_transmission_with_unit_coeff",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ofdm_setup_lte_20mhz": {
            "name": "test_ofdm_setup_lte_20mhz",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ofdm_setup_lte_5mhz": {
            "name": "test_ofdm_setup_lte_5mhz",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_freq_shift": {
            "name": "test_freq_shift",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "phypy-master/tests/__init__.py": {}
}
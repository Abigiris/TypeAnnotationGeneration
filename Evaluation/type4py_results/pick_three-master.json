{
    "pick_three-master/build.py": {
        "oh_never_mind": {
            "name": "oh_never_mind",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "what": [
                    "str",
                    "Dict[str, Any]",
                    "Callable",
                    "bool"
                ]
            }
        },
        "has_source_code_tree_changed": {
            "name": "has_source_code_tree_changed",
            "location": 71,
            "return": [
                "bool",
                "str",
                "Mapping[str, T]"
            ],
            "arguments": {
                "what": [
                    "str",
                    "Callable",
                    "dict"
                ]
            }
        },
        "skip_if_no_change": {
            "name": "skip_if_no_change",
            "location": 79,
            "return": [
                "List[List[str]]",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "execute_with_environment": {
            "name": "execute_with_environment",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "command": [
                    "str",
                    "List[str]"
                ],
                "env": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "execute_get_text": {
            "name": "execute_get_text",
            "location": 106,
            "return": [
                "str",
                "int",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "command": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "bumpversion": {
            "name": "bumpversion",
            "location": 122,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "clean": {
            "name": "clean",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "compile": {
            "name": "compile",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "lint": {
            "name": "lint",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "nose_tests": {
            "name": "nose_tests",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "coverage": {
            "name": "coverage",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "docs": {
            "name": "docs",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "pip_check": {
            "name": "pip_check",
            "location": 202,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "compile_md": {
            "name": "compile_md",
            "location": 208,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "package": {
            "name": "package",
            "location": 213,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "echo": {
            "name": "echo",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "BuildState.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "what": [
                    "str"
                ],
                "where": [
                    "float",
                    "int"
                ]
            }
        },
        "BuildState.oh_never_mind": {
            "name": "oh_never_mind",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BuildState.has_source_code_tree_changed": {
            "name": "has_source_code_tree_changed",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "skip_if_no_change.real_decorator": {
            "name": "real_decorator",
            "location": 81,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "skip_if_no_change.real_decorator.wrapper": {
            "name": "wrapper",
            "location": 83,
            "return": [
                "Optional[Dict[str, str]]",
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {}
        }
    },
    "pick_three-master/setup.py": {
        "_read": {
            "name": "_read",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bytes",
                    "path.Path",
                    "Callable[[str], str]"
                ]
            }
        },
        "_read_requirements": {
            "name": "_read_requirements",
            "location": 34,
            "return": [
                "List[str]",
                "List[Tuple[str, Any]]",
                "commands.utils.types.FileList"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "PyTest.initialize_options": {
            "name": "initialize_options",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PyTest.run_tests": {
            "name": "run_tests",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pick_three-master/pick_three/agents_game.py": {
        "go": {
            "name": "go",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pick_three-master/pick_three/biased_rng.py": {
        "BiasedRng.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BiasedRng.pretty_patterns": {
            "name": "pretty_patterns",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BiasedRng.random_birthday": {
            "name": "random_birthday",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BiasedRng.date_derived": {
            "name": "date_derived",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "pick_three-master/pick_three/digits_class.py": {
        "Digits.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "chosen": [
                    "int",
                    "float"
                ],
                "pick": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Digits.in_range": {
            "name": "in_range",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "pick": [
                    "str",
                    "Union[int, str]",
                    "int",
                    "dict"
                ]
            }
        },
        "Digits.get_dist": {
            "name": "get_dist",
            "location": 52,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Digits.has_double": {
            "name": "has_double",
            "location": 66,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Digits.all_different": {
            "name": "all_different",
            "location": 79,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Digits.all_unique": {
            "name": "all_unique",
            "location": 92,
            "return": [
                "str",
                "Set[str]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Digits.six_ways": {
            "name": "six_ways",
            "location": 99,
            "return": [
                "str",
                "List[str]",
                "bool",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Digits.three_ways": {
            "name": "three_ways",
            "location": 133,
            "return": [
                "str",
                "List[str]",
                "bool",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Digits.__str__": {
            "name": "__str__",
            "location": 165,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Digits.__eq__": {
            "name": "__eq__",
            "location": 172,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        }
    },
    "pick_three-master/pick_three/digits_test.py": {
        "test_basics": {
            "name": "test_basics",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_invalids": {
            "name": "test_invalids",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pick_three-master/pick_three/game.py": {
        "WinLose.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WinLose.winnings": {
            "name": "winnings",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "Callable"
                ]
            }
        },
        "WinLose.pay_off_lookup": {
            "name": "pay_off_lookup",
            "location": 27,
            "return": [
                "bool",
                "Tuple[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Tuple[Type]",
                    "type",
                    "Optional[str]",
                    "Callable"
                ],
                "bet_type": [
                    "Tuple[Type]",
                    "type",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "Game.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.record_play": {
            "name": "record_play",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "player": [
                    "int",
                    "Tuple[int, int]",
                    "str",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]"
                ],
                "ticket": [
                    "int",
                    "tuple"
                ],
                "winning_number": [
                    "int",
                    "tuple"
                ]
            }
        },
        "Game.check_ticket": {
            "name": "check_ticket",
            "location": 112,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "ticket": [
                    "int",
                    "Callable",
                    "str"
                ],
                "draw": [
                    "str",
                    "float",
                    "bool",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "Game.six_way_box": {
            "name": "six_way_box",
            "location": 176,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "chosen": [
                    "int",
                    "Callable",
                    "str"
                ],
                "draw": [
                    "int",
                    "Callable",
                    "str"
                ],
                "ticket": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Game.three_way_box": {
            "name": "three_way_box",
            "location": 195,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "chosen": [
                    "Pattern",
                    "str",
                    "dict",
                    "Callable",
                    "list"
                ],
                "draw": [
                    "str",
                    "List[int]"
                ]
            }
        },
        "Game.draw_winner": {
            "name": "draw_winner",
            "location": 214,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pick_three-master/pick_three/game_tests.py": {
        "test_check_three_way_box": {
            "name": "test_check_three_way_box",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_check_six_way_box": {
            "name": "test_check_six_way_box",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_check_front_pair": {
            "name": "test_check_front_pair",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_check_back_pair": {
            "name": "test_check_back_pair",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_straight": {
            "name": "test_straight",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_three_way_combo": {
            "name": "test_three_way_combo",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_six_way_combo": {
            "name": "test_six_way_combo",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pick_three-master/pick_three/gaming_comission.py": {
        "GamingCommission.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pick_three-master/pick_three/main.py": {},
    "pick_three-master/pick_three/player.py": {
        "Strategy.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "maximum_loss": [
                    "int",
                    "bool",
                    "str",
                    "List['cirq.Circuit']"
                ],
                "sufficient_win": [
                    "int",
                    "bool",
                    "str",
                    "List['cirq.Circuit']"
                ]
            }
        },
        "Player.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bank": [
                    "int",
                    "bool",
                    "game.board.Board",
                    "float"
                ],
                "strategy": [
                    "int",
                    "bool",
                    "game.board.Board",
                    "float"
                ]
            }
        },
        "Player.stop_playing": {
            "name": "stop_playing",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pick_three-master/pick_three/simple_game.py": {
        "Game.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.draw_winner": {
            "name": "draw_winner",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.go": {
            "name": "go",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.summarize": {
            "name": "summarize",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "players": [
                    "Dict[str, object]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, int]]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "Game.round_and_around": {
            "name": "round_and_around",
            "location": 80,
            "return": [
                "int",
                "slice",
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "str",
                    "int"
                ],
                "players": [
                    "int",
                    "Dict[str, List[int]]",
                    "Dict[int, Any]"
                ]
            }
        }
    },
    "pick_three-master/pick_three/simulate_bank.py": {
        "Bank.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bet": [
                    "int",
                    "Tuple[int, int]",
                    "List[int]",
                    "Iterable[List[str]]",
                    "Tuple[int]"
                ],
                "amount": [
                    "int",
                    "Tuple[int, int]",
                    "List[int]",
                    "Iterable[List[str]]",
                    "Tuple[int]"
                ],
                "iterations": [
                    "int",
                    "Tuple[int, int]",
                    "List[int]",
                    "Iterable[List[str]]",
                    "Tuple[int]"
                ],
                "include_irr": [
                    "int",
                    "Tuple[int, int]",
                    "List[int]",
                    "Iterable[List[str]]",
                    "Tuple[int]"
                ],
                "npv_rate": [
                    "int",
                    "Tuple[int, int]",
                    "List[int]",
                    "Iterable[List[str]]",
                    "Tuple[int]"
                ]
            }
        },
        "Bank.desired_pattern": {
            "name": "desired_pattern",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bank.withdraw": {
            "name": "withdraw",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Bank.withdrawl_loop": {
            "name": "withdrawl_loop",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "actual": [
                    "numpy.ndarray",
                    "str",
                    "Union[str, bool, None]",
                    "Sequence['cirq.Qid']"
                ]
            }
        },
        "Bank.compare_flows": {
            "name": "compare_flows",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Bank.calculate_pay_back_period": {
            "name": "calculate_pay_back_period",
            "location": 122,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        }
    },
    "pick_three-master/pick_three/ticket.py": {
        "Bet.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pick": [
                    "int",
                    "bool"
                ],
                "bet_type": [
                    "bool",
                    "str"
                ],
                "amount": [
                    "int",
                    "bool"
                ],
                "chosen": [
                    "int",
                    "bool"
                ]
            }
        },
        "Bet.validate": {
            "name": "validate",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Bet.price_multiplier": {
            "name": "price_multiplier",
            "location": 66,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SheetOfTickets.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SheetOfTickets.add_ticket": {
            "name": "add_ticket",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ticket": [
                    "float",
                    "int"
                ]
            }
        },
        "SheetOfTickets.resolve_tickets": {
            "name": "resolve_tickets",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Ticket.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "combo_type": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Ticket.set_chosen": {
            "name": "set_chosen",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "digits": [
                    "bool",
                    "float"
                ]
            }
        },
        "Ticket.add_bet": {
            "name": "add_bet",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bet_type": [
                    "Type",
                    "type",
                    "str",
                    "Type[Any]"
                ],
                "amount": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "Ticket.add_six_way_combo": {
            "name": "add_six_way_combo",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Ticket.add_three_way_box_combo": {
            "name": "add_three_way_box_combo",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "bytes",
                    "str"
                ]
            }
        },
        "Ticket.add_six_way_box_combo": {
            "name": "add_six_way_box_combo",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "bytes",
                    "str"
                ]
            }
        },
        "Ticket.add_three_way_combo": {
            "name": "add_three_way_combo",
            "location": 228,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Ticket.chart": {
            "name": "chart",
            "location": 243,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        },
        "Ticket.payoffs": {
            "name": "payoffs",
            "location": 264,
            "return": [
                "bool",
                "List[int]",
                "Tuple[type]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "bool",
                    "str"
                ],
                "bet_type": [
                    "str",
                    "type",
                    "Type[Any]"
                ],
                "amount": [
                    "str",
                    "type",
                    "Type[Any]"
                ]
            }
        },
        "Ticket.combo_payoff": {
            "name": "combo_payoff",
            "location": 288,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state": [
                    "bool",
                    "Iterable"
                ],
                "combo_type": [
                    "bool",
                    "Iterable"
                ]
            }
        },
        "Ticket.price": {
            "name": "price",
            "location": 291,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ticket.check_valid": {
            "name": "check_valid",
            "location": 303,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pick_three-master/pick_three/ticket_build_test.py": {
        "test_straight_build": {
            "name": "test_straight_build",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_3_way_box_build": {
            "name": "test_3_way_box_build",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_straight_3_way_box_combo": {
            "name": "test_straight_3_way_box_combo",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_straight_6_way_box_combo": {
            "name": "test_straight_6_way_box_combo",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pick_three-master/pick_three/ticket_generator.py": {
        "make_ticket": {
            "name": "make_ticket",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "minimum_amount": [
                    "bool",
                    "str",
                    "Sequence[str]",
                    "Iterable[str]",
                    "List[str]"
                ],
                "maximum_amount": [
                    "bool",
                    "str",
                    "Sequence[str]",
                    "Iterable[str]",
                    "List[str]"
                ],
                "minimum_to_win": [
                    "bool",
                    "str",
                    "Sequence[str]",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        }
    },
    "pick_three-master/pick_three/which_bet_is_worst.py": {
        "which_is_worst": {
            "name": "which_is_worst",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "rounds": [
                    "int"
                ]
            }
        }
    },
    "pick_three-master/pick_three/__init__.py": {},
    "pick_three-master/pick_three/__main__.py": {},
    "pick_three-master/pick_three/__version__.py": {}
}
{
    "pingscan-master/setup.py": {},
    "pingscan-master/examples/example.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pingscan-master/pingscan/compat.py": {
        "loop_compat": {
            "name": "loop_compat",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [
                    "Union[object, type]",
                    "Dict[str, Any]"
                ]
            }
        },
        "loop_compat._sock_recv_into": {
            "name": "_sock_recv_into",
            "location": 21,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [
                    "str",
                    "bool"
                ],
                "fut": [
                    "Dict[str, str]",
                    "dict",
                    "str",
                    "Union[float, str]"
                ],
                "registered_fd": [
                    "types.ServiceT",
                    "ics.types.ContextDict"
                ],
                "sock": [
                    "bytes"
                ],
                "buf": [
                    "float",
                    "Hashable",
                    "str"
                ]
            }
        }
    },
    "pingscan-master/pingscan/icmp.py": {
        "parse": {
            "name": "parse",
            "location": 22,
            "return": [
                "Dict[str, Any]",
                "dict",
                "\"TextLine\""
            ],
            "arguments": {
                "packet": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "build": {
            "name": "build",
            "location": 28,
            "return": [
                "str",
                "bytearray",
                "bool",
                "Union[bytes, bytearray]",
                "dict"
            ],
            "arguments": {
                "seq": [
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "msg_id": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "msg_id_match": {
            "name": "msg_id_match",
            "location": 33,
            "return": [
                "int",
                "List[str]"
            ],
            "arguments": {
                "packet": [
                    "str"
                ],
                "msg_id": [
                    "str"
                ],
                "pos": [
                    "str"
                ],
                "family": [
                    "str",
                    "List[str]",
                    "List[int]",
                    "Optional[str]"
                ]
            }
        },
        "src_ip_from_packet": {
            "name": "src_ip_from_packet",
            "location": 37,
            "return": [
                "dict",
                "Exception",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "packet": [
                    "bytes",
                    "int",
                    "BinaryIO",
                    "Callable"
                ],
                "pos": [
                    "bytes",
                    "int",
                    "BinaryIO",
                    "Callable"
                ],
                "family": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "is_icmp_reply": {
            "name": "is_icmp_reply",
            "location": 42,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "packet": [
                    "str",
                    "int"
                ],
                "pos": [
                    "str",
                    "int"
                ],
                "family": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "pingscan-master/pingscan/pingscan.py": {
        "scan": {
            "name": "scan",
            "location": 26,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "ip": [
                    "str",
                    "int",
                    "Optional[Dict]"
                ],
                "network": [
                    "str",
                    "int",
                    "Optional[Dict]"
                ]
            }
        },
        "_check_working": {
            "name": "_check_working",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_parse_input": {
            "name": "_parse_input",
            "location": 71,
            "return": [
                "str",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "ip": [
                    "Union[List, str]",
                    "str",
                    "Callable"
                ],
                "network": [
                    "str",
                    "List[str]",
                    "int",
                    "bool",
                    "BinaryIO",
                    "bytes"
                ],
                "workers": [
                    "int",
                    "str",
                    "Union[Callable, Coroutine]"
                ]
            }
        },
        "send_multiple": {
            "name": "send_multiple",
            "location": 225,
            "return": [
                ""
            ],
            "arguments": {
                "send_done_count": [
                    "int",
                    "bytes",
                    "Optional[int]"
                ],
                "ips": [
                    "List[Tuple[str, str]]",
                    "bool",
                    "Optional[str]"
                ],
                "msg_id": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "AsyncPinger.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "AsyncPinger.ping": {
            "name": "ping",
            "location": 108,
            "return": [
                "List[int]",
                "Dict[str, int]",
                "List[dict]",
                "asyncio.Future"
            ],
            "arguments": {
                "self": [],
                "worker_tasks": [],
                "timeout": [
                    "str",
                    "int"
                ],
                "workers": [
                    "str",
                    "int"
                ]
            }
        },
        "AsyncPinger._process_callback": {
            "name": "_process_callback",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ip": [
                    "int",
                    "numpy.random.RandomState",
                    "str",
                    "T"
                ]
            }
        },
        "AsyncPinger.fetch_result": {
            "name": "fetch_result",
            "location": 193,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncPinger.process_packet": {
            "name": "process_packet",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "packet": [
                    "str",
                    "bool",
                    "Optional[cmk.utils.type_defs.HostAddress]"
                ],
                "store_address_callback": [
                    "Callable",
                    "bool",
                    "Dict[str, Any]",
                    "dict",
                    "set"
                ]
            }
        },
        "AsyncPinger._done_sending": {
            "name": "_done_sending",
            "location": 204,
            "return": [
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncPinger._timeout": {
            "name": "_timeout",
            "location": 207,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncPinger.send": {
            "name": "send",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "all_tasks": [
                    "Dict[int, List[Any]]",
                    "str",
                    "Dict[str, Any]",
                    "tests.utils.Strategy[paradigm.hints.Domain]",
                    "bool",
                    "T"
                ]
            }
        }
    },
    "pingscan-master/pingscan/resources.py": {
        "_create_socket": {
            "name": "_create_socket",
            "location": 9,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "get_eventloop": {
            "name": "get_eventloop",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "get_socket": {
            "name": "get_socket",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pingscan-master/pingscan/utils.py": {
        "_validate_ip": {
            "name": "_validate_ip",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "ip": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "split_addrs": {
            "name": "split_addrs",
            "location": 26,
            "return": [
                "int",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "ips": [
                    "str",
                    "Iterable[T]",
                    "list",
                    "Iterator[T]",
                    "Iterable[str]",
                    "bool"
                ],
                "workers": [
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "_generate_ips": {
            "name": "_generate_ips",
            "location": 45,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "ip": [
                    "str",
                    "List[List[int]]",
                    "Union[str, bool, None]"
                ],
                "netmask": [
                    "str",
                    "List[List[int]]",
                    "Union[str, bool, None]"
                ]
            }
        },
        "ip_mask_to_list": {
            "name": "ip_mask_to_list",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "ip": [
                    "str",
                    "Tuple[str, str]"
                ],
                "netmask": [
                    "str"
                ]
            }
        },
        "_gen_network_addr": {
            "name": "_gen_network_addr",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "net": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_gen_broadcast": {
            "name": "_gen_broadcast",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "net": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "host_count": {
            "name": "host_count",
            "location": 77,
            "return": [
                "int",
                "List[int]",
                "List[dict]"
            ],
            "arguments": {
                "ip": [
                    "int",
                    "Callable",
                    "str"
                ],
                "netmask": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ip_has_netmask": {
            "name": "ip_has_netmask",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "ip": [
                    "str"
                ]
            }
        },
        "_seperate_ip_netmask": {
            "name": "_seperate_ip_netmask",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "ip": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "split_networks": {
            "name": "split_networks",
            "location": 110,
            "return": [
                "Callable[[T], bool]",
                "str",
                "List[Tuple]",
                "bool"
            ],
            "arguments": {
                "ip": [
                    "str",
                    "int"
                ],
                "netmask": [
                    "Optional[bool]",
                    "int",
                    "bytearray",
                    "bool",
                    "Optional[int]"
                ],
                "partitions": [
                    "int",
                    "float"
                ]
            }
        },
        "_send": {
            "name": "_send",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "sock": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "dest": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "packet": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        }
    },
    "pingscan-master/pingscan/__init__.py": {},
    "pingscan-master/tests/test.py": {
        "loop": {
            "name": "loop",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        }
    }
}
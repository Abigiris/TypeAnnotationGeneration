{
    "pinner-backend-master/manage.py": {},
    "pinner-backend-master/config/models.py": {},
    "pinner-backend-master/config/schema.py": {},
    "pinner-backend-master/config/types.py": {},
    "pinner-backend-master/config/urls.py": {},
    "pinner-backend-master/config/views.py": {
        "sign_s3": {
            "name": "sign_s3",
            "location": 6,
            "return": [
                "Optional[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "pinner-backend-master/config/wsgi.py": {},
    "pinner-backend-master/config/__init__.py": {},
    "pinner-backend-master/config/settings/base.py": {},
    "pinner-backend-master/config/settings/local.py": {},
    "pinner-backend-master/config/settings/production.py": {},
    "pinner-backend-master/config/settings/test.py": {},
    "pinner-backend-master/config/settings/__init__.py": {},
    "pinner-backend-master/pinner/conftest.py": {
        "user": {
            "name": "user",
            "location": 9,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "request_factory": {
            "name": "request_factory",
            "location": 14,
            "return": [
                "int",
                "List[Dict[str, Any]]",
                "bool",
                "list"
            ],
            "arguments": {}
        }
    },
    "pinner-backend-master/pinner/utils.py": {
        "hash_file": {
            "name": "hash_file",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "file": [
                    "bytes",
                    "str",
                    "IO",
                    "Dict[str, Any]",
                    "TextIO",
                    "bool",
                    "list",
                    "Optional[str]"
                ],
                "block_size": [
                    "bytes",
                    "str",
                    "IO",
                    "Dict[str, Any]",
                    "TextIO",
                    "bool",
                    "list",
                    "Optional[str]"
                ]
            }
        },
        "notify_slack": {
            "name": "notify_slack",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "channel": [
                    "str",
                    "Optional[str]",
                    "float"
                ],
                "attachments": [
                    "str",
                    "Optional[str]",
                    "float"
                ]
            }
        }
    },
    "pinner-backend-master/pinner/__init__.py": {},
    "pinner-backend-master/pinner/contrib/__init__.py": {},
    "pinner-backend-master/pinner/contrib/sites/__init__.py": {},
    "pinner-backend-master/pinner/contrib/sites/migrations/0001_initial.py": {},
    "pinner-backend-master/pinner/contrib/sites/migrations/__init__.py": {},
    "pinner-backend-master/pinner/locations/admin.py": {},
    "pinner-backend-master/pinner/locations/apps.py": {},
    "pinner-backend-master/pinner/locations/locationThumbnail.py": {
        "get_photos.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "get_photos.get_urls": {
            "name": "get_urls",
            "location": 20,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pinner-backend-master/pinner/locations/models.py": {
        "send_slack_notification_city_created": {
            "name": "send_slack_notification_city_created",
            "location": 134,
            "return": [],
            "arguments": {
                "sender": [],
                "instance": [],
                "created": []
            }
        },
        "send_slack_notification_country_created": {
            "name": "send_slack_notification_country_created",
            "location": 151,
            "return": [],
            "arguments": {
                "sender": [],
                "instance": [],
                "created": []
            }
        },
        "Continent.country_count": {
            "name": "country_count",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Continent.user_log_count": {
            "name": "user_log_count",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Continent.__str__": {
            "name": "__str__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Continent.image_tag": {
            "name": "image_tag",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Country.city_count": {
            "name": "city_count",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Country.total_like_count": {
            "name": "total_like_count",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Country.user_log_count": {
            "name": "user_log_count",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Country.__str__": {
            "name": "__str__",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Country.image_tag": {
            "name": "image_tag",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "City.like_count": {
            "name": "like_count",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "City.user_count": {
            "name": "user_count",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "City.user_log_count": {
            "name": "user_log_count",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "City.__str__": {
            "name": "__str__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "City.image_tag": {
            "name": "image_tag",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Like.natural_time": {
            "name": "natural_time",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Like.__str__": {
            "name": "__str__",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pinner-backend-master/pinner/locations/mutations.py": {
        "CreateCity.mutate": {
            "name": "mutate",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "ReportLocation.mutate": {
            "name": "mutate",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "ToggleLikeCity.mutate": {
            "name": "mutate",
            "location": 304,
            "return": [],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "SlackReportLocation.mutate": {
            "name": "mutate",
            "location": 341,
            "return": [],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "CreateCity.mutate.get_locations_nearby_coords": {
            "name": "get_locations_nearby_coords",
            "location": 28,
            "return": [],
            "arguments": {
                "latitude": [],
                "longitude": [],
                "max_distance": []
            }
        },
        "ReportLocation.mutate.get_locations_nearby_coords": {
            "name": "get_locations_nearby_coords",
            "location": 154,
            "return": [],
            "arguments": {
                "latitude": [],
                "longitude": [],
                "max_distance": []
            }
        }
    },
    "pinner-backend-master/pinner/locations/queries.py": {
        "resolve_header": {
            "name": "resolve_header",
            "location": 21,
            "return": [
                "dict",
                "Dict[str, Set[str]]",
                "mypy.types.Instance"
            ],
            "arguments": {
                "self": [
                    "List[str]",
                    "Dict[str, Any]",
                    "Sequence[str]",
                    "bool",
                    "List[Tuple[str, str]]",
                    "tuple"
                ],
                "info": [
                    "bool"
                ]
            }
        },
        "resolve_search_countries": {
            "name": "resolve_search_countries",
            "location": 32,
            "return": [
                "bool",
                "int",
                "Dict[str, Any]",
                "Union[type, Tuple[type, ...]]",
                "kitovu.utils.JsonType",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [
                    "Dict[str, Any]",
                    "tuple",
                    "str"
                ],
                "info": []
            }
        },
        "resolve_search_continents": {
            "name": "resolve_search_continents",
            "location": 44,
            "return": [
                "bool",
                "int",
                "Dict[str, Any]",
                "Union[type, Tuple[type, ...]]",
                "kitovu.utils.JsonType",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [
                    "Dict[str, Any]",
                    "tuple",
                    "str"
                ],
                "info": []
            }
        },
        "resolve_city_profile": {
            "name": "resolve_city_profile",
            "location": 56,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [
                    "Dict[str, Any]"
                ],
                "info": []
            }
        },
        "resolve_get_samename_cities": {
            "name": "resolve_get_samename_cities",
            "location": 97,
            "return": [
                "bool",
                "int",
                "Set[str]",
                "Union[type, Tuple[type, ...]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [
                    "Dict[str, Any]",
                    "List[Tuple[str, str]]",
                    "tuple"
                ],
                "info": [
                    "Dict[str, Any]",
                    "List[Tuple[str, str]]",
                    "tuple"
                ]
            }
        },
        "resolve_city_users_now": {
            "name": "resolve_city_users_now",
            "location": 124,
            "return": [
                "bool",
                "types.Snapshot"
            ],
            "arguments": {
                "self": [
                    "Dict[str, Any]",
                    "str"
                ],
                "info": []
            }
        },
        "resolve_city_users_before": {
            "name": "resolve_city_users_before",
            "location": 149,
            "return": [
                "BaseException",
                "Dict[str, Any]",
                "starlette.types.Receive",
                "starlette.types.Scope"
            ],
            "arguments": {
                "self": [
                    "Dict[str, Any]",
                    "str"
                ],
                "info": []
            }
        },
        "resolve_country_profile": {
            "name": "resolve_country_profile",
            "location": 181,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [
                    "Dict[str, Any]"
                ],
                "info": []
            }
        },
        "resolve_get_cities_page": {
            "name": "resolve_get_cities_page",
            "location": 212,
            "return": [
                "str",
                "bool",
                "Callable",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [
                    "Dict[str, Any]",
                    "List[Tuple[str, str]]",
                    "tuple"
                ],
                "info": []
            }
        },
        "resolve_get_countries_page": {
            "name": "resolve_get_countries_page",
            "location": 235,
            "return": [
                "str",
                "bool",
                "Callable",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [
                    "Dict[str, Any]",
                    "List[Tuple[str, str]]",
                    "tuple"
                ],
                "info": []
            }
        },
        "resolve_get_nationality_users": {
            "name": "resolve_get_nationality_users",
            "location": 258,
            "return": [
                "cmk.utils.type_defs.UserId",
                "int",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [
                    "Dict[str, Any]",
                    "List[Tuple[str, str]]",
                    "bool"
                ],
                "info": []
            }
        },
        "resolve_get_residence_users": {
            "name": "resolve_get_residence_users",
            "location": 281,
            "return": [
                "cmk.utils.type_defs.UserId",
                "int",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [
                    "Dict[str, Any]",
                    "List[Tuple[str, str]]",
                    "bool"
                ],
                "info": []
            }
        },
        "resolve_country_users_now": {
            "name": "resolve_country_users_now",
            "location": 304,
            "return": [
                "bool",
                "types.Snapshot"
            ],
            "arguments": {
                "self": [
                    "Dict[str, Any]",
                    "str"
                ],
                "info": []
            }
        },
        "resolve_country_users_before": {
            "name": "resolve_country_users_before",
            "location": 329,
            "return": [
                "BaseException",
                "Dict[str, Any]",
                "starlette.types.Receive",
                "starlette.types.Scope"
            ],
            "arguments": {
                "self": [
                    "Dict[str, Any]",
                    "str"
                ],
                "info": []
            }
        },
        "resolve_get_countries": {
            "name": "resolve_get_countries",
            "location": 357,
            "return": [
                "bool",
                "int",
                "Set[str]",
                "Union[type, Tuple[type, ...]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [
                    "Dict[str, Any]",
                    "List[Tuple[str, str]]",
                    "tuple"
                ],
                "info": []
            }
        },
        "resolve_continent_profile": {
            "name": "resolve_continent_profile",
            "location": 370,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [
                    "Dict[str, Any]"
                ],
                "info": []
            }
        },
        "resolve_continent_users_now": {
            "name": "resolve_continent_users_now",
            "location": 404,
            "return": [
                "bool",
                "types.Snapshot"
            ],
            "arguments": {
                "self": [
                    "Dict[str, Any]",
                    "str"
                ],
                "info": []
            }
        },
        "resolve_continent_users_before": {
            "name": "resolve_continent_users_before",
            "location": 429,
            "return": [
                "BaseException",
                "Dict[str, Any]",
                "starlette.types.Receive",
                "starlette.types.Scope"
            ],
            "arguments": {
                "self": [
                    "Dict[str, Any]",
                    "str"
                ],
                "info": []
            }
        },
        "resolve_near_cities": {
            "name": "resolve_near_cities",
            "location": 457,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [
                    "Dict[str, Any]"
                ],
                "info": [
                    "Dict[str, Any]"
                ]
            }
        },
        "resolve_get_city_photo": {
            "name": "resolve_get_city_photo",
            "location": 497,
            "return": [
                "Dict[str, Any]",
                "bool",
                "int",
                "str",
                "Union[type, Tuple[type, ...]]"
            ],
            "arguments": {
                "self": [
                    "Dict[str, Any]",
                    "List[Tuple[str, str]]",
                    "tuple"
                ],
                "info": []
            }
        },
        "resolve_get_samename_cities.get_locations_nearby_coords": {
            "name": "get_locations_nearby_coords",
            "location": 105,
            "return": [],
            "arguments": {
                "latitude": [],
                "longitude": [],
                "max_distance": []
            }
        },
        "resolve_near_cities.get_locations_nearby_coords": {
            "name": "get_locations_nearby_coords",
            "location": 469,
            "return": [
                "List[List[int]]",
                "str",
                "Callable"
            ],
            "arguments": {
                "latitude": [
                    "dict",
                    "str",
                    "bytes"
                ],
                "longitude": [
                    "dict",
                    "str",
                    "bytes"
                ],
                "max_distance": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        }
    },
    "pinner-backend-master/pinner/locations/reversePlace.py": {
        "reverse_place": {
            "name": "reverse_place",
            "location": 6,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "placeId": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "pinner-backend-master/pinner/locations/schema.py": {},
    "pinner-backend-master/pinner/locations/tests.py": {},
    "pinner-backend-master/pinner/locations/types.py": {
        "CityType.resolve_is_liked": {
            "name": "resolve_is_liked",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "dict"
                ]
            }
        }
    },
    "pinner-backend-master/pinner/locations/views.py": {},
    "pinner-backend-master/pinner/locations/__init__.py": {},
    "pinner-backend-master/pinner/locations/migrations/0001_initial.py": {},
    "pinner-backend-master/pinner/locations/migrations/0002_auto_20200706_1301.py": {},
    "pinner-backend-master/pinner/locations/migrations/__init__.py": {},
    "pinner-backend-master/pinner/matchs/admin.py": {},
    "pinner-backend-master/pinner/matchs/apps.py": {},
    "pinner-backend-master/pinner/matchs/consumers.py": {
        "ChatConsumer.connect": {
            "name": "connect",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ChatConsumer.disconnect": {
            "name": "disconnect",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "close_code": [
                    "str",
                    "bool",
                    "int",
                    "Callable",
                    "Optional[str]"
                ]
            }
        },
        "ChatConsumer.receive": {
            "name": "receive",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "text_data": [
                    "str",
                    "List[str]",
                    "dict",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "pinner-backend-master/pinner/matchs/models.py": {
        "Match.country_count": {
            "name": "country_count",
            "location": 16,
            "return": [
                "Dict[int, Tuple[int, int]]",
                "List[str]",
                "Dict[str, Any]",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Match.natural_time": {
            "name": "natural_time",
            "location": 20,
            "return": [
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pinner-backend-master/pinner/matchs/mutations.py": {
        "Match.mutate": {
            "name": "mutate",
            "location": 21,
            "return": [
                "List[zerver.models.DefaultStreamGroup]",
                "Dict[str, Any]",
                "Optional[Dict[str, str]]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "UnMatch.mutate": {
            "name": "mutate",
            "location": 62,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Dict[Tuple[int, ...], float]"
            ],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "MarkAsReadMatch.mutate": {
            "name": "mutate",
            "location": 83,
            "return": [
                "bool",
                "Dict[str, Any]",
                "str",
                "Dict[str, str]",
                "Dict[str, Set[str]]"
            ],
            "arguments": {
                "self": [],
                "info": []
            }
        }
    },
    "pinner-backend-master/pinner/matchs/queries.py": {
        "resolve_get_matches": {
            "name": "resolve_get_matches",
            "location": 11,
            "return": [
                "str",
                "Type[types.C]",
                "Optional[str]",
                "Type[Any]"
            ],
            "arguments": {
                "self": [
                    "tuple",
                    "Dict[str, Any]",
                    "str"
                ],
                "info": [
                    "dict"
                ]
            }
        }
    },
    "pinner-backend-master/pinner/matchs/schema.py": {},
    "pinner-backend-master/pinner/matchs/tests.py": {},
    "pinner-backend-master/pinner/matchs/types.py": {
        "MatchType.resolve_is_host": {
            "name": "resolve_is_host",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "dict"
                ]
            }
        },
        "MatchType.resolve_is_guest": {
            "name": "resolve_is_guest",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "dict"
                ]
            }
        },
        "MatchType.resolve_is_matching": {
            "name": "resolve_is_matching",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "Mapping[str, Any]"
                ]
            }
        },
        "TokenType.resolve_is_self": {
            "name": "resolve_is_self",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "dict"
                ]
            }
        }
    },
    "pinner-backend-master/pinner/matchs/views.py": {},
    "pinner-backend-master/pinner/matchs/__init__.py": {},
    "pinner-backend-master/pinner/matchs/migrations/0001_initial.py": {},
    "pinner-backend-master/pinner/matchs/migrations/0002_auto_20200706_1301.py": {},
    "pinner-backend-master/pinner/matchs/migrations/__init__.py": {},
    "pinner-backend-master/pinner/notifications/admin.py": {},
    "pinner-backend-master/pinner/notifications/apps.py": {},
    "pinner-backend-master/pinner/notifications/models.py": {
        "Notification.natural_time": {
            "name": "natural_time",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Notification.__str__": {
            "name": "__str__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MoveNotification.natural_time": {
            "name": "natural_time",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pinner-backend-master/pinner/notifications/mutations.py": {
        "MarkAsRead.mutate": {
            "name": "mutate",
            "location": 18,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Dict[str, Set[str]]",
                "Dict[Tuple[int, ...], float]"
            ],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "AddTrip.mutate": {
            "name": "mutate",
            "location": 43,
            "return": [
                "Type[object]",
                "Type"
            ],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "EditTrip.mutate": {
            "name": "mutate",
            "location": 71,
            "return": [
                "bool",
                "int",
                "Dict[str, Any]",
                "zam_repondeur.models.Lecture"
            ],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "DeleteTrip.mutate": {
            "name": "mutate",
            "location": 108,
            "return": [
                "bool",
                "pybuses.types.Subscribable",
                "Optional[Set[int]]",
                "Mapping[str, str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "CalculateDistance.mutate": {
            "name": "mutate",
            "location": 132,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "info": []
            }
        }
    },
    "pinner-backend-master/pinner/notifications/queries.py": {
        "resolve_get_trips": {
            "name": "resolve_get_trips",
            "location": 14,
            "return": [
                "bool",
                "str",
                "Union[type, Tuple[type, ...]]"
            ],
            "arguments": {
                "self": [
                    "Dict[str, Any]",
                    "List[Tuple[str, str]]",
                    "tuple"
                ],
                "info": [
                    "Dict[str, Any]",
                    "List[Tuple[str, str]]",
                    "tuple"
                ]
            }
        }
    },
    "pinner-backend-master/pinner/notifications/schema.py": {},
    "pinner-backend-master/pinner/notifications/tests.py": {},
    "pinner-backend-master/pinner/notifications/types.py": {},
    "pinner-backend-master/pinner/notifications/views.py": {},
    "pinner-backend-master/pinner/notifications/__init__.py": {},
    "pinner-backend-master/pinner/notifications/migrations/0001_initial.py": {},
    "pinner-backend-master/pinner/notifications/migrations/0002_auto_20200706_1301.py": {},
    "pinner-backend-master/pinner/notifications/migrations/__init__.py": {},
    "pinner-backend-master/pinner/users/adapters.py": {
        "AccountAdapter.is_open_for_signup": {
            "name": "is_open_for_signup",
            "location": 7,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        },
        "AccountAdapter.save_user": {
            "name": "save_user",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.HttpResponse",
                    "dict"
                ],
                "user": [
                    "dict",
                    "django.db.models.query.QuerySet",
                    "Optional[bytes]"
                ],
                "form": [
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "pinner-backend-master/pinner/users/admin.py": {},
    "pinner-backend-master/pinner/users/apps.py": {},
    "pinner-backend-master/pinner/users/forms.py": {
        "UserCreationForm.clean_username": {
            "name": "clean_username",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pinner-backend-master/pinner/users/models.py": {
        "delete_attached_image": {
            "name": "delete_attached_image",
            "location": 200,
            "return": [],
            "arguments": {
                "sender": []
            }
        },
        "upload_image": {
            "name": "upload_image",
            "location": 143,
            "return": [],
            "arguments": {
                "instance": [],
                "filename": []
            }
        },
        "upload_thumbnail": {
            "name": "upload_thumbnail",
            "location": 148,
            "return": [],
            "arguments": {
                "instance": [],
                "filename": []
            }
        },
        "upload_app_thumbnail": {
            "name": "upload_app_thumbnail",
            "location": 153,
            "return": [],
            "arguments": {
                "instance": [],
                "filename": []
            }
        },
        "logo_image_upload_to": {
            "name": "logo_image_upload_to",
            "location": 210,
            "return": [],
            "arguments": {
                "instance": [],
                "filename": []
            }
        },
        "User.__str__": {
            "name": "__str__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.id": {
            "name": "id",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.photo_count": {
            "name": "photo_count",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.blocked_user_count": {
            "name": "blocked_user_count",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.city_count": {
            "name": "city_count",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.country_count": {
            "name": "country_count",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.continent_count": {
            "name": "continent_count",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.trip_count": {
            "name": "trip_count",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Avatar.like_count": {
            "name": "like_count",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Avatar.natural_time": {
            "name": "natural_time",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "delete_attached_image.natural_time": {
            "name": "natural_time",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pinner-backend-master/pinner/users/mutations.py": {
        "UpdateSNS.mutate": {
            "name": "mutate",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "ToggleSettings.mutate": {
            "name": "mutate",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "EditProfile.mutate": {
            "name": "mutate",
            "location": 310,
            "return": [],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "MarkAsMain.mutate": {
            "name": "mutate",
            "location": 504,
            "return": [],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "RegisterPush.mutate": {
            "name": "mutate",
            "location": 549,
            "return": [],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "DeleteProfile.mutate": {
            "name": "mutate",
            "location": 572,
            "return": [],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "UploadAvatar.mutate": {
            "name": "mutate",
            "location": 594,
            "return": [],
            "arguments": {
                "self": [],
                "info": [],
                "file": []
            }
        },
        "DeleteAvatar.mutate": {
            "name": "mutate",
            "location": 627,
            "return": [],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "FacebookConnect.mutate": {
            "name": "mutate",
            "location": 655,
            "return": [],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "AppleConnect.mutate": {
            "name": "mutate",
            "location": 830,
            "return": [],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "SlackReportUsers.mutate": {
            "name": "mutate",
            "location": 1000,
            "return": [],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "AddBlockUser.mutate": {
            "name": "mutate",
            "location": 1079,
            "return": [],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "DeleteBlockUser.mutate": {
            "name": "mutate",
            "location": 1104,
            "return": [],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "FacebookConnect.mutate.get_locations_nearby_coords": {
            "name": "get_locations_nearby_coords",
            "location": 674,
            "return": [],
            "arguments": {
                "latitude": [],
                "longitude": [],
                "max_distance": []
            }
        },
        "AppleConnect.mutate.get_locations_nearby_coords": {
            "name": "get_locations_nearby_coords",
            "location": 849,
            "return": [],
            "arguments": {
                "latitude": [],
                "longitude": [],
                "max_distance": []
            }
        }
    },
    "pinner-backend-master/pinner/users/queries.py": {
        "resolve_profile": {
            "name": "resolve_profile",
            "location": 10,
            "return": [
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [
                    "Dict[str, Any]"
                ],
                "info": [
                    "Dict[str, Any]"
                ]
            }
        },
        "resolve_get_same_trips": {
            "name": "resolve_get_same_trips",
            "location": 22,
            "return": [
                "str",
                "bool",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [
                    "Dict[str, Any]",
                    "List[Tuple[str, str]]",
                    "tuple"
                ],
                "info": []
            }
        },
        "resolve_get_avatars": {
            "name": "resolve_get_avatars",
            "location": 41,
            "return": [
                "dict",
                "str",
                "Dict[str, str]",
                "Dict[str, Any]",
                "apistar.types.WSGIEnviron"
            ],
            "arguments": {
                "self": [
                    "Dict[str, Any]",
                    "List[Tuple[str, str]]",
                    "tuple"
                ],
                "info": []
            }
        },
        "resolve_get_avatar_detail": {
            "name": "resolve_get_avatar_detail",
            "location": 53,
            "return": [
                "bool",
                "str",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [
                    "Dict[str, Any]",
                    "List[Tuple[str, str]]",
                    "tuple"
                ],
                "info": []
            }
        },
        "resolve_top_countries": {
            "name": "resolve_top_countries",
            "location": 66,
            "return": [
                "bool",
                "int",
                "Type[Any]",
                "bytes"
            ],
            "arguments": {
                "self": [
                    "Dict[str, Any]"
                ],
                "info": []
            }
        },
        "resolve_frequent_visits": {
            "name": "resolve_frequent_visits",
            "location": 80,
            "return": [
                "mypy.types.UnionType",
                "mypy.types.TupleType",
                "mypy.types.TypedDictType",
                "mypy.types.Type"
            ],
            "arguments": {
                "self": [
                    "List[dict]"
                ],
                "info": [
                    "Mapping[str, Any]",
                    "dict"
                ]
            }
        },
        "resolve_top_continents": {
            "name": "resolve_top_continents",
            "location": 94,
            "return": [
                "bool",
                "int",
                "Type[Any]",
                "bytes"
            ],
            "arguments": {
                "self": [
                    "Dict[str, Any]"
                ],
                "info": []
            }
        },
        "resolve_me": {
            "name": "resolve_me",
            "location": 108,
            "return": [
                "bool",
                "str",
                "List[zerver.models.DefaultStreamGroup]",
                "Mapping[str, Sequence[str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [
                    "Dict[str, Any]"
                ],
                "info": []
            }
        },
        "resolve_search_users": {
            "name": "resolve_search_users",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [
                    "str",
                    "Dict[str, Any]"
                ],
                "info": [
                    "dict"
                ]
            }
        },
        "resolve_user_list": {
            "name": "resolve_user_list",
            "location": 129,
            "return": [
                "Mapping[str, Any]",
                "List[zerver.models.DefaultStreamGroup]",
                "int"
            ],
            "arguments": {
                "self": [
                    "tuple",
                    "str",
                    "Dict[str, Any]"
                ],
                "info": []
            }
        },
        "resolve_get_blocked_user": {
            "name": "resolve_get_blocked_user",
            "location": 140,
            "return": [
                "str",
                "type",
                "models.Name",
                "taxonomy.db.models.Taxon"
            ],
            "arguments": {
                "self": [
                    "str",
                    "Dict[str, Any]",
                    "tuple"
                ],
                "info": [
                    "dict"
                ]
            }
        }
    },
    "pinner-backend-master/pinner/users/schema.py": {},
    "pinner-backend-master/pinner/users/types.py": {
        "UserType.resolve_is_self": {
            "name": "resolve_is_self",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "dict"
                ]
            }
        }
    },
    "pinner-backend-master/pinner/users/urls.py": {},
    "pinner-backend-master/pinner/users/views.py": {
        "UserUpdateView.get_success_url": {
            "name": "get_success_url",
            "location": 34,
            "return": [
                "bool",
                "Dict[int, dict]",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateView.get_object": {
            "name": "get_object",
            "location": 37,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserRedirectView.get_redirect_url": {
            "name": "get_redirect_url",
            "location": 48,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pinner-backend-master/pinner/users/__init__.py": {},
    "pinner-backend-master/pinner/users/management/__init__.py": {},
    "pinner-backend-master/pinner/users/management/commands/image_seed.py": {
        "Command.handle": {
            "name": "handle",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pinner-backend-master/pinner/users/management/commands/mega_seed.py": {
        "createCity": {
            "name": "createCity",
            "location": 16,
            "return": [],
            "arguments": {
                "cityId": []
            }
        },
        "createCity.get_locations_nearby_coords": {
            "name": "get_locations_nearby_coords",
            "location": 17,
            "return": [],
            "arguments": {
                "latitude": [],
                "longitude": [],
                "max_distance": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 677,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pinner-backend-master/pinner/users/management/commands/__init__.py": {},
    "pinner-backend-master/pinner/users/migrations/0001_initial.py": {},
    "pinner-backend-master/pinner/users/migrations/__init__.py": {},
    "pinner-backend-master/pinner/users/tests/factories.py": {
        "UserFactory.password": {
            "name": "password",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "create": [
                    "int",
                    "bool",
                    "str",
                    "Callable[[Any], T]"
                ],
                "extracted": [
                    "int",
                    "bool",
                    "str",
                    "Callable[[Any], T]"
                ]
            }
        }
    },
    "pinner-backend-master/pinner/users/tests/test_forms.py": {
        "TestUserCreationForm.test_clean_username": {
            "name": "test_clean_username",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pinner-backend-master/pinner/users/tests/test_models.py": {
        "test_user_get_absolute_url": {
            "name": "test_user_get_absolute_url",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        }
    },
    "pinner-backend-master/pinner/users/tests/test_urls.py": {
        "test_detail": {
            "name": "test_detail",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "test_list": {
            "name": "test_list",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_update": {
            "name": "test_update",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_redirect": {
            "name": "test_redirect",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pinner-backend-master/pinner/users/tests/test_views.py": {
        "TestUserUpdateView.test_get_success_url": {
            "name": "test_get_success_url",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL",
                    "str"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        },
        "TestUserUpdateView.test_get_object": {
            "name": "test_get_object",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        },
        "TestUserRedirectView.test_get_redirect_url": {
            "name": "test_get_redirect_url",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user": [
                    "django.conf.settings.AUTH_USER_MODEL",
                    "str",
                    "int",
                    "bool"
                ],
                "request_factory": [
                    "django.tesRequestFactory"
                ]
            }
        }
    },
    "pinner-backend-master/pinner/users/tests/__init__.py": {},
    "pinner-backend-master/pinner/verifications/admin.py": {},
    "pinner-backend-master/pinner/verifications/apps.py": {},
    "pinner-backend-master/pinner/verifications/models.py": {
        "create_key": {
            "name": "create_key",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "sender": [
                    "str",
                    "bool",
                    "int",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "Verification.__str__": {
            "name": "__str__",
            "location": 28,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pinner-backend-master/pinner/verifications/mutations.py": {
        "MarkAsVerified.mutate": {
            "name": "mutate",
            "location": 30,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Dict[str, Set[str]]",
                "Dict[Tuple[int, ...], float]"
            ],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "StartPhoneVerification.mutate": {
            "name": "mutate",
            "location": 55,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "bool"
                ]
            }
        },
        "CompletePhoneVerification.mutate": {
            "name": "mutate",
            "location": 111,
            "return": [
                "tuple",
                "mypy.types.Type",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "bool"
                ]
            }
        },
        "StartEditPhoneVerification.mutate": {
            "name": "mutate",
            "location": 290,
            "return": [
                "mypy.types.Type",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "CompleteEditPhoneVerification.mutate": {
            "name": "mutate",
            "location": 355,
            "return": [
                "List[zerver.models.DefaultStreamGroup]",
                "Optional[Dict[str, str]]",
                "bytes",
                "dict",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "StartEmailVerification.mutate": {
            "name": "mutate",
            "location": 401,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "bool"
                ]
            }
        },
        "CompleteEmailVerification.mutate": {
            "name": "mutate",
            "location": 449,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "bool"
                ]
            }
        },
        "StartEditEmailVerification.mutate": {
            "name": "mutate",
            "location": 611,
            "return": [
                "bool",
                "Dict[str, Any]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "CompleteEditEmailVerification.mutate": {
            "name": "mutate",
            "location": 669,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "bool"
                ]
            }
        },
        "CompletePhoneVerification.mutate.get_locations_nearby_coords": {
            "name": "get_locations_nearby_coords",
            "location": 146,
            "return": [
                "List[List[int]]",
                "str",
                "Callable"
            ],
            "arguments": {
                "latitude": [
                    "dict",
                    "str",
                    "bytes"
                ],
                "longitude": [
                    "dict",
                    "str",
                    "bytes"
                ],
                "max_distance": [
                    "int",
                    "daylighdb.models.User",
                    "core.models.Grouping",
                    "float"
                ]
            }
        },
        "CompleteEmailVerification.mutate.get_locations_nearby_coords": {
            "name": "get_locations_nearby_coords",
            "location": 474,
            "return": [
                "List[List[int]]",
                "str",
                "Callable"
            ],
            "arguments": {
                "latitude": [
                    "dict",
                    "str",
                    "bytes"
                ],
                "longitude": [
                    "dict",
                    "str",
                    "bytes"
                ],
                "max_distance": [
                    "int",
                    "daylighdb.models.User",
                    "core.models.Grouping",
                    "float"
                ]
            }
        }
    },
    "pinner-backend-master/pinner/verifications/queries.py": {
        "resolve_get_verifications": {
            "name": "resolve_get_verifications",
            "location": 6,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [
                    "Dict[str, Any]",
                    "List[Tuple[str, str]]",
                    "tuple"
                ],
                "info": [
                    "Dict[str, Any]",
                    "List[Tuple[str, str]]",
                    "tuple"
                ]
            }
        }
    },
    "pinner-backend-master/pinner/verifications/schema.py": {},
    "pinner-backend-master/pinner/verifications/sendEMAIL.py": {
        "sendVerificationEMAIL": {
            "name": "sendVerificationEMAIL",
            "location": 8,
            "return": [],
            "arguments": {
                "to": [],
                "key": []
            }
        },
        "sendConfirmEMAIL": {
            "name": "sendConfirmEMAIL",
            "location": 18,
            "return": [],
            "arguments": {
                "to": [],
                "key": []
            }
        }
    },
    "pinner-backend-master/pinner/verifications/sendSMS.py": {
        "sendSMS": {
            "name": "sendSMS",
            "location": 11,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "to": [
                    "str",
                    "int",
                    "float",
                    "TextIO"
                ],
                "body": [
                    "str",
                    "int",
                    "float",
                    "TextIO"
                ]
            }
        },
        "sendVerificationSMS": {
            "name": "sendVerificationSMS",
            "location": 17,
            "return": [
                "dict",
                "str",
                "IO[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "to": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            }
        }
    },
    "pinner-backend-master/pinner/verifications/tests.py": {},
    "pinner-backend-master/pinner/verifications/types.py": {},
    "pinner-backend-master/pinner/verifications/views.py": {},
    "pinner-backend-master/pinner/verifications/__init__.py": {},
    "pinner-backend-master/pinner/verifications/migrations/0001_initial.py": {},
    "pinner-backend-master/pinner/verifications/migrations/__init__.py": {}
}
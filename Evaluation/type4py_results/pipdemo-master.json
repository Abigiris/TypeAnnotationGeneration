{
    "pipdemo-master/black/black.py": {
        "main": {
            "name": "main",
            "location": 82,
            "return": [],
            "arguments": {
                "ctx": [],
                "line_length": [],
                "check": [],
                "fast": [],
                "src": []
            }
        },
        "format_file_in_place": {
            "name": "format_file_in_place",
            "location": 162,
            "return": [],
            "arguments": {
                "src": [],
                "line_length": [],
                "fast": [],
                "write_back": []
            }
        },
        "format_stdin_to_stdout": {
            "name": "format_stdin_to_stdout",
            "location": 181,
            "return": [],
            "arguments": {
                "line_length": [],
                "fast": []
            }
        },
        "format_file_contents": {
            "name": "format_file_contents",
            "location": 195,
            "return": [],
            "arguments": {
                "src_contents": [],
                "line_length": [],
                "fast": []
            }
        },
        "format_str": {
            "name": "format_str",
            "location": 212,
            "return": [],
            "arguments": {
                "src_contents": [],
                "line_length": []
            }
        },
        "lib2to3_parse": {
            "name": "lib2to3_parse",
            "location": 246,
            "return": [],
            "arguments": {
                "src_txt": []
            }
        },
        "lib2to3_unparse": {
            "name": "lib2to3_unparse",
            "location": 269,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "whitespace": {
            "name": "whitespace",
            "location": 860,
            "return": [],
            "arguments": {
                "leaf": []
            }
        },
        "preceding_leaf": {
            "name": "preceding_leaf",
            "location": 1078,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "is_delimiter": {
            "name": "is_delimiter",
            "location": 1096,
            "return": [],
            "arguments": {
                "leaf": []
            }
        },
        "generate_comments": {
            "name": "generate_comments",
            "location": 1117,
            "return": [],
            "arguments": {
                "leaf": []
            }
        },
        "split_line": {
            "name": "split_line",
            "location": 1162,
            "return": [],
            "arguments": {
                "line": [],
                "line_length": [],
                "inner": [],
                "py36": []
            }
        },
        "left_hand_split": {
            "name": "left_hand_split",
            "location": 1214,
            "return": [],
            "arguments": {
                "line": [],
                "py36": []
            }
        },
        "right_hand_split": {
            "name": "right_hand_split",
            "location": 1258,
            "return": [],
            "arguments": {
                "line": [],
                "py36": []
            }
        },
        "split_succeeded_or_raise": {
            "name": "split_succeeded_or_raise",
            "location": 1298,
            "return": [],
            "arguments": {
                "head": [],
                "body": [],
                "tail": []
            }
        },
        "delimiter_split": {
            "name": "delimiter_split",
            "location": 1311,
            "return": [],
            "arguments": {
                "line": [],
                "py36": []
            }
        },
        "is_import": {
            "name": "is_import",
            "location": 1361,
            "return": [],
            "arguments": {
                "leaf": []
            }
        },
        "normalize_prefix": {
            "name": "normalize_prefix",
            "location": 1375,
            "return": [],
            "arguments": {
                "leaf": []
            }
        },
        "is_python36": {
            "name": "is_python36",
            "location": 1386,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "gen_python_files_in_dir": {
            "name": "gen_python_files_in_dir",
            "location": 1417,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "assert_equivalent": {
            "name": "assert_equivalent",
            "location": 1487,
            "return": [],
            "arguments": {
                "src": [],
                "dst": []
            }
        },
        "assert_stable": {
            "name": "assert_stable",
            "location": 1548,
            "return": [],
            "arguments": {
                "src": [],
                "dst": [],
                "line_length": []
            }
        },
        "dump_to_file": {
            "name": "dump_to_file",
            "location": 1567,
            "return": [],
            "arguments": {}
        },
        "diff": {
            "name": "diff",
            "location": 1580,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "a_name": [],
                "b_name": []
            }
        },
        "Visitor.visit": {
            "name": "visit",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Visitor.visit_default": {
            "name": "visit_default",
            "location": 288,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "DebugVisitor.visit_default": {
            "name": "visit_default",
            "location": 298,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "BracketTracker.mark": {
            "name": "mark",
            "location": 371,
            "return": [],
            "arguments": {
                "self": [],
                "leaf": []
            }
        },
        "BracketTracker.any_open_brackets": {
            "name": "any_open_brackets",
            "location": 412,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BracketTracker.max_priority": {
            "name": "max_priority",
            "location": 416,
            "return": [],
            "arguments": {
                "self": [],
                "exclude": []
            }
        },
        "Line.append": {
            "name": "append",
            "location": 434,
            "return": [],
            "arguments": {
                "self": [],
                "leaf": [],
                "preformatted": []
            }
        },
        "Line.is_comment": {
            "name": "is_comment",
            "location": 455,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.is_decorator": {
            "name": "is_decorator",
            "location": 459,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.is_import": {
            "name": "is_import",
            "location": 463,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.is_class": {
            "name": "is_class",
            "location": 467,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.is_def": {
            "name": "is_def",
            "location": 475,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.is_flow_control": {
            "name": "is_flow_control",
            "location": 498,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.is_yield": {
            "name": "is_yield",
            "location": 506,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.maybe_remove_trailing_comma": {
            "name": "maybe_remove_trailing_comma",
            "location": 513,
            "return": [],
            "arguments": {
                "self": [],
                "closing": []
            }
        },
        "Line.maybe_increment_for_loop_variable": {
            "name": "maybe_increment_for_loop_variable",
            "location": 555,
            "return": [],
            "arguments": {
                "self": [],
                "leaf": []
            }
        },
        "Line.maybe_decrement_after_for_loop_variable": {
            "name": "maybe_decrement_after_for_loop_variable",
            "location": 569,
            "return": [],
            "arguments": {
                "self": [],
                "leaf": []
            }
        },
        "Line.maybe_adapt_standalone_comment": {
            "name": "maybe_adapt_standalone_comment",
            "location": 578,
            "return": [],
            "arguments": {
                "self": [],
                "comment": []
            }
        },
        "Line.append_comment": {
            "name": "append_comment",
            "location": 597,
            "return": [],
            "arguments": {
                "self": [],
                "comment": []
            }
        },
        "Line.last_non_delimiter": {
            "name": "last_non_delimiter",
            "location": 615,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.__str__": {
            "name": "__str__",
            "location": 623,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Line.__bool__": {
            "name": "__bool__",
            "location": 637,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmptyLineTracker.maybe_empty_lines": {
            "name": "maybe_empty_lines",
            "location": 654,
            "return": [],
            "arguments": {
                "self": [],
                "current_line": []
            }
        },
        "EmptyLineTracker._maybe_empty_lines": {
            "name": "_maybe_empty_lines",
            "location": 671,
            "return": [],
            "arguments": {
                "self": [],
                "current_line": []
            }
        },
        "LineGenerator.line": {
            "name": "line",
            "location": 731,
            "return": [],
            "arguments": {
                "self": [],
                "indent": []
            }
        },
        "LineGenerator.visit_default": {
            "name": "visit_default",
            "location": 747,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LineGenerator.visit_suite": {
            "name": "visit_suite",
            "location": 774,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LineGenerator.visit_stmt": {
            "name": "visit_stmt",
            "location": 788,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "keywords": []
            }
        },
        "LineGenerator.visit_simple_stmt": {
            "name": "visit_simple_stmt",
            "location": 800,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LineGenerator.visit_async_stmt": {
            "name": "visit_async_stmt",
            "location": 812,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LineGenerator.visit_decorators": {
            "name": "visit_decorators",
            "location": 826,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "LineGenerator.visit_SEMI": {
            "name": "visit_SEMI",
            "location": 831,
            "return": [],
            "arguments": {
                "self": [],
                "leaf": []
            }
        },
        "LineGenerator.visit_ENDMARKER": {
            "name": "visit_ENDMARKER",
            "location": 834,
            "return": [],
            "arguments": {
                "self": [],
                "leaf": []
            }
        },
        "LineGenerator.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 838,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Report.done": {
            "name": "done",
            "location": 1436,
            "return": [],
            "arguments": {
                "self": [],
                "src": [],
                "changed": []
            }
        },
        "Report.failed": {
            "name": "failed",
            "location": 1445,
            "return": [],
            "arguments": {
                "self": [],
                "src": [],
                "message": []
            }
        },
        "Report.return_code": {
            "name": "return_code",
            "location": 1451,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Report.__str__": {
            "name": "__str__",
            "location": 1463,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "assert_equivalent._v": {
            "name": "_v",
            "location": 1496,
            "return": [],
            "arguments": {
                "node": [],
                "depth": []
            }
        }
    },
    "pipdemo-master/black/setup.py": {
        "get_long_description": {
            "name": "get_long_description",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "get_version": {
            "name": "get_version",
            "location": 19,
            "return": [],
            "arguments": {}
        }
    },
    "pipdemo-master/black/blib2to3/pygram.py": {
        "Symbols.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "grammar": [
                    "pgen2.grammar.Grammar",
                    "bool",
                    "dict",
                    "int",
                    "Mapping[str, Sequence[str]]",
                    "Optional[int]"
                ]
            }
        }
    },
    "pipdemo-master/black/blib2to3/pytree.py": {
        "type_repr": {
            "name": "type_repr",
            "location": 21,
            "return": [
                "Mapping[str, Any]"
            ],
            "arguments": {
                "type_num": [
                    "int"
                ]
            }
        },
        "convert": {
            "name": "convert",
            "location": 396,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "gr": [
                    "str",
                    "Any"
                ],
                "raw_node": [
                    "str",
                    "list"
                ]
            }
        },
        "generate_matches": {
            "name": "generate_matches",
            "location": 829,
            "return": [
                ""
            ],
            "arguments": {
                "patterns": [
                    "str",
                    "bool"
                ],
                "nodes": [
                    "List[int]",
                    "int"
                ]
            }
        },
        "Base.__new__": {
            "name": "__new__",
            "location": 49,
            "return": [
                "float",
                "List[str]",
                "str",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "OrderedDict",
                    "Union[int, float]",
                    "str"
                ]
            }
        },
        "Base.__eq__": {
            "name": "__eq__",
            "location": 54,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[T]",
                    "Collection",
                    "Union[int, float]"
                ]
            }
        },
        "Base._eq": {
            "name": "_eq",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "List[str]",
                    "Union[int, float]",
                    "AbstractSet[T]"
                ]
            }
        },
        "Base.clone": {
            "name": "clone",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.post_order": {
            "name": "post_order",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.pre_order": {
            "name": "pre_order",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.replace": {
            "name": "replace",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "new": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Callable[..., T]"
                ]
            }
        },
        "Base.get_lineno": {
            "name": "get_lineno",
            "location": 124,
            "return": [
                "dict",
                "int",
                "str",
                "Dict[str, Any]",
                "Mapping[str, Any]",
                "Dict[str, Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.changed": {
            "name": "changed",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.remove": {
            "name": "remove",
            "location": 138,
            "return": [
                "int",
                "slice",
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.next_sibling": {
            "name": "next_sibling",
            "location": 152,
            "return": [
                "Optional[str]",
                "str",
                "bool",
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.prev_sibling": {
            "name": "prev_sibling",
            "location": 169,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.leaves": {
            "name": "leaves",
            "location": 184,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.depth": {
            "name": "depth",
            "location": 188,
            "return": [
                "io.TextIO",
                "Optional[int]",
                "Optional[List[Callable]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.get_suffix": {
            "name": "get_suffix",
            "location": 193,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Tuple[str]",
                    "str",
                    "Optional[bool]"
                ],
                "children": [
                    "Tuple[str]",
                    "int",
                    "List[int]",
                    "bool",
                    "str",
                    "Set[int]"
                ],
                "context": [
                    "Optional[Any]",
                    "str",
                    "Sequence[str]",
                    "tuple"
                ],
                "prefix": [
                    "bool",
                    "Type",
                    "int",
                    "Optional[Iterable[str]]",
                    "str",
                    "Optional[Type]",
                    "Optional[str]"
                ],
                "fixers_applied": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Node.__repr__": {
            "name": "__repr__",
            "location": 236,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__unicode__": {
            "name": "__unicode__",
            "location": 242,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node._eq": {
            "name": "_eq",
            "location": 253,
            "return": [
                "int",
                "type",
                "bool",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Node.clone": {
            "name": "clone",
            "location": 257,
            "return": [
                "bool",
                "str",
                "list",
                "Set[str]",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.post_order": {
            "name": "post_order",
            "location": 262,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.pre_order": {
            "name": "pre_order",
            "location": 268,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.prefix": {
            "name": "prefix",
            "location": 284,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str",
                    "bool"
                ]
            }
        },
        "Node.set_child": {
            "name": "set_child",
            "location": 288,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "child": [
                    "int",
                    "bool"
                ]
            }
        },
        "Node.insert_child": {
            "name": "insert_child",
            "location": 298,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "list",
                    "List[Dict[str, Any]]"
                ],
                "child": [
                    "int",
                    "list",
                    "List[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "Node.append_child": {
            "name": "append_child",
            "location": 307,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "child": [
                    "Optional[str]",
                    "float",
                    "Sequence['cirq.Qid']",
                    "T"
                ]
            }
        },
        "Leaf.__init__": {
            "name": "__init__",
            "location": 326,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Tuple[str]",
                    "Optional[bool]",
                    "str"
                ],
                "value": [
                    "str",
                    "float",
                    "int"
                ],
                "context": [
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "prefix": [
                    "Optional[str]",
                    "Optional[int]",
                    "List[str]",
                    "dict",
                    "Optional[bytes]",
                    "Optional[Sequence]",
                    "Optional[Any]"
                ],
                "fixers_applied": [
                    "str",
                    "bool"
                ]
            }
        },
        "Leaf.__repr__": {
            "name": "__repr__",
            "location": 345,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Leaf.__unicode__": {
            "name": "__unicode__",
            "location": 352,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Leaf._eq": {
            "name": "_eq",
            "location": 363,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Leaf.clone": {
            "name": "clone",
            "location": 367,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Leaf.leaves": {
            "name": "leaves",
            "location": 373,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Leaf.post_order": {
            "name": "post_order",
            "location": 376,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Leaf.pre_order": {
            "name": "pre_order",
            "location": 380,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Leaf.prefix": {
            "name": "prefix",
            "location": 392,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BasePattern.__new__": {
            "name": "__new__",
            "location": 436,
            "return": [
                "float",
                "List[str]",
                "str",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "list",
                    "str",
                    "Type[T]"
                ]
            }
        },
        "BasePattern.__repr__": {
            "name": "__repr__",
            "location": 441,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePattern.optimize": {
            "name": "optimize",
            "location": 447,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePattern.match": {
            "name": "match",
            "location": 455,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "type",
                    "Type[T]",
                    "Tuple[type]",
                    "str",
                    "Dict[str, Any]",
                    "Tuple[Type]"
                ],
                "results": [
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "dict",
                    "Dict[str, Set[str]]",
                    "type"
                ]
            }
        },
        "BasePattern.match_seq": {
            "name": "match_seq",
            "location": 480,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "Type[Set[Any]]",
                    "int",
                    "bool",
                    "AbstractSet[T]"
                ],
                "results": [
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "BasePattern.generate_matches": {
            "name": "generate_matches",
            "location": 490,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "set",
                    "str",
                    "bool",
                    "Pattern"
                ]
            }
        },
        "LeafPattern.__init__": {
            "name": "__init__",
            "location": 503,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Type[T]"
                ],
                "content": [
                    "Optional[int]",
                    "int",
                    "Optional[str]",
                    "Optional[List[Any]]"
                ],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "LeafPattern.match": {
            "name": "match",
            "location": 523,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Dict[int, str]",
                    "Dict[Any, str]",
                    "Dict[str, Tuple[int, int]]",
                    "dict",
                    "str",
                    "tuple",
                    "Set[str]"
                ],
                "results": [
                    "str",
                    "Pattern[str]",
                    "Sequence",
                    "type"
                ]
            }
        },
        "LeafPattern._submatch": {
            "name": "_submatch",
            "location": 529,
            "return": [
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict",
                    "bool",
                    "List[int]",
                    "tuple"
                ],
                "results": [
                    "str",
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        },
        "NodePattern.__init__": {
            "name": "__init__",
            "location": 549,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Type[T]"
                ],
                "content": [
                    "Optional[List[str]]",
                    "list",
                    "Optional[Mapping[str, Any]]",
                    "Tuple[Optional[str], Optional[str]]"
                ],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "NodePattern._submatch": {
            "name": "_submatch",
            "location": 578,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict",
                    "Dict[str, Any]",
                    "Callable",
                    "T",
                    "float"
                ],
                "results": [
                    "Optional[str]",
                    "Dict[str, Any]",
                    "type",
                    "bool",
                    "str"
                ]
            }
        },
        "WildcardPattern.__init__": {
            "name": "__init__",
            "location": 620,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "content": [
                    "Optional[bool]",
                    "Callable",
                    "dict",
                    "Optional[str]",
                    "Optional[Any]",
                    "str",
                    "List[str]"
                ],
                "min": [
                    "str",
                    "bool"
                ],
                "max": [
                    "str",
                    "bool"
                ],
                "name": [
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "WildcardPattern.optimize": {
            "name": "optimize",
            "location": 655,
            "return": [
                "str",
                "list",
                "int",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "WildcardPattern.match": {
            "name": "match",
            "location": 674,
            "return": [
                "type",
                "Tuple[float, float, float]",
                "int"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bytes",
                    "Callable"
                ],
                "results": [
                    "bytes",
                    "Callable"
                ]
            }
        },
        "WildcardPattern.match_seq": {
            "name": "match_seq",
            "location": 678,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "dict",
                    "Dict[str, bool]",
                    "Type[\"SerializationDialect\"]",
                    "Iterable"
                ],
                "results": [
                    "dict",
                    "List[Dict[str, Any]]",
                    "Dict[str, Set[str]]",
                    "Dict[str, Any]",
                    "Type[T]"
                ]
            }
        },
        "WildcardPattern.generate_matches": {
            "name": "generate_matches",
            "location": 689,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "dict",
                    "bytearray",
                    "bool"
                ]
            }
        },
        "WildcardPattern._iterative_matches": {
            "name": "_iterative_matches",
            "location": 734,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "int"
                ]
            }
        },
        "WildcardPattern._bare_name_matches": {
            "name": "_bare_name_matches",
            "location": 763,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "WildcardPattern._recursive_matches": {
            "name": "_recursive_matches",
            "location": 779,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "T"
                ],
                "count": [
                    "T",
                    "List[int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "NegatedPattern.__init__": {
            "name": "__init__",
            "location": 796,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "content": [
                    "Optional[Any]",
                    "Optional[str]"
                ]
            }
        },
        "NegatedPattern.match": {
            "name": "match",
            "location": 809,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool"
                ]
            }
        },
        "NegatedPattern.match_seq": {
            "name": "match_seq",
            "location": 813,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "nodes": []
            }
        },
        "NegatedPattern.generate_matches": {
            "name": "generate_matches",
            "location": 817,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "dict"
                ]
            }
        },
        "Base.__str__": {
            "name": "__str__",
            "location": 204,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pipdemo-master/black/blib2to3/__init__.py": {},
    "pipdemo-master/black/blib2to3/pgen2/conv.py": {
        "Converter.run": {
            "name": "run",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "graminit_h": [
                    "int",
                    "str",
                    "Sequence[T]",
                    "List[Dict]"
                ],
                "graminit_c": [
                    "int",
                    "str",
                    "Sequence[T]",
                    "List[Dict]"
                ]
            }
        },
        "Converter.parse_graminit_h": {
            "name": "parse_graminit_h",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "Converter.parse_graminit_c": {
            "name": "parse_graminit_c",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Converter.finish_off": {
            "name": "finish_off",
            "location": 249,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pipdemo-master/black/blib2to3/pgen2/driver.py": {
        "_generate_pickle_name": {
            "name": "_generate_pickle_name",
            "location": 112,
            "return": [
                "bool",
                "Iterable[int]",
                "List[int]",
                "int"
            ],
            "arguments": {
                "gt": [
                    "str",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "load_grammar": {
            "name": "load_grammar",
            "location": 119,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "gt": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "gp": [
                    "str",
                    "Optional[str]"
                ],
                "save": [
                    "bool",
                    "Optional[bool]"
                ],
                "force": [
                    "bool",
                    "int",
                    "str",
                    "dict"
                ],
                "logger": [
                    "Optional[logging.Logger]",
                    "str",
                    "logging.Logger",
                    "int"
                ]
            }
        },
        "_newer": {
            "name": "_newer",
            "location": 140,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ],
                "b": [
                    "str",
                    "int"
                ]
            }
        },
        "load_packaged_grammar": {
            "name": "load_packaged_grammar",
            "location": 149,
            "return": [
                "str",
                "bool",
                "int",
                "Hashable",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "package": [
                    "str",
                    "dict"
                ],
                "grammar_source": [
                    "str",
                    "list"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 169,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "Driver.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "grammar": [
                    "int",
                    "float",
                    "List[List[int]]"
                ],
                "convert": [
                    "int",
                    "float",
                    "List[List[int]]"
                ],
                "logger": [
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "Driver.parse_tokens": {
            "name": "parse_tokens",
            "location": 39,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "Iterable[Any]",
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Iterator[str]"
                ],
                "debug": [
                    "str",
                    "List[str]",
                    "Union[str, List]"
                ]
            }
        },
        "Driver.parse_stream_raw": {
            "name": "parse_stream_raw",
            "location": 92,
            "return": [
                "str",
                "Callable",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "IO",
                    "str",
                    "bytes",
                    "Tuple[str, str]",
                    "int"
                ],
                "debug": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "Driver.parse_stream": {
            "name": "parse_stream",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "stream": [
                    "io.StringIO",
                    "str",
                    "Optional[Iterable[Any]]"
                ],
                "debug": [
                    "io.StringIO",
                    "str",
                    "Optional[Iterable[Any]]"
                ]
            }
        },
        "Driver.parse_file": {
            "name": "parse_file",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "Optional[str]",
                    "str",
                    "bytes"
                ],
                "encoding": [
                    "Optional[str]",
                    "str",
                    "bytes"
                ],
                "debug": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Driver.parse_string": {
            "name": "parse_string",
            "location": 106,
            "return": [
                "str",
                "Optional[bool]",
                "Optional[Dict[str, Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "debug": [
                    "str"
                ]
            }
        }
    },
    "pipdemo-master/black/blib2to3/pgen2/grammar.py": {
        "_make_deterministic": {
            "name": "_make_deterministic",
            "location": 144,
            "return": [
                "Dict[str, Any]",
                "Dict[str, int]",
                "int",
                "Exception",
                "float",
                "List[str]"
            ],
            "arguments": {
                "top": [
                    "Dict[str, Any]"
                ]
            }
        },
        "Grammar.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Grammar.dump": {
            "name": "dump",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "Grammar.load": {
            "name": "load",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Union[str, Iterable[str]]"
                ]
            }
        },
        "Grammar.loads": {
            "name": "loads",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pkl": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "int"
                ]
            }
        },
        "Grammar.copy": {
            "name": "copy",
            "location": 115,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grammar.report": {
            "name": "report",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pipdemo-master/black/blib2to3/pgen2/literals.py": {
        "escape": {
            "name": "escape",
            "location": 19,
            "return": [
                "List[str]",
                "str",
                "Iterable[T]",
                "float",
                "int",
                "List[\"DictDataLoader\"]",
                "type"
            ],
            "arguments": {
                "m": [
                    "str",
                    "bool",
                    "Container[T]"
                ]
            }
        },
        "evalString": {
            "name": "evalString",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int",
                    "bytes",
                    "float"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pipdemo-master/black/blib2to3/pgen2/parse.py": {
        "ParseError.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "bool",
                    "Optional[int]",
                    "str",
                    "Tuple[str, int]",
                    "dict"
                ],
                "type": [
                    "Optional[int]",
                    "bool",
                    "Optional[List[str]]",
                    "dict"
                ],
                "value": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[BaseException]",
                    "T"
                ],
                "context": [
                    "bool",
                    "float",
                    "dict",
                    "Optional[List[str]]",
                    "Optional[int]"
                ]
            }
        },
        "Parser.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "grammar": [
                    "Collection[T]",
                    "bytes",
                    "str"
                ],
                "convert": [
                    "dict",
                    "str",
                    "slice",
                    "Sequence[Any]",
                    "List[str]"
                ]
            }
        },
        "Parser.setup": {
            "name": "setup",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "Parser.addtoken": {
            "name": "addtoken",
            "location": 113,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Type[BaseException]",
                    "BaseException"
                ],
                "value": [
                    "Type[BaseException]",
                    "BaseException"
                ],
                "context": [
                    "Tuple[object]",
                    "Type[BaseException]",
                    "BaseException"
                ]
            }
        },
        "Parser.classify": {
            "name": "classify",
            "location": 161,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Union[str, List[str]]",
                    "str"
                ],
                "value": [
                    "int",
                    "str"
                ],
                "context": [
                    "Optional[str]",
                    "BaseException",
                    "Type[BaseException]"
                ]
            }
        },
        "Parser.shift": {
            "name": "shift",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Optional[BaseException]",
                    "Type[BaseException]",
                    "Optional[Type[BaseException]]",
                    "int"
                ],
                "value": [
                    "Optional[BaseException]",
                    "Type[BaseException]",
                    "Optional[Type[BaseException]]",
                    "int"
                ],
                "newstate": [
                    "Callable[[None], None]",
                    "List[str]",
                    "str",
                    "bytes",
                    "Dict[str, Any]",
                    "ForwardRef"
                ],
                "context": [
                    "Optional[BaseException]",
                    "Type[BaseException]",
                    "Optional[Type[BaseException]]",
                    "int"
                ]
            }
        },
        "Parser.push": {
            "name": "push",
            "location": 184,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Type[Any]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "newdfa": [
                    "str",
                    "bool"
                ],
                "newstate": [
                    "ForwardRef",
                    "str",
                    "Type",
                    "Callable[[None], None]",
                    "List[str]",
                    "IO"
                ],
                "context": [
                    "Type[Any]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "Parser.pop": {
            "name": "pop",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pipdemo-master/black/blib2to3/pgen2/pgen.py": {
        "generate_grammar": {
            "name": "generate_grammar",
            "location": 384,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "ParserGenerator.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ],
                "stream": [
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "ParserGenerator.make_grammar": {
            "name": "make_grammar",
            "location": 27,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str",
                "Optional[int]",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.make_first": {
            "name": "make_first",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "str",
                    "List[str]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "ParserGenerator.make_label": {
            "name": "make_label",
            "location": 61,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "str",
                    "Union[tuple, list]",
                    "Iterator[Any]",
                    "Dict[str, Any]"
                ],
                "label": [
                    "str",
                    "Sequence[str]",
                    "int",
                    "Callable[..., T]",
                    "Optional[List]",
                    "tuple"
                ]
            }
        },
        "ParserGenerator.addfirstsets": {
            "name": "addfirstsets",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.calcfirst": {
            "name": "calcfirst",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "ParserGenerator.parse": {
            "name": "parse",
            "location": 145,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.make_dfa": {
            "name": "make_dfa",
            "location": 169,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "str"
                ],
                "finish": [
                    "int",
                    "float"
                ]
            }
        },
        "ParserGenerator.dump_nfa": {
            "name": "dump_nfa",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "start": [
                    "int",
                    "str",
                    "Dict[str, 'LabwareDefinition']",
                    "List[int]",
                    "Tuple[float, float]"
                ],
                "finish": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "ParserGenerator.dump_dfa": {
            "name": "dump_dfa",
            "location": 221,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[int]"
                ],
                "dfa": [
                    "str",
                    "int"
                ]
            }
        },
        "ParserGenerator.simplify_dfa": {
            "name": "simplify_dfa",
            "location": 228,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dfa": [
                    "list",
                    "List[str]",
                    "int",
                    "str"
                ]
            }
        },
        "ParserGenerator.parse_rhs": {
            "name": "parse_rhs",
            "location": 249,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.parse_alt": {
            "name": "parse_alt",
            "location": 266,
            "return": [
                "float",
                "Tuple[Any, Any, Any]",
                "bytearray",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.parse_item": {
            "name": "parse_item",
            "location": 276,
            "return": [
                "str",
                "bytes",
                "Dict[Tuple[int, int], int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.parse_atom": {
            "name": "parse_atom",
            "location": 296,
            "return": [
                "str",
                "list",
                "List[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.expect": {
            "name": "expect",
            "location": 313,
            "return": [
                "str",
                "int",
                "List[List[float]]"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Optional[str]",
                    "str"
                ],
                "value": [
                    "str",
                    "Optional[Type[BaseException]]",
                    "Optional[BaseException]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ParserGenerator.gettoken": {
            "name": "gettoken",
            "location": 321,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserGenerator.raise_error": {
            "name": "raise_error",
            "location": 328,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "Exception",
                    "str",
                    "Sequence[str]",
                    "tuple",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "NFAState.__init__": {
            "name": "__init__",
            "location": 339,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NFAState.addarc": {
            "name": "addarc",
            "location": 342,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "next": [
                    "Dict[\"core.Edge\", \"state.State\"]"
                ],
                "label": [
                    "Optional[str]",
                    "Collection[int]"
                ]
            }
        },
        "DFAState.__init__": {
            "name": "__init__",
            "location": 349,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "nfaset": [
                    "Optional[str]",
                    "int",
                    "dict",
                    "float",
                    "str"
                ],
                "final": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "DFAState.addarc": {
            "name": "addarc",
            "location": 357,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "next": [],
                "label": [
                    "int"
                ]
            }
        },
        "DFAState.unifystate": {
            "name": "unifystate",
            "location": 363,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "old": [
                    "int"
                ],
                "new": [
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "DFAState.__eq__": {
            "name": "__eq__",
            "location": 368,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list",
                    "bool",
                    "float"
                ]
            }
        },
        "ParserGenerator.make_dfa.closure": {
            "name": "closure",
            "location": 176,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "state": [
                    "int",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "ParserGenerator.make_dfa.addclosure": {
            "name": "addclosure",
            "location": 180,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "state": [
                    "str",
                    "List[T]"
                ],
                "base": [
                    "Type",
                    "float",
                    "type"
                ]
            }
        }
    },
    "pipdemo-master/black/blib2to3/pgen2/token.py": {
        "ISTERMINAL": {
            "name": "ISTERMINAL",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "ISNONTERMINAL": {
            "name": "ISNONTERMINAL",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "ISEOF": {
            "name": "ISEOF",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        }
    },
    "pipdemo-master/black/blib2to3/pgen2/tokenize.py": {
        "group": {
            "name": "group",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "any": {
            "name": "any",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "maybe": {
            "name": "maybe",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "printtoken": {
            "name": "printtoken",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "type": [
                    "str",
                    "bool"
                ],
                "token": [
                    "str",
                    "bool"
                ],
                "xxx_todo_changeme": [
                    "str",
                    "float",
                    "int",
                    "bool",
                    "Iterable[str]",
                    "Callable",
                    "Optional[bool]"
                ],
                "xxx_todo_changeme1": [
                    "str",
                    "float",
                    "int",
                    "bool",
                    "Iterable[str]",
                    "Callable",
                    "Optional[bool]"
                ],
                "line": [
                    "bool",
                    "List[str]",
                    "Type",
                    "int",
                    "str"
                ]
            }
        },
        "tokenize": {
            "name": "tokenize",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "readline": [
                    "int",
                    "Callable",
                    "str"
                ],
                "tokeneater": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "tokenize_loop": {
            "name": "tokenize_loop",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {
                "readline": [
                    "int",
                    "Callable",
                    "str"
                ],
                "tokeneater": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_get_normal_name": {
            "name": "_get_normal_name",
            "location": 256,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "orig_enc": [
                    "str",
                    "Callable",
                    "Tuple[str, str]",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "detect_encoding": {
            "name": "detect_encoding",
            "location": 267,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "readline": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "untokenize": {
            "name": "untokenize",
            "location": 340,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "generate_tokens": {
            "name": "generate_tokens",
            "location": 361,
            "return": [
                ""
            ],
            "arguments": {
                "readline": [
                    "Callable[[], str]",
                    "str",
                    "List[int]"
                ]
            }
        },
        "Untokenizer.__init__": {
            "name": "__init__",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Untokenizer.add_whitespace": {
            "name": "add_whitespace",
            "location": 204,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int"
                ]
            }
        },
        "Untokenizer.untokenize": {
            "name": "untokenize",
            "location": 211,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "iterable": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "Untokenizer.compat": {
            "name": "compat",
            "location": 225,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "Tuple[int, str]",
                    "List[str]"
                ],
                "iterable": [
                    "str",
                    "Iterator[str]",
                    "List[str]"
                ]
            }
        },
        "detect_encoding.read_or_stop": {
            "name": "read_or_stop",
            "location": 288,
            "return": [
                "str",
                "bytearray",
                "bytes",
                "int"
            ],
            "arguments": {}
        },
        "detect_encoding.find_cookie": {
            "name": "find_cookie",
            "location": 294,
            "return": [
                "Optional[str]",
                "str",
                "Optional[float]"
            ],
            "arguments": {
                "line": [
                    "bytes",
                    "str"
                ]
            }
        }
    },
    "pipdemo-master/black/blib2to3/pgen2/__init__.py": {},
    "pipdemo-master/black/tests/cantfit.py": {},
    "pipdemo-master/black/tests/comments.py": {
        "function": {
            "name": "function",
            "location": 24,
            "return": [
                "bool",
                "Iterable",
                "Type",
                "Iterable[Any]",
                "T"
            ],
            "arguments": {
                "default": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "pipdemo-master/black/tests/comments2.py": {
        "inline_comments_in_brackets_ruin_everything": {
            "name": "inline_comments_in_brackets_ruin_everything",
            "location": 128,
            "return": [
                "bool",
                "tuple",
                "Optional[Any]"
            ],
            "arguments": {}
        }
    },
    "pipdemo-master/black/tests/composition.py": {
        "C.test": {
            "name": "test",
            "location": 3,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pipdemo-master/black/tests/expression.py": {
        "gen": {
            "name": "gen",
            "location": 267,
            "return": [],
            "arguments": {}
        }
    },
    "pipdemo-master/black/tests/fstring.py": {},
    "pipdemo-master/black/tests/function.py": {
        "func_no_args": {
            "name": "func_no_args",
            "location": 83,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "Optional[float]"
            ],
            "arguments": {}
        },
        "function_signature_stress_test": {
            "name": "function_signature_stress_test",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "number": [
                    "int",
                    "str"
                ],
                "no_annotation": [
                    "bool",
                    "str",
                    "BinaryIO",
                    "Optional[str]"
                ],
                "text": [
                    "int",
                    "str"
                ]
            }
        },
        "spaces": {
            "name": "spaces",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "a": [
                    "bool",
                    "int",
                    "float",
                    "Optional[Union[Any, Any]]"
                ],
                "b": [
                    "bool",
                    "int",
                    "float",
                    "Optional[Union[Any, Any]]"
                ],
                "c": [
                    "bool",
                    "int",
                    "float",
                    "Optional[Union[Any, Any]]"
                ],
                "d": [
                    "bool",
                    "int",
                    "float",
                    "Optional[Union[Any, Any]]"
                ],
                "e": [
                    "bool",
                    "int",
                    "float",
                    "Optional[Union[Any, Any]]"
                ],
                "f": [
                    "bool",
                    "int",
                    "float",
                    "Optional[Union[Any, Any]]"
                ],
                "g": [
                    "bool",
                    "int",
                    "float",
                    "Optional[Union[Any, Any]]"
                ],
                "h": [
                    "bool",
                    "int",
                    "float",
                    "Optional[Union[Any, Any]]"
                ],
                "i": [
                    "bool",
                    "int",
                    "float",
                    "Optional[Union[Any, Any]]"
                ]
            }
        },
        "spaces2": {
            "name": "spaces2",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "result": [
                    "bool",
                    "Exception"
                ]
            }
        },
        "example": {
            "name": "example",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str"
                ]
            }
        },
        "long_lines": {
            "name": "long_lines",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pipdemo-master/black/tests/import_spacing.py": {},
    "pipdemo-master/black/tests/test_black.py": {
        "dump_to_stderr": {
            "name": "dump_to_stderr",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "read_data": {
            "name": "read_data",
            "location": 25,
            "return": [
                "str",
                "Union[str, int]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "BlackTestCase.assertFormatEqual": {
            "name": "assertFormatEqual",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected": [
                    "List[str]",
                    "Dict[str, Any]",
                    "tuple"
                ],
                "actual": [
                    "List[\"VectorNode\"]",
                    "List[float]",
                    "Tuple[float, float]",
                    "dict",
                    "float",
                    "Dict[str, str]"
                ]
            }
        },
        "BlackTestCase.test_self": {
            "name": "test_self",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_black": {
            "name": "test_black",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_piping": {
            "name": "test_piping",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_setup": {
            "name": "test_setup",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_function": {
            "name": "test_function",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_expression": {
            "name": "test_expression",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_fstring": {
            "name": "test_fstring",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_comments": {
            "name": "test_comments",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_comments2": {
            "name": "test_comments2",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_cantfit": {
            "name": "test_cantfit",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_import_spacing": {
            "name": "test_import_spacing",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_composition": {
            "name": "test_composition",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_report": {
            "name": "test_report",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_is_python36": {
            "name": "test_is_python36",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackTestCase.test_report.out": {
            "name": "out",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "str"
                ]
            }
        },
        "BlackTestCase.test_report.err": {
            "name": "err",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "list",
                    "tuple",
                    "Callable[[], None]"
                ]
            }
        }
    },
    "pipdemo-master/pyk/pike/setup.py": {},
    "pipdemo-master/pyk/pike/docs/conf.py": {},
    "pipdemo-master/pyk/pike/pike/finder.py": {
        "PikeFinder.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "paths": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "PikeFinder.module_name_to_filename": {
            "name": "module_name_to_filename",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str",
                    "Callable",
                    "Optional[str]"
                ]
            }
        },
        "PikeFinder.get_import_filename": {
            "name": "get_import_filename",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "module_path": [
                    "str"
                ]
            }
        },
        "PikeFinder.find_module": {
            "name": "find_module",
            "location": 27,
            "return": [
                "str",
                "bool",
                "Callable[[str], None]"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str"
                ],
                "path": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        }
    },
    "pipdemo-master/pyk/pike/pike/loader.py": {
        "PikeLoader.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str",
                    "Set[str]",
                    "int",
                    "Iterable",
                    "List[str]"
                ],
                "module_path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "PikeLoader.is_package": {
            "name": "is_package",
            "location": 11,
            "return": [
                "str",
                "Optional[str]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "int",
                    "bool",
                    "str",
                    "Union[int, Tuple[int, ...]]"
                ]
            }
        },
        "PikeLoader.augment_module": {
            "name": "augment_module",
            "location": 19,
            "return": [
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str",
                    "Iterable[object]",
                    "List[str]",
                    "dict",
                    "Optional[Sequence[str]]",
                    "Callable"
                ],
                "module": [
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "PikeLoader.load_module": {
            "name": "load_module",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "fullname": []
            }
        },
        "PikeLoader.load_module_by_path": {
            "name": "load_module_by_path",
            "location": 42,
            "return": [
                "bool",
                "Optional[str]",
                "list"
            ],
            "arguments": {
                "self": [],
                "module_name": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "path": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "pipdemo-master/pyk/pike/pike/manager.py": {
        "PikeManager.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "search_paths": [
                    "str"
                ]
            }
        },
        "PikeManager.cleanup": {
            "name": "cleanup",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PikeManager.add_to_meta_path": {
            "name": "add_to_meta_path",
            "location": 53,
            "return": [
                "Iterator[object]",
                "List[Dict[str, str]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PikeManager.get_classes": {
            "name": "get_classes",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filter_func": [
                    "NamedTuple",
                    "Optional[List[str]]",
                    "list"
                ]
            }
        },
        "PikeManager.get_all_inherited_classes": {
            "name": "get_all_inherited_classes",
            "location": 86,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "base_class": [
                    "str"
                ]
            }
        },
        "PikeManager.get_module_names": {
            "name": "get_module_names",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PikeManager.get_package_names": {
            "name": "get_package_names",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PikeManager.__enter__": {
            "name": "__enter__",
            "location": 124,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PikeManager.__exit__": {
            "name": "__exit__",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type": [
                    "Optional[BaseException]"
                ],
                "value": [
                    "Optional[BaseException]"
                ],
                "traceback": [
                    "Optional[BaseException]"
                ]
            }
        },
        "PikeManager.__del__": {
            "name": "__del__",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pipdemo-master/pyk/pike/pike/__init__.py": {},
    "pipdemo-master/pyk/pike/pike/discovery/filesystem.py": {
        "is_package": {
            "name": "is_package",
            "location": 6,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "is_module": {
            "name": "is_module",
            "location": 11,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "get_name": {
            "name": "get_name",
            "location": 16,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "find_modules": {
            "name": "find_modules",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "find_packages": {
            "name": "find_packages",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "recursive_find_packages": {
            "name": "recursive_find_packages",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "str",
                    "IO"
                ]
            }
        },
        "recursive_find_modules": {
            "name": "recursive_find_modules",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "pipdemo-master/pyk/pike/pike/discovery/py.py": {
        "get_module_by_name": {
            "name": "get_module_by_name",
            "location": 8,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "full_module_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "is_child_of_module": {
            "name": "is_child_of_module",
            "location": 17,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Callable[..., Coroutine[Any, Any, Any]]"
                ],
                "parent": [
                    "Optional[str]",
                    "List[Tuple]",
                    "str"
                ]
            }
        },
        "_import_from_path": {
            "name": "_import_from_path",
            "location": 22,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "package_name": [
                    "str"
                ]
            }
        },
        "_child_modules": {
            "name": "_child_modules",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "module": [
                    "str"
                ]
            }
        },
        "classes_in_module": {
            "name": "classes_in_module",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "module": [
                    "Dict[str, str]",
                    "List[int]",
                    "Type[Any]",
                    "Iterable[str]",
                    "Dict[str, Any]",
                    "str",
                    "List[str]"
                ],
                "filter_func": [
                    "int",
                    "list",
                    "Iterable[str]",
                    "List[str]",
                    "List[int]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "get_inherited_classes": {
            "name": "get_inherited_classes",
            "location": 59,
            "return": [
                "Set[str]",
                "str",
                "List[int]",
                "dict"
            ],
            "arguments": {
                "module": [
                    "str",
                    "Dict[str, Any]"
                ],
                "base_class": [
                    "list",
                    "bool",
                    "bytes"
                ]
            }
        },
        "get_child_modules": {
            "name": "get_child_modules",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "module": [
                    "str",
                    "bool"
                ],
                "recursive": [
                    "str",
                    "bool",
                    "Type",
                    "IO[str]",
                    "type"
                ]
            }
        },
        "get_all_classes": {
            "name": "get_all_classes",
            "location": 87,
            "return": [
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "module": [
                    "bool",
                    "List[Tuple[str, str]]",
                    "str",
                    "Type"
                ],
                "filter_func": [
                    "str",
                    "List[Tuple[str, str]]",
                    "bool",
                    "Set[str]"
                ]
            }
        },
        "get_all_inherited_classes": {
            "name": "get_all_inherited_classes",
            "location": 108,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "module": [
                    "str",
                    "List[Tuple[str, str]]",
                    "bool",
                    "Iterable[Dict[str, Any]]",
                    "List[str]"
                ],
                "base_class": [
                    "bool",
                    "list",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "int",
                    "Type[Exception]"
                ]
            }
        },
        "get_inherited_classes.class_filter": {
            "name": "class_filter",
            "location": 66,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "get_all_inherited_classes.class_filter": {
            "name": "class_filter",
            "location": 115,
            "return": [
                "bool",
                "\"Wheel\"",
                "str"
            ],
            "arguments": {
                "cls": []
            }
        }
    },
    "pipdemo-master/pyk/pike/pike/discovery/__init__.py": {},
    "pipdemo-master/pyk/pike/tests/conftest.py": {
        "pike_finder": {
            "name": "pike_finder",
            "location": 19,
            "return": [
                "str",
                "bool",
                "List[str]",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "pike_init_py": {
            "name": "pike_init_py",
            "location": 29,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "tmpdir": [
                    "str",
                    "list",
                    "bytes"
                ]
            }
        },
        "pike_tmp_package": {
            "name": "pike_tmp_package",
            "location": 45,
            "return": [
                "float",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "pike_init_py": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "pipdemo-master/pyk/pike/tests/test_finder.py": {
        "test_module_name_to_filename": {
            "name": "test_module_name_to_filename",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "pike_finder": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_get_import_filename_module": {
            "name": "test_get_import_filename_module",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "pike_finder": [
                    "str"
                ]
            }
        },
        "test_get_import_filename_package": {
            "name": "test_get_import_filename_package",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "pike_finder": [
                    "str"
                ]
            }
        },
        "test_no_loader_returned_if_module_not_in_scope": {
            "name": "test_no_loader_returned_if_module_not_in_scope",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "pike_finder": [
                    "Dict[str, Sequence[Any]]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "pipdemo-master/pyk/pike/tests/test_loader.py": {
        "TestLoader.setup_method": {
            "name": "setup_method",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "dict",
                    "Iterable[str]",
                    "tuple"
                ]
            }
        },
        "TestLoader.teardown_method": {
            "name": "teardown_method",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "dict",
                    "Iterable[str]",
                    "tuple"
                ]
            }
        },
        "TestLoader.test_load_module_raises_import_error_with_bad_fullname": {
            "name": "test_load_module_raises_import_error_with_bad_fullname",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoader.test_is_package": {
            "name": "test_is_package",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoader.test_module_isnt_package": {
            "name": "test_module_isnt_package",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoader.test_load_package_module": {
            "name": "test_load_package_module",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoader.test_second_load_pulls_previously_loaded_module": {
            "name": "test_second_load_pulls_previously_loaded_module",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoader.test_load_module_by_path_with_invalid_path": {
            "name": "test_load_module_by_path_with_invalid_path",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoaderWithCompiled.setup_method": {
            "name": "setup_method",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "dict",
                    "Iterable[str]",
                    "tuple"
                ]
            }
        },
        "TestLoaderWithCompiled.teardown_method": {
            "name": "teardown_method",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "dict",
                    "Iterable[str]",
                    "tuple"
                ]
            }
        },
        "TestLoaderWithCompiled.test_loading_pyc": {
            "name": "test_loading_pyc",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLoaderWithCompiled.test_loading_py": {
            "name": "test_loading_py",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pipdemo-master/pyk/pike/tests/test_manager.py": {
        "finders_in_meta_path": {
            "name": "finders_in_meta_path",
            "location": 10,
            "return": [
                "str",
                "commands.utils.types.FileList",
                "Iterator[Tuple[str, Any, Any]]"
            ],
            "arguments": {}
        },
        "TestManager.test_manager_with_normal_instantiation": {
            "name": "test_manager_with_normal_instantiation",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestManager.test_manager_as_context_manager": {
            "name": "test_manager_as_context_manager",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestManager.test_double_add_meta_path": {
            "name": "test_double_add_meta_path",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestManager.test_del_removes_from_meta_path": {
            "name": "test_del_removes_from_meta_path",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestManager.test_double_cleanup_shouldnt_fail": {
            "name": "test_double_cleanup_shouldnt_fail",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestManager.test_get_classes": {
            "name": "test_get_classes",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestManager.test_get_classes_with_fixtures": {
            "name": "test_get_classes_with_fixtures",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pike_tmp_package": [
                    "str",
                    "dict"
                ]
            }
        },
        "TestManager.test_get_inherited_classes": {
            "name": "test_get_inherited_classes",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestManager.test_get_inherited_classes_with_fixtures": {
            "name": "test_get_inherited_classes_with_fixtures",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pike_tmp_package": []
            }
        }
    },
    "pipdemo-master/pyk/pike/tests/utils.py": {
        "make_tmpdir": {
            "name": "make_tmpdir",
            "location": 6,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "remove_dir": {
            "name": "remove_dir",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "write_file": {
            "name": "write_file",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "content": [
                    "str",
                    "bytes"
                ]
            }
        },
        "create_working_package": {
            "name": "create_working_package",
            "location": 20,
            "return": [
                "str",
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "location": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        }
    },
    "pipdemo-master/pyk/pike/tests/__init__.py": {},
    "pipdemo-master/pyk/pike/tests/discovery/test_filesystem.py": {
        "TestFilesystemDiscovery.setup_method": {
            "name": "setup_method",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "dict",
                    "Iterable[str]",
                    "tuple"
                ]
            }
        },
        "TestFilesystemDiscovery.teardown_method": {
            "name": "teardown_method",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "dict",
                    "Iterable[str]",
                    "tuple"
                ]
            }
        },
        "TestFilesystemDiscovery.test_find_modules": {
            "name": "test_find_modules",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFilesystemDiscovery.test_find_modules_in_empty_package": {
            "name": "test_find_modules_in_empty_package",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFilesystemDiscovery.test_find_packages": {
            "name": "test_find_packages",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFilesystemDiscovery.test_find_packages_in_empty_folder": {
            "name": "test_find_packages_in_empty_folder",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFilesystemDiscovery.test_recursive_find_packages": {
            "name": "test_recursive_find_packages",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFilesystemDiscovery.test_recursive_find_modules": {
            "name": "test_recursive_find_modules",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pipdemo-master/pyk/pike/tests/discovery/test_py.py": {
        "BaseTestCase.setup_method": {
            "name": "setup_method",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "List[str]",
                    "int",
                    "Optional[Callable[[Any, Any], None]]"
                ]
            }
        },
        "BaseTestCase.teardown_method": {
            "name": "teardown_method",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "dict",
                    "Iterable[str]",
                    "tuple"
                ]
            }
        },
        "TestPyDiscovery.test_get_module_by_name": {
            "name": "test_get_module_by_name",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPyDiscovery.test_is_child_of_module": {
            "name": "test_is_child_of_module",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPyDiscovery.test_import_from_path": {
            "name": "test_import_from_path",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPyDiscovery.test_child_modules_without_sub_packages": {
            "name": "test_child_modules_without_sub_packages",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPyDiscovery.test_child_modules_with_sub_packages": {
            "name": "test_child_modules_with_sub_packages",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDiscoverClasses.setup_method": {
            "name": "setup_method",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestDiscoverClasses.test_classes_in_module": {
            "name": "test_classes_in_module",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDiscoverClasses.test_get_all_classes": {
            "name": "test_get_all_classes",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDiscoverClasses.test_get_child_modules": {
            "name": "test_get_child_modules",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDiscoverClasses.test_get_all_inherited_classes": {
            "name": "test_get_all_inherited_classes",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDiscoverClasses.test_get_inherited_classes": {
            "name": "test_get_inherited_classes",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pipdemo-master/pyk/pike/tests/discovery/__init__.py": {}
}
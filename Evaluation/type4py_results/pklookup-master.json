{
    "pklookup-master/setup.py": {
        "get_requirements": {
            "name": "get_requirements",
            "location": 12,
            "return": [
                "typing.Iterator[builtins.str]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        }
    },
    "pklookup-master/pklookup/cli.py": {
        "cli": {
            "name": "cli",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "click.Context",
                    "str",
                    "bool"
                ],
                "config_file": [
                    "str",
                    "TextIO",
                    "List[int]",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "token": {
            "name": "token",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "token_add": {
            "name": "token_add",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "options": [
                    "str",
                    "Optional[str]"
                ],
                "role": [
                    "str"
                ],
                "description": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "token_delete": {
            "name": "token_delete",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "options": [
                    "int",
                    "dict"
                ],
                "token_id": [
                    "int",
                    "dict"
                ]
            }
        },
        "token_list": {
            "name": "token_list",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "options": [
                    "dict",
                    "OrderedDict",
                    "Dict[str, Any]"
                ]
            }
        },
        "server": {
            "name": "server",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "server_add": {
            "name": "server_add",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "options": [
                    "str",
                    "bytes",
                    "dict",
                    "Dict[str, str]",
                    "T"
                ],
                "public_key": [
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "server_delete": {
            "name": "server_delete",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "options": [
                    "int",
                    "dict",
                    "Optional[str]",
                    "Set[int]",
                    "float"
                ],
                "server_id": [
                    "int",
                    "dict",
                    "Optional[str]",
                    "Set[int]",
                    "float"
                ]
            }
        },
        "server_list": {
            "name": "server_list",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "options": [
                    "dict",
                    "OrderedDict",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "server_save_key": {
            "name": "server_save_key",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "options": [
                    "str",
                    "int"
                ],
                "server_id": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "tabulate": {
            "name": "tabulate",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "header": [
                    "List[str]",
                    "str",
                    "dict",
                    "bytes"
                ],
                "rows": [
                    "List[Dict[str, str]]",
                    "bytes",
                    "str",
                    "float"
                ]
            }
        }
    },
    "pklookup-master/pklookup/www.py": {
        "WWW.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Set[str]",
                    "int",
                    "dict"
                ],
                "token": [
                    "str",
                    "Optional[str]"
                ],
                "cafile": [
                    "str",
                    "Set[str]",
                    "int",
                    "dict"
                ]
            }
        },
        "WWW.get": {
            "name": "get",
            "location": 24,
            "return": [
                "str",
                "int",
                "list"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "WWW.delete": {
            "name": "delete",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "WWW.post": {
            "name": "post",
            "location": 36,
            "return": [
                "Optional[int]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "WWW._send": {
            "name": "_send",
            "location": 42,
            "return": [
                "str",
                "bool",
                "bytes",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Dict[str, str]"
                ],
                "method": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "WWW._json_decode": {
            "name": "_json_decode",
            "location": 71,
            "return": [
                "str",
                "Optional[float]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "res": [
                    "Optional[str]",
                    "bool",
                    "Optional[float]",
                    "int"
                ]
            }
        }
    },
    "pklookup-master/pklookup/__init__.py": {},
    "pklookup-master/pklookup/__main__.py": {},
    "pklookup-master/tests/helpers.py": {
        "ContextManagerMock.__enter__": {
            "name": "__enter__",
            "location": 5,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextManagerMock.__exit__": {
            "name": "__exit__",
            "location": 8,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "URLOpenMock.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "str",
                    "list",
                    "Dict[str, str]",
                    "Optional[Dict[str, Any]]",
                    "dict"
                ],
                "exception": [
                    "bool",
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "URLOpenMock.read": {
            "name": "read",
            "location": 21,
            "return": [
                "bytes",
                "bool",
                "str",
                "MutableMapping[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "amt": [
                    "int",
                    "List[str]",
                    "bool",
                    "list",
                    "Dict[str, Any]",
                    "List[List[str]]"
                ]
            }
        }
    },
    "pklookup-master/tests/test_cli.py": {
        "CliTest.test_no_url": {
            "name": "test_no_url",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CliTest.test_no_token": {
            "name": "test_no_token",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "AddTokenTest.setUp": {
            "name": "setUp",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddTokenTest.tearDown": {
            "name": "tearDown",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddTokenTest.test_no_role": {
            "name": "test_no_role",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddTokenTest.test_invalid_role": {
            "name": "test_invalid_role",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "AddTokenTest.test_failure_exception": {
            "name": "test_failure_exception",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "AddTokenTest.test_success_admin": {
            "name": "test_success_admin",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "AddTokenTest.test_success_server": {
            "name": "test_success_server",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "AddTokenTest.test_invalid_type": {
            "name": "test_invalid_type",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "AddTokenTest.test_missing_token": {
            "name": "test_missing_token",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "DeleteTokenTest.setUp": {
            "name": "setUp",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeleteTokenTest.tearDown": {
            "name": "tearDown",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeleteTokenTest.test_no_id": {
            "name": "test_no_id",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeleteTokenTest.test_failure_exception": {
            "name": "test_failure_exception",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "DeleteTokenTest.test_success": {
            "name": "test_success",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "DeleteTokenTest.test_invalid_type": {
            "name": "test_invalid_type",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "DeleteTokenTest.test_missing_message": {
            "name": "test_missing_message",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "ListTokenTest.setUp": {
            "name": "setUp",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListTokenTest.tearDown": {
            "name": "tearDown",
            "location": 284,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListTokenTest.test_invalid_type": {
            "name": "test_invalid_type",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "ListTokenTest.test_missing_tokens": {
            "name": "test_missing_tokens",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "ListTokenTest.test_missing_id_field": {
            "name": "test_missing_id_field",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "ListTokenTest.test_failure_exception": {
            "name": "test_failure_exception",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "ListTokenTest.test_success": {
            "name": "test_success",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ]
            }
        },
        "AddServerTest.setUp": {
            "name": "setUp",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddServerTest.tearDown": {
            "name": "tearDown",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddServerTest.test_no_public_key": {
            "name": "test_no_public_key",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddServerTest.test_public_key_not_found": {
            "name": "test_public_key_not_found",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddServerTest.test_failure_exception": {
            "name": "test_failure_exception",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "AddServerTest.test_success_arg": {
            "name": "test_success_arg",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "AddServerTest.test_success_file": {
            "name": "test_success_file",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "AddServerTest.test_invalid_type": {
            "name": "test_invalid_type",
            "location": 485,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "AddServerTest.test_missing_message": {
            "name": "test_missing_message",
            "location": 501,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "DeleteServerTest.setUp": {
            "name": "setUp",
            "location": 518,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeleteServerTest.tearDown": {
            "name": "tearDown",
            "location": 529,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeleteServerTest.test_no_id": {
            "name": "test_no_id",
            "location": 532,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeleteServerTest.test_failure_exception": {
            "name": "test_failure_exception",
            "location": 538,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "DeleteServerTest.test_success": {
            "name": "test_success",
            "location": 554,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "DeleteServerTest.test_invalid_type": {
            "name": "test_invalid_type",
            "location": 575,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "DeleteServerTest.test_missing_message": {
            "name": "test_missing_message",
            "location": 591,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "ListServerTest.setUp": {
            "name": "setUp",
            "location": 608,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListServerTest.tearDown": {
            "name": "tearDown",
            "location": 619,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListServerTest.test_invalid_type": {
            "name": "test_invalid_type",
            "location": 623,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "ListServerTest.test_missing_servers": {
            "name": "test_missing_servers",
            "location": 638,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "ListServerTest.test_missing_id_field": {
            "name": "test_missing_id_field",
            "location": 663,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "ListServerTest.test_failure_exception": {
            "name": "test_failure_exception",
            "location": 687,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "ListServerTest.test_success": {
            "name": "test_success",
            "location": 701,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ]
            }
        },
        "SaveKeyTest.setUp": {
            "name": "setUp",
            "location": 732,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SaveKeyTest.tearDown": {
            "name": "tearDown",
            "location": 745,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SaveKeyTest.test_missing_id": {
            "name": "test_missing_id",
            "location": 749,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SaveKeyTest.test_invalid_id": {
            "name": "test_invalid_id",
            "location": 760,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SaveKeyTest.test_invalid_type": {
            "name": "test_invalid_type",
            "location": 773,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "SaveKeyTest.test_missing_servers": {
            "name": "test_missing_servers",
            "location": 789,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "SaveKeyTest.test_missing_ip_field": {
            "name": "test_missing_ip_field",
            "location": 815,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "SaveKeyTest.test_missing_public_key_field": {
            "name": "test_missing_public_key_field",
            "location": 840,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "SaveKeyTest.test_empty_servers": {
            "name": "test_empty_servers",
            "location": 865,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "SaveKeyTest.test_failure_exception": {
            "name": "test_failure_exception",
            "location": 881,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "SaveKeyTest.test_success": {
            "name": "test_success",
            "location": 897,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock"
                ]
            }
        }
    },
    "pklookup-master/tests/test_www.py": {
        "SendOnlineTest.run": {
            "name": "run",
            "location": 31,
            "return": [
                "str",
                "Optional[object]",
                "Optional[str]",
                "Optional[type]"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "Optional[Any]",
                    "bool",
                    "float"
                ]
            }
        },
        "SendOnlineTest.test_expired": {
            "name": "test_expired",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendOnlineTest.test_wrong_host": {
            "name": "test_wrong_host",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendOnlineTest.test_self_signed": {
            "name": "test_self_signed",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendOnlineTest.test_untrusted_root": {
            "name": "test_untrusted_root",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendOnlineTest.test_rc4_md5": {
            "name": "test_rc4_md5",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendOnlineTest.test_rc4": {
            "name": "test_rc4",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendOnlineTest.test_3des": {
            "name": "test_3des",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendOnlineTest.test_null": {
            "name": "test_null",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendOnlineTest.test_dh480": {
            "name": "test_dh480",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendOnlineTest.test_dh512": {
            "name": "test_dh512",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendOnlineTest.test_invalid_expected_sct": {
            "name": "test_invalid_expected_sct",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendOnlineTest.test_subdomain_preloaded_hsts": {
            "name": "test_subdomain_preloaded_hsts",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendOnlineTest.test_superfish": {
            "name": "test_superfish",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendOnlineTest.test_e_dell_root": {
            "name": "test_e_dell_root",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendOnlineTest.test_dsd_test_provider": {
            "name": "test_dsd_test_provider",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendOnlineTest.test_preact_cli": {
            "name": "test_preact_cli",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendOnlineTest.test_webpack_dev_server": {
            "name": "test_webpack_dev_server",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendOnlineTest.test_mitm_software": {
            "name": "test_mitm_software",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendOnlineTest.test_sha1_2016": {
            "name": "test_sha1_2016",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendOnlineTest.test_sha1_2017": {
            "name": "test_sha1_2017",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetTest.test_method": {
            "name": "test_method",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock",
                    "mock.Mock"
                ]
            }
        },
        "GetTest.test_auth_header": {
            "name": "test_auth_header",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock",
                    "mock.Mock"
                ]
            }
        },
        "GetTest.test_data": {
            "name": "test_data",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock",
                    "mock.Mock"
                ]
            }
        },
        "GetTest.test_http_error_messsage": {
            "name": "test_http_error_messsage",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "GetTest.test_http_error_no_messsage": {
            "name": "test_http_error_no_messsage",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ]
            }
        },
        "GetTest.test_certificate_error": {
            "name": "test_certificate_error",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "PostTest.test_method": {
            "name": "test_method",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock",
                    "mock.Mock"
                ]
            }
        },
        "PostTest.test_auth_header": {
            "name": "test_auth_header",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock",
                    "mock.Mock"
                ]
            }
        },
        "PostTest.test_data": {
            "name": "test_data",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock",
                    "mock.Mock"
                ]
            }
        },
        "DeleteTest.test_method": {
            "name": "test_method",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock",
                    "mock.Mock"
                ]
            }
        },
        "DeleteTest.test_auth_header": {
            "name": "test_auth_header",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock",
                    "mock.Mock"
                ]
            }
        },
        "DeleteTest.test_data": {
            "name": "test_data",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock": [
                    "unittesmock.MagicMock",
                    "mock.Mock"
                ]
            }
        }
    },
    "pklookup-master/tests/__init__.py": {}
}
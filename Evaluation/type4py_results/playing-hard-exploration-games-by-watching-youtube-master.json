{
    "playing-hard-exploration-games-by-watching-youtube-master/cycle.py": {
        "cycle_consistency": {
            "name": "cycle_consistency",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "dataset1": [
                    "bool"
                ],
                "dataset2": [
                    "bool"
                ]
            }
        }
    },
    "playing-hard-exploration-games-by-watching-youtube-master/pretrain_embeddings.py": {
        "pretrain_embeddings": {
            "name": "pretrain_embeddings",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "loader": [
                    "torch.utils.data.DataLoader",
                    "List[torch.Tensor]",
                    "int"
                ],
                "tdc": [
                    "float",
                    "sideeye.data.Trial",
                    "List[str]"
                ],
                "cmc": [
                    "Dict[str, Any]",
                    "Callable[[T], T]",
                    "T"
                ],
                "tdc_classifier": [
                    "torch.Tensor",
                    "str"
                ],
                "cmc_classifier": [
                    "str",
                    "torch.Tensor",
                    "float"
                ],
                "optimizer": [
                    "str"
                ],
                "tsne_loaders": [
                    "int",
                    "Callable",
                    "str"
                ],
                "device": [
                    "int",
                    "bool",
                    "list",
                    "List[float]"
                ],
                "CMC_LAMBDA": [
                    "int",
                    "Callable",
                    "str"
                ],
                "NB_STEPS": [
                    "int",
                    "float"
                ],
                "SAVE_INTERVAL": [
                    "int",
                    "str",
                    "Iterable",
                    "Iterable[T]"
                ],
                "TSNE_INTERVAL": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ]
            }
        }
    },
    "playing-hard-exploration-games-by-watching-youtube-master/train_agent.py": {
        "get_checkpoint_loader": {
            "name": "get_checkpoint_loader",
            "location": 15,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "get_checkpoints": {
            "name": "get_checkpoints",
            "location": 34,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "tdc": [
                    "int",
                    "Sequence[str]",
                    "str"
                ],
                "loader": [
                    "str",
                    "bool"
                ]
            }
        },
        "train_agent": {
            "name": "train_agent",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "device": [
                    "BaseException"
                ]
            }
        }
    },
    "playing-hard-exploration-games-by-watching-youtube-master/tsne.py": {
        "get_tsne_loaders": {
            "name": "get_tsne_loaders",
            "location": 23,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "filenames": [
                    "str",
                    "bytes"
                ],
                "trims": [
                    "str",
                    "bytes"
                ],
                "crops": [
                    "str",
                    "bytes"
                ]
            }
        },
        "plot_tsne": {
            "name": "plot_tsne",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "tsne_loaders": [
                    "bool",
                    "list",
                    "Optional[str]",
                    "Union[None, str, Iterable[str]]"
                ],
                "tdc": [
                    "int",
                    "bool",
                    "float",
                    "Union[List, numpy.ndarray, pymatgen.core.lattice.Lattice]"
                ],
                "cmc": [
                    "int",
                    "bool",
                    "float",
                    "Union[List, numpy.ndarray, pymatgen.core.lattice.Lattice]"
                ],
                "device": [
                    "float",
                    "raiden.utils.BlockExpiration",
                    "raiden.utils.SecretHash",
                    "bool",
                    "numpy.ndarray",
                    "Union[List, numpy.ndarray, pymatgen.core.lattice.Lattice]"
                ],
                "save": [
                    "bool",
                    "list",
                    "Optional[str]",
                    "Union[None, str, Iterable[str]]"
                ],
                "log_to_wandb": [
                    "bool",
                    "list",
                    "Optional[str]",
                    "Union[None, str, Iterable[str]]"
                ]
            }
        }
    },
    "playing-hard-exploration-games-by-watching-youtube-master/commons/parser.py": {
        "get_args": {
            "name": "get_args",
            "location": 5,
            "return": [],
            "arguments": {
                "description": []
            }
        }
    },
    "playing-hard-exploration-games-by-watching-youtube-master/commons/save_load.py": {
        "save_models": {
            "name": "save_models",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "tdc": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "cmc": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "tdc_classifier": [
                    "str"
                ],
                "cmc_classifier": [
                    "str"
                ],
                "optimizer": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "path": [
                    "str",
                    "bool",
                    "list",
                    "List[str]"
                ],
                "prefix": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "load_models": {
            "name": "load_models",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "tdc": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "int"
                ],
                "cmc": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "int"
                ],
                "path": [
                    "str",
                    "bool"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "load_tdc": {
            "name": "load_tdc",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "tdc": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ],
                "path": [
                    "str"
                ],
                "prefix": [
                    "str",
                    "Tuple[str]"
                ]
            }
        }
    },
    "playing-hard-exploration-games-by-watching-youtube-master/commons/__init__.py": {},
    "playing-hard-exploration-games-by-watching-youtube-master/datasets/lazytdccmcdataset.py": {
        "LazyTDCCMCDataset.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "filenames": [],
                "trims": [],
                "crops": [],
                "frame_rate": []
            }
        },
        "LazyTDCCMCDataset.__len__": {
            "name": "__len__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LazyTDCCMCDataset.__getitem__": {
            "name": "__getitem__",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "LazyTDCCMCDataset._sample_label": {
            "name": "_sample_label",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LazyTDCCMCDataset._sample_distance_from_label": {
            "name": "_sample_distance_from_label",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "label": []
            }
        },
        "LazyTDCCMCDataset._sample_framestack": {
            "name": "_sample_framestack",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "start_frame": [],
                "reader": [],
                "trim": [],
                "crop": []
            }
        }
    },
    "playing-hard-exploration-games-by-watching-youtube-master/datasets/tdccmcdataset.py": {
        "TDCCMCDataset.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "filenames": [],
                "trims": [],
                "crops": [],
                "frame_rate": []
            }
        },
        "TDCCMCDataset.__len__": {
            "name": "__len__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TDCCMCDataset.__getitem__": {
            "name": "__getitem__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "TDCCMCDataset._sample_label": {
            "name": "_sample_label",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TDCCMCDataset._sample_distance_from_label": {
            "name": "_sample_distance_from_label",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "label": []
            }
        }
    },
    "playing-hard-exploration-games-by-watching-youtube-master/datasets/test_tdccmcdataset.py": {
        "test_batch_type": {
            "name": "test_batch_type",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_batch_dtype": {
            "name": "test_batch_dtype",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_batch_shape": {
            "name": "test_batch_shape",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "playing-hard-exploration-games-by-watching-youtube-master/datasets/test_videodataset.py": {
        "test_batch_type": {
            "name": "test_batch_type",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_batch_dtype": {
            "name": "test_batch_dtype",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_batch_shape": {
            "name": "test_batch_shape",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "playing-hard-exploration-games-by-watching-youtube-master/datasets/videoaudiodataset.py": {
        "VideoAudioDataset.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "int",
                    "utils.ResolveType",
                    "allennlp.data.Vocabulary"
                ],
                "trim": [
                    "Tuple[int, int]",
                    "int",
                    "Union[float, int]",
                    "float",
                    "bool",
                    "str",
                    "Tuple[float, float]"
                ],
                "crop": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "frame_rate": [
                    "str",
                    "int",
                    "IO[str]",
                    "dict",
                    "allennlp.data.Vocabulary"
                ]
            }
        },
        "VideoAudioDataset.__len__": {
            "name": "__len__",
            "location": 70,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoAudioDataset.__getitem__": {
            "name": "__getitem__",
            "location": 75,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str",
                    "Tuple[int, int, int]"
                ]
            }
        }
    },
    "playing-hard-exploration-games-by-watching-youtube-master/datasets/videodataset.py": {
        "VideoDataset.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "int",
                    "IO[str]",
                    "dict",
                    "allennlp.data.Vocabulary"
                ],
                "trim": [
                    "Tuple[int, int]",
                    "int",
                    "Union[float, int]",
                    "float",
                    "bool",
                    "str",
                    "Tuple[float, float]"
                ],
                "crop": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "frame_rate": [
                    "str",
                    "int",
                    "IO[str]",
                    "dict",
                    "allennlp.data.Vocabulary"
                ]
            }
        },
        "VideoDataset.__len__": {
            "name": "__len__",
            "location": 62,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoDataset.__getitem__": {
            "name": "__getitem__",
            "location": 65,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "playing-hard-exploration-games-by-watching-youtube-master/datasets/__init__.py": {},
    "playing-hard-exploration-games-by-watching-youtube-master/networks/classifier.py": {
        "Classifier.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "in_channels": [],
                "out_channels": []
            }
        },
        "Classifier.forward": {
            "name": "forward",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        }
    },
    "playing-hard-exploration-games-by-watching-youtube-master/networks/cmc.py": {
        "CMC.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "in_channels": [],
                "out_channels": []
            }
        },
        "CMC.forward": {
            "name": "forward",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        }
    },
    "playing-hard-exploration-games-by-watching-youtube-master/networks/tdc.py": {
        "ResidualBlock.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "in_channels": [],
                "out_channels": []
            }
        },
        "ResidualBlock.forward": {
            "name": "forward",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "TDC.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "in_channels": [],
                "out_channels": []
            }
        },
        "TDC.forward": {
            "name": "forward",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        }
    },
    "playing-hard-exploration-games-by-watching-youtube-master/networks/__init__.py": {},
    "playing-hard-exploration-games-by-watching-youtube-master/wrappers/atari_wrappers.py": {
        "make_atari": {
            "name": "make_atari",
            "location": 260,
            "return": [
                "int",
                "bool",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "env_id": [
                    "str",
                    "int",
                    "Pattern[str]",
                    "Union[str, bytes]"
                ],
                "timelimit": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "wrap_deepmind": {
            "name": "wrap_deepmind",
            "location": 272,
            "return": [
                "int",
                "bool",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "env": [
                    "IO",
                    "List[str]"
                ],
                "episode_life": [
                    "bool"
                ],
                "clip_rewards": [
                    "bool"
                ],
                "frame_stack": [
                    "bool"
                ],
                "scale": [
                    "bool"
                ]
            }
        },
        "NoopResetEnv.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str"
                ],
                "noop_max": [
                    "gym.Env",
                    "str",
                    "Mapping[str, str]",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "NoopResetEnv.reset": {
            "name": "reset",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoopResetEnv.step": {
            "name": "step",
            "location": 48,
            "return": [
                "int",
                "bool",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "ac": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "FireResetEnv.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "FireResetEnv.reset": {
            "name": "reset",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FireResetEnv.step": {
            "name": "step",
            "location": 71,
            "return": [
                "int",
                "bool",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "ac": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "EpisodicLifeEnv.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str"
                ]
            }
        },
        "EpisodicLifeEnv.step": {
            "name": "step",
            "location": 85,
            "return": [
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "dict"
                ]
            }
        },
        "EpisodicLifeEnv.reset": {
            "name": "reset",
            "location": 99,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MaxAndSkipEnv.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "dict",
                    "bool",
                    "int",
                    "str",
                    "Dict[str, Any]"
                ],
                "skip": [
                    "gym.Env",
                    "str",
                    "Mapping[str, str]",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "MaxAndSkipEnv.step": {
            "name": "step",
            "location": 123,
            "return": [
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "dict"
                ]
            }
        },
        "MaxAndSkipEnv.reset": {
            "name": "reset",
            "location": 142,
            "return": [
                "int",
                "bool",
                "Optional[AbstractSet[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClipRewardEnv.__init__": {
            "name": "__init__",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "ClipRewardEnv.reward": {
            "name": "reward",
            "location": 150,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "reward": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "WarpFrame.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "bool",
                    "Optional[Dict]"
                ],
                "width": [
                    "int",
                    "float",
                    "str",
                    "Optional[int]"
                ],
                "height": [
                    "int",
                    "float"
                ],
                "grayscale": [
                    "int",
                    "Optional[str]",
                    "bool",
                    "Dict[str, Any]",
                    "List[str]",
                    "MutableMapping[str, str]"
                ]
            }
        },
        "WarpFrame.observation": {
            "name": "observation",
            "location": 171,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "int",
                    "Optional[int]",
                    "float",
                    "dict"
                ]
            }
        },
        "FrameStack.__init__": {
            "name": "__init__",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "bool",
                    "float"
                ],
                "k": [
                    "int",
                    "str"
                ]
            }
        },
        "FrameStack.reset": {
            "name": "reset",
            "location": 201,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrameStack.step": {
            "name": "step",
            "location": 207,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "dict"
                ]
            }
        },
        "FrameStack._get_ob": {
            "name": "_get_ob",
            "location": 212,
            "return": [
                "List[str]",
                "bytes",
                "Optional[str]",
                "List[float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScaledFloatFrame.__init__": {
            "name": "__init__",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "int",
                    "type",
                    "bool"
                ]
            }
        },
        "ScaledFloatFrame.observation": {
            "name": "observation",
            "location": 224,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "observation": [
                    "float",
                    "numpy.ndarray",
                    "Union[numpy.ndarray, numpy.void]",
                    "int",
                    "str"
                ]
            }
        },
        "LazyFrames.__init__": {
            "name": "__init__",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "frames": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "LazyFrames._force": {
            "name": "_force",
            "location": 241,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyFrames.__array__": {
            "name": "__array__",
            "location": 247,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "dtype": [
                    "float",
                    "Optional[int]",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "LazyFrames.__len__": {
            "name": "__len__",
            "location": 253,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyFrames.__getitem__": {
            "name": "__getitem__",
            "location": 256,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "Iterator"
                ]
            }
        }
    },
    "playing-hard-exploration-games-by-watching-youtube-master/wrappers/make_env.py": {
        "make_env": {
            "name": "make_env",
            "location": 9,
            "return": [
                "Dict[str, str]",
                "List[str]",
                "str",
                "Mapping[str, str]",
                "\"jinja2.Environment\""
            ],
            "arguments": {
                "embedding_net": [
                    "List[str]",
                    "str"
                ],
                "ckpts": [
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "playing-hard-exploration-games-by-watching-youtube-master/wrappers/torch_wrappers.py": {
        "wrap_pytorch": {
            "name": "wrap_pytorch",
            "location": 59,
            "return": [
                "int",
                "bool",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "env": [
                    "str",
                    "torch.nn.Module",
                    "int",
                    "float"
                ]
            }
        },
        "TorchTensorWrapper.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str"
                ]
            }
        },
        "TorchTensorWrapper.reset": {
            "name": "reset",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TorchTensorWrapper.step": {
            "name": "step",
            "location": 26,
            "return": [
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "dict"
                ]
            }
        },
        "TorchPermuteWrapper.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "TorchPermuteWrapper.observation": {
            "name": "observation",
            "location": 53,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "observation": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "playing-hard-exploration-games-by-watching-youtube-master/wrappers/youtube_wrappers.py": {
        "wrap_youtube": {
            "name": "wrap_youtube",
            "location": 40,
            "return": [
                "int",
                "bool",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "env": [],
                "embedding_net": [],
                "ckpts": []
            }
        },
        "YouTubeWrapper.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "int"
                ],
                "embedding_net": [
                    "gym.Env",
                    "str",
                    "Mapping[str, str]",
                    "dict",
                    "List[str]"
                ],
                "ckpts": [
                    "gym.Env",
                    "str",
                    "Mapping[str, str]",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "YouTubeWrapper.step": {
            "name": "step",
            "location": 26,
            "return": [
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "playing-hard-exploration-games-by-watching-youtube-master/wrappers/__init__.py": {}
}
{
    "ppb-vector-canon/setup.py": {
        "requirements": {
            "name": "requirements",
            "location": 5,
            "return": [
                "List[str]",
                "int",
                "list",
                "Optional[List[str]]"
            ],
            "arguments": {
                "section": [
                    "Optional[bool]",
                    "bool",
                    "Optional[\"Outcome\"]",
                    "Optional[float]"
                ]
            }
        }
    },
    "ppb-vector-canon/docs/conf.py": {},
    "ppb-vector-canon/ppb_vector/__init__.py": {
        "Vector.__new__": {
            "name": "__new__",
            "location": 115,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Vector.__reduce__": {
            "name": "__reduce__",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vector.update": {
            "name": "update",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vector._unpack": {
            "name": "_unpack",
            "location": 183,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "Vector.__bool__": {
            "name": "__bool__",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vector.length": {
            "name": "length",
            "location": 202,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vector.asdict": {
            "name": "asdict",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vector.__len__": {
            "name": "__len__",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vector.__add__": {
            "name": "__add__",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vector.__radd__": {
            "name": "__radd__",
            "location": 246,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vector.__sub__": {
            "name": "__sub__",
            "location": 249,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vector.dot": {
            "name": "dot",
            "location": 265,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vector.scale_by": {
            "name": "scale_by",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "scalar": []
            }
        },
        "Vector.__mul__": {
            "name": "__mul__",
            "location": 300,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vector.__rmul__": {
            "name": "__rmul__",
            "location": 342,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vector.__truediv__": {
            "name": "__truediv__",
            "location": 345,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vector.__getitem__": {
            "name": "__getitem__",
            "location": 354,
            "return": [],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "Vector.__repr__": {
            "name": "__repr__",
            "location": 374,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vector.__eq__": {
            "name": "__eq__",
            "location": 377,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vector.__iter__": {
            "name": "__iter__",
            "location": 393,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vector.__neg__": {
            "name": "__neg__",
            "location": 397,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vector.angle": {
            "name": "angle",
            "location": 408,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vector.isclose": {
            "name": "isclose",
            "location": 435,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Vector._trig": {
            "name": "_trig",
            "location": 475,
            "return": [],
            "arguments": {
                "angle": []
            }
        },
        "Vector.rotate": {
            "name": "rotate",
            "location": 492,
            "return": [],
            "arguments": {
                "self": [],
                "angle": []
            }
        },
        "Vector.normalize": {
            "name": "normalize",
            "location": 508,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vector.truncate": {
            "name": "truncate",
            "location": 521,
            "return": [],
            "arguments": {
                "self": [],
                "max_length": []
            }
        },
        "Vector.scale_to": {
            "name": "scale_to",
            "location": 554,
            "return": [],
            "arguments": {
                "self": [],
                "length": []
            }
        },
        "Vector.scale": {
            "name": "scale",
            "location": 569,
            "return": [],
            "arguments": {
                "self": [],
                "length": []
            }
        },
        "Vector.decompose": {
            "name": "decompose",
            "location": 574,
            "return": [],
            "arguments": {
                "self": [],
                "basis": []
            }
        },
        "Vector.reflect": {
            "name": "reflect",
            "location": 590,
            "return": [],
            "arguments": {
                "self": [],
                "surface_normal": []
            }
        },
        "Vector.project": {
            "name": "project",
            "location": 612,
            "return": [],
            "arguments": {
                "self": [],
                "direction": []
            }
        }
    },
    "ppb-vector-canon/tests/benchmark.py": {},
    "ppb-vector-canon/tests/conftest.py": {
        "setup_hypothesis": {
            "name": "setup_hypothesis",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "ppb-vector-canon/tests/test_addition.py": {
        "test_multiples_values": {
            "name": "test_multiples_values",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "float",
                    "Optional[float]",
                    "Optional[int]",
                    "ppb_vector.Vector",
                    "tuple",
                    "int"
                ],
                "y": [
                    "float",
                    "Optional[float]",
                    "Optional[int]",
                    "ppb_vector.Vector",
                    "tuple",
                    "int"
                ],
                "expected": [
                    "float",
                    "Optional[float]",
                    "Optional[int]",
                    "ppb_vector.Vector",
                    "tuple",
                    "int"
                ]
            }
        },
        "test_addition_reverse": {
            "name": "test_addition_reverse",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "ppb_vector.Vector",
                    "float"
                ],
                "y": [
                    "ppb_vector.Vector",
                    "int",
                    "float"
                ]
            }
        }
    },
    "ppb-vector-canon/tests/test_angle.py": {
        "test_angle": {
            "name": "test_angle",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "left": [
                    "int",
                    "str",
                    "List[int]",
                    "Union[str, float]",
                    "bool"
                ],
                "right": [
                    "int",
                    "str",
                    "List[int]",
                    "Union[str, float]",
                    "bool"
                ],
                "expected": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_angle_range": {
            "name": "test_angle_range",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "left": [],
                "right": []
            }
        },
        "test_angle_additive": {
            "name": "test_angle_additive",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "left": [
                    "str",
                    "float"
                ],
                "middle": [
                    "str",
                    "float"
                ],
                "right": [
                    "str",
                    "float"
                ]
            }
        },
        "test_angle_aligned": {
            "name": "test_angle_aligned",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "ppb_vector.Vector",
                    "float"
                ],
                "scalar": [
                    "ppb_vector.Vector",
                    "float",
                    "List[float]"
                ]
            }
        }
    },
    "ppb-vector-canon/tests/test_constants.py": {
        "test_u": {
            "name": "test_u",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "test_v": {
            "name": "test_v",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_uv_angle": {
            "name": "test_uv_angle",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_zero": {
            "name": "test_zero",
            "location": 16,
            "return": [],
            "arguments": {}
        }
    },
    "ppb-vector-canon/tests/test_convert.py": {
        "test_convert_class": {
            "name": "test_convert_class",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "vector_like": [
                    "Type"
                ]
            }
        },
        "test_convert_tuple": {
            "name": "test_convert_tuple",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "vector": [
                    "ppb_vector.Vector",
                    "int"
                ]
            }
        },
        "test_convert_list": {
            "name": "test_convert_list",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "vector": [
                    "ppb_vector.Vector",
                    "str"
                ]
            }
        },
        "test_convert_dict": {
            "name": "test_convert_dict",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "vector": [
                    "ppb_vector.Vector",
                    "dict",
                    "str"
                ]
            }
        },
        "test_convert_roundtrip": {
            "name": "test_convert_roundtrip",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "coerce": [
                    "ppb_vector.Vector",
                    "float",
                    "bool",
                    "str",
                    "int",
                    "bytes"
                ],
                "x": [
                    "ppb_vector.Vector",
                    "float",
                    "bool",
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "test_convert_roundtrip_positional": {
            "name": "test_convert_roundtrip_positional",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "coerce": [
                    "ppb_vector.Vector",
                    "float",
                    "bool",
                    "str",
                    "int",
                    "bytes"
                ],
                "x": [
                    "ppb_vector.Vector",
                    "float",
                    "bool",
                    "str",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "ppb-vector-canon/tests/test_ctor.py": {
        "test_ctor_vector_like": {
            "name": "test_ctor_vector_like",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "v": [
                    "ppb_vector.Vector"
                ]
            }
        },
        "test_ctor_noncopy_same": {
            "name": "test_ctor_noncopy_same",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "v": [
                    "ppb_vector.Vector",
                    "float"
                ]
            }
        },
        "test_ctor_pickle": {
            "name": "test_ctor_pickle",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "v": [
                    "str",
                    "List[Dict]",
                    "set",
                    "dict",
                    "list",
                    "Tuple[str]"
                ]
            }
        },
        "test_ctor_copy": {
            "name": "test_ctor_copy",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "v": [
                    "set"
                ]
            }
        }
    },
    "ppb-vector-canon/tests/test_decompose.py": {
        "test_decompose_canonical": {
            "name": "test_decompose_canonical",
            "location": 16,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "test_decompose_recombine": {
            "name": "test_decompose_recombine",
            "location": 25,
            "return": [],
            "arguments": {
                "v": [],
                "basis": []
            }
        },
        "test_decompose_angles": {
            "name": "test_decompose_angles",
            "location": 31,
            "return": [],
            "arguments": {
                "v": [],
                "basis": []
            }
        },
        "test_decompose_linear": {
            "name": "test_decompose_linear",
            "location": 45,
            "return": [],
            "arguments": {
                "v": [],
                "w": [],
                "\u03bb": [],
                "basis": []
            }
        }
    },
    "ppb-vector-canon/tests/test_dot.py": {
        "test_dot_axis": {
            "name": "test_dot_axis",
            "location": 10,
            "return": [],
            "arguments": {
                "vector": []
            }
        },
        "test_dot_commutes": {
            "name": "test_dot_commutes",
            "location": 16,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_dot_length": {
            "name": "test_dot_length",
            "location": 21,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_cauchy_schwarz": {
            "name": "test_cauchy_schwarz",
            "location": 26,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_dot_rotational_invariance": {
            "name": "test_dot_rotational_invariance",
            "location": 32,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "angle": []
            }
        },
        "test_dot_linear": {
            "name": "test_dot_linear",
            "location": 53,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "z": [],
                "scalar": []
            }
        },
        "test_dot_from_angle": {
            "name": "test_dot_from_angle",
            "location": 62,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_dot_rmul": {
            "name": "test_dot_rmul",
            "location": 81,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        }
    },
    "ppb-vector-canon/tests/test_equality.py": {
        "test_equal_self": {
            "name": "test_equal_self",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "float",
                    "ppb_vector.Vector",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "test_equal_non_vector": {
            "name": "test_equal_non_vector",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "float",
                    "ppb_vector.Vector",
                    "int",
                    "bool",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "test_equal_symmetric": {
            "name": "test_equal_symmetric",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "ppb_vector.Vector",
                    "float"
                ],
                "y": [
                    "List[int]",
                    "str"
                ]
            }
        },
        "test_non_zero_equal": {
            "name": "test_non_zero_equal",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "ppb_vector.Vector",
                    "float"
                ]
            }
        },
        "test_not_equal_equivalent": {
            "name": "test_not_equal_equivalent",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "ppb_vector.Vector",
                    "int",
                    "float"
                ],
                "y": [
                    "ppb_vector.Vector",
                    "int",
                    "float"
                ]
            }
        }
    },
    "ppb-vector-canon/tests/test_isclose.py": {
        "test_isclose_to_self": {
            "name": "test_isclose_to_self",
            "location": 12,
            "return": [],
            "arguments": {
                "v": [],
                "abs_tol": [],
                "rel_tol": []
            }
        },
        "test_isclose_abs_error": {
            "name": "test_isclose_abs_error",
            "location": 20,
            "return": [],
            "arguments": {
                "v": [],
                "direction": [],
                "abs_tol": []
            }
        },
        "test_isclose_rel_error": {
            "name": "test_isclose_rel_error",
            "location": 44,
            "return": [],
            "arguments": {
                "v": [],
                "direction": [],
                "rel_tol": []
            }
        },
        "test_isclose_negative_tolerances": {
            "name": "test_isclose_negative_tolerances",
            "location": 88,
            "return": [],
            "arguments": {
                "v": []
            }
        }
    },
    "ppb-vector-canon/tests/test_length.py": {
        "test_length": {
            "name": "test_length",
            "location": 21,
            "return": [],
            "arguments": {
                "v": [],
                "expected": []
            }
        },
        "test_length_dot": {
            "name": "test_length_dot",
            "location": 27,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "test_length_zero": {
            "name": "test_length_zero",
            "location": 33,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "test_length_scalar": {
            "name": "test_length_scalar",
            "location": 39,
            "return": [],
            "arguments": {
                "v": [],
                "scalar": []
            }
        },
        "test_length_triangle": {
            "name": "test_length_triangle",
            "location": 45,
            "return": [],
            "arguments": {
                "v": [],
                "w": []
            }
        }
    },
    "ppb-vector-canon/tests/test_member_access.py": {
        "test_class_member_access": {
            "name": "test_class_member_access",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "ppb_vector.Vector",
                    "float",
                    "int"
                ],
                "y": [
                    "int",
                    "float",
                    "ppb_vector.Vector"
                ]
            }
        },
        "test_index_access": {
            "name": "test_index_access",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "v": [
                    "ppb_vector.Vector",
                    "Set[str]",
                    "list",
                    "Sequence[Hashable]"
                ]
            }
        },
        "test_key_access": {
            "name": "test_key_access",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "v": [
                    "ppb_vector.Vector",
                    "List[int]",
                    "list",
                    "Callable",
                    "hypothesis.strategies.SearchStrategy[str]",
                    "Iterable[str]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "ppb-vector-canon/tests/test_memory.py": {
        "test_object_size": {
            "name": "test_object_size",
            "location": 25,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "test_weak_ref": {
            "name": "test_weak_ref",
            "location": 33,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "DummyVector.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        }
    },
    "ppb-vector-canon/tests/test_negation.py": {
        "test_negation_scalar": {
            "name": "test_negation_scalar",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "v": [
                    "ppb_vector.Vector"
                ]
            }
        },
        "test_negation_involutive": {
            "name": "test_negation_involutive",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "v": [
                    "ppb_vector.Vector"
                ]
            }
        },
        "test_negation_addition": {
            "name": "test_negation_addition",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "v": [
                    "ppb_vector.Vector"
                ]
            }
        }
    },
    "ppb-vector-canon/tests/test_normalize.py": {
        "test_normalize_length": {
            "name": "test_normalize_length",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "v": [
                    "float"
                ]
            }
        },
        "test_normalize_angle": {
            "name": "test_normalize_angle",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "v": [
                    "Callable"
                ]
            }
        }
    },
    "ppb-vector-canon/tests/test_pattern_matching.py": {},
    "ppb-vector-canon/tests/test_project.py": {
        "test_project_canonical": {
            "name": "test_project_canonical",
            "location": 15,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "test_project_recombine": {
            "name": "test_project_recombine",
            "location": 22,
            "return": [],
            "arguments": {
                "v": [],
                "direct": []
            }
        },
        "test_project_angles": {
            "name": "test_project_angles",
            "location": 28,
            "return": [],
            "arguments": {
                "v": [],
                "direct": []
            }
        },
        "test_project_linear": {
            "name": "test_project_linear",
            "location": 39,
            "return": [],
            "arguments": {
                "v": [],
                "w": [],
                "\u03bb": [],
                "direct": []
            }
        },
        "test_project_invariant": {
            "name": "test_project_invariant",
            "location": 48,
            "return": [],
            "arguments": {
                "v": [],
                "\u03bb": [],
                "direct": []
            }
        }
    },
    "ppb-vector-canon/tests/test_reflect.py": {
        "test_reflect": {
            "name": "test_reflect",
            "location": 21,
            "return": [],
            "arguments": {
                "initial": [],
                "surface_normal": [],
                "expected": []
            }
        },
        "test_reflect_nan_inf": {
            "name": "test_reflect_nan_inf",
            "location": 26,
            "return": [],
            "arguments": {
                "initial": [],
                "normal": []
            }
        },
        "test_reflect_length": {
            "name": "test_reflect_length",
            "location": 32,
            "return": [],
            "arguments": {
                "initial": [],
                "normal": []
            }
        },
        "test_reflect_involutive": {
            "name": "test_reflect_involutive",
            "location": 38,
            "return": [],
            "arguments": {
                "initial": [],
                "normal": []
            }
        },
        "test_reflect_angle": {
            "name": "test_reflect_angle",
            "location": 47,
            "return": [],
            "arguments": {
                "initial": [],
                "normal": []
            }
        }
    },
    "ppb-vector-canon/tests/test_rotate.py": {
        "test_exact_rotations": {
            "name": "test_exact_rotations",
            "location": 22,
            "return": [],
            "arguments": {
                "input": [],
                "angle": [],
                "expected": []
            }
        },
        "test_remarkable_angles": {
            "name": "test_remarkable_angles",
            "location": 64,
            "return": [],
            "arguments": {
                "angle": [],
                "trig": []
            }
        },
        "test_close_rotations": {
            "name": "test_close_rotations",
            "location": 88,
            "return": [],
            "arguments": {
                "input": [],
                "angle": [],
                "expected": []
            }
        },
        "test_trig_stability": {
            "name": "test_trig_stability",
            "location": 94,
            "return": [],
            "arguments": {
                "angle": []
            }
        },
        "test_trig_invariance": {
            "name": "test_trig_invariance",
            "location": 115,
            "return": [],
            "arguments": {
                "angle": [],
                "n": []
            }
        },
        "test_rotation_invariance": {
            "name": "test_rotation_invariance",
            "location": 127,
            "return": [],
            "arguments": {
                "v": [],
                "angle": [],
                "n": []
            }
        },
        "test_rotation_angle": {
            "name": "test_rotation_angle",
            "location": 136,
            "return": [],
            "arguments": {
                "initial": [],
                "angle": []
            }
        },
        "test_rotation_stability": {
            "name": "test_rotation_stability",
            "location": 143,
            "return": [],
            "arguments": {
                "angle": [],
                "loops": []
            }
        },
        "test_rotation_stability2": {
            "name": "test_rotation_stability2",
            "location": 160,
            "return": [],
            "arguments": {
                "initial": [],
                "angles": []
            }
        },
        "test_rotation_linearity": {
            "name": "test_rotation_linearity",
            "location": 183,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "scalar": [],
                "angle": []
            }
        }
    },
    "ppb-vector-canon/tests/test_scalar_multiplication.py": {
        "test_scalar_coordinates": {
            "name": "test_scalar_coordinates",
            "location": 9,
            "return": [],
            "arguments": {
                "scalar": [],
                "v": []
            }
        },
        "test_scalar_associative": {
            "name": "test_scalar_associative",
            "location": 15,
            "return": [],
            "arguments": {
                "scalar1": [],
                "scalar2": [],
                "v": []
            }
        },
        "test_scalar_linear": {
            "name": "test_scalar_linear",
            "location": 23,
            "return": [],
            "arguments": {
                "scalar": [],
                "v": [],
                "w": []
            }
        },
        "test_scalar_length": {
            "name": "test_scalar_length",
            "location": 31,
            "return": [],
            "arguments": {
                "scalar": [],
                "v": []
            }
        },
        "test_scalar_division": {
            "name": "test_scalar_division",
            "location": 36,
            "return": [],
            "arguments": {
                "v": [],
                "scalar": []
            }
        },
        "test_scalar_inverse": {
            "name": "test_scalar_inverse",
            "location": 43,
            "return": [],
            "arguments": {
                "v": [],
                "scalar": []
            }
        },
        "test_scalar_rmul": {
            "name": "test_scalar_rmul",
            "location": 50,
            "return": [],
            "arguments": {
                "v": [],
                "scalar": []
            }
        },
        "test_integer_multiplication": {
            "name": "test_integer_multiplication",
            "location": 55,
            "return": [],
            "arguments": {
                "v": [],
                "scalar": []
            }
        },
        "test_integer_division": {
            "name": "test_integer_division",
            "location": 60,
            "return": [],
            "arguments": {
                "v": [],
                "scalar": []
            }
        },
        "test_division_by_zero": {
            "name": "test_division_by_zero",
            "location": 66,
            "return": [],
            "arguments": {
                "v": []
            }
        }
    },
    "ppb-vector-canon/tests/test_scale.py": {
        "test_scale_negative_length": {
            "name": "test_scale_negative_length",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "v": [
                    "ppb_vector.Vector"
                ],
                "length": [
                    "float",
                    "ppb_vector.Vector",
                    "int"
                ]
            }
        },
        "test_scale_to_length": {
            "name": "test_scale_to_length",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "ppb_vector.Vector",
                    "bool",
                    "int"
                ],
                "length": [
                    "float",
                    "int"
                ]
            }
        },
        "test_scale_aligned": {
            "name": "test_scale_aligned",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "ppb_vector.Vector",
                    "float"
                ],
                "length": [
                    "ppb_vector.Vector",
                    "float"
                ]
            }
        }
    },
    "ppb-vector-canon/tests/test_substraction.py": {
        "test_multiples_values": {
            "name": "test_multiples_values",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "float",
                    "Optional[float]",
                    "Optional[int]",
                    "ppb_vector.Vector",
                    "tuple",
                    "int"
                ],
                "y": [
                    "float",
                    "Optional[float]",
                    "Optional[int]",
                    "ppb_vector.Vector",
                    "tuple",
                    "int"
                ],
                "expected": [
                    "float",
                    "Optional[float]",
                    "Optional[int]",
                    "ppb_vector.Vector",
                    "tuple",
                    "int"
                ]
            }
        }
    },
    "ppb-vector-canon/tests/test_truncate.py": {
        "test_truncate_length": {
            "name": "test_truncate_length",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "float",
                    "ppb_vector.Vector",
                    "int",
                    "Tuple[int]"
                ],
                "max_length": [
                    "float",
                    "ppb_vector.Vector",
                    "int",
                    "Tuple[int]"
                ]
            }
        },
        "test_truncate_invariant": {
            "name": "test_truncate_invariant",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "ppb_vector.Vector",
                    "float",
                    "int",
                    "bytes"
                ],
                "max_length": [
                    "ppb_vector.Vector",
                    "float",
                    "int",
                    "bytes"
                ]
            }
        },
        "test_truncate_equivalent_to_scale": {
            "name": "test_truncate_equivalent_to_scale",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "ppb_vector.Vector",
                    "int",
                    "float",
                    "List[int]"
                ],
                "max_length": [
                    "float",
                    "int",
                    "ppb_vector.Vector"
                ]
            }
        }
    },
    "ppb-vector-canon/tests/test_typing.py": {
        "test_binop_vectorlike": {
            "name": "test_binop_vectorlike",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "op": [
                    "ppb_vector.Vector",
                    "float",
                    "int",
                    "Callable",
                    "List[float]"
                ],
                "x": [
                    "ppb_vector.Vector",
                    "float",
                    "int",
                    "Callable",
                    "List[float]"
                ],
                "y": [
                    "ppb_vector.Vector",
                    "str",
                    "int",
                    "float"
                ]
            }
        }
    },
    "ppb-vector-canon/tests/test_update.py": {
        "test_update_x": {
            "name": "test_update_x",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "v": [
                    "float",
                    "ppb_vector.Vector"
                ],
                "x": [
                    "float",
                    "ppb_vector.Vector"
                ]
            }
        },
        "test_update_y": {
            "name": "test_update_y",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "v": [
                    "float",
                    "ppb_vector.Vector"
                ],
                "y": [
                    "float",
                    "ppb_vector.Vector"
                ]
            }
        },
        "test_update_xy": {
            "name": "test_update_xy",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "v": [
                    "float",
                    "ppb_vector.Vector"
                ],
                "x": [
                    "float",
                    "ppb_vector.Vector"
                ],
                "y": [
                    "float",
                    "ppb_vector.Vector"
                ]
            }
        }
    },
    "ppb-vector-canon/tests/utils.py": {
        "angles": {
            "name": "angles",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "floats": {
            "name": "floats",
            "location": 21,
            "return": [],
            "arguments": {
                "max_magnitude": []
            }
        },
        "lengths": {
            "name": "lengths",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "vectors": {
            "name": "vectors",
            "location": 29,
            "return": [],
            "arguments": {
                "max_magnitude": []
            }
        },
        "units": {
            "name": "units",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "angle_isclose": {
            "name": "angle_isclose",
            "location": 41,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "isclose": {
            "name": "isclose",
            "location": 46,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "vector_likes": {
            "name": "vector_likes",
            "location": 93,
            "return": [],
            "arguments": {
                "v": []
            }
        }
    }
}
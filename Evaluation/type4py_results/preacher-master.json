{
    "preacher-master/docs/conf.py": {},
    "preacher-master/examples/server.py": {
        "json": {
            "name": "json",
            "location": 14,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "echo": {
            "name": "echo",
            "location": 31,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Optional[Tuple]",
                "List[Callable]"
            ],
            "arguments": {}
        },
        "not_found": {
            "name": "not_found",
            "location": 45,
            "return": [
                "int",
                "bool",
                "Sequence[Union[str, Any]]"
            ],
            "arguments": {}
        },
        "xml": {
            "name": "xml",
            "location": 50,
            "return": [
                "str",
                "int",
                "Hashable",
                "dict"
            ],
            "arguments": {}
        },
        "later": {
            "name": "later",
            "location": 57,
            "return": [
                "int",
                "List[int]",
                "bytes"
            ],
            "arguments": {
                "seconds": [
                    "float",
                    "datetime.timedelta",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "text": {
            "name": "text",
            "location": 63,
            "return": [
                "str",
                "int",
                "Tuple[int]",
                "bool",
                "dict",
                "List[str]",
                "bytes"
            ],
            "arguments": {}
        },
        "binary": {
            "name": "binary",
            "location": 70,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {}
        },
        "sleep": {
            "name": "sleep",
            "location": 77,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "seconds": [
                    "Union[float, int]",
                    "Union[float, Tuple[float, float]]",
                    "float",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "preacher-master/examples/plugin/custom_matcher.py": {
        "preacher_add_matchers": {
            "name": "preacher_add_matchers",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [
                    "int",
                    "core.track.Track",
                    "bool"
                ]
            }
        },
        "IsEven._matches": {
            "name": "_matches",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "float",
                    "Iterator[T]",
                    "Type",
                    "list"
                ]
            }
        },
        "IsEven.describe_to": {
            "name": "describe_to",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "description": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "IsMultipleOf.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "base": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "IsMultipleOf._matches": {
            "name": "_matches",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "T",
                    "Iterable[Any]",
                    "Iterable"
                ]
            }
        },
        "IsMultipleOf.describe_to": {
            "name": "describe_to",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "description": [
                    "str",
                    "set",
                    "List[int]",
                    "Dict[str, List[str]]",
                    "List[str]"
                ]
            }
        }
    },
    "preacher-master/examples/plugin/setup.py": {},
    "preacher-master/preacher/__init__.py": {},
    "preacher-master/preacher/app/__init__.py": {},
    "preacher-master/preacher/app/cli/app.py": {
        "app": {
            "name": "app",
            "location": 21,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "paths": [
                    "int",
                    "str",
                    "preacher.core.status.Status",
                    "Optional[float]",
                    "float",
                    "Optional[str]",
                    "Sequence[str]",
                    "bool"
                ],
                "base_url": [
                    "int",
                    "str",
                    "preacher.core.status.Status",
                    "Optional[float]",
                    "float",
                    "Optional[str]",
                    "Sequence[str]",
                    "Optional[bool]"
                ],
                "arguments": [
                    "int",
                    "str",
                    "preacher.core.status.Status",
                    "Optional[float]",
                    "float",
                    "Optional[str]",
                    "Sequence[str]",
                    "bool"
                ],
                "level": [
                    "int",
                    "str",
                    "preacher.core.status.Status",
                    "Optional[float]",
                    "float",
                    "Optional[str]",
                    "Sequence[str]",
                    "bool"
                ],
                "report_dir": [
                    "int",
                    "str",
                    "preacher.core.status.Status",
                    "Optional[float]",
                    "float",
                    "Optional[str]",
                    "Sequence[str]",
                    "bool"
                ],
                "delay": [
                    "int",
                    "str",
                    "preacher.core.status.Status",
                    "Optional[float]",
                    "float",
                    "Optional[str]",
                    "Sequence[str]",
                    "Optional[bool]"
                ],
                "retry": [
                    "int",
                    "str",
                    "preacher.core.status.Status",
                    "Optional[float]",
                    "float",
                    "Optional[str]",
                    "Sequence[str]",
                    "Optional[bool]"
                ],
                "timeout": [
                    "int",
                    "str",
                    "preacher.core.status.Status",
                    "Optional[float]",
                    "float",
                    "Optional[str]",
                    "Sequence[str]",
                    "Optional[bool]"
                ],
                "concurrency": [
                    "int",
                    "str",
                    "preacher.core.status.Status",
                    "Optional[float]",
                    "float",
                    "Optional[str]",
                    "Sequence[str]",
                    "bool"
                ],
                "executor_factory": [
                    "int",
                    "str",
                    "preacher.core.status.Status",
                    "Optional[float]",
                    "float",
                    "Optional[str]",
                    "Sequence[str]",
                    "bool"
                ],
                "plugins": [
                    "Iterable[str]",
                    "bool",
                    "Sequence[str]"
                ],
                "verbosity": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "preacher-master/preacher/app/cli/executor.py": {
        "ExecutorFactory.create": {
            "name": "create",
            "location": 11,
            "return": [
                "concurrent.futures.Executor"
            ],
            "arguments": {
                "self": [],
                "concurrency": [
                    "str",
                    "Iterator[str]",
                    "bool",
                    "float"
                ]
            }
        },
        "_ProcessPoolFactory.create": {
            "name": "create",
            "location": 16,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "concurrency": [
                    "bool",
                    "float"
                ]
            }
        },
        "_ThreadPoolFactory.create": {
            "name": "create",
            "location": 21,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "concurrency": [
                    "bool",
                    "float"
                ]
            }
        }
    },
    "preacher-master/preacher/app/cli/logging.py": {
        "_default": {
            "name": "_default",
            "location": 9,
            "return": [
                "Callable[[Mapping], T]",
                "int",
                "float"
            ],
            "arguments": {
                "message": [
                    "str",
                    "bool",
                    "Any",
                    "Optional[str]"
                ]
            }
        },
        "_info": {
            "name": "_info",
            "location": 13,
            "return": [
                "str",
                "Optional[str]",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "message": [
                    "str",
                    "bytes",
                    "Callable[[bytes], bytes]"
                ]
            }
        },
        "_warning": {
            "name": "_warning",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "message": [
                    "str",
                    "dict",
                    "bytes",
                    "Callable[[bytes], bytes]"
                ]
            }
        },
        "_error": {
            "name": "_error",
            "location": 21,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]",
                "dict"
            ],
            "arguments": {
                "message": [
                    "str",
                    "bytes",
                    "bool",
                    "int"
                ]
            }
        },
        "_critical": {
            "name": "_critical",
            "location": 25,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "message": [
                    "str",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "create_system_logger": {
            "name": "create_system_logger",
            "location": 46,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "verbosity": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "_verbosity_to_logging_level": {
            "name": "_verbosity_to_logging_level",
            "location": 57,
            "return": [
                "bool",
                "str",
                "int",
                "Sequence[str]"
            ],
            "arguments": {
                "verbosity": [
                    "int"
                ]
            }
        },
        "ColoredFormatter.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ColoredFormatter.format": {
            "name": "format",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "preacher-master/preacher/app/cli/main.py": {
        "main": {
            "name": "main",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "paths": [
                    "pathlib.Path",
                    "str",
                    "cerulean.path.Path",
                    "int"
                ],
                "base_url": [
                    "pathlib.Path",
                    "str",
                    "cerulean.path.Path",
                    "int"
                ],
                "arguments": [
                    "pathlib.Path",
                    "str",
                    "cerulean.path.Path",
                    "int"
                ],
                "level": [
                    "pathlib.Path",
                    "str",
                    "cerulean.path.Path",
                    "int"
                ],
                "report_dir": [
                    "pathlib.Path",
                    "str",
                    "cerulean.path.Path",
                    "int"
                ],
                "retry": [
                    "pathlib.Path",
                    "str",
                    "cerulean.path.Path",
                    "int"
                ],
                "delay": [
                    "pathlib.Path",
                    "str",
                    "cerulean.path.Path",
                    "int"
                ],
                "timeout": [
                    "pathlib.Path",
                    "str",
                    "cerulean.path.Path",
                    "int"
                ],
                "concurrency": [
                    "pathlib.Path",
                    "str",
                    "cerulean.path.Path",
                    "int"
                ],
                "executor_factory": [
                    "pathlib.Path",
                    "str",
                    "cerulean.path.Path",
                    "int"
                ],
                "plugins": [
                    "pathlib.Path",
                    "str",
                    "cerulean.path.Path",
                    "int"
                ],
                "verbosity": [
                    "pathlib.Path",
                    "str",
                    "cerulean.path.Path",
                    "int"
                ]
            }
        }
    },
    "preacher-master/preacher/app/cli/option.py": {
        "pairs_callback": {
            "name": "pairs_callback",
            "location": 99,
            "return": [
                "dict",
                "str",
                "Dict[str, Any]",
                "int",
                "Dict[str, int]"
            ],
            "arguments": {
                "_context": [
                    "Union[click.Option, click.Parameter]",
                    "click.Context",
                    "bool",
                    "Iterable[str]",
                    "Union[Callable, str]"
                ],
                "_option_or_parameter": [
                    "Union[click.Option, click.Parameter]",
                    "click.Context",
                    "bool",
                    "Iterable[str]",
                    "Union[Callable, str]"
                ],
                "value": [
                    "bool",
                    "Callable[[T], None]",
                    "Callable",
                    "str"
                ]
            }
        },
        "positive_float_callback": {
            "name": "positive_float_callback",
            "location": 107,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "_context": [
                    "Union[click.Option, click.Parameter]",
                    "click.Context",
                    "bool",
                    "Iterable[str]",
                    "Union[Callable, str]"
                ],
                "_option_or_parameter": [
                    "Union[click.Option, click.Parameter]",
                    "click.Context",
                    "bool",
                    "Iterable[str]",
                    "Union[Callable, str]"
                ],
                "value": [
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[Sequence[Any]]",
                    "Optional[Sequence[str]]",
                    "Optional[int]"
                ]
            }
        },
        "_parse_argument": {
            "name": "_parse_argument",
            "location": 120,
            "return": [
                "int",
                "Sequence[str]",
                "dict",
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Optional[int]",
                    "dict",
                    "list",
                    "Union[int, float]"
                ]
            }
        },
        "Level.__str__": {
            "name": "__str__",
            "location": 31,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArgumentType.convert": {
            "name": "convert",
            "location": 47,
            "return": [
                "str",
                "List[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[click.Context]",
                    "Optional[click.Parameter]",
                    "int"
                ],
                "param": [
                    "str",
                    "Optional[click.Context]",
                    "Optional[click.Parameter]",
                    "int"
                ],
                "ctx": [
                    "str",
                    "Optional[click.Context]",
                    "Optional[click.Parameter]",
                    "int"
                ]
            }
        },
        "ArgumentType.split_envvar_value": {
            "name": "split_envvar_value",
            "location": 51,
            "return": [
                "int",
                "str",
                "Dict[str, Any]",
                "Optional[str]",
                "Dict[str, str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "rv": [
                    "str",
                    "list"
                ]
            }
        },
        "LevelType.get_metavar": {
            "name": "get_metavar",
            "location": 60,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "param": [
                    "str",
                    "float"
                ]
            }
        },
        "LevelType.get_missing_message": {
            "name": "get_missing_message",
            "location": 63,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "param": [
                    "str",
                    "float"
                ]
            }
        },
        "LevelType.convert": {
            "name": "convert",
            "location": 66,
            "return": [
                "bool",
                "Dict[int, dict]",
                "tuple",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "Type"
                ],
                "param": [
                    "str",
                    "bool",
                    "Optional[click.Context]",
                    "Type"
                ],
                "ctx": [
                    "str",
                    "bool",
                    "Optional[click.Context]",
                    "Type"
                ]
            }
        },
        "ExecutorFactoryType.get_metavar": {
            "name": "get_metavar",
            "location": 81,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "param": [
                    "str",
                    "float"
                ]
            }
        },
        "ExecutorFactoryType.get_missing_message": {
            "name": "get_missing_message",
            "location": 84,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "param": [
                    "str",
                    "float"
                ]
            }
        },
        "ExecutorFactoryType.convert": {
            "name": "convert",
            "location": 87,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[click.Parameter]",
                    "mypy.nodes.Context",
                    "Optional[str]",
                    "int"
                ],
                "param": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bytes"
                ],
                "ctx": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bytes"
                ]
            }
        }
    },
    "preacher-master/preacher/app/cli/__init__.py": {},
    "preacher-master/preacher/compilation/argument.py": {
        "_inject_arguments": {
            "name": "_inject_arguments",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "bool",
                    "int"
                ],
                "arguments": [
                    "bool",
                    "str"
                ]
            }
        },
        "inject_arguments": {
            "name": "inject_arguments",
            "location": 28,
            "return": [
                "bool",
                "int",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "arguments": [
                    "str"
                ]
            }
        },
        "Argument.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "Argument.key": {
            "name": "key",
            "location": 14,
            "return": [
                "str",
                "List[str]",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Argument.apply_arguments": {
            "name": "apply_arguments",
            "location": 17,
            "return": [
                "str",
                "Optional[T]",
                "int"
            ],
            "arguments": {
                "self": [],
                "arguments": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, int]"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/datetime.py": {
        "compile_datetime_format": {
            "name": "compile_datetime_format",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Sequence[str]",
                    "Iterable[bytes]",
                    "int",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "compile_timedelta": {
            "name": "compile_timedelta",
            "location": 25,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "Callable[[Mapping], T]",
                "tuple",
                "dict"
            ],
            "arguments": {
                "obj": [
                    "str"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/error.py": {
        "render_path": {
            "name": "render_path",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "on_key": {
            "name": "on_key",
            "location": 75,
            "return": [
                "typing.Iterator"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Type[RuntimeError]",
                    "int",
                    "Callable[[KT], VT]",
                    "Dict[str, str]"
                ]
            }
        },
        "on_index": {
            "name": "on_index",
            "location": 83,
            "return": [
                "typing.Iterator"
            ],
            "arguments": {
                "index": [
                    "Callable[[None], None]",
                    "str",
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "IndexedNode.__str__": {
            "name": "__str__",
            "location": 14,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamedNode.__str__": {
            "name": "__str__",
            "location": 22,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompilationError.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "List[Dict[str, Any]]",
                    "List[int]",
                    "List[T]",
                    "list",
                    "str"
                ],
                "node": [
                    "List[Dict[str, Any]]",
                    "List[int]",
                    "List[T]",
                    "list",
                    "str"
                ],
                "child": [
                    "List[Dict[str, Any]]",
                    "List[int]",
                    "List[T]",
                    "list",
                    "str"
                ],
                "cause": [
                    "List[Dict[str, Any]]",
                    "List[int]",
                    "List[T]",
                    "list",
                    "str"
                ]
            }
        },
        "CompilationError.path": {
            "name": "path",
            "location": 50,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompilationError.render_path": {
            "name": "render_path",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CompilationError.on_node": {
            "name": "on_node",
            "location": 59,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "list",
                    "bytes"
                ]
            }
        },
        "CompilationError.__str__": {
            "name": "__str__",
            "location": 66,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "preacher-master/preacher/compilation/parameter.py": {
        "compile_parameter": {
            "name": "compile_parameter",
            "location": 18,
            "return": [
                "dict",
                "int",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "obj": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, float]"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/__init__.py": {},
    "preacher-master/preacher/compilation/extraction/extraction.py": {
        "_select_multiple": {
            "name": "_select_multiple",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "options": [
                    "str",
                    "Dict[str, Any]",
                    "Type"
                ]
            }
        },
        "_select_cast": {
            "name": "_select_cast",
            "location": 63,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "options": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Type"
                ]
            }
        },
        "compile_jq": {
            "name": "compile_jq",
            "location": 77,
            "return": [
                "Callable",
                "list",
                "int"
            ],
            "arguments": {
                "query": [
                    "str",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "dict",
                    "Dict[str, Any]"
                ],
                "options": [
                    "dict",
                    "Dict[str, Dict[str, Any]]",
                    "Iterable[Dict[str, Any]]",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "_ensure_str_on_key": {
            "name": "_ensure_str_on_key",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "key": [
                    "str",
                    "dict"
                ],
                "obj": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_select_namespaces": {
            "name": "_select_namespaces",
            "location": 88,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "options": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Type"
                ]
            }
        },
        "compile_xpath": {
            "name": "compile_xpath",
            "location": 95,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "query": [
                    "str",
                    "Optional[str]",
                    "Iterable[str]"
                ],
                "options": [
                    "int",
                    "dict",
                    "Optional[str]",
                    "Dict[str, int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "compile_key": {
            "name": "compile_key",
            "location": 103,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "query": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "options": [
                    "dict",
                    "bool",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "add_default_extractions": {
            "name": "add_default_extractions",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [
                    "dict",
                    "Optional[Union[Any, Any]]"
                ]
            }
        },
        "ExtractionCompiler.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ExtractionCompiler.add_factory": {
            "name": "add_factory",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Hashable",
                    "str",
                    "int",
                    "static_frame.core.util.GetItemKeyType",
                    "Dict[str, str]"
                ],
                "factory": [
                    "Hashable",
                    "str",
                    "int",
                    "static_frame.core.util.GetItemKeyType",
                    "Dict[str, str]"
                ]
            }
        },
        "ExtractionCompiler.compile": {
            "name": "compile",
            "location": 36,
            "return": [
                "Callable[..., None]",
                "core.LazyNS",
                "IO[str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Callable[..., Awaitable]",
                    "str",
                    "dict"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/extraction/factory.py": {
        "create_extraction_compiler": {
            "name": "create_extraction_compiler",
            "location": 10,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "plugin_manager": [
                    "Dict[str, Any]"
                ],
                "logger": [
                    "str",
                    "int",
                    "Tuple[Tuple[str, ...]]",
                    "List[str]",
                    "logging.Logger"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/extraction/__init__.py": {},
    "preacher-master/preacher/compilation/request/factory.py": {
        "create_request_compiler": {
            "name": "create_request_compiler",
            "location": 5,
            "return": [
                "dict",
                "Dict[str, Dict[str, str]]",
                "int",
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]",
                "Dict[str, Union[str, int]]"
            ],
            "arguments": {}
        }
    },
    "preacher-master/preacher/compilation/request/request.py": {
        "_compile_method": {
            "name": "_compile_method",
            "location": 129,
            "return": [
                "str",
                "Optional[str]",
                "Callable[[str], T]",
                "Mapping[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "obj": [
                    "dict",
                    "Dict[str, Any]",
                    "Optional[Union[str, Any, Any, Any]]",
                    "int",
                    "str"
                ]
            }
        },
        "_compile_headers": {
            "name": "_compile_headers",
            "location": 138,
            "return": [
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "obj": [
                    "Dict[str, str]",
                    "bool",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "_compile_header_item": {
            "name": "_compile_header_item",
            "location": 144,
            "return": [
                "Optional[Dict[str, str]]",
                "Optional[str]",
                "Optional[float]",
                "Dict[str, Any]",
                "type"
            ],
            "arguments": {
                "key": [
                    "str",
                    "float"
                ],
                "value": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "RequestCompiled.replace": {
            "name": "replace",
            "location": 33,
            "return": [
                "int",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T",
                    "str",
                    "dict",
                    "Optional[Exception]",
                    "Iterable[str]"
                ]
            }
        },
        "RequestCompiled.fix": {
            "name": "fix",
            "location": 42,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestCompiler.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "body": [
                    "int",
                    "Optional[str]",
                    "float",
                    "Optional[List[str]]",
                    "List[int]",
                    "bool",
                    "Callable"
                ],
                "default": [
                    "str",
                    "int",
                    "bool",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "RequestCompiler.compile": {
            "name": "compile",
            "location": 61,
            "return": [
                "str",
                "int",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str"
                ],
                "arguments": [
                    "Union[List, str]",
                    "str",
                    "Callable",
                    "tuple",
                    "List[str]"
                ]
            }
        },
        "RequestCompiler.of_default": {
            "name": "of_default",
            "location": 121,
            "return": [
                "dict",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "default": [
                    "Dict[str, Any]",
                    "str",
                    "Exception",
                    "Union[str, bytes]"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/request/request_body.py": {
        "RequestBodyCompiled.replace": {
            "name": "replace",
            "location": 25,
            "return": [
                "RequestBodyCompiled"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "List[str]",
                    "Union[int, float]",
                    "AbstractSet[T]"
                ]
            }
        },
        "RequestBodyCompiled.compile_and_replace": {
            "name": "compile_and_replace",
            "location": 29,
            "return": [
                "RequestBodyCompiled"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str"
                ]
            }
        },
        "RequestBodyCompiled.fix": {
            "name": "fix",
            "location": 33,
            "return": [
                "preacher.core.request.RequestBody"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlencodedRequestBodyCompiled.replace": {
            "name": "replace",
            "location": 41,
            "return": [
                "str",
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AbstractSet",
                    "AbstractSet[T]",
                    "AbstractSet[Any]",
                    "Union[int, str]",
                    "int",
                    "core.models.Grouping"
                ]
            }
        },
        "UrlencodedRequestBodyCompiled.compile_and_replace": {
            "name": "compile_and_replace",
            "location": 49,
            "return": [
                "str",
                "Dict[str, Any]",
                "Iterable[int]",
                "Union[str, int]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "dict",
                    "Union[Dict, str]",
                    "str"
                ]
            }
        },
        "UrlencodedRequestBodyCompiled.fix": {
            "name": "fix",
            "location": 60,
            "return": [
                "Dict[str, Any]",
                "Optional[str]",
                "int",
                "str",
                "Dict[str, dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonRequestBodyCompiled.replace": {
            "name": "replace",
            "location": 68,
            "return": [
                "str",
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "OrderedDict",
                    "Dict[str, List]",
                    "Match",
                    "Tuple['cirq.Qid']"
                ]
            }
        },
        "JsonRequestBodyCompiled.compile_and_replace": {
            "name": "compile_and_replace",
            "location": 76,
            "return": [
                "str",
                "Dict[str, Any]",
                "Iterable[int]",
                "Union[str, int]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Dict[str, Any]",
                    "bool",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "JsonRequestBodyCompiled.fix": {
            "name": "fix",
            "location": 85,
            "return": [
                "bytes",
                "str",
                "Tuple[str, Optional[int]]",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestBodyCompiler.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "default": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Sequence[str]"
                ]
            }
        },
        "RequestBodyCompiler.compile": {
            "name": "compile",
            "location": 101,
            "return": [
                "str",
                "float",
                "Union[str, int]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Callable"
                ],
                "arguments": [
                    "str",
                    "tuple"
                ]
            }
        },
        "RequestBodyCompiler.of_default": {
            "name": "of_default",
            "location": 135,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "default": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/request/url_param.py": {
        "compile_url_param_value": {
            "name": "compile_url_param_value",
            "location": 13,
            "return": [
                "bool",
                "str",
                "list",
                "py262.value.Value"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Union[type, Tuple[type, ...]]",
                    "Optional[object]",
                    "datetime.datetime",
                    "Union[int, float, None]",
                    "T",
                    "float"
                ]
            }
        },
        "compile_url_param": {
            "name": "compile_url_param",
            "location": 32,
            "return": [
                "list",
                "bool",
                "Sequence[str]",
                "List[Dict]",
                "Optional[Iterable[int]]",
                "str"
            ],
            "arguments": {
                "value": [
                    "Optional[Dict[str, str]]",
                    "dict",
                    "Tuple[str, Any]",
                    "T",
                    "list"
                ]
            }
        },
        "compile_url_params": {
            "name": "compile_url_params",
            "location": 46,
            "return": [
                "str",
                "int",
                "Iterable[int]"
            ],
            "arguments": {
                "obj": [
                    "bool",
                    "List[Dict[str, Any]]"
                ],
                "arguments": [
                    "Callable"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/request/__init__.py": {},
    "preacher-master/preacher/compilation/scenario/case.py": {
        "CaseCompiled.replace": {
            "name": "replace",
            "location": 45,
            "return": [
                "Dict[str, int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "CaseCompiled.fix": {
            "name": "fix",
            "location": 55,
            "return": [
                "str",
                "denite.util.Candidate"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaseCompiler.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "str",
                    "core.models.Groups"
                ],
                "response": [
                    "bool",
                    "str",
                    "core.models.Groups"
                ],
                "description": [
                    "bool",
                    "str",
                    "core.models.Groups"
                ],
                "default": [
                    "str",
                    "dict",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "CaseCompiler.compile_fixed": {
            "name": "compile_fixed",
            "location": 79,
            "return": [
                "str",
                "Dict[str, Any]",
                "Iterable[int]",
                "Union[str, int]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Union[str, int]"
                ]
            }
        },
        "CaseCompiler.compile_default": {
            "name": "compile_default",
            "location": 92,
            "return": [
                "preacher.compilation.verification.matcher.MatcherFactoryCompiler"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "bool",
                    "List[str]",
                    "float"
                ]
            }
        },
        "CaseCompiler.compile": {
            "name": "compile",
            "location": 106,
            "return": [
                "str",
                "Dict[str, Any]",
                "Iterable[int]",
                "Union[str, int]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "CaseCompiler.of_default": {
            "name": "of_default",
            "location": 155,
            "return": [
                "bytes",
                "Tuple[str, int, Dict[str, str]]",
                "Tuple[purplship.core.models.ShipmentDetails, List[purplship.core.models.Message]]"
            ],
            "arguments": {
                "self": [],
                "default": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/scenario/factory.py": {
        "create_scenario_compiler": {
            "name": "create_scenario_compiler",
            "location": 14,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "plugin_manager": [
                    "str",
                    "bool"
                ],
                "logger": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/scenario/integration.py": {
        "compile_scenarios": {
            "name": "compile_scenarios",
            "location": 12,
            "return": [
                "Dict[str, int]",
                "int",
                "Iterable[str]",
                "str",
                "dict"
            ],
            "arguments": {
                "objs": [
                    "Dict[str, object]",
                    "str",
                    "dict"
                ],
                "arguments": [
                    "Dict[str, object]",
                    "str",
                    "dict"
                ],
                "plugin_manager": [
                    "blurr.core.record.Record",
                    "Dict[str, str]",
                    "List[Dict]"
                ],
                "logger": [
                    "blurr.core.record.Record",
                    "Dict[str, str]",
                    "List[Dict]"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/scenario/scenario.py": {
        "ScenarioCompiler.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "description": [
                    "int",
                    "str"
                ],
                "case": [
                    "int",
                    "str"
                ]
            }
        },
        "ScenarioCompiler.compile": {
            "name": "compile",
            "location": 37,
            "return": [
                "float",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "List[str]",
                    "Dict[str, str]",
                    "str",
                    "List[Dict]"
                ],
                "arguments": [
                    "set",
                    "float",
                    "str",
                    "tuple"
                ]
            }
        },
        "ScenarioCompiler.compile_flattening": {
            "name": "compile_flattening",
            "location": 99,
            "return": [
                "preacher.core.value.RelativeDatetime",
                "bool",
                "Type",
                "tuple",
                "str",
                "Callable",
                "float"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "str",
                    "List[str]",
                    "float"
                ],
                "arguments": [
                    "bool",
                    "List[str]"
                ]
            }
        },
        "ScenarioCompiler._compile_conditions": {
            "name": "_compile_conditions",
            "location": 120,
            "return": [
                "str",
                "List[str]",
                "Tuple[int, int]",
                "list",
                "int"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "Type[BaseException]"
                ]
            }
        },
        "ScenarioCompiler._compile_cases": {
            "name": "_compile_cases",
            "location": 124,
            "return": [
                "List[Dict]",
                "str",
                "List[int]",
                "List[str]",
                "Union[List[float], List[int]]"
            ],
            "arguments": {
                "case_compiler": [
                    "case.CaseCompiler"
                ],
                "obj": [
                    "case.CaseCompiler"
                ]
            }
        },
        "ScenarioCompiler._compile_subscenarios": {
            "name": "_compile_subscenarios",
            "location": 127,
            "return": [
                "list",
                "str",
                "Union[int, slice]",
                "Optional[Type]"
            ],
            "arguments": {
                "self": [],
                "case": [
                    "str",
                    "Optional[int]",
                    "float"
                ],
                "obj": [
                    "preacher.compilation.argumenArguments",
                    "purplship.core.models.ShipmentRequest",
                    "float",
                    "int"
                ],
                "arguments": [
                    "preacher.compilation.argumenArguments",
                    "purplship.core.models.ShipmentRequest",
                    "float",
                    "int"
                ]
            }
        },
        "ScenarioCompiler._compile_parameterized": {
            "name": "_compile_parameterized",
            "location": 141,
            "return": [
                "str",
                "Tuple[str, str]",
                "Dict[int, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "List['PydanticModelField']",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "wtforms.fields.core.Field",
                    "dict"
                ],
                "arguments": [
                    "dict"
                ],
                "parameter": [
                    "dict",
                    "Dict[str, Any]",
                    "bytes",
                    "MutableMapping",
                    "bool"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/scenario/__init__.py": {},
    "preacher-master/preacher/compilation/util/functional.py": {
        "map_compile": {
            "name": "map_compile",
            "location": 13,
            "return": [
                "typing.Iterator[U]"
            ],
            "arguments": {
                "func": [
                    "Iterable[T]",
                    "dict",
                    "Dict[str, Set[str]]",
                    "Sequence",
                    "Dict[str, Any]"
                ],
                "items": [
                    "Iterable[T]",
                    "dict",
                    "Dict[str, Set[str]]",
                    "Sequence",
                    "Dict[str, Any]"
                ]
            }
        },
        "run_recursively": {
            "name": "run_recursively",
            "location": 19,
            "return": [
                "Mapping[str, Sequence[str]]",
                "Dict[str, List[Callable]]",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "func": [
                    "Callable[[object], Any]"
                ],
                "obj": [
                    "Callable",
                    "Sequence[str]",
                    "dict",
                    "Union[Dict, List]",
                    "Dict[str, Any]"
                ]
            }
        },
        "compile_flattening": {
            "name": "compile_flattening",
            "location": 37,
            "return": [
                "int",
                "Union[int, slice]",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable"
                ],
                "obj": [
                    "Callable",
                    "T",
                    "bool"
                ]
            }
        },
        "run_recursively._func": {
            "name": "_func",
            "location": 22,
            "return": [
                "int",
                "Tuple[int, int]",
                "Tuple[float, float]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "MutableMapping[Any, Any]",
                    "Container[str]",
                    "List[str]",
                    "int"
                ],
                "value": [
                    "str",
                    "dict",
                    "Set[str]",
                    "List[str]"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/util/type.py": {
        "ensure_bool": {
            "name": "ensure_bool",
            "location": 10,
            "return": [
                "bool",
                "str",
                "IO[Any]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "float",
                    "int",
                    "T_co"
                ]
            }
        },
        "ensure_str": {
            "name": "ensure_str",
            "location": 26,
            "return": [
                "float",
                "Tuple[int, int]",
                "str",
                "int"
            ],
            "arguments": {
                "obj": [
                    "str"
                ]
            }
        },
        "ensure_optional_str": {
            "name": "ensure_optional_str",
            "location": 42,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "obj": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "ensure_list": {
            "name": "ensure_list",
            "location": 58,
            "return": [
                "List[int]",
                "List[str]",
                "bytes",
                "bool",
                "str",
                "Sequence[int]"
            ],
            "arguments": {
                "obj": [
                    "List[int]",
                    "List[str]",
                    "bytes",
                    "bool",
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "ensure_mapping": {
            "name": "ensure_mapping",
            "location": 73,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "obj": [
                    "str"
                ]
            }
        },
        "or_else": {
            "name": "or_else",
            "location": 89,
            "return": [
                "list",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "optional": [
                    "Optional[T]",
                    "Optional[str]",
                    "VT",
                    "Iterator[T]"
                ],
                "default": [
                    "bool",
                    "str",
                    "int",
                    "Optional[T]",
                    "float",
                    "T",
                    "Callable[[], T]",
                    "Optional"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/util/__init__.py": {},
    "preacher-master/preacher/compilation/verification/description.py": {
        "DescriptionCompiler.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "extraction": [
                    "int",
                    "bool",
                    "float"
                ],
                "predicate": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DescriptionCompiler.compile": {
            "name": "compile",
            "location": 20,
            "return": [
                "float",
                "blurr.core.schema_loader.SchemaLoader",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "denite.util.UserContext"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/verification/factory.py": {
        "create_matcher_factory_compiler": {
            "name": "create_matcher_factory_compiler",
            "location": 14,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "plugin_manager": [
                    "Dict[str, Any]"
                ],
                "logger": [
                    "str",
                    "int",
                    "List[str]",
                    "logging.Logger"
                ]
            }
        },
        "create_predicate_compiler": {
            "name": "create_predicate_compiler",
            "location": 28,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "matcher_factory": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "plugin_manager": [
                    "Optional[str]",
                    "bool",
                    "List[str]"
                ],
                "logger": [
                    "Optional[str]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "create_description_compiler": {
            "name": "create_description_compiler",
            "location": 40,
            "return": [
                "str",
                "dict",
                "float",
                "Optional[bytes]",
                "int"
            ],
            "arguments": {
                "extraction": [
                    "str",
                    "simulation.core.common.Structure",
                    "Union[str, bytes]"
                ],
                "predicate": [
                    "str",
                    "simulation.core.common.Structure",
                    "Union[str, bytes]"
                ],
                "plugin_manager": [
                    "str",
                    "Union[str, bytes]",
                    "simulation.core.common.Structure",
                    "bool"
                ],
                "logger": [
                    "str",
                    "Union[str, bytes]",
                    "simulation.core.common.Structure",
                    "bool"
                ]
            }
        },
        "create_response_description_compiler": {
            "name": "create_response_description_compiler",
            "location": 57,
            "return": [
                "Optional[str]",
                "str",
                "Dict[str, str]",
                "dict",
                "core.models.User",
                "int"
            ],
            "arguments": {
                "predicate": [
                    "str",
                    "dict",
                    "Optional[Dict[str, Any]]"
                ],
                "description": [
                    "str",
                    "Dict[str, Any]",
                    "core.types.FBAccessToken",
                    "Optional[List[Type]]",
                    "Callable[[str], None]"
                ],
                "plugin_manager": [
                    "str",
                    "dict",
                    "Optional[Dict[str, Any]]"
                ],
                "logger": [
                    "str",
                    "dict",
                    "Optional[Dict[str, Any]]"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/verification/matcher.py": {
        "add_default_matchers": {
            "name": "add_default_matchers",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [
                    "dict",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "MatcherFactoryCompiler.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MatcherFactoryCompiler.add_static": {
            "name": "add_static",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "str",
                    "bytes",
                    "Optional[Callable]",
                    "Hashable"
                ],
                "item": [
                    "str",
                    "\"Account\"",
                    "Value",
                    "type"
                ]
            }
        },
        "MatcherFactoryCompiler.add_taking_value": {
            "name": "add_taking_value",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "matcher_func": [
                    "str",
                    "bool",
                    "Union[str, int, float]",
                    "Optional[\"permissions_doc\"]"
                ],
                "value_func": [
                    "str",
                    "bool",
                    "Union[str, int, float]",
                    "Optional[\"permissions_doc\"]"
                ]
            }
        },
        "MatcherFactoryCompiler.add_recursive": {
            "name": "add_recursive",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "str",
                    "Union[str, int]",
                    "bytes",
                    "bool",
                    "Optional[int]",
                    "Optional[Callable]"
                ],
                "matcher_func": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "Callable",
                    "Union[Type, Tuple[Type, ...]]",
                    "Iterable"
                ],
                "multiple": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "Callable",
                    "Union[Type, Tuple[Type, ...]]",
                    "Iterable"
                ]
            }
        },
        "MatcherFactoryCompiler.compile": {
            "name": "compile",
            "location": 92,
            "return": [
                "str",
                "int",
                "datetime.datetime",
                "Union[List[str], List[Any]]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "str"
                ]
            }
        },
        "MatcherFactoryCompiler._compile_taking_value": {
            "name": "_compile_taking_value",
            "location": 120,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "Iterator[str]",
                    "bool",
                    "int"
                ],
                "obj": [
                    "str",
                    "bytes",
                    "core.models.GroupingKey",
                    "List[str]",
                    "Callable[[bytes], bytes]"
                ]
            }
        },
        "MatcherFactoryCompiler._compile_recursive": {
            "name": "_compile_recursive",
            "location": 124,
            "return": [
                "Dict[str, int]",
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Iterable[Hashable]"
                ],
                "obj": [
                    "str",
                    "VT",
                    "int",
                    "bool"
                ]
            }
        },
        "MatcherFactoryCompiler._ensure_keys": {
            "name": "_ensure_keys",
            "location": 135,
            "return": [
                "str",
                "bytes",
                "List[bytes]"
            ],
            "arguments": {
                "keys": [
                    "Union[str, Iterable[str]]",
                    "str",
                    "tuple",
                    "static_frame.core.util.GetItemKeyTypeCompound",
                    "int"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/verification/predicate.py": {
        "PredicateCompiler.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "matcher_factory": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "PredicateCompiler.compile": {
            "name": "compile",
            "location": 12,
            "return": [
                "Mapping",
                "int"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "List[str]",
                    "dict",
                    "core.LazyNS"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/verification/response.py": {
        "ResponseDescriptionCompiled.replace": {
            "name": "replace",
            "location": 26,
            "return": [
                "str",
                "Dict[str, Any]",
                "core_lib.core.models.Event",
                "dict"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float",
                    "str",
                    "dict",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "ResponseDescriptionCompiled.fix": {
            "name": "fix",
            "location": 36,
            "return": [
                "str",
                "core_lib.core.models.Event",
                "Dict[int, dict]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseDescriptionCompiler.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "predicate": [
                    "int",
                    "bool",
                    "float",
                    "str"
                ],
                "description": [
                    "int",
                    "bool",
                    "float",
                    "str"
                ],
                "default": [
                    "int",
                    "bool"
                ]
            }
        },
        "ResponseDescriptionCompiler.compile": {
            "name": "compile",
            "location": 55,
            "return": [
                "str",
                "Dict[str, Any]",
                "Iterable[int]",
                "Union[str, int]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "dict",
                    "int"
                ]
            }
        },
        "ResponseDescriptionCompiler.of_default": {
            "name": "of_default",
            "location": 81,
            "return": [
                "dict",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "default": [
                    "str"
                ]
            }
        },
        "ResponseDescriptionCompiler._compile_status_code": {
            "name": "_compile_status_code",
            "location": 91,
            "return": [
                "str",
                "List[str]",
                "List[Dict]",
                "Optional[Type]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "static_frame.core.util.UFunc",
                    "list",
                    "Union[int, slice]"
                ]
            }
        },
        "ResponseDescriptionCompiler._compile_descriptions": {
            "name": "_compile_descriptions",
            "location": 95,
            "return": [
                "str",
                "List[str]",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "str",
                    "list",
                    "List[List[str]]"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/verification/__init__.py": {},
    "preacher-master/preacher/compilation/yaml/factory.py": {
        "create_loader": {
            "name": "create_loader",
            "location": 10,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "plugin_manager": [
                    "src.core.model.scripScript"
                ],
                "logger": [
                    "str",
                    "int",
                    "List[str]",
                    "logging.Logger"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/yaml/integration.py": {
        "load_from_paths": {
            "name": "load_from_paths",
            "location": 12,
            "return": [
                "str",
                "bool",
                "list",
                "Set[str]"
            ],
            "arguments": {
                "paths": [
                    "str",
                    "Sequence[str]"
                ],
                "plugin_manager": [
                    "str",
                    "bool"
                ],
                "logger": [
                    "logging.Logger",
                    "str",
                    "logging.Formatter",
                    "List[str]"
                ]
            }
        },
        "_hook_loading": {
            "name": "_hook_loading",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "logging.Logger",
                    "Optional[str]"
                ],
                "logger": [
                    "str",
                    "logging.Logger",
                    "Optional[str]"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/yaml/__init__.py": {},
    "preacher-master/preacher/compilation/yaml/tag/argument.py": {
        "ArgumentTag.construct": {
            "name": "construct",
            "location": 8,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "context": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/yaml/tag/context.py": {
        "ContextTag.construct": {
            "name": "construct",
            "location": 8,
            "return": [
                "str",
                "MutableMapping[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "context": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/yaml/tag/datetime.py": {
        "_construct_relative_datetime": {
            "name": "_construct_relative_datetime",
            "location": 22,
            "return": [
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "constructor": [
                    "yaml.BaseLoader",
                    "Callable"
                ],
                "node": [
                    "yaml.Node"
                ]
            }
        },
        "_construct_relative_datetime_of_scalar": {
            "name": "_construct_relative_datetime_of_scalar",
            "location": 34,
            "return": [
                "str",
                "Iterable[int]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "constructor": [],
                "node": [
                    "yaml.Node",
                    "List[int]",
                    "Node",
                    "docutils.nodes.Node",
                    "int"
                ]
            }
        },
        "_construct_relative_datetime_of_mapping": {
            "name": "_construct_relative_datetime_of_mapping",
            "location": 43,
            "return": [
                "str",
                "Literal"
            ],
            "arguments": {
                "constructor": [
                    "dict",
                    "bool",
                    "bytes",
                    "Callable[[str], str]",
                    "Set[str]"
                ],
                "node": [
                    "yaml.MappingNode",
                    "mypy.nodes.Node",
                    "parsimonious.nodes.Node"
                ]
            }
        },
        "RelativeDatetimeTag.construct": {
            "name": "construct",
            "location": 18,
            "return": [
                "float",
                "int",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Callable[[str], str]",
                    "yaml.nodes.Node"
                ],
                "context": [
                    "Callable[[str], str]",
                    "yaml.nodes.Node"
                ]
            }
        }
    },
    "preacher-master/preacher/compilation/yaml/tag/__init__.py": {
        "add_default_tags": {
            "name": "add_default_tags",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "loader": [
                    "Dict[str, Any]",
                    "List[str]",
                    "str",
                    "dict"
                ]
            }
        }
    },
    "preacher-master/preacher/core/context.py": {
        "closed_context": {
            "name": "closed_context",
            "location": 36,
            "return": [
                "typing.Iterator[Context]"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int",
                    "Dict[str, Set[str]]",
                    "Optional[Union[str, Any, Any, Any]]",
                    "dict",
                    "BaseException"
                ]
            }
        },
        "Context.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Context.__setitem__": {
            "name": "__setitem__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        },
        "Context.__delitem__": {
            "name": "__delitem__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Optional[str]",
                    "str",
                    "tuple",
                    "Dict[str, str]",
                    "int",
                    "Callable[[KT], VT]",
                    "Type[RuntimeError]"
                ]
            }
        },
        "Context.__getitem__": {
            "name": "__getitem__",
            "location": 20,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Optional[str]",
                    "str",
                    "tuple",
                    "Dict[str, str]",
                    "int",
                    "Callable[[KT], VT]",
                    "Type[RuntimeError]"
                ]
            }
        },
        "Context.__len__": {
            "name": "__len__",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Context.__iter__": {
            "name": "__iter__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.__eq__": {
            "name": "__eq__",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float",
                    "tuple",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "preacher-master/preacher/core/datetime.py": {
        "now": {
            "name": "now",
            "location": 71,
            "return": [
                "str",
                "datetime.datetime",
                "datetime.date"
            ],
            "arguments": {}
        },
        "system_timezone": {
            "name": "system_timezone",
            "location": 76,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "parse_time": {
            "name": "parse_time",
            "location": 82,
            "return": [
                "int",
                "Match",
                "str",
                "datetime.datetime"
            ],
            "arguments": {
                "value": [
                    "int",
                    "float",
                    "List[float]"
                ]
            }
        },
        "parse_timedelta": {
            "name": "parse_timedelta",
            "location": 97,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "DatetimeFormat.format_datetime": {
            "name": "format_datetime",
            "location": 17,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "datetime.datetime",
                    "T",
                    "str",
                    "datetime.date",
                    "dict",
                    "bool"
                ]
            }
        },
        "DatetimeFormat.parse_datetime": {
            "name": "parse_datetime",
            "location": 20,
            "return": [
                "datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "Iso8601Format.format_datetime": {
            "name": "format_datetime",
            "location": 25,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "datetime.datetime",
                    "str",
                    "int",
                    "float",
                    "datetime.date",
                    "datetime.timedelta"
                ]
            }
        },
        "Iso8601Format.parse_datetime": {
            "name": "parse_datetime",
            "location": 28,
            "return": [
                "int",
                "str",
                "tuple",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "StrftimeFormat.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "format_string": [
                    "str",
                    "int"
                ]
            }
        },
        "StrftimeFormat.format_datetime": {
            "name": "format_datetime",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Optional[Exception]"
                ]
            }
        },
        "StrftimeFormat.parse_datetime": {
            "name": "parse_datetime",
            "location": 42,
            "return": [
                "str",
                "datetime.datetime",
                "Tuple[str, str]",
                "datetime.date.time"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "Union[str, datetime.tzinfo]",
                    "Dict[str, Any]"
                ]
            }
        },
        "DatetimeWithFormat.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "fmt": [
                    "str",
                    "bool"
                ]
            }
        },
        "DatetimeWithFormat.value": {
            "name": "value",
            "location": 59,
            "return": [
                "str",
                "int",
                "Type[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeWithFormat.fmt": {
            "name": "fmt",
            "location": 63,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeWithFormat.formatted": {
            "name": "formatted",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "preacher-master/preacher/core/logger.py": {
        "_create_logger": {
            "name": "_create_logger",
            "location": 8,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {}
        }
    },
    "preacher-master/preacher/core/status.py": {
        "merge_statuses": {
            "name": "merge_statuses",
            "location": 38,
            "return": [
                "Optional[str]",
                "int",
                "bytearray"
            ],
            "arguments": {
                "statuses": [
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "Status.is_succeeded": {
            "name": "is_succeeded",
            "location": 22,
            "return": [
                "str",
                "Optional[str]",
                "Optional[List[str]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Status.merge": {
            "name": "merge",
            "location": 25,
            "return": [
                "BaseException",
                "Tuple[int, int]",
                "Dict[str, Dict[str, float]]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Status.__str__": {
            "name": "__str__",
            "location": 28,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Status.__repr__": {
            "name": "__repr__",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Status.__bool__": {
            "name": "__bool__",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Statused.status": {
            "name": "status",
            "location": 45,
            "return": [
                "Status"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusedList.status": {
            "name": "status",
            "location": 57,
            "return": [
                "List[str]",
                "List[float]",
                "str",
                "Set[int]",
                "Dict[str, Any]",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusedList.collect": {
            "name": "collect",
            "location": 61,
            "return": [
                "str",
                "List[Dict]",
                "List[str]",
                "List[int]"
            ],
            "arguments": {
                "iterable": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "List[int]",
                    "Set[str]"
                ]
            }
        }
    },
    "preacher-master/preacher/core/__init__.py": {},
    "preacher-master/preacher/core/extraction/analysis.py": {
        "_load_mapping": {
            "name": "_load_mapping",
            "location": 102,
            "return": [
                "Dict[str, Any]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "source": [
                    "str",
                    "Dict[str, str]",
                    "List[str]",
                    "Iterator[str]"
                ]
            }
        },
        "Analyzer.for_text": {
            "name": "for_text",
            "location": 27,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "extract": [
                    "Callable[[str], T]",
                    "int",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "Analyzer.for_mapping": {
            "name": "for_mapping",
            "location": 31,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "extract": [
                    "Callable[[lxml.etree._Element], T]",
                    "Callable[[Mapping], T]",
                    "str",
                    "bool",
                    "Any"
                ]
            }
        },
        "Analyzer.for_etree": {
            "name": "for_etree",
            "location": 35,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "extract": [
                    "Callable[[lxml.etree._Element], T]",
                    "Callable[[Mapping], T]",
                    "str",
                    "bool",
                    "Any"
                ]
            }
        },
        "_LazyLoader.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Mapping[str, str]",
                    "int",
                    "Any"
                ],
                "load": [
                    "str",
                    "bool"
                ],
                "error": [
                    "Exception",
                    "Union[str, Exception]",
                    "bool",
                    "Optional[IO[str]]"
                ]
            }
        },
        "_LazyLoader.get": {
            "name": "get",
            "location": 55,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseBodyAnalyzer.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "body": [
                    "dict",
                    "str",
                    "core.models.User"
                ]
            }
        },
        "ResponseBodyAnalyzer.for_text": {
            "name": "for_text",
            "location": 89,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "extract": [
                    "bool",
                    "bytes",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "ResponseBodyAnalyzer.for_mapping": {
            "name": "for_mapping",
            "location": 92,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": [],
                "extract": [
                    "Callable[[Mapping], T]",
                    "List[List[str]]",
                    "int",
                    "str",
                    "tuple"
                ]
            }
        },
        "ResponseBodyAnalyzer.for_etree": {
            "name": "for_etree",
            "location": 98,
            "return": [
                "str",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "extract": [
                    "str",
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        },
        "MappingAnalyzer.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "MappingAnalyzer.for_text": {
            "name": "for_text",
            "location": 110,
            "return": [
                "str",
                "List[List[str]]",
                "int",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "extract": [
                    "Callable[[str], T]",
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "MappingAnalyzer.for_mapping": {
            "name": "for_mapping",
            "location": 115,
            "return": [
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "extract": [
                    "str",
                    "SendCh[trio.abc.Stream]"
                ]
            }
        },
        "MappingAnalyzer.for_etree": {
            "name": "for_etree",
            "location": 118,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "extract": [
                    "Callable[[lxml.etree._Element], T]",
                    "Callable[[Mapping], T]",
                    "str",
                    "bool",
                    "Any"
                ]
            }
        }
    },
    "preacher-master/preacher/core/extraction/error.py": {},
    "preacher-master/preacher/core/extraction/extraction.py": {
        "Extractor.extract": {
            "name": "extract",
            "location": 13,
            "return": [
                "builtins.object"
            ],
            "arguments": {
                "self": [],
                "analyzer": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "preacher-master/preacher/core/extraction/__init__.py": {},
    "preacher-master/preacher/core/extraction/impl/jq_.py": {
        "JqEngine.iter": {
            "name": "iter",
            "location": 11,
            "return": [
                "typing.Iterator[builtins.object]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "JqExtractor.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "engine": [
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "bool",
                    "Optional[str]"
                ],
                "query": [
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "bool",
                    "Optional[str]"
                ],
                "multiple": [
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "bool",
                    "Optional[str]"
                ],
                "cast": [
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "JqExtractor.extract": {
            "name": "extract",
            "location": 28,
            "return": [
                "Optional[str]",
                "str",
                "Pattern",
                "bool",
                "Union[Iterable[str], str]"
            ],
            "arguments": {
                "self": [],
                "analyzer": [
                    "str"
                ]
            }
        }
    },
    "preacher-master/preacher/core/extraction/impl/jq_engine.py": {
        "PyJqEngine.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PyJqEngine.iter": {
            "name": "iter",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Optional[str]",
                    "Mapping[str, str]",
                    "Optional[Exception]"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "PyJqEngine.is_available": {
            "name": "is_available",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "preacher-master/preacher/core/extraction/impl/key.py": {
        "KeyExtractor.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "List[str]",
                    "bytes"
                ],
                "multiple": [
                    "str",
                    "bytes",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "cast": [
                    "str",
                    "bytes",
                    "int",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "KeyExtractor.extract": {
            "name": "extract",
            "location": 19,
            "return": [
                "int",
                "Tuple[str, str]",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "analyzer": [
                    "dict",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "preacher-master/preacher/core/extraction/impl/xpath.py": {
        "XPathExtractor.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query": [
                    "int",
                    "bool",
                    "core.base.setup.Settings",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "str"
                ],
                "multiple": [
                    "int",
                    "bool",
                    "core.base.setup.Settings",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "str"
                ],
                "cast": [
                    "int",
                    "bool",
                    "core.base.setup.Settings",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "str"
                ],
                "namespaces": [
                    "int",
                    "bool",
                    "core.base.setup.Settings",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "str"
                ]
            }
        },
        "XPathExtractor.extract": {
            "name": "extract",
            "location": 23,
            "return": [
                "Optional[str]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "analyzer": [
                    "allennlp.common.util.JsonDict",
                    "Callable[[lxml.etree._Element], T]",
                    "str",
                    "Iterable[str]",
                    "Iterable[T]"
                ]
            }
        },
        "XPathExtractor._convert": {
            "name": "_convert",
            "location": 35,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "elem": [
                    "List[str]"
                ]
            }
        },
        "XPathExtractor._extract": {
            "name": "_extract",
            "location": 40,
            "return": [
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "elem": [
                    "str",
                    "Union[int, float]",
                    "dict"
                ]
            }
        }
    },
    "preacher-master/preacher/core/extraction/impl/__init__.py": {},
    "preacher-master/preacher/core/request/header.py": {},
    "preacher-master/preacher/core/request/request.py": {
        "Request.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Optional[str]",
                    "int",
                    "type"
                ],
                "path": [
                    "str",
                    "List[str]"
                ],
                "headers": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "List[Tuple[int, int]]",
                    "IO[str]"
                ],
                "params": [
                    "str",
                    "Optional[str]",
                    "int",
                    "type"
                ],
                "body": [
                    "str",
                    "Optional[str]",
                    "int",
                    "type"
                ]
            }
        },
        "Request.method": {
            "name": "method",
            "location": 34,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.path": {
            "name": "path",
            "location": 38,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.headers": {
            "name": "headers",
            "location": 42,
            "return": [
                "int",
                "dict",
                "Dict[str, Type]",
                "str",
                "Dict[str, float]",
                "Dict[str, str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.params": {
            "name": "params",
            "location": 46,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.body": {
            "name": "body",
            "location": 50,
            "return": [
                "str",
                "Dict[str, str]",
                "bytes",
                "MutableMapping[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "preacher-master/preacher/core/request/requester.py": {
        "_generate_id": {
            "name": "_generate_id",
            "location": 174,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "ResponseBodyWrapper.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "res": [
                    "int",
                    "float",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "ResponseBodyWrapper.text": {
            "name": "text",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseBodyWrapper.content": {
            "name": "content",
            "location": 30,
            "return": [
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseWrapper.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Dict[str, str]",
                    "Sequence[str]",
                    "Optional[str]",
                    "List[str]"
                ],
                "res": [
                    "int",
                    "bytes",
                    "bool",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "ResponseWrapper.id": {
            "name": "id",
            "location": 41,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseWrapper.elapsed": {
            "name": "elapsed",
            "location": 45,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseWrapper.status_code": {
            "name": "status_code",
            "location": 49,
            "return": [
                "str",
                "int",
                "bytes",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseWrapper.headers": {
            "name": "headers",
            "location": 53,
            "return": [
                "Optional[str]",
                "Dict[str, str]",
                "str",
                "Dict[str, List[Callable]]",
                "dict",
                "Dict[str, Any]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseWrapper.body": {
            "name": "body",
            "location": 59,
            "return": [
                "str",
                "Dict[str, str]",
                "bytes",
                "MutableMapping[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Requester.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "base_url": [
                    "str",
                    "Dict[str, str]"
                ],
                "timeout": [
                    "int",
                    "str",
                    "bool",
                    "tuple"
                ]
            }
        },
        "Requester.base_url": {
            "name": "base_url",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Requester.execute": {
            "name": "execute",
            "location": 97,
            "return": [
                "str",
                "Dict[str, Any]",
                "flask.Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request"
                ],
                "session": [
                    "Optional[str]"
                ],
                "context": [
                    "dict"
                ]
            }
        },
        "Requester._prepare_request": {
            "name": "_prepare_request",
            "location": 151,
            "return": [
                "Dict[str, Any]",
                "dict",
                "List[Dict]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "httpx.Request",
                    "faaspact_verifier.definitions.Request",
                    "Dict[str, Any]"
                ],
                "context": [
                    "Union[dict, list]",
                    "aiohttp.web.Request",
                    "starlette.requests.Request",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "preacher-master/preacher/core/request/request_body.py": {
        "RequestBody.content_type": {
            "name": "content_type",
            "location": 15,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestBody.resolve": {
            "name": "resolve",
            "location": 19,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "UrlencodedRequestBody.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "params": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "UrlencodedRequestBody.content_type": {
            "name": "content_type",
            "location": 28,
            "return": [
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrlencodedRequestBody.resolve": {
            "name": "resolve",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "dict"
                ]
            }
        },
        "JsonRequestBody.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "bytes",
                    "Dict[str, str]",
                    "list",
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "JsonRequestBody.content_type": {
            "name": "content_type",
            "location": 40,
            "return": [
                "str",
                "float",
                "bool",
                "Exception",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonRequestBody.resolve": {
            "name": "resolve",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "JsonRequestBody.resolve._resolve_value": {
            "name": "_resolve_value",
            "location": 44,
            "return": [
                "int",
                "Optional[int]",
                "List[int]",
                "tuple",
                "float",
                "str"
            ],
            "arguments": {
                "obj": [
                    "Union[cirq.value.Symbol, float]",
                    "int",
                    "denite.util.UserContext",
                    "core.LazyNS"
                ]
            }
        }
    },
    "preacher-master/preacher/core/request/response.py": {
        "ResponseBody.text": {
            "name": "text",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResponseBody.content": {
            "name": "content",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.id": {
            "name": "id",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.elapsed": {
            "name": "elapsed",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.status_code": {
            "name": "status_code",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.headers": {
            "name": "headers",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.body": {
            "name": "body",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "preacher-master/preacher/core/request/url_param.py": {
        "resolve_url_param_value": {
            "name": "resolve_url_param_value",
            "location": 17,
            "return": [
                "int",
                "bool",
                "list",
                "static_frame.core.util.DtypesSpecifier"
            ],
            "arguments": {
                "value": [
                    "str",
                    "dict",
                    "Union[int, float]",
                    "T",
                    "float"
                ],
                "context": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "resolve_url_param": {
            "name": "resolve_url_param",
            "location": 52,
            "return": [
                "List[str]",
                "Mapping",
                "bool"
            ],
            "arguments": {
                "param": [
                    "str",
                    "Union[cirq.value.symbol.Symbol, float]",
                    "List[str]"
                ],
                "context": [
                    "str"
                ]
            }
        },
        "resolve_url_params": {
            "name": "resolve_url_params",
            "location": 75,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "params": [
                    "dict",
                    "bool",
                    "Dict[str, Any]",
                    "MutableMapping[str, Any]",
                    "Optional[preacher.core.value.Value.Context]",
                    "Callable[[Any], str]"
                ],
                "context": [
                    "Optional[preacher.core.value.Value.Context]",
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, float]"
                ]
            }
        }
    },
    "preacher-master/preacher/core/request/__init__.py": {},
    "preacher-master/preacher/core/scenario/case.py": {
        "Case.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "label": [
                    "int",
                    "str",
                    "float",
                    "Dict[str, str]",
                    "Optional[str]"
                ],
                "enabled": [
                    "int",
                    "str",
                    "float",
                    "Dict[str, str]",
                    "Optional[str]"
                ],
                "conditions": [
                    "int",
                    "str",
                    "float",
                    "Dict[str, str]",
                    "Optional[str]"
                ],
                "request": [
                    "str",
                    "Optional[str]",
                    "fastapi.Request"
                ],
                "response": [
                    "str",
                    "int",
                    "bytes"
                ],
                "waiting_time": [
                    "int",
                    "Optional[int]",
                    "List[str]",
                    "float",
                    "datetime.timedelta"
                ]
            }
        },
        "Case.label": {
            "name": "label",
            "location": 37,
            "return": [
                "int",
                "str",
                "bool",
                "List[List[str]]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Case.enabled": {
            "name": "enabled",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Case.conditions": {
            "name": "conditions",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Case.request": {
            "name": "request",
            "location": 49,
            "return": [
                "int",
                "List[Dict[str, Any]]",
                "bool",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Case.response": {
            "name": "response",
            "location": 53,
            "return": [
                "dict",
                "Optional[str]",
                "List[str]",
                "int",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Case.waiting_time": {
            "name": "waiting_time",
            "location": 57,
            "return": [
                "int",
                "Optional[bool]",
                "Iterable[Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "preacher-master/preacher/core/scenario/case_listener.py": {
        "CaseListener.on_execution": {
            "name": "on_execution",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "execution": [
                    "preacher.core.requesExecutionReport",
                    "Dict[str, str]",
                    "str"
                ],
                "response": [
                    "preacher.core.requesExecutionReport",
                    "Dict[str, str]",
                    "str"
                ]
            }
        }
    },
    "preacher-master/preacher/core/scenario/case_result.py": {
        "CaseResult.status": {
            "name": "status",
            "location": 21,
            "return": [
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "preacher-master/preacher/core/scenario/case_runner.py": {
        "CaseRunner.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "unit_runner": [
                    "int",
                    "bool",
                    "float"
                ],
                "listener": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "CaseRunner.base_url": {
            "name": "base_url",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CaseRunner.run": {
            "name": "run",
            "location": 25,
            "return": [
                "bool",
                "str",
                "int",
                "Dict[int, int]"
            ],
            "arguments": {
                "self": [],
                "case": [
                    "int",
                    "Dict[str, Any]",
                    "Mapping",
                    "dict"
                ],
                "session": [],
                "context": [
                    "dict",
                    "memoryview"
                ]
            }
        }
    },
    "preacher-master/preacher/core/scenario/scenario.py": {
        "Scenario.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "bool",
                    "List[List[Any]]",
                    "Optional[str]"
                ],
                "ordered": [
                    "str",
                    "bool",
                    "List[List[Any]]",
                    "Optional[str]"
                ],
                "conditions": [
                    "str",
                    "bool",
                    "List[List[Any]]",
                    "Optional[str]"
                ],
                "cases": [
                    "str",
                    "bool",
                    "List[List[Any]]",
                    "Optional[str]"
                ],
                "subscenarios": [
                    "str",
                    "bool",
                    "List[List[Any]]",
                    "Optional[str]"
                ]
            }
        },
        "Scenario.label": {
            "name": "label",
            "location": 27,
            "return": [
                "int",
                "str",
                "bool",
                "List[List[str]]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scenario.ordered": {
            "name": "ordered",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scenario.conditions": {
            "name": "conditions",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scenario.cases": {
            "name": "cases",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scenario.subscenarios": {
            "name": "subscenarios",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "preacher-master/preacher/core/scenario/scenario_result.py": {},
    "preacher-master/preacher/core/scenario/scenario_runner.py": {
        "ScenarioRunner.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "executor": [
                    "int",
                    "bool",
                    "float"
                ],
                "case_runner": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ScenarioRunner.submit": {
            "name": "submit",
            "location": 20,
            "return": [
                "bool",
                "str",
                "int",
                "starfish.core.imagestack.parser.TileKey"
            ],
            "arguments": {
                "self": [],
                "scenario": [
                    "int",
                    "dict",
                    "str",
                    "core.Year",
                    "float",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "preacher-master/preacher/core/scenario/scenario_task.py": {
        "ScenarioTask.result": {
            "name": "result",
            "location": 12,
            "return": [
                "scenario_result.ScenarioResult"
            ],
            "arguments": {
                "self": []
            }
        },
        "StaticScenarioTask.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "result": [
                    "Counter",
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "str",
                    "Tuple[int, int]",
                    "list"
                ]
            }
        },
        "StaticScenarioTask.result": {
            "name": "result",
            "location": 20,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RunningScenarioTask.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "bool",
                    "List[List[Any]]",
                    "Optional[str]"
                ],
                "conditions": [
                    "str",
                    "bool",
                    "List[List[Any]]",
                    "Optional[str]"
                ],
                "cases": [
                    "str",
                    "bool",
                    "List[List[Any]]",
                    "Optional[str]"
                ],
                "subscenarios": [
                    "str",
                    "bool",
                    "List[List[Any]]",
                    "Optional[str]"
                ]
            }
        },
        "RunningScenarioTask.result": {
            "name": "result",
            "location": 37,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "preacher-master/preacher/core/scenario/__init__.py": {},
    "preacher-master/preacher/core/scenario/util/concurrency.py": {
        "_run_cases_in_order": {
            "name": "_run_cases_in_order",
            "location": 20,
            "return": [
                "List[Dict]",
                "str",
                "int",
                "bool",
                "List[str]",
                "Union[str, List[Any]]",
                "List[List[Any]]"
            ],
            "arguments": {
                "runner": [
                    "dict"
                ],
                "cases": [
                    "dict"
                ],
                "context": [
                    "dict"
                ]
            }
        },
        "CasesTask.result": {
            "name": "result",
            "location": 16,
            "return": [
                "preacher.core.status.StatusedList[preacher.core.scenario.case_result.CaseResult]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedCasesTask.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "executor": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ],
                "runner": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ],
                "cases": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ],
                "context": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "OrderedCasesTask.result": {
            "name": "result",
            "location": 41,
            "return": [
                "int",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnorderedCasesTask.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "executor": [
                    "int",
                    "str"
                ],
                "runner": [
                    "int",
                    "str"
                ],
                "cases": [
                    "int",
                    "str"
                ]
            }
        },
        "UnorderedCasesTask.result": {
            "name": "result",
            "location": 49,
            "return": [
                "List[str]",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "preacher-master/preacher/core/scenario/util/retry.py": {
        "retry_while_false": {
            "name": "retry_while_false",
            "location": 13,
            "return": [
                "bool",
                "Union[type, Tuple[type, ...]]",
                "Optional[Any]",
                "int"
            ],
            "arguments": {
                "func": [
                    "int",
                    "Iterable",
                    "Callable",
                    "Dict[str, Any]",
                    "callable"
                ],
                "attempts": [
                    "int",
                    "str"
                ],
                "delay": [
                    "Callable[[T], bool]",
                    "float",
                    "Callable"
                ],
                "predicate": [
                    "Callable[[T], bool]",
                    "float",
                    "Callable"
                ]
            }
        }
    },
    "preacher-master/preacher/core/scenario/util/__init__.py": {},
    "preacher-master/preacher/core/scheduling/factory.py": {
        "create_scheduler": {
            "name": "create_scheduler",
            "location": 11,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "executor": [
                    "str",
                    "int",
                    "Optional[Dict]"
                ],
                "base_url": [
                    "str",
                    "dict",
                    "List[str]",
                    "Dict[str, str]",
                    "int"
                ],
                "timeout": [
                    "str",
                    "dict",
                    "List[str]",
                    "Dict[str, str]",
                    "int"
                ],
                "retry": [
                    "str",
                    "int",
                    "Optional[Dict]"
                ],
                "delay": [
                    "str",
                    "int",
                    "Optional[Dict]"
                ],
                "listener": [
                    "str",
                    "int",
                    "Optional[Dict]"
                ]
            }
        }
    },
    "preacher-master/preacher/core/scheduling/listener.py": {
        "Listener.on_end": {
            "name": "on_end",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str",
                    "Optional[float]",
                    "preacher.core.status.Status"
                ]
            }
        },
        "Listener.on_scenario": {
            "name": "on_scenario",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "bool",
                    "Exception"
                ]
            }
        },
        "MergingListener.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MergingListener.append": {
            "name": "append",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": [
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "MergingListener.on_execution": {
            "name": "on_execution",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "execution": [
                    "str",
                    "float",
                    "bytes",
                    "int",
                    "List[Callable]"
                ],
                "response": [
                    "str",
                    "float",
                    "bytes",
                    "int",
                    "List[Callable]"
                ]
            }
        },
        "MergingListener.on_scenario": {
            "name": "on_scenario",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "bool",
                    "Tuple[str, str]",
                    "int",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "float"
                ]
            }
        },
        "MergingListener.on_end": {
            "name": "on_end",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "int",
                    "Callable",
                    "Optional[int]",
                    "float",
                    "str"
                ]
            }
        }
    },
    "preacher-master/preacher/core/scheduling/scenario_scheduler.py": {
        "ScenarioScheduler.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "runner": [
                    "int",
                    "bool",
                    "float"
                ],
                "listener": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ScenarioScheduler.run": {
            "name": "run",
            "location": 17,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "scenarios": [
                    "str"
                ]
            }
        },
        "ScenarioScheduler._submit_all": {
            "name": "_submit_all",
            "location": 38,
            "return": [
                "typing.Iterator[preacher.core.scenario.ScenarioTask]"
            ],
            "arguments": {
                "self": [],
                "scenarios": [
                    "int",
                    "str",
                    "Set[str]"
                ]
            }
        }
    },
    "preacher-master/preacher/core/scheduling/__init__.py": {},
    "preacher-master/preacher/core/unit/runner.py": {
        "predicate": {
            "name": "predicate",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "result": [
                    "bool"
                ]
            }
        },
        "UnitRunner.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "requester": [
                    "int",
                    "bool",
                    "float"
                ],
                "retry": [
                    "str",
                    "int",
                    "Union[int, str]",
                    "Dict[str, Any]"
                ],
                "delay": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "UnitRunner.base_url": {
            "name": "base_url",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnitRunner.run": {
            "name": "run",
            "location": 38,
            "return": [
                "bool",
                "Iterable"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Optional[requests.Session]",
                    "preacher.core.requesRequest",
                    "starlette.requests.Request"
                ],
                "requirements": [
                    "Optional[requests.Session]",
                    "preacher.core.requesRequest",
                    "starlette.requests.Request"
                ],
                "session": [
                    "Optional[requests.Session]",
                    "preacher.core.requesRequest",
                    "starlette.requests.Request"
                ],
                "context": [
                    "int",
                    "str",
                    "Optional[Dict[str, str]]",
                    "dict"
                ]
            }
        },
        "UnitRunner._execute": {
            "name": "_execute",
            "location": 53,
            "return": [
                "Optional[BaseException]",
                "Optional[Iterable[Any]]",
                "Callable",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Optional[requests.Session]",
                    "preacher.core.requesRequest"
                ],
                "requirements": [
                    "int",
                    "core.models.Recipe",
                    "bytes",
                    "requests.Request",
                    "django.core.handlers.wsgi.WSGIRequest"
                ],
                "session": [
                    "Optional[requests.Session]",
                    "preacher.core.requesRequest"
                ],
                "context": [
                    "aiohttp.web.Request",
                    "str"
                ]
            }
        }
    },
    "preacher-master/preacher/core/unit/__init__.py": {},
    "preacher-master/preacher/core/util/error.py": {
        "to_message": {
            "name": "to_message",
            "location": 4,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "error": [
                    "Exception",
                    "str",
                    "Callable[..., Awaitable[None]]"
                ]
            }
        }
    },
    "preacher-master/preacher/core/util/functional.py": {
        "identity": {
            "name": "identity",
            "location": 10,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "value": [
                    "T",
                    "Type",
                    "bool",
                    "Iterable[T]"
                ]
            }
        },
        "recursive_map": {
            "name": "recursive_map",
            "location": 15,
            "return": [
                "bool",
                "Set[str]",
                "Optional[Any]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Mapping[str, Any]",
                    "List[str]",
                    "Callable[..., T]"
                ],
                "obj": [
                    "List[dict]",
                    "type",
                    "Iterable[bytes]",
                    "Optional[Any]"
                ]
            }
        },
        "apply_if_not_none": {
            "name": "apply_if_not_none",
            "location": 27,
            "return": [
                "Optional[str]",
                "Optional[float]",
                "Optional[int]",
                "type"
            ],
            "arguments": {
                "func": [
                    "Mapping[str, Dict[str, Any]]",
                    "Iterable",
                    "str"
                ],
                "value": [
                    "Union[T, Sequence[T]]",
                    "Optional[int]",
                    "Optional[Union[int, float]]",
                    "float"
                ]
            }
        }
    },
    "preacher-master/preacher/core/util/serialization.py": {
        "to_serializable": {
            "name": "to_serializable",
            "location": 6,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "value": [
                    "str",
                    "T",
                    "datetime.date",
                    "Mapping",
                    "int"
                ]
            }
        }
    },
    "preacher-master/preacher/core/util/__init__.py": {},
    "preacher-master/preacher/core/value/value.py": {
        "Value.type": {
            "name": "type",
            "location": 12,
            "return": [
                "typing.Type[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Value.resolve": {
            "name": "resolve",
            "location": 16,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "preacher-master/preacher/core/value/__init__.py": {},
    "preacher-master/preacher/core/value/impl/context.py": {
        "ContextualValue.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "ContextualValue.type": {
            "name": "type",
            "location": 12,
            "return": [
                "str",
                "Exception",
                "Callable[..., T]",
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextualValue.key": {
            "name": "key",
            "location": 16,
            "return": [
                "str",
                "List[str]",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextualValue.resolve": {
            "name": "resolve",
            "location": 19,
            "return": [
                "str",
                "Optional[T]",
                "int"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "bool",
                    "int",
                    "Dict[str, List[str]]",
                    "list",
                    "Pattern[str]"
                ]
            }
        }
    },
    "preacher-master/preacher/core/value/impl/datetime.py": {
        "parse_datetime_value_with_format": {
            "name": "parse_datetime_value_with_format",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "datetime.datetime"
                ],
                "fmt": [
                    "str"
                ]
            }
        },
        "parse_relative_datetime_value": {
            "name": "parse_relative_datetime_value",
            "location": 73,
            "return": [
                "datetime.datetime",
                "Optional[float]",
                "preacher.core.value.RelativeDatetime"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "_select_origin": {
            "name": "_select_origin",
            "location": 107,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "context": [
                    "Optional[str]",
                    "Dict[Any, bool]",
                    "List[str]",
                    "dict",
                    "Optional[bool]",
                    "str"
                ]
            }
        },
        "RelativeDatetime.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "delta": [
                    "int",
                    "bool",
                    "float"
                ],
                "tm": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "RelativeDatetime.type": {
            "name": "type",
            "location": 25,
            "return": [
                "str",
                "datetime.datetime",
                "Optional[datetime.datetime]",
                "datetime.date"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelativeDatetime.resolve": {
            "name": "resolve",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "DatetimeValueWithFormat.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "original": [
                    "Sequence",
                    "str",
                    "List[str]",
                    "bool"
                ],
                "fmt": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "DatetimeValueWithFormat.type": {
            "name": "type",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatetimeValueWithFormat.resolve": {
            "name": "resolve",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "List[dict]",
                    "dict"
                ]
            }
        }
    },
    "preacher-master/preacher/core/value/impl/static.py": {
        "StaticValue.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "StaticValue.type": {
            "name": "type",
            "location": 14,
            "return": [
                "bool",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "StaticValue.resolve": {
            "name": "resolve",
            "location": 17,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "preacher-master/preacher/core/value/impl/__init__.py": {},
    "preacher-master/preacher/core/verification/description.py": {
        "Description.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "extractor": [
                    "int",
                    "str",
                    "bool"
                ],
                "predicates": [
                    "int",
                    "str",
                    "bool"
                ],
                "value_name": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Description.verify": {
            "name": "verify",
            "location": 25,
            "return": [
                "Callable[..., None]",
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "analyzer": [
                    "Iterable[T]",
                    "str",
                    "bool",
                    "int",
                    "static_frame.core.util.DepthLevelSpecifier"
                ],
                "context": [
                    "Optional[str]",
                    "str",
                    "Optional[int]"
                ]
            }
        }
    },
    "preacher-master/preacher/core/verification/hamcrest.py": {
        "before": {
            "name": "before",
            "location": 46,
            "return": [
                "str",
                "List[List[int]]",
                "Dict[str, List]"
            ],
            "arguments": {
                "value": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "after": {
            "name": "after",
            "location": 53,
            "return": [
                "str",
                "List[List[int]]",
                "Dict[str, List]"
            ],
            "arguments": {
                "value": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "day_of_week": {
            "name": "day_of_week",
            "location": 60,
            "return": [
                "str",
                "Iterable[int]",
                "topicdb.core.store.retrievalmode.RetrievalMode",
                "int"
            ],
            "arguments": {
                "day": [
                    "float",
                    "int"
                ]
            }
        },
        "_ensure_str": {
            "name": "_ensure_str",
            "location": 71,
            "return": [
                "float",
                "Tuple[int, int]",
                "str",
                "int"
            ],
            "arguments": {
                "obj": [
                    "str"
                ]
            }
        },
        "_ensure_datetime": {
            "name": "_ensure_datetime",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [
                    "int"
                ]
            }
        },
        "_ConvertingMatcher.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "matcher": [
                    "int",
                    "float",
                    "List[List[int]]"
                ],
                "convert": [
                    "int",
                    "float",
                    "List[List[int]]"
                ]
            }
        },
        "_ConvertingMatcher._matches": {
            "name": "_matches",
            "location": 22,
            "return": [
                "int",
                "Dict[str, Any]",
                "Type"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Dict[str, Any]",
                    "str",
                    "int"
                ]
            }
        },
        "_ConvertingMatcher.describe_to": {
            "name": "describe_to",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "description": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "_ConvertingMatcher.describe_mismatch": {
            "name": "describe_mismatch",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "mismatch_description": [
                    "str"
                ]
            }
        },
        "_DayOfWeekMatcher.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "day": [
                    "int",
                    "float"
                ]
            }
        },
        "_DayOfWeekMatcher._matches": {
            "name": "_matches",
            "location": 38,
            "return": [
                "str",
                "int",
                "Iterable['cirq.Qid']",
                "set"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "Callable",
                    "bytes",
                    "Callable[[T], bool]",
                    "float"
                ]
            }
        },
        "_DayOfWeekMatcher.describe_to": {
            "name": "describe_to",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "description": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "preacher-master/preacher/core/verification/matcher.py": {
        "MatcherWrappingPredicate.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "factory": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "MatcherWrappingPredicate.verify": {
            "name": "verify",
            "location": 28,
            "return": [
                "int",
                "List[Callable]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "actual": [
                    "int",
                    "Callable",
                    "str"
                ],
                "context": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "MatcherFactory.create": {
            "name": "create",
            "location": 43,
            "return": [
                "hamcrest.core.matcher.Matcher"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Optional[preacher.core.value.Value.Context]",
                    "str",
                    "Iterator[str]",
                    "bool",
                    "float",
                    "click.core.Context"
                ]
            }
        },
        "StaticMatcherFactory.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "matcher": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "StaticMatcherFactory.create": {
            "name": "create",
            "location": 51,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "Optional[preacher.core.value.Value.Context]",
                    "str",
                    "Iterator[str]",
                    "bool",
                    "float",
                    "click.core.Context"
                ]
            }
        },
        "ValueMatcherFactory.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "matcher_func": [
                    "int",
                    "bool"
                ],
                "arg": [
                    "int",
                    "bool"
                ],
                "value_func": [
                    "str",
                    "static_frame.core.util.PathSpecifier",
                    "bool",
                    "Dict[str, Dict]",
                    "Optional[bool]",
                    "int"
                ]
            }
        },
        "ValueMatcherFactory.create": {
            "name": "create",
            "location": 66,
            "return": [
                "str",
                "int",
                "float",
                "dict"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "bool",
                    "dict",
                    "Optional[int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ValueMatcherFactory._ensure_value": {
            "name": "_ensure_value",
            "location": 70,
            "return": [
                "int",
                "tuple",
                "str",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecursiveMatcherFactory.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "matcher_func": [
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "inner_factories": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "RecursiveMatcherFactory.create": {
            "name": "create",
            "location": 81,
            "return": [
                "preacher.compilation.verification.matcher.MatcherFactoryCompiler",
                "int"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "preacher-master/preacher/core/verification/predicate.py": {
        "Predicate.verify": {
            "name": "verify",
            "location": 16,
            "return": [
                "verification.Verification"
            ],
            "arguments": {
                "self": [],
                "actual": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "context": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "preacher-master/preacher/core/verification/response.py": {
        "ResponseVerification.status": {
            "name": "status",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseDescription.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "status_code": [
                    "int"
                ],
                "headers": [
                    "str",
                    "Optional[Callable]",
                    "Tuple[str, str]",
                    "bytes",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[bool]",
                    "dict"
                ],
                "body": [
                    "str",
                    "int",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "ResponseDescription.verify": {
            "name": "verify",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "int",
                    "flask.Response",
                    "bytes",
                    "str"
                ],
                "context": [
                    "flask.Response",
                    "requests.Response",
                    "bytes",
                    "str",
                    "Optional[preacher.core.value.ValueContext]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "preacher-master/preacher/core/verification/type.py": {
        "require_type": {
            "name": "require_type",
            "location": 10,
            "return": [
                "Callable[[T], T]"
            ],
            "arguments": {
                "tp": [
                    "Type[T]"
                ],
                "func": [
                    "Type[T]"
                ]
            }
        },
        "_require_type": {
            "name": "_require_type",
            "location": 20,
            "return": [
                "int",
                "float",
                "Type",
                "str",
                "T"
            ],
            "arguments": {
                "tp": [
                    "Type[T]",
                    "Optional[str]",
                    "Union[dict, None]"
                ],
                "func": [
                    "str",
                    "T"
                ],
                "value": [
                    "Dict[str, Any]",
                    "str",
                    "int",
                    "dict"
                ]
            }
        }
    },
    "preacher-master/preacher/core/verification/verification.py": {
        "Verification.succeed": {
            "name": "succeed",
            "location": 19,
            "return": [
                "int",
                "List[Callable]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "Verification.of_error": {
            "name": "of_error",
            "location": 23,
            "return": [
                "Mapping[str, Any]",
                "Dict[str, Any]",
                "Iterable['Notification']",
                "str",
                "Sequence[object]"
            ],
            "arguments": {
                "error": [
                    "str",
                    "Optional[str]",
                    "Tuple[int]"
                ]
            }
        },
        "Verification.collect": {
            "name": "collect",
            "location": 27,
            "return": [
                "int",
                "List[Callable]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "children": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "preacher-master/preacher/core/verification/__init__.py": {},
    "preacher-master/preacher/plugin/hookspec.py": {
        "preacher_add_matchers": {
            "name": "preacher_add_matchers",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [
                    "str",
                    "preacher.compilation.verification.matcher.MatcherFactoryCompiler",
                    "Optional[str]",
                    "Iterable[T]"
                ]
            }
        },
        "preacher_add_extractions": {
            "name": "preacher_add_extractions",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [
                    "str",
                    "preacher.compilation.verification.matcher.MatcherFactoryCompiler",
                    "Optional[str]",
                    "Iterable[T]"
                ]
            }
        },
        "preacher_modify_yaml_loader": {
            "name": "preacher_modify_yaml_loader",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "loader": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "preacher-master/preacher/plugin/impl.py": {
        "preacher_add_matchers": {
            "name": "preacher_add_matchers",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [
                    "preacher.compilation.verification.matcher.MatcherFactoryCompiler",
                    "int"
                ]
            }
        },
        "preacher_add_extractions": {
            "name": "preacher_add_extractions",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "compiler": [
                    "preacher.compilation.verification.matcher.MatcherFactoryCompiler",
                    "int"
                ]
            }
        },
        "preacher_modify_yaml_loader": {
            "name": "preacher_modify_yaml_loader",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "loader": [
                    "str",
                    "bool",
                    "BaseException"
                ]
            }
        }
    },
    "preacher-master/preacher/plugin/loader.py": {
        "load_plugins": {
            "name": "load_plugins",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "manager": [
                    "str",
                    "bool"
                ],
                "plugins": [
                    "str"
                ],
                "logger": [
                    "str"
                ]
            }
        },
        "_load_module": {
            "name": "_load_module",
            "location": 36,
            "return": [
                "Optional[str]",
                "bool",
                "list"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "bool"
                ],
                "logger": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "_unique_name": {
            "name": "_unique_name",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "preacher-master/preacher/plugin/manager.py": {
        "get_plugin_manager": {
            "name": "get_plugin_manager",
            "location": 10,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "preacher-master/preacher/plugin/__init__.py": {},
    "preacher-master/preacher/presentation/html.py": {
        "HtmlReporter.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "HtmlReporter._initialize": {
            "name": "_initialize",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HtmlReporter.export_response": {
            "name": "export_response",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "execution": [
                    "preacher.core.requesExecutionReport",
                    "str",
                    "Dict[str, str]",
                    "Optional[dict]"
                ],
                "response": [
                    "dict",
                    "responses.Response"
                ]
            }
        },
        "HtmlReporter.export_results": {
            "name": "export_results",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "preacher-master/preacher/presentation/logging.py": {
        "create_logging_reporter": {
            "name": "create_logging_reporter",
            "location": 128,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "logger": [
                    "str",
                    "logging.Logger",
                    "bytes"
                ],
                "logger_name": [
                    "str"
                ],
                "level": [
                    "str",
                    "bytes"
                ],
                "handlers": [
                    "str"
                ],
                "formatter": [
                    "str",
                    "logging.Logger",
                    "Optional[float]"
                ]
            }
        },
        "_status_to_logging_level": {
            "name": "_status_to_logging_level",
            "location": 162,
            "return": [
                "MutableSet[T]",
                "Dict[str, float]",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "level": [
                    "preacher.core.status.Status",
                    "str",
                    "int"
                ]
            }
        },
        "LoggingReporter.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "str",
                    "logging.Logger",
                    "List[str]",
                    "Tuple[Tuple[str, ...]]"
                ]
            }
        },
        "LoggingReporter.show_scenario_result": {
            "name": "show_scenario_result",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scenario": [
                    "Optional[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "LoggingReporter.show_case_result": {
            "name": "show_case_result",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "case": [
                    "int",
                    "dict",
                    "str"
                ]
            }
        },
        "LoggingReporter.show_execution": {
            "name": "show_execution",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "execution": [
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "LoggingReporter.show_response_verification": {
            "name": "show_response_verification",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verification": [
                    "str",
                    "bool",
                    "List[str]",
                    "bytes"
                ],
                "label": [
                    "str",
                    "int",
                    "Optional[Callable[..., Any]]"
                ]
            }
        },
        "LoggingReporter.show_verification": {
            "name": "show_verification",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verification": [
                    "dict",
                    "str",
                    "bytes"
                ],
                "label": [
                    "str",
                    "int",
                    "List[int]"
                ],
                "child_label": [
                    "List[str]",
                    "int",
                    "Dict[str, Any]",
                    "str",
                    "List[int]",
                    "Optional[int]"
                ]
            }
        },
        "LoggingReporter.show_status": {
            "name": "show_status",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str",
                    "Mapping[str, Any]",
                    "int"
                ]
            }
        },
        "LoggingReporter._log": {
            "name": "_log",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "str",
                    "int",
                    "bytes"
                ],
                "message": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "LoggingReporter._multi_line_message": {
            "name": "_multi_line_message",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "int",
                    "str",
                    "logging.Logger"
                ],
                "message": [
                    "str",
                    "BinaryIO",
                    "IO[Any]",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "LoggingReporter._nesting": {
            "name": "_nesting",
            "location": 121,
            "return": [
                "typing.Iterator[None]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "preacher-master/preacher/presentation/__init__.py": {},
    "preacher-master/preacher/presentation/listener/factory.py": {
        "create_listener": {
            "name": "create_listener",
            "location": 10,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "level": [
                    "Optional[Callable]",
                    "bytes"
                ],
                "formatter": [
                    "Optional[Callable]",
                    "bytes"
                ],
                "report_dir": [
                    "str",
                    "List[Optional[str]]",
                    "Callable[..., bool]"
                ]
            }
        }
    },
    "preacher-master/preacher/presentation/listener/html.py": {
        "create_html_reporting_listener": {
            "name": "create_html_reporting_listener",
            "location": 27,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[Dict]"
                ]
            }
        },
        "HtmlReportingListener.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "reporter": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "HtmlReportingListener.on_execution": {
            "name": "on_execution",
            "location": 15,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "execution": [
                    "Dict[str, str]",
                    "str",
                    "dict",
                    "int",
                    "bytes"
                ],
                "response": [
                    "Dict[str, str]",
                    "str",
                    "dict",
                    "int",
                    "bytes"
                ]
            }
        },
        "HtmlReportingListener.on_scenario": {
            "name": "on_scenario",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "List[Union[\"PipeChain\", str]]",
                    "Callable",
                    "str"
                ]
            }
        },
        "HtmlReportingListener.on_end": {
            "name": "on_end",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str",
                    "Optional[float]",
                    "preacher.core.status.Status"
                ]
            }
        }
    },
    "preacher-master/preacher/presentation/listener/logging.py": {
        "create_logging_reporting_listener": {
            "name": "create_logging_reporting_listener",
            "location": 21,
            "return": [
                "Dict[str, Any]",
                "Optional[str]",
                "dict",
                "int"
            ],
            "arguments": {
                "reporter": [
                    "str"
                ],
                "logger": [
                    "str",
                    "List[str]"
                ],
                "logger_name": [
                    "str",
                    "List[str]"
                ],
                "level": [
                    "str",
                    "List[str]"
                ],
                "handlers": [
                    "str",
                    "List[str]"
                ],
                "formatter": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "LoggingReportingListener.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "reporter": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "LoggingReportingListener.on_scenario": {
            "name": "on_scenario",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "bool",
                    "int"
                ]
            }
        },
        "LoggingReportingListener.on_end": {
            "name": "on_end",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        }
    },
    "preacher-master/preacher/presentation/listener/__init__.py": {},
    "preacher-master/tests/__init__.py": {},
    "preacher-master/tests/app/__init__.py": {},
    "preacher-master/tests/app/cli/test_app.py": {
        "base_dir": {
            "name": "base_dir",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "executor": {
            "name": "executor",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "executor_factory": {
            "name": "executor_factory",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "executor": [
                    "Iterable[str]",
                    "str",
                    "List[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "test_app_normal": {
            "name": "test_app_normal",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [],
                "base_dir": [
                    "str"
                ],
                "executor": [
                    "str",
                    "Optional[str]"
                ],
                "executor_factory": [
                    "str"
                ]
            }
        },
        "test_app_plugin_loading_fails": {
            "name": "test_app_plugin_loading_fails",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "dict"
                ]
            }
        },
        "test_app_scenario_running_not_succeeds": {
            "name": "test_app_scenario_running_not_succeeds",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [],
                "executor_factory": [],
                "executor": []
            }
        },
        "test_app_scenario_running_raises_an_unexpected_error": {
            "name": "test_app_scenario_running_raises_an_unexpected_error",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [],
                "executor_factory": [],
                "executor": []
            }
        },
        "test_app_normal._run": {
            "name": "_run",
            "location": 66,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "scenarios": [
                    "str",
                    "int",
                    "bool",
                    "list"
                ]
            }
        }
    },
    "preacher-master/tests/app/cli/test_executor_factory.py": {
        "test_process_pool_factory": {
            "name": "test_process_pool_factory",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_thread_pool_factory": {
            "name": "test_thread_pool_factory",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "preacher-master/tests/app/cli/test_logging.py": {
        "test_colored_formatter": {
            "name": "test_colored_formatter",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_create_system_logger": {
            "name": "test_create_system_logger",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "verbosity": [
                    "str",
                    "Dict[str, str]"
                ],
                "expected_level": [
                    "str",
                    "logging.Logger",
                    "bytes",
                    "Dict[str, int]"
                ]
            }
        }
    },
    "preacher-master/tests/app/cli/test_main.py": {
        "base_dir": {
            "name": "base_dir",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_show_and_exit": {
            "name": "test_show_and_exit",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        },
        "test_given_invalid_options": {
            "name": "test_given_invalid_options",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "base_dir": [
                    "List[int]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_default": {
            "name": "test_default",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "abilian.app.Application"
                ],
                "env": [
                    "click.testing.CliRunner",
                    "List[str]"
                ]
            }
        },
        "test_arguments": {
            "name": "test_arguments",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "Type"
                ],
                "base_dir": [
                    "str"
                ]
            }
        },
        "test_environ": {
            "name": "test_environ",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "Type"
                ],
                "base_dir": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "test_exit_code": {
            "name": "test_exit_code",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [],
                "exit_code": [
                    "str"
                ]
            }
        }
    },
    "preacher-master/tests/app/cli/test_option.py": {
        "test_level_type": {
            "name": "test_level_type",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_executor_factory_type": {
            "name": "test_executor_factory_type",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "preacher-master/tests/app/cli/__init__.py": {},
    "preacher-master/tests/compilation/test_argument.py": {
        "test_given_single_value": {
            "name": "test_given_single_value",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_given_nested_value": {
            "name": "test_given_nested_value",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_given_invalid_key": {
            "name": "test_given_invalid_key",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "preacher-master/tests/compilation/test_compilation_error.py": {
        "test_render_path": {
            "name": "test_render_path",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "preacher-master/tests/compilation/test_datetime_compilation.py": {
        "test_compile_datetime_format_given_invalid": {
            "name": "test_compile_datetime_format_given_invalid",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "obj": [
                    "str"
                ]
            }
        },
        "test_compile_datetime_format_iso8601": {
            "name": "test_compile_datetime_format_iso8601",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "obj": [
                    "str"
                ]
            }
        },
        "test_compile_datetime_format_strftime": {
            "name": "test_compile_datetime_format_strftime",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [],
                "obj": [
                    "Tuple[str]",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "preacher-master/tests/compilation/test_parameter_compile.py": {
        "test_given_invalid_obj": {
            "name": "test_given_invalid_obj",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "obj": [
                    "dict",
                    "str"
                ],
                "expected_path": []
            }
        },
        "test_given_empty_mapping": {
            "name": "test_given_empty_mapping",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_given_filled_mapping": {
            "name": "test_given_filled_mapping",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "preacher-master/tests/compilation/__init__.py": {},
    "preacher-master/tests/compilation/extraction/test_extraction_compiler.py": {
        "jq_factory": {
            "name": "jq_factory",
            "location": 15,
            "return": [
                "Union[str, Sequence[str]]",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "xpath_factory": {
            "name": "xpath_factory",
            "location": 20,
            "return": [
                "Union[str, Sequence[str]]",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "compiler": {
            "name": "compiler",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "jq_factory": [
                    "int"
                ],
                "xpath_factory": [
                    "int"
                ]
            }
        },
        "test_when_given_invalid_value": {
            "name": "test_when_given_invalid_value",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": [
                    "str",
                    "preacher.compilation.scenario.case.CaseCompiler",
                    "Callable",
                    "Dict[str, List[str]]"
                ],
                "value": [
                    "str",
                    "Optional[str]"
                ],
                "expected_message": [
                    "str",
                    "tartare.core.publisher.AbstractProtocol",
                    "Dict[str, Any]"
                ],
                "expected_path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_when_given_a_string": {
            "name": "test_when_given_a_string",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": [
                    "preacher.compilation.requesrequesRequestCompiler",
                    "preacher.compilation.scenario.scenario.ScenarioCompiler",
                    "supersemodels.core.Database"
                ],
                "jq_factory": [],
                "xpath_factory": []
            }
        },
        "test_when_given_a_jq_object": {
            "name": "test_when_given_a_jq_object",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": [
                    "preacher.compilation.scenario.scenario.ScenarioCompiler",
                    "preacher.compilation.requesrequesRequestCompiler"
                ],
                "jq_factory": [],
                "xpath_factory": []
            }
        },
        "test_when_given_an_xpath_object": {
            "name": "test_when_given_an_xpath_object",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": [
                    "preacher.compilation.requesrequesRequestCompiler",
                    "preacher.compilation.scenario.scenario.ScenarioCompiler",
                    "str",
                    "Iterable",
                    "Dict[str, object]"
                ],
                "jq_factory": [
                    "unittesmock.Mock"
                ],
                "xpath_factory": [
                    "unittesmock.Mock"
                ]
            }
        },
        "test_compile_xpath_when_given_invalid_options": {
            "name": "test_compile_xpath_when_given_invalid_options",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "str",
                    "dict",
                    "Optional[Dict]"
                ],
                "expected_message": [
                    "str",
                    "bytes",
                    "BinaryIO"
                ],
                "expected_path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_compile_xpath": {
            "name": "test_compile_xpath",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "bool",
                    "dict"
                ],
                "query": [
                    "Callable"
                ],
                "options": [
                    "Callable"
                ],
                "expected_call": []
            }
        },
        "test_compile_key_when_given_invalid_options": {
            "name": "test_compile_key_when_given_invalid_options",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "str",
                    "Optional[str]"
                ],
                "expected_message": [
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "bool"
                ],
                "expected_path": [
                    "str"
                ]
            }
        },
        "test_compile_key": {
            "name": "test_compile_key",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "bool",
                    "dict"
                ],
                "query": [
                    "Set[str]",
                    "dict",
                    "Optional[Set[int]]"
                ],
                "options": [
                    "Set[str]",
                    "dict",
                    "Optional[Set[int]]"
                ],
                "expected_call": [
                    "int",
                    "unittesmock.Mock"
                ]
            }
        },
        "test_add_default_extractions": {
            "name": "test_add_default_extractions",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "bool"
                ],
                "value": [
                    "Callable",
                    "T",
                    "str",
                    "dict"
                ],
                "expected_factory": [
                    "int"
                ],
                "expected_call": []
            }
        },
        "test_compile_jq_when_given_invalid_options": {
            "name": "test_compile_jq_when_given_invalid_options",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "str",
                    "dict",
                    "Optional[Dict]"
                ],
                "expected_message": [
                    "str",
                    "bytes",
                    "BinaryIO"
                ],
                "expected_path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_compile_jq": {
            "name": "test_compile_jq",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "int"
                ],
                "query": [
                    "Callable"
                ],
                "options": [
                    "Callable"
                ],
                "expected_call": []
            }
        }
    },
    "preacher-master/tests/compilation/extraction/__init__.py": {},
    "preacher-master/tests/compilation/request/test_request_body_compiled_json.py": {
        "test_replace": {
            "name": "test_replace",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_compile_and_replace": {
            "name": "test_compile_and_replace",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_fix_hollowed": {
            "name": "test_fix_hollowed",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "float"
                ]
            }
        },
        "test_fix_filled": {
            "name": "test_fix_filled",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "preacher-master/tests/compilation/request/test_request_body_compiled_urlencoded.py": {
        "test_replace_given_another_type": {
            "name": "test_replace_given_another_type",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_replace_given_the_same_type": {
            "name": "test_replace_given_the_same_type",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_compile_and_replace_empty": {
            "name": "test_compile_and_replace_empty",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_compile_and_replace_given_invalid_data": {
            "name": "test_compile_and_replace_given_invalid_data",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "str"
                ]
            }
        },
        "test_compile_and_replace_given_valid_data": {
            "name": "test_compile_and_replace_given_valid_data",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int"
                ]
            }
        },
        "test_fix_empty": {
            "name": "test_fix_empty",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_fix_filled": {
            "name": "test_fix_filled",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": []
            }
        }
    },
    "preacher-master/tests/compilation/request/test_request_body_compiler.py": {
        "default_body": {
            "name": "default_body",
            "location": 16,
            "return": [
                "int",
                "str"
            ],
            "arguments": {}
        },
        "compiler": {
            "name": "compiler",
            "location": 23,
            "return": [
                "Dict[str, Any]",
                "int",
                "Optional[Mapping[str, Any]]",
                "dict",
                "Dict[str, Set[str]]",
                "Optional[T]"
            ],
            "arguments": {
                "default_body": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "test_compile_given_invalid_obj": {
            "name": "test_compile_given_invalid_obj",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": [
                    "preacher.compilation.requesrequesRequestCompiler",
                    "str",
                    "Callable",
                    "dict"
                ],
                "obj": [
                    "preacher.compilation.requesrequesRequestCompiler",
                    "str",
                    "Callable",
                    "dict"
                ],
                "expected_path": [
                    "str",
                    "Callable[[str], str]",
                    "Iterable[str]"
                ]
            }
        },
        "test_compile_empty": {
            "name": "test_compile_empty",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": [
                    "str"
                ],
                "default_body": [
                    "str",
                    "bool",
                    "Optional[Callable[[Any], bool]]",
                    "BinaryIO",
                    "Optional[BinaryIO]"
                ]
            }
        },
        "test_given_type": {
            "name": "test_given_type",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": [
                    "str",
                    "Optional[str]",
                    "Iterable[str]"
                ],
                "default_body": [
                    "str"
                ],
                "type_key": [
                    "str",
                    "Callable",
                    "bool"
                ],
                "expected": [
                    "dict",
                    "str",
                    "Union[None, dict]"
                ]
            }
        },
        "test_of_default": {
            "name": "test_of_default",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": [
                    "str",
                    "dict",
                    "bool",
                    "Dict[str, Any]"
                ],
                "default_body": [
                    "List[str]"
                ],
                "mocker": [
                    "str",
                    "Hashable",
                    "bool"
                ]
            }
        }
    },
    "preacher-master/tests/compilation/request/test_request_compiled.py": {
        "test_replace": {
            "name": "test_replace",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_fix_hollow": {
            "name": "test_fix_hollow",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_fix_filled": {
            "name": "test_fix_filled",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": []
            }
        }
    },
    "preacher-master/tests/compilation/request/test_request_compiler.py": {
        "body": {
            "name": "body",
            "location": 15,
            "return": [
                "str",
                "Dict[str, str]",
                "bytes",
                "MutableMapping[str, Any]",
                "int"
            ],
            "arguments": {}
        },
        "default": {
            "name": "default",
            "location": 22,
            "return": [
                "Dict[str, Any]",
                "bool",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {}
        },
        "compiler": {
            "name": "compiler",
            "location": 33,
            "return": [
                "Dict[str, Any]",
                "int",
                "bytes",
                "dict",
                "Dict[str, Set[str]]",
                "bool"
            ],
            "arguments": {
                "body": [
                    "preacher.compilation.requesrequesRequestCompiled",
                    "str",
                    "bytes",
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, str]",
                    "Union[str, \"TrackingCode\"]"
                ],
                "default": [
                    "preacher.compilation.requesrequesRequestCompiled",
                    "str",
                    "bytes",
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, str]",
                    "Union[str, \"TrackingCode\"]"
                ]
            }
        },
        "test_given_an_invalid_obj": {
            "name": "test_given_an_invalid_obj",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": [
                    "preacher.compilation.requesrequesRequestCompiler",
                    "str",
                    "preacher.compilation.scenario.scenario.ScenarioCompiler",
                    "bool",
                    "Callable"
                ],
                "obj": [
                    "preacher.compilation.requesrequesRequestCompiler",
                    "str",
                    "preacher.compilation.scenario.scenario.ScenarioCompiler",
                    "bool",
                    "Callable"
                ],
                "expected_path": [
                    "str"
                ]
            }
        },
        "test_given_an_empty_mapping": {
            "name": "test_given_an_empty_mapping",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": []
            }
        },
        "test_given_a_valid_method": {
            "name": "test_given_a_valid_method",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": [
                    "str",
                    "Type['Declared']",
                    "bool"
                ],
                "method_obj": [
                    "str",
                    "Dict[str, Any]",
                    "List[List[str]]"
                ],
                "expected": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_given_valid_headers": {
            "name": "test_given_valid_headers",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": [
                    "str",
                    "Tuple[int]"
                ],
                "headers_obj": [
                    "str",
                    "bool"
                ],
                "expected": [
                    "str",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "test_given_an_invalid_params": {
            "name": "test_given_an_invalid_params",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": [
                    "preacher.compilation.requesrequesRequestCompiler",
                    "preacher.compilation.scenario.scenario.ScenarioCompiler",
                    "str",
                    "Iterable",
                    "Dict[str, object]"
                ],
                "mocker": [
                    "str",
                    "int"
                ]
            }
        },
        "test_given_valid_params": {
            "name": "test_given_valid_params",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": [
                    "dict",
                    "preacher.compilation.scenario.case.CaseCompiler",
                    "preacher.compilation.requesrequesRequestCompiler"
                ],
                "mocker": []
            }
        },
        "test_given_invalid_body": {
            "name": "test_given_invalid_body",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": [
                    "preacher.compilation.requesrequesRequestCompiler",
                    "str",
                    "dict"
                ],
                "body": [
                    "str",
                    "int"
                ]
            }
        },
        "test_given_valid_body": {
            "name": "test_given_valid_body",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": [
                    "preacher.compilation.requesrequesRequestCompiler",
                    "dict",
                    "str"
                ],
                "body": [
                    "str",
                    "core.models.Recipe"
                ]
            }
        },
        "test_given_a_string": {
            "name": "test_given_a_string",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": [
                    "preacher.compilation.requesrequesRequestCompiler",
                    "preacher.compilation.scenario.case.CaseCompiler",
                    "dict"
                ]
            }
        },
        "test_of_default_no_body": {
            "name": "test_of_default_no_body",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": [
                    "preacher.compilation.requesrequesRequestCompiler",
                    "str",
                    "Dict[str, Any]",
                    "core.models.Recipe"
                ],
                "body": [
                    "str"
                ],
                "mocker": [
                    "str"
                ]
            }
        },
        "test_of_default_body": {
            "name": "test_of_default_body",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": [
                    "preacher.compilation.requesrequesRequestCompiler",
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "body": [
                    "core.models.Recipe",
                    "preacher.compilation.scenario.case.CaseCompiler"
                ],
                "mocker": [
                    "str"
                ]
            }
        }
    },
    "preacher-master/tests/compilation/request/test_url_params_compile.py": {
        "test_given_invalid_object": {
            "name": "test_given_invalid_object",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "expected_path": []
            }
        },
        "test_given_valid_params": {
            "name": "test_given_valid_params",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "obj": [
                    "bool",
                    "preacher.compilation.requesrequesRequestCompiler"
                ]
            }
        }
    },
    "preacher-master/tests/compilation/request/__init__.py": {},
    "preacher-master/tests/compilation/scenario/test_case_compiled.py": {
        "test_replace": {
            "name": "test_replace",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_fix_hollow": {
            "name": "test_fix_hollow",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_fix_filled": {
            "name": "test_fix_filled",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": []
            }
        }
    },
    "preacher-master/tests/compilation/scenario/test_case_compiler.py": {
        "compiler": {
            "name": "compiler",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "req": [
                    "str",
                    "Iterable[T]",
                    "int"
                ],
                "res": [
                    "str",
                    "Iterable[T]",
                    "int"
                ],
                "desc": [
                    "str",
                    "Iterable[T]",
                    "int"
                ]
            }
        },
        "req": {
            "name": "req",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "res": {
            "name": "res",
            "location": 28,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "desc": {
            "name": "desc",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_given_invalid_values": {
            "name": "test_given_invalid_values",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": [
                    "preacher.compilation.scenario.case.CaseCompiler",
                    "str",
                    "Optional[str]",
                    "bool",
                    "T"
                ],
                "value": [
                    "str"
                ],
                "expected_path": [
                    "str"
                ]
            }
        },
        "test_conditions_compilation_fails": {
            "name": "test_conditions_compilation_fails",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": [
                    "preacher.compilation.scenario.case.CaseCompiler",
                    "list",
                    "Tuple[float, float, float, float, float]"
                ],
                "desc": [
                    "str"
                ]
            }
        },
        "test_request_compilation_fails": {
            "name": "test_request_compilation_fails",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": [
                    "preacher.compilation.scenario.case.CaseCompiler",
                    "int",
                    "str"
                ],
                "req": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "test_response_compilation_fails": {
            "name": "test_response_compilation_fails",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": [
                    "preacher.compilation.scenario.case.CaseCompiler",
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "res": [
                    "str"
                ]
            }
        },
        "test_given_an_empty_object": {
            "name": "test_given_an_empty_object",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": [],
                "req": [
                    "bool"
                ],
                "res": [
                    "Callable"
                ]
            }
        },
        "test_creates_a_case": {
            "name": "test_creates_a_case",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": [
                    "preacher.compilation.scenario.case.CaseCompiler",
                    "preacher.compilation.requesrequesRequestCompiler",
                    "dict"
                ],
                "req": [
                    "bool"
                ],
                "res": [
                    "mock.Mock"
                ],
                "desc": [
                    "bool"
                ]
            }
        },
        "initial_default": {
            "name": "initial_default",
            "location": 122,
            "return": [
                "preacher.compilation.verification.matcher.MatcherFactoryCompiler",
                "Callable",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "test_given_hollow_default": {
            "name": "test_given_hollow_default",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "str"
                ],
                "req": [],
                "res": [],
                "desc": [],
                "initial_default": [
                    "Type"
                ]
            }
        },
        "test_given_filled_default": {
            "name": "test_given_filled_default",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "str"
                ],
                "req": [
                    "bool",
                    "str"
                ],
                "res": [
                    "Iterable[Iterable[Any]]"
                ],
                "desc": [],
                "initial_default": [
                    "Type"
                ]
            }
        },
        "test_compile_fixed": {
            "name": "test_compile_fixed",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": [
                    "preacher.compilation.scenario.case.CaseCompiler",
                    "bool",
                    "preacher.compilation.scenario.scenario.ScenarioCompiler",
                    "str"
                ],
                "mocker": []
            }
        },
        "test_compile_default": {
            "name": "test_compile_default",
            "location": 184,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "mocker": [
                    "dict",
                    "Dict[str, Any]",
                    "preacher.compilation.scenario.scenario.ScenarioCompiler"
                ]
            }
        }
    },
    "preacher-master/tests/compilation/scenario/test_factory.py": {
        "test_creates_compiler": {
            "name": "test_creates_compiler",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "preacher-master/tests/compilation/scenario/test_integration.py": {
        "test_compile_scenario": {
            "name": "test_compile_scenario",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": []
            }
        }
    },
    "preacher-master/tests/compilation/scenario/test_scenario_compiler.py": {
        "compiler": {
            "name": "compiler",
            "location": 16,
            "return": [
                "Optional[int]",
                "bool",
                "float",
                "Iterable[str]",
                "dict"
            ],
            "arguments": {
                "description": [
                    "str"
                ],
                "case": [
                    "str"
                ]
            }
        },
        "description": {
            "name": "description",
            "location": 21,
            "return": [
                "list",
                "int",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "case": {
            "name": "case",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "case_of_default": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "case_of_default": {
            "name": "case_of_default",
            "location": 35,
            "return": [
                "str",
                "Sequence"
            ],
            "arguments": {
                "sub_case": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "sub_case": {
            "name": "sub_case",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_when_given_invalid_values": {
            "name": "test_when_given_invalid_values",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "str",
                    "int"
                ],
                "expected_path": [
                    "str"
                ],
                "compiler": [
                    "str",
                    "preacher.compilation.scenario.case.CaseCompiler",
                    "bytes",
                    "BinaryIO"
                ]
            }
        },
        "test_given_an_empty_object": {
            "name": "test_given_an_empty_object",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": [
                    "str"
                ],
                "case": [
                    "Dict[str, Any]",
                    "Callable"
                ],
                "case_of_default": [
                    "Dict[str, Any]",
                    "bytes"
                ],
                "mocker": []
            }
        },
        "test_given_a_filled_object": {
            "name": "test_given_a_filled_object",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": [
                    "preacher.compilation.scenario.scenario.ScenarioCompiler",
                    "float"
                ],
                "description": [
                    "tests.async_mock.Mock"
                ],
                "case": [
                    "tests.async_mock.Mock"
                ],
                "case_of_default": [
                    "Union[Tuple[int], Tuple[int, int]]",
                    "bool"
                ],
                "sub_case": [
                    "tests.async_mock.Mock"
                ],
                "mocker": []
            }
        },
        "test_given_empty_parameter": {
            "name": "test_given_empty_parameter",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": [],
                "mocker": []
            }
        },
        "test_when_parameter_compilation_fails": {
            "name": "test_when_parameter_compilation_fails",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": [
                    "preacher.compilation.scenario.scenario.ScenarioCompiler",
                    "preacher.compilation.requesrequesRequestCompiler"
                ],
                "mocker": []
            }
        },
        "test_given_filled_parameters": {
            "name": "test_given_filled_parameters",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": [
                    "float",
                    "preacher.compilation.scenario.scenario.ScenarioCompiler"
                ],
                "description": [
                    "int",
                    "unittesmock.Mock"
                ],
                "case": [
                    "int",
                    "unittesmock.Mock"
                ],
                "case_of_default": [
                    "Union[Tuple[int], Tuple[int, int]]",
                    "Callable",
                    "Optional[Exception]",
                    "Union[int, float]"
                ],
                "mocker": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_compile_flattening": {
            "name": "test_compile_flattening",
            "location": 264,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": []
            }
        }
    },
    "preacher-master/tests/compilation/scenario/__init__.py": {},
    "preacher-master/tests/compilation/util/test_functional.py": {
        "succeeds": {
            "name": "succeeds",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "arg": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_map_compile_for_empty_list": {
            "name": "test_map_compile_for_empty_list",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_map_compile_for_successful_func": {
            "name": "test_map_compile_for_successful_func",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_map_compile_for_failing_func": {
            "name": "test_map_compile_for_failing_func",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_run_recursively_with_invalid_obj": {
            "name": "test_run_recursively_with_invalid_obj",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "obj": [
                    "List[str]",
                    "Optional[str]",
                    "str",
                    "bool"
                ],
                "expected_path": [
                    "Optional[str]"
                ]
            }
        },
        "test_run_recursively_with_valid_obj": {
            "name": "test_run_recursively_with_valid_obj",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Iterable[int]",
                    "List[str]",
                    "Union[slice, List[slice], List[int]]",
                    "List[float]",
                    "int"
                ],
                "expected": [
                    "str",
                    "Iterable[int]",
                    "List[str]",
                    "Union[slice, List[slice], List[int]]",
                    "List[float]",
                    "int"
                ]
            }
        },
        "test_compile_flattening_error": {
            "name": "test_compile_flattening_error",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_compile_flattening": {
            "name": "test_compile_flattening",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Iterable[int]",
                    "Union[slice, List[slice], List[int]]",
                    "List[float]"
                ],
                "expected": [
                    "str",
                    "Iterable[int]",
                    "Union[slice, List[slice], List[int]]",
                    "List[float]"
                ]
            }
        },
        "test_run_recursively_with_invalid_obj._func": {
            "name": "_func",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "T",
                    "Union[str, int]",
                    "Tuple[str, int]",
                    "Sequence[Union[int, str]]",
                    "float",
                    "str"
                ]
            }
        },
        "test_compile_flattening_error._compile": {
            "name": "_compile",
            "location": 71,
            "return": [
                "Dict[str, Any]",
                "str",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "flag": [
                    "bool",
                    "Type",
                    "Callable",
                    "static_frame.core.util.AnyCallable",
                    "dict"
                ]
            }
        }
    },
    "preacher-master/tests/compilation/util/__init__.py": {},
    "preacher-master/tests/compilation/verification/test_description_compiler.py": {
        "compiler": {
            "name": "compiler",
            "location": 14,
            "return": [
                "str",
                "Generator",
                "bool",
                "dict"
            ],
            "arguments": {
                "extraction": [
                    "int",
                    "str"
                ],
                "predicate": [
                    "int",
                    "str"
                ]
            }
        },
        "extraction": {
            "name": "extraction",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "predicate": {
            "name": "predicate",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_given_not_a_mapping": {
            "name": "test_given_not_a_mapping",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": []
            }
        },
        "test_given_a_string_predicate": {
            "name": "test_given_a_string_predicate",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [],
                "compiler": [],
                "extraction": [],
                "predicate": [
                    "mock.Mock"
                ]
            }
        },
        "test_given_a_mapping_predicate": {
            "name": "test_given_a_mapping_predicate",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [],
                "compiler": [],
                "extraction": [],
                "predicate": [
                    "mock.Mock",
                    "str",
                    "int"
                ]
            }
        },
        "test_given_a_list_of_mapping_predicates": {
            "name": "test_given_a_list_of_mapping_predicates",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [],
                "compiler": [],
                "extraction": [],
                "predicate": []
            }
        }
    },
    "preacher-master/tests/compilation/verification/test_matcher_factory_compilation.py": {
        "compiler": {
            "name": "compiler",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_invalid_mapping": {
            "name": "test_invalid_mapping",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": [
                    "preacher.compilation.scenario.scenario.ScenarioCompiler",
                    "preacher.compilation.requesrequesRequestCompiler"
                ],
                "obj": [
                    "preacher.compilation.scenario.scenario.ScenarioCompiler",
                    "preacher.compilation.requesrequesRequestCompiler"
                ]
            }
        },
        "test_matcher_matchers": {
            "name": "test_matcher_matchers",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": [
                    "dict",
                    "Callable",
                    "str",
                    "List[str]"
                ],
                "obj": [
                    "dict",
                    "Callable",
                    "str",
                    "List[str]"
                ],
                "item": [
                    "str",
                    "int",
                    "Callable",
                    "Dict[str, Any]",
                    "dict"
                ],
                "expected": [
                    "str",
                    "int",
                    "Callable",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "test_matcher_creation_failure": {
            "name": "test_matcher_creation_failure",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": [
                    "dict",
                    "preacher.compilation.requesrequesRequestCompiler"
                ],
                "obj": [
                    "dict",
                    "preacher.compilation.requesrequesRequestCompiler"
                ]
            }
        },
        "test_matcher_matching_failure": {
            "name": "test_matcher_matching_failure",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": [
                    "preacher.compilation.requesrequesRequestCompiler",
                    "preacher.compilation.scenario.case.CaseCompiler"
                ],
                "obj": [
                    "preacher.compilation.requesrequesRequestCompiler",
                    "preacher.compilation.scenario.case.CaseCompiler"
                ],
                "item": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "preacher-master/tests/compilation/verification/test_predicate_compiler.py": {
        "test_matcher_predicate": {
            "name": "test_matcher_predicate",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "preacher-master/tests/compilation/verification/test_response_description_compiled.py": {
        "test_replace": {
            "name": "test_replace",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_fix_hollow": {
            "name": "test_fix_hollow",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "ctor": [
                    "str"
                ]
            }
        },
        "test_fix_filled": {
            "name": "test_fix_filled",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "ctor": [
                    "str"
                ]
            }
        }
    },
    "preacher-master/tests/compilation/verification/test_response_description_compiler.py": {
        "compiler": {
            "name": "compiler",
            "location": 15,
            "return": [
                "Optional[str]",
                "Sequence[int]",
                "Exception",
                "bytes"
            ],
            "arguments": {
                "predicate": [
                    "str"
                ],
                "description": [
                    "str"
                ]
            }
        },
        "predicate": {
            "name": "predicate",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "description": {
            "name": "description",
            "location": 27,
            "return": [
                "list",
                "int",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "test_given_an_invalid_value": {
            "name": "test_given_an_invalid_value",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "obj": [
                    "preacher.compilation.requesrequesRequestCompiler",
                    "str",
                    "Dict[str, object]"
                ],
                "expected_path": [
                    "str"
                ],
                "compiler": [
                    "preacher.compilation.requesrequesRequestCompiler",
                    "str",
                    "Dict[str, object]"
                ]
            }
        },
        "test_given_an_empty_mapping": {
            "name": "test_given_an_empty_mapping",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": [
                    "str"
                ],
                "predicate": [],
                "description": []
            }
        },
        "test_given_simple_values": {
            "name": "test_given_simple_values",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "dict"
                ],
                "predicate": [
                    "List[Dict[str, Any]]",
                    "int",
                    "Type[Any]"
                ],
                "description": [
                    "preacher.compilation.requesrequesRequestCompiler",
                    "Dict[str, str]"
                ]
            }
        },
        "test_given_filled_values": {
            "name": "test_given_filled_values",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "compiler": [
                    "bool"
                ],
                "predicate": [
                    "bool"
                ],
                "description": [
                    "preacher.compilation.requesrequesRequestCompiler",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "initial_default": {
            "name": "initial_default",
            "location": 95,
            "return": [
                "preacher.compilation.verification.matcher.MatcherFactoryCompiler",
                "Callable",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "test_given_hollow_default": {
            "name": "test_given_hollow_default",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [],
                "predicate": [],
                "description": [],
                "initial_default": []
            }
        },
        "test_given_filled_default": {
            "name": "test_given_filled_default",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [],
                "predicate": [],
                "description": [],
                "initial_default": []
            }
        }
    },
    "preacher-master/tests/compilation/verification/__init__.py": {},
    "preacher-master/tests/compilation/yaml/test_integration.py": {
        "base_dir": {
            "name": "base_dir",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_load_objs_empty": {
            "name": "test_load_objs_empty",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "ruamel.yaml.comments.CommentedMap",
                    "str"
                ]
            }
        },
        "test_load_objs_filled": {
            "name": "test_load_objs_filled",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "base_dir": [
                    "str"
                ]
            }
        }
    },
    "preacher-master/tests/compilation/yaml/__init__.py": {},
    "preacher-master/tests/compilation/yaml/tag/test_argument_tag.py": {
        "loader": {
            "name": "loader",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_given_invalid_arguments": {
            "name": "test_given_invalid_arguments",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "loader": [
                    "str",
                    "Optional[str]"
                ],
                "content": [
                    "str",
                    "bytes",
                    "int"
                ],
                "expected_message": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_given_valid_arguments": {
            "name": "test_given_valid_arguments",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "loader": [
                    "str"
                ]
            }
        }
    },
    "preacher-master/tests/compilation/yaml/tag/test_context.py": {
        "loader": {
            "name": "loader",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_given_invalid_arguments": {
            "name": "test_given_invalid_arguments",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "loader": [
                    "str",
                    "Optional[str]",
                    "tartare.core.publisher.AbstractProtocol"
                ],
                "content": [
                    "str",
                    "bytes",
                    "int"
                ],
                "expected_message": [
                    "str",
                    "Optional[str]",
                    "tartare.core.publisher.AbstractProtocol"
                ]
            }
        },
        "test_given_valid_arguments": {
            "name": "test_given_valid_arguments",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "loader": [
                    "str"
                ]
            }
        }
    },
    "preacher-master/tests/compilation/yaml/tag/test_relative_datetime_tag.py": {
        "loader": {
            "name": "loader",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_given_datetime_that_is_offset_naive": {
            "name": "test_given_datetime_that_is_offset_naive",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "loader": [
                    "rest_framework_json_schema.schema.Context",
                    "str"
                ]
            }
        },
        "test_given_datetime_that_is_offset_aware": {
            "name": "test_given_datetime_that_is_offset_aware",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "loader": [
                    "rest_framework_json_schema.schema.Context",
                    "str"
                ]
            }
        },
        "test_given_invalid_relative_datetime": {
            "name": "test_given_invalid_relative_datetime",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "loader": [
                    "str",
                    "Optional[str]",
                    "tartare.core.publisher.AbstractProtocol"
                ],
                "content": [
                    "str",
                    "bytes",
                    "int"
                ],
                "expected_message": [
                    "str",
                    "Optional[str]",
                    "tartare.core.publisher.AbstractProtocol"
                ]
            }
        },
        "test_given_an_empty_relative_datetime": {
            "name": "test_given_an_empty_relative_datetime",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "loader": [
                    "str",
                    "int"
                ]
            }
        },
        "test_given_a_valid_string_relative_datetime": {
            "name": "test_given_a_valid_string_relative_datetime",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "loader": [
                    "int",
                    "rest_framework_json_schema.schema.Context"
                ]
            }
        },
        "test_given_an_empty_mapping_relative_datetime": {
            "name": "test_given_an_empty_mapping_relative_datetime",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "loader": [
                    "str",
                    "int"
                ]
            }
        },
        "test_given_a_filled_mapping_relative_datetime": {
            "name": "test_given_a_filled_mapping_relative_datetime",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "loader": [
                    "str"
                ]
            }
        }
    },
    "preacher-master/tests/compilation/yaml/tag/__init__.py": {},
    "preacher-master/tests/core/test_context.py": {
        "test_context": {
            "name": "test_context",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_closed_context": {
            "name": "test_closed_context",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "preacher-master/tests/core/test_datetime.py": {
        "test_date_time_format_interface": {
            "name": "test_date_time_format_interface",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_iso8601_format_datetime": {
            "name": "test_iso8601_format_datetime",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "int",
                    "str",
                    "bytes"
                ],
                "expected": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "test_iso8601_format_datetime_invalid": {
            "name": "test_iso8601_format_datetime_invalid",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_iso8601_parse_datetime": {
            "name": "test_iso8601_parse_datetime",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "Mapping[str, Any]",
                    "str",
                    "int",
                    "dict"
                ],
                "expected": [
                    "Mapping[str, Any]",
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "test_strftime_format_datetime": {
            "name": "test_strftime_format_datetime",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "format_string": [
                    "str",
                    "Tuple[str, str]"
                ],
                "value": [
                    "str",
                    "Tuple[str, str]"
                ],
                "expected": [
                    "str",
                    "Tuple[str, str]"
                ]
            }
        },
        "test_strftime_parse_datetime": {
            "name": "test_strftime_parse_datetime",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "format_string": [
                    "str",
                    "bytes"
                ],
                "value": [
                    "str",
                    "bytes"
                ],
                "expected": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_now_jst": {
            "name": "test_now_jst",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_now_pdt": {
            "name": "test_now_pdt",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_parse_time_given_an_invalid_value": {
            "name": "test_parse_time_given_an_invalid_value",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "datetime.datetime"
                ]
            }
        },
        "test_parse_time": {
            "name": "test_parse_time",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [],
                "value": [
                    "int",
                    "str",
                    "bool",
                    "datetime.datetime"
                ],
                "expected": [
                    "int",
                    "str",
                    "bool",
                    "datetime.datetime"
                ]
            }
        },
        "test_parse_timedelta_given_an_invalid_value": {
            "name": "test_parse_timedelta_given_an_invalid_value",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "str",
                    "dict",
                    "Callable[[str], bool]",
                    "Dict[str, str]"
                ]
            }
        },
        "test_parse_timedelta": {
            "name": "test_parse_timedelta",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "int",
                    "Iterable",
                    "str"
                ],
                "expected": [
                    "int",
                    "Iterable",
                    "str"
                ]
            }
        },
        "test_date_time_format_interface._Incomplete.format_datetime": {
            "name": "format_datetime",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "datetime.datetime",
                    "bool",
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "test_date_time_format_interface._Incomplete.parse_datetime": {
            "name": "parse_datetime",
            "location": 22,
            "return": [
                "datetime.datetime",
                "str",
                "Optional[float]",
                "float",
                "datetime.timezone",
                "Optional[datetime.timedelta]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "AnyStr",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "preacher-master/tests/core/test_functional.py": {
        "test_identify": {
            "name": "test_identify",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "preacher-master/tests/core/test_status.py": {
        "test_is_succeeded": {
            "name": "test_is_succeeded",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "status": [
                    "str",
                    "Optional[str]"
                ],
                "expected": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_merge": {
            "name": "test_merge",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "lhs": [
                    "int",
                    "str",
                    "List[int]",
                    "Union[str, float]",
                    "bool"
                ],
                "rhs": [
                    "int",
                    "str",
                    "List[int]",
                    "Union[str, float]",
                    "bool"
                ],
                "expected": [
                    "int",
                    "str",
                    "List[int]",
                    "Union[str, float]",
                    "bool"
                ]
            }
        },
        "test_merge_statuses": {
            "name": "test_merge_statuses",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "statuses": [
                    "str",
                    "Tuple[str]",
                    "int",
                    "Optional[int]"
                ],
                "expected": [
                    "str",
                    "Tuple[str]",
                    "int",
                    "Optional[int]"
                ]
            }
        }
    },
    "preacher-master/tests/core/__init__.py": {},
    "preacher-master/tests/core/extraction/test_analyzer_response_body_json.py": {
        "extract": {
            "name": "extract",
            "location": 11,
            "return": [
                "Union[str, Sequence[str]]",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "test_for_text": {
            "name": "test_for_text",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "extract": [
                    "List[str]",
                    "str",
                    "static_frame.core.frame.Frame",
                    "T"
                ]
            }
        },
        "test_for_mapping_on_invalid_body": {
            "name": "test_for_mapping_on_invalid_body",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "extract": [
                    "int"
                ]
            }
        },
        "test_for_mapping_on_valid_body": {
            "name": "test_for_mapping_on_valid_body",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "extract": [
                    "Union[int, float]",
                    "Tuple[int]"
                ]
            }
        },
        "test_for_etree": {
            "name": "test_for_etree",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "extract": []
            }
        }
    },
    "preacher-master/tests/core/extraction/test_analyzer_response_body_xml.py": {
        "body": {
            "name": "body",
            "location": 17,
            "return": [
                "str",
                "Optional[Dict]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "extract": {
            "name": "extract",
            "location": 22,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "test_for_etree": {
            "name": "test_for_etree",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "extract": [],
                "body": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "test_for_text": {
            "name": "test_for_text",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "body": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_for_mapping": {
            "name": "test_for_mapping",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "extract": [
                    "Dict[str, Any]"
                ],
                "body": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ]
            }
        }
    },
    "preacher-master/tests/core/extraction/test_mapping_analyzer.py": {
        "test_for_text": {
            "name": "test_for_text",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_for_mapping": {
            "name": "test_for_mapping",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_for_etree": {
            "name": "test_for_etree",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_for_text._extract": {
            "name": "_extract",
            "location": 22,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_for_mapping._extract": {
            "name": "_extract",
            "location": 32,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_for_etree._extract": {
            "name": "_extract",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "preacher-master/tests/core/extraction/__init__.py": {},
    "preacher-master/tests/core/extraction/impl/test_extractor_jq.py": {
        "analyzer": {
            "name": "analyzer",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_extract_single": {
            "name": "test_extract_single",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "analyzer": [
                    "str",
                    "int",
                    "bool",
                    "jgikbase.idmapping.core.user.AuthsourceID",
                    "jgikbase.idmapping.core.user.User.name"
                ],
                "values": [
                    "str"
                ],
                "cast": [
                    "str",
                    "List[str]",
                    "int",
                    "dict",
                    "bool"
                ],
                "multiple": [
                    "str",
                    "List[str]",
                    "int",
                    "dict",
                    "bool"
                ],
                "expected": [
                    "str",
                    "int",
                    "bool",
                    "jgikbase.idmapping.core.user.AuthsourceID",
                    "jgikbase.idmapping.core.user.User.name"
                ]
            }
        }
    },
    "preacher-master/tests/core/extraction/impl/test_extractor_key.py": {
        "analyzer": {
            "name": "analyzer",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_key_extractor": {
            "name": "test_key_extractor",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "analyzer": [
                    "preacher.core.extraction.analysis.Analyzer",
                    "str"
                ]
            }
        }
    },
    "preacher-master/tests/core/extraction/impl/test_extractor_xpath.py": {
        "analyzer": {
            "name": "analyzer",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_extract_invalid": {
            "name": "test_extract_invalid",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "analyzer": [
                    "str",
                    "float"
                ]
            }
        },
        "test_extract_default": {
            "name": "test_extract_default",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "query": [
                    "str"
                ],
                "expected": [
                    "int",
                    "bool",
                    "str",
                    "float",
                    "List[str]"
                ],
                "analyzer": [
                    "int",
                    "bool",
                    "str",
                    "float",
                    "List[str]"
                ]
            }
        },
        "test_extract": {
            "name": "test_extract",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "query": [
                    "str",
                    "int"
                ],
                "multiple": [
                    "str",
                    "int"
                ],
                "cast": [
                    "str",
                    "int"
                ],
                "expected": [
                    "int",
                    "float",
                    "core.base.setup.Settings",
                    "bool",
                    "List[float]",
                    "bytes"
                ],
                "analyzer": [
                    "int",
                    "float",
                    "core.base.setup.Settings",
                    "bool",
                    "List[float]",
                    "bytes"
                ]
            }
        }
    },
    "preacher-master/tests/core/extraction/impl/test_jq_engine_py.py": {
        "test_given_an_invalid_query": {
            "name": "test_given_an_invalid_query",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_given_a_valid_query": {
            "name": "test_given_a_valid_query",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "query": [
                    "Type[T]",
                    "dict",
                    "str"
                ],
                "expected": [
                    "Type[T]",
                    "dict",
                    "str"
                ]
            }
        }
    },
    "preacher-master/tests/core/extraction/impl/__init__.py": {},
    "preacher-master/tests/core/request/test_requester.py": {
        "session": {
            "name": "session",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "body": {
            "name": "body",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "test_default_request": {
            "name": "test_default_request",
            "location": 44,
            "return": [],
            "arguments": {
                "mocker": [],
                "session": []
            }
        },
        "test_when_request_preparation_fails": {
            "name": "test_when_request_preparation_fails",
            "location": 71,
            "return": [],
            "arguments": {
                "mocker": [],
                "session": []
            }
        },
        "test_when_proxy_building_fails": {
            "name": "test_when_proxy_building_fails",
            "location": 91,
            "return": [],
            "arguments": {
                "mocker": [],
                "session": []
            }
        },
        "test_when_request_fails": {
            "name": "test_when_request_fails",
            "location": 110,
            "return": [],
            "arguments": {
                "mocker": [],
                "session": []
            }
        },
        "test_when_request_succeeds": {
            "name": "test_when_request_succeeds",
            "location": 130,
            "return": [],
            "arguments": {
                "mocker": [],
                "session": [],
                "body": []
            }
        },
        "test_request_overwrites_default_headers": {
            "name": "test_request_overwrites_default_headers",
            "location": 197,
            "return": [],
            "arguments": {
                "session": [],
                "body": []
            }
        },
        "test_when_request_succeeds._resolve_url_params": {
            "name": "_resolve_url_params",
            "location": 137,
            "return": [],
            "arguments": {
                "params": [],
                "context": []
            }
        }
    },
    "preacher-master/tests/core/request/test_request_body_json.py": {
        "test_content_type": {
            "name": "test_content_type",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_resolve_simple": {
            "name": "test_resolve_simple",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "List[dict]",
                    "Optional[\"TrackingData\"]",
                    "dict",
                    "List[str]"
                ],
                "expected": [
                    "str",
                    "List[str]",
                    "dict",
                    "Dict[str, Any]",
                    "int",
                    "bytes"
                ]
            }
        },
        "test_resolve_given_values": {
            "name": "test_resolve_given_values",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "preacher-master/tests/core/request/test_request_body_urlencoded.py": {
        "test": {
            "name": "test",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "preacher-master/tests/core/request/test_url_param.py": {
        "test_resolve_params_given_an_invalid_params": {
            "name": "test_resolve_params_given_an_invalid_params",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "str"
                ]
            }
        },
        "test_resolve_params_given_a_string": {
            "name": "test_resolve_params_given_a_string",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_resolve_params_given_a_mapping": {
            "name": "test_resolve_params_given_a_mapping",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "preacher-master/tests/core/request/__init__.py": {},
    "preacher-master/tests/core/scenario/test_case.py": {
        "test_default_construction": {
            "name": "test_default_construction",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": []
            }
        }
    },
    "preacher-master/tests/core/scenario/test_case_runner.py": {
        "_retry": {
            "name": "_retry",
            "location": 25,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "int",
                    "Type['DataclassT']"
                ]
            }
        },
        "test_case_listener": {
            "name": "test_case_listener",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_runner_properties": {
            "name": "test_runner_properties",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_when_disabled": {
            "name": "test_when_disabled",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "list"
                ]
            }
        },
        "test_given_bad_condition": {
            "name": "test_given_bad_condition",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "bool",
                    "List[str]",
                    "int",
                    "List[Tuple[str, Any]]"
                ],
                "condition_verifications": [
                    "tests.async_mock.Mock"
                ],
                "expected_status": [
                    "bytes",
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "test_when_given_no_response": {
            "name": "test_when_given_no_response",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "str"
                ]
            }
        },
        "test_when_given_an_response": {
            "name": "test_when_given_an_response",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_given_a_negative_waiting_time": {
            "name": "test_given_a_negative_waiting_time",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "unittesmock.Mock"
                ]
            }
        },
        "test_given_bad_condition._analyze_context": {
            "name": "_analyze_context",
            "location": 79,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "context": [
                    "Optional[str]"
                ]
            }
        },
        "test_given_bad_condition._verify": {
            "name": "_verify",
            "location": 85,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "verification": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "analyzer": [
                    "int",
                    "Callable",
                    "str"
                ],
                "context": [
                    "Optional[str]"
                ]
            }
        },
        "test_when_given_no_response._run_unit": {
            "name": "_run_unit",
            "location": 130,
            "return": [],
            "arguments": {
                "request": [],
                "requirements": [],
                "session": [],
                "context": []
            }
        },
        "test_when_given_an_response._run_unit": {
            "name": "_run_unit",
            "location": 182,
            "return": [],
            "arguments": {
                "request": [
                    "aiohttp.web.Request"
                ],
                "requirements": [
                    "int",
                    "requests.Request",
                    "str"
                ],
                "session": [
                    "int",
                    "requests.Request",
                    "str"
                ],
                "context": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "preacher-master/tests/core/scenario/test_scenario_runner.py": {
        "test_given_not_satisfied_conditions": {
            "name": "test_given_not_satisfied_conditions",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "str"
                ],
                "statuses": [
                    "str",
                    "int",
                    "Tuple[str]",
                    "List[Dict[str, Any]]"
                ],
                "expected_status": [
                    "str",
                    "int",
                    "bytes",
                    "Set[str]"
                ]
            }
        },
        "test_unordered": {
            "name": "test_unordered",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_ordered": {
            "name": "test_ordered",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": []
            }
        }
    },
    "preacher-master/tests/core/scenario/test_scenario_task.py": {
        "test_static_scenario_task": {
            "name": "test_static_scenario_task",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_running_scenario_task_empty": {
            "name": "test_running_scenario_task_empty",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_running_scenario_task_filled": {
            "name": "test_running_scenario_task_filled",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "cases_status": [
                    "Dict[str, str]",
                    "List[int]",
                    "Tuple[str]",
                    "Tuple[List[Any], List[Any]]",
                    "int"
                ],
                "subscenario_status": [
                    "int",
                    "str",
                    "bytearray",
                    "List[Dict[str, Any]]"
                ],
                "expected_status": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "preacher-master/tests/core/scenario/__init__.py": {},
    "preacher-master/tests/core/scenario/util/test_concurrency_ordered_cases_task.py": {
        "submit": {
            "name": "submit",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Mapping[str, Any]",
                    "Sequence[Any]"
                ]
            }
        },
        "executor": {
            "name": "executor",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_given_no_cases": {
            "name": "test_given_no_cases",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "executor": [
                    "meeshkan.core.sagemaker_monitor.SageMakerJobMonitor"
                ]
            }
        },
        "test_given_cases": {
            "name": "test_given_cases",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [],
                "executor": [
                    "meeshkan.core.sagemaker_monitor.SageMakerJobMonitor",
                    "preacher.compilation.scenario.scenario.ScenarioCompiler"
                ]
            }
        }
    },
    "preacher-master/tests/core/scenario/util/test_concurrency_unordered_cases_task.py": {
        "submit": {
            "name": "submit",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Mapping[str, Any]",
                    "Sequence[Any]"
                ]
            }
        },
        "executor": {
            "name": "executor",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_given_no_cases": {
            "name": "test_given_no_cases",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "executor": [
                    "meeshkan.core.sagemaker_monitor.SageMakerJobMonitor"
                ]
            }
        },
        "test_given_cases": {
            "name": "test_given_cases",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "executor": [
                    "str",
                    "core.models.Recipe"
                ]
            }
        }
    },
    "preacher-master/tests/core/scenario/util/test_retry_while_false.py": {
        "func": {
            "name": "func",
            "location": 9,
            "return": [
                "blurr.core.schema_loader.SchemaLoader",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {}
        },
        "test_when_given_invalid_args": {
            "name": "test_when_given_invalid_args",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "str",
                    "bool"
                ],
                "attempts": [
                    "Callable",
                    "str",
                    "bool"
                ]
            }
        },
        "test_retrying": {
            "name": "test_retrying",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "int"
                ],
                "attempts": [
                    "Callable",
                    "float"
                ],
                "expected_result": [
                    "str",
                    "bool",
                    "Callable"
                ],
                "expected_call_count": [
                    "int",
                    "float",
                    "bool"
                ],
                "expected_sleep_count": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "test_retrying_with_delay": {
            "name": "test_retrying_with_delay",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "str",
                    "float",
                    "int"
                ]
            }
        }
    },
    "preacher-master/tests/core/scenario/util/__init__.py": {},
    "preacher-master/tests/core/scheduling/test_factory.py": {
        "test_create_scheduler": {
            "name": "test_create_scheduler",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": []
            }
        }
    },
    "preacher-master/tests/core/scheduling/test_listener.py": {
        "test_listener": {
            "name": "test_listener",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "preacher-master/tests/core/scheduling/test_merging_listener.py": {
        "listeners": {
            "name": "listeners",
            "location": 9,
            "return": [
                "str",
                "bool",
                "Optional[Callable[[str], bool]]"
            ],
            "arguments": {}
        },
        "merging_listener": {
            "name": "merging_listener",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "listeners": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_on_response": {
            "name": "test_on_response",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "merging_listener": [
                    "str",
                    "int"
                ],
                "listeners": [
                    "str"
                ]
            }
        },
        "test_on_scenario": {
            "name": "test_on_scenario",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "merging_listener": [
                    "str",
                    "float"
                ],
                "listeners": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_on_end": {
            "name": "test_on_end",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "merging_listener": [],
                "listeners": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "preacher-master/tests/core/scheduling/test_scenario_scheduler.py": {
        "test_given_no_scenario": {
            "name": "test_given_no_scenario",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_given_construction_failure": {
            "name": "test_given_construction_failure",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_given_scenarios": {
            "name": "test_given_scenarios",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_given_construction_failure._submit": {
            "name": "_submit",
            "location": 32,
            "return": [
                "str",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_given_construction_failure._Scenarios.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_given_construction_failure._Scenarios.__iter__": {
            "name": "__iter__",
            "location": 21,
            "return": [
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_given_construction_failure._Scenarios.__next__": {
            "name": "__next__",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "preacher-master/tests/core/scheduling/__init__.py": {},
    "preacher-master/tests/core/unit/test_unit_runner.py": {
        "_retry": {
            "name": "_retry",
            "location": 16,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "int",
                    "Type['DataclassT']"
                ]
            }
        },
        "test_predicate": {
            "name": "test_predicate",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "execution": [
                    "str",
                    "Optional[List[str]]",
                    "List[Dict[str, Any]]"
                ],
                "verification": [
                    "str",
                    "Optional[List[str]]",
                    "List[Dict[str, Any]]"
                ],
                "expected": [
                    "str",
                    "Optional[List[str]]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "test_given_invalid_retry_count": {
            "name": "test_given_invalid_retry_count",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "retry": [
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "test_given_no_response": {
            "name": "test_given_no_response",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_given_a_response": {
            "name": "test_given_a_response",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "core.models.Recipe"
                ]
            }
        },
        "test_given_a_response._verify": {
            "name": "_verify",
            "location": 82,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "analyzer": [
                    "int",
                    "Callable",
                    "str"
                ],
                "context": [
                    "Callable[[str], str]"
                ]
            }
        }
    },
    "preacher-master/tests/core/unit/__init__.py": {},
    "preacher-master/tests/core/value/__init__.py": {},
    "preacher-master/tests/core/value/impl/test_context.py": {
        "test_contextual_value": {
            "name": "test_contextual_value",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "preacher-master/tests/core/value/impl/test_datetime_value.py": {
        "test_only_time_datetime_value_default": {
            "name": "test_only_time_datetime_value_default",
            "location": 15,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_delta_datetime_value_default": {
            "name": "test_delta_datetime_value_default",
            "location": 28,
            "return": [],
            "arguments": {
                "mocker": [],
                "context": []
            }
        },
        "test_combined_relative_datetime_value_contextual": {
            "name": "test_combined_relative_datetime_value_contextual",
            "location": 47,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "test_invalid_relative_datetime_value": {
            "name": "test_invalid_relative_datetime_value",
            "location": 66,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "test_datetime_with_format_default": {
            "name": "test_datetime_with_format_default",
            "location": 72,
            "return": [],
            "arguments": {}
        },
        "test_datetime_with_format_contextual": {
            "name": "test_datetime_with_format_contextual",
            "location": 86,
            "return": [],
            "arguments": {}
        },
        "test_parse_datetime_value_with_format_given_a_naive_datetime": {
            "name": "test_parse_datetime_value_with_format_given_a_naive_datetime",
            "location": 100,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_parse_datetime_value_with_format_given_an_aware_datetime": {
            "name": "test_parse_datetime_value_with_format_given_an_aware_datetime",
            "location": 113,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_parse_datetime_value_with_format_empty": {
            "name": "test_parse_datetime_value_with_format_empty",
            "location": 126,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_parse_datetime_value_with_format_combined": {
            "name": "test_parse_datetime_value_with_format_combined",
            "location": 138,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_parse_datetime_value_with_format_given_invalid_one": {
            "name": "test_parse_datetime_value_with_format_given_invalid_one",
            "location": 154,
            "return": [],
            "arguments": {
                "value": []
            }
        }
    },
    "preacher-master/tests/core/value/impl/test_static_value.py": {
        "test_static_value": {
            "name": "test_static_value",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "preacher-master/tests/core/value/impl/__init__.py": {},
    "preacher-master/tests/core/verification/test_description.py": {
        "extractor": {
            "name": "extractor",
            "location": 13,
            "return": [
                "str",
                "List[Tuple[str, int]]"
            ],
            "arguments": {}
        },
        "test_when_analysis_fails": {
            "name": "test_when_analysis_fails",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "extractor": []
            }
        },
        "test_when_given_no_predicates": {
            "name": "test_when_given_no_predicates",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "extractor": []
            }
        },
        "test_when_given_predicates": {
            "name": "test_when_given_predicates",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "extractor": [
                    "bool",
                    "str",
                    "Iterable[int]",
                    "dict"
                ]
            }
        }
    },
    "preacher-master/tests/core/verification/test_hamcrest.py": {
        "test_datetime_matcher_invalid_creation": {
            "name": "test_datetime_matcher_invalid_creation",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "str",
                    "Iterable[Hashable]",
                    "bool"
                ]
            }
        },
        "test_datetime_matcher_invalid_validation": {
            "name": "test_datetime_matcher_invalid_validation",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "item": [
                    "int",
                    "Sequence",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_datetime_matcher": {
            "name": "test_datetime_matcher",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "str"
                ],
                "item": [
                    "dict",
                    "str",
                    "type",
                    "Sequence[type]",
                    "Set[str]",
                    "Mapping[str, Any]"
                ],
                "before_expected": [
                    "int",
                    "Callable",
                    "list",
                    "Set[str]"
                ],
                "after_expected": [
                    "int",
                    "Callable",
                    "list",
                    "Set[str]"
                ]
            }
        },
        "test_day_of_week": {
            "name": "test_day_of_week",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "day": [
                    "str",
                    "list",
                    "T",
                    "Set[str]"
                ],
                "yesterday": [
                    "str",
                    "Optional[str]"
                ],
                "today": [
                    "str",
                    "Optional[str]"
                ],
                "tomorrow": [
                    "str",
                    "Optional[str]"
                ],
                "expected_name": [
                    "str"
                ]
            }
        },
        "test_day_of_week_matching": {
            "name": "test_day_of_week_matching",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "day": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "list",
                    "Optional[Match]"
                ],
                "item": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "list",
                    "Optional[Match]"
                ],
                "expected": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "list",
                    "Optional[Match]"
                ]
            }
        },
        "test_day_of_week_description": {
            "name": "test_day_of_week_description",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "day": [
                    "core.models.MyUser",
                    "core.models.Recipe"
                ],
                "expected_description": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "preacher-master/tests/core/verification/test_matcher_factory.py": {
        "matcher_func": {
            "name": "matcher_func",
            "location": 13,
            "return": [
                "Union[str, Sequence[str]]",
                "core.D.VersionedIdentifier",
                "str"
            ],
            "arguments": {}
        },
        "test_static_factory": {
            "name": "test_static_factory",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_value_factory": {
            "name": "test_value_factory",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "matcher_func": [
                    "Callable",
                    "Sequence[str]",
                    "int"
                ]
            }
        },
        "test_recursive_factory": {
            "name": "test_recursive_factory",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "matcher_func": [
                    "Dict[str, Any]",
                    "str",
                    "int",
                    "Sequence['cirq.Qid']"
                ]
            }
        }
    },
    "preacher-master/tests/core/verification/test_matcher_wrapping_predicate.py": {
        "predicate": {
            "name": "predicate",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "factory": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "factory": {
            "name": "factory",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_match_when_matcher_creation_fails": {
            "name": "test_match_when_matcher_creation_fails",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "predicate": [
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float",
                    "str"
                ],
                "factory": []
            }
        },
        "test_match_when_an_error_occurs_on_assertion": {
            "name": "test_match_when_an_error_occurs_on_assertion",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "list"
                ],
                "predicate": [
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float",
                    "str"
                ],
                "factory": []
            }
        },
        "test_match_when_assertion_fails": {
            "name": "test_match_when_assertion_fails",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "list",
                    "preacher.compilation.scenario.case.CaseCompiler"
                ],
                "predicate": [
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float",
                    "str"
                ],
                "factory": []
            }
        },
        "test_match_when_the_assertion_succeeds": {
            "name": "test_match_when_the_assertion_succeeds",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "list",
                    "preacher.compilation.scenario.case.CaseCompiler"
                ],
                "predicate": [
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float",
                    "str"
                ],
                "factory": []
            }
        }
    },
    "preacher-master/tests/core/verification/test_response_description.py": {
        "response": {
            "name": "response",
            "location": 17,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {}
        },
        "test_when_given_no_description": {
            "name": "test_when_given_no_description",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [],
                "response": [
                    "str",
                    "int"
                ]
            }
        },
        "test_when_given_descriptions": {
            "name": "test_when_given_descriptions",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "List[List[int]]"
                ],
                "response": [
                    "str",
                    "dict",
                    "core.models.Recipe"
                ]
            }
        },
        "test_merge_statuses": {
            "name": "test_merge_statuses",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int",
                    "Iterable[int]",
                    "bool",
                    "List[str]"
                ],
                "response": [
                    "str",
                    "Iterable[str]"
                ],
                "status_code_status": [
                    "preacher.core.status.Status",
                    "list"
                ],
                "headers_status": [
                    "preacher.core.status.Status",
                    "int",
                    "List[qlu.core.QluTask]",
                    "src.core.model.action_resulActionResult",
                    "Dict[str, Any]"
                ],
                "body_status": [
                    "preacher.core.status.Status",
                    "int",
                    "List[qlu.core.QluTask]"
                ],
                "expected": [
                    "preacher.core.status.Status",
                    "str",
                    "Union[int, str]",
                    "T",
                    "int"
                ]
            }
        }
    },
    "preacher-master/tests/core/verification/__init__.py": {},
    "preacher-master/tests/plugin/test_loader.py": {
        "test_load_plugins_empty": {
            "name": "test_load_plugins_empty",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_load_plugins_normal": {
            "name": "test_load_plugins_normal",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_load_plugins_not_a_module": {
            "name": "test_load_plugins_not_a_module",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_load_plugins_invalid_module": {
            "name": "test_load_plugins_invalid_module",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": []
            }
        }
    },
    "preacher-master/tests/plugin/__init__.py": {},
    "preacher-master/tests/presentation/test_html_reporter.py": {
        "path": {
            "name": "path",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_export_execution": {
            "name": "test_export_execution",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "test_export_results": {
            "name": "test_export_results",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "results": [
                    "int",
                    "Literal",
                    "list",
                    "List[str]",
                    "str"
                ]
            }
        },
        "ResponseImpl.id": {
            "name": "id",
            "location": 33,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "preacher-master/tests/presentation/test_logging_reporter.py": {
        "logger": {
            "name": "logger",
            "location": 21,
            "return": [
                "List[Tuple[str, int]]"
            ],
            "arguments": {}
        },
        "reporter": {
            "name": "reporter",
            "location": 26,
            "return": [
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, Any]",
                "Dict[str, str]",
                "dict",
                "str"
            ],
            "arguments": {
                "logger": [
                    "bool"
                ]
            }
        },
        "test_show_scenarios": {
            "name": "test_show_scenarios",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "reporter": [
                    "str",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "test_show_status": {
            "name": "test_show_status",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "reporter": []
            }
        },
        "test_create_logging_reporter_given_a_logger": {
            "name": "test_create_logging_reporter_given_a_logger",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_create_logging_reporter_given_logger_elements": {
            "name": "test_create_logging_reporter_given_logger_elements",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [],
                "level": [
                    "str",
                    "bool"
                ],
                "expected_level": [
                    "int",
                    "bool",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "test_create_logging_reporter_given_no_handlers": {
            "name": "test_create_logging_reporter_given_no_handlers",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_create_logging_reporter_given_no_parameters": {
            "name": "test_create_logging_reporter_given_no_parameters",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": []
            }
        }
    },
    "preacher-master/tests/presentation/__init__.py": {},
    "preacher-master/tests/presentation/listener/test_factory.py": {
        "merging_listener": {
            "name": "merging_listener",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "mocker": [
                    "Iterable[str]",
                    "List[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "test_create_listener_default": {
            "name": "test_create_listener_default",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "blurr.core.schema_loader.SchemaLoader"
                ],
                "merging_listener": []
            }
        },
        "test_create_listener_with_all_parameters": {
            "name": "test_create_listener_with_all_parameters",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "blurr.core.schema_loader.SchemaLoader"
                ],
                "merging_listener": [
                    "src.core.manager.script_manager.ScriptManager"
                ]
            }
        }
    },
    "preacher-master/tests/presentation/listener/test_html_reporting_listener.py": {
        "reporter": {
            "name": "reporter",
            "location": 12,
            "return": [
                "List[Tuple[str, int]]",
                "str"
            ],
            "arguments": {}
        },
        "test_given_no_item": {
            "name": "test_given_no_item",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "reporter": [
                    "str"
                ]
            }
        },
        "test_given_items": {
            "name": "test_given_items",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "reporter": [
                    "str"
                ]
            }
        },
        "test_from_path": {
            "name": "test_from_path",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "reporter_ctor": [
                    "dict"
                ],
                "listener_ctor": []
            }
        }
    },
    "preacher-master/tests/presentation/listener/test_logging_reporting_listener.py": {
        "test_on_scenario": {
            "name": "test_on_scenario",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_create_logging_reporting_listener_given_a_reporter": {
            "name": "test_create_logging_reporting_listener_given_a_reporter",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_create_logging_reporting_listener_given_reporter_elements": {
            "name": "test_create_logging_reporting_listener_given_reporter_elements",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": []
            }
        }
    },
    "preacher-master/tests/presentation/listener/__init__.py": {}
}
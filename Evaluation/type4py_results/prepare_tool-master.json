{
    "prepare_tool-master/prepare_tool/const.py": {},
    "prepare_tool-master/prepare_tool/core.py": {
        "Core.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "json_file": [
                    "pathlib.Path"
                ],
                "output_dir": [
                    "pathlib.Path",
                    "str",
                    "path.Path"
                ]
            }
        },
        "Core.__enter__": {
            "name": "__enter__",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.__exit__": {
            "name": "__exit__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "exc_value": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "traceback": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        },
        "Core.cleanup": {
            "name": "cleanup",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Core.findFontfilePath": {
            "name": "findFontfilePath",
            "location": 47,
            "return": [
                "str",
                "Union[str, pathlib.Path]",
                "bool",
                "int",
                "Iterable[Sequence[str]]"
            ],
            "arguments": {
                "self": [],
                "font": [
                    "prepare_tool.models.Font",
                    "pathlib.Path",
                    "Union[pathlib.Path, str]",
                    "int"
                ]
            }
        }
    },
    "prepare_tool-master/prepare_tool/__init__.py": {
        "cli": {
            "name": "cli",
            "location": 11,
            "return": [
                "List[str]",
                "list",
                "str"
            ],
            "arguments": {}
        },
        "print_schema": {
            "name": "print_schema",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "generate": {
            "name": "generate",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "json_path": [
                    "pathlib.Path",
                    "str",
                    "cerulean.Path"
                ],
                "output_dir": [
                    "pathlib.Path",
                    "str",
                    "cerulean.Path"
                ]
            }
        },
        "validate": {
            "name": "validate",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "json_path": [
                    "pathlib.Path",
                    "str",
                    "Union[str, pathlib.Path]",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser",
                    "str"
                ],
                "command": [
                    "argparse._SubParsersAction",
                    "Callable[[str], T]",
                    "argparse.ArgumentParser",
                    "Optional[str]"
                ]
            }
        }
    },
    "prepare_tool-master/prepare_tool/__main__.py": {},
    "prepare_tool-master/prepare_tool/download/__init__.py": {
        "Downloader.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "core": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Downloader.download": {
            "name": "download",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Downloader.__fetch": {
            "name": "__fetch",
            "location": 20,
            "return": [
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Downloader.__extractZip": {
            "name": "__extractZip",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "pathlib.Path",
                    "str",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "Downloader.__extractTarXz": {
            "name": "__extractTarXz",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "pathlib.Path",
                    "str",
                    "cerulean.Path"
                ]
            }
        }
    },
    "prepare_tool-master/prepare_tool/generate/archive.py": {
        "ArchiveGenerator.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "core": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ArchiveGenerator.generate": {
            "name": "generate",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArchiveGenerator.__generateLicenseFile": {
            "name": "__generateLicenseFile",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dest_dir": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "ArchiveGenerator.__copyFontfile": {
            "name": "__copyFontfile",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dest_dir": [
                    "pathlib.Path",
                    "str",
                    "TextIO"
                ]
            }
        },
        "ArchiveGenerator.__archive": {
            "name": "__archive",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target_path": [
                    "pathlib.Path",
                    "str",
                    "path.Path"
                ],
                "output_path": [
                    "pathlib.Path",
                    "str"
                ]
            }
        }
    },
    "prepare_tool-master/prepare_tool/generate/stylesheet.py": {
        "StyleSheetGenerator.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "core": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "StyleSheetGenerator.generate": {
            "name": "generate",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StyleSheetGenerator.__generateStyleForWeight": {
            "name": "__generateStyleForWeight",
            "location": 41,
            "return": [
                "float",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "weight": [
                    "int",
                    "bytes",
                    "str",
                    "float",
                    "core.audio.audio_backend.AudioBackend"
                ],
                "font": [
                    "float",
                    "str"
                ]
            }
        },
        "StyleSheetGenerator.__getLocalFamilyName": {
            "name": "__getLocalFamilyName",
            "location": 70,
            "return": [
                "str",
                "Tuple[Any, Any, Any]",
                "List[annofabapi.models.Project]",
                "Set[str]",
                "Dict[str, Any]",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "font": [
                    "prepare_tool.models.Font",
                    "Optional[List[Any]]",
                    "int",
                    "List[Tuple[int, int]]",
                    "Sequence[services.ticketing.models.tickeTicket]"
                ]
            }
        },
        "StyleSheetGenerator.__getLocalFamilyName.getName": {
            "name": "getName",
            "location": 76,
            "return": [
                "str",
                "models.Name",
                "users.models.CustomUser",
                "Dict[str, Any]"
            ],
            "arguments": {
                "name_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "prepare_tool-master/prepare_tool/generate/webfont.py": {
        "WebFontGenerator.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "core": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "WebFontGenerator.generate": {
            "name": "generate",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebFontGenerator.__generateForWeight": {
            "name": "__generateForWeight",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "weight": [
                    "str",
                    "Union[str, IO[bytes]]"
                ],
                "font": [
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "WebFontGenerator.__generateMetadata": {
            "name": "__generateMetadata",
            "location": 83,
            "return": [
                "str",
                "waterbutler.core.provider.BaseProvider"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebFontGenerator.__generateXMLElement": {
            "name": "__generateXMLElement",
            "location": 101,
            "return": [
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "props": [
                    "dict",
                    "Mapping[str, Any]"
                ],
                "tagname": [
                    "str",
                    "Tuple[int, int]",
                    "base_site.nubank.models.NubankCards"
                ]
            }
        }
    },
    "prepare_tool-master/prepare_tool/generate/__init__.py": {},
    "prepare_tool-master/prepare_tool/models/__init__.py": {
        "FontWeight.__iter__": {
            "name": "__iter__",
            "location": 52,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "prepare_tool-master/prepare_tool/validate/__init__.py": {
        "Validator.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "core": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Validator.validate": {
            "name": "validate",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Validator.__validateFont": {
            "name": "__validateFont",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "font": [
                    "str",
                    "Dict[str, Callable]",
                    "dict"
                ]
            }
        }
    }
}
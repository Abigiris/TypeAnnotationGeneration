{
    "projections-master/projections.py": {
        "mult_vec": {
            "name": "mult_vec",
            "location": 19,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "v": [
                    "int",
                    "str",
                    "float"
                ],
                "m": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "sum_vec": {
            "name": "sum_vec",
            "location": 23,
            "return": [
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "l": [
                    "Sized",
                    "int",
                    "float",
                    "Callable[..., bool]",
                    "str"
                ]
            }
        },
        "decompose": {
            "name": "decompose",
            "location": 27,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "v": [
                    "int",
                    "str"
                ],
                "basis": [
                    "bool",
                    "str",
                    "int",
                    "Sequence[Hashable]",
                    "Tuple[str]",
                    "float"
                ]
            }
        },
        "normalize_vec": {
            "name": "normalize_vec",
            "location": 41,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "v": [
                    "int",
                    "str",
                    "Iterable"
                ]
            }
        },
        "adjust_view_point": {
            "name": "adjust_view_point",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "str",
                    "List[Optional[Any]]",
                    "Optional[List[str]]",
                    "KT"
                ],
                "view": []
            }
        },
        "main": {
            "name": "main",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Line.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "bool",
                    "str",
                    "dict"
                ],
                "dir_vec": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "Line.__str__": {
            "name": "__str__",
            "location": 51,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Line.scuttle": {
            "name": "scuttle",
            "location": 54,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "u": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Plane.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "normal": [
                    "int",
                    "bool",
                    "float"
                ],
                "intercept": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Plane.project_vector": {
            "name": "project_vector",
            "location": 64,
            "return": [
                "float",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "List[int]",
                    "tuple",
                    "Dict[str, str]"
                ],
                "view": [
                    "int",
                    "str"
                ]
            }
        },
        "Plane.project_through": {
            "name": "project_through",
            "location": 83,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "bool",
                    "str"
                ]
            }
        },
        "Plane.project_line": {
            "name": "project_line",
            "location": 87,
            "return": [
                "str",
                "Sequence[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Plane.get_vectors": {
            "name": "get_vectors",
            "location": 96,
            "return": [
                "str",
                "List[Tuple[str, str]]",
                "set",
                "Dict[str, int]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "basis": [
                    "List[str]",
                    "str",
                    "int"
                ]
            }
        },
        "KeyboardEventHandler.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyboardEventHandler.has_handler": {
            "name": "has_handler",
            "location": 117,
            "return": [
                "str",
                "dict",
                "bytes",
                "MutableMapping[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "KeyboardEventHandler.get_handler": {
            "name": "get_handler",
            "location": 121,
            "return": [
                "str",
                "int",
                "Mapping[str, Any]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict",
                    "set"
                ]
            }
        },
        "KeyboardEventHandler.add_handler": {
            "name": "add_handler",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Optional[\"PNSqlCursor\"]",
                    "Optional[\"PNBuffer\"]",
                    "Iterable[str]",
                    "Optional[Callable[[str], Any]]",
                    "str",
                    "bytes"
                ],
                "handler": [
                    "Optional[\"PNSqlCursor\"]",
                    "Optional[\"PNBuffer\"]",
                    "Iterable[str]",
                    "Optional[Callable[[str], Any]]",
                    "str",
                    "bytes"
                ],
                "kwargs_dict": [
                    "Optional[\"PNSqlCursor\"]",
                    "Optional[\"PNBuffer\"]",
                    "Iterable[str]",
                    "Optional[Callable[[str], Any]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "KeyboardEventHandler.add_group_handler": {
            "name": "add_group_handler",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "group": [
                    "bool"
                ],
                "handler": [
                    "Dict[int, dict]",
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "kwargs_dict": [
                    "Dict[int, dict]",
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "View.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "int",
                    "bool",
                    "float"
                ],
                "plane": [
                    "Optional[bool]",
                    "Optional[int]",
                    "str"
                ],
                "basis": [
                    "str",
                    "dict",
                    "Dict[str, Set[str]]",
                    "bool"
                ]
            }
        },
        "View.project_point": {
            "name": "project_point",
            "location": 142,
            "return": [
                "str",
                "Iterable[str]",
                "Dict[str, Any]",
                "Set[str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "int",
                    "Callable",
                    "str",
                    "Iterable[T]",
                    "AsyncGenerator"
                ]
            }
        },
        "View.project_points": {
            "name": "project_points",
            "location": 146,
            "return": [
                "str",
                "List[str]",
                "Optional[Type]",
                "Dict[str, str]",
                "bool",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "points": [
                    "str"
                ]
            }
        },
        "View.move_point": {
            "name": "move_point",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "Sequence[Any]"
                ]
            }
        },
        "PrimitiveRenderer.__init__": {
            "name": "__init__",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "screen": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "PrimitiveRenderer.draw_point": {
            "name": "draw_point",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "int",
                    "list",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]",
                    "str"
                ],
                "color": [
                    "int",
                    "list",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]",
                    "str"
                ],
                "radius": [
                    "int",
                    "list",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]",
                    "str"
                ]
            }
        },
        "PrimitiveRenderer.draw_line_segment": {
            "name": "draw_line_segment",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "segment": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]",
                    "bytes"
                ],
                "color": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]",
                    "bytes"
                ],
                "radius": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]",
                    "bytes"
                ]
            }
        },
        "PrimitiveRenderer.draw_polygon": {
            "name": "draw_polygon",
            "location": 169,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "polygon": [
                    "bool",
                    "int",
                    "Iterable[T]"
                ],
                "color": [
                    "int",
                    "float",
                    "str",
                    "Sequence"
                ],
                "radius": [
                    "int",
                    "float",
                    "str",
                    "Sequence"
                ]
            }
        },
        "main.draw_line_segment": {
            "name": "draw_line_segment",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "line_segment": [
                    "str",
                    "int"
                ]
            }
        },
        "main.draw_polygon": {
            "name": "draw_polygon",
            "location": 225,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "points": [
                    "List[int]",
                    "str",
                    "List[str]",
                    "list",
                    "int"
                ]
            }
        }
    }
}
{
    "pseudo-plains-cree-master/setup.py": {},
    "pseudo-plains-cree-master/test_generate.py": {
        "utterances": {
            "name": "utterances",
            "location": 28,
            "return": [],
            "arguments": {
                "draw": []
            }
        },
        "test_basic_usage": {
            "name": "test_basic_usage",
            "location": 34,
            "return": [],
            "arguments": {
                "utterance": []
            }
        },
        "test_vowels": {
            "name": "test_vowels",
            "location": 42,
            "return": [],
            "arguments": {
                "utterance": []
            }
        },
        "test_doubled_grams": {
            "name": "test_doubled_grams",
            "location": 51,
            "return": [],
            "arguments": {
                "utterance": []
            }
        },
        "test_grammar_regular_expression": {
            "name": "test_grammar_regular_expression",
            "location": 59,
            "return": [],
            "arguments": {
                "utterance": []
            }
        },
        "is_vowel": {
            "name": "is_vowel",
            "location": 69,
            "return": [],
            "arguments": {
                "char": []
            }
        },
        "bigrams": {
            "name": "bigrams",
            "location": 78,
            "return": [],
            "arguments": {
                "text": []
            }
        }
    },
    "pseudo-plains-cree-master/pseudo_plains_cree/_grammar.py": {
        "first_char_uppercase": {
            "name": "first_char_uppercase",
            "location": 178,
            "return": [
                "str",
                "Type"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "is_single_char_terminal": {
            "name": "is_single_char_terminal",
            "location": 182,
            "return": [
                "Dict[str, int]",
                "Optional[int]",
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "p": [
                    "str",
                    "list",
                    "Optional[str]",
                    "Tuple[int]"
                ]
            }
        },
        "wrapped_in_parens": {
            "name": "wrapped_in_parens",
            "location": 186,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "re_uescape": {
            "name": "re_uescape",
            "location": 190,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "bool",
                    "Tuple[str, int, int]"
                ]
            }
        },
        "Production.generate": {
            "name": "generate",
            "location": 31,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Production.to_regex": {
            "name": "to_regex",
            "location": 34,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grammar.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grammar.__getitem__": {
            "name": "__getitem__",
            "location": 44,
            "return": [
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Grammar.__setitem__": {
            "name": "__setitem__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Union[List[str], str]",
                    "Set[str]"
                ],
                "definition": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "Grammar.start": {
            "name": "start",
            "location": 53,
            "return": [
                "str",
                "Union[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grammar.generate": {
            "name": "generate",
            "location": 56,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Grammar.to_regex": {
            "name": "to_regex",
            "location": 59,
            "return": [
                "Sequence[str]",
                "dict",
                "Dict[str, Any]",
                "bool",
                "str",
                "Dict[str, Union[bool, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProductionReference._dereference": {
            "name": "_dereference",
            "location": 68,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProductionReference.generate": {
            "name": "generate",
            "location": 71,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProductionReference.to_regex": {
            "name": "to_regex",
            "location": 74,
            "return": [
                "Dict[str, Any]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Terminal.generate": {
            "name": "generate",
            "location": 82,
            "return": [
                "str",
                "List[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Terminal.to_regex": {
            "name": "to_regex",
            "location": 85,
            "return": [
                "Type[T]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maybe.generate": {
            "name": "generate",
            "location": 93,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maybe.to_regex": {
            "name": "to_regex",
            "location": 98,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Concatenation.generate": {
            "name": "generate",
            "location": 112,
            "return": [
                "int",
                "List[str]",
                "str",
                "List[Tuple[int, str, str]]",
                "Tuple[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Concatenation.to_regex": {
            "name": "to_regex",
            "location": 115,
            "return": [
                "str",
                "List[str]",
                "Dict[str, Any]",
                "List[\"TaskNode\"]",
                "Sequence[dict]",
                "Tuple[float, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alternation.generate": {
            "name": "generate",
            "location": 123,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alternation.to_regex": {
            "name": "to_regex",
            "location": 126,
            "return": [
                "str",
                "List[str]",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_file": {
            "name": "parse_file",
            "location": 134,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "grammar_file": [
                    "List[str]"
                ]
            }
        },
        "Parser.parse_production": {
            "name": "parse_production",
            "location": 140,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Parser.parse_definition": {
            "name": "parse_definition",
            "location": 148,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "definition": [
                    "dict",
                    "str",
                    "bool",
                    "Mapping[str, Any]",
                    "bytes",
                    "BaseException"
                ]
            }
        },
        "Parser.parse_alternative": {
            "name": "parse_alternative",
            "location": 157,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "alternative": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "Parser.parse_value": {
            "name": "parse_value",
            "location": 165,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int",
                    "Union[int, List[int]]",
                    "bool"
                ]
            }
        },
        "Parser.parse_optional": {
            "name": "parse_optional",
            "location": 171,
            "return": [
                "str",
                "int",
                "Type",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "dict",
                    "Optional[Dict]"
                ]
            }
        }
    },
    "pseudo-plains-cree-master/pseudo_plains_cree/__init__.py": {
        "generate": {
            "name": "generate",
            "location": 35,
            "return": [],
            "arguments": {
                "min_syllables": [],
                "max_syllables": []
            }
        },
        "lorem": {
            "name": "lorem",
            "location": 58,
            "return": [],
            "arguments": {
                "min_words": [],
                "max_words": []
            }
        }
    },
    "pseudo-plains-cree-master/pseudo_plains_cree/__main__.py": {
        "main": {
            "name": "main",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "_program_name": [
                    "str"
                ],
                "command": [
                    "str"
                ]
            }
        }
    }
}
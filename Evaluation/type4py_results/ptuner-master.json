{
    "ptuner-master/setup.py": {
        "list_reqs": {
            "name": "list_reqs",
            "location": 18,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "ptuner-master/examples/lightgbm_local.py": {
        "make_data": {
            "name": "make_data",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "N": [
                    "int",
                    "List[str]"
                ],
                "p": [
                    "int",
                    "float"
                ]
            }
        },
        "objective": {
            "name": "objective",
            "location": 64,
            "return": [
                "bool",
                "dict",
                "Dict[str, bool]"
            ],
            "arguments": {
                "params": [
                    "dict",
                    "Dict[str, Any]",
                    "List[dict]"
                ],
                "current_round": [
                    "str",
                    "bool",
                    "slice"
                ]
            }
        }
    },
    "ptuner-master/examples/nn_master.py": {
        "make_data": {
            "name": "make_data",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "N": [
                    "int",
                    "List[str]"
                ],
                "p": [
                    "int",
                    "float"
                ]
            }
        },
        "objective": {
            "name": "objective",
            "location": 76,
            "return": [
                "bool",
                "dict",
                "Dict[str, bool]"
            ],
            "arguments": {
                "params": [
                    "str",
                    "Dict[str, str]",
                    "bytes"
                ],
                "current_round": [
                    "int",
                    "dict",
                    "Optional[int]",
                    "numpy.ndarray",
                    "List[int]"
                ]
            }
        }
    },
    "ptuner-master/examples/nn_worker.py": {
        "objective": {
            "name": "objective",
            "location": 55,
            "return": [
                "bool",
                "dict",
                "Dict[str, bool]"
            ],
            "arguments": {
                "params": [
                    "str",
                    "Dict[str, str]",
                    "bytes"
                ],
                "current_round": [
                    "int",
                    "dict",
                    "Optional[int]",
                    "numpy.ndarray",
                    "List[int]"
                ]
            }
        }
    },
    "ptuner-master/examples/xgb_local.py": {
        "make_data": {
            "name": "make_data",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "N": [
                    "int",
                    "List[str]"
                ],
                "p": [
                    "int",
                    "float"
                ]
            }
        },
        "objective": {
            "name": "objective",
            "location": 62,
            "return": [
                "bool",
                "dict",
                "Dict[str, bool]"
            ],
            "arguments": {
                "params": [
                    "dict",
                    "Dict[str, Any]",
                    "List[dict]"
                ],
                "current_round": [
                    "str",
                    "bool",
                    "slice"
                ]
            }
        }
    },
    "ptuner-master/examples/xgb_master.py": {
        "make_data": {
            "name": "make_data",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "N": [
                    "int",
                    "List[str]"
                ],
                "p": [
                    "int",
                    "float"
                ]
            }
        },
        "objective": {
            "name": "objective",
            "location": 62,
            "return": [
                "bool",
                "dict",
                "Dict[str, bool]"
            ],
            "arguments": {
                "params": [
                    "dict",
                    "Dict[str, Any]",
                    "List[dict]"
                ],
                "current_round": [
                    "str",
                    "bool",
                    "slice"
                ]
            }
        }
    },
    "ptuner-master/examples/xgb_worker.py": {
        "make_data": {
            "name": "make_data",
            "location": 11,
            "return": [
                "float",
                "List[int]",
                "bool",
                "T"
            ],
            "arguments": {
                "N": [
                    "int",
                    "List[str]"
                ],
                "p": [
                    "int",
                    "float"
                ]
            }
        },
        "objective": {
            "name": "objective",
            "location": 41,
            "return": [
                "bool",
                "dict",
                "Dict[str, bool]"
            ],
            "arguments": {
                "params": [
                    "dict",
                    "Dict[str, Any]",
                    "List[dict]"
                ],
                "current_round": [
                    "str",
                    "bool",
                    "slice"
                ]
            }
        }
    },
    "ptuner-master/ptuner/pipeline.py": {
        "LocalPipelineTuner.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lower_is_better": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "n_jobs": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "backend": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "experiment_name": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "save_name": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "verbose": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "LocalPipelineTuner._export_all_results": {
            "name": "_export_all_results",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalPipelineTuner._update_space": {
            "name": "_update_space",
            "location": 104,
            "return": [
                "float",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "sampler": [
                    "bool",
                    "dict",
                    "str",
                    "Union[int, float]",
                    "helper.Vector",
                    "float",
                    "numpy.ndarray"
                ],
                "hof": [
                    "int",
                    "float",
                    "str",
                    "numpy.random.RandomState"
                ],
                "n_round": [
                    "int",
                    "float",
                    "str",
                    "numpy.random.RandomState"
                ]
            }
        },
        "LocalPipelineTuner._evaluate_candidate": {
            "name": "_evaluate_candidate",
            "location": 151,
            "return": [
                "cmk.utils.type_defs.UserId",
                "Optional[int]",
                "str",
                "type",
                "int"
            ],
            "arguments": {
                "self": [],
                "objective": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "Callable",
                    "Dict[str, Union[int, bool]]"
                ],
                "candidate": [
                    "Dict[str, Any]",
                    "pandas.DataFrame",
                    "bool",
                    "Callable",
                    "str"
                ],
                "i": [
                    "logging.Logger",
                    "str",
                    "Exception",
                    "numpy.ndarray",
                    "Optional[numpy.ndarray]"
                ],
                "n_candidates": [
                    "int",
                    "float"
                ]
            }
        },
        "LocalPipelineTuner.search": {
            "name": "search",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "objective": [
                    "str",
                    "List[str]",
                    "bool",
                    "bytes"
                ],
                "sampler": [
                    "spaces.SpaceSampler",
                    "List[Tuple[str, int, int]]"
                ],
                "max_configs_per_round": [
                    "List[int]",
                    "float",
                    "str",
                    "List[str]"
                ],
                "subsample_factor": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "ParallelPipelineTuner.__init__": {
            "name": "__init__",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db_host": [
                    "str",
                    "bool",
                    "int"
                ],
                "db_port": [
                    "int",
                    "List[str]",
                    "numpy.ndarray",
                    "utils.Archive[utils.MultiValue]"
                ],
                "lower_is_better": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "role": [
                    "str",
                    "bool",
                    "int"
                ],
                "n_jobs": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "backend": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "experiment_name": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "save_name": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "verbose": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "ParallelPipelineTuner._export_all_results": {
            "name": "_export_all_results",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParallelPipelineTuner._select_best": {
            "name": "_select_best",
            "location": 441,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "bool",
                "Optional[float]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParallelPipelineTuner._update_space": {
            "name": "_update_space",
            "location": 464,
            "return": [
                "float",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "sampler": [
                    "spaces.SpaceSampler",
                    "int",
                    "numpy.ndarray",
                    "Optional[int]",
                    "float"
                ],
                "hof": [
                    "int",
                    "list",
                    "numpy.ndarray"
                ],
                "n_round": [
                    "int",
                    "list",
                    "numpy.ndarray"
                ]
            }
        },
        "ParallelPipelineTuner._current_round": {
            "name": "_current_round",
            "location": 516,
            "return": [
                "T",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParallelPipelineTuner._n_candidates_remaining": {
            "name": "_n_candidates_remaining",
            "location": 535,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParallelPipelineTuner._evaluate_candidate": {
            "name": "_evaluate_candidate",
            "location": 555,
            "return": [
                "float",
                "numpy.ndarray",
                "[[]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "objective": [
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "T",
                    "str",
                    "django.db.migrations.state.StateApps"
                ]
            }
        },
        "ParallelPipelineTuner._master_search": {
            "name": "_master_search",
            "location": 619,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "objective": [
                    "List[cmk.utils.type_defs.HostName]",
                    "int",
                    "List[str]",
                    "str",
                    "Optional[str]",
                    "Set[str]"
                ],
                "sampler": [
                    "spaces.SpaceSampler"
                ],
                "max_configs_per_round": [
                    "List[int]",
                    "float",
                    "list",
                    "List[str]",
                    "str"
                ],
                "subsample_factor": [
                    "int",
                    "float",
                    "str",
                    "logging.LogRecord"
                ]
            }
        },
        "ParallelPipelineTuner._worker_search": {
            "name": "_worker_search",
            "location": 706,
            "return": [
                "Union[tuple, list]",
                "Iterator[Dict[str, str]]",
                "Set[str]",
                "set"
            ],
            "arguments": {
                "self": [],
                "objective": [
                    "int",
                    "list"
                ],
                "n_rounds": [
                    "int",
                    "bool"
                ],
                "max_attempts": [
                    "int"
                ],
                "backoff_period": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "ParallelPipelineTuner.search": {
            "name": "search",
            "location": 787,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "objective": [
                    "int",
                    "float",
                    "Tuple[int]"
                ],
                "max_configs_per_round": [
                    "int",
                    "float",
                    "Tuple[int]"
                ],
                "sampler": [
                    "int",
                    "float",
                    "Tuple[int]"
                ],
                "subsample_factor": [
                    "int",
                    "float",
                    "Tuple[int]"
                ],
                "max_attempts": [
                    "int",
                    "List[int]",
                    "Tuple[int]",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "backoff_period": [
                    "int",
                    "List[int]",
                    "Tuple[int]",
                    "rl_algorithms.utils.config.ConfigDict"
                ]
            }
        }
    },
    "ptuner-master/ptuner/__init__.py": {},
    "ptuner-master/ptuner/base/_pipeline.py": {
        "BasePipelineTuner.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lower_is_better": [
                    "bool",
                    "Optional[Union[Any, Any]]",
                    "List[str]"
                ],
                "n_jobs": [
                    "int",
                    "bytes",
                    "bool",
                    "List[int]"
                ],
                "backend": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[int]"
                ],
                "experiment_name": [
                    "str"
                ],
                "save_name": [
                    "Optional[str]",
                    "List[Dict[str, Any]]",
                    "str",
                    "Dict[str, Any]",
                    "Optional[bool]",
                    "Optional[Dict[str, str]]",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "verbose": [
                    "bool",
                    "List[str]",
                    "Optional[Union[Any, Any]]"
                ]
            }
        },
        "BasePipelineTuner._export_all_results": {
            "name": "_export_all_results",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BasePipelineTuner._evaluate_candidate": {
            "name": "_evaluate_candidate",
            "location": 86,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "objective": [
                    "int"
                ]
            }
        },
        "BasePipelineTuner._update_space": {
            "name": "_update_space",
            "location": 109,
            "return": [
                "spaces.sampler.SpaceSampler"
            ],
            "arguments": {
                "self": [],
                "sampler": [
                    "int",
                    "List[int]",
                    "Type[Exception]",
                    "bool"
                ],
                "hof": [
                    "int",
                    "List[int]",
                    "Type[Exception]",
                    "bool"
                ],
                "n_round": [
                    "int",
                    "List[int]",
                    "Type[Exception]",
                    "bool"
                ]
            }
        },
        "BasePipelineTuner.search": {
            "name": "search",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "objective": [
                    "int",
                    "str",
                    "List[int]",
                    "List[str]",
                    "bytes"
                ],
                "sampler": [
                    "int",
                    "str",
                    "List[int]",
                    "List[str]",
                    "bytes"
                ],
                "max_configs_per_round": [
                    "int",
                    "str",
                    "List[int]",
                    "List[str]",
                    "bytes"
                ],
                "subsample_factor": [
                    "int",
                    "str",
                    "List[int]",
                    "List[str]",
                    "bytes"
                ]
            }
        }
    },
    "ptuner-master/ptuner/base/_sampler.py": {
        "BaseSampler.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dynamic_update": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "float"
                ],
                "seed": [
                    "Optional[int]",
                    "int",
                    "bool",
                    "Optional[dict]"
                ]
            }
        },
        "BaseSampler.__str__": {
            "name": "__str__",
            "location": 34,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSampler._starting_space": {
            "name": "_starting_space",
            "location": 50,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSampler.sample_space": {
            "name": "sample_space",
            "location": 69,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSampler.update_space": {
            "name": "update_space",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "List[Dict[str, Any]]",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "ptuner-master/ptuner/base/__init__.py": {},
    "ptuner-master/ptuner/db/mongodb.py": {
        "is_running": {
            "name": "is_running",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "host": [
                    "int",
                    "str",
                    "bool"
                ],
                "port": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "insert_init_record": {
            "name": "insert_init_record",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "collection": [
                    "str",
                    "pymongo.MongoClient",
                    "List[str]"
                ],
                "computer_name": [
                    "str",
                    "pymongo.MongoClient",
                    "List[str]"
                ]
            }
        },
        "init_collection": {
            "name": "init_collection",
            "location": 111,
            "return": [
                "bool"
            ],
            "arguments": {
                "host": [
                    "str",
                    "int",
                    "bool"
                ],
                "port": [
                    "str",
                    "int",
                    "bool"
                ],
                "collection": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Optional[int]"
                ],
                "overwrite": [
                    "bool",
                    "int",
                    "Union[Callable, str]"
                ],
                "computer_name": [
                    "str",
                    "int",
                    "list",
                    "dict"
                ]
            }
        },
        "MongoWorker.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "Optional[str]"
                ],
                "port": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "collection": [
                    "Optional[str]",
                    "bool",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "MongoWorker.__enter__": {
            "name": "__enter__",
            "location": 41,
            "return": [
                "bool",
                "Tuple[int, int]",
                "int",
                "List[Tuple[str, str, str]]",
                "\"IConnection\""
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoWorker.__exit__": {
            "name": "__exit__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ptuner-master/ptuner/db/__init__.py": {},
    "ptuner-master/ptuner/db/tests/test_mongodb.py": {},
    "ptuner-master/ptuner/spaces/classifiers.py": {
        "MLPClassifierSampler.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dynamic_update": [
                    "bool",
                    "Optional[int]",
                    "str"
                ],
                "early_stopping": [
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "n_hidden_layers": [
                    "int"
                ],
                "max_neurons": [
                    "int",
                    "numpy.ndarray"
                ],
                "max_epochs": [
                    "int",
                    "numpy.ndarray"
                ],
                "seed": [
                    "bool",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "MLPClassifierSampler.__str__": {
            "name": "__str__",
            "location": 58,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "MLPClassifierSampler._starting_space": {
            "name": "_starting_space",
            "location": 73,
            "return": [
                "int",
                "Tuple[str, str]",
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "MLPClassifierSampler.sample_space": {
            "name": "sample_space",
            "location": 107,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MLPClassifierSampler.update_space": {
            "name": "update_space",
            "location": 133,
            "return": [
                "str",
                "Set[str]",
                "DefaultDict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "pandas.DataFrame",
                    "dict"
                ]
            }
        },
        "XGBClassifierSampler.__init__": {
            "name": "__init__",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dynamic_update": [
                    "bool",
                    "int",
                    "str",
                    "Mapping"
                ],
                "early_stopping": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "float"
                ],
                "seed": [
                    "bool",
                    "int",
                    "str",
                    "Mapping"
                ]
            }
        },
        "XGBClassifierSampler.__str__": {
            "name": "__str__",
            "location": 214,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "XGBClassifierSampler._starting_space": {
            "name": "_starting_space",
            "location": 229,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "XGBClassifierSampler.sample_space": {
            "name": "sample_space",
            "location": 259,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "XGBClassifierSampler.update_space": {
            "name": "update_space",
            "location": 284,
            "return": [
                "str",
                "Set[str]",
                "DefaultDict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "pandas.DataFrame",
                    "List['PlotInfo']",
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "LightGBMClassifierSampler.__init__": {
            "name": "__init__",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dynamic_update": [
                    "bool",
                    "int",
                    "str",
                    "Mapping"
                ],
                "early_stopping": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "float"
                ],
                "seed": [
                    "bool",
                    "int",
                    "str",
                    "Mapping"
                ]
            }
        },
        "LightGBMClassifierSampler.__str__": {
            "name": "__str__",
            "location": 373,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "LightGBMClassifierSampler._starting_space": {
            "name": "_starting_space",
            "location": 388,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LightGBMClassifierSampler.sample_space": {
            "name": "sample_space",
            "location": 417,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LightGBMClassifierSampler.update_space": {
            "name": "update_space",
            "location": 443,
            "return": [
                "str",
                "Set[str]",
                "DefaultDict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "pandas.DataFrame",
                    "dict"
                ]
            }
        }
    },
    "ptuner-master/ptuner/spaces/features.py": {
        "NaiveFeatureSampler.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "int",
                    "numpy.ndarray"
                ],
                "dynamic_update": [
                    "bool",
                    "int"
                ],
                "muting_threshold": [
                    "bool",
                    "int",
                    "Union[int, Tuple[int, int]]",
                    "List[str]"
                ]
            }
        },
        "NaiveFeatureSampler.__str__": {
            "name": "__str__",
            "location": 53,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "NaiveFeatureSampler._starting_space": {
            "name": "_starting_space",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NaiveFeatureSampler.sample_space": {
            "name": "sample_space",
            "location": 84,
            "return": [
                "List[str]",
                "str",
                "Dict[str, Any]",
                "List[List[str]]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "NaiveFeatureSampler.update_space": {
            "name": "update_space",
            "location": 105,
            "return": [
                "str",
                "Set[str]",
                "DefaultDict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "pandas.DataFrame",
                    "dict",
                    "str"
                ]
            }
        }
    },
    "ptuner-master/ptuner/spaces/regressors.py": {},
    "ptuner-master/ptuner/spaces/sampler.py": {
        "SpaceSampler.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpaceSampler.add_feature_sampler": {
            "name": "add_feature_sampler",
            "location": 76,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "sampler": [
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "SpaceSampler.add_hyperparameter_sampler": {
            "name": "add_hyperparameter_sampler",
            "location": 97,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "sampler": [
                    "str",
                    "Callable"
                ],
                "name": [
                    "str",
                    "Callable"
                ]
            }
        },
        "SpaceSampler.sample_space": {
            "name": "sample_space",
            "location": 120,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpaceSampler.update_space": {
            "name": "update_space",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_features": [
                    "dict",
                    "bytes"
                ],
                "data_hyperparameters": [
                    "bytes",
                    "bool",
                    "Sequence[str]",
                    "Optional[Any]",
                    "int"
                ]
            }
        }
    },
    "ptuner-master/ptuner/spaces/__init__.py": {},
    "ptuner-master/ptuner/spaces/tests/test_classifiers.py": {
        "test_lightgbm_classifier_sampler": {
            "name": "test_lightgbm_classifier_sampler",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "dynamic_update": [
                    "bool",
                    "str",
                    "int"
                ],
                "early_stopping": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "test_mlp_classifier_sampler": {
            "name": "test_mlp_classifier_sampler",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "dynamic_update": [
                    "bool",
                    "Dict[str, Any]",
                    "Iterable[str]"
                ],
                "early_stopping": [
                    "bool",
                    "Dict[str, Any]",
                    "Iterable[str]"
                ],
                "n_hidden_layers": [
                    "bool",
                    "Dict[str, Any]",
                    "Iterable[str]"
                ],
                "max_neurons": [
                    "bool",
                    "Dict[str, Any]",
                    "Iterable[str]"
                ],
                "max_epochs": [
                    "bool",
                    "Dict[str, Any]",
                    "Iterable[str]"
                ]
            }
        },
        "test_xgb_classifier_sampler": {
            "name": "test_xgb_classifier_sampler",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "dynamic_update": [
                    "bool",
                    "str",
                    "int"
                ],
                "early_stopping": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        }
    },
    "ptuner-master/ptuner/spaces/tests/test_features.py": {},
    "ptuner-master/ptuner/spaces/tests/test_regressors.py": {},
    "ptuner-master/ptuner/spaces/tests/test_sampler.py": {},
    "ptuner-master/ptuner/tests/test_pipeline.py": {
        "clf_binary": {
            "name": "clf_binary",
            "location": 29,
            "return": [
                "int",
                "float"
            ],
            "arguments": {}
        },
        "test_local_pipeline_tuner": {
            "name": "test_local_pipeline_tuner",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "clf_binary": [
                    "int",
                    "List[Tuple[int, int, float]]",
                    "float"
                ]
            }
        },
        "test_parallel_pipeline_tuner": {
            "name": "test_parallel_pipeline_tuner",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "clf_binary": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_local_pipeline_tuner.objective": {
            "name": "objective",
            "location": 51,
            "return": [
                "bool",
                "dict",
                "Dict[str, bool]"
            ],
            "arguments": {
                "params": [
                    "dict",
                    "Dict[str, Any]",
                    "List[dict]"
                ],
                "current_round": [
                    "str",
                    "bool",
                    "slice"
                ]
            }
        }
    },
    "ptuner-master/ptuner/utils/constants.py": {},
    "ptuner-master/ptuner/utils/helper.py": {
        "get_hostname": {
            "name": "get_hostname",
            "location": 17,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {}
        },
        "get_ip_address": {
            "name": "get_ip_address",
            "location": 39,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "countdown": {
            "name": "countdown",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "str",
                    "Tuple[str]",
                    "Match[str]",
                    "bool"
                ],
                "t": [
                    "int",
                    "str",
                    "Callable[[int], None]",
                    "Sequence[T]"
                ]
            }
        },
        "parse_hyperopt_param": {
            "name": "parse_hyperopt_param",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        }
    },
    "ptuner-master/ptuner/utils/__init__.py": {},
    "ptuner-master/ptuner/utils/tests/test_helper.py": {
        "test_parse_hyperopt_param": {
            "name": "test_parse_hyperopt_param",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "parameter": [
                    "int",
                    "str"
                ],
                "expected": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "test_parse_hyperopt_param_error": {
            "name": "test_parse_hyperopt_param_error",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        }
    }
}
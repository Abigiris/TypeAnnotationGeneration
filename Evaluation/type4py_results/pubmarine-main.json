{
    "pubmarine-main/setup.py": {},
    "pubmarine-main/docs/conf.py": {},
    "pubmarine-main/docs/_themes/sphinx_rtd_theme/setup.py": {},
    "pubmarine-main/docs/_themes/sphinx_rtd_theme/demo_docs/source/conf.py": {},
    "pubmarine-main/docs/_themes/sphinx_rtd_theme/demo_docs/source/test_py_module/test.py": {
        "Foo.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "qux": [
                    "int",
                    "bool",
                    "float"
                ],
                "spam": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Foo.add": {
            "name": "add",
            "location": 59,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "val1": [
                    "int",
                    "Optional[str]"
                ],
                "val2": [
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Foo.capitalize": {
            "name": "capitalize",
            "location": 72,
            "return": [
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "myvalue": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Foo.another_function": {
            "name": "another_function",
            "location": 83,
            "return": [
                "int",
                "Tuple[float, float, float]",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "list",
                    "Callable",
                    "List[str]",
                    "bool",
                    "List[int]"
                ],
                "b": [
                    "list",
                    "Callable",
                    "List[str]",
                    "bool",
                    "List[int]"
                ]
            }
        }
    },
    "pubmarine-main/docs/_themes/sphinx_rtd_theme/demo_docs/source/test_py_module/__init__.py": {},
    "pubmarine-main/docs/_themes/sphinx_rtd_theme/sphinx_rtd_theme/__init__.py": {
        "get_html_theme_path": {
            "name": "get_html_theme_path",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "setup": {
            "name": "setup",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "int"
                ]
            }
        }
    },
    "pubmarine-main/docs/_themes/sphinx_rtd_theme/tests/test_builders.py": {
        "test_basic": {
            "name": "test_basic",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_empty": {
            "name": "test_empty",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_missing_toctree": {
            "name": "test_missing_toctree",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pubmarine-main/docs/_themes/sphinx_rtd_theme/tests/util.py": {
        "build": {
            "name": "build",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "root": [
                    "str",
                    "Optional[List]"
                ],
                "builder": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "List[str]",
                    "Callable[[str], str]",
                    "IO[Any]"
                ]
            }
        },
        "build_all": {
            "name": "build_all",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "root": [
                    "dict",
                    "Exception",
                    "os.DirEntry"
                ]
            }
        }
    },
    "pubmarine-main/docs/_themes/sphinx_rtd_theme/tests/__init__.py": {},
    "pubmarine-main/docs/_themes/sphinx_rtd_theme/tests/roots/test-basic/conf.py": {},
    "pubmarine-main/docs/_themes/sphinx_rtd_theme/tests/roots/test-empty/conf.py": {},
    "pubmarine-main/docs/_themes/sphinx_rtd_theme/tests/roots/test-missing-toctree/conf.py": {},
    "pubmarine-main/examples/simple.py": {
        "main": {
            "name": "main",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Server.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Client.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Client.display": {
            "name": "display",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "message": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "pubmarine-main/examples/stdin-example.py": {
        "get_stdin_data": {
            "name": "get_stdin_data",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "loop": [
                    "Awaitable",
                    "str"
                ],
                "queue": [
                    "Awaitable",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Server.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Server.broadcast": {
            "name": "broadcast",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Tuple['cirq.Qid']",
                    "float"
                ]
            }
        },
        "Client.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen": [
                    "int",
                    "bool",
                    "float"
                ],
                "input_queue": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Client.display": {
            "name": "display",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "message": [
                    "str",
                    "int",
                    "Tuple['cirq.Qid']"
                ]
            }
        }
    },
    "pubmarine-main/examples/talk.py": {
        "main": {
            "name": "main",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Display.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "Display.__enter__": {
            "name": "__enter__",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Display.__exit__": {
            "name": "__exit__",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Display.show_message": {
            "name": "show_message",
            "location": 77,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "asyncio.events.AbstractEventLoop",
                    "asyncio.AbstractEventLoop",
                    "asyncio.StreamWriter"
                ],
                "user": [
                    "List[int]"
                ]
            }
        },
        "Display.show_typing": {
            "name": "show_typing",
            "location": 93,
            "return": [
                "Iterator[Tuple[str, str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "char": [
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "Display.clear_typing": {
            "name": "clear_typing",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Display.show_error": {
            "name": "show_error",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "str",
                    "dict",
                    "int",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "TalkProtocol.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "TalkProtocol.send_message": {
            "name": "send_message",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Callable",
                    "bool",
                    "Dict[str, List[Any]]"
                ]
            }
        },
        "TalkProtocol.connection_made": {
            "name": "connection_made",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TalkProtocol.data_received": {
            "name": "data_received",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "bool"
                ]
            }
        },
        "TalkProtocol.error_received": {
            "name": "error_received",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "str",
                    "int",
                    "set"
                ]
            }
        },
        "TalkProtocol.connection_lost": {
            "name": "connection_lost",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "pubmarine-main/pubmarine/__init__.py": {
        "PubPen.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "Dict[str, Any]",
                    "bool",
                    "dict",
                    "bytes"
                ],
                "event_list": [
                    "Optional[int]",
                    "str",
                    "List[str]",
                    "List[int]",
                    "int"
                ]
            }
        },
        "PubPen._id_generator": {
            "name": "_id_generator",
            "location": 85,
            "return": [
                "typing.Generator[builtins.int, None, None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PubPen.subscribe": {
            "name": "subscribe",
            "location": 92,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "event": [],
                "callback": [
                    "dict",
                    "str",
                    "Exception"
                ]
            }
        },
        "PubPen.unsubscribe": {
            "name": "unsubscribe",
            "location": 137,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "sub_id": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "PubPen.publish": {
            "name": "publish",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict[str, Any]"
                ]
            }
        },
        "PubPen.emit": {
            "name": "emit",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "List[Dict]",
                    "int",
                    "list"
                ]
            }
        }
    },
    "pubmarine-main/tests/functional/test_publish_event.py": {
        "pubpen": {
            "name": "pubpen",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "request": [
                    "Dict[str, Any]"
                ],
                "event_loop": [
                    "dict",
                    "Dict[str, str]",
                    "bytes",
                    "Optional[\"TrackingData\"]",
                    "Union[str, Dict[str, Any]]"
                ]
            }
        },
        "pubpen_mocked": {
            "name": "pubpen_mocked",
            "location": 16,
            "return": [
                "Callable[[bytes], None]",
                "float",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "request": [],
                "event_loop": [
                    "bytes",
                    "Dict[str, str]",
                    "Optional[\"TrackingData\"]",
                    "bool"
                ]
            }
        },
        "function1": {
            "name": "function1",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "Dict[str, Any]",
                    "Type",
                    "int",
                    "bool",
                    "type"
                ]
            }
        },
        "function2": {
            "name": "function2",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "Dict[str, Any]",
                    "Type",
                    "int",
                    "bool",
                    "type"
                ]
            }
        },
        "Method.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Method.method": {
            "name": "method",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.__call__": {
            "name": "__call__",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFunctionalPublish.test_one_event_one_method_callback": {
            "name": "test_one_event_one_method_callback",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen": [
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "TestFunctionalPublish.test_one_event_one_callback": {
            "name": "test_one_event_one_callback",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen": [
                    "dict",
                    "bool"
                ]
            }
        },
        "TestFunctionalPublish.test_one_event_one_callback_several_times": {
            "name": "test_one_event_one_callback_several_times",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen": []
            }
        },
        "TestFunctionalPublish.test_multi_events_one_callback_all_events_called": {
            "name": "test_multi_events_one_callback_all_events_called",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen": []
            }
        },
        "TestFunctionalPublish.test_multi_events_one_callback_one_event_called": {
            "name": "test_multi_events_one_callback_one_event_called",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen": []
            }
        },
        "TestFunctionalPublish.test_one_event_multi_callback": {
            "name": "test_one_event_multi_callback",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen": []
            }
        },
        "TestFunctionalPublish.test_one_event_multi_callback_several_times": {
            "name": "test_one_event_multi_callback_several_times",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen": []
            }
        },
        "TestFunctionalPublish.test_multi_event_multi_callback_all_events_called": {
            "name": "test_multi_event_multi_callback_all_events_called",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen": []
            }
        },
        "TestFunctionalPublish.test_multi_event_multi_callback_one_event_called": {
            "name": "test_multi_event_multi_callback_one_event_called",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen": []
            }
        },
        "TestFunctionalPublish.test_multi_event_multi_callback_specific_events": {
            "name": "test_multi_event_multi_callback_specific_events",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen": []
            }
        },
        "TestFunctionalPublish.test_callback_with_args": {
            "name": "test_callback_with_args",
            "location": 234,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen": [
                    "dict"
                ]
            }
        },
        "TestFunctionalPublish.test_callback_with_kwargs": {
            "name": "test_callback_with_kwargs",
            "location": 248,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen": [
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "TestFunctionalPublish.test_callback_with_args_and_kwargs": {
            "name": "test_callback_with_args_and_kwargs",
            "location": 262,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen": [
                    "Optional[str]"
                ]
            }
        },
        "TestFunctionalPublish.test_function_goes_away": {
            "name": "test_function_goes_away",
            "location": 277,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen": [
                    "int"
                ]
            }
        },
        "TestFunctionalPublish.test_function_goes_away_mocked": {
            "name": "test_function_goes_away_mocked",
            "location": 292,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen_mocked": []
            }
        },
        "TestFunctionalPublish.test_method_goes_away": {
            "name": "test_method_goes_away",
            "location": 306,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen": [
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "TestFunctionalPublish.test_method_goes_away_mocked": {
            "name": "test_method_goes_away_mocked",
            "location": 321,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen_mocked": []
            }
        },
        "TestFunctionalEmit.test_emit_same_as_publish": {
            "name": "test_emit_same_as_publish",
            "location": 338,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen": [
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "pubmarine-main/tests/functional/test_unsubscribe_event.py": {
        "pubpen": {
            "name": "pubpen",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "request": [
                    "Dict[str, Any]"
                ],
                "event_loop": [
                    "dict",
                    "Dict[str, str]",
                    "bytes",
                    "Optional[\"TrackingData\"]",
                    "Union[str, Dict[str, Any]]"
                ]
            }
        },
        "function1": {
            "name": "function1",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "Dict[str, Any]",
                    "Type",
                    "int",
                    "bool",
                    "type"
                ]
            }
        },
        "function2": {
            "name": "function2",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "Dict[str, Any]",
                    "Type",
                    "int",
                    "bool",
                    "type"
                ]
            }
        },
        "Function.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.__call__": {
            "name": "__call__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFunctionalUnsubscribe.test_no_callbacks_made": {
            "name": "test_no_callbacks_made",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen": []
            }
        },
        "TestFunctionalUnsubscribe.test_no_further_callbacks_made": {
            "name": "test_no_further_callbacks_made",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen": []
            }
        },
        "TestFunctionalUnsubscribe.test_events_and_callbacks_isolated": {
            "name": "test_events_and_callbacks_isolated",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen": []
            }
        },
        "TestFunctionalUnsubscribe.test_events_isolated": {
            "name": "test_events_isolated",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen": []
            }
        },
        "TestFunctionalUnsubscribe.test_callbacks_isolated": {
            "name": "test_callbacks_isolated",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen": []
            }
        }
    },
    "pubmarine-main/tests/units/test_create.py": {
        "TestPubPenCreate.test_create": {
            "name": "test_create",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event_loop": [
                    "List[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "TestPubPenCreate.test_create_with_event_list": {
            "name": "test_create_with_event_list",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event_loop": [
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]"
                ]
            }
        }
    },
    "pubmarine-main/tests/units/test_publish.py": {
        "handler1": {
            "name": "handler1",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "handler2": {
            "name": "handler2",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "handler3": {
            "name": "handler3",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "pubpen": {
            "name": "pubpen",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "event_loop": [
                    "dict",
                    "Dict[str, Any]",
                    "Sequence[float]",
                    "str"
                ]
            }
        },
        "pubpen_predefined": {
            "name": "pubpen_predefined",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "event_loop": [
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "pubpen_emit": {
            "name": "pubpen_emit",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "event_loop": [
                    "dict",
                    "Dict[str, Any]",
                    "Sequence[float]",
                    "str"
                ]
            }
        },
        "pubpen_handlers_dealloc": {
            "name": "pubpen_handlers_dealloc",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "event_loop": [
                    "dict",
                    "Dict[str, Any]",
                    "Sequence[float]",
                    "str"
                ]
            }
        },
        "pubpen_handlers_partially_removed": {
            "name": "pubpen_handlers_partially_removed",
            "location": 63,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "event_loop": [
                    "dict",
                    "Dict[str, Any]",
                    "Sequence[float]",
                    "str"
                ]
            }
        },
        "TestPubPenPublish.test_publish_event_list_pass": {
            "name": "test_publish_event_list_pass",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen_predefined": []
            }
        },
        "TestPubPenPublish.test_publish_event_list_fail": {
            "name": "test_publish_event_list_fail",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen_predefined": [
                    "Callable"
                ]
            }
        },
        "TestPubPenPublish.test_no_callbacks": {
            "name": "test_no_callbacks",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen": [
                    "float"
                ]
            }
        },
        "TestPubPenPublish.test_one_callback": {
            "name": "test_one_callback",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen": [
                    "float",
                    "Callable",
                    "bool"
                ]
            }
        },
        "TestPubPenPublish.test_multi_callbacks": {
            "name": "test_multi_callbacks",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen": [
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "TestPubPenPublish.test_deallocated_callback": {
            "name": "test_deallocated_callback",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen_handlers_dealloc": [
                    "str",
                    "float"
                ]
            }
        },
        "TestPubPenPublish.test_partially_removed_callback": {
            "name": "test_partially_removed_callback",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen_handlers_partially_removed": [
                    "str",
                    "float"
                ]
            }
        },
        "TestPubPenEmit.test_emit_warns": {
            "name": "test_emit_warns",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen": [
                    "str",
                    "float"
                ]
            }
        },
        "TestPubPenEmit.test_called_publish": {
            "name": "test_called_publish",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen_emit": [
                    "Type",
                    "Iterable[Any]"
                ]
            }
        }
    },
    "pubmarine-main/tests/units/test_subscribe.py": {
        "pubpen": {
            "name": "pubpen",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "event_loop": [
                    "dict",
                    "Dict[str, Any]",
                    "Sequence[float]",
                    "str"
                ]
            }
        },
        "pubpen_predefined": {
            "name": "pubpen_predefined",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "event_loop": [
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "function": {
            "name": "function",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Foo.method": {
            "name": "method",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPubPenSubscribe.test_pubpen_id_integer": {
            "name": "test_pubpen_id_integer",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestPubPenSubscribe.test_pubpen_id_increments": {
            "name": "test_pubpen_id_increments",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen": []
            }
        },
        "TestPubPenSubscribe.test_subscribe_function": {
            "name": "test_subscribe_function",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen": []
            }
        },
        "TestPubPenSubscribe.test_subscribe_method": {
            "name": "test_subscribe_method",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen": []
            }
        },
        "TestPubPenSubscribe.test_in_event_list": {
            "name": "test_in_event_list",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen_predefined": [
                    "Dict[str, Any]"
                ]
            }
        },
        "TestPubPenSubscribe.test_not_in_event_list": {
            "name": "test_not_in_event_list",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen_predefined": [
                    "int"
                ]
            }
        },
        "TestPubPenSubscribe.test_subscribe_same_callback_same_event": {
            "name": "test_subscribe_same_callback_same_event",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen": []
            }
        },
        "TestPubPenSubscribe.test_subscribe_same_callback_diff_event": {
            "name": "test_subscribe_same_callback_diff_event",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen": []
            }
        },
        "TestPubPenSubscribe.test_subscribe_diff_callback_same_event": {
            "name": "test_subscribe_diff_callback_same_event",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen": [
                    "Optional[str]"
                ]
            }
        },
        "TestPubPenSubscribe.test_subscribe_diff_callback_diff_event": {
            "name": "test_subscribe_diff_callback_diff_event",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen": [
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "pubmarine-main/tests/units/test_unsubscribe.py": {
        "pubpen": {
            "name": "pubpen",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "event_loop": [
                    "dict",
                    "Dict[str, Any]",
                    "Sequence[float]",
                    "str"
                ]
            }
        },
        "pubpen_multi_event": {
            "name": "pubpen_multi_event",
            "location": 13,
            "return": [
                "List[dict]",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "event_loop": [
                    "dict",
                    "Dict[str, Any]",
                    "Sequence[float]"
                ]
            }
        },
        "pubpen_multi_callback": {
            "name": "pubpen_multi_callback",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "event_loop": [
                    "dict",
                    "Dict[str, Any]",
                    "Sequence[float]",
                    "str"
                ]
            }
        },
        "pubpen_partially_dealloc": {
            "name": "pubpen_partially_dealloc",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "event_loop": [
                    "dict",
                    "Dict[str, Any]",
                    "Sequence[float]",
                    "str"
                ]
            }
        },
        "function": {
            "name": "function",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Foo.method": {
            "name": "method",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPubPenUnsubscribe.test_unsubscribe_nonexisting": {
            "name": "test_unsubscribe_nonexisting",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen": [
                    "str",
                    "Union[int, str]",
                    "int"
                ]
            }
        },
        "TestPubPenUnsubscribe.test_unsubscribe_multi_event_remove_first": {
            "name": "test_unsubscribe_multi_event_remove_first",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen_multi_event": [
                    "int"
                ]
            }
        },
        "TestPubPenUnsubscribe.test_unsubscribe_multi_event_remove_last": {
            "name": "test_unsubscribe_multi_event_remove_last",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen_multi_event": [
                    "int"
                ]
            }
        },
        "TestPubPenUnsubscribe.test_unsubscribe_multi_callback_remove_first": {
            "name": "test_unsubscribe_multi_callback_remove_first",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen_multi_callback": []
            }
        },
        "TestPubPenUnsubscribe.test_unsubscribe_multi_callback_remove_last": {
            "name": "test_unsubscribe_multi_callback_remove_last",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen_multi_callback": [
                    "str"
                ]
            }
        },
        "TestPubPenUnsubscribe.test_unsubscribe_partially_deallocated_handler": {
            "name": "test_unsubscribe_partially_deallocated_handler",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pubpen_partially_dealloc": [
                    "str",
                    "float"
                ]
            }
        }
    }
}
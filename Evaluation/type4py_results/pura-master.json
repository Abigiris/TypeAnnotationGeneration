{
    "pura-master/setup.py": {},
    "pura-master/examples/web_repl_example.py": {
        "Counter.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Counter.increment_by": {
            "name": "increment_by",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        }
    },
    "pura-master/examples/web_view_example.py": {
        "_setup_logging": {
            "name": "_setup_logging",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "Hello.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hello.draw": {
            "name": "draw",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "Clock.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Clock.alarm_time": {
            "name": "alarm_time",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Clock.draw": {
            "name": "draw",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "Arcs.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Arcs.draw": {
            "name": "draw",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "Shapes.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Shapes.draw": {
            "name": "draw",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "Text.__init__": {
            "name": "__init__",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Text.draw": {
            "name": "draw",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "StrokeCaps.__init__": {
            "name": "__init__",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StrokeCaps.draw": {
            "name": "draw",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "Images.__init__": {
            "name": "__init__",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Images.draw": {
            "name": "draw",
            "location": 279,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "Words.__init__": {
            "name": "__init__",
            "location": 308,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Words.draw": {
            "name": "draw",
            "location": 311,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "Words.drawType": {
            "name": "drawType",
            "location": 323,
            "return": [],
            "arguments": {
                "ctx": [],
                "x": []
            }
        },
        "Follow3.__init__": {
            "name": "__init__",
            "location": 343,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Follow3.dragSegment": {
            "name": "dragSegment",
            "location": 350,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "i": [],
                "xin": [],
                "yin": []
            }
        },
        "Follow3.segment": {
            "name": "segment",
            "location": 359,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "x": [],
                "y": [],
                "a": []
            }
        },
        "Follow3.draw": {
            "name": "draw",
            "location": 365,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "Shapes.draw.shape": {
            "name": "shape",
            "location": 141,
            "return": [],
            "arguments": {
                "close": []
            }
        }
    },
    "pura-master/src/pura/_repl.py": {
        "_Completer._get_last_fragment": {
            "name": "_get_last_fragment",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "_Completer.get_matches": {
            "name": "get_matches",
            "location": 29,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Sequence[int]",
                    "Optional[float]"
                ]
            }
        },
        "_ListStream.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stream_name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "_ListStream.write": {
            "name": "write",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "List[int]",
                    "Dict[str, Callable[[str], Any]]",
                    "list",
                    "int"
                ]
            }
        },
        "_ListStream.__enter__": {
            "name": "__enter__",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ListStream.__exit__": {
            "name": "__exit__",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ext_type": [
                    "Iterable[Type]",
                    "bool",
                    "Sequence[str]"
                ],
                "exc_value": [
                    "Iterable[Type]",
                    "bool",
                    "Sequence[str]"
                ],
                "traceback_": [
                    "Iterable[Type]",
                    "bool",
                    "Sequence[str]"
                ]
            }
        },
        "_Message.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "str",
                    "bool",
                    "int",
                    "List[str]"
                ],
                "text": [
                    "str",
                    "bool",
                    "int",
                    "List[str]"
                ]
            }
        },
        "_Message.to_json": {
            "name": "to_json",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Message.from_json": {
            "name": "from_json",
            "location": 74,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "List[str]",
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "tuple"
                ],
                "json_str": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "WebRepl.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "str"
                ]
            }
        },
        "WebRepl._handleClose": {
            "name": "_handleClose",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "peer": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "pura-master/src/pura/_version.py": {},
    "pura-master/src/pura/_web_view.py": {
        "_canvas_color": {
            "name": "_canvas_color",
            "location": 147,
            "return": [
                "int",
                "bool",
                "List[float]"
            ],
            "arguments": {}
        },
        "queue_eval": {
            "name": "queue_eval",
            "location": 154,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "queue_eval_optional": {
            "name": "queue_eval_optional",
            "location": 174,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "KeyboardKey.__eq__": {
            "name": "__eq__",
            "location": 40,
            "return": [
                "str",
                "Dict[str, str]",
                "Sequence[str]",
                "Union[str, bytes]",
                "TextIO"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "Type",
                    "Dict[str, Any]"
                ]
            }
        },
        "KeyboardKey.__ne__": {
            "name": "__ne__",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "KeyboardKey.__lt__": {
            "name": "__lt__",
            "location": 50,
            "return": [
                "str",
                "Dict[str, str]",
                "Sequence[str]",
                "Union[str, bytes]",
                "TextIO"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "Type",
                    "Dict[str, Any]"
                ]
            }
        },
        "KeyboardKey.__str__": {
            "name": "__str__",
            "location": 55,
            "return": [
                "str",
                "bytes",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Color.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Color.js_string": {
            "name": "js_string",
            "location": 114,
            "return": [
                "int",
                "str",
                "float",
                "List[int]",
                "FrozenSet[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "queue_eval.wrapper": {
            "name": "wrapper",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "queue_eval_optional.wrapper": {
            "name": "wrapper",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "self": [
                    "T",
                    "str",
                    "bool"
                ]
            }
        },
        "WebView.__init__": {
            "name": "__init__",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "WebView.width": {
            "name": "width",
            "location": 208,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebView.height": {
            "name": "height",
            "location": 212,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebView.loadImage": {
            "name": "loadImage",
            "location": 220,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "base64_str": [
                    "str"
                ]
            }
        },
        "WebView.unloadImage": {
            "name": "unloadImage",
            "location": 224,
            "return": [
                "float",
                "type",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "bool",
                    "str"
                ]
            }
        },
        "DrawContext.__init__": {
            "name": "__init__",
            "location": 273,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DrawContext._handleClose": {
            "name": "_handleClose",
            "location": 319,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "peer": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "DrawContext._handleDeferredMessage": {
            "name": "_handleDeferredMessage",
            "location": 330,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "int",
                    "Dict[int, int]",
                    "float",
                    "bool",
                    "bytes"
                ]
            }
        },
        "DrawContext.background": {
            "name": "background",
            "location": 407,
            "return": [
                "str",
                "type",
                "Union[str, List[str]]",
                "enum.Enum",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DrawContext._swapBuffer": {
            "name": "_swapBuffer",
            "location": 416,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DrawContext.strokeWeight": {
            "name": "strokeWeight",
            "location": 420,
            "return": [
                "str",
                "Optional[AbstractSet[str]]",
                "Set[str]",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "DrawContext.strokeCap": {
            "name": "strokeCap",
            "location": 424,
            "return": [
                "str",
                "Callable[[KT], VT]",
                "Match"
            ],
            "arguments": {
                "self": [],
                "cap": [
                    "DefaultDict[int, List[Any]]",
                    "OrderedDict",
                    "str",
                    "int"
                ]
            }
        },
        "DrawContext.stroke": {
            "name": "stroke",
            "location": 428,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DrawContext.noStroke": {
            "name": "noStroke",
            "location": 431,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DrawContext.fill": {
            "name": "fill",
            "location": 435,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DrawContext.noFill": {
            "name": "noFill",
            "location": 438,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DrawContext.translate": {
            "name": "translate",
            "location": 442,
            "return": [
                "int",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ],
                "y": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "DrawContext.rotate": {
            "name": "rotate",
            "location": 446,
            "return": [
                "Set[str]",
                "str",
                "set",
                "bool",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "List[T]",
                    "int",
                    "List[int]"
                ]
            }
        },
        "DrawContext.scale": {
            "name": "scale",
            "location": 450,
            "return": [
                "int",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "y": [
                    "List[int]",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "DrawContext.beginShape": {
            "name": "beginShape",
            "location": 458,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DrawContext.endShape": {
            "name": "endShape",
            "location": 464,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "close": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DrawContext.vertex": {
            "name": "vertex",
            "location": 473,
            "return": [
                "int",
                "Mapping[str, str]",
                "Type[T]",
                "Dict[str, Any]",
                "str",
                "List['Product']"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "List[float]"
                ],
                "y": [
                    "int",
                    "float",
                    "List[float]"
                ]
            }
        },
        "DrawContext.line": {
            "name": "line",
            "location": 482,
            "return": [
                "str",
                "Type[T]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "x1": [
                    "int",
                    "float",
                    "Union[int, bool]",
                    "str"
                ],
                "y1": [
                    "int",
                    "float",
                    "Union[int, bool]",
                    "str"
                ],
                "x2": [
                    "int",
                    "float",
                    "Union[int, bool]",
                    "str"
                ],
                "y2": [
                    "int",
                    "float",
                    "Union[int, bool]",
                    "str"
                ]
            }
        },
        "DrawContext.point": {
            "name": "point",
            "location": 490,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int",
                    "List[float]"
                ],
                "y": [
                    "float",
                    "int",
                    "List[float]"
                ]
            }
        },
        "DrawContext.rect": {
            "name": "rect",
            "location": 496,
            "return": [
                "str",
                "Tuple[str]",
                "Type[T]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "float"
                ],
                "b": [
                    "int",
                    "float"
                ],
                "c": [
                    "int",
                    "float"
                ],
                "d": [
                    "int",
                    "float"
                ]
            }
        },
        "DrawContext.ellipse": {
            "name": "ellipse",
            "location": 505,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "Union[int, float]"
                ],
                "y": [
                    "int",
                    "float",
                    "Union[int, float]"
                ],
                "w": [
                    "int",
                    "float",
                    "Union[int, float]"
                ],
                "h": [
                    "int",
                    "float",
                    "Union[int, float]"
                ]
            }
        },
        "DrawContext.arc": {
            "name": "arc",
            "location": 511,
            "return": [
                "str",
                "Tuple[str]",
                "Type[T]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ],
                "w": [
                    "int",
                    "bool",
                    "str",
                    "tuple"
                ],
                "h": [
                    "int",
                    "str"
                ],
                "start": [
                    "int",
                    "bool",
                    "str",
                    "tuple"
                ],
                "stop": [
                    "int",
                    "bool",
                    "str",
                    "tuple"
                ]
            }
        },
        "DrawContext._loadImage": {
            "name": "_loadImage",
            "location": 533,
            "return": [
                "bool",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "str",
                    "dict",
                    "int"
                ],
                "base64_str": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "DrawContext._loadImageAllPeers": {
            "name": "_loadImageAllPeers",
            "location": 543,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "id_": [
                    "str",
                    "List[int]",
                    "Union[int, str]",
                    "Optional[str]"
                ],
                "base64_str": [
                    "str",
                    "List[int]",
                    "Union[int, str]",
                    "Optional[str]"
                ]
            }
        },
        "DrawContext.loadImage": {
            "name": "loadImage",
            "location": 547,
            "return": [
                "Optional[List[str]]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "base64_str": [
                    "str"
                ]
            }
        },
        "DrawContext.unloadImage": {
            "name": "unloadImage",
            "location": 558,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "image": []
            }
        },
        "DrawContext.image": {
            "name": "image",
            "location": 567,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "image_or_base64_str": [
                    "str",
                    "List[str]"
                ],
                "x": [
                    "int",
                    "Union[None, float, int]",
                    "bool",
                    "float"
                ],
                "y": [
                    "int",
                    "Union[None, float, int]",
                    "bool",
                    "float"
                ],
                "w": [
                    "int",
                    "Optional[int]",
                    "Optional[Tuple[float, float]]",
                    "Optional[Union[Any, Any]]",
                    "Optional[str]",
                    "Callable"
                ],
                "h": [
                    "int",
                    "Optional[int]",
                    "Optional[Tuple[float, float]]",
                    "Optional[Union[Any, Any]]",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "DrawContext.text": {
            "name": "text",
            "location": 602,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "int",
                    "float",
                    "str"
                ],
                "x": [
                    "int",
                    "float",
                    "Union[int, bool]",
                    "str"
                ],
                "y": [
                    "int",
                    "float",
                    "Union[int, bool]",
                    "str"
                ]
            }
        },
        "DrawContext.textSize": {
            "name": "textSize",
            "location": 613,
            "return": [
                "Set[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "tuple",
                    "bool",
                    "Optional[int]",
                    "Union[int, None]",
                    "dict",
                    "list"
                ]
            }
        },
        "DrawContext.textFont": {
            "name": "textFont",
            "location": 619,
            "return": [
                "bool",
                "Type",
                "Type[T]"
            ],
            "arguments": {
                "self": [],
                "v": [
                    "bool",
                    "str"
                ]
            }
        },
        "DrawContext.textAlign": {
            "name": "textAlign",
            "location": 623,
            "return": [
                "bool",
                "Type[BaseException]",
                "Type"
            ],
            "arguments": {
                "self": [],
                "align_x": [
                    "int",
                    "Iterable[T_co]",
                    "str"
                ],
                "align_y": [
                    "int",
                    "Iterable[T_co]",
                    "str"
                ]
            }
        },
        "DrawContext.smooth": {
            "name": "smooth",
            "location": 630,
            "return": [
                "type",
                "Optional[T]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DrawContext.noSmooth": {
            "name": "noSmooth",
            "location": 634,
            "return": [
                "Optional[T]",
                "type",
                "Callable",
                "Optional[BaseException]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "DrawContext._pushContext": {
            "name": "_pushContext",
            "location": 639,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "DrawContext._popContext": {
            "name": "_popContext",
            "location": 643,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "DrawContext.pushContext": {
            "name": "pushContext",
            "location": 647,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WebViewMixin.__init__": {
            "name": "__init__",
            "location": 667,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WebViewMixin.draw": {
            "name": "draw",
            "location": 681,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        }
    },
    "pura-master/src/pura/_web_view_server.py": {
        "WebViewServer.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WebViewServer.get_blueprint": {
            "name": "get_blueprint",
            "location": 25,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "WebViewServer._add_webview_message": {
            "name": "_add_webview_message",
            "location": 102,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "ctx": [
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "WebViewServer._add_remote_message": {
            "name": "_add_remote_message",
            "location": 123,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "WebViewServer._handleClose": {
            "name": "_handleClose",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "peer": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "pura-master/src/pura/__init__.py": {},
    "pura-master/tests/test_canvas_color.py": {
        "test_color": {
            "name": "test_color",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "test_input": [
                    "List[str]",
                    "str"
                ],
                "expected_rgba": [
                    "str",
                    "Callable",
                    "List[Dict[str, str]]",
                    "int",
                    "List[int]"
                ]
            }
        },
        "test_color_hashable": {
            "name": "test_color_hashable",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_color_alpha_mix": {
            "name": "test_color_alpha_mix",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_color_js_string": {
            "name": "test_color_js_string",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "test_input": [
                    "str",
                    "List[str]"
                ],
                "expected": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_canvas_color": {
            "name": "test_canvas_color",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "test_input": [
                    "List[str]",
                    "str"
                ],
                "expected": [
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "pura-master/tests/test_keyboard_key.py": {
        "test_key": {
            "name": "test_key",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pura-master/tests/__init__.py": {}
}
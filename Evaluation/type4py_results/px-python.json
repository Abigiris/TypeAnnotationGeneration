{
    "px-python/setup.py": {},
    "px-python/devbin/benchmark_ipcmap.py": {
        "get_most_common_pid": {
            "name": "get_most_common_pid",
            "location": 32,
            "return": [],
            "arguments": {
                "files": []
            }
        },
        "get_timings": {
            "name": "get_timings",
            "location": 42,
            "return": [],
            "arguments": {
                "file": [],
                "pid": []
            }
        },
        "print_statistics": {
            "name": "print_statistics",
            "location": 63,
            "return": [],
            "arguments": {
                "name": [],
                "values": []
            }
        },
        "main": {
            "name": "main",
            "location": 71,
            "return": [],
            "arguments": {
                "lsof_file": []
            }
        }
    },
    "px-python/devbin/benchmark_proc_get_all.py": {
        "main": {
            "name": "main",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "px-python/devbin/stop-using-kill-9.py": {
        "receiveSignal": {
            "name": "receiveSignal",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "signalNumber": [
                    "str",
                    "bool",
                    "Optional[BaseException]",
                    "int"
                ],
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "px-python/px/px.py": {
        "install": {
            "name": "install",
            "location": 66,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "argv": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "configureLogging": {
            "name": "configureLogging",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "loglevel": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "stringIO": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "handleLogMessages": {
            "name": "handleLogMessages",
            "location": 122,
            "return": [
                "bytes",
                "float"
            ],
            "arguments": {
                "messages": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_main": {
            "name": "_main",
            "location": 150,
            "return": [
                "int",
                "Type",
                "bool"
            ],
            "arguments": {
                "argv": [
                    "List[str]",
                    "int",
                    "list",
                    "str",
                    "range",
                    "List[int]"
                ]
            }
        }
    },
    "px-python/px/px_category_bar.py": {
        "cluster_processes": {
            "name": "cluster_processes",
            "location": 12,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "all_processes": [
                    "int",
                    "Optional[Union[int, str]]",
                    "str",
                    "Callable"
                ],
                "get_category": [
                    "str",
                    "float",
                    "Callable",
                    "Optional[int]"
                ],
                "get_value": [
                    "int",
                    "bool",
                    "T",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "render_bar": {
            "name": "render_bar",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "bar_length": [
                    "str",
                    "list",
                    "List[str]",
                    "bytes",
                    "Dict[str, str]",
                    "int"
                ],
                "names_and_numbers": [
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "ram_by_program": {
            "name": "ram_by_program",
            "location": 93,
            "return": [
                "Callable",
                "list"
            ],
            "arguments": {
                "length": [
                    "int",
                    "Union[str, float]",
                    "List[bytes]",
                    "IO[bytes]",
                    "type",
                    "Union[int, slice]"
                ],
                "all_processes": [
                    "int",
                    "Union[str, float]",
                    "List[bytes]",
                    "IO[bytes]",
                    "type",
                    "Union[int, slice]"
                ]
            }
        },
        "ram_by_user": {
            "name": "ram_by_user",
            "location": 104,
            "return": [
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "length": [
                    "int",
                    "float",
                    "str"
                ],
                "all_processes": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "create_cpu_getter": {
            "name": "create_cpu_getter",
            "location": 115,
            "return": [
                "Dict[str, int]",
                "dict",
                "str",
                "float",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "all_processes": [
                    "Type[T]",
                    "bool",
                    "Dict[str, bool]",
                    "List[Dict[str, Any]]",
                    "Type[tuple]",
                    "Callable[[Any], T]",
                    "int"
                ]
            }
        },
        "cpu_by_program": {
            "name": "cpu_by_program",
            "location": 131,
            "return": [
                "Callable",
                "list"
            ],
            "arguments": {
                "length": [
                    "int",
                    "bytes",
                    "List[str]"
                ],
                "all_processes": [
                    "int",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "cpu_by_user": {
            "name": "cpu_by_user",
            "location": 142,
            "return": [
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "length": [
                    "int"
                ],
                "all_processes": [
                    "int"
                ]
            }
        }
    },
    "px-python/px/px_commandline.py": {
        "to_array": {
            "name": "to_array",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "commandline": [
                    "str",
                    "bool",
                    "int",
                    "Optional[Union[Any, Any]]",
                    "Callable"
                ]
            }
        },
        "is_human_friendly": {
            "name": "is_human_friendly",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "command": [
                    "str",
                    "int"
                ]
            }
        },
        "get_app_name_prefix": {
            "name": "get_app_name_prefix",
            "location": 49,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "commandline": [
                    "Union[str, IO]",
                    "Pattern",
                    "Iterable[str]",
                    "str"
                ]
            }
        },
        "try_clarify_electron": {
            "name": "try_clarify_electron",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "commandline": [
                    "str"
                ]
            }
        },
        "get_command": {
            "name": "get_command",
            "location": 79,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "commandline": [
                    "str",
                    "bytes"
                ]
            }
        },
        "get_python_command": {
            "name": "get_python_command",
            "location": 171,
            "return": [
                "str"
            ],
            "arguments": {
                "commandline": [
                    "int",
                    "str"
                ]
            }
        },
        "get_sudo_command": {
            "name": "get_sudo_command",
            "location": 213,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "commandline": [
                    "str",
                    "bool"
                ]
            }
        },
        "prettify_fully_qualified_java_class": {
            "name": "prettify_fully_qualified_java_class",
            "location": 225,
            "return": [
                "Optional[Any]",
                "bool"
            ],
            "arguments": {
                "class_name": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "get_java_command": {
            "name": "get_java_command",
            "location": 237,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "commandline": [
                    "int",
                    "str"
                ]
            }
        },
        "get_generic_script_command": {
            "name": "get_generic_script_command",
            "location": 321,
            "return": [
                "str"
            ],
            "arguments": {
                "commandline": [
                    "int",
                    "str"
                ],
                "ignore_switches": [
                    "str",
                    "bool",
                    "int",
                    "dict",
                    "List[str]"
                ]
            }
        }
    },
    "px-python/px/px_cpuinfo.py": {
        "get_core_count": {
            "name": "get_core_count",
            "location": 13,
            "return": [
                "str",
                "Type[T]",
                "bool",
                "OrderedDict"
            ],
            "arguments": {}
        },
        "get_core_count_from_proc_cpuinfo": {
            "name": "get_core_count_from_proc_cpuinfo",
            "location": 34,
            "return": [
                "Optional[bool]",
                "int",
                "Optional[dict]",
                "Optional[str]"
            ],
            "arguments": {
                "proc_cpuinfo": [
                    "str",
                    "IO[str]",
                    "Optional[str]"
                ]
            }
        },
        "get_core_count_from_sysctl": {
            "name": "get_core_count_from_sysctl",
            "location": 73,
            "return": [
                "Optional[bool]",
                "Optional[bytes]",
                "Optional[str]",
                "Optional[dict]",
                "Optional[List[Any]]",
                "int"
            ],
            "arguments": {}
        },
        "parse_sysctl_output": {
            "name": "parse_sysctl_output",
            "location": 93,
            "return": [
                "int",
                "float",
                "List[str]",
                "str"
            ],
            "arguments": {
                "sysctl_lines": [
                    "Iterable[bytes]",
                    "bool",
                    "str",
                    "list",
                    "List[str]",
                    "Union[List[str], str]"
                ]
            }
        }
    },
    "px-python/px/px_cwdfriends.py": {
        "_strip_leading_dash": {
            "name": "_strip_leading_dash",
            "location": 8,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "process": [
                    "str"
                ]
            }
        },
        "PxCwdFriends.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "process": [
                    "str",
                    "bytes",
                    "bool",
                    "Sequence[str]"
                ],
                "all_processes": [
                    "int",
                    "bool"
                ],
                "all_files": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "px-python/px/px_exec_util.py": {
        "run": {
            "name": "run",
            "location": 17,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "command": [
                    "str",
                    "List[str]"
                ],
                "check_exitcode": [
                    "str",
                    "int",
                    "bool",
                    "list"
                ]
            }
        }
    },
    "px-python/px/px_file.py": {
        "resolve_endpoint": {
            "name": "resolve_endpoint",
            "location": 161,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "endpoint": [
                    "slice",
                    "int",
                    "str"
                ]
            }
        },
        "call_lsof": {
            "name": "call_lsof",
            "location": 195,
            "return": [
                "bool",
                "str",
                "Exception"
            ],
            "arguments": {}
        },
        "lsof_to_files": {
            "name": "lsof_to_files",
            "location": 206,
            "return": [
                "str"
            ],
            "arguments": {
                "lsof": [
                    "str",
                    "Union[Literal, str]"
                ]
            }
        },
        "get_all": {
            "name": "get_all",
            "location": 275,
            "return": [
                "bool",
                "Tuple[int, int]",
                "Optional[Sequence[str]]",
                "str",
                "Callable"
            ],
            "arguments": {}
        },
        "PxFile.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pid": [
                    "int",
                    "bool",
                    "float"
                ],
                "filetype": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "PxFile.__repr__": {
            "name": "__repr__",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PxFile.__eq__": {
            "name": "__eq__",
            "location": 29,
            "return": [
                "Dict[str, Any]",
                "str",
                "Dict[str, Dict[str, Any]]",
                "dict",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        },
        "PxFile.__ne__": {
            "name": "__ne__",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "PxFile.__hash__": {
            "name": "__hash__",
            "location": 35,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PxFile.__str__": {
            "name": "__str__",
            "location": 38,
            "return": [
                "Optional[str]",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PxFile._resolve_name": {
            "name": "_resolve_name",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PxFile.device_number": {
            "name": "device_number",
            "location": 67,
            "return": [
                "Optional[str]",
                "type",
                "Optional[List[Any]]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "PxFile.fifo_id": {
            "name": "fifo_id",
            "location": 79,
            "return": [
                "Optional[str]",
                "str",
                "Optional[BaseException]",
                "Optional[Iterable[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PxFile.get_endpoints": {
            "name": "get_endpoints",
            "location": 99,
            "return": [
                "Optional[bool]",
                "Optional[int]",
                "dict",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PxFileBuilder.__init__": {
            "name": "__init__",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PxFileBuilder.build": {
            "name": "build",
            "location": 144,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PxFileBuilder.__repr__": {
            "name": "__repr__",
            "location": 157,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "px-python/px/px_install.py": {
        "install": {
            "name": "install",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "src": [
                    "str",
                    "list"
                ],
                "dest": [
                    "str",
                    "bool",
                    "int",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "_install": {
            "name": "_install",
            "location": 22,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "src": [
                    "str"
                ],
                "dest": [
                    "str"
                ]
            }
        }
    },
    "px-python/px/px_ioload.py": {
        "parse_netstat_ib_output": {
            "name": "parse_netstat_ib_output",
            "location": 65,
            "return": [],
            "arguments": {
                "netstat_ib_output": []
            }
        },
        "parse_iostat_output": {
            "name": "parse_iostat_output",
            "location": 87,
            "return": [],
            "arguments": {
                "iostat_output": []
            }
        },
        "parse_proc_net_dev": {
            "name": "parse_proc_net_dev",
            "location": 114,
            "return": [],
            "arguments": {
                "proc_net_dev_contents": []
            }
        },
        "parse_proc_diskstats": {
            "name": "parse_proc_diskstats",
            "location": 136,
            "return": [],
            "arguments": {
                "proc_diskstats_contents": []
            }
        },
        "sample_network_interfaces": {
            "name": "sample_network_interfaces",
            "location": 172,
            "return": [],
            "arguments": {}
        },
        "sample_drives": {
            "name": "sample_drives",
            "location": 187,
            "return": [],
            "arguments": {}
        },
        "update": {
            "name": "update",
            "location": 356,
            "return": [],
            "arguments": {}
        },
        "get_load_string": {
            "name": "get_load_string",
            "location": 360,
            "return": [],
            "arguments": {}
        },
        "Sample.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "bytecount": []
            }
        },
        "Sample.__repr__": {
            "name": "__repr__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sample.__eq__": {
            "name": "__eq__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "o": []
            }
        },
        "SubsystemStat.__init__": {
            "name": "__init__",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "throughput": [],
                "high_watermark": []
            }
        },
        "SystemState.__init__": {
            "name": "__init__",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PxIoLoad.__init__": {
            "name": "__init__",
            "location": 215,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PxIoLoad.update_baseline_from_system": {
            "name": "update_baseline_from_system",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "system_state": []
            }
        },
        "PxIoLoad.update": {
            "name": "update",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PxIoLoad.get_load_string": {
            "name": "get_load_string",
            "location": 313,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "px-python/px/px_ipc_map.py": {
        "create_pid2process": {
            "name": "create_pid2process",
            "location": 307,
            "return": [],
            "arguments": {
                "processes": []
            }
        },
        "add_arraymapping": {
            "name": "add_arraymapping",
            "location": 320,
            "return": [],
            "arguments": {
                "mapping": [],
                "key": [],
                "value": []
            }
        },
        "PeerProcess.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "pid": []
            }
        },
        "PeerProcess.__repr__": {
            "name": "__repr__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PeerProcess.__hash__": {
            "name": "__hash__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PeerProcess.__str__": {
            "name": "__str__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IpcMap.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "process": [],
                "files": [],
                "processes": [],
                "is_root": []
            }
        },
        "IpcMap._create_fds": {
            "name": "_create_fds",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "is_root": []
            }
        },
        "IpcMap._create_mapping": {
            "name": "_create_mapping",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IpcMap._create_indices": {
            "name": "_create_indices",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IpcMap._get_other_end_pids": {
            "name": "_get_other_end_pids",
            "location": 224,
            "return": [],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "IpcMap.add_ipc_entry": {
            "name": "add_ipc_entry",
            "location": 285,
            "return": [],
            "arguments": {
                "self": [],
                "process": [],
                "file": []
            }
        },
        "IpcMap.keys": {
            "name": "keys",
            "location": 294,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "IpcMap.__getitem__": {
            "name": "__getitem__",
            "location": 300,
            "return": [],
            "arguments": {
                "self": [],
                "process": []
            }
        }
    },
    "px-python/px/px_launchcounter.py": {
        "render_launch_tuple": {
            "name": "render_launch_tuple",
            "location": 10,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "launch_tuple": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "_get_minus_max_score": {
            "name": "_get_minus_max_score",
            "location": 19,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "tuples_list": [
                    "list",
                    "List[str]",
                    "List[Dict]",
                    "Iterable[str]",
                    "List[int]",
                    "bool",
                    "List[Dict[str, Any]]",
                    "List[List[str]]"
                ]
            }
        },
        "sort_launchers_list": {
            "name": "sort_launchers_list",
            "location": 26,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "launchers_list": [
                    "list",
                    "Union[str, List[str], None]",
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "_strip_parentheses": {
            "name": "_strip_parentheses",
            "location": 32,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "s": [
                    "AnyStr",
                    "Union[bytes, bytearray]",
                    "Iterable[T]",
                    "bool",
                    "str"
                ]
            }
        },
        "_list_new_launches": {
            "name": "_list_new_launches",
            "location": 42,
            "return": [
                "Sequence[str]",
                "Iterable[str]",
                "int"
            ],
            "arguments": {
                "before": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool",
                    "List[Dict]"
                ],
                "after": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool",
                    "List[Dict]"
                ]
            }
        },
        "_to_tuple_list": {
            "name": "_to_tuple_list",
            "location": 66,
            "return": [
                "List[Dict]",
                "str",
                "List[str]",
                "List[int]",
                "List[List[Any]]",
                "Sequence[str]"
            ],
            "arguments": {
                "launcher_list": [
                    "list",
                    "Union[str, List[str]]",
                    "List[dict]",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "count": [
                    "list",
                    "Union[str, List[str]]",
                    "List[dict]",
                    "Dict[str, str]",
                    "List[str]"
                ]
            }
        },
        "_merge_tuple_lists": {
            "name": "_merge_tuple_lists",
            "location": 78,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "tl1": [
                    "list",
                    "List[int]",
                    "int",
                    "Sequence[int]",
                    "bool",
                    "str"
                ],
                "tl2": [
                    "list",
                    "List[int]",
                    "int",
                    "Sequence[int]",
                    "bool",
                    "str"
                ]
            }
        },
        "_callchain": {
            "name": "_callchain",
            "location": 100,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "process": [
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "Launchcounter.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Launchcounter._register_launches": {
            "name": "_register_launches",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_processes": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "float"
                ]
            }
        },
        "Launchcounter.update": {
            "name": "update",
            "location": 127,
            "return": [
                "str",
                "Set[str]",
                "DefaultDict"
            ],
            "arguments": {
                "self": [],
                "procs_snapshot": [
                    "bool",
                    "str"
                ]
            }
        },
        "Launchcounter._coalesce_launchers": {
            "name": "_coalesce_launchers",
            "location": 138,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Launchcounter.get_screen_lines": {
            "name": "get_screen_lines",
            "location": 157,
            "return": [
                "str",
                "Sequence[str]",
                "Set[str]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "px-python/px/px_load.py": {
        "average_to_level": {
            "name": "average_to_level",
            "location": 20,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "average": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ],
                "peak": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        },
        "averages_to_levels": {
            "name": "averages_to_levels",
            "location": 25,
            "return": [
                "Tuple[int, int]",
                "int"
            ],
            "arguments": {
                "avg0": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ],
                "avg1": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ],
                "avg2": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        },
        "levels_to_graph": {
            "name": "levels_to_graph",
            "location": 44,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "levels": [
                    "int"
                ]
            }
        },
        "get_load_values": {
            "name": "get_load_values",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "get_load_string": {
            "name": "get_load_string",
            "location": 87,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "load_values": [
                    "str",
                    "int",
                    "Optional[int]",
                    "List[Tuple[int, int]]",
                    "Optional[str]"
                ]
            }
        }
    },
    "px-python/px/px_loginhistory.py": {
        "get_users_at": {
            "name": "get_users_at",
            "location": 58,
            "return": [
                "Iterable[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "timestamp": [
                    "Iterable[float]",
                    "str",
                    "List[T]",
                    "Optional[Set[str]]"
                ],
                "last_output": [
                    "Iterable",
                    "bool",
                    "Sequence[datetime.datetime]",
                    "float",
                    "Optional[float]",
                    "Iterable[str]",
                    "List[str]"
                ],
                "now": [
                    "int",
                    "datetime.datetime",
                    "str",
                    "Optional[datetime.tzinfo]",
                    "bool"
                ]
            }
        },
        "call_last": {
            "name": "call_last",
            "location": 131,
            "return": [
                "Optional[\"TreeNode\"]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {}
        },
        "_to_timestamp": {
            "name": "_to_timestamp",
            "location": 138,
            "return": [
                "int",
                "str",
                "datetime.datetime",
                "datetime.timedelta",
                "float"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "now": [
                    "str",
                    "datetime.datetime"
                ]
            }
        },
        "_to_timedelta": {
            "name": "_to_timedelta",
            "location": 177,
            "return": [
                "int",
                "float",
                "str",
                "datetime.datetime",
                "datetime.timedelta"
            ],
            "arguments": {
                "string": [
                    "str",
                    "Pattern"
                ]
            }
        }
    },
    "px-python/px/px_meminfo.py": {
        "get_meminfo": {
            "name": "get_meminfo",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "_get_ram_numbers": {
            "name": "_get_ram_numbers",
            "location": 51,
            "return": [
                "str",
                "Type[T]",
                "bool",
                "OrderedDict"
            ],
            "arguments": {}
        },
        "_update_from_meminfo": {
            "name": "_update_from_meminfo",
            "location": 73,
            "return": [
                "str",
                "Callable[[], str]",
                "int"
            ],
            "arguments": {
                "base": [
                    "str",
                    "bool",
                    "dict"
                ],
                "line": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "_get_ram_numbers_from_proc": {
            "name": "_get_ram_numbers_from_proc",
            "location": 82,
            "return": [
                "Optional[bytes]",
                "Optional[List[Any]]",
                "Optional[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "proc_meminfo": [
                    "str",
                    "IO[str]",
                    "Optional[str]"
                ]
            }
        },
        "_get_ram_numbers_macos": {
            "name": "_get_ram_numbers_macos",
            "location": 143,
            "return": [
                "Optional[int]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "_get_vmstat_output_lines": {
            "name": "_get_vmstat_output_lines",
            "location": 159,
            "return": [
                "bool",
                "float",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "_get_used_swap_bytes_sysctl": {
            "name": "_get_used_swap_bytes_sysctl",
            "location": 170,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "_update_if_prefix": {
            "name": "_update_if_prefix",
            "location": 179,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "base": [
                    "List[str]",
                    "int",
                    "str"
                ],
                "line": [
                    "str",
                    "List[str]"
                ],
                "prefix": [
                    "str",
                    "float",
                    "bytes"
                ]
            }
        },
        "_get_ram_numbers_from_vm_stat_output": {
            "name": "_get_ram_numbers_from_vm_stat_output",
            "location": 188,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[Dict]"
            ],
            "arguments": {
                "vm_stat_lines": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "px-python/px/px_pager.py": {
        "_pump_info_to_fd": {
            "name": "_pump_info_to_fd",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "with_fileno": [
                    "str",
                    "bytes"
                ],
                "process": [
                    "str",
                    "int",
                    "Callable",
                    "bool"
                ],
                "processes": [
                    "str",
                    "int",
                    "Callable",
                    "bool"
                ]
            }
        },
        "which": {
            "name": "which",
            "location": 51,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "program": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "to_command_line": {
            "name": "to_command_line",
            "location": 71,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "launch_pager": {
            "name": "launch_pager",
            "location": 84,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "page_process_info": {
            "name": "page_process_info",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "process": [
                    "subprocess.Popen",
                    "...",
                    "int",
                    "Dict[int, Dict[int, Any]]",
                    "Callable[[], None]"
                ],
                "processes": [
                    "subprocess.Popen",
                    "...",
                    "int",
                    "Dict[int, Dict[int, Any]]",
                    "Callable[[], None]"
                ]
            }
        },
        "which.is_exe": {
            "name": "is_exe",
            "location": 55,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "fpath": [
                    "str"
                ]
            }
        }
    },
    "px-python/px/px_poller.py": {
        "PxPoller.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "poll_complete_notification_fd": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "PxPoller.pause_process_updates_a_bit": {
            "name": "pause_process_updates_a_bit",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PxPoller.start": {
            "name": "start",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PxPoller.poll_once": {
            "name": "poll_once",
            "location": 66,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PxPoller.poller": {
            "name": "poller",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PxPoller.get_all_processes": {
            "name": "get_all_processes",
            "location": 114,
            "return": [
                "str",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "PxPoller.get_ioload_string": {
            "name": "get_ioload_string",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PxPoller.get_launchcounter_lines": {
            "name": "get_launchcounter_lines",
            "location": 122,
            "return": [
                "str",
                "float",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PxPoller.get_meminfo": {
            "name": "get_meminfo",
            "location": 126,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PxPoller.get_loadstring": {
            "name": "get_loadstring",
            "location": 130,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "px-python/px/px_process.py": {
        "_parse_time": {
            "name": "_parse_time",
            "location": 48,
            "return": [],
            "arguments": {
                "time_s": []
            }
        },
        "parse_time": {
            "name": "parse_time",
            "location": 305,
            "return": [],
            "arguments": {
                "timestring": []
            }
        },
        "uid_to_username": {
            "name": "uid_to_username",
            "location": 332,
            "return": [],
            "arguments": {
                "uid": []
            }
        },
        "ps_line_to_process": {
            "name": "ps_line_to_process",
            "location": 345,
            "return": [],
            "arguments": {
                "ps_line": [],
                "now": []
            }
        },
        "create_kernel_process": {
            "name": "create_kernel_process",
            "location": 364,
            "return": [],
            "arguments": {
                "now": []
            }
        },
        "resolve_links": {
            "name": "resolve_links",
            "location": 388,
            "return": [],
            "arguments": {
                "processes": [],
                "now": []
            }
        },
        "remove_process_and_descendants": {
            "name": "remove_process_and_descendants",
            "location": 415,
            "return": [],
            "arguments": {
                "processes": [],
                "pid": []
            }
        },
        "get_all": {
            "name": "get_all",
            "location": 427,
            "return": [],
            "arguments": {}
        },
        "order_best_last": {
            "name": "order_best_last",
            "location": 475,
            "return": [],
            "arguments": {
                "processes": []
            }
        },
        "order_best_first": {
            "name": "order_best_first",
            "location": 480,
            "return": [],
            "arguments": {
                "processes": []
            }
        },
        "seconds_to_str": {
            "name": "seconds_to_str",
            "location": 487,
            "return": [],
            "arguments": {
                "seconds": []
            }
        },
        "PxProcess.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "cmdline": [],
                "pid": [],
                "rss_kb": [],
                "start_time_string": [],
                "username": [],
                "now": [],
                "ppid": [],
                "memory_percent": [],
                "cpu_percent": [],
                "cpu_time": []
            }
        },
        "PxProcess.__repr__": {
            "name": "__repr__",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PxProcess.__str__": {
            "name": "__str__",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PxProcess.__eq__": {
            "name": "__eq__",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PxProcess.__ne__": {
            "name": "__ne__",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PxProcess.__hash__": {
            "name": "__hash__",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PxProcess._recompute_score": {
            "name": "_recompute_score",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PxProcess.set_cpu_time_seconds": {
            "name": "set_cpu_time_seconds",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "seconds": []
            }
        },
        "PxProcess.match": {
            "name": "match",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "string": [],
                "require_exact_user": []
            }
        },
        "PxProcess.get_command_line_array": {
            "name": "get_command_line_array",
            "location": 219,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PxProcess._get_command": {
            "name": "_get_command",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PxProcess.get_sudo_user": {
            "name": "get_sudo_user",
            "location": 232,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PxProcess.is_alive": {
            "name": "is_alive",
            "location": 241,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PxProcessBuilder.__init__": {
            "name": "__init__",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PxProcessBuilder.__repr__": {
            "name": "__repr__",
            "location": 269,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PxProcessBuilder.build": {
            "name": "build",
            "location": 285,
            "return": [],
            "arguments": {
                "self": [],
                "now": []
            }
        }
    },
    "px-python/px/px_processinfo.py": {
        "println": {
            "name": "println",
            "location": 23,
            "return": [],
            "arguments": {
                "fd": [],
                "string": []
            }
        },
        "find_process_by_pid": {
            "name": "find_process_by_pid",
            "location": 27,
            "return": [],
            "arguments": {
                "pid": [],
                "processes": []
            }
        },
        "print_command_line": {
            "name": "print_command_line",
            "location": 37,
            "return": [],
            "arguments": {
                "fd": [],
                "process": []
            }
        },
        "print_process_subtree": {
            "name": "print_process_subtree",
            "location": 52,
            "return": [],
            "arguments": {
                "fd": [],
                "process": [],
                "indentation": [],
                "lines": []
            }
        },
        "print_process_tree": {
            "name": "print_process_tree",
            "location": 65,
            "return": [],
            "arguments": {
                "fd": [],
                "process": []
            }
        },
        "to_relative_start_string": {
            "name": "to_relative_start_string",
            "location": 125,
            "return": [],
            "arguments": {
                "base": [],
                "relative": []
            }
        },
        "get_closest_starts": {
            "name": "get_closest_starts",
            "location": 138,
            "return": [],
            "arguments": {
                "process": [],
                "all_processes": []
            }
        },
        "print_processes_started_at_the_same_time": {
            "name": "print_processes_started_at_the_same_time",
            "location": 176,
            "return": [],
            "arguments": {
                "fd": [],
                "process": [],
                "all_processes": []
            }
        },
        "print_users_when_process_started": {
            "name": "print_users_when_process_started",
            "location": 182,
            "return": [],
            "arguments": {
                "fd": [],
                "process": []
            }
        },
        "to_ipc_lines": {
            "name": "to_ipc_lines",
            "location": 196,
            "return": [],
            "arguments": {
                "ipc_map": []
            }
        },
        "print_cwd_friends": {
            "name": "print_cwd_friends",
            "location": 210,
            "return": [],
            "arguments": {
                "fd": [],
                "process": [],
                "all_processes": [],
                "all_files": []
            }
        },
        "print_fds": {
            "name": "print_fds",
            "location": 234,
            "return": [],
            "arguments": {
                "fd": [],
                "process": [],
                "processes": []
            }
        },
        "print_start_time": {
            "name": "print_start_time",
            "location": 301,
            "return": [],
            "arguments": {
                "fd": [],
                "process": []
            }
        },
        "print_pid_info": {
            "name": "print_pid_info",
            "location": 326,
            "return": [],
            "arguments": {
                "fd": [],
                "pid": []
            }
        },
        "print_process_info": {
            "name": "print_process_info",
            "location": 336,
            "return": [],
            "arguments": {
                "fd": [],
                "process": [],
                "processes": []
            }
        }
    },
    "px-python/px/px_process_menu.py": {
        "get_header_line": {
            "name": "get_header_line",
            "location": 27,
            "return": [],
            "arguments": {
                "process": []
            }
        },
        "kill": {
            "name": "kill",
            "location": 34,
            "return": [],
            "arguments": {
                "process": [],
                "signo": []
            }
        },
        "sudo_kill": {
            "name": "sudo_kill",
            "location": 51,
            "return": [],
            "arguments": {
                "process": [],
                "signo": []
            }
        },
        "PxProcessMenu.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "process": []
            }
        },
        "PxProcessMenu.refresh_display": {
            "name": "refresh_display",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PxProcessMenu.await_and_handle_user_input": {
            "name": "await_and_handle_user_input",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PxProcessMenu.start": {
            "name": "start",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PxProcessMenu.page_process_info": {
            "name": "page_process_info",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PxProcessMenu.await_death": {
            "name": "await_death",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "PxProcessMenu.kill_process": {
            "name": "kill_process",
            "location": 215,
            "return": [],
            "arguments": {
                "self": [],
                "signal_process": []
            }
        },
        "PxProcessMenu.execute_menu_entry": {
            "name": "execute_menu_entry",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "px-python/px/px_terminal.py": {
        "disable_color": {
            "name": "disable_color",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "sigwinch_handler": {
            "name": "sigwinch_handler",
            "location": 73,
            "return": [],
            "arguments": {
                "_signum": [],
                "_frame": []
            }
        },
        "read_select": {
            "name": "read_select",
            "location": 100,
            "return": [],
            "arguments": {
                "fds": [],
                "timeout_seconds": []
            }
        },
        "getch": {
            "name": "getch",
            "location": 121,
            "return": [],
            "arguments": {
                "timeout_seconds": [],
                "fd": []
            }
        },
        "get_window_size": {
            "name": "get_window_size",
            "location": 153,
            "return": [],
            "arguments": {}
        },
        "raw_lines_to_screen_lines": {
            "name": "raw_lines_to_screen_lines",
            "location": 185,
            "return": [],
            "arguments": {
                "raw_lines": [],
                "columns": []
            }
        },
        "filter_out_unchanged_screen_lines": {
            "name": "filter_out_unchanged_screen_lines",
            "location": 197,
            "return": [],
            "arguments": {
                "all_screen_lines": [],
                "columns": []
            }
        },
        "draw_screen_lines": {
            "name": "draw_screen_lines",
            "location": 221,
            "return": [],
            "arguments": {
                "lines": [],
                "columns": []
            }
        },
        "width_specifier": {
            "name": "width_specifier",
            "location": 264,
            "return": [],
            "arguments": {
                "width": [],
                "right_align": []
            }
        },
        "format_with_widths": {
            "name": "format_with_widths",
            "location": 276,
            "return": [],
            "arguments": {
                "widths": [],
                "strings": []
            }
        },
        "to_screen_lines": {
            "name": "to_screen_lines",
            "location": 315,
            "return": [],
            "arguments": {
                "procs": [],
                "row_to_highlight": [],
                "highlight_heading": [],
                "with_username": []
            }
        },
        "inverse_video": {
            "name": "inverse_video",
            "location": 456,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "bold": {
            "name": "bold",
            "location": 462,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "faint": {
            "name": "faint",
            "location": 468,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "underline": {
            "name": "underline",
            "location": 474,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "red": {
            "name": "red",
            "location": 480,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "yellow": {
            "name": "yellow",
            "location": 486,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "green": {
            "name": "green",
            "location": 492,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "blue": {
            "name": "blue",
            "location": 498,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "get_string_of_length": {
            "name": "get_string_of_length",
            "location": 504,
            "return": [],
            "arguments": {
                "string": [],
                "length": []
            }
        },
        "_tokenize": {
            "name": "_tokenize",
            "location": 521,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "crop_ansi_string_at_length": {
            "name": "crop_ansi_string_at_length",
            "location": 558,
            "return": [],
            "arguments": {
                "string": [],
                "length": []
            }
        },
        "visual_length": {
            "name": "visual_length",
            "location": 597,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "_enter_fullscreen": {
            "name": "_enter_fullscreen",
            "location": 611,
            "return": [],
            "arguments": {}
        },
        "_exit_fullscreen": {
            "name": "_exit_fullscreen",
            "location": 624,
            "return": [],
            "arguments": {}
        },
        "ConsumableString.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "ConsumableString.__len__": {
            "name": "__len__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConsumableString.consume": {
            "name": "consume",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "to_consume": []
            }
        },
        "fullscreen_display.__enter__": {
            "name": "__enter__",
            "location": 642,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "fullscreen_display.__exit__": {
            "name": "__exit__",
            "location": 645,
            "return": [],
            "arguments": {
                "self": [],
                "exception_type": [],
                "exception_value": [],
                "exception_traceback": []
            }
        },
        "normal_display.__enter__": {
            "name": "__enter__",
            "location": 658,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "normal_display.__exit__": {
            "name": "__exit__",
            "location": 661,
            "return": [],
            "arguments": {
                "self": [],
                "exception_type": [],
                "exception_value": [],
                "exception_traceback": []
            }
        }
    },
    "px-python/px/px_top.py": {
        "adjust_cpu_times": {
            "name": "adjust_cpu_times",
            "location": 51,
            "return": [],
            "arguments": {
                "baseline": [],
                "current": []
            }
        },
        "get_notnone_cpu_time_seconds": {
            "name": "get_notnone_cpu_time_seconds",
            "location": 97,
            "return": [],
            "arguments": {
                "proc": []
            }
        },
        "get_notnone_memory_percent": {
            "name": "get_notnone_memory_percent",
            "location": 104,
            "return": [],
            "arguments": {
                "proc": []
            }
        },
        "sort_by_cpu_usage": {
            "name": "sort_by_cpu_usage",
            "location": 111,
            "return": [],
            "arguments": {
                "toplist": []
            }
        },
        "get_toplist": {
            "name": "get_toplist",
            "location": 130,
            "return": [],
            "arguments": {
                "baseline": [],
                "current": [],
                "by_memory": []
            }
        },
        "writebytes": {
            "name": "writebytes",
            "location": 149,
            "return": [],
            "arguments": {
                "bytestring": []
            }
        },
        "get_line_to_highlight": {
            "name": "get_line_to_highlight",
            "location": 153,
            "return": [],
            "arguments": {
                "toplist": [],
                "max_process_count": []
            }
        },
        "generate_header": {
            "name": "generate_header",
            "location": 198,
            "return": [],
            "arguments": {
                "filtered_processes": [],
                "poller": [],
                "screen_columns": []
            }
        },
        "get_screen_lines": {
            "name": "get_screen_lines",
            "location": 271,
            "return": [],
            "arguments": {
                "toplist": [],
                "poller": [],
                "screen_rows": [],
                "screen_columns": [],
                "include_footer": [],
                "search": []
            }
        },
        "redraw": {
            "name": "redraw",
            "location": 379,
            "return": [],
            "arguments": {
                "toplist": [],
                "poller": [],
                "rows": [],
                "columns": [],
                "include_footer": []
            }
        },
        "handle_search_keypresses": {
            "name": "handle_search_keypresses",
            "location": 398,
            "return": [],
            "arguments": {
                "key_sequence": []
            }
        },
        "get_command": {
            "name": "get_command",
            "location": 453,
            "return": [],
            "arguments": {}
        },
        "_top": {
            "name": "_top",
            "location": 505,
            "return": [],
            "arguments": {
                "search": []
            }
        },
        "top": {
            "name": "top",
            "location": 543,
            "return": [],
            "arguments": {
                "search": []
            }
        }
    },
    "px-python/px/px_units.py": {
        "bytes_to_strings": {
            "name": "bytes_to_strings",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "current_bytes_count": [
                    "int"
                ],
                "max_bytes_count": [
                    "int",
                    "str",
                    "List[str]",
                    "float"
                ]
            }
        }
    },
    "px-python/px/__init__.py": {},
    "px-python/tests/px_categorybar_test.py": {
        "test_render_bar_happy_path": {
            "name": "test_render_bar_happy_path",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "test_render_bar_happy_path_unicode": {
            "name": "test_render_bar_happy_path_unicode",
            "location": 17,
            "return": [],
            "arguments": {}
        }
    },
    "px-python/tests/px_commandline_test.py": {
        "test_get_command_python": {
            "name": "test_get_command_python",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_get_command_java": {
            "name": "test_get_command_java",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "test_get_command_java_gradled": {
            "name": "test_get_command_java_gradled",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "test_get_command_java_teamcity": {
            "name": "test_get_command_java_teamcity",
            "location": 82,
            "return": [],
            "arguments": {}
        },
        "test_get_command_java_logstash": {
            "name": "test_get_command_java_logstash",
            "location": 99,
            "return": [],
            "arguments": {}
        },
        "test_get_command_java_gradleworkermain": {
            "name": "test_get_command_java_gradleworkermain",
            "location": 118,
            "return": [],
            "arguments": {}
        },
        "test_get_command_java_equinox": {
            "name": "test_get_command_java_equinox",
            "location": 147,
            "return": [],
            "arguments": {}
        },
        "test_get_command_electron_macos": {
            "name": "test_get_command_electron_macos",
            "location": 182,
            "return": [],
            "arguments": {}
        },
        "test_get_command_resque": {
            "name": "test_get_command_resque",
            "location": 200,
            "return": [],
            "arguments": {}
        },
        "test_get_command_sudo": {
            "name": "test_get_command_sudo",
            "location": 206,
            "return": [],
            "arguments": {}
        },
        "test_get_command_sudo_with_space_in_command_name": {
            "name": "test_get_command_sudo_with_space_in_command_name",
            "location": 218,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_get_command_sudo_with_space_in_path": {
            "name": "test_get_command_sudo_with_space_in_path",
            "location": 234,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_get_command_interpreters": {
            "name": "test_get_command_interpreters",
            "location": 252,
            "return": [],
            "arguments": {}
        },
        "test_get_command_unicode": {
            "name": "test_get_command_unicode",
            "location": 270,
            "return": [],
            "arguments": {}
        },
        "test_get_command_ruby_switches": {
            "name": "test_get_command_ruby_switches",
            "location": 274,
            "return": [],
            "arguments": {}
        },
        "test_get_command_perl": {
            "name": "test_get_command_perl",
            "location": 297,
            "return": [],
            "arguments": {}
        },
        "test_get_homebrew_commandline": {
            "name": "test_get_homebrew_commandline",
            "location": 383,
            "return": [],
            "arguments": {}
        },
        "test_node_max_old_space": {
            "name": "test_node_max_old_space",
            "location": 401,
            "return": [],
            "arguments": {}
        },
        "test_macos_app": {
            "name": "test_macos_app",
            "location": 408,
            "return": [],
            "arguments": {}
        }
    },
    "px-python/tests/px_cpuinfo_test.py": {
        "test_get_core_count": {
            "name": "test_get_core_count",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "assert_core_counts_from_file": {
            "name": "assert_core_counts_from_file",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "bool"
                ],
                "expected_physical": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Tuple[int]",
                    "Optional[Set[str]]",
                    "Callable[[Any], None]"
                ],
                "expected_logical": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Tuple[int]",
                    "Optional[Set[str]]",
                    "Callable[[Any], None]"
                ]
            }
        },
        "test_get_core_count_from_proc_cpuinfo": {
            "name": "test_get_core_count_from_proc_cpuinfo",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_core_count_from_sysctl": {
            "name": "test_get_core_count_from_sysctl",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "test_parse_sysctl_output": {
            "name": "test_parse_sysctl_output",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "px-python/tests/px_cwdfriends_test.py": {
        "test_current_cwd_unknown": {
            "name": "test_current_cwd_unknown",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_current_cwd_root": {
            "name": "test_current_cwd_root",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_current_cwd_notroot": {
            "name": "test_current_cwd_notroot",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_find_friends": {
            "name": "test_find_friends",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_get_friends_in_order": {
            "name": "_get_friends_in_order",
            "location": 55,
            "return": [
                "Union[tuple, list]",
                "Set[str]",
                "str"
            ],
            "arguments": {}
        },
        "_get_friend_processes_in_order": {
            "name": "_get_friend_processes_in_order",
            "location": 73,
            "return": [
                "Dict[str, Any]",
                "List[Dict]"
            ],
            "arguments": {}
        },
        "test_friend_ordering": {
            "name": "test_friend_ordering",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "px-python/tests/px_exec_util_test.py": {
        "test_exec_false_no_check": {
            "name": "test_exec_false_no_check",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_exec_true_with_check": {
            "name": "test_exec_true_with_check",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_exec_false_with_check": {
            "name": "test_exec_false_with_check",
            "location": 14,
            "return": [],
            "arguments": {}
        }
    },
    "px-python/tests/px_file_test.py": {
        "test_lsof_to_files": {
            "name": "test_lsof_to_files",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_all": {
            "name": "test_get_all",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "lsof_to_file": {
            "name": "lsof_to_file",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "shard_array": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_listen_name": {
            "name": "test_listen_name",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_setability": {
            "name": "test_setability",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_local_endpoint": {
            "name": "test_local_endpoint",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_remote_endpoint": {
            "name": "test_remote_endpoint",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_str_resolve": {
            "name": "test_str_resolve",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "px-python/tests/px_integration_test.py": {
        "test_run_on_pid": {
            "name": "test_run_on_pid",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "capfd": [
                    "Type",
                    "str"
                ]
            }
        }
    },
    "px-python/tests/px_ioload_test.py": {
        "test_parse_netstat_ib_output": {
            "name": "test_parse_netstat_ib_output",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_iostat_output": {
            "name": "test_parse_iostat_output",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_proc_net_dev": {
            "name": "test_parse_proc_net_dev",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_proc_diskstats": {
            "name": "test_parse_proc_diskstats",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_system_state": {
            "name": "test_system_state",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "px-python/tests/px_ipc_map_test.py": {
        "get_other_end_pids": {
            "name": "get_other_end_pids",
            "location": 8,
            "return": [],
            "arguments": {
                "my_file": [],
                "all_files": []
            }
        },
        "test_get_other_end_pids_basic": {
            "name": "test_get_other_end_pids_basic",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_get_other_end_pids_osx_pipe1": {
            "name": "test_get_other_end_pids_osx_pipe1",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "test_get_other_end_pids_osx_pipe2": {
            "name": "test_get_other_end_pids_osx_pipe2",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "test_get_other_end_pids_linux_pipe": {
            "name": "test_get_other_end_pids_linux_pipe",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "test_get_other_end_pids_fifo1": {
            "name": "test_get_other_end_pids_fifo1",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "test_get_other_end_pids_fifo2": {
            "name": "test_get_other_end_pids_fifo2",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "test_get_other_end_pids_linux_socket": {
            "name": "test_get_other_end_pids_linux_socket",
            "location": 77,
            "return": [],
            "arguments": {}
        },
        "test_get_other_end_pids_osx_socket": {
            "name": "test_get_other_end_pids_osx_socket",
            "location": 94,
            "return": [],
            "arguments": {}
        },
        "test_get_other_end_pids_localhost_socket": {
            "name": "test_get_other_end_pids_localhost_socket",
            "location": 108,
            "return": [],
            "arguments": {}
        },
        "test_get_other_end_pids_localhost_socket_names": {
            "name": "test_get_other_end_pids_localhost_socket_names",
            "location": 127,
            "return": [],
            "arguments": {}
        },
        "test_get_ipc_map_1": {
            "name": "test_get_ipc_map_1",
            "location": 148,
            "return": [],
            "arguments": {}
        },
        "test_get_ipc_map_2": {
            "name": "test_get_ipc_map_2",
            "location": 168,
            "return": [],
            "arguments": {}
        },
        "test_stdfds_base": {
            "name": "test_stdfds_base",
            "location": 185,
            "return": [],
            "arguments": {}
        },
        "test_stdfds_closed": {
            "name": "test_stdfds_closed",
            "location": 198,
            "return": [],
            "arguments": {}
        },
        "test_stdfds_unavailable": {
            "name": "test_stdfds_unavailable",
            "location": 211,
            "return": [],
            "arguments": {}
        },
        "test_stdfds_ipc_and_network": {
            "name": "test_stdfds_ipc_and_network",
            "location": 220,
            "return": [],
            "arguments": {}
        },
        "test_stdfds_pipe_to_unknown_not_root": {
            "name": "test_stdfds_pipe_to_unknown_not_root",
            "location": 259,
            "return": [],
            "arguments": {}
        },
        "test_stdfds_pipe_to_unknown_is_root": {
            "name": "test_stdfds_pipe_to_unknown_is_root",
            "location": 274,
            "return": [],
            "arguments": {}
        },
        "test_stdfds_osx_pipe_to_unknown_is_root": {
            "name": "test_stdfds_osx_pipe_to_unknown_is_root",
            "location": 286,
            "return": [],
            "arguments": {}
        },
        "test_ipc_pipe_osx": {
            "name": "test_ipc_pipe_osx",
            "location": 296,
            "return": [],
            "arguments": {}
        },
        "test_peer_process_str": {
            "name": "test_peer_process_str",
            "location": 316,
            "return": [],
            "arguments": {}
        }
    },
    "px-python/tests/px_launchcounter_test.py": {
        "test_list_new_launches": {
            "name": "test_list_new_launches",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_screen_lines_coalesces": {
            "name": "test_get_screen_lines_coalesces",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_print_launch_counts": {
            "name": "test_print_launch_counts",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ignore_surrounding_parentheses": {
            "name": "test_ignore_surrounding_parentheses",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_to_tuple_list": {
            "name": "test_to_tuple_list",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_merge_tuple_lists": {
            "name": "test_merge_tuple_lists",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sort_launchers_lists": {
            "name": "test_sort_launchers_lists",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "px-python/tests/px_load_test.py": {
        "test_averages_to_levels": {
            "name": "test_averages_to_levels",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "test_levels_to_graph": {
            "name": "test_levels_to_graph",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "test_get_load_string": {
            "name": "test_get_load_string",
            "location": 41,
            "return": [],
            "arguments": {}
        }
    },
    "px-python/tests/px_loginhistory_test.py": {
        "check_output": {
            "name": "check_output",
            "location": 17,
            "return": [],
            "arguments": {
                "capfd": []
            }
        },
        "get_users_at": {
            "name": "get_users_at",
            "location": 25,
            "return": [],
            "arguments": {
                "last_output": [],
                "now": [],
                "testtime": []
            }
        },
        "test_get_users_at_range": {
            "name": "test_get_users_at_range",
            "location": 36,
            "return": [],
            "arguments": {
                "check_output": []
            }
        },
        "test_get_users_at_still_logged_in": {
            "name": "test_get_users_at_still_logged_in",
            "location": 73,
            "return": [],
            "arguments": {
                "check_output": []
            }
        },
        "test_get_users_at_remote": {
            "name": "test_get_users_at_remote",
            "location": 95,
            "return": [],
            "arguments": {
                "check_output": []
            }
        },
        "test_get_users_at_local_osx": {
            "name": "test_get_users_at_local_osx",
            "location": 106,
            "return": [],
            "arguments": {
                "check_output": []
            }
        },
        "test_get_users_at_local_linux": {
            "name": "test_get_users_at_local_linux",
            "location": 115,
            "return": [],
            "arguments": {
                "check_output": []
            }
        },
        "test_get_users_at_until_crash": {
            "name": "test_get_users_at_until_crash",
            "location": 128,
            "return": [],
            "arguments": {
                "check_output": []
            }
        },
        "test_get_users_at_until_shutdown_osx": {
            "name": "test_get_users_at_until_shutdown_osx",
            "location": 159,
            "return": [],
            "arguments": {
                "check_output": []
            }
        },
        "test_get_users_at_until_shutdown_linux": {
            "name": "test_get_users_at_until_shutdown_linux",
            "location": 192,
            "return": [],
            "arguments": {
                "check_output": []
            }
        },
        "test_get_users_at_multiple": {
            "name": "test_get_users_at_multiple",
            "location": 225,
            "return": [],
            "arguments": {
                "check_output": []
            }
        },
        "test_get_users_at_pseudousers_osx": {
            "name": "test_get_users_at_pseudousers_osx",
            "location": 267,
            "return": [],
            "arguments": {
                "check_output": []
            }
        },
        "test_get_users_at_pseudousers_linux": {
            "name": "test_get_users_at_pseudousers_linux",
            "location": 289,
            "return": [],
            "arguments": {
                "check_output": []
            }
        },
        "test_get_users_at_gone_no_logout": {
            "name": "test_get_users_at_gone_no_logout",
            "location": 303,
            "return": [],
            "arguments": {
                "check_output": []
            }
        },
        "test_get_users_at_trailing_noise": {
            "name": "test_get_users_at_trailing_noise",
            "location": 332,
            "return": [],
            "arguments": {
                "check_output": []
            }
        },
        "test_get_users_at_unexpected_last_output": {
            "name": "test_get_users_at_unexpected_last_output",
            "location": 340,
            "return": [],
            "arguments": {
                "caplog": []
            }
        },
        "test_get_users_at_just_run_it": {
            "name": "test_get_users_at_just_run_it",
            "location": 349,
            "return": [],
            "arguments": {
                "check_output": []
            }
        },
        "test_to_timestamp": {
            "name": "test_to_timestamp",
            "location": 354,
            "return": [],
            "arguments": {
                "check_output": []
            }
        },
        "test_to_timedelta": {
            "name": "test_to_timedelta",
            "location": 368,
            "return": [],
            "arguments": {
                "check_output": []
            }
        },
        "test_realworld_debian": {
            "name": "test_realworld_debian",
            "location": 380,
            "return": [],
            "arguments": {
                "check_output": []
            }
        }
    },
    "px-python/tests/px_meminfo_test.py": {
        "test_get_ram_numbers_live": {
            "name": "test_get_ram_numbers_live",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_ram_numbers_in_swedish": {
            "name": "test_get_ram_numbers_in_swedish",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_ram_numbers_from_proc_none": {
            "name": "test_get_ram_numbers_from_proc_none",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_ram_numbers_from_proc_2010": {
            "name": "test_get_ram_numbers_from_proc_2010",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_ram_numbers_from_proc_2020": {
            "name": "test_get_ram_numbers_from_proc_2020",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "px-python/tests/px_processinfo_test.py": {
        "test_to_relative_start_string": {
            "name": "test_to_relative_start_string",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_closests_starts_all_within_1s": {
            "name": "test_get_closests_starts_all_within_1s",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_closest_starts_five_closest": {
            "name": "test_get_closest_starts_five_closest",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_print_starttime": {
            "name": "test_print_starttime",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_print_process_subtree": {
            "name": "test_print_process_subtree",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_to_ipc_lines": {
            "name": "test_to_ipc_lines",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "px-python/tests/px_process_test.py": {
        "test_create_process": {
            "name": "test_create_process",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_create_future_process": {
            "name": "test_create_future_process",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "test_ps_line_to_process_unicode": {
            "name": "test_ps_line_to_process_unicode",
            "location": 65,
            "return": [],
            "arguments": {}
        },
        "test_ps_line_to_process_1": {
            "name": "test_ps_line_to_process_1",
            "location": 72,
            "return": [],
            "arguments": {}
        },
        "test_ps_line_to_process_2": {
            "name": "test_ps_line_to_process_2",
            "location": 86,
            "return": [],
            "arguments": {}
        },
        "test_ps_line_to_process_3": {
            "name": "test_ps_line_to_process_3",
            "location": 101,
            "return": [],
            "arguments": {}
        },
        "_validate_references": {
            "name": "_validate_references",
            "location": 128,
            "return": [],
            "arguments": {
                "processes": []
            }
        },
        "_test_get_all": {
            "name": "_test_get_all",
            "location": 147,
            "return": [],
            "arguments": {}
        },
        "test_get_all_swedish": {
            "name": "test_get_all_swedish",
            "location": 197,
            "return": [],
            "arguments": {}
        },
        "test_get_all_defaultlocale": {
            "name": "test_get_all_defaultlocale",
            "location": 210,
            "return": [],
            "arguments": {}
        },
        "test_process_eq": {
            "name": "test_process_eq",
            "location": 215,
            "return": [],
            "arguments": {}
        },
        "test_parse_time": {
            "name": "test_parse_time",
            "location": 226,
            "return": [],
            "arguments": {}
        },
        "test_order_best_last": {
            "name": "test_order_best_last",
            "location": 237,
            "return": [],
            "arguments": {}
        },
        "test_order_best_first": {
            "name": "test_order_best_first",
            "location": 252,
            "return": [],
            "arguments": {}
        },
        "test_match": {
            "name": "test_match",
            "location": 267,
            "return": [],
            "arguments": {}
        },
        "test_seconds_to_str": {
            "name": "test_seconds_to_str",
            "location": 282,
            "return": [],
            "arguments": {}
        },
        "test_get_command_line_array": {
            "name": "test_get_command_line_array",
            "location": 303,
            "return": [],
            "arguments": {}
        },
        "test_get_command_line_array_space_in_binary": {
            "name": "test_get_command_line_array_space_in_binary",
            "location": 311,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_command_dotted_prefix": {
            "name": "test_command_dotted_prefix",
            "location": 326,
            "return": [],
            "arguments": {}
        },
        "test_command_linux_kernelproc": {
            "name": "test_command_linux_kernelproc",
            "location": 346,
            "return": [],
            "arguments": {}
        },
        "test_command_in_parentheses": {
            "name": "test_command_in_parentheses",
            "location": 357,
            "return": [],
            "arguments": {}
        },
        "test_uid_to_username": {
            "name": "test_uid_to_username",
            "location": 363,
            "return": [],
            "arguments": {}
        },
        "test_resolve_links": {
            "name": "test_resolve_links",
            "location": 373,
            "return": [],
            "arguments": {}
        }
    },
    "px-python/tests/px_terminal_test.py": {
        "test_to_screen_lines_unbounded": {
            "name": "test_to_screen_lines_unbounded",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_to_screen_lines_unicode": {
            "name": "test_to_screen_lines_unicode",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "test_get_string_of_length": {
            "name": "test_get_string_of_length",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "test_crop_ansi_string_at_length": {
            "name": "test_crop_ansi_string_at_length",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "test_getch": {
            "name": "test_getch",
            "location": 88,
            "return": [],
            "arguments": {}
        },
        "test_tokenize": {
            "name": "test_tokenize",
            "location": 99,
            "return": [],
            "arguments": {}
        }
    },
    "px-python/tests/px_top_test.py": {
        "test_adjust_cpu_times": {
            "name": "test_adjust_cpu_times",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_toplist": {
            "name": "test_get_toplist",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_command": {
            "name": "test_get_command",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sigwinch_handler": {
            "name": "test_sigwinch_handler",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_redraw": {
            "name": "test_redraw",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_screen_lines_low_screen": {
            "name": "test_get_screen_lines_low_screen",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_screen_lines_high_screen": {
            "name": "test_get_screen_lines_high_screen",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_screen_lines_with_many_launches": {
            "name": "test_get_screen_lines_with_many_launches",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_screen_lines_returns_enough_lines": {
            "name": "test_get_screen_lines_returns_enough_lines",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "px-python/tests/px_units_test.py": {
        "test_bytes_to_strings": {
            "name": "test_bytes_to_strings",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "px-python/tests/python3_specific_test.py": {
        "test_cmdline_install": {
            "name": "test_cmdline_install",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "mock": []
            }
        },
        "test_cmdline_top": {
            "name": "test_cmdline_top",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "mock": []
            }
        },
        "test_cmdline_ptop": {
            "name": "test_cmdline_ptop",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "mock": []
            }
        },
        "test_cmdline_top_with_search": {
            "name": "test_cmdline_top_with_search",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "mock": []
            }
        },
        "test_px_sort_cpupercent": {
            "name": "test_px_sort_cpupercent",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cmdline_ptop_with_search": {
            "name": "test_cmdline_ptop_with_search",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "mock": []
            }
        },
        "test_cmdline_help": {
            "name": "test_cmdline_help",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "mock": []
            }
        },
        "test_cmdline_version": {
            "name": "test_cmdline_version",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "mock": []
            }
        },
        "test_cmdline_pid": {
            "name": "test_cmdline_pid",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "mock": []
            }
        },
        "test_cmdline_filter": {
            "name": "test_cmdline_filter",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "mock": []
            }
        },
        "test_cmdline_list_all_processes": {
            "name": "test_cmdline_list_all_processes",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "mock": []
            }
        }
    },
    "px-python/tests/testutils.py": {
        "load": {
            "name": "load",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "sample_file_name": [
                    "str"
                ]
            }
        },
        "spaces": {
            "name": "spaces",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "at_least": [
                    "int",
                    "str",
                    "Sequence[int]"
                ],
                "at_most": [
                    "int",
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "local_now": {
            "name": "local_now",
            "location": 33,
            "return": [
                "datetime.datetime",
                "str",
                "datetime.date",
                "Tuple[str, str]"
            ],
            "arguments": {}
        },
        "create_process": {
            "name": "create_process",
            "location": 37,
            "return": [
                "int"
            ],
            "arguments": {
                "pid": [
                    "str",
                    "Optional[int]",
                    "Sequence[Any]",
                    "float",
                    "int"
                ],
                "ppid": [
                    "str",
                    "Optional[int]",
                    "Sequence[Any]",
                    "float",
                    "int"
                ],
                "rss_kb": [
                    "str",
                    "Optional[int]",
                    "Sequence[Any]",
                    "float",
                    "int"
                ],
                "timestring": [
                    "str",
                    "Optional[int]",
                    "Sequence[Any]",
                    "float",
                    "int"
                ],
                "uid": [
                    "str",
                    "Optional[int]",
                    "Sequence[Any]",
                    "float",
                    "int"
                ],
                "cpuusage": [
                    "str",
                    "Optional[int]",
                    "Sequence[Any]",
                    "float",
                    "int"
                ],
                "cputime": [
                    "str",
                    "Optional[int]",
                    "Sequence[Any]",
                    "float",
                    "int"
                ],
                "mempercent": [
                    "str",
                    "Optional[int]",
                    "Sequence[Any]",
                    "float",
                    "int"
                ],
                "commandline": [
                    "str",
                    "Optional[int]",
                    "Sequence[Any]",
                    "float",
                    "int"
                ],
                "now": [
                    "int"
                ]
            }
        },
        "create_file": {
            "name": "create_file",
            "location": 73,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "filetype": [
                    "str",
                    "bytes",
                    "Sequence[str]",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ],
                "device": [
                    "Optional[str]",
                    "List[Optional[str]]",
                    "int",
                    "bool",
                    "Optional[datetime.datetime]",
                    "str",
                    "Sequence[str]"
                ],
                "pid": [
                    "str",
                    "bytes",
                    "Sequence[str]",
                    "Optional[str]"
                ],
                "access": [
                    "Optional[str]",
                    "List[Optional[str]]",
                    "int",
                    "bool",
                    "Optional[datetime.datetime]",
                    "str",
                    "Sequence[str]"
                ],
                "inode": [
                    "Optional[str]",
                    "List[Optional[str]]",
                    "int",
                    "bool",
                    "Optional[datetime.datetime]",
                    "str",
                    "Sequence[str]"
                ],
                "fd": [
                    "Optional[str]",
                    "List[Optional[str]]",
                    "int",
                    "bool",
                    "Optional[datetime.datetime]",
                    "str",
                    "Sequence[str]"
                ],
                "fdtype": [
                    "Optional[str]",
                    "List[Optional[str]]",
                    "int",
                    "bool",
                    "Optional[datetime.datetime]",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "create_ipc_map": {
            "name": "create_ipc_map",
            "location": 101,
            "return": [
                "Dict[str, int]",
                "Dict[str, Any]",
                "dict",
                "int",
                "str"
            ],
            "arguments": {
                "pid": [
                    "List[str]",
                    "str",
                    "int",
                    "IO[Any]"
                ],
                "all_files": [
                    "str",
                    "int"
                ],
                "is_root": [
                    "str",
                    "int"
                ]
            }
        },
        "fake_callchain": {
            "name": "fake_callchain",
            "location": 121,
            "return": [
                "bool",
                "Optional[Union[str, Any]]",
                "float"
            ],
            "arguments": {}
        }
    },
    "px-python/tests/__init__.py": {}
}
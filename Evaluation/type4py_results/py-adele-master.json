{
    "py-adele-master/src/pyadele.py": {},
    "py-adele-master/src/__init__.py": {},
    "py-adele-master/src/model/interpreter.py": {
        "interpret_xml": {
            "name": "interpret_xml",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "statement": [
                    "int",
                    "bool",
                    "str",
                    "Optional[Type[BaseException]]",
                    "raiden.utils.BlockIdentifier"
                ],
                "indentation": [
                    "str",
                    "raiden.utils.Address",
                    "int",
                    "Exception"
                ],
                "index": [
                    "Callable[[T], Optional[T]]",
                    "str",
                    "Type"
                ]
            }
        },
        "Interpreter.exist": {
            "name": "exist",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Callable",
                    "bool",
                    "Dict[str, Any]"
                ],
                "interpreter": [
                    "Callable",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "Interpreter.interpret": {
            "name": "interpret",
            "location": 66,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Sequence[T]"
                ],
                "scenario": [
                    "Type",
                    "float",
                    "type"
                ],
                "interpreter": [
                    "type",
                    "str",
                    "Callable",
                    "util.Unary[V, N]",
                    "bool"
                ]
            }
        }
    },
    "py-adele-master/src/model/oom.py": {
        "Literal.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "value": []
            }
        },
        "Literal.__str__": {
            "name": "__str__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Literal.__repr__": {
            "name": "__repr__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Variable.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": [],
                "type": [],
                "reference": [],
                "scope": []
            }
        },
        "Variable.__str__": {
            "name": "__str__",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Variable.__repr__": {
            "name": "__repr__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": [],
                "scope": []
            }
        },
        "Message.__str__": {
            "name": "__str__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.__repr__": {
            "name": "__repr__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ISO.symbol": {
            "name": "symbol",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Configuration.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "actions": []
            }
        },
        "Configuration.__str__": {
            "name": "__str__",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Configuration.__repr__": {
            "name": "__repr__",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetUnitTime.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "reference": []
            }
        },
        "SetUnitTime.__str__": {
            "name": "__str__",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetUnitTime.__repr__": {
            "name": "__repr__",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetUnitLength.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "reference": []
            }
        },
        "SetUnitLength.__str__": {
            "name": "__str__",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetUnitLength.__repr__": {
            "name": "__repr__",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetUnitAngle.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "reference": []
            }
        },
        "SetUnitAngle.__str__": {
            "name": "__str__",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetUnitAngle.__repr__": {
            "name": "__repr__",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetTimeStart.__init__": {
            "name": "__init__",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "reference": []
            }
        },
        "SetTimeStart.__str__": {
            "name": "__str__",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SetTimeStart.__repr__": {
            "name": "__repr__",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Attack.__str__": {
            "name": "__str__",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Attack.__repr__": {
            "name": "__repr__",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scenario.__init__": {
            "name": "__init__",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "configuration": [],
                "attack": []
            }
        },
        "Scenario.__str__": {
            "name": "__str__",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scenario.__repr__": {
            "name": "__repr__",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "py-adele-master/src/model/__init__.py": {},
    "py-adele-master/src/parser/grammar.py": {
        "p_error": {
            "name": "p_error",
            "location": 221,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_empty": {
            "name": "p_empty",
            "location": 227,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_semicolons": {
            "name": "p_semicolons",
            "location": 235,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_curvy_left": {
            "name": "p_curvy_left",
            "location": 244,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_curvy_right": {
            "name": "p_curvy_right",
            "location": 252,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_literal_boolean": {
            "name": "p_literal_boolean",
            "location": 260,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_literal_char": {
            "name": "p_literal_char",
            "location": 270,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_literal_integer": {
            "name": "p_literal_integer",
            "location": 279,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_literal_float": {
            "name": "p_literal_float",
            "location": 288,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_literal_string": {
            "name": "p_literal_string",
            "location": 297,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_literal_uint8": {
            "name": "p_literal_uint8",
            "location": 306,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_literal_uint16": {
            "name": "p_literal_uint16",
            "location": 315,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_literal_uint32": {
            "name": "p_literal_uint32",
            "location": 324,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_literal_uint64": {
            "name": "p_literal_uint64",
            "location": 333,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_literal_sint8": {
            "name": "p_literal_sint8",
            "location": 342,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_literal_sint16": {
            "name": "p_literal_sint16",
            "location": 351,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_literal_sint32": {
            "name": "p_literal_sint32",
            "location": 360,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_literal_sint64": {
            "name": "p_literal_sint64",
            "location": 369,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_literal_float32": {
            "name": "p_literal_float32",
            "location": 378,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_literal_float64": {
            "name": "p_literal_float64",
            "location": 387,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_entry_point": {
            "name": "p_entry_point",
            "location": 396,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_scenario_compound_statement": {
            "name": "p_scenario_compound_statement",
            "location": 406,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_scenario_block_content": {
            "name": "p_scenario_block_content",
            "location": 415,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_configuration_compound_statement": {
            "name": "p_configuration_compound_statement",
            "location": 437,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_configuration_block_content": {
            "name": "p_configuration_block_content",
            "location": 449,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_configuration_action_set": {
            "name": "p_configuration_action_set",
            "location": 458,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_configuration_action": {
            "name": "p_configuration_action",
            "location": 469,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_action_set_unit_time": {
            "name": "p_action_set_unit_time",
            "location": 481,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_action_set_unit_length": {
            "name": "p_action_set_unit_length",
            "location": 490,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_action_set_unit_angle": {
            "name": "p_action_set_unit_angle",
            "location": 499,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_action_set_time_start": {
            "name": "p_action_set_time_start",
            "location": 508,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "assert_not_already_declared": {
            "name": "assert_not_already_declared",
            "location": 520,
            "return": [],
            "arguments": {
                "identifier": [],
                "lineno": []
            }
        },
        "p_declaration_identifier": {
            "name": "p_declaration_identifier",
            "location": 535,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_declaration_identifier_set": {
            "name": "p_declaration_identifier_set",
            "location": 545,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_declaration_boolean_set": {
            "name": "p_declaration_boolean_set",
            "location": 554,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_declaration_char_set": {
            "name": "p_declaration_char_set",
            "location": 567,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_declaration_integer_set": {
            "name": "p_declaration_integer_set",
            "location": 580,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_declaration_float_set": {
            "name": "p_declaration_float_set",
            "location": 593,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_declaration_string_set": {
            "name": "p_declaration_string_set",
            "location": 606,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_declaration_uint8_set": {
            "name": "p_declaration_uint8_set",
            "location": 619,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_declaration_uint16_set": {
            "name": "p_declaration_uint16_set",
            "location": 632,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_declaration_uint32_set": {
            "name": "p_declaration_uint32_set",
            "location": 645,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_declaration_uint64_set": {
            "name": "p_declaration_uint64_set",
            "location": 658,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_declaration_sint8_set": {
            "name": "p_declaration_sint8_set",
            "location": 671,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_declaration_sint16_set": {
            "name": "p_declaration_sint16_set",
            "location": 684,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_declaration_sint32_set": {
            "name": "p_declaration_sint32_set",
            "location": 697,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_declaration_sint64_set": {
            "name": "p_declaration_sint64_set",
            "location": 710,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_declaration_float32_set": {
            "name": "p_declaration_float32_set",
            "location": 723,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_declaration_float64_set": {
            "name": "p_declaration_float64_set",
            "location": 736,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_declaration_message_set": {
            "name": "p_declaration_message_set",
            "location": 749,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_declaration_variable_set": {
            "name": "p_declaration_variable_set",
            "location": 762,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_declaration_entities": {
            "name": "p_declaration_entities",
            "location": 793,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "p_attack_compound_statement": {
            "name": "p_attack_compound_statement",
            "location": 805,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "ScopeHandler.open_scope": {
            "name": "open_scope",
            "location": 65,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ScopeHandler.close_scope": {
            "name": "close_scope",
            "location": 76,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ScopeHandler.get_current_scope_identifier": {
            "name": "get_current_scope_identifier",
            "location": 82,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ScopeHandler.get_scope_identifier": {
            "name": "get_scope_identifier",
            "location": 92,
            "return": [],
            "arguments": {
                "cls": [],
                "scope": []
            }
        },
        "ScopeHandler.get_global_scope_identifier": {
            "name": "get_global_scope_identifier",
            "location": 102,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "SymbolTable.store_literal": {
            "name": "store_literal",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "value": []
            }
        },
        "SymbolTable.store_variable": {
            "name": "store_variable",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "scope": [],
                "identifier": [],
                "type": [],
                "value": []
            }
        },
        "SymbolTable.store_message": {
            "name": "store_message",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "scope": [],
                "identifier": []
            }
        },
        "SymbolTable.retrieve": {
            "name": "retrieve",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "identifier": []
            }
        },
        "GlobalSymbolTable.store_literal": {
            "name": "store_literal",
            "location": 146,
            "return": [],
            "arguments": {
                "cls": [],
                "type": [],
                "value": []
            }
        },
        "GlobalSymbolTable.store_variable": {
            "name": "store_variable",
            "location": 155,
            "return": [],
            "arguments": {
                "cls": [],
                "scope": [],
                "identifier": [],
                "type": [],
                "value": []
            }
        },
        "GlobalSymbolTable.store_message": {
            "name": "store_message",
            "location": 163,
            "return": [],
            "arguments": {
                "cls": [],
                "scope": [],
                "identifier": []
            }
        },
        "GlobalSymbolTable.retrieve": {
            "name": "retrieve",
            "location": 171,
            "return": [],
            "arguments": {
                "cls": [],
                "scope": [],
                "identifier": []
            }
        },
        "CurrentScope.append": {
            "name": "append",
            "location": 189,
            "return": [],
            "arguments": {
                "cls": [],
                "entity": [],
                "type": []
            }
        },
        "CurrentScope.get": {
            "name": "get",
            "location": 199,
            "return": [],
            "arguments": {
                "cls": [],
                "type": []
            }
        },
        "CurrentScope.clean": {
            "name": "clean",
            "location": 209,
            "return": [],
            "arguments": {
                "cls": [],
                "type": []
            }
        }
    },
    "py-adele-master/src/parser/lexeme.py": {
        "Lexeme.token": {
            "name": "token",
            "location": 26,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexeme.lexeme": {
            "name": "lexeme",
            "location": 31,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexeme.tokens": {
            "name": "tokens",
            "location": 36,
            "return": [
                "List[str]",
                "Iterable[str]",
                "List[Tuple[str, Any]]",
                "str",
                "FrozenSet[str]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "int"
                ]
            }
        },
        "Lexeme.lexemes": {
            "name": "lexemes",
            "location": 41,
            "return": [
                "List[str]",
                "int",
                "list",
                "AbstractSet[Type[object]]",
                "Set[int]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "Callable[[T], None]",
                    "Callable[..., T]",
                    "Type[Any]"
                ]
            }
        },
        "Lexeme.reverse_map": {
            "name": "reverse_map",
            "location": 46,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "py-adele-master/src/parser/lexer.py": {
        "t_LITERAL_CHAR": {
            "name": "t_LITERAL_CHAR",
            "location": 190,
            "return": [
                "str",
                "list",
                "int",
                "Tuple[int]"
            ],
            "arguments": {
                "t": [
                    "ply.lex.LexToken",
                    "str",
                    "tuple"
                ]
            }
        },
        "t_LITERAL_FLOAT": {
            "name": "t_LITERAL_FLOAT",
            "location": 197,
            "return": [
                "str",
                "T",
                "ply.lex.LexToken",
                "tuple"
            ],
            "arguments": {
                "t": [
                    "ply.lex.LexToken",
                    "int"
                ]
            }
        },
        "t_LITERAL_INTEGER": {
            "name": "t_LITERAL_INTEGER",
            "location": 208,
            "return": [
                "str",
                "T",
                "ply.lex.LexToken",
                "tuple"
            ],
            "arguments": {
                "t": [
                    "ply.lex.LexToken",
                    "int"
                ]
            }
        },
        "t_LITERAL_STRING": {
            "name": "t_LITERAL_STRING",
            "location": 219,
            "return": [
                "int",
                "str",
                "Iterable[int]",
                "List[str]"
            ],
            "arguments": {
                "t": [
                    "ply.lex.LexToken",
                    "palu.core.annotations.ply.lex.LexToken",
                    "float",
                    "str"
                ]
            }
        },
        "t_LITERAL_IDENTIFIER": {
            "name": "t_LITERAL_IDENTIFIER",
            "location": 226,
            "return": [
                "str",
                "T",
                "ply.lex.LexToken",
                "tuple"
            ],
            "arguments": {
                "t": [
                    "ply.lex.LexToken"
                ]
            }
        },
        "t_comment": {
            "name": "t_comment",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "t": [
                    "ply.lex.LexToken",
                    "float",
                    "list",
                    "bool",
                    "Type"
                ]
            }
        },
        "t_newline": {
            "name": "t_newline",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "t": [
                    "palu.core.annotations.ply.lex.LexToken",
                    "ply.lex.LexToken"
                ]
            }
        },
        "t_error": {
            "name": "t_error",
            "location": 250,
            "return": [
                "mypy_extensions.NoReturn"
            ],
            "arguments": {
                "t": [
                    "Iterable[Any]"
                ]
            }
        }
    },
    "py-adele-master/src/parser/__init__.py": {},
    "py-adele-master/src/shell/options.py": {
        "get_command_line_arguments": {
            "name": "get_command_line_arguments",
            "location": 79,
            "return": [
                "str",
                "List[str]",
                "bool",
                "bytes",
                "Optional[int]"
            ],
            "arguments": {
                "args": []
            }
        },
        "Option.short": {
            "name": "short",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Option.long": {
            "name": "long",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Option.metavar": {
            "name": "metavar",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Option.option": {
            "name": "option",
            "location": 49,
            "return": [
                "str",
                "types.ModuleType",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Option.options": {
            "name": "options",
            "location": 54,
            "return": [
                "List[str]",
                "Set[str]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "static_frame.core.util.UFunc",
                    "Dict[str, str]"
                ]
            }
        },
        "Argument.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "int"
                ],
                "interpreter": [
                    "str",
                    "bool"
                ],
                "output": [
                    "str",
                    "bool"
                ],
                "force": [
                    "str",
                    "bool"
                ]
            }
        },
        "Argument.__str__": {
            "name": "__str__",
            "location": 72,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Argument.__repr__": {
            "name": "__repr__",
            "location": 75,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "py-adele-master/src/shell/service.py": {
        "validate_argument": {
            "name": "validate_argument",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "argument": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "py-adele-master/src/shell/__init__.py": {},
    "py-adele-master/src/util/utils.py": {
        "baserepr": {
            "name": "baserepr",
            "location": 15,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "type",
                    "dict",
                    "int"
                ]
            }
        },
        "basestr": {
            "name": "basestr",
            "location": 26,
            "return": [
                "str",
                "Pattern",
                "int",
                "OrderedDict"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "float",
                    "type"
                ]
            }
        }
    },
    "py-adele-master/tests/test_arguments.py": {
        "TestArguments.setUp": {
            "name": "setUp",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArguments.test_validation_when_source_file_does_not_exist_then_raise_exception": {
            "name": "test_validation_when_source_file_does_not_exist_then_raise_exception",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArguments.test_validation_when_source_file_is_not_a_file_then_raise_exception": {
            "name": "test_validation_when_source_file_is_not_a_file_then_raise_exception",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArguments.test_validation_when_interpreter_not_supported_then_raise_exception": {
            "name": "test_validation_when_interpreter_not_supported_then_raise_exception",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArguments.test_validation_when_output_file_is_not_a_file_without_force_overwrite_then_raise_exception": {
            "name": "test_validation_when_output_file_is_not_a_file_without_force_overwrite_then_raise_exception",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArguments.test_validation_when_output_file_is_not_a_file_with_force_overwrite_then_raise_exception": {
            "name": "test_validation_when_output_file_is_not_a_file_with_force_overwrite_then_raise_exception",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArguments.test_validation_when_output_file_exists_with_force_overwrite": {
            "name": "test_validation_when_output_file_exists_with_force_overwrite",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArguments.test_validation_when_output_file_exists_check_overwrite_yes": {
            "name": "test_validation_when_output_file_exists_check_overwrite_yes",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocked_input": [
                    "mock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestArguments.test_validation_when_output_file_exists_check_overwrite_no": {
            "name": "test_validation_when_output_file_exists_check_overwrite_no",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocked_input": [
                    "mock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestArguments.tearDown": {
            "name": "tearDown",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "py-adele-master/tests/test_command_line_parser.py": {
        "TestCommandLineParser.setUp": {
            "name": "setUp",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommandLineParser.test_command_line_parser_when_all_arguments_then_parse_arguments": {
            "name": "test_command_line_parser_when_all_arguments_then_parse_arguments",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommandLineParser.test_command_line_parser_when_unrecognizable_arguments_then_raise_exception": {
            "name": "test_command_line_parser_when_unrecognizable_arguments_then_raise_exception",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommandLineParser.test_command_line_parser_when_mandatory_arguments_only_then_parses_arguments": {
            "name": "test_command_line_parser_when_mandatory_arguments_only_then_parses_arguments",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommandLineParser.test_command_line_parser_when_missing_argument_source_then_raise_exception": {
            "name": "test_command_line_parser_when_missing_argument_source_then_raise_exception",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommandLineParser.test_command_line_parser_when_missing_argument_interpreter_then_raise_exception": {
            "name": "test_command_line_parser_when_missing_argument_interpreter_then_raise_exception",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommandLineParser.tearDown": {
            "name": "tearDown",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "py-adele-master/tests/test_lexer.py": {
        "TestLexer.setUp": {
            "name": "setUp",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLexer.test_lexer_ensure_uniqueness_tokens": {
            "name": "test_lexer_ensure_uniqueness_tokens",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLexer.test_lexer_ensure_uniqueness_lexemes": {
            "name": "test_lexer_ensure_uniqueness_lexemes",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLexer.tearDown": {
            "name": "tearDown",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "py-adele-master/tests/test_parser.py": {
        "TestParser.setUp": {
            "name": "setUp",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_redefinition_variable_same_line": {
            "name": "test_redefinition_variable_same_line",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_redefinition_variable_same_scope": {
            "name": "test_redefinition_variable_same_scope",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_complete_scenario": {
            "name": "test_complete_scenario",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParser.tearDown": {
            "name": "tearDown",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
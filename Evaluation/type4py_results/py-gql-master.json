{
    "py-gql-master/setup.py": {
        "run_setup": {
            "name": "run_setup",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_ext_modules": {
            "name": "_ext_modules",
            "location": 95,
            "return": [
                "List[int]",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "_split_requirements": {
            "name": "_split_requirements",
            "location": 129,
            "return": [
                "Callable[[T], bool]",
                "str",
                "List[Tuple]",
                "bool"
            ],
            "arguments": {}
        }
    },
    "py-gql-master/tasks.py": {
        "_join": {
            "name": "_join",
            "location": 27,
            "return": [
                "list",
                "Optional[dict]",
                "List[Dict[str, Any]]",
                "frozenset",
                "str"
            ],
            "arguments": {}
        },
        "benchmark": {
            "name": "benchmark",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "str"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [],
                "coverage": [
                    "int"
                ],
                "bail": [
                    "int"
                ],
                "verbose": [
                    "int"
                ],
                "grep": [
                    "int"
                ],
                "files": [
                    "Optional[str]",
                    "Type[T]"
                ],
                "junit": [
                    "int"
                ],
                "ignore": [
                    "List[int]",
                    "Union[str, List]",
                    "bytes",
                    "str",
                    "bool"
                ],
                "parallel": [
                    "int"
                ],
                "watch": [
                    "int"
                ]
            }
        },
        "flake8": {
            "name": "flake8",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "bool",
                    "List[str]",
                    "bytes"
                ],
                "files": [
                    "str",
                    "bool",
                    "List[str]",
                    "Type[T]"
                ],
                "junit": [
                    "str",
                    "Optional[Exception]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "mypy": {
            "name": "mypy",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "Optional[Exception]",
                    "bytes",
                    "bool"
                ],
                "files": [
                    "str",
                    "bool",
                    "List[str]",
                    "Type[T]"
                ],
                "junit": [
                    "str",
                    "Optional[Exception]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "fmt": {
            "name": "fmt",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "str"
                ],
                "files": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "check": {
            "name": "check",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": []
            }
        },
        "docs": {
            "name": "docs",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "str"
                ],
                "clean_": [],
                "strict": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "verbose": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "build": {
            "name": "build",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "cythonize_module": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "build_manylinux_wheels": {
            "name": "build_manylinux_wheels",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "python": [
                    "str",
                    "Callable[..., bool]"
                ],
                "cythonize_module": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "all_": [
                    "int"
                ]
            }
        },
        "generate_checksums": {
            "name": "generate_checksums",
            "location": 243,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "str"
                ]
            }
        },
        "update_version": {
            "name": "update_version",
            "location": 254,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [],
                "version": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[int]"
                ],
                "force": [
                    "bytes",
                    "str",
                    "bool",
                    "dict",
                    "int"
                ],
                "push": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "py-gql-master/docs/conf.py": {},
    "py-gql-master/docs/graphql_pygments.py": {},
    "py-gql-master/docs/usage/getting-started/flask.py": {
        "graphql_route": {
            "name": "graphql_route",
            "location": 5,
            "return": [
                "bool",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {}
        }
    },
    "py-gql-master/docs/usage/getting-started/resolvers.py": {
        "resolve_hero": {
            "name": "resolve_hero",
            "location": 2,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "_root": [
                    "Sequence[str]",
                    "str",
                    "List[str]"
                ],
                "ctx": [
                    "Sequence[str]",
                    "str",
                    "List[str]"
                ],
                "_info": [
                    "Sequence[str]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "resolve_characters": {
            "name": "resolve_characters",
            "location": 7,
            "return": [
                "Optional[T]",
                "Optional[BaseException]",
                "Callable",
                "List[str]",
                "Optional[Callable]",
                "str",
                "int"
            ],
            "arguments": {
                "_root": [
                    "Sequence[str]",
                    "str",
                    "List[str]"
                ],
                "ctx": [
                    "str",
                    "dict",
                    "Iterable[str]",
                    "list"
                ],
                "_info": [
                    "Sequence[str]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "resolve_character": {
            "name": "resolve_character",
            "location": 12,
            "return": [
                "str",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "_root": [
                    "List[str]",
                    "str",
                    "bool",
                    "Optional[str]",
                    "int",
                    "Type[Exception]"
                ],
                "ctx": [
                    "str",
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[int]",
                    "Dict[bytes, int]",
                    "int"
                ],
                "_info": [
                    "List[str]",
                    "str",
                    "bool",
                    "Optional[str]",
                    "int",
                    "Type[Exception]"
                ]
            }
        }
    },
    "py-gql-master/docs/usage/getting-started/schema.py": {},
    "py-gql-master/examples/getting-started.py": {
        "resolve_hero": {
            "name": "resolve_hero",
            "location": 81,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "_root": [
                    "Sequence[str]",
                    "str",
                    "List[str]"
                ],
                "ctx": [
                    "Sequence[str]",
                    "str",
                    "List[str]"
                ],
                "_info": [
                    "Sequence[str]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "resolve_characters": {
            "name": "resolve_characters",
            "location": 86,
            "return": [
                "Optional[T]",
                "Optional[BaseException]",
                "Callable",
                "List[str]",
                "Optional[Callable]",
                "str",
                "int"
            ],
            "arguments": {
                "_root": [
                    "Sequence[str]",
                    "str",
                    "List[str]"
                ],
                "ctx": [
                    "str",
                    "dict",
                    "Iterable[str]",
                    "list"
                ],
                "_info": [
                    "Sequence[str]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "resolve_character": {
            "name": "resolve_character",
            "location": 91,
            "return": [
                "str",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "_root": [
                    "List[str]",
                    "str",
                    "bool",
                    "Optional[str]",
                    "int",
                    "Type[Exception]"
                ],
                "ctx": [
                    "str",
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[int]",
                    "Dict[bytes, int]",
                    "int"
                ],
                "_info": [
                    "List[str]",
                    "str",
                    "bool",
                    "Optional[str]",
                    "int",
                    "Type[Exception]"
                ]
            }
        },
        "graphql_route": {
            "name": "graphql_route",
            "location": 99,
            "return": [
                "bool",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {}
        }
    },
    "py-gql-master/examples/hello_world.py": {
        "resolve_hello": {
            "name": "resolve_hello",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "py-gql-master/examples/mutations-simple-counter.py": {
        "inc": {
            "name": "inc",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "root": [
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "dec": {
            "name": "dec",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "root": [
                    "bytes",
                    "List[str]"
                ]
            }
        }
    },
    "py-gql-master/examples/starlette-ws-subsriptions/app/graphql_ws.py": {
        "GraphQLWSHandler.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ws": [
                    "str",
                    "Tuple[int, int, int]",
                    "int"
                ],
                "schema": [
                    "str",
                    "Tuple[int, int, int]",
                    "int"
                ],
                "context": [
                    "str",
                    "Tuple[int, int, int]",
                    "int"
                ],
                "root": [
                    "str",
                    "Tuple[int, int, int]",
                    "int"
                ]
            }
        },
        "GraphQLWSHandler.__repr__": {
            "name": "__repr__",
            "location": 69,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphQLWSHandler.close": {
            "name": "close",
            "location": 75,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphQLWSHandler.cancel_operation": {
            "name": "cancel_operation",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "msg_id": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "py-gql-master/examples/starlette-ws-subsriptions/app/message_board.py": {
        "MessageBoard.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageBoard.create_room": {
            "name": "create_room",
            "location": 46,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "MessageBoard.add_callback": {
            "name": "add_callback",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cb": [
                    "int",
                    "VT",
                    "T"
                ]
            }
        },
        "MessageBoard.remove_callback": {
            "name": "remove_callback",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cb": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "MessageBoard.notify_callbacks": {
            "name": "notify_callbacks",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "MessageBoard.create_message": {
            "name": "create_message",
            "location": 72,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "room_id": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "text": [
                    "str",
                    "float",
                    "int"
                ],
                "author": [
                    "str",
                    "float",
                    "int"
                ]
            }
        }
    },
    "py-gql-master/examples/starlette-ws-subsriptions/app/schema.py": {
        "resolve_rooms": {
            "name": "resolve_rooms",
            "location": 70,
            "return": [
                "str",
                "List[Dict]",
                "List[int]"
            ],
            "arguments": {
                "_root": [
                    "list",
                    "List[Tuple[str, bool, Any]]",
                    "bool",
                    "Optional[asyncio.AbstractEventLoop]"
                ],
                "board": [
                    "List[str]"
                ],
                "_info": [
                    "list",
                    "List[Tuple[str, bool, Any]]",
                    "bool",
                    "Optional[asyncio.AbstractEventLoop]"
                ]
            }
        },
        "resolve_room_messages": {
            "name": "resolve_room_messages",
            "location": 75,
            "return": [
                "bool",
                "str",
                "Optional[bool]",
                "Optional[str]",
                "List[str]",
                "Optional[float]",
                "float"
            ],
            "arguments": {
                "room": [
                    "dict",
                    "bool",
                    "Dict[str, Any]"
                ],
                "board": [
                    "dict",
                    "bool",
                    "Dict[str, Any]"
                ],
                "_info": [
                    "str",
                    "Optional[Dict]",
                    "bool"
                ]
            }
        },
        "resolve_message": {
            "name": "resolve_message",
            "location": 91,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "_root": [
                    "str",
                    "List[int]",
                    "int",
                    "bool"
                ],
                "board": [
                    "dict",
                    "int",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "_info": [
                    "str",
                    "List[int]",
                    "int",
                    "bool"
                ]
            }
        },
        "resolve_room": {
            "name": "resolve_room",
            "location": 101,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "_root": [
                    "str",
                    "List[int]",
                    "int",
                    "bool"
                ],
                "board": [
                    "int",
                    "Sequence[object]",
                    "List[Set[str]]"
                ],
                "_info": [
                    "str",
                    "List[int]",
                    "int",
                    "bool"
                ]
            }
        },
        "resolve_create_room": {
            "name": "resolve_create_room",
            "location": 111,
            "return": [
                "dict",
                "bytes",
                "str"
            ],
            "arguments": {
                "_root": [
                    "list",
                    "Optional[asyncio.AbstractEventLoop]",
                    "Optional[Exception]"
                ],
                "board": [
                    "int",
                    "Iterable[T]",
                    "bytes",
                    "dict",
                    "Type[T]"
                ],
                "_info": [
                    "list",
                    "Optional[asyncio.AbstractEventLoop]",
                    "Optional[Exception]"
                ]
            }
        },
        "resolve_create_message": {
            "name": "resolve_create_message",
            "location": 121,
            "return": [
                "bool",
                "IO",
                "str"
            ],
            "arguments": {
                "_root": [
                    "str",
                    "List[str]",
                    "list",
                    "Iterable[str]",
                    "int",
                    "List[Dict[str, str]]",
                    "Dict[str, Any]"
                ],
                "board": [
                    "str",
                    "Union[int,str]",
                    "bytes",
                    "int"
                ],
                "_info": [
                    "str",
                    "List[str]",
                    "list",
                    "Iterable[str]",
                    "int",
                    "List[Dict[str, str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "resolve_message_room": {
            "name": "resolve_message_room",
            "location": 136,
            "return": [
                "str",
                "Optional[int]",
                "Callable",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "msg": [
                    "str"
                ],
                "board": [
                    "str"
                ],
                "_info": [
                    "str",
                    "Optional[Dict]",
                    "bool"
                ]
            }
        },
        "NewMessageIterator.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "str",
                    "Dict[str, str]",
                    "bool"
                ],
                "room_id": [
                    "str",
                    "Set[int]",
                    "int",
                    "Optional[int]",
                    "uuid.UUID"
                ]
            }
        },
        "NewMessageIterator.__aiter__": {
            "name": "__aiter__",
            "location": 146,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewMessageIterator.on_message": {
            "name": "on_message",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "Union[int, str]",
                    "List[List[str]]",
                    "list"
                ]
            }
        }
    },
    "py-gql-master/examples/starlette-ws-subsriptions/app/__init__.py": {
        "on_startup": {
            "name": "on_startup",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "on_shutdown": {
            "name": "on_shutdown",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "py-gql-master/examples/swapi-proxy-aiohttp/app/schema.py": {
        "swapi_caller": {
            "name": "swapi_caller",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "single_resource_resolver": {
            "name": "single_resource_resolver",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "resource": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "nested_single_resource_resolver": {
            "name": "nested_single_resource_resolver",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Union[float, int]"
                ],
                "resource": [
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "resource_resolver": {
            "name": "resource_resolver",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "resource": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "nested_list_resolver": {
            "name": "nested_list_resolver",
            "location": 63,
            "return": [
                "List[int]",
                "List[str]",
                "bytes",
                "bool",
                "str",
                "Sequence[int]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bool",
                    "tuple"
                ],
                "resource": [
                    "str",
                    "bool",
                    "tuple"
                ]
            }
        },
        "string_numeric_resolver": {
            "name": "string_numeric_resolver",
            "location": 77,
            "return": [
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "key": [
                    "str",
                    "int",
                    "KT",
                    "list",
                    "bytes",
                    "bool"
                ]
            }
        },
        "string_numeric_resolver.resolver": {
            "name": "resolver",
            "location": 78,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "dict",
                    "Dict[str, bool]",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "py-gql-master/examples/swapi-proxy-aiohttp/app/server.py": {
        "init": {
            "name": "init",
            "location": 48,
            "return": [
                "aiohttp.web.Application"
            ],
            "arguments": {
                "argv": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        }
    },
    "py-gql-master/examples/swapi-proxy-aiohttp/app/swapi.py": {
        "_url": {
            "name": "_url",
            "location": 25,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "py-gql-master/examples/swapi-proxy-aiohttp/app/__init__.py": {},
    "py-gql-master/examples/swapi-proxy-flask/app/schema.py": {
        "swapi_caller": {
            "name": "swapi_caller",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "single_resource_resolver": {
            "name": "single_resource_resolver",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "resource": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "nested_single_resource_resolver": {
            "name": "nested_single_resource_resolver",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Union[float, int]"
                ],
                "resource": [
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "resource_resolver": {
            "name": "resource_resolver",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "resource": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "nested_list_resolver": {
            "name": "nested_list_resolver",
            "location": 62,
            "return": [
                "List[int]",
                "List[str]",
                "bytes",
                "bool",
                "str",
                "Sequence[int]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bool",
                    "tuple"
                ],
                "resource": [
                    "str",
                    "bool",
                    "tuple"
                ]
            }
        },
        "string_numeric_resolver": {
            "name": "string_numeric_resolver",
            "location": 76,
            "return": [
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "key": [
                    "str",
                    "int",
                    "KT",
                    "list",
                    "bytes",
                    "bool"
                ]
            }
        },
        "swapi_caller.wrapper": {
            "name": "wrapper",
            "location": 20,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {}
        },
        "single_resource_resolver.resolve": {
            "name": "resolve",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "nested_single_resource_resolver.resolve": {
            "name": "resolve",
            "location": 46,
            "return": [],
            "arguments": {
                "obj": [],
                "ctx": [],
                "info": []
            }
        },
        "resource_resolver.resolve": {
            "name": "resolve",
            "location": 56,
            "return": [],
            "arguments": {
                "obj": [],
                "ctx": [],
                "info": []
            }
        },
        "nested_list_resolver.resolve": {
            "name": "resolve",
            "location": 64,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Optional[str]"
                ],
                "ctx": [
                    "List[str]"
                ],
                "info": [
                    "bool",
                    "str"
                ]
            }
        },
        "string_numeric_resolver.resolver": {
            "name": "resolver",
            "location": 77,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "dict",
                    "Dict[str, bool]",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "py-gql-master/examples/swapi-proxy-flask/app/server.py": {
        "sdl_route": {
            "name": "sdl_route",
            "location": 31,
            "return": [
                "List[str]",
                "str",
                "Dict[str, Any]",
                "Dict[str, dict]"
            ],
            "arguments": {}
        },
        "graphql_route": {
            "name": "graphql_route",
            "location": 36,
            "return": [
                "bool",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {}
        },
        "grahiql_route": {
            "name": "grahiql_route",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "py-gql-master/examples/swapi-proxy-flask/app/swapi.py": {
        "fetch": {
            "name": "fetch",
            "location": 8,
            "return": [
                "Dict[str, Any]",
                "bool",
                "bytes"
            ],
            "arguments": {
                "url": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "query": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "cache": [
                    "Dict[str, Any]",
                    "dict",
                    "list",
                    "float"
                ]
            }
        },
        "_url": {
            "name": "_url",
            "location": 25,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "fetch_one": {
            "name": "fetch_one",
            "location": 29,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "resource": [
                    "str",
                    "int",
                    "bool"
                ],
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "fetch_many": {
            "name": "fetch_many",
            "location": 42,
            "return": [
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "resource": [
                    "str",
                    "List[int]",
                    "int"
                ]
            }
        }
    },
    "py-gql-master/examples/swapi-proxy-flask/app/__init__.py": {},
    "py-gql-master/src/py_gql/exc.py": {
        "GraphQLError.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ]
            }
        },
        "GraphQLError.__str__": {
            "name": "__str__",
            "location": 28,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphQLResponseError.to_dict": {
            "name": "to_dict",
            "location": 41,
            "return": [
                "typing.Dict[builtins.str, typing.Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphQLSyntaxError.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "Optional[int]"
                ],
                "position": [
                    "int",
                    "List[float]"
                ],
                "source": [
                    "str",
                    "Dict[str, str]",
                    "bytes"
                ]
            }
        },
        "GraphQLSyntaxError.highlighted": {
            "name": "highlighted",
            "location": 74,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphQLSyntaxError.__str__": {
            "name": "__str__",
            "location": 85,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphQLSyntaxError.to_dict": {
            "name": "to_dict",
            "location": 88,
            "return": [
                "str",
                "Tuple[str, str]",
                "Dict[str, Any]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnexpectedEOF.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "position": [
                    "str",
                    "int"
                ],
                "source": [
                    "str",
                    "int"
                ]
            }
        },
        "GraphQLLocatedError.__init__": {
            "name": "__init__",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bool",
                    "int"
                ],
                "nodes": [
                    "list",
                    "str",
                    "int",
                    "Iterable"
                ],
                "path": [
                    "str",
                    "bool"
                ]
            }
        },
        "GraphQLLocatedError.__str__": {
            "name": "__str__",
            "location": 157,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphQLLocatedError.to_dict": {
            "name": "to_dict",
            "location": 160,
            "return": [
                "dict",
                "Dict[str, str]",
                "Dict[str, Any]",
                "Dict[int, Dict[int, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaValidationError.__init__": {
            "name": "__init__",
            "location": 204,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "errors": [
                    "bytes",
                    "list",
                    "List[str]",
                    "Optional[int]"
                ]
            }
        },
        "SchemaValidationError.__str__": {
            "name": "__str__",
            "location": 208,
            "return": [
                "str",
                "Optional[List[str]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExecutionError.to_dict": {
            "name": "to_dict",
            "location": 234,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariablesCoercionError.__init__": {
            "name": "__init__",
            "location": 258,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "errors": [
                    "bytes",
                    "list",
                    "List[str]",
                    "Optional[int]"
                ]
            }
        },
        "VariablesCoercionError.__str__": {
            "name": "__str__",
            "location": 262,
            "return": [
                "str",
                "Optional[List[str]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoercionError.__init__": {
            "name": "__init__",
            "location": 269,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Optional[Sequence[lang.asNode]]",
                    "bool"
                ],
                "node": [
                    "str",
                    "Optional[Sequence[lang.asNode]]",
                    "bool"
                ],
                "path": [
                    "str",
                    "Optional[Sequence[lang.asNode]]",
                    "bool"
                ],
                "value_path": [
                    "str"
                ]
            }
        },
        "CoercionError.__str__": {
            "name": "__str__",
            "location": 273,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiCoercionError.__init__": {
            "name": "__init__",
            "location": 291,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "errors": [
                    "bytes",
                    "list",
                    "List[str]",
                    "Optional[int]"
                ]
            }
        },
        "MultiCoercionError.__str__": {
            "name": "__str__",
            "location": 295,
            "return": [
                "str",
                "Optional[List[str]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResolverError.__init__": {
            "name": "__init__",
            "location": 327,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Optional[Sequence[lang.asNode]]",
                    "float",
                    "Optional[str]"
                ],
                "nodes": [
                    "str",
                    "Optional[Sequence[lang.asNode]]",
                    "float",
                    "Optional[str]"
                ],
                "path": [
                    "str",
                    "Optional[Sequence[lang.asNode]]",
                    "float",
                    "Optional[str]"
                ],
                "extensions": [
                    "dict",
                    "Optional[str]",
                    "str",
                    "MutableMapping[str, str]",
                    "bool"
                ]
            }
        },
        "ResolverError.to_dict": {
            "name": "to_dict",
            "location": 337,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Optional[Dict[str, str]]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "py-gql-master/src/py_gql/tracers.py": {
        "_ns": {
            "name": "_ns",
            "location": 16,
            "return": [],
            "arguments": {
                "start": [],
                "end": []
            }
        },
        "_rfc3339": {
            "name": "_rfc3339",
            "location": 26,
            "return": [],
            "arguments": {
                "ts": []
            }
        },
        "FieldTiming.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "TimingTracer.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimingTracer.on_query_start": {
            "name": "on_query_start",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimingTracer.on_query_end": {
            "name": "on_query_end",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimingTracer.on_execution_start": {
            "name": "on_execution_start",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimingTracer.on_execution_end": {
            "name": "on_execution_end",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimingTracer.on_parsing_start": {
            "name": "on_parsing_start",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimingTracer.on_parsing_end": {
            "name": "on_parsing_end",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimingTracer.on_validation_start": {
            "name": "on_validation_start",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimingTracer.on_validation_end": {
            "name": "on_validation_end",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimingTracer.on_field_start": {
            "name": "on_field_start",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "_root": [],
                "_ctx": [],
                "info": []
            }
        },
        "TimingTracer.on_field_end": {
            "name": "on_field_end",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "_root": [],
                "_ctx": [],
                "info": []
            }
        },
        "ApolloTracer._field": {
            "name": "_field",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "field_timing": []
            }
        },
        "ApolloTracer.payload": {
            "name": "payload",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "py-gql-master/src/py_gql/_graphql.py": {
        "process_graphql_query": {
            "name": "process_graphql_query",
            "location": 20,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "schema": [
                    "schema.Schema",
                    "Optional[int]",
                    "int",
                    "Callable"
                ],
                "document": [
                    "Union[str, lang.asDocument]",
                    "str"
                ]
            }
        },
        "graphql_blocking": {
            "name": "graphql_blocking",
            "location": 185,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "schema": [
                    "Optional[Mapping[str, Any]]",
                    "Optional[Sequence[validation.Validator]]",
                    "Optional[Sequence[Any]]",
                    "schema.Schema",
                    "Optional[execution.Instrumentation]",
                    "Union[str, lang.asDocument]",
                    "Optional[str]"
                ],
                "document": [
                    "Optional[Mapping[str, Any]]",
                    "Optional[Sequence[validation.Validator]]",
                    "Optional[Sequence[Any]]",
                    "schema.Schema",
                    "Optional[execution.Instrumentation]",
                    "Union[str, lang.asDocument]",
                    "Optional[str]"
                ]
            }
        },
        "process_graphql_query._abort": {
            "name": "_abort",
            "location": 94,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "process_graphql_query._on_end": {
            "name": "_on_end",
            "location": 101,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "result": [
                    "bool",
                    "execution.GraphQLResult",
                    "Exception"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/_pkg.py": {},
    "py-gql-master/src/py_gql/_string_utils.py": {
        "ensure_unicode": {
            "name": "ensure_unicode",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "Union[str, bytes]",
                    "str",
                    "AnyStr",
                    "bytes"
                ]
            }
        },
        "parse_block_string": {
            "name": "parse_block_string",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "raw_string": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "dedent": {
            "name": "dedent",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "raw_string": [
                    "str",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "index_to_loc": {
            "name": "index_to_loc",
            "location": 78,
            "return": [],
            "arguments": {
                "body": [
                    "str",
                    "int",
                    "Tuple[int, int]",
                    "List[int]"
                ],
                "position": [
                    "int",
                    "str",
                    "bytes",
                    "List[int]"
                ]
            }
        },
        "loc_to_index": {
            "name": "loc_to_index",
            "location": 128,
            "return": [
                "int",
                "bool",
                "Tuple[int]",
                "type",
                "Hashable"
            ],
            "arguments": {
                "body": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "dict",
                    "Optional[str]"
                ],
                "loc": [
                    "Tuple[int, int]",
                    "str",
                    "list",
                    "int",
                    "float"
                ]
            }
        },
        "highlight_location": {
            "name": "highlight_location",
            "location": 178,
            "return": [
                "str"
            ],
            "arguments": {
                "body": [
                    "int",
                    "str"
                ],
                "position": [
                    "int",
                    "str"
                ],
                "delta": [
                    "int",
                    "str"
                ]
            }
        },
        "_split_words_with_boundaries": {
            "name": "_split_words_with_boundaries",
            "location": 223,
            "return": [
                "typing.Iterator[builtins.str]"
            ],
            "arguments": {
                "string": [
                    "str",
                    "Mapping[str, str]",
                    "List[str]"
                ],
                "word_boundaries": [
                    "Container[str]",
                    "str",
                    "int",
                    "tuple",
                    "list"
                ]
            }
        },
        "wrapped_lines": {
            "name": "wrapped_lines",
            "location": 246,
            "return": [
                "typing.Iterator[builtins.str]"
            ],
            "arguments": {
                "lines": [
                    "Iterable[str]",
                    "List[str]",
                    "str",
                    "bool"
                ],
                "max_len": [
                    "int",
                    "str"
                ],
                "word_boundaries": [
                    "Container[str]",
                    "str",
                    "List[str]",
                    "List[bytes]"
                ]
            }
        },
        "levenshtein": {
            "name": "levenshtein",
            "location": 283,
            "return": [
                "str"
            ],
            "arguments": {
                "s1": [
                    "str",
                    "bytes"
                ],
                "s2": [
                    "str",
                    "bytes",
                    "int",
                    "List[str]"
                ]
            }
        },
        "infer_suggestions": {
            "name": "infer_suggestions",
            "location": 314,
            "return": [
                "Iterator[int]",
                "int",
                "List[Tuple[str, str]]",
                "str",
                "List[str]",
                "Generator",
                "list"
            ],
            "arguments": {
                "candidate": [
                    "List[T]",
                    "list",
                    "List[int]",
                    "T"
                ],
                "options": [
                    "Iterable[str]",
                    "bool",
                    "int",
                    "Optional[Any]",
                    "List[\"Name\"]",
                    "type"
                ],
                "distance": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "quoted_options_list": {
            "name": "quoted_options_list",
            "location": 343,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "options": [
                    "Sequence[str]",
                    "Union[str, List[str]]",
                    "List[Dict[str, Any]]",
                    "Mapping[str, str]"
                ],
                "final_separator": [
                    "str",
                    "List[Optional[Any]]",
                    "Sequence[str]",
                    "dict",
                    "list",
                    "Match"
                ]
            }
        },
        "stringify_path": {
            "name": "stringify_path",
            "location": 384,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "snakecase_to_camelcase": {
            "name": "snakecase_to_camelcase",
            "location": 410,
            "return": [
                "str",
                "bool",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "value": [
                    "dict",
                    "bool",
                    "List[str]",
                    "str"
                ]
            }
        },
        "camelcase_to_snakecase": {
            "name": "camelcase_to_snakecase",
            "location": 451,
            "return": [
                "bool",
                "str",
                "Set[str]",
                "int"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Union[str, bytes]"
                ]
            }
        },
        "highlight_location.ws": {
            "name": "ws",
            "location": 198,
            "return": [
                "bool"
            ],
            "arguments": {
                "len_": [
                    "int",
                    "float"
                ]
            }
        },
        "highlight_location.lineno": {
            "name": "lineno",
            "location": 201,
            "return": [
                "str"
            ],
            "arguments": {
                "l": [
                    "float",
                    "int",
                    "Iterable[Iterable[float]]"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/_utils.py": {
        "lazy": {
            "name": "lazy",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "maybe_callable": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "map_and_filter": {
            "name": "map_and_filter",
            "location": 59,
            "return": [
                "str",
                "dict",
                "list",
                "Union[int, None]"
            ],
            "arguments": {
                "func": [
                    "Callable[[T], Optional[T]]",
                    "Iterable[T]",
                    "Callable",
                    "Callable[..., T]"
                ],
                "iterable": [
                    "Callable[[T], Optional[T]]",
                    "Iterable[T]",
                    "Callable",
                    "Callable[..., T]"
                ]
            }
        },
        "deduplicate": {
            "name": "deduplicate",
            "location": 72,
            "return": [
                "typing.Iterator[H]"
            ],
            "arguments": {
                "iterable": [
                    "str",
                    "KT",
                    "int",
                    "Optional[str]",
                    "bytes",
                    "Union[str, int]"
                ],
                "key": [
                    "str",
                    "KT",
                    "int",
                    "Optional[str]",
                    "bytes",
                    "Union[str, int]"
                ]
            }
        },
        "maybe_first": {
            "name": "maybe_first",
            "location": 107,
            "return": [
                "Callable",
                "bool",
                "Optional[T]"
            ],
            "arguments": {
                "iterable": [
                    "float",
                    "Iterable[T]",
                    "int",
                    "Tuple[int, int]"
                ],
                "default": [
                    "bool",
                    "str",
                    "int",
                    "Optional[T]",
                    "float",
                    "T",
                    "Callable[[], T]",
                    "Optional"
                ]
            }
        },
        "find_one": {
            "name": "find_one",
            "location": 129,
            "return": [
                "List[str]",
                "List[Dict[str, str]]",
                "str",
                "Tuple[int, int]"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[T]",
                    "Callable[[T], Any]",
                    "Optional[T]",
                    "float",
                    "Optional[int]",
                    "dict"
                ],
                "predicate": [
                    "Iterable[T]",
                    "Callable[[T], Any]",
                    "Optional[T]",
                    "float",
                    "Optional[int]",
                    "dict"
                ],
                "default": [
                    "Iterable[T]",
                    "Callable[[T], Any]",
                    "Optional[T]",
                    "float",
                    "Optional[int]",
                    "dict"
                ]
            }
        },
        "flatten": {
            "name": "flatten",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "lst": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "is_iterable": {
            "name": "is_iterable",
            "location": 180,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "dict",
                    "str",
                    "int",
                    "List[str]",
                    "float"
                ],
                "strings": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "classdispatch": {
            "name": "classdispatch",
            "location": 291,
            "return": [
                "int",
                "dict",
                "Optional[int]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Iterable[str]",
                    "T",
                    "Union[None, str, bytes]",
                    "Union[int, float]"
                ],
                "registry": [
                    "str",
                    "bool",
                    "complex",
                    "float",
                    "SupportsBytes",
                    "Sequence[str]"
                ]
            }
        },
        "apply_middlewares": {
            "name": "apply_middlewares",
            "location": 337,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[[T], bool]",
                    "float"
                ],
                "middlewares": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "deprecated": {
            "name": "deprecated",
            "location": 368,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "reason": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "deprecated.decorator": {
            "name": "decorator",
            "location": 369,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DefaultOrderedDict.__init__": {
            "name": "__init__",
            "location": 230,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "default_factory": [
                    "Optional[str]",
                    "Optional[float]",
                    "int",
                    "Optional[Callable[[str], bool]]",
                    "Optional[int]"
                ]
            }
        },
        "DefaultOrderedDict.__getitem__": {
            "name": "__getitem__",
            "location": 239,
            "return": [
                "bool",
                "Dict[str, str]",
                "list",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict"
                ]
            }
        },
        "DefaultOrderedDict.__missing__": {
            "name": "__missing__",
            "location": 245,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str",
                    "KT",
                    "T"
                ]
            }
        },
        "DefaultOrderedDict.__len__": {
            "name": "__len__",
            "location": 252,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultOrderedDict.__setitem__": {
            "name": "__setitem__",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        },
        "DefaultOrderedDict.__delitem__": {
            "name": "__delitem__",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Optional[str]",
                    "str",
                    "tuple",
                    "Dict[str, str]",
                    "int",
                    "Callable[[KT], VT]",
                    "Type[RuntimeError]"
                ]
            }
        },
        "DefaultOrderedDict.__iter__": {
            "name": "__iter__",
            "location": 261,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DefaultOrderedDict.clear": {
            "name": "clear",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultOrderedDict.keys": {
            "name": "keys",
            "location": 267,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultOrderedDict.values": {
            "name": "values",
            "location": 270,
            "return": [
                "str",
                "int",
                "dict",
                "tuple",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultOrderedDict.items": {
            "name": "items",
            "location": 273,
            "return": [
                "int",
                "List[int]",
                "float",
                "List[float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefaultOrderedDict.pop": {
            "name": "pop",
            "location": 276,
            "return": [
                "str",
                "bytes",
                "float",
                "Awaitable[Any]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Hashable",
                    "str",
                    "int",
                    "Union[int, slice]"
                ]
            }
        },
        "DefaultOrderedDict.__contains__": {
            "name": "__contains__",
            "location": 279,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "DefaultOrderedDict.__bool__": {
            "name": "__bool__",
            "location": 282,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "deprecated.decorator.deprecated_fn": {
            "name": "deprecated_fn",
            "location": 371,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "py-gql-master/src/py_gql/__init__.py": {},
    "py-gql-master/src/py_gql/execution/blocking_executor.py": {
        "BlockingExecutor.execute_fields": {
            "name": "execute_fields",
            "location": 29,
            "return": [
                "str",
                "List[str]",
                "Type",
                "List[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "parent_type": [
                    "schema.ObjectType",
                    "Optional[str]",
                    "schema.GraphQLType"
                ],
                "root": [
                    "wrappers.ResponsePath"
                ],
                "path": [
                    "wrappers.ResponsePath"
                ],
                "fields": [
                    "schema.ObjectType",
                    "wrappers.ResponsePath",
                    "schema.GraphQLType"
                ]
            }
        },
        "BlockingExecutor.resolve_field": {
            "name": "resolve_field",
            "location": 47,
            "return": [
                "Optional[List[str]]",
                "Optional[str]",
                "Optional[List[Any]]",
                "Optional[Union[str, Any]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "parent_type": [
                    "Dict[str, Any]"
                ],
                "parent_value": [
                    "str",
                    "int"
                ],
                "field_definition": [
                    "Dict[str, Any]"
                ],
                "nodes": [
                    "GraphQLType"
                ],
                "path": []
            }
        },
        "BlockingExecutor.complete_list_value": {
            "name": "complete_list_value",
            "location": 82,
            "return": [
                "str",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "inner_type": [],
                "nodes": [],
                "path": [],
                "info": [],
                "resolved_value": []
            }
        },
        "BlockingExecutor.complete_non_nullable_value": {
            "name": "complete_non_nullable_value",
            "location": 95,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "inner_type": [
                    "wrappers.ResolveInfo",
                    "List[lang.asField]",
                    "wrappers.ResponsePath",
                    "schema.GraphQLType"
                ],
                "nodes": [
                    "wrappers.ResolveInfo",
                    "List[lang.asField]",
                    "wrappers.ResponsePath",
                    "schema.GraphQLType"
                ],
                "path": [
                    "wrappers.ResolveInfo",
                    "List[lang.asField]",
                    "wrappers.ResponsePath",
                    "schema.GraphQLType"
                ],
                "info": [
                    "wrappers.ResolveInfo",
                    "List[lang.asField]",
                    "wrappers.ResponsePath",
                    "schema.GraphQLType"
                ],
                "resolved_value": [
                    "wrappers.ResolveInfo",
                    "List[lang.asField]",
                    "wrappers.ResponsePath",
                    "schema.GraphQLType"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/execution/default_resolver.py": {
        "default_resolver": {
            "name": "default_resolver",
            "location": 11,
            "return": [
                "str",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "root": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "Optional[object]",
                    "float"
                ],
                "context": [
                    "str",
                    "bool",
                    "graphql.ResolveInfo",
                    "Optional[bytes]"
                ],
                "info": [
                    "Optional[str]",
                    "Optional[bool]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/execution/execute.py": {
        "execute": {
            "name": "execute",
            "location": 18,
            "return": [
                "Optional[int]",
                "int",
                "float",
                "List[int]",
                "str"
            ],
            "arguments": {
                "schema": [
                    "lang.asDocument",
                    "schema.Schema",
                    "Optional[Any]",
                    "Optional[Sequence[Any]]",
                    "Optional[instrumentation.Instrumentation]",
                    "bool",
                    "Optional[str]",
                    "Optional[Mapping[str, Any]]"
                ],
                "document": [
                    "lang.asDocument",
                    "schema.Schema",
                    "Optional[Any]",
                    "Optional[Sequence[Any]]",
                    "Optional[instrumentation.Instrumentation]",
                    "bool",
                    "Optional[str]",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "execute._on_finish": {
            "name": "_on_finish",
            "location": 112,
            "return": [
                "str",
                "List[str]",
                "Callable",
                "dict"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Union[Dict, List]",
                    "str"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/execution/executor.py": {
        "Executor.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "bool",
                    "Optional[Sequence[Any]]",
                    "Dict[str, Any]",
                    "lang.asDocument",
                    "schema.Schema",
                    "int"
                ],
                "document": [
                    "bool",
                    "Optional[Sequence[Any]]",
                    "Dict[str, Any]",
                    "lang.asDocument",
                    "schema.Schema",
                    "int"
                ],
                "variables": [
                    "bool",
                    "Optional[Sequence[Any]]",
                    "Dict[str, Any]",
                    "lang.asDocument",
                    "schema.Schema",
                    "int"
                ],
                "context_value": [
                    "bool",
                    "Optional[Sequence[Any]]",
                    "Dict[str, Any]",
                    "lang.asDocument",
                    "schema.Schema",
                    "int"
                ]
            }
        },
        "Executor.field_resolver": {
            "name": "field_resolver",
            "location": 95,
            "return": [
                "str",
                "int",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "parent_type": [
                    "schema.Field",
                    "schema.ObjectType",
                    "Optional[AbstractSet[str]]",
                    "recidiviz.persistence.database.schema.state.schema.SchemaSentenceType"
                ],
                "field_definition": [
                    "schema.Field",
                    "schema.ObjectType",
                    "Optional[AbstractSet[str]]",
                    "recidiviz.persistence.database.schema.state.schema.SchemaSentenceType"
                ]
            }
        },
        "Executor.resolve_type": {
            "name": "resolve_type",
            "location": 116,
            "return": [
                "str",
                "Type",
                "Type[Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "type",
                    "Callable"
                ],
                "info": [
                    "wrappers.ResolveInfo",
                    "bool",
                    "Type",
                    "\"alert\""
                ],
                "abstract_type": [
                    "Type",
                    "type",
                    "Optional[str]"
                ]
            }
        },
        "Executor.resolve_field": {
            "name": "resolve_field",
            "location": 142,
            "return": [
                "int",
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "Dict[str, Any]",
                "str",
                "List[int]",
                "Tuple[int, int, int]"
            ],
            "arguments": {
                "self": [],
                "parent_type": [
                    "List[lang.asField]",
                    "wrappers.ResponsePath",
                    "schema.ObjectType",
                    "str"
                ],
                "parent_value": [
                    "List[str]",
                    "str",
                    "List[Tuple[int, Any]]"
                ],
                "field_definition": [
                    "bool",
                    "Tuple[str]"
                ],
                "nodes": [
                    "List[lang.asField]",
                    "wrappers.ResponsePath",
                    "schema.ObjectType",
                    "str"
                ],
                "path": [
                    "List[lang.asField]",
                    "wrappers.ResponsePath",
                    "schema.ObjectType",
                    "str"
                ]
            }
        },
        "Executor._iterate_fields": {
            "name": "_iterate_fields",
            "location": 198,
            "return": [
                "typing.Iterator[typing.Tuple[builtins.str, schema.Field, typing.List[lang.ast.Field]]]"
            ],
            "arguments": {
                "self": [],
                "parent_type": [
                    "str",
                    "List[Dict[str, str]]",
                    "list",
                    "Dict[str, Any]",
                    "Sequence[rflx.model.Field]",
                    "Mapping[rflx.model.Field, rflx.model.Scalar]"
                ],
                "fields": [
                    "wrappers.GroupedFields",
                    "List[Tuple[str, str, str]]",
                    "dict",
                    "Optional[int]",
                    "str",
                    "Union[str, List[str]]"
                ]
            }
        },
        "Executor.execute_fields": {
            "name": "execute_fields",
            "location": 208,
            "return": [
                "int",
                "dict",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "parent_type": [
                    "wrappers.GroupedFields",
                    "schema.ObjectType",
                    "wrappers.ResponsePath"
                ],
                "root": [
                    "wrappers.GroupedFields",
                    "schema.ObjectType",
                    "wrappers.ResponsePath"
                ],
                "path": [
                    "wrappers.GroupedFields",
                    "schema.ObjectType",
                    "wrappers.ResponsePath"
                ],
                "fields": [
                    "wrappers.GroupedFields",
                    "schema.ObjectType",
                    "wrappers.ResponsePath"
                ]
            }
        },
        "Executor.execute_fields_serially": {
            "name": "execute_fields_serially",
            "location": 233,
            "return": [
                "int",
                "List[int]",
                "str",
                "List[str]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "parent_type": [
                    "wrappers.GroupedFields",
                    "schema.ObjectType",
                    "wrappers.ResponsePath"
                ],
                "root": [
                    "wrappers.GroupedFields",
                    "schema.ObjectType",
                    "wrappers.ResponsePath"
                ],
                "path": [
                    "wrappers.GroupedFields",
                    "schema.ObjectType",
                    "wrappers.ResponsePath"
                ],
                "fields": [
                    "wrappers.GroupedFields",
                    "schema.ObjectType",
                    "wrappers.ResponsePath"
                ]
            }
        },
        "Executor.complete_list_value": {
            "name": "complete_list_value",
            "location": 261,
            "return": [],
            "arguments": {
                "self": [],
                "inner_type": [],
                "nodes": [],
                "path": [],
                "info": [],
                "resolved_value": []
            }
        },
        "Executor.complete_non_nullable_value": {
            "name": "complete_non_nullable_value",
            "location": 274,
            "return": [
                "Optional[List[float]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "inner_type": [
                    "str"
                ],
                "nodes": [
                    "str"
                ],
                "path": [
                    "str"
                ],
                "info": [
                    "str"
                ],
                "resolved_value": [
                    "str"
                ]
            }
        },
        "Executor.complete_value": {
            "name": "complete_value",
            "location": 287,
            "return": [
                "Optional[List[schema.NamedType]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "field_type": [
                    "schema.GraphQLType",
                    "Optional[str]"
                ],
                "nodes": [
                    "schema.GraphQLType",
                    "wrappers.ResolveInfo",
                    "List[lang.asField]",
                    "wrappers.ResponsePath",
                    "Type"
                ],
                "path": [
                    "wrappers.ResponsePath",
                    "wrappers.ResolveInfo",
                    "List[lang.asField]",
                    "schema.GraphQLType"
                ],
                "info": [
                    "schema.GraphQLType",
                    "wrappers.ResolveInfo",
                    "List[lang.asField]",
                    "wrappers.ResponsePath",
                    "Type"
                ],
                "resolved_value": [
                    "wrappers.ResolveInfo",
                    "List[lang.asField]",
                    "schema.GraphQLType",
                    "wrappers.ResponsePath"
                ]
            }
        },
        "Executor._handle_non_nullable_value": {
            "name": "_handle_non_nullable_value",
            "location": 374,
            "return": [
                "int",
                "str",
                "tuple",
                "dict",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "str"
                ],
                "path": [
                    "str"
                ],
                "resolved_value": [
                    "Optional[str]",
                    "Optional[Any]",
                    "Dict[str, Any]",
                    "Callable[[], None]",
                    "Tuple[List[str], Optional[Any], Optional[Any]]"
                ]
            }
        },
        "Executor.resolve_field.fail": {
            "name": "fail",
            "location": 160,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "err": [
                    "str",
                    "Tuple[str, str]"
                ]
            }
        },
        "Executor.resolve_field.complete": {
            "name": "complete",
            "location": 167,
            "return": [
                "bool",
                "tuple",
                "str"
            ],
            "arguments": {
                "res": [
                    "List[str]",
                    "str",
                    "Iterable[str]",
                    "Callable"
                ]
            }
        },
        "Executor.execute_fields._collect": {
            "name": "_collect",
            "location": 226,
            "return": [
                "Callable[[], None]",
                "str",
                "bool"
            ],
            "arguments": {
                "done": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, Callable]"
                ]
            }
        },
        "Executor.execute_fields_serially._next": {
            "name": "_next",
            "location": 244,
            "return": [
                "bool",
                "str",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "Executor.execute_fields_serially._next.cb": {
            "name": "cb",
            "location": 251,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int",
                    "T",
                    "bytes",
                    "float"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/execution/get_operation.py": {
        "get_operation": {
            "name": "get_operation",
            "location": 10,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "document": [
                    "str",
                    "int",
                    "Iterable[Iterable[str]]",
                    "bool"
                ],
                "operation_name": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "get_operation_with_type": {
            "name": "get_operation_with_type",
            "location": 57,
            "return": [
                "str",
                "Type",
                "Callable[..., T]",
                "List[Tuple[str]]"
            ],
            "arguments": {
                "schema": [
                    "str"
                ],
                "document": [
                    "str"
                ],
                "operation_name": [
                    "str"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/execution/instrumentation.py": {
        "Instrumentation.on_query_start": {
            "name": "on_query_start",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instrumentation.on_query_end": {
            "name": "on_query_end",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instrumentation.on_parsing_start": {
            "name": "on_parsing_start",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instrumentation.on_parsing_end": {
            "name": "on_parsing_end",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instrumentation.on_validation_start": {
            "name": "on_validation_start",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instrumentation.on_validation_end": {
            "name": "on_validation_end",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instrumentation.on_execution_start": {
            "name": "on_execution_start",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instrumentation.on_execution_end": {
            "name": "on_execution_end",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instrumentation.on_field_start": {
            "name": "on_field_start",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "wrappers.ResolveInfo",
                    "graphql.ResolveInfo",
                    "bool",
                    "List[Tuple[str, str]]",
                    "List[Tuple[str, bool, Any]]"
                ],
                "context": [
                    "wrappers.ResolveInfo",
                    "graphql.ResolveInfo",
                    "bool",
                    "List[Tuple[str, str]]",
                    "List[Tuple[str, bool, Any]]"
                ],
                "info": [
                    "wrappers.ResolveInfo",
                    "graphql.ResolveInfo",
                    "bool",
                    "List[Tuple[str, str]]",
                    "List[Tuple[str, bool, Any]]"
                ]
            }
        },
        "Instrumentation.on_field_end": {
            "name": "on_field_end",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "wrappers.ResolveInfo",
                    "Callable[[], None]",
                    "list",
                    "bool"
                ],
                "context": [
                    "wrappers.ResolveInfo",
                    "Callable[[], None]",
                    "list",
                    "bool"
                ],
                "info": [
                    "wrappers.ResolveInfo",
                    "Callable[[], None]",
                    "list",
                    "bool"
                ]
            }
        },
        "MultiInstrumentation.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiInstrumentation.on_query_start": {
            "name": "on_query_start",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiInstrumentation.on_query_end": {
            "name": "on_query_end",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiInstrumentation.on_parsing_start": {
            "name": "on_parsing_start",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiInstrumentation.on_parsing_end": {
            "name": "on_parsing_end",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiInstrumentation.on_validation_start": {
            "name": "on_validation_start",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiInstrumentation.on_validation_end": {
            "name": "on_validation_end",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiInstrumentation.on_execution_start": {
            "name": "on_execution_start",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiInstrumentation.on_execution_end": {
            "name": "on_execution_end",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiInstrumentation.on_field_start": {
            "name": "on_field_start",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "wrappers.ResolveInfo",
                    "Callable",
                    "Optional[Dict]",
                    "int"
                ],
                "context": [
                    "wrappers.ResolveInfo",
                    "Callable",
                    "Optional[Dict]",
                    "int"
                ],
                "info": [
                    "wrappers.ResolveInfo",
                    "Callable",
                    "Optional[Dict]",
                    "int"
                ]
            }
        },
        "MultiInstrumentation.on_field_end": {
            "name": "on_field_end",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "wrappers.ResolveInfo",
                    "bool",
                    "dict",
                    "graphql.ResolveInfo"
                ],
                "context": [
                    "wrappers.ResolveInfo",
                    "bool",
                    "dict",
                    "graphql.ResolveInfo"
                ],
                "info": [
                    "wrappers.ResolveInfo",
                    "bool",
                    "dict",
                    "graphql.ResolveInfo"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/execution/subscribe.py": {
        "subscribe": {
            "name": "subscribe",
            "location": 20,
            "return": [
                "Optional[int]",
                "float",
                "int",
                "List[int]"
            ],
            "arguments": {
                "schema": [
                    "lang.asDocument",
                    "schema.Schema",
                    "Optional[Any]",
                    "Optional[Sequence[Any]]",
                    "Optional[instrumentation.Instrumentation]",
                    "bool",
                    "Optional[str]",
                    "Optional[Mapping[str, Any]]"
                ],
                "document": [
                    "lang.asDocument",
                    "schema.Schema",
                    "Optional[Any]",
                    "Optional[Sequence[Any]]",
                    "Optional[instrumentation.Instrumentation]",
                    "bool",
                    "Optional[str]",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "create_source_event_stream": {
            "name": "create_source_event_stream",
            "location": 125,
            "return": [
                "bool"
            ],
            "arguments": {
                "executor": [
                    "str",
                    "list",
                    "Sequence[Tuple[str, Any]]",
                    "bool",
                    "Optional[str]"
                ],
                "root_type": [
                    "str",
                    "list",
                    "Sequence[Tuple[str, Any]]",
                    "bool",
                    "Optional[str]"
                ],
                "operation": [
                    "str"
                ],
                "initial_value": [
                    "Optional[Any]",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "execute_subscription_event": {
            "name": "execute_subscription_event",
            "location": 167,
            "return": [
                "List[dict]",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "executor": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Mapping"
                ],
                "root_type": [
                    "schema.ObjectType",
                    "lang.asOperationDefinition",
                    "int",
                    "List[str]",
                    "str"
                ],
                "operation": [
                    "schema.ObjectType",
                    "lang.asOperationDefinition",
                    "int",
                    "List[str]",
                    "str"
                ],
                "event": [
                    "schema.ObjectType",
                    "lang.asOperationDefinition",
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        },
        "subscribe._on_stream_created": {
            "name": "_on_stream_created",
            "location": 109,
            "return": [
                "Optional[str]",
                "List[str]",
                "int",
                "bytes",
                "Dict[str, Union[str, Set]]",
                "Sequence",
                "str",
                "Callable"
            ],
            "arguments": {
                "source_stream": [
                    "str",
                    "int",
                    "Optional[Dict]",
                    "Callable"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/execution/wrappers.py": {
        "ResolutionContext.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int",
                    "Optional[List[str]]"
                ],
                "document": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int",
                    "Optional[List[str]]"
                ],
                "variables": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int",
                    "Optional[List[str]]"
                ],
                "context_value": [
                    "bool",
                    "List[str]",
                    "Optional[List]",
                    "dict",
                    "str",
                    "Tuple[List[str], Optional[str]]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "ResolutionContext.add_error": {
            "name": "add_error",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "err": [],
                "path": [
                    "Optional[str]"
                ],
                "node": [
                    "Optional[lang.asNode]",
                    "Type",
                    "Optional[Any]",
                    "int",
                    "bool"
                ]
            }
        },
        "ResolutionContext.errors": {
            "name": "errors",
            "location": 116,
            "return": [
                "str",
                "List[Tuple[str, str]]",
                "bool",
                "List[Callable]",
                "Optional[Dict[str, Any]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResolutionContext.clear_errors": {
            "name": "clear_errors",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResolutionContext.collect_fields": {
            "name": "collect_fields",
            "location": 128,
            "return": [
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "parent_type": [
                    "Dict[str, Any]",
                    "bool",
                    "type"
                ],
                "selections": [
                    "Dict[str, Any]",
                    "bool",
                    "type"
                ],
                "visited_fragments": [
                    "Optional[Set[str]]",
                    "str"
                ]
            }
        },
        "ResolutionContext.field_definition": {
            "name": "field_definition",
            "location": 149,
            "return": [
                "Optional[float]",
                "Optional[str]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "parent_type": [
                    "str",
                    "bool"
                ],
                "name": [
                    "str",
                    "Iterable",
                    "Optional[str]",
                    "Dict[str, bool]"
                ]
            }
        },
        "ResolutionContext.argument_values": {
            "name": "argument_values",
            "location": 176,
            "return": [
                "str",
                "bytearray",
                "MutableMapping[str, Any]",
                "Union[str, bytes]"
            ],
            "arguments": {
                "self": [],
                "field_definition": [
                    "bool",
                    "Type[\"SerializationDialect\"]"
                ],
                "node": [
                    "bool",
                    "Type[\"SerializationDialect\"]"
                ]
            }
        },
        "ResolveInfo.__init__": {
            "name": "__init__",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "field_definition": [
                    "List[List[int]]",
                    "str",
                    "float",
                    "Dict[int, int]",
                    "bool"
                ],
                "path": [
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "str",
                    "Sequence[Optional[str]]",
                    "Optional[int]",
                    "bool"
                ],
                "parent_type": [
                    "Optional[str]",
                    "bool"
                ],
                "nodes": [
                    "List[List[int]]",
                    "str",
                    "float",
                    "Dict[int, int]",
                    "bool"
                ],
                "runtime": [
                    "List[List[int]]",
                    "str",
                    "float",
                    "Dict[int, int]",
                    "bool"
                ],
                "context": [
                    "List[List[int]]",
                    "str",
                    "float",
                    "Dict[int, int]",
                    "bool"
                ]
            }
        },
        "ResolveInfo.schema": {
            "name": "schema",
            "location": 233,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResolveInfo.variables": {
            "name": "variables",
            "location": 240,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResolveInfo.fragments": {
            "name": "fragments",
            "location": 247,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResolveInfo.get_directive_arguments": {
            "name": "get_directive_arguments",
            "location": 253,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict"
                ]
            }
        },
        "ResolveInfo.selected_fields": {
            "name": "selected_fields",
            "location": 278,
            "return": [
                "str",
                "Dict[str, Any]",
                "Callable[..., None]",
                "Tuple[type]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphQLExtension.payload": {
            "name": "payload",
            "location": 303,
            "return": [
                "typing.Dict[builtins.str, typing.Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphQLExtension.name": {
            "name": "name",
            "location": 310,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphQLResult.__init__": {
            "name": "__init__",
            "location": 336,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Callable[[Any], None]",
                    "dict",
                    "int"
                ],
                "errors": [
                    "wtforms.Field",
                    "bool",
                    "Exception"
                ]
            }
        },
        "GraphQLResult.__bool__": {
            "name": "__bool__",
            "location": 347,
            "return": [
                "str",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphQLResult.__iter__": {
            "name": "__iter__",
            "location": 350,
            "return": [
                "str",
                "IO",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphQLResult.add_extension": {
            "name": "add_extension",
            "location": 353,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ext": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "GraphQLResult.response": {
            "name": "response",
            "location": 367,
            "return": [
                "str",
                "Dict[str, bool]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphQLResult.json": {
            "name": "json",
            "location": 382,
            "return": [
                "List[str]",
                "str",
                "Dict[str, dict]",
                "Tuple[str, Optional[int]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "py-gql-master/src/py_gql/execution/__init__.py": {},
    "py-gql-master/src/py_gql/execution/runtime/asyncio.py": {
        "_isawaitable_fast": {
            "name": "_isawaitable_fast",
            "location": 185,
            "return": [
                "float",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "value": [
                    "T",
                    "Optional[str]",
                    "bool",
                    "Callable",
                    "type"
                ],
                "cache": [
                    "str",
                    "bool",
                    "int",
                    "Tuple[Any, Any]"
                ],
                "__isawaitable": [
                    "str",
                    "int",
                    "bool",
                    "Optional[bool]",
                    "list"
                ]
            }
        },
        "AsyncIORuntime.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[Dict]"
                ],
                "execute_blocking_functions_in_thread": [
                    "bool"
                ]
            }
        },
        "AsyncIORuntime.submit": {
            "name": "submit",
            "location": 47,
            "return": [
                "bool",
                "Optional[bool]",
                "Optional[str]",
                "Optional[Sequence[str]]",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": [],
                "fn": []
            }
        },
        "AsyncIORuntime.ensure_wrapped": {
            "name": "ensure_wrapped",
            "location": 61,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "AsyncIORuntime.gather_values": {
            "name": "gather_values",
            "location": 70,
            "return": [
                "int",
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "str",
                    "Optional[Tuple[Any, Any]]",
                    "Callable",
                    "dict",
                    "Iterable[Any]",
                    "bool"
                ]
            }
        },
        "AsyncIORuntime.map_value": {
            "name": "map_value",
            "location": 104,
            "return": [
                "int",
                "bool",
                "float",
                "tuple",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "str"
                ],
                "then": [
                    "bool",
                    "str"
                ],
                "else_": [
                    "Optional[Tuple[Any, Any]]",
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "AsyncIORuntime.unwrap_value": {
            "name": "unwrap_value",
            "location": 130,
            "return": [
                "Optional[float]",
                "str",
                "bool",
                "Union[int, Tuple[int, ...]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[Tuple[Any, Any]]",
                    "Callable",
                    "dict",
                    "Iterable[Any]",
                    "bool"
                ]
            }
        },
        "AsyncIORuntime.map_stream": {
            "name": "map_stream",
            "location": 144,
            "return": [
                "str",
                "Optional[str]",
                "list",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "source_stream": [
                    "AsyncIterator[T]",
                    "str",
                    "Optional[float]",
                    "int",
                    "Iterable",
                    "Optional[int]"
                ],
                "map_value": [
                    "AsyncIterator[T]",
                    "str",
                    "Optional[float]",
                    "int",
                    "Iterable",
                    "Optional[int]"
                ]
            }
        },
        "AsyncIORuntime.wrap_callable": {
            "name": "wrap_callable",
            "location": 151,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "AsyncMap.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source_stream": [
                    "Optional[str]",
                    "List[str]",
                    "str",
                    "int"
                ],
                "map_value": [
                    "bool",
                    "int",
                    "List[float]",
                    "T",
                    "Dict[str, Tuple[str, str]]"
                ]
            }
        },
        "AsyncMap.__aiter__": {
            "name": "__aiter__",
            "location": 176,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "py-gql-master/src/py_gql/execution/runtime/base.py": {
        "Runtime.submit": {
            "name": "submit",
            "location": 25,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Runtime.ensure_wrapped": {
            "name": "ensure_wrapped",
            "location": 32,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "Runtime.gather_values": {
            "name": "gather_values",
            "location": 43,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "str",
                    "Optional[Tuple[Any, Any]]",
                    "Callable",
                    "dict",
                    "Iterable[Any]",
                    "bool"
                ]
            }
        },
        "Runtime.map_value": {
            "name": "map_value",
            "location": 52,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[Tuple[Any, Any]]",
                    "Callable",
                    "dict",
                    "Iterable[Any]",
                    "bool"
                ],
                "then": [
                    "str",
                    "Optional[Tuple[Any, Any]]",
                    "Callable",
                    "dict",
                    "Iterable[Any]",
                    "bool"
                ],
                "else_": [
                    "str",
                    "Optional[Tuple[Any, Any]]",
                    "Callable",
                    "dict",
                    "Iterable[Any]",
                    "bool"
                ]
            }
        },
        "Runtime.unwrap_value": {
            "name": "unwrap_value",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[Tuple[Any, Any]]",
                    "Callable",
                    "dict",
                    "Iterable[Any]",
                    "bool"
                ]
            }
        },
        "Runtime.wrap_callable": {
            "name": "wrap_callable",
            "location": 80,
            "return": [
                "AnyFn"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "SubscriptionRuntime.map_stream": {
            "name": "map_stream",
            "location": 97,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "source_stream": [
                    "Callable",
                    "Optional[str]",
                    "str",
                    "bool",
                    "Sequence[str]",
                    "Iterable[str]"
                ],
                "map_value": [
                    "Callable",
                    "Optional[str]",
                    "str",
                    "bool",
                    "Sequence[str]",
                    "Iterable[str]"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/execution/runtime/blocking.py": {
        "BlockingRuntime.submit": {
            "name": "submit",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "tuple",
                    "List[str]",
                    "list",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "BlockingRuntime.ensure_wrapped": {
            "name": "ensure_wrapped",
            "location": 22,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "BlockingRuntime.gather_values": {
            "name": "gather_values",
            "location": 25,
            "return": [
                "List[int]",
                "str",
                "set",
                "int"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "str",
                    "Iterable[Any]",
                    "bytes",
                    "Iterable[str]"
                ]
            }
        },
        "BlockingRuntime.map_value": {
            "name": "map_value",
            "location": 28,
            "return": [
                "str",
                "int",
                "tuple",
                "List[int]",
                "Callable[[Mapping], T]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Callable[[Any], T]",
                    "float"
                ],
                "then": [
                    "Callable[[Any], T]",
                    "float"
                ],
                "else_": [
                    "Optional[Tuple[Any, Any]]",
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "BlockingRuntime.unwrap_value": {
            "name": "unwrap_value",
            "location": 41,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[Tuple[Any, Any]]",
                    "Callable",
                    "dict",
                    "Iterable[Any]",
                    "bool"
                ]
            }
        },
        "BlockingRuntime.wrap_callable": {
            "name": "wrap_callable",
            "location": 44,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/execution/runtime/threadpool.py": {
        "_is_future_fast": {
            "name": "_is_future_fast",
            "location": 65,
            "return": [],
            "arguments": {
                "value": [],
                "cache": [],
                "__isinstance": [],
                "__future": []
            }
        },
        "unwrap_future": {
            "name": "unwrap_future",
            "location": 74,
            "return": [],
            "arguments": {
                "maybe_future": []
            }
        },
        "gather_futures": {
            "name": "gather_futures",
            "location": 98,
            "return": [],
            "arguments": {
                "source": []
            }
        },
        "chain": {
            "name": "chain",
            "location": 178,
            "return": [],
            "arguments": {
                "source": [],
                "then": [],
                "else_": []
            }
        },
        "ThreadPoolRuntime.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ThreadPoolRuntime.submit": {
            "name": "submit",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "ThreadPoolRuntime.ensure_wrapped": {
            "name": "ensure_wrapped",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ThreadPoolRuntime.map_value": {
            "name": "map_value",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "then": [],
                "else_": []
            }
        },
        "ThreadPoolRuntime.gather_values": {
            "name": "gather_values",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "values": []
            }
        },
        "ThreadPoolRuntime.unwrap_value": {
            "name": "unwrap_value",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ThreadPoolRuntime.wrap_callable": {
            "name": "wrap_callable",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "gather_futures.handle_cancel": {
            "name": "handle_cancel",
            "location": 141,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "gather_futures.on_finish": {
            "name": "on_finish",
            "location": 146,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "unwrap_future.cb": {
            "name": "cb",
            "location": 79,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "chain.on_finish": {
            "name": "on_finish",
            "location": 199,
            "return": [],
            "arguments": {
                "f": []
            }
        }
    },
    "py-gql-master/src/py_gql/execution/runtime/__init__.py": {},
    "py-gql-master/src/py_gql/lang/ast.py": {
        "_ast_to_json": {
            "name": "_ast_to_json",
            "location": 959,
            "return": [
                "Dict[str, Any]",
                "str",
                "int",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "node": [
                    "dict",
                    "str"
                ]
            }
        },
        "Node._props": {
            "name": "_props",
            "location": 32,
            "return": [
                "typing.Iterator[builtins.str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__eq__": {
            "name": "__eq__",
            "location": 37,
            "return": [
                "Mapping[str, Any]",
                "Optional[Dict[str, str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "rhs": [
                    "int",
                    "bool",
                    "Iterable[int]",
                    "Iterable[Type]"
                ]
            }
        },
        "Node.__hash__": {
            "name": "__hash__",
            "location": 42,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__repr__": {
            "name": "__repr__",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__copy__": {
            "name": "__copy__",
            "location": 53,
            "return": [
                "Type",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "memo": [
                    "bool",
                    "str",
                    "float",
                    "Optional[Exception]"
                ]
            }
        },
        "Node.deepcopy": {
            "name": "deepcopy",
            "location": 67,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.to_dict": {
            "name": "to_dict",
            "location": 70,
            "return": [
                "int",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Name.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bytes",
                    "List[str]",
                    "dict",
                    "str",
                    "IO[bytes]",
                    "int",
                    "list"
                ],
                "source": [
                    "str",
                    "list",
                    "List[str]",
                    "bytes",
                    "Optional[bool]"
                ],
                "loc": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "NamedType.__init__": {
            "name": "__init__",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "source": [
                    "str",
                    "Mapping[str, str]",
                    "Optional[Callable[..., Any]]",
                    "Optional[float]"
                ],
                "loc": [
                    "str",
                    "bool",
                    "Optional[Mapping]",
                    "Type['AbstractIntegrationConversation']",
                    "int",
                    "Callable"
                ]
            }
        },
        "ListType.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type": [
                    "List[str]",
                    "Tuple[type]",
                    "str",
                    "dict",
                    "float"
                ],
                "source": [
                    "str",
                    "bytes",
                    "Optional[int]",
                    "Exception"
                ],
                "loc": [
                    "List[str]",
                    "Tuple[type]",
                    "str",
                    "dict",
                    "float"
                ]
            }
        },
        "NonNullType.__init__": {
            "name": "__init__",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type": [
                    "List[str]",
                    "Tuple[type]",
                    "str",
                    "dict",
                    "float"
                ],
                "source": [
                    "str",
                    "bytes",
                    "Optional[int]",
                    "Exception"
                ],
                "loc": [
                    "List[str]",
                    "Tuple[type]",
                    "str",
                    "dict",
                    "float"
                ]
            }
        },
        "Document.__init__": {
            "name": "__init__",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "definitions": [
                    "int",
                    "str",
                    "Optional[str]",
                    "float",
                    "list"
                ],
                "source": [
                    "str",
                    "Dict[str, str]",
                    "bool"
                ],
                "loc": [
                    "int",
                    "str",
                    "Optional[str]",
                    "float",
                    "list"
                ]
            }
        },
        "Document.fragments": {
            "name": "fragments",
            "location": 182,
            "return": [
                "List[str]",
                "Set[str]",
                "Set[int]",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OperationDefinition.__init__": {
            "name": "__init__",
            "location": 201,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "operation": [
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "selection_set": [
                    "bool",
                    "Optional[str]",
                    "List[int]"
                ],
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "variable_definitions": [
                    "str",
                    "dict",
                    "Tuple[type]",
                    "int",
                    "List[str]",
                    "Union[str, bytes]",
                    "Optional[List[Any]]",
                    "Sequence[str]"
                ],
                "directives": [
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "source": [
                    "str",
                    "Union[bytes, str]",
                    "Optional[str]",
                    "dict"
                ],
                "loc": [
                    "Optional[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "Variable.__init__": {
            "name": "__init__",
            "location": 225,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "source": [
                    "str",
                    "Mapping[str, str]",
                    "Optional[Callable[..., Any]]",
                    "Optional[float]"
                ],
                "loc": [
                    "str",
                    "bool",
                    "Optional[Mapping]",
                    "Type['AbstractIntegrationConversation']",
                    "int",
                    "Callable"
                ]
            }
        },
        "VariableDefinition.__init__": {
            "name": "__init__",
            "location": 246,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "variable": [
                    "int",
                    "str",
                    "Optional[List[Any]]"
                ],
                "type": [
                    "int",
                    "str",
                    "Optional[List[Any]]"
                ],
                "default_value": [
                    "str",
                    "Callable",
                    "list"
                ],
                "directives": [
                    "int",
                    "str",
                    "Optional[List[Any]]"
                ],
                "source": [
                    "str",
                    "bool",
                    "Optional[float]",
                    "Optional[Union[int, str]]",
                    "int"
                ],
                "loc": [
                    "int",
                    "str",
                    "Optional[List[Any]]"
                ]
            }
        },
        "SelectionSet.__init__": {
            "name": "__init__",
            "location": 270,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "selections": [
                    "int",
                    "str",
                    "Optional[str]",
                    "float",
                    "list"
                ],
                "source": [
                    "str",
                    "Dict[str, str]",
                    "bool"
                ],
                "loc": [
                    "int",
                    "str",
                    "Optional[str]",
                    "float",
                    "list"
                ]
            }
        },
        "Field.__init__": {
            "name": "__init__",
            "location": 292,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[Sequence[Any]]",
                    "Optional[Dict[str, str]]",
                    "bool"
                ],
                "alias": [
                    "bool",
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "arguments": [
                    "bool",
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "directives": [
                    "bool",
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "selection_set": [
                    "int",
                    "List['cirq.Circuit']",
                    "Pattern",
                    "Optional[str]",
                    "Optional[Set[str]]",
                    "Iterable[Any]"
                ],
                "source": [
                    "str",
                    "float",
                    "Optional[int]"
                ],
                "loc": [
                    "bool",
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "Field.response_name": {
            "name": "response_name",
            "location": 311,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Argument.__init__": {
            "name": "__init__",
            "location": 318,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[bytes]"
                ],
                "value": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "source": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "Callable[[str], Any]",
                    "bool"
                ],
                "loc": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "Dict[int, int]"
                ]
            }
        },
        "FragmentSpread.__init__": {
            "name": "__init__",
            "location": 334,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Exception",
                    "dict"
                ],
                "directives": [
                    "int",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "source": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "loc": [
                    "int",
                    "Optional[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "InlineFragment.__init__": {
            "name": "__init__",
            "location": 356,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "selection_set": [
                    "str",
                    "int",
                    "dict",
                    "Container[T]",
                    "Set[str]",
                    "Iterable[Any]"
                ],
                "type_condition": [
                    "int",
                    "str",
                    "Iterable['cirq.Qid']",
                    "set"
                ],
                "directives": [
                    "str",
                    "int",
                    "Callable[[str], Any]"
                ],
                "source": [
                    "int",
                    "bool",
                    "Mapping[str, str]",
                    "Optional[Callable[..., Any]]",
                    "str",
                    "List[str]"
                ],
                "loc": [
                    "str",
                    "int",
                    "Callable[[str], Any]"
                ]
            }
        },
        "FragmentDefinition.__init__": {
            "name": "__init__",
            "location": 381,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ],
                "type_condition": [
                    "bool",
                    "str",
                    "Sequence[str]",
                    "int"
                ],
                "selection_set": [
                    "int",
                    "List[str]",
                    "Tuple[str, Optional[str]]",
                    "str",
                    "Container[T]",
                    "List['cirq.Circuit']"
                ],
                "variable_definitions": [
                    "Optional[str]",
                    "int",
                    "str"
                ],
                "directives": [
                    "Optional[List[str]]",
                    "bool",
                    "Optional[str]",
                    "Union[None, int, str]"
                ],
                "source": [
                    "str",
                    "float",
                    "Mapping[str, str]",
                    "int"
                ],
                "loc": [
                    "Optional[List[str]]",
                    "bool",
                    "Optional[str]",
                    "Union[None, int, str]"
                ]
            }
        },
        "_StringValue.__init__": {
            "name": "__init__",
            "location": 405,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bytes",
                    "List[str]",
                    "dict",
                    "str",
                    "IO[bytes]",
                    "int",
                    "list"
                ],
                "source": [
                    "str",
                    "list",
                    "List[str]",
                    "bytes",
                    "Optional[bool]"
                ],
                "loc": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "_StringValue.__str__": {
            "name": "__str__",
            "location": 415,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringValue.__init__": {
            "name": "__init__",
            "location": 430,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict",
                    "bool",
                    "Tuple[str]"
                ],
                "block": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "Callable",
                    "Set[str]",
                    "int"
                ],
                "source": [
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "loc": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "Callable",
                    "Set[str]",
                    "int"
                ]
            }
        },
        "StringValue.__str__": {
            "name": "__str__",
            "location": 442,
            "return": [
                "str",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BooleanValue.__init__": {
            "name": "__init__",
            "location": 452,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bytes",
                    "List[str]",
                    "dict",
                    "str",
                    "IO[bytes]",
                    "int",
                    "list"
                ],
                "source": [
                    "str",
                    "list",
                    "List[str]",
                    "bytes",
                    "Optional[bool]"
                ],
                "loc": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "BooleanValue.__str__": {
            "name": "__str__",
            "location": 462,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullValue.__init__": {
            "name": "__init__",
            "location": 469,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Optional[str]",
                    "str",
                    "bool"
                ],
                "loc": [
                    "str",
                    "Optional[str]",
                    "Callable",
                    "list"
                ]
            }
        },
        "NullValue.__str__": {
            "name": "__str__",
            "location": 477,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListValue.__init__": {
            "name": "__init__",
            "location": 488,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "values": [
                    "bytes",
                    "List[str]",
                    "dict",
                    "str",
                    "IO[bytes]",
                    "int",
                    "list"
                ],
                "source": [
                    "str",
                    "list",
                    "List[str]",
                    "bytes",
                    "Optional[bool]"
                ],
                "loc": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "ObjectValue.__init__": {
            "name": "__init__",
            "location": 502,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "AbstractSet[str]",
                    "Container[str]",
                    "Dict[str, Any]",
                    "List[str]",
                    "str",
                    "set"
                ],
                "source": [
                    "Tuple[str, bool]",
                    "Optional[str]",
                    "bool",
                    "list"
                ],
                "loc": [
                    "List[str]",
                    "Callable[[Any, Any], Any]",
                    "bool",
                    "Exception",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ObjectField.__init__": {
            "name": "__init__",
            "location": 516,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[bytes]"
                ],
                "value": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "source": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "Callable[[str], Any]",
                    "bool"
                ],
                "loc": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "Dict[int, int]"
                ]
            }
        },
        "Directive.__init__": {
            "name": "__init__",
            "location": 532,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Exception",
                    "dict"
                ],
                "arguments": [
                    "int",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "source": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "loc": [
                    "int",
                    "Optional[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "SchemaDefinition.__init__": {
            "name": "__init__",
            "location": 556,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "directives": [
                    "bool",
                    "int",
                    "Dict[int, int]",
                    "Optional[str]",
                    "List[str]"
                ],
                "operation_types": [
                    "str",
                    "bool",
                    "int",
                    "Optional[bool]",
                    "Sequence[str]"
                ],
                "source": [
                    "str",
                    "bytes"
                ],
                "loc": [
                    "bool",
                    "int",
                    "Dict[int, int]",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "OperationTypeDefinition.__init__": {
            "name": "__init__",
            "location": 574,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "operation": [
                    "str",
                    "bool",
                    "Dict[int, int]",
                    "Callable",
                    "Optional[List[str]]"
                ],
                "type": [
                    "str",
                    "bool",
                    "Dict[int, int]",
                    "Callable",
                    "Optional[List[str]]"
                ],
                "source": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "loc": [
                    "str",
                    "bool",
                    "Dict[int, int]",
                    "Callable",
                    "Optional[List[str]]"
                ]
            }
        },
        "ScalarTypeDefinition.__init__": {
            "name": "__init__",
            "location": 594,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "directives": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Union[None, int, str]"
                ],
                "source": [
                    "str",
                    "int",
                    "dict",
                    "Optional[str]"
                ],
                "loc": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Union[None, int, str]"
                ],
                "description": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Union[None, int, str]"
                ]
            }
        },
        "ObjectTypeDefinition.__init__": {
            "name": "__init__",
            "location": 620,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]",
                    "str",
                    "bool"
                ],
                "interfaces": [
                    "bool",
                    "Optional[List[str]]",
                    "Optional[str]"
                ],
                "directives": [
                    "bool",
                    "Optional[List[str]]",
                    "Optional[str]"
                ],
                "fields": [
                    "Iterable[str]",
                    "str",
                    "list",
                    "Optional[Sequence[str]]",
                    "bool",
                    "T"
                ],
                "source": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "loc": [
                    "bool",
                    "Optional[List[str]]",
                    "Optional[str]"
                ],
                "description": [
                    "bool",
                    "Optional[List[str]]",
                    "Optional[str]"
                ]
            }
        },
        "FieldDefinition.__init__": {
            "name": "__init__",
            "location": 650,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Callable[[Any], str]",
                    "Dict[str, str]"
                ],
                "type": [
                    "Optional[List[str]]",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "arguments": [
                    "Optional[List[str]]",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "directives": [
                    "Optional[List[str]]",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "source": [
                    "str",
                    "Mapping[str, str]",
                    "int"
                ],
                "loc": [
                    "Optional[List[str]]",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "description": [
                    "Optional[List[str]]",
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "InputValueDefinition.__init__": {
            "name": "__init__",
            "location": 680,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Callable[[Any], str]",
                    "Dict[str, str]"
                ],
                "type": [
                    "Optional[List[str]]",
                    "bool"
                ],
                "default_value": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Sequence[Dict[str, str]]",
                    "Optional[List[str]]",
                    "int"
                ],
                "directives": [
                    "Optional[List[str]]",
                    "bool"
                ],
                "source": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ],
                "loc": [
                    "Optional[List[str]]",
                    "bool"
                ],
                "description": [
                    "Optional[List[str]]",
                    "bool"
                ]
            }
        },
        "InterfaceTypeDefinition.__init__": {
            "name": "__init__",
            "location": 702,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "directives": [
                    "Optional[str]",
                    "bool",
                    "Union[None, int, str]"
                ],
                "fields": [
                    "Iterable[str]",
                    "str",
                    "list",
                    "bool",
                    "Sequence[str]"
                ],
                "source": [
                    "str",
                    "int",
                    "Optional[str]",
                    "dict"
                ],
                "loc": [
                    "Optional[str]",
                    "bool",
                    "Union[None, int, str]"
                ],
                "description": [
                    "Optional[str]",
                    "bool",
                    "Union[None, int, str]"
                ]
            }
        },
        "UnionTypeDefinition.__init__": {
            "name": "__init__",
            "location": 722,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]",
                    "Optional[List[str]]"
                ],
                "directives": [
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "str",
                    "Optional[List[Any]]",
                    "Callable",
                    "Tuple[type]"
                ],
                "types": [
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "str",
                    "Optional[List[Any]]",
                    "Callable",
                    "Tuple[type]"
                ],
                "source": [
                    "str",
                    "Optional[str]",
                    "Mapping[str, str]",
                    "int",
                    "bool"
                ],
                "loc": [
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "str",
                    "Optional[List[Any]]",
                    "Callable",
                    "Tuple[type]"
                ],
                "description": [
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "str",
                    "Optional[List[Any]]",
                    "Callable",
                    "Tuple[type]"
                ]
            }
        },
        "EnumTypeDefinition.__init__": {
            "name": "__init__",
            "location": 742,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "directives": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "str"
                ],
                "values": [
                    "str",
                    "dict",
                    "tuple",
                    "list",
                    "Optional[str]"
                ],
                "source": [
                    "str",
                    "int",
                    "dict",
                    "Optional[str]"
                ],
                "loc": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "str"
                ],
                "description": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "EnumValueDefinition.__init__": {
            "name": "__init__",
            "location": 762,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "directives": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Union[None, int, str]"
                ],
                "source": [
                    "str",
                    "int",
                    "dict",
                    "Optional[str]"
                ],
                "loc": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Union[None, int, str]"
                ],
                "description": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Union[None, int, str]"
                ]
            }
        },
        "InputObjectTypeDefinition.__init__": {
            "name": "__init__",
            "location": 780,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "directives": [
                    "Optional[str]",
                    "bool",
                    "Union[None, int, str]"
                ],
                "fields": [
                    "Iterable[str]",
                    "str",
                    "list",
                    "bool",
                    "Sequence[str]"
                ],
                "source": [
                    "str",
                    "int",
                    "Optional[str]",
                    "dict"
                ],
                "loc": [
                    "Optional[str]",
                    "bool",
                    "Union[None, int, str]"
                ],
                "description": [
                    "Optional[str]",
                    "bool",
                    "Union[None, int, str]"
                ]
            }
        },
        "SchemaExtension.__init__": {
            "name": "__init__",
            "location": 804,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "directives": [
                    "bool",
                    "int",
                    "Dict[int, int]",
                    "Optional[str]",
                    "List[str]"
                ],
                "operation_types": [
                    "str",
                    "bool",
                    "int",
                    "Optional[bool]",
                    "Sequence[str]"
                ],
                "source": [
                    "str",
                    "bytes"
                ],
                "loc": [
                    "bool",
                    "int",
                    "Dict[int, int]",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "ScalarTypeExtension.__init__": {
            "name": "__init__",
            "location": 826,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Exception",
                    "dict"
                ],
                "directives": [
                    "int",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "source": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "loc": [
                    "int",
                    "Optional[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "ObjectTypeExtension.__init__": {
            "name": "__init__",
            "location": 842,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ],
                "interfaces": [
                    "bool",
                    "Optional[List[str]]",
                    "int",
                    "Optional[str]"
                ],
                "directives": [
                    "bool",
                    "Optional[List[str]]",
                    "int",
                    "Optional[str]"
                ],
                "fields": [
                    "str",
                    "list",
                    "bool",
                    "List[str]",
                    "Sequence[str]"
                ],
                "source": [
                    "str",
                    "Mapping[str, str]",
                    "Optional[str]",
                    "Optional[Callable[..., Any]]",
                    "int"
                ],
                "loc": [
                    "bool",
                    "Optional[List[str]]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "InterfaceTypeExtension.__init__": {
            "name": "__init__",
            "location": 862,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "OrderedDict",
                    "Dict[str, str]"
                ],
                "directives": [
                    "bool",
                    "int",
                    "Optional[List[str]]"
                ],
                "fields": [
                    "str",
                    "int",
                    "bool",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "source": [
                    "str",
                    "Mapping[str, str]",
                    "int",
                    "Optional[Callable[..., Any]]"
                ],
                "loc": [
                    "bool",
                    "int",
                    "Optional[List[str]]"
                ]
            }
        },
        "UnionTypeExtension.__init__": {
            "name": "__init__",
            "location": 880,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "Optional[bytes]"
                ],
                "directives": [
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "str",
                    "Callable",
                    "Optional[List[Any]]",
                    "Tuple[type]"
                ],
                "types": [
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "str",
                    "Callable",
                    "Optional[List[Any]]",
                    "Tuple[type]"
                ],
                "source": [
                    "str",
                    "bytes",
                    "Mapping[str, str]",
                    "List[str]",
                    "Optional[int]",
                    "Dict[str, Any]"
                ],
                "loc": [
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "str",
                    "Callable",
                    "Optional[List[Any]]",
                    "Tuple[type]"
                ]
            }
        },
        "EnumTypeExtension.__init__": {
            "name": "__init__",
            "location": 898,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "OrderedDict",
                    "Dict[str, str]"
                ],
                "directives": [
                    "Optional[str]",
                    "bool",
                    "int"
                ],
                "values": [
                    "bool",
                    "str"
                ],
                "source": [
                    "str",
                    "Mapping[str, str]",
                    "int",
                    "Optional[Callable[..., Any]]",
                    "bool"
                ],
                "loc": [
                    "Optional[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "InputObjectTypeExtension.__init__": {
            "name": "__init__",
            "location": 917,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "OrderedDict",
                    "Dict[str, str]"
                ],
                "directives": [
                    "bool",
                    "int",
                    "Optional[List[str]]"
                ],
                "fields": [
                    "str",
                    "int",
                    "bool",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "source": [
                    "str",
                    "Mapping[str, str]",
                    "int",
                    "Optional[Callable[..., Any]]"
                ],
                "loc": [
                    "bool",
                    "int",
                    "Optional[List[str]]"
                ]
            }
        },
        "DirectiveDefinition.__init__": {
            "name": "__init__",
            "location": 942,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "arguments": [
                    "Optional[str]",
                    "bool",
                    "int"
                ],
                "locations": [
                    "str",
                    "Optional[str]",
                    "Tuple[int, int]",
                    "int",
                    "bool"
                ],
                "source": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "loc": [
                    "Optional[str]",
                    "bool",
                    "int"
                ],
                "description": [
                    "Optional[str]",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/lang/lexer.py": {
        "Lexer.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "List[dict]"
                ]
            }
        },
        "Lexer._read_over_whitespace": {
            "name": "_read_over_whitespace",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "__ignored": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Lexer._read_ellipsis": {
            "name": "_read_ellipsis",
            "location": 131,
            "return": [
                "float",
                "Tuple[Tuple[int, Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer._read_string": {
            "name": "_read_string",
            "location": 149,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer._read_block_string": {
            "name": "_read_block_string",
            "location": 173,
            "return": [
                "str",
                "float",
                "Type[Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer._read_escape_sequence": {
            "name": "_read_escape_sequence",
            "location": 203,
            "return": [
                "int",
                "bytes",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "__quoted_chars": [
                    "Mapping[str, str]",
                    "str",
                    "bytes",
                    "FrozenSet[int]",
                    "Optional[bytes]",
                    "dict"
                ]
            }
        },
        "Lexer._read_escaped_unicode": {
            "name": "_read_escaped_unicode",
            "location": 226,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer._read_number": {
            "name": "_read_number",
            "location": 253,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer._read_over_integer": {
            "name": "_read_over_integer",
            "location": 315,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer._read_over_digits": {
            "name": "_read_over_digits",
            "location": 337,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer._read_name": {
            "name": "_read_name",
            "location": 358,
            "return": [
                "str",
                "Type[BaseException]"
            ],
            "arguments": {
                "self": [],
                "__ascii_letters": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "Container[str]",
                    "bool",
                    "Union[List, Dict]"
                ]
            }
        },
        "Lexer.__iter__": {
            "name": "__iter__",
            "location": 375,
            "return": [
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexer.__next__": {
            "name": "__next__",
            "location": 378,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "py-gql-master/src/py_gql/lang/parser.py": {
        "_unexpected_token": {
            "name": "_unexpected_token",
            "location": 112,
            "return": [
                "Callable",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "token": [
                    "bytes",
                    "Union[str, bytes]",
                    "T",
                    "List[int]",
                    "str",
                    "dict"
                ],
                "position": [
                    "str",
                    "Optional[Callable]",
                    "int",
                    "Optional[int]",
                    "bytes",
                    "dict"
                ],
                "source": [
                    "str",
                    "Optional[Callable]",
                    "int",
                    "Optional[int]",
                    "bytes",
                    "dict"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 121,
            "return": [
                "str"
            ],
            "arguments": {
                "source": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "parse_value": {
            "name": "parse_value",
            "location": 139,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "source": [
                    "str",
                    "Optional[str]",
                    "List[Tuple]"
                ]
            }
        },
        "parse_type": {
            "name": "parse_type",
            "location": 172,
            "return": [
                "str",
                "list",
                "T",
                "Type"
            ],
            "arguments": {
                "source": [
                    "str",
                    "stiff.models.Token",
                    "Optional[str]"
                ]
            }
        },
        "Parser.__init__": {
            "name": "__init__",
            "location": 252,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source": [
                    "type",
                    "bool",
                    "Optional[bool]",
                    "Sequence",
                    "str"
                ],
                "no_location": [
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "int"
                ],
                "allow_type_system": [
                    "bool",
                    "Optional[str]",
                    "str"
                ],
                "experimental_fragment_variables": [
                    "type",
                    "bool",
                    "Optional[bool]",
                    "Sequence",
                    "str"
                ]
            }
        },
        "Parser._advance_window": {
            "name": "_advance_window",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "by": [
                    "Callable",
                    "Union[int, float]",
                    "str",
                    "Iterator",
                    "Iterator[T]"
                ]
            }
        },
        "Parser.peek": {
            "name": "peek",
            "location": 293,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "count": [
                    "List[int]",
                    "list",
                    "bool",
                    "List[float]",
                    "str",
                    "int"
                ]
            }
        },
        "Parser.advance": {
            "name": "advance",
            "location": 313,
            "return": [
                "bool",
                "Optional[Union[str, Any]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.expect": {
            "name": "expect",
            "location": 330,
            "return": [
                "int",
                "str",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "Optional[int]",
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Parser.expect_keyword": {
            "name": "expect_keyword",
            "location": 355,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "keyword": [
                    "dict",
                    "str"
                ]
            }
        },
        "Parser.skip": {
            "name": "skip",
            "location": 379,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "kind": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Parser.many": {
            "name": "many",
            "location": 397,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "open_kind": [
                    "str",
                    "int",
                    "dict",
                    "set",
                    "float"
                ],
                "parse_fn": [
                    "str",
                    "list",
                    "float",
                    "dict"
                ],
                "close_kind": [
                    "str",
                    "int",
                    "dict",
                    "set",
                    "float"
                ]
            }
        },
        "Parser.any_": {
            "name": "any_",
            "location": 428,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "open_kind": [
                    "str",
                    "int",
                    "dict",
                    "set",
                    "float"
                ],
                "parse_fn": [
                    "str",
                    "list",
                    "float",
                    "dict"
                ],
                "close_kind": [
                    "str",
                    "int",
                    "dict",
                    "set",
                    "float"
                ]
            }
        },
        "Parser.delimited_list": {
            "name": "delimited_list",
            "location": 457,
            "return": [
                "Union[Sequence, 'SweepFixedValues']",
                "bool"
            ],
            "arguments": {
                "self": [],
                "delimiter": [
                    "bytes",
                    "dict",
                    "List[str]",
                    "str"
                ],
                "parse_fn": [
                    "str"
                ]
            }
        },
        "Parser.parse_document": {
            "name": "parse_document",
            "location": 486,
            "return": [
                "Optional[bool]",
                "Optional[int]",
                "float",
                "Tuple[Tuple[int, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_definition": {
            "name": "parse_definition",
            "location": 502,
            "return": [
                "tuple",
                "Type[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_name": {
            "name": "parse_name",
            "location": 527,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_executable_definition": {
            "name": "parse_executable_definition",
            "location": 536,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_operation_definition": {
            "name": "parse_operation_definition",
            "location": 550,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_operation_type": {
            "name": "parse_operation_type",
            "location": 577,
            "return": [
                "bytes",
                "str",
                "Optional[type]",
                "int",
                "Tuple[type]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_variable_definitions": {
            "name": "parse_variable_definitions",
            "location": 586,
            "return": [
                "T",
                "bool",
                "Sequence[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_variable_definition": {
            "name": "parse_variable_definition",
            "location": 596,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_variable": {
            "name": "parse_variable",
            "location": 616,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_selection_set": {
            "name": "parse_selection_set",
            "location": 626,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_selection": {
            "name": "parse_selection",
            "location": 637,
            "return": [
                "DefaultDict[int, List[Any]]",
                "OrderedDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_field": {
            "name": "parse_field",
            "location": 645,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_arguments": {
            "name": "parse_arguments",
            "location": 673,
            "return": [],
            "arguments": {
                "self": [],
                "const": [
                    "str",
                    "int"
                ]
            }
        },
        "Parser.parse_argument": {
            "name": "parse_argument",
            "location": 683,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "const": [
                    "int",
                    "Dict[str, object]",
                    "bool",
                    "str"
                ]
            }
        },
        "Parser.parse_fragment": {
            "name": "parse_fragment",
            "location": 698,
            "return": [
                "str",
                "Tuple[str, List[str], List[float], List[str], List[float], List[float], List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_fragment_definition": {
            "name": "parse_fragment_definition",
            "location": 731,
            "return": [
                "str",
                "Tuple[str, List[str], List[float], List[str], List[float], List[float], List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_fragment_name": {
            "name": "parse_fragment_name",
            "location": 757,
            "return": [
                "str",
                "Optional[str]",
                "List[Tuple[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_value_literal": {
            "name": "parse_value_literal",
            "location": 766,
            "return": [
                "List[Dict]",
                "List[int]",
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "const": [
                    "str"
                ]
            }
        },
        "Parser.parse_string_literal": {
            "name": "parse_string_literal",
            "location": 826,
            "return": [
                "Optional[str]",
                "str",
                "int",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_list": {
            "name": "parse_list",
            "location": 836,
            "return": [
                "str",
                "Union[int, float]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "const": [
                    "int",
                    "List[str]",
                    "Mapping[str, Any]",
                    "float",
                    "bool"
                ]
            }
        },
        "Parser.parse_object": {
            "name": "parse_object",
            "location": 851,
            "return": [
                "str",
                "int",
                "Generator",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "const": [
                    "str",
                    "List[str]",
                    "Sequence[str]"
                ]
            }
        },
        "Parser.parse_object_field": {
            "name": "parse_object_field",
            "location": 863,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "const": [
                    "dict",
                    "Dict[str, object]"
                ]
            }
        },
        "Parser.parse_directives": {
            "name": "parse_directives",
            "location": 878,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "const": [
                    "str",
                    "dict"
                ]
            }
        },
        "Parser.parse_directive": {
            "name": "parse_directive",
            "location": 887,
            "return": [
                "str",
                "Tuple[str, List[str], List[float], List[str], List[float], List[float], List[Any]]"
            ],
            "arguments": {
                "self": [],
                "const": [
                    "bool",
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "Parser.parse_type_reference": {
            "name": "parse_type_reference",
            "location": 899,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_named_type": {
            "name": "parse_named_type",
            "location": 921,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_type_system_definition": {
            "name": "parse_type_system_definition",
            "location": 930,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_description": {
            "name": "parse_description",
            "location": 973,
            "return": [
                "Iterable[str]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_schema_definition": {
            "name": "parse_schema_definition",
            "location": 984,
            "return": [
                "bytearray",
                "float",
                "str",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_operation_type_definition": {
            "name": "parse_operation_type_definition",
            "location": 999,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_scalar_type_definition": {
            "name": "parse_scalar_type_definition",
            "location": 1013,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_object_type_definition": {
            "name": "parse_object_type_definition",
            "location": 1028,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_implements_interfaces": {
            "name": "parse_implements_interfaces",
            "location": 1047,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_fields_definition": {
            "name": "parse_fields_definition",
            "location": 1064,
            "return": [
                "str",
                "int",
                "Tuple[float, float, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_field_definition": {
            "name": "parse_field_definition",
            "location": 1072,
            "return": [
                "str",
                "Optional[Any]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_argument_definitions": {
            "name": "parse_argument_definitions",
            "location": 1091,
            "return": [
                "Optional[int]",
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_input_value_definition": {
            "name": "parse_input_value_definition",
            "location": 1101,
            "return": [
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_interface_type_definition": {
            "name": "parse_interface_type_definition",
            "location": 1123,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_union_type_definition": {
            "name": "parse_union_type_definition",
            "location": 1140,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_union_member_types": {
            "name": "parse_union_member_types",
            "location": 1157,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_enum_type_definition": {
            "name": "parse_enum_type_definition",
            "location": 1165,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_enum_values_definition": {
            "name": "parse_enum_values_definition",
            "location": 1182,
            "return": [
                "int",
                "Optional[int]",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_enum_value_definition": {
            "name": "parse_enum_value_definition",
            "location": 1192,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_input_object_type_definition": {
            "name": "parse_input_object_type_definition",
            "location": 1207,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_input_fields_definition": {
            "name": "parse_input_fields_definition",
            "location": 1226,
            "return": [
                "Optional[int]",
                "Dict[str, int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_type_system_extension": {
            "name": "parse_type_system_extension",
            "location": 1236,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_schema_extension": {
            "name": "parse_schema_extension",
            "location": 1263,
            "return": [
                "List['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_scalar_type_extension": {
            "name": "parse_scalar_type_extension",
            "location": 1286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_object_type_extension": {
            "name": "parse_object_type_extension",
            "location": 1304,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_interface_type_extension": {
            "name": "parse_interface_type_extension",
            "location": 1330,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_union_type_extension": {
            "name": "parse_union_type_extension",
            "location": 1354,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_enum_type_extension": {
            "name": "parse_enum_type_extension",
            "location": 1378,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_input_object_type_extension": {
            "name": "parse_input_object_type_extension",
            "location": 1402,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_directive_definition": {
            "name": "parse_directive_definition",
            "location": 1427,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_directive_locations": {
            "name": "parse_directive_locations",
            "location": 1448,
            "return": [
                "List[Dict]",
                "List[str]",
                "str",
                "list",
                "List[int]",
                "Union[str, List[Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse_directive_location": {
            "name": "parse_directive_location",
            "location": 1455,
            "return": [
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "py-gql-master/src/py_gql/lang/printer.py": {
        "_wrap": {
            "name": "_wrap",
            "location": 508,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "start": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "int"
                ],
                "maybe_string": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "int"
                ],
                "end": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "int"
                ]
            }
        },
        "_join": {
            "name": "_join",
            "location": 512,
            "return": [
                "bool",
                "int",
                "Optional[dict]",
                "str",
                "object"
            ],
            "arguments": {
                "entries": [
                    "str",
                    "Iterable[str]"
                ],
                "separator": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "_indent": {
            "name": "_indent",
            "location": 518,
            "return": [
                "str",
                "Callable",
                "list"
            ],
            "arguments": {
                "maybe_string": [
                    "str",
                    "bytes"
                ],
                "indent": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_block": {
            "name": "_block",
            "location": 524,
            "return": [
                "str"
            ],
            "arguments": {
                "iterator": [
                    "Iterable[str]",
                    "Set[int]",
                    "str",
                    "int",
                    "Sequence[str]"
                ],
                "indent": [
                    "str",
                    "Union[bool, List[bool]]",
                    "int"
                ]
            }
        },
        "_block_string": {
            "name": "_block_string",
            "location": 534,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Dict[str, Any]"
                ],
                "indent": [
                    "str",
                    "bool"
                ],
                "is_description": [
                    "str",
                    "bool"
                ]
            }
        },
        "print_ast": {
            "name": "print_ast",
            "location": 545,
            "return": [
                "Dict[str, Any]",
                "Tuple[Any, Any, Any]",
                "str"
            ],
            "arguments": {
                "node": [
                    "int",
                    "bool",
                    "str",
                    "list",
                    "dict",
                    "bytes",
                    "IO"
                ],
                "indent": [
                    "int",
                    "bool",
                    "str",
                    "list",
                    "dict",
                    "bytes",
                    "IO"
                ],
                "include_descriptions": [
                    "int",
                    "bool",
                    "str",
                    "list",
                    "dict",
                    "bytes",
                    "IO"
                ]
            }
        },
        "ASTPrinter.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "indent": [
                    "int",
                    "Union[str, int]",
                    "float",
                    "Optional[int]",
                    "bool"
                ],
                "include_descriptions": [
                    "str",
                    "int"
                ]
            }
        },
        "ASTPrinter.__call__": {
            "name": "__call__",
            "location": 31,
            "return": [
                "str",
                "Callable[..., T]"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ASTPrinter.print_name": {
            "name": "print_name",
            "location": 94,
            "return": [
                "str",
                "Optional[BaseException]",
                "Exception",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Type[T]"
                ]
            }
        },
        "ASTPrinter.print_variable": {
            "name": "print_variable",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Type"
                ]
            }
        },
        "ASTPrinter.print_document": {
            "name": "print_document",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ASTPrinter.print_operation_definition": {
            "name": "print_operation_definition",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict"
                ]
            }
        },
        "ASTPrinter.print_variable_definition": {
            "name": "print_variable_definition",
            "location": 121,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int"
                ]
            }
        },
        "ASTPrinter.print_variable_definitions": {
            "name": "print_variable_definitions",
            "location": 135,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ASTPrinter._selection_set": {
            "name": "_selection_set",
            "location": 147,
            "return": [
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int"
                ]
            }
        },
        "ASTPrinter.print_selection_set": {
            "name": "print_selection_set",
            "location": 162,
            "return": [
                "str",
                "dict",
                "bool",
                "int",
                "T"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "str"
                ]
            }
        },
        "ASTPrinter.print_field": {
            "name": "print_field",
            "location": 165,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "dict"
                ]
            }
        },
        "ASTPrinter.print_arguments": {
            "name": "print_arguments",
            "location": 180,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ]
            }
        },
        "ASTPrinter.print_argument": {
            "name": "print_argument",
            "location": 185,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict",
                    "str"
                ]
            }
        },
        "ASTPrinter.print_fragment_spread": {
            "name": "print_fragment_spread",
            "location": 188,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Type[Any]",
                    "str"
                ]
            }
        },
        "ASTPrinter.print_inline_fragment": {
            "name": "print_inline_fragment",
            "location": 194,
            "return": [
                "tuple",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ]
            }
        },
        "ASTPrinter.print_int_value": {
            "name": "print_int_value",
            "location": 205,
            "return": [
                "str",
                "Optional[BaseException]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Type[T]"
                ]
            }
        },
        "ASTPrinter.print_float_value": {
            "name": "print_float_value",
            "location": 208,
            "return": [
                "str",
                "Optional[BaseException]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Type[T]"
                ]
            }
        },
        "ASTPrinter.print_enum_value": {
            "name": "print_enum_value",
            "location": 211,
            "return": [
                "str",
                "Optional[BaseException]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Type[T]"
                ]
            }
        },
        "ASTPrinter.print_boolean_value": {
            "name": "print_boolean_value",
            "location": 214,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "dict",
                    "bytes"
                ]
            }
        },
        "ASTPrinter.print_null_value": {
            "name": "print_null_value",
            "location": 217,
            "return": [
                "int",
                "str",
                "Tuple[int, int]",
                "Tuple[str, int]"
            ],
            "arguments": {
                "self": [],
                "_node": [
                    "bool"
                ]
            }
        },
        "ASTPrinter.print_string_value": {
            "name": "print_string_value",
            "location": 220,
            "return": [
                "str",
                "Type",
                "bool",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ]
            }
        },
        "ASTPrinter.print_list_value": {
            "name": "print_list_value",
            "location": 228,
            "return": [
                "str",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Mapping[str, str]",
                    "Type",
                    "int",
                    "OrderedDict"
                ]
            }
        },
        "ASTPrinter.print_object_value": {
            "name": "print_object_value",
            "location": 231,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[int]",
                    "int",
                    "T"
                ]
            }
        },
        "ASTPrinter.print_object_field": {
            "name": "print_object_field",
            "location": 234,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Mapping[str, str]",
                    "OrderedDict"
                ]
            }
        },
        "ASTPrinter.print_directives": {
            "name": "print_directives",
            "location": 237,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "List[int]",
                    "T"
                ]
            }
        },
        "ASTPrinter.print_directive": {
            "name": "print_directive",
            "location": 240,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict",
                    "OrderedDict",
                    "str"
                ]
            }
        },
        "ASTPrinter.print_named_type": {
            "name": "print_named_type",
            "location": 243,
            "return": [
                "str",
                "Type",
                "Callable[..., T]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool"
                ]
            }
        },
        "ASTPrinter.print_list_type": {
            "name": "print_list_type",
            "location": 246,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Sequence[Any]",
                    "str"
                ]
            }
        },
        "ASTPrinter.print_non_null_type": {
            "name": "print_non_null_type",
            "location": 249,
            "return": [
                "str",
                "Callable[..., T]",
                "List[Tuple[str]]",
                "Exception",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Sequence[Any]"
                ]
            }
        },
        "ASTPrinter.print_fragment_definition": {
            "name": "print_fragment_definition",
            "location": 254,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ASTPrinter.print_schema_definition": {
            "name": "print_schema_definition",
            "location": 263,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ASTPrinter.print_schema_extension": {
            "name": "print_schema_extension",
            "location": 273,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ASTPrinter.print_operation_type_definition": {
            "name": "print_operation_type_definition",
            "location": 283,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ASTPrinter.print_scalar_type_definition": {
            "name": "print_scalar_type_definition",
            "location": 288,
            "return": [
                "str",
                "Type",
                "Type[Exception]"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ASTPrinter.print_scalar_type_extension": {
            "name": "print_scalar_type_extension",
            "location": 298,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "Union[str, 'Type']"
                ]
            }
        },
        "ASTPrinter.print_object_type_definition": {
            "name": "print_object_type_definition",
            "location": 305,
            "return": [
                "bool",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ASTPrinter.print_object_type_extension": {
            "name": "print_object_type_extension",
            "location": 324,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ASTPrinter.print_field_definition": {
            "name": "print_field_definition",
            "location": 338,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ASTPrinter.print_input_value_definition": {
            "name": "print_input_value_definition",
            "location": 349,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ASTPrinter.print_interface_type_definition": {
            "name": "print_interface_type_definition",
            "location": 360,
            "return": [
                "str",
                "Type",
                "Type[Exception]"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ASTPrinter.print_interface_type_extension": {
            "name": "print_interface_type_extension",
            "location": 376,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ASTPrinter.print_union_type_definition": {
            "name": "print_union_type_definition",
            "location": 389,
            "return": [
                "str",
                "Type",
                "Type[Exception]"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ASTPrinter.print_union_type_extension": {
            "name": "print_union_type_extension",
            "location": 405,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ASTPrinter.print_enum_type_definition": {
            "name": "print_enum_type_definition",
            "location": 416,
            "return": [
                "str",
                "Type",
                "Type[Exception]"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ASTPrinter.print_enum_type_extension": {
            "name": "print_enum_type_extension",
            "location": 430,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ASTPrinter.print_enum_value_definition": {
            "name": "print_enum_value_definition",
            "location": 441,
            "return": [
                "str",
                "dict",
                "Mapping[str, Any]",
                "List[str]",
                "list"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "OrderedDict",
                    "str"
                ]
            }
        },
        "ASTPrinter.print_input_object_type_definition": {
            "name": "print_input_object_type_definition",
            "location": 446,
            "return": [
                "str",
                "Type"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ASTPrinter.print_input_object_type_extension": {
            "name": "print_input_object_type_extension",
            "location": 462,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ASTPrinter.print_directive_definition": {
            "name": "print_directive_definition",
            "location": 475,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ]
            }
        },
        "ASTPrinter.print_argument_definitions": {
            "name": "print_argument_definitions",
            "location": 489,
            "return": [
                "str",
                "int",
                "List[str]",
                "float",
                "bool",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Tuple[str]",
                    "Set[str]"
                ]
            }
        },
        "ASTPrinter._with_desc": {
            "name": "_with_desc",
            "location": 498,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "formatted": [
                    "str"
                ],
                "desc": [
                    "Optional[str]",
                    "str",
                    "Optional[Union[Any, Any]]"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/lang/token.py": {
        "Token.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "float"
                ],
                "end": [
                    "int",
                    "float"
                ],
                "value": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "Token.__repr__": {
            "name": "__repr__",
            "location": 38,
            "return": [
                "Dict[str, str]",
                "int",
                "Optional[str]",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.__str__": {
            "name": "__str__",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.__eq__": {
            "name": "__eq__",
            "location": 49,
            "return": [
                "bool",
                "Optional[bool]",
                "Optional[int]",
                "str",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "rhs": [
                    "float",
                    "Optional[str]",
                    "List[int]"
                ]
            }
        },
        "ConstToken.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "str"
                ],
                "end": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/lang/visitor.py": {
        "_visit_method": {
            "name": "_visit_method",
            "location": 33,
            "return": [
                "dict"
            ],
            "arguments": {
                "method": [
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "_visit_method.wrapper": {
            "name": "wrapper",
            "location": 35,
            "return": [
                "bytes"
            ],
            "arguments": {
                "inst": [
                    "List[int]",
                    "int",
                    "list"
                ],
                "node": [
                    "int"
                ]
            }
        },
        "ASTVisitor.enter": {
            "name": "enter",
            "location": 57,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[int]"
                ]
            }
        },
        "ASTVisitor.leave": {
            "name": "leave",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[int]"
                ]
            }
        },
        "ASTVisitor.visit": {
            "name": "visit",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ASTVisitor._visit_document": {
            "name": "_visit_document",
            "location": 151,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "document": []
            }
        },
        "ASTVisitor._visit_definition": {
            "name": "_visit_definition",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ASTVisitor._visit_operation_definition": {
            "name": "_visit_operation_definition",
            "location": 184,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "definition": []
            }
        },
        "ASTVisitor._visit_fragment_definition": {
            "name": "_visit_fragment_definition",
            "location": 199,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "definition": []
            }
        },
        "ASTVisitor._visit_variable_definition": {
            "name": "_visit_variable_definition",
            "location": 211,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "definition": []
            }
        },
        "ASTVisitor._visit_type": {
            "name": "_visit_type",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "type_": [
                    "str"
                ]
            }
        },
        "ASTVisitor._visit_directive": {
            "name": "_visit_directive",
            "location": 226,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "directive": [
                    "dict"
                ]
            }
        },
        "ASTVisitor._visit_argument": {
            "name": "_visit_argument",
            "location": 233,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "argument": [
                    "dict"
                ]
            }
        },
        "ASTVisitor._visit_selection_set": {
            "name": "_visit_selection_set",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "selection_set": []
            }
        },
        "ASTVisitor._visit_selection": {
            "name": "_visit_selection",
            "location": 246,
            "return": [],
            "arguments": {
                "self": [],
                "selection": []
            }
        },
        "ASTVisitor._visit_field": {
            "name": "_visit_field",
            "location": 257,
            "return": [],
            "arguments": {
                "self": [],
                "field": []
            }
        },
        "ASTVisitor._visit_fragment_spread": {
            "name": "_visit_fragment_spread",
            "location": 267,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "spread": []
            }
        },
        "ASTVisitor._visit_inline_fragment": {
            "name": "_visit_inline_fragment",
            "location": 276,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "fragment": []
            }
        },
        "ASTVisitor._visit_input_value": {
            "name": "_visit_input_value",
            "location": 287,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "ASTVisitor._visit_variable": {
            "name": "_visit_variable",
            "location": 295,
            "return": [],
            "arguments": {
                "self": [],
                "var": []
            }
        },
        "ASTVisitor._visit_value": {
            "name": "_visit_value",
            "location": 299,
            "return": [
                "str",
                "Union[type, Tuple[type, object]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[str]"
                ]
            }
        },
        "ASTVisitor._visit_object_field": {
            "name": "_visit_object_field",
            "location": 309,
            "return": [],
            "arguments": {
                "self": [],
                "field": []
            }
        },
        "ASTVisitor._visit_schema_definition": {
            "name": "_visit_schema_definition",
            "location": 314,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "definition": []
            }
        },
        "ASTVisitor._visit_operation_type_definition": {
            "name": "_visit_operation_type_definition",
            "location": 326,
            "return": [],
            "arguments": {
                "self": [],
                "definition": []
            }
        },
        "ASTVisitor._visit_scalar_type_definition": {
            "name": "_visit_scalar_type_definition",
            "location": 333,
            "return": [],
            "arguments": {
                "self": [],
                "definition": []
            }
        },
        "ASTVisitor._visit_object_type_definition": {
            "name": "_visit_object_type_definition",
            "location": 343,
            "return": [],
            "arguments": {
                "self": [],
                "definition": []
            }
        },
        "ASTVisitor._visit_interface_type_definition": {
            "name": "_visit_interface_type_definition",
            "location": 359,
            "return": [],
            "arguments": {
                "self": [],
                "definition": []
            }
        },
        "ASTVisitor._visit_union_type_definition": {
            "name": "_visit_union_type_definition",
            "location": 374,
            "return": [],
            "arguments": {
                "self": [],
                "definition": []
            }
        },
        "ASTVisitor._visit_enum_type_definition": {
            "name": "_visit_enum_type_definition",
            "location": 385,
            "return": [],
            "arguments": {
                "self": [],
                "definition": []
            }
        },
        "ASTVisitor._visit_input_object_type_definition": {
            "name": "_visit_input_object_type_definition",
            "location": 397,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "definition": []
            }
        },
        "ASTVisitor._visit_field_definition": {
            "name": "_visit_field_definition",
            "location": 412,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "definition": []
            }
        },
        "ASTVisitor._visit_input_value_definition": {
            "name": "_visit_input_value_definition",
            "location": 425,
            "return": [],
            "arguments": {
                "self": [],
                "definition": []
            }
        },
        "ASTVisitor._visit_enum_value_definition": {
            "name": "_visit_enum_value_definition",
            "location": 437,
            "return": [],
            "arguments": {
                "self": [],
                "definition": []
            }
        },
        "ASTVisitor._visit_directive_definition": {
            "name": "_visit_directive_definition",
            "location": 446,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "definition": [
                    "str"
                ]
            }
        },
        "DispatchingVisitor.enter": {
            "name": "enter",
            "location": 467,
            "return": [
                "str",
                "Callable[..., T]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "DispatchingVisitor.leave": {
            "name": "leave",
            "location": 520,
            "return": [
                "str",
                "Callable[..., T]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "DispatchingVisitor.enter_document": {
            "name": "enter_document",
            "location": 569,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[int]"
                ]
            }
        },
        "DispatchingVisitor.leave_document": {
            "name": "leave_document",
            "location": 572,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DispatchingVisitor.enter_operation_definition": {
            "name": "enter_operation_definition",
            "location": 575,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[int]"
                ]
            }
        },
        "DispatchingVisitor.leave_operation_definition": {
            "name": "leave_operation_definition",
            "location": 580,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DispatchingVisitor.enter_fragment_definition": {
            "name": "enter_fragment_definition",
            "location": 583,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[int]"
                ]
            }
        },
        "DispatchingVisitor.leave_fragment_definition": {
            "name": "leave_fragment_definition",
            "location": 588,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DispatchingVisitor.enter_variable_definition": {
            "name": "enter_variable_definition",
            "location": 591,
            "return": [
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "Dict[str, bool]"
                ]
            }
        },
        "DispatchingVisitor.leave_variable_definition": {
            "name": "leave_variable_definition",
            "location": 596,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "type"
                ]
            }
        },
        "DispatchingVisitor.enter_directive": {
            "name": "enter_directive",
            "location": 599,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[int]"
                ]
            }
        },
        "DispatchingVisitor.leave_directive": {
            "name": "leave_directive",
            "location": 602,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DispatchingVisitor.enter_argument": {
            "name": "enter_argument",
            "location": 605,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[int]"
                ]
            }
        },
        "DispatchingVisitor.leave_argument": {
            "name": "leave_argument",
            "location": 608,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DispatchingVisitor.enter_selection_set": {
            "name": "enter_selection_set",
            "location": 611,
            "return": [
                "list",
                "Sequence[str]",
                "tuple",
                "Iterable[str]",
                "Tuple[str]",
                "str",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "List[List[int]]"
                ]
            }
        },
        "DispatchingVisitor.leave_selection_set": {
            "name": "leave_selection_set",
            "location": 616,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "int",
                    "List[int]",
                    "List[Dict]"
                ]
            }
        },
        "DispatchingVisitor.enter_field": {
            "name": "enter_field",
            "location": 619,
            "return": [
                "int",
                "Union"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "DispatchingVisitor.leave_field": {
            "name": "leave_field",
            "location": 622,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "str"
                ]
            }
        },
        "DispatchingVisitor.enter_fragment_spread": {
            "name": "enter_fragment_spread",
            "location": 625,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[int]"
                ]
            }
        },
        "DispatchingVisitor.leave_fragment_spread": {
            "name": "leave_fragment_spread",
            "location": 630,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DispatchingVisitor.enter_inline_fragment": {
            "name": "enter_inline_fragment",
            "location": 633,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[int]"
                ]
            }
        },
        "DispatchingVisitor.leave_inline_fragment": {
            "name": "leave_inline_fragment",
            "location": 638,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DispatchingVisitor.enter_null_value": {
            "name": "enter_null_value",
            "location": 641,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool"
                ]
            }
        },
        "DispatchingVisitor.leave_null_value": {
            "name": "leave_null_value",
            "location": 646,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Dict[str, Any]",
                    "List[str]",
                    "dict",
                    "bool",
                    "int"
                ]
            }
        },
        "DispatchingVisitor.enter_int_value": {
            "name": "enter_int_value",
            "location": 649,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool"
                ]
            }
        },
        "DispatchingVisitor.leave_int_value": {
            "name": "leave_int_value",
            "location": 652,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Dict[str, Any]",
                    "List[str]",
                    "dict",
                    "bool",
                    "int"
                ]
            }
        },
        "DispatchingVisitor.enter_float_value": {
            "name": "enter_float_value",
            "location": 655,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool"
                ]
            }
        },
        "DispatchingVisitor.leave_float_value": {
            "name": "leave_float_value",
            "location": 660,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Dict[str, Any]",
                    "List[str]",
                    "dict",
                    "bool",
                    "int"
                ]
            }
        },
        "DispatchingVisitor.enter_string_value": {
            "name": "enter_string_value",
            "location": 663,
            "return": [
                "Dict[str, Any]",
                "Union[Sequence, 'SweepFixedValues']",
                "int",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[Type]"
                ]
            }
        },
        "DispatchingVisitor.leave_string_value": {
            "name": "leave_string_value",
            "location": 668,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "bool",
                    "List[Tuple[str, str, str, str]]",
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        },
        "DispatchingVisitor.enter_boolean_value": {
            "name": "enter_boolean_value",
            "location": 671,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool"
                ]
            }
        },
        "DispatchingVisitor.leave_boolean_value": {
            "name": "leave_boolean_value",
            "location": 676,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Dict[str, Any]",
                    "List[str]",
                    "dict",
                    "bool",
                    "int"
                ]
            }
        },
        "DispatchingVisitor.enter_enum_value": {
            "name": "enter_enum_value",
            "location": 679,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool"
                ]
            }
        },
        "DispatchingVisitor.leave_enum_value": {
            "name": "leave_enum_value",
            "location": 684,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Dict[str, Any]",
                    "List[str]",
                    "dict",
                    "bool",
                    "int"
                ]
            }
        },
        "DispatchingVisitor.enter_variable": {
            "name": "enter_variable",
            "location": 687,
            "return": [
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "Dict[str, bool]"
                ]
            }
        },
        "DispatchingVisitor.leave_variable": {
            "name": "leave_variable",
            "location": 690,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "type"
                ]
            }
        },
        "DispatchingVisitor.enter_list_value": {
            "name": "enter_list_value",
            "location": 693,
            "return": [
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[Type]",
                    "bool"
                ]
            }
        },
        "DispatchingVisitor.leave_list_value": {
            "name": "leave_list_value",
            "location": 698,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "Callable",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "DispatchingVisitor.enter_object_value": {
            "name": "enter_object_value",
            "location": 701,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool"
                ]
            }
        },
        "DispatchingVisitor.leave_object_value": {
            "name": "leave_object_value",
            "location": 706,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Dict[str, Any]",
                    "List[str]",
                    "dict",
                    "bool",
                    "int"
                ]
            }
        },
        "DispatchingVisitor.enter_object_field": {
            "name": "enter_object_field",
            "location": 709,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[Type]",
                    "bool"
                ]
            }
        },
        "DispatchingVisitor.leave_object_field": {
            "name": "leave_object_field",
            "location": 714,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "Callable[[], object]",
                    "List[str]",
                    "Dict[str, int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "DispatchingVisitor.enter_named_type": {
            "name": "enter_named_type",
            "location": 717,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "Dict[str, bool]"
                ]
            }
        },
        "DispatchingVisitor.leave_named_type": {
            "name": "leave_named_type",
            "location": 722,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Callable",
                    "Type[Any]",
                    "bool",
                    "str",
                    "List[str]",
                    "Iterable[Any]"
                ]
            }
        },
        "DispatchingVisitor.enter_list_type": {
            "name": "enter_list_type",
            "location": 725,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "DispatchingVisitor.leave_list_type": {
            "name": "leave_list_type",
            "location": 728,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "List[str]",
                    "Callable",
                    "Type[Any]",
                    "str"
                ]
            }
        },
        "DispatchingVisitor.enter_non_null_type": {
            "name": "enter_non_null_type",
            "location": 731,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "DispatchingVisitor.leave_non_null_type": {
            "name": "leave_non_null_type",
            "location": 736,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "List[object]"
                ]
            }
        },
        "DispatchingVisitor.enter_schema_definition": {
            "name": "enter_schema_definition",
            "location": 739,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[int]"
                ]
            }
        },
        "DispatchingVisitor.leave_schema_definition": {
            "name": "leave_schema_definition",
            "location": 744,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DispatchingVisitor.enter_operation_type_definition": {
            "name": "enter_operation_type_definition",
            "location": 747,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "Dict[str, bool]"
                ]
            }
        },
        "DispatchingVisitor.leave_operation_type_definition": {
            "name": "leave_operation_type_definition",
            "location": 752,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "List[object]"
                ]
            }
        },
        "DispatchingVisitor.enter_scalar_type_definition": {
            "name": "enter_scalar_type_definition",
            "location": 757,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "Dict[str, bool]"
                ]
            }
        },
        "DispatchingVisitor.leave_scalar_type_definition": {
            "name": "leave_scalar_type_definition",
            "location": 762,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "List[object]"
                ]
            }
        },
        "DispatchingVisitor.enter_object_type_definition": {
            "name": "enter_object_type_definition",
            "location": 767,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "Dict[str, bool]"
                ]
            }
        },
        "DispatchingVisitor.leave_object_type_definition": {
            "name": "leave_object_type_definition",
            "location": 772,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "List[object]"
                ]
            }
        },
        "DispatchingVisitor.enter_field_definition": {
            "name": "enter_field_definition",
            "location": 777,
            "return": [
                "int",
                "Union"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "DispatchingVisitor.leave_field_definition": {
            "name": "leave_field_definition",
            "location": 782,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "str"
                ]
            }
        },
        "DispatchingVisitor.enter_input_value_definition": {
            "name": "enter_input_value_definition",
            "location": 785,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool"
                ]
            }
        },
        "DispatchingVisitor.leave_input_value_definition": {
            "name": "leave_input_value_definition",
            "location": 790,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Dict[str, Any]",
                    "List[str]",
                    "dict",
                    "bool",
                    "int"
                ]
            }
        },
        "DispatchingVisitor.enter_interface_type_definition": {
            "name": "enter_interface_type_definition",
            "location": 795,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "Dict[str, bool]"
                ]
            }
        },
        "DispatchingVisitor.leave_interface_type_definition": {
            "name": "leave_interface_type_definition",
            "location": 800,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "List[object]"
                ]
            }
        },
        "DispatchingVisitor.enter_union_type_definition": {
            "name": "enter_union_type_definition",
            "location": 805,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "Dict[str, bool]"
                ]
            }
        },
        "DispatchingVisitor.leave_union_type_definition": {
            "name": "leave_union_type_definition",
            "location": 810,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "List[object]"
                ]
            }
        },
        "DispatchingVisitor.enter_enum_type_definition": {
            "name": "enter_enum_type_definition",
            "location": 813,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "Dict[str, bool]"
                ]
            }
        },
        "DispatchingVisitor.leave_enum_type_definition": {
            "name": "leave_enum_type_definition",
            "location": 818,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "List[object]"
                ]
            }
        },
        "DispatchingVisitor.enter_enum_value_definition": {
            "name": "enter_enum_value_definition",
            "location": 821,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool"
                ]
            }
        },
        "DispatchingVisitor.leave_enum_value_definition": {
            "name": "leave_enum_value_definition",
            "location": 826,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Dict[str, Any]",
                    "List[str]",
                    "dict",
                    "bool",
                    "int"
                ]
            }
        },
        "DispatchingVisitor.enter_input_object_type_definition": {
            "name": "enter_input_object_type_definition",
            "location": 829,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "DispatchingVisitor.leave_input_object_type_definition": {
            "name": "leave_input_object_type_definition",
            "location": 834,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "List[object]"
                ]
            }
        },
        "DispatchingVisitor.enter_schema_extension": {
            "name": "enter_schema_extension",
            "location": 839,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[int]"
                ]
            }
        },
        "DispatchingVisitor.leave_schema_extension": {
            "name": "leave_schema_extension",
            "location": 844,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DispatchingVisitor.enter_scalar_type_extension": {
            "name": "enter_scalar_type_extension",
            "location": 847,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "Dict[str, bool]"
                ]
            }
        },
        "DispatchingVisitor.leave_scalar_type_extension": {
            "name": "leave_scalar_type_extension",
            "location": 852,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "List[object]"
                ]
            }
        },
        "DispatchingVisitor.enter_object_type_extension": {
            "name": "enter_object_type_extension",
            "location": 855,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "Dict[str, bool]"
                ]
            }
        },
        "DispatchingVisitor.leave_object_type_extension": {
            "name": "leave_object_type_extension",
            "location": 860,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "List[object]"
                ]
            }
        },
        "DispatchingVisitor.enter_interface_type_extension": {
            "name": "enter_interface_type_extension",
            "location": 863,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "Dict[str, bool]"
                ]
            }
        },
        "DispatchingVisitor.leave_interface_type_extension": {
            "name": "leave_interface_type_extension",
            "location": 868,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "List[object]"
                ]
            }
        },
        "DispatchingVisitor.enter_union_type_extension": {
            "name": "enter_union_type_extension",
            "location": 873,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "Dict[str, bool]"
                ]
            }
        },
        "DispatchingVisitor.leave_union_type_extension": {
            "name": "leave_union_type_extension",
            "location": 878,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "List[object]"
                ]
            }
        },
        "DispatchingVisitor.enter_enum_type_extension": {
            "name": "enter_enum_type_extension",
            "location": 881,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "Dict[str, bool]"
                ]
            }
        },
        "DispatchingVisitor.leave_enum_type_extension": {
            "name": "leave_enum_type_extension",
            "location": 886,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "List[object]"
                ]
            }
        },
        "DispatchingVisitor.enter_input_object_type_extension": {
            "name": "enter_input_object_type_extension",
            "location": 889,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "DispatchingVisitor.leave_input_object_type_extension": {
            "name": "leave_input_object_type_extension",
            "location": 894,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "List[object]"
                ]
            }
        },
        "DispatchingVisitor.enter_directive_definition": {
            "name": "enter_directive_definition",
            "location": 899,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[int]"
                ]
            }
        },
        "DispatchingVisitor.leave_directive_definition": {
            "name": "leave_directive_definition",
            "location": 904,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ChainedVisitor.__init__": {
            "name": "__init__",
            "location": 925,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ChainedVisitor.enter": {
            "name": "enter",
            "location": 928,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int"
                ]
            }
        },
        "ChainedVisitor.leave": {
            "name": "leave",
            "location": 937,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/lang/__init__.py": {},
    "py-gql-master/src/py_gql/schema/directives.py": {},
    "py-gql-master/src/py_gql/schema/fix_type_references.py": {
        "fix_type_references": {
            "name": "fix_type_references",
            "location": 79,
            "return": [
                "schema.Schema",
                "mypy.types.Type",
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "schema": [
                    "schema.Schema",
                    "mypy.types.Type",
                    "int",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "_HealSchemaVisitor.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "_HealSchemaVisitor._healed": {
            "name": "_healed",
            "location": 24,
            "return": [
                "types.Resolver"
            ],
            "arguments": {
                "self": [],
                "original": [
                    "int",
                    "tuple",
                    "mypy.types.Type",
                    "types.GraphQLType",
                    "Dict[str, Any]"
                ]
            }
        },
        "_HealSchemaVisitor.on_object": {
            "name": "on_object",
            "location": 34,
            "return": [
                "Sequence[int]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "object_type": [
                    "types.TracebackType",
                    "BaseException",
                    "Exception",
                    "Type[BaseException]",
                    "type",
                    "Type[Any]",
                    "types.ModuleType"
                ]
            }
        },
        "_HealSchemaVisitor.on_field": {
            "name": "on_field",
            "location": 41,
            "return": [
                "Optional[str]",
                "Optional[float]",
                "str",
                "Optional[List[str]]",
                "Optional[Sequence[Any]]"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str"
                ]
            }
        },
        "_HealSchemaVisitor.on_argument": {
            "name": "on_argument",
            "location": 51,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "argument": [
                    "dict",
                    "str"
                ]
            }
        },
        "_HealSchemaVisitor.on_union": {
            "name": "on_union",
            "location": 61,
            "return": [
                "Sequence[int]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "union": [
                    "int"
                ]
            }
        },
        "_HealSchemaVisitor.on_input_field": {
            "name": "on_input_field",
            "location": 68,
            "return": [
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/schema/introspection.py": {
        "_resolve_type_kind": {
            "name": "_resolve_type_kind",
            "location": 188,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "Iterator",
                "int"
            ],
            "arguments": {
                "type_": [
                    "mypy.types.CallableType",
                    "schema.GraphQLType",
                    "List[mypy.types.Type]"
                ]
            }
        },
        "_format_default_value": {
            "name": "_format_default_value",
            "location": 306,
            "return": [
                "Optional[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "input_value": [
                    "int",
                    "bool",
                    "float",
                    "Optional[str]",
                    "list"
                ]
            }
        },
        "is_introspection_type": {
            "name": "is_introspection_type",
            "location": 459,
            "return": [
                "bool"
            ],
            "arguments": {
                "type_": [
                    "types.GraphQLType",
                    "str",
                    "List[mypy.types.Type]"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/schema/resolver_map.py": {
        "ResolverMap.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ResolverMap.get_resolver": {
            "name": "get_resolver",
            "location": 28,
            "return": [
                "str",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "typename": [
                    "int",
                    "str",
                    "Dict[str, Any]"
                ],
                "fieldname": [
                    "str",
                    "bool"
                ]
            }
        },
        "ResolverMap.get_subscription": {
            "name": "get_subscription",
            "location": 37,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "typename": [
                    "str",
                    "bool"
                ],
                "fieldname": [
                    "str",
                    "bool"
                ]
            }
        },
        "ResolverMap.register_default_resolver": {
            "name": "register_default_resolver",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typename": [
                    "str",
                    "Callable[[T], bool]"
                ],
                "resolver": [
                    "int"
                ]
            }
        },
        "ResolverMap.register_resolver": {
            "name": "register_resolver",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typename": [
                    "bool",
                    "str",
                    "Optional[bool]"
                ],
                "fieldname": [
                    "str",
                    "bool"
                ],
                "resolver": [
                    "Callable[[], bool]",
                    "bool",
                    "List[int]",
                    "int"
                ]
            }
        },
        "ResolverMap.resolver": {
            "name": "resolver",
            "location": 104,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "ResolverMap.register_subscription": {
            "name": "register_subscription",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typename": [
                    "str",
                    "bool"
                ],
                "fieldname": [
                    "str",
                    "bool"
                ],
                "resolver": [
                    "int",
                    "float",
                    "Optional[List[str]]"
                ]
            }
        },
        "ResolverMap.subscription": {
            "name": "subscription",
            "location": 169,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "ResolverMap.merge_resolvers": {
            "name": "merge_resolvers",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "Optional[str]",
                    "TextIO"
                ]
            }
        },
        "ResolverMap.resolver.decorator": {
            "name": "decorator",
            "location": 128,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "ResolverMap.subscription.decorator": {
            "name": "decorator",
            "location": 193,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "bool"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/schema/scalars.py": {
        "_typed_coerce": {
            "name": "_typed_coerce",
            "location": 25,
            "return": [
                "str",
                "Exception",
                "Callable[..., T]",
                "Iterator"
            ],
            "arguments": {
                "coerce_": [
                    "str",
                    "bool"
                ]
            }
        },
        "coerce_int": {
            "name": "coerce_int",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "maybe_int": [
                    "int",
                    "bool"
                ]
            }
        },
        "coerce_float": {
            "name": "coerce_float",
            "location": 90,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "maybe_float": [
                    "str",
                    "Optional[\"Outcome\"]",
                    "Callable",
                    "Optional['cirq.SingleQubitGate']"
                ]
            }
        },
        "_parse_string": {
            "name": "_parse_string",
            "location": 138,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_serialize_string": {
            "name": "_serialize_string",
            "location": 144,
            "return": [
                "str",
                "Optional[List[str]]",
                "Optional[str]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "_parse_uuid": {
            "name": "_parse_uuid",
            "location": 192,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "maybe_uuid": [
                    "str",
                    "List[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "_serialize_uuid": {
            "name": "_serialize_uuid",
            "location": 199,
            "return": [
                "str"
            ],
            "arguments": {
                "maybe_uuid": [
                    "str",
                    "TextIO"
                ]
            }
        },
        "_identity": {
            "name": "_identity",
            "location": 268,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "value": [
                    "ics.types.ContextDict",
                    "ics.types.ExtraParams",
                    "ics.types.DatetimeLike",
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "default_scalar": {
            "name": "default_scalar",
            "location": 272,
            "return": [
                "str",
                "bool",
                "types.Message"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "bool",
                    "Type",
                    "Dict[str, Any]"
                ],
                "description": [
                    "str",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "bool",
                    "Type",
                    "Dict[str, Any]"
                ],
                "nodes": [
                    "str",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "bool",
                    "Type",
                    "Dict[str, Any]"
                ]
            }
        },
        "_typed_coerce._coerce": {
            "name": "_coerce",
            "location": 28,
            "return": [
                "int",
                "mypy.types.CallableType",
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "List[int]"
            ],
            "arguments": {
                "node": [
                    "str"
                ],
                "_variables": [
                    "Mapping[str, Any]",
                    "T",
                    "zerver.lib.types.ViewFuncT",
                    "int",
                    "Callable[[None], \"Expr\"]",
                    "Callable",
                    "re.Match[str]"
                ]
            }
        },
        "RegexType.__init__": {
            "name": "__init__",
            "location": 237,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Type[Any]",
                    "bool"
                ],
                "regex": [
                    "bool",
                    "str",
                    "bytes"
                ],
                "description": [
                    "str",
                    "Type[Any]",
                    "bool"
                ]
            }
        },
        "RegexType.__init__._parse": {
            "name": "_parse",
            "location": 247,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "T",
                    "bool"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/schema/schema.py": {
        "_build_directive_map": {
            "name": "_build_directive_map",
            "location": 573,
            "return": [
                "bool"
            ],
            "arguments": {
                "maybe_directives": [
                    "bool",
                    "list",
                    "Iterable[str]"
                ]
            }
        },
        "_default_type_map": {
            "name": "_default_type_map",
            "location": 604,
            "return": [
                "mypy.types.Type",
                "types.Resolver",
                "str",
                "BinaryIO"
            ],
            "arguments": {}
        },
        "_build_type_map": {
            "name": "_build_type_map",
            "location": 611,
            "return": [
                "mypy.types.Type",
                "int",
                "types.Resolver"
            ],
            "arguments": {
                "types": [
                    "str"
                ],
                "directives": [
                    "str",
                    "Collection[str]",
                    "bool",
                    "Literal",
                    "Tuple[int]"
                ],
                "_type_map": [
                    "mypy.types.Type",
                    "type"
                ]
            }
        },
        "Schema.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query_type": [
                    "Type[Any]",
                    "T",
                    "mypy.types.Instance",
                    "Collection",
                    "Type",
                    "mypy.types.Type"
                ],
                "mutation_type": [
                    "Type[Any]",
                    "T",
                    "mypy.types.Instance",
                    "Collection",
                    "Type",
                    "mypy.types.Type"
                ],
                "subscription_type": [
                    "Type[Any]",
                    "T",
                    "mypy.types.Instance",
                    "Collection",
                    "Type",
                    "mypy.types.Type"
                ],
                "directives": [
                    "List[int]",
                    "Type[Any]",
                    "mypy.types.TypeType",
                    "Optional[mypy.types.Type]",
                    "dict",
                    "Type",
                    "mypy.types.Type",
                    "Collection",
                    "mypy.types.CallableType"
                ],
                "types": [
                    "mypy.types.Type",
                    "Optional[mypy.types.Type]",
                    "Optional[Type]",
                    "bool",
                    "mypy.types.CallableType"
                ],
                "nodes": [
                    "float"
                ]
            }
        },
        "Schema._invalidate_and_rebuild_caches": {
            "name": "_invalidate_and_rebuild_caches",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema._replace_types_and_directives": {
            "name": "_replace_types_and_directives",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "types": [
                    "Set[str]",
                    "mypy.types.Type",
                    "str",
                    "schema.GraphQLType",
                    "Dict[str, type]"
                ],
                "directives": [
                    "Callable",
                    "Type[T]",
                    "Mapping[str, Any]",
                    "mypy.types.Instance",
                    "str"
                ]
            }
        },
        "Schema.validate": {
            "name": "validate",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.get_type": {
            "name": "get_type",
            "location": 242,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Schema.has_type": {
            "name": "has_type",
            "location": 261,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "mypy.types.UnionType",
                    "dict",
                    "set",
                    "type"
                ]
            }
        },
        "Schema.get_type_from_literal": {
            "name": "get_type_from_literal",
            "location": 267,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "ast_node": [
                    "type.GraphQLType"
                ]
            }
        },
        "Schema.get_possible_types": {
            "name": "get_possible_types",
            "location": 297,
            "return": [
                "mypy.types.Type",
                "List[mypy.types.Type]",
                "Tuple[mypy.types.Type, mypy.types.Type]",
                "mypy.types.Type.dDictType"
            ],
            "arguments": {
                "self": [],
                "abstract_type": [
                    "mypy.types.Type",
                    "type",
                    "Sequence[Dict[str, Any]]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Schema.is_possible_type": {
            "name": "is_possible_type",
            "location": 327,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "abstract_type": [
                    "str",
                    "Optional[mypy.types.TypeVarDef]",
                    "mypy.types.Type"
                ],
                "type_": [
                    "mypy.types.Type",
                    "Optional[List['mypy.types.TypeVarDef']]",
                    "type"
                ]
            }
        },
        "Schema.is_subtype": {
            "name": "is_subtype",
            "location": 340,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "mypy.types.CallableType",
                    "type",
                    "mypy.types.Type",
                    "mypy.types.Instance"
                ],
                "super_type": [
                    "mypy.types.CallableType",
                    "type",
                    "mypy.types.Type",
                    "mypy.types.Instance"
                ]
            }
        },
        "Schema.types_overlap": {
            "name": "types_overlap",
            "location": 374,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "rhs": [
                    "types.GraphQLType",
                    "mypy.types.Type",
                    "Optional[List[\"custom_index\"]]",
                    "Optional[mypy.types.Type]"
                ],
                "lhs": [
                    "types.GraphQLType",
                    "mypy.types.Type",
                    "Optional[List[\"custom_index\"]]",
                    "Optional[mypy.types.Type]"
                ]
            }
        },
        "Schema.to_string": {
            "name": "to_string",
            "location": 403,
            "return": [
                "bool",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "indent": [
                    "bool",
                    "Union[str, int]",
                    "Tuple[str, str, str]",
                    "str",
                    "Sequence[Dict[str, str]]"
                ],
                "include_descriptions": [
                    "bool",
                    "Union[str, int]",
                    "Tuple[str, str, str]",
                    "str",
                    "Sequence[Dict[str, str]]"
                ],
                "include_introspection": [
                    "bool",
                    "Union[str, int]",
                    "Tuple[str, str, str]",
                    "str",
                    "Sequence[Dict[str, str]]"
                ],
                "include_custom_schema_directives": [
                    "bool",
                    "Union[str, int]",
                    "Tuple[str, str, str]",
                    "str",
                    "Sequence[Dict[str, str]]"
                ]
            }
        },
        "Schema.register_default_resolver": {
            "name": "register_default_resolver",
            "location": 424,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typename": [
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ],
                "resolver": [
                    "bool",
                    "str",
                    "bytes",
                    "Callable[..., None]",
                    "Optional[Any]"
                ]
            }
        },
        "Schema.register_resolver": {
            "name": "register_resolver",
            "location": 451,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "typename": [
                    "str",
                    "bool",
                    "Sequence[int]",
                    "List[str]"
                ],
                "fieldname": [
                    "str",
                    "float",
                    "bytes",
                    "List[Tuple[int, int]]",
                    "Optional[str]"
                ],
                "resolver": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "int",
                    "Optional[Sequence[Any]]",
                    "List[int]",
                    "List[Optional[str]]"
                ]
            }
        },
        "Schema.register_subscription": {
            "name": "register_subscription",
            "location": 499,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typename": [
                    "str",
                    "bool",
                    "Sequence[int]",
                    "List[str]"
                ],
                "fieldname": [
                    "str",
                    "float",
                    "bytes",
                    "List[Tuple[int, int]]",
                    "Optional[str]"
                ],
                "resolver": [
                    "bool",
                    "Optional[bool]",
                    "Optional[int]",
                    "Optional[float]"
                ]
            }
        },
        "Schema.clone": {
            "name": "clone",
            "location": 544,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "py-gql-master/src/py_gql/schema/schema_visitor.py": {
        "SchemaVisitor.on_schema": {
            "name": "on_schema",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "int",
                    "mypy.types.Type"
                ]
            }
        },
        "SchemaVisitor.on_scalar": {
            "name": "on_scalar",
            "location": 90,
            "return": [
                "mypy.types.Type",
                "str"
            ],
            "arguments": {
                "self": [],
                "scalar_type": [
                    "Optional[types.TracebackType]",
                    "Optional[Type[BaseException]]",
                    "str",
                    "types.TracebackType",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "SchemaVisitor.on_object": {
            "name": "on_object",
            "location": 93,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "self": [],
                "object_type": [
                    "schema.InterfaceType",
                    "types.Resolver",
                    "Optional[mypy.types.Type]",
                    "schema.ScalarType",
                    "schema.EnumType"
                ]
            }
        },
        "SchemaVisitor.on_field": {
            "name": "on_field",
            "location": 106,
            "return": [
                "Mapping",
                "mypy.types.CallableType",
                "bool",
                "Union[str, List[str]]",
                "mypy.types.Instance"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "SchemaVisitor.on_argument": {
            "name": "on_argument",
            "location": 122,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "argument": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "SchemaVisitor.on_interface": {
            "name": "on_interface",
            "location": 125,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "self": [],
                "interface_type": [
                    "types.Resolver",
                    "schema.InterfaceType",
                    "Optional[mypy.types.Type]",
                    "schema.ScalarType",
                    "schema.EnumType"
                ]
            }
        },
        "SchemaVisitor.on_union": {
            "name": "on_union",
            "location": 139,
            "return": [
                "mypy.types.Type",
                "str"
            ],
            "arguments": {
                "self": [],
                "union_type": [
                    "Optional[types.TracebackType]",
                    "Optional[Type[BaseException]]",
                    "str",
                    "types.TracebackType",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "SchemaVisitor.on_enum": {
            "name": "on_enum",
            "location": 142,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "self": [],
                "enum_type": [
                    "mypy.types.Type",
                    "mypy.types.CallableType",
                    "Sequence[Dict[str, Any]]",
                    "Optional[int]"
                ]
            }
        },
        "SchemaVisitor.on_enum_value": {
            "name": "on_enum_value",
            "location": 153,
            "return": [
                "int",
                "str",
                "tuple",
                "List[int]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": [],
                "enum_value": [
                    "str",
                    "List[int]",
                    "list",
                    "dict"
                ]
            }
        },
        "SchemaVisitor.on_input_object": {
            "name": "on_input_object",
            "location": 156,
            "return": [
                "mypy.types.Type",
                "Sequence[Any]"
            ],
            "arguments": {
                "self": [],
                "input_object_type": [
                    "mypy.types.Type",
                    "schema.InterfaceType",
                    "recidiviz.persistence.database.schema.state.schema.StateSupervisionViolationResponse"
                ]
            }
        },
        "SchemaVisitor.on_input_field": {
            "name": "on_input_field",
            "location": 171,
            "return": [
                "str",
                "mypy.types.Type",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "SchemaVisitor.on_directive": {
            "name": "on_directive",
            "location": 174,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "directive": [
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/schema/types.py": {
        "is_input_type": {
            "name": "is_input_type",
            "location": 1062,
            "return": [
                "type"
            ],
            "arguments": {
                "type_": [
                    "schema.GraphQLType"
                ]
            }
        },
        "is_output_type": {
            "name": "is_output_type",
            "location": 1073,
            "return": [],
            "arguments": {
                "type_": [
                    "schema.GraphQLType"
                ]
            }
        },
        "unwrap_type": {
            "name": "unwrap_type",
            "location": 1085,
            "return": [
                "Type"
            ],
            "arguments": {
                "type_": [
                    "str",
                    "List[str]",
                    "Type",
                    "Callable[[None], None]",
                    "bytes",
                    "type"
                ]
            }
        },
        "GraphQLCompositeType.fields": {
            "name": "fields",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "str",
                    "List[List[str]]",
                    "bool",
                    "List[str]",
                    "int"
                ]
            }
        },
        "GraphQLCompositeType.field_map": {
            "name": "field_map",
            "location": 97,
            "return": [
                "List[str]",
                "list",
                "Set[str]",
                "AbstractSet[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputValue.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "type_": [
                    "str",
                    "int",
                    "bool"
                ],
                "default_value": [
                    "float",
                    "list",
                    "Optional[int]",
                    "str",
                    "int"
                ],
                "description": [
                    "str",
                    "int",
                    "bool"
                ],
                "node": [
                    "str",
                    "int",
                    "bool"
                ],
                "python_name": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "InputValue.default_value": {
            "name": "default_value",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputValue.type": {
            "name": "type",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "str",
                    "List[str]",
                    "type",
                    "Type",
                    "Callable[[None], None]"
                ]
            }
        },
        "InputValue.required": {
            "name": "required",
            "location": 147,
            "return": [
                "Type",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputField.__str__": {
            "name": "__str__",
            "location": 194,
            "return": [
                "Dict[str, Any]",
                "bool",
                "int",
                "str",
                "Union[type, Tuple[type, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputField.__repr__": {
            "name": "__repr__",
            "location": 197,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputObjectType.__init__": {
            "name": "__init__",
            "location": 234,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "bool"
                ],
                "fields": [
                    "str",
                    "Optional[Sequence[str]]",
                    "Tuple[type]",
                    "Optional[str]",
                    "bool",
                    "Union[str, List[str], None]",
                    "Callable"
                ],
                "description": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]",
                    "Sequence"
                ],
                "nodes": [
                    "Sequence[str]",
                    "int",
                    "Optional[Any]",
                    "Optional[str]"
                ]
            }
        },
        "InputObjectType.fields": {
            "name": "fields",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "str",
                    "List[List[str]]",
                    "bool",
                    "List[str]",
                    "int"
                ]
            }
        },
        "InputObjectType.field_map": {
            "name": "field_map",
            "location": 267,
            "return": [
                "List[str]",
                "list",
                "Set[str]",
                "AbstractSet[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumValue.from_def": {
            "name": "from_def",
            "location": 324,
            "return": [
                "str",
                "Sequence[str]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "definition": [
                    "str"
                ]
            }
        },
        "EnumValue.__init__": {
            "name": "__init__",
            "location": 344,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict",
                    "bool"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "deprecation_reason": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[int]"
                ],
                "description": [
                    "str",
                    "List[int]",
                    "Optional[str]",
                    "int"
                ],
                "node": [
                    "str",
                    "List[int]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "EnumValue.__str__": {
            "name": "__str__",
            "location": 362,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumType.from_python_enum": {
            "name": "from_python_enum",
            "location": 400,
            "return": [
                "dict",
                "list",
                "tuple",
                "Dict[str, Any]",
                "Sequence[Dict[str, str]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "dict"
                ],
                "enum": [
                    "str",
                    "List[str]",
                    "dict"
                ],
                "description": [
                    "str",
                    "List[str]",
                    "dict"
                ],
                "nodes": [
                    "str",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "EnumType.__init__": {
            "name": "__init__",
            "location": 411,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "values": [
                    "bool",
                    "Optional[str]"
                ],
                "description": [
                    "str",
                    "bool",
                    "Tuple[float, float]",
                    "int",
                    "Optional[str]"
                ],
                "nodes": [
                    "Optional[str]",
                    "bool",
                    "Callable",
                    "Optional[IO[bytes]]",
                    "Optional[Any]"
                ]
            }
        },
        "EnumType._set_values": {
            "name": "_set_values",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "EnumType.get_value": {
            "name": "get_value",
            "location": 444,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Set[str]",
                    "bool"
                ]
            }
        },
        "EnumType.get_name": {
            "name": "get_name",
            "location": 464,
            "return": [
                "str",
                "Container[\"Taxon\"]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "str",
                    "Iterable",
                    "bool",
                    "dict"
                ]
            }
        },
        "ScalarType.__init__": {
            "name": "__init__",
            "location": 553,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Optional[Sequence[Any]]"
                ],
                "serialize": [
                    "bool",
                    "List[str]",
                    "int",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "parse": [
                    "bool",
                    "List[str]",
                    "int",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "parse_literal": [
                    "str"
                ],
                "description": [
                    "bool",
                    "List[str]",
                    "int",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "nodes": [
                    "Optional[str]",
                    "Optional[Any]",
                    "bool",
                    "Callable",
                    "str",
                    "Optional[bool]"
                ]
            }
        },
        "ScalarType.serialize": {
            "name": "serialize",
            "location": 575,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "ScalarType.parse": {
            "name": "parse",
            "location": 594,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "ScalarType.parse_literal": {
            "name": "parse_literal",
            "location": 613,
            "return": [
                "List[Dict[str, Any]]",
                "Sequence[Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "Type"
                ],
                "variables": [
                    "type",
                    "Type"
                ]
            }
        },
        "Argument.__str__": {
            "name": "__str__",
            "location": 684,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Argument.__repr__": {
            "name": "__repr__",
            "location": 687,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.__init__": {
            "name": "__init__",
            "location": 738,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Iterable[str]"
                ],
                "type_": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "float",
                    "Optional[bool]",
                    "int",
                    "list"
                ],
                "args": [],
                "description": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "float",
                    "Optional[bool]",
                    "int",
                    "list"
                ],
                "deprecation_reason": [
                    "bool",
                    "Optional[str]",
                    "Optional[float]",
                    "float"
                ],
                "resolver": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "float",
                    "Optional[bool]",
                    "int",
                    "list"
                ],
                "subscription_resolver": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "float",
                    "Optional[bool]",
                    "int",
                    "list"
                ],
                "node": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "float",
                    "Optional[bool]",
                    "int",
                    "list"
                ],
                "python_name": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        },
        "Field.type": {
            "name": "type",
            "location": 770,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "str",
                    "List[str]",
                    "type",
                    "Type",
                    "Callable[[None], None]"
                ]
            }
        },
        "Field.arguments": {
            "name": "arguments",
            "location": 780,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "Field.argument_map": {
            "name": "argument_map",
            "location": 784,
            "return": [
                "bool",
                "List[str]",
                "str",
                "Set[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.__str__": {
            "name": "__str__",
            "location": 787,
            "return": [
                "bool",
                "str",
                "Type",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.__repr__": {
            "name": "__repr__",
            "location": 790,
            "return": [
                "dict",
                "Type",
                "List[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterfaceType.__init__": {
            "name": "__init__",
            "location": 833,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ],
                "fields": [
                    "Tuple[type]",
                    "bool",
                    "Optional[Sequence[str]]",
                    "Union[str, List[str], None]",
                    "List[str]",
                    "Optional[str]",
                    "str"
                ],
                "resolve_type": [
                    "str",
                    "type",
                    "int"
                ],
                "description": [
                    "Optional[List[str]]",
                    "bool",
                    "int"
                ],
                "nodes": [
                    "Optional[Any]",
                    "Optional[Dict[Hashable, Any]]",
                    "bool",
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ObjectType.__init__": {
            "name": "__init__",
            "location": 897,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]",
                    "str",
                    "Callable[[], int]",
                    "bool"
                ],
                "fields": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "Optional[int]"
                ],
                "interfaces": [
                    "str",
                    "List[Dict[str, Any]]",
                    "Optional[str]",
                    "Sequence[str]",
                    "int",
                    "List['cirq.Circuit']"
                ],
                "default_resolver": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Iterable[str]",
                    "int",
                    "Optional[bool]"
                ],
                "description": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Iterable[str]",
                    "int",
                    "Optional[bool]"
                ],
                "nodes": [
                    "Optional[str]",
                    "bool",
                    "Optional[Any]",
                    "Callable",
                    "str"
                ]
            }
        },
        "ObjectType.interfaces": {
            "name": "interfaces",
            "location": 927,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interfaces": [
                    "List[List[str]]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "UnionType.__init__": {
            "name": "__init__",
            "location": 967,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "types": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "resolve_type": [
                    "Type",
                    "type",
                    "str"
                ],
                "description": [
                    "Optional[List[str]]",
                    "bool",
                    "str"
                ],
                "nodes": [
                    "Optional[Any]",
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Dict]",
                    "Sequence[str]",
                    "Optional[Dict[Hashable, Any]]",
                    "Optional[Pattern]"
                ]
            }
        },
        "UnionType.types": {
            "name": "types",
            "location": 993,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "types": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "Directive.__init__": {
            "name": "__init__",
            "location": 1037,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]"
                ],
                "locations": [
                    "str",
                    "bool"
                ],
                "args": [],
                "description": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "node": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/schema/validation.py": {
        "validate_schema": {
            "name": "validate_schema",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "schema": [
                    "int",
                    "Callable",
                    "str"
                ],
                "enable_resolver_validation": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_is_valid_name": {
            "name": "_is_valid_name",
            "location": 82,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Tuple[str, Dict[str, Any]]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Pattern"
                ]
            }
        },
        "SchemaValidator.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "enable_resolver_validation": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "SchemaValidator.__bool__": {
            "name": "__bool__",
            "location": 123,
            "return": [
                "str",
                "Optional[Callable]",
                "mypy.types.Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaValidator.add_error": {
            "name": "add_error",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "Type[T]"
                ]
            }
        },
        "SchemaValidator.check_valid_name": {
            "name": "check_valid_name",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "SchemaValidator.__call__": {
            "name": "__call__",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaValidator.validate_root_types": {
            "name": "validate_root_types",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaValidator.validate_directives": {
            "name": "validate_directives",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaValidator.validate_fields": {
            "name": "validate_fields",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "composite_type": [
                    "str",
                    "apistar.types.ParamName",
                    "int",
                    "Optional[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "SchemaValidator._validate_resolver_arguments": {
            "name": "_validate_resolver_arguments",
            "location": 287,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "List[str]"
                ],
                "args": [],
                "resolver": [
                    "Dict[str, Any]",
                    "bool",
                    "Set[str]",
                    "str",
                    "int"
                ]
            }
        },
        "SchemaValidator.validate_interfaces": {
            "name": "validate_interfaces",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "SchemaValidator.validate_implementation": {
            "name": "validate_implementation",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "str",
                    "bool",
                    "Type",
                    "Optional[mypy.types.Type]"
                ],
                "interface": [
                    "str",
                    "Type",
                    "types.ModuleType",
                    "List[mypy.types.Instance]",
                    "bool"
                ]
            }
        },
        "SchemaValidator.validate_union_members": {
            "name": "validate_union_members",
            "location": 443,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "union_type": [
                    "str",
                    "bool",
                    "Type"
                ]
            }
        },
        "SchemaValidator.validate_enum_values": {
            "name": "validate_enum_values",
            "location": 467,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "enum_type": [
                    "str",
                    "Type",
                    "type",
                    "Exception",
                    "schema.ScalarType"
                ]
            }
        },
        "SchemaValidator.validate_input_fields": {
            "name": "validate_input_fields",
            "location": 482,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_object": [
                    "str",
                    "type",
                    "bool",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/schema/_types.py": {
        "GraphQLType.__eq__": {
            "name": "__eq__",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "lhs": []
            }
        },
        "GraphQLType.__hash__": {
            "name": "__hash__",
            "location": 35,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphQLType.as_list": {
            "name": "as_list",
            "location": 38,
            "return": [
                "str",
                "dict",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphQLType.as_non_null": {
            "name": "as_non_null",
            "location": 44,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamedType.__str__": {
            "name": "__str__",
            "location": 65,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NamedType.__repr__": {
            "name": "__repr__",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WrappingType.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "str",
                    "int"
                ]
            }
        },
        "WrappingType.type": {
            "name": "type",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "str",
                    "List[str]",
                    "type",
                    "Type",
                    "Callable[[None], None]"
                ]
            }
        },
        "NonNullType.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "node": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "NonNullType.__str__": {
            "name": "__str__",
            "location": 121,
            "return": [
                "bool",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListType.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "str"
                ],
                "node": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "ListType.__str__": {
            "name": "__str__",
            "location": 152,
            "return": [
                "bool",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "py-gql-master/src/py_gql/schema/__init__.py": {},
    "py-gql-master/src/py_gql/schema/differ/changes.py": {
        "SchemaChange.message": {
            "name": "message",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaChange.__eq__": {
            "name": "__eq__",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T",
                    "Mapping[str, Any]",
                    "list",
                    "str",
                    "Optional[Any]",
                    "Exception"
                ]
            }
        },
        "TypeChangedKind.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type_name": [
                    "str",
                    "int",
                    "Optional[Iterable[str]]",
                    "List[str]"
                ],
                "old_kind": [
                    "str",
                    "float"
                ],
                "new_kind": [
                    "Optional[str]",
                    "Tuple[int, int, int]",
                    "str",
                    "bool"
                ]
            }
        },
        "TypeRemoved.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type_name": [
                    "str",
                    "Optional[Iterable[str]]",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "TypeAdded.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type_name": [
                    "str",
                    "Optional[Iterable[str]]",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "TypeRemovedFromUnion.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type_name": [
                    "str",
                    "Optional[Iterable[str]]",
                    "int",
                    "Sequence[str]"
                ],
                "union": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "TypeAddedToUnion.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type_name": [
                    "str",
                    "Optional[Iterable[str]]",
                    "int",
                    "Sequence[str]"
                ],
                "union": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "TypeRemovedFromInterface.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "interface": [
                    "bool",
                    "int",
                    "List[float]",
                    "List[str]"
                ],
                "object_type": [
                    "str",
                    "Union[str, List[str]]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "TypeAddedToInterface.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "interface": [
                    "bool",
                    "int",
                    "List[float]",
                    "List[str]"
                ],
                "object_type": [
                    "str",
                    "Union[str, List[str]]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "EnumValueRemoved.__init__": {
            "name": "__init__",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "enum": [
                    "List[Tuple[int, float]]",
                    "int",
                    "float",
                    "str"
                ],
                "value": [
                    "enum.Enum",
                    "float",
                    "str",
                    "int",
                    "Callable[[None], bool]"
                ]
            }
        },
        "EnumValueAdded.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "enum": [
                    "List[Tuple[int, float]]",
                    "int",
                    "float",
                    "str"
                ],
                "value": [
                    "enum.Enum",
                    "float",
                    "str",
                    "int",
                    "Callable[[None], bool]"
                ]
            }
        },
        "EnumValueDeprecated.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "enum": [
                    "bool",
                    "Optional[int]",
                    "Type[T]",
                    "Optional[Mapping]"
                ],
                "old_value": [
                    "bytes",
                    "bool"
                ],
                "new_value": [
                    "bool",
                    "Union[int, float]",
                    "str"
                ]
            }
        },
        "EnumValueDeprecationRemoved.__init__": {
            "name": "__init__",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "enum": [
                    "bool",
                    "Optional[int]",
                    "Type[T]",
                    "Optional[Mapping]"
                ],
                "old_value": [
                    "bytes",
                    "bool"
                ],
                "new_value": [
                    "bool",
                    "Union[int, float]",
                    "str"
                ]
            }
        },
        "EnumValueDeprecationReasonChanged.__init__": {
            "name": "__init__",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "enum": [
                    "bool",
                    "Optional[int]",
                    "Type[T]",
                    "Optional[Mapping]"
                ],
                "old_value": [
                    "bytes",
                    "bool"
                ],
                "new_value": [
                    "bool",
                    "Union[int, float]",
                    "str"
                ]
            }
        },
        "DirectiveRemoved.__init__": {
            "name": "__init__",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "directive": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DirectiveAdded.__init__": {
            "name": "__init__",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "directive": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DirectiveLocationRemoved.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "directive": [
                    "List[Dict[str, Any]]",
                    "bytes",
                    "str",
                    "list",
                    "dict",
                    "List[str]",
                    "Optional[str]"
                ],
                "location": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "DirectiveLocationAdded.__init__": {
            "name": "__init__",
            "location": 222,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "directive": [
                    "List[Dict[str, Any]]",
                    "bytes",
                    "str",
                    "list",
                    "dict",
                    "List[str]",
                    "Optional[str]"
                ],
                "location": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "DirectiveArgumentRemoved.__init__": {
            "name": "__init__",
            "location": 234,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "directive": [
                    "int",
                    "bool",
                    "float"
                ],
                "argument": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DirectiveArgumentAdded.__init__": {
            "name": "__init__",
            "location": 245,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "directive": [
                    "int",
                    "bool",
                    "float"
                ],
                "argument": [
                    "str",
                    "bool"
                ]
            }
        },
        "DirectiveArgumentDefaultValueChange.__init__": {
            "name": "__init__",
            "location": 263,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "directive": [
                    "int",
                    "bool",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]"
                ],
                "old_argument": [
                    "bool",
                    "Callable[[Optional, Optional, str], None]",
                    "list"
                ],
                "new_argument": [
                    "bool",
                    "int",
                    "Optional[int]",
                    "List[str]",
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "DirectiveArgumentChangedType.__init__": {
            "name": "__init__",
            "location": 281,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "directive": [
                    "int",
                    "bool",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]"
                ],
                "old_argument": [
                    "bool",
                    "Callable[[Optional, Optional, str], None]",
                    "list"
                ],
                "new_argument": [
                    "bool",
                    "int",
                    "Optional[int]",
                    "List[str]",
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "FieldArgumentRemoved.__init__": {
            "name": "__init__",
            "location": 299,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent_type": [
                    "str"
                ],
                "field": [
                    "set",
                    "AbstractSet[str]",
                    "List[str]",
                    "Callable[[T], Optional[T]]",
                    "str",
                    "int",
                    "list",
                    "Container[str]"
                ],
                "argument": [
                    "str",
                    "Optional[List[str]]",
                    "Callable",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "FieldArgumentAdded.__init__": {
            "name": "__init__",
            "location": 319,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent_type": [
                    "str"
                ],
                "field": [
                    "set",
                    "AbstractSet[str]",
                    "List[str]",
                    "Callable[[T], Optional[T]]",
                    "str",
                    "int",
                    "list",
                    "Container[str]"
                ],
                "argument": [
                    "str",
                    "list",
                    "Dict[str, str]",
                    "int"
                ]
            }
        },
        "FieldArgumentDefaultValueChange.__init__": {
            "name": "__init__",
            "location": 347,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent_type": [
                    "int",
                    "str"
                ],
                "field": [
                    "List[str]",
                    "str"
                ],
                "old_argument": [
                    "Optional[bool]",
                    "bool",
                    "str"
                ],
                "new_argument": [
                    "bool"
                ]
            }
        },
        "FieldArgumentChangedType.__init__": {
            "name": "__init__",
            "location": 372,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent_type": [
                    "int",
                    "str"
                ],
                "field": [
                    "List[str]",
                    "str"
                ],
                "old_argument": [
                    "Optional[bool]",
                    "bool",
                    "str"
                ],
                "new_argument": [
                    "bool"
                ]
            }
        },
        "FieldChangedType.__init__": {
            "name": "__init__",
            "location": 395,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent_type": [
                    "str"
                ],
                "old_field": [
                    "type",
                    "bytes",
                    "str",
                    "Dict[str, Any]"
                ],
                "new_field": [
                    "bool",
                    "Optional[Callable[[bool], None]]",
                    "str"
                ]
            }
        },
        "FieldRemoved.__init__": {
            "name": "__init__",
            "location": 416,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent_type": [
                    "str"
                ],
                "field": [
                    "set",
                    "AbstractSet[str]",
                    "List[str]",
                    "Callable[[T], Optional[T]]",
                    "str",
                    "int",
                    "list",
                    "Container[str]"
                ]
            }
        },
        "FieldAdded.__init__": {
            "name": "__init__",
            "location": 433,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent_type": [
                    "str"
                ],
                "field": [
                    "set",
                    "AbstractSet[str]",
                    "List[str]",
                    "Callable[[T], Optional[T]]",
                    "str",
                    "int",
                    "list",
                    "Container[str]"
                ]
            }
        },
        "FieldDeprecated.__init__": {
            "name": "__init__",
            "location": 450,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent_type": [
                    "str"
                ],
                "old_field": [
                    "type",
                    "bytes",
                    "str",
                    "Dict[str, Any]"
                ],
                "new_field": [
                    "bool",
                    "Optional[Callable[[bool], None]]",
                    "str"
                ]
            }
        },
        "FieldDeprecationRemoved.__init__": {
            "name": "__init__",
            "location": 471,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent_type": [
                    "str"
                ],
                "old_field": [
                    "type",
                    "bytes",
                    "str",
                    "Dict[str, Any]"
                ],
                "new_field": [
                    "bool",
                    "Optional[Callable[[bool], None]]",
                    "str"
                ]
            }
        },
        "FieldDeprecationReasonChanged.__init__": {
            "name": "__init__",
            "location": 492,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent_type": [
                    "str"
                ],
                "old_field": [
                    "type",
                    "bytes",
                    "str",
                    "Dict[str, Any]"
                ],
                "new_field": [
                    "bool",
                    "Optional[Callable[[bool], None]]",
                    "str"
                ]
            }
        },
        "InputFieldRemoved.__init__": {
            "name": "__init__",
            "location": 512,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_type": [
                    "str",
                    "Union[str, List[str]]",
                    "int",
                    "List[str]"
                ],
                "field": [
                    "type",
                    "str",
                    "Type[T]",
                    "int"
                ]
            }
        },
        "InputFieldAdded.__init__": {
            "name": "__init__",
            "location": 524,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_type": [
                    "str",
                    "Union[str, List[str]]",
                    "int",
                    "List[str]"
                ],
                "field": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "Collection[str]"
                ]
            }
        },
        "InputFieldDefaultValueChange.__init__": {
            "name": "__init__",
            "location": 542,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_type": [
                    "str",
                    "Tuple[Type]",
                    "Union[str, List[str]]",
                    "enum.Enum",
                    "type"
                ],
                "old_field": [
                    "Dict[str, Any]",
                    "type",
                    "bytes",
                    "IO"
                ],
                "new_field": [
                    "bool",
                    "List[str]",
                    "set",
                    "Optional[Callable[[bool], None]]",
                    "Optional[Type]",
                    "str"
                ]
            }
        },
        "InputFieldChangedType.__init__": {
            "name": "__init__",
            "location": 560,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_type": [
                    "str",
                    "Tuple[Type]",
                    "Union[str, List[str]]",
                    "enum.Enum",
                    "type"
                ],
                "old_field": [
                    "Dict[str, Any]",
                    "type",
                    "bytes",
                    "IO"
                ],
                "new_field": [
                    "bool",
                    "List[str]",
                    "set",
                    "Optional[Callable[[bool], None]]",
                    "Optional[Type]",
                    "str"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/schema/differ/__init__.py": {
        "_iterate_matching_pairs": {
            "name": "_iterate_matching_pairs",
            "location": 109,
            "return": [
                "typing.Iterator[typing.Tuple[TGraphQLType, TGraphQLType]]"
            ],
            "arguments": {
                "old_schema": [
                    "Schema",
                    "dict",
                    "str"
                ],
                "new_schema": [
                    "Schema",
                    "int",
                    "dict"
                ],
                "cls": [
                    "Schema",
                    "Dict[str, float]",
                    "int"
                ]
            }
        },
        "diff_schema": {
            "name": "diff_schema",
            "location": 129,
            "return": [
                "typing.Iterator[changes.SchemaChange]"
            ],
            "arguments": {
                "old_schema": [
                    "Dict[str, Any]",
                    "Callable"
                ],
                "new_schema": [
                    "Dict[str, Any]",
                    "Callable"
                ],
                "min_severity": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[AnyStr]",
                    "Optional[Callable[..., Any]]",
                    "int"
                ]
            }
        },
        "_find_removed_types": {
            "name": "_find_removed_types",
            "location": 173,
            "return": [
                "typing.Iterator[changes.SchemaChange]"
            ],
            "arguments": {
                "old": [
                    "Schema",
                    "Type[Any]",
                    "Dict[str, Any]"
                ],
                "new": [
                    "Schema",
                    "Tuple[List[int], List[int]]",
                    "List[Tuple[Any, Any]]",
                    "int",
                    "List[List[str]]",
                    "Optional[str]"
                ]
            }
        },
        "_find_added_types": {
            "name": "_find_added_types",
            "location": 179,
            "return": [
                "typing.Iterator[changes.SchemaChange]"
            ],
            "arguments": {
                "old": [
                    "Schema",
                    "float",
                    "str",
                    "type"
                ],
                "new": [
                    "Schema",
                    "dict"
                ]
            }
        },
        "_find_changed_types": {
            "name": "_find_changed_types",
            "location": 185,
            "return": [
                "typing.Iterator[changes.SchemaChange]"
            ],
            "arguments": {
                "old": [
                    "Schema",
                    "Type[Any]"
                ],
                "new": [
                    "List[dict]",
                    "type",
                    "Sequence[str]",
                    "dict"
                ]
            }
        },
        "_diff_union_types": {
            "name": "_diff_union_types",
            "location": 198,
            "return": [
                "typing.Iterator[changes.SchemaChange]"
            ],
            "arguments": {
                "old": [
                    "Schema"
                ],
                "new": [
                    "Schema"
                ]
            }
        },
        "_diff_enum_types": {
            "name": "_diff_enum_types",
            "location": 210,
            "return": [
                "typing.Iterator[changes.SchemaChange]"
            ],
            "arguments": {
                "old": [
                    "Schema"
                ],
                "new": [
                    "Schema"
                ]
            }
        },
        "_diff_directives": {
            "name": "_diff_directives",
            "location": 235,
            "return": [
                "typing.Iterator[changes.SchemaChange]"
            ],
            "arguments": {
                "old": [
                    "Schema",
                    "Dict[str, Any]",
                    "dict",
                    "list",
                    "Mapping[str, str]"
                ],
                "new": [
                    "str",
                    "Mapping[str, Any]",
                    "int",
                    "Callable"
                ]
            }
        },
        "_diff_directive_arguments": {
            "name": "_diff_directive_arguments",
            "location": 265,
            "return": [
                "typing.Iterator[changes.SchemaChange]"
            ],
            "arguments": {
                "old_directive": [
                    "float",
                    "int",
                    "Type[BaseException]"
                ],
                "new_directive": [
                    "str",
                    "dict",
                    "Optional[Tuple]",
                    "bool"
                ]
            }
        },
        "_diff_field_arguments": {
            "name": "_diff_field_arguments",
            "location": 299,
            "return": [
                "typing.Iterator[changes.SchemaChange]"
            ],
            "arguments": {
                "parent": [
                    "schema.Schema"
                ],
                "old_field": [
                    "bool",
                    "List[List[str]]",
                    "List[str]"
                ],
                "new_field": [
                    "bool",
                    "Tuple[List[str], List[str]]",
                    "Optional[Iterable[str]]",
                    "float"
                ]
            }
        },
        "_is_safe_input_type_change": {
            "name": "_is_safe_input_type_change",
            "location": 333,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "old_type": [
                    "GraphQLType",
                    "type.GraphQLType"
                ],
                "new_type": [
                    "GraphQLType"
                ]
            }
        },
        "_is_safe_output_type_change": {
            "name": "_is_safe_output_type_change",
            "location": 355,
            "return": [
                "bool",
                "Callable",
                "schema.EnumType",
                "schema.ObjectType",
                "schema.InterfaceType"
            ],
            "arguments": {
                "old_type": [
                    "GraphQLType"
                ],
                "new_type": [
                    "GraphQLType",
                    "Callable"
                ]
            }
        },
        "_diff_object_types": {
            "name": "_diff_object_types",
            "location": 380,
            "return": [
                "typing.Iterator[changes.SchemaChange]"
            ],
            "arguments": {
                "old": [
                    "Schema"
                ],
                "new": [
                    "Schema"
                ]
            }
        },
        "_diff_interface_types": {
            "name": "_diff_interface_types",
            "location": 407,
            "return": [
                "typing.Iterator[changes.SchemaChange]"
            ],
            "arguments": {
                "old": [
                    "Schema"
                ],
                "new": [
                    "Schema"
                ]
            }
        },
        "_diff_field": {
            "name": "_diff_field",
            "location": 425,
            "return": [
                "typing.Iterator[changes.SchemaChange]"
            ],
            "arguments": {
                "old": [
                    "Field",
                    "Exception",
                    "Callable[[], None]"
                ],
                "new": [
                    "Field",
                    "Exception",
                    "Callable[[], None]"
                ],
                "parent_type": []
            }
        },
        "_diff_input_types": {
            "name": "_diff_input_types",
            "location": 443,
            "return": [
                "typing.Iterator[changes.SchemaChange]"
            ],
            "arguments": {
                "old": [
                    "Schema"
                ],
                "new": [
                    "Schema"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/schema/transforms/camel_case.py": {
        "CamelCaseSchemaTransform.on_argument": {
            "name": "on_argument",
            "location": 21,
            "return": [
                "str",
                "Dict[str, int]",
                "dict",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "schema.Argument",
                    "int"
                ]
            }
        },
        "CamelCaseSchemaTransform.on_input_field": {
            "name": "on_input_field",
            "location": 33,
            "return": [
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "input_field": [
                    "schema.InputField",
                    "str",
                    "Callable"
                ]
            }
        },
        "CamelCaseSchemaTransform.on_field": {
            "name": "on_field",
            "location": 45,
            "return": [
                "str",
                "dict",
                "Exception",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "schema.Field",
                    "str",
                    "rflx.model.Field"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/schema/transforms/visibility.py": {
        "VisibilitySchemaTransform.is_type_visible": {
            "name": "is_type_visible",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "VisibilitySchemaTransform.is_directive_visible": {
            "name": "is_directive_visible",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "VisibilitySchemaTransform.is_field_visible": {
            "name": "is_field_visible",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "typename": [
                    "str",
                    "List[str]",
                    "dict"
                ],
                "fieldname": [
                    "str",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "VisibilitySchemaTransform.is_input_field_visible": {
            "name": "is_input_field_visible",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "typename": [
                    "str"
                ],
                "fieldname": [
                    "str"
                ]
            }
        },
        "VisibilitySchemaTransform._is_type_visible": {
            "name": "_is_type_visible",
            "location": 73,
            "return": [
                "bool",
                "Optional[Type]"
            ],
            "arguments": {
                "self": [],
                "named_type": [
                    "str"
                ]
            }
        },
        "VisibilitySchemaTransform._filter_type": {
            "name": "_filter_type",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "named_type": [
                    "str"
                ]
            }
        },
        "VisibilitySchemaTransform.on_scalar": {
            "name": "on_scalar",
            "location": 87,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "scalar_type": [
                    "List[str]",
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "VisibilitySchemaTransform.on_object": {
            "name": "on_object",
            "location": 90,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[BaseException]",
                "Union[int, None]"
            ],
            "arguments": {
                "self": [],
                "object_type": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "VisibilitySchemaTransform.on_interface": {
            "name": "on_interface",
            "location": 107,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[BaseException]",
                "Union[int, None]"
            ],
            "arguments": {
                "self": [],
                "interface_type": [
                    "schema.InterfaceType",
                    "schema.ScalarType",
                    "schema.EnumType",
                    "str"
                ]
            }
        },
        "VisibilitySchemaTransform.on_union": {
            "name": "on_union",
            "location": 126,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "union_type": [
                    "bool",
                    "Type[BaseException]",
                    "schema.UnionType"
                ]
            }
        },
        "VisibilitySchemaTransform.on_enum": {
            "name": "on_enum",
            "location": 129,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "enum_type": [
                    "List[str]",
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "VisibilitySchemaTransform.on_input_object": {
            "name": "on_input_object",
            "location": 132,
            "return": [
                "str",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "input_object_type": [
                    "schema.InputObjectType",
                    "str"
                ]
            }
        },
        "VisibilitySchemaTransform.on_input_field": {
            "name": "on_input_field",
            "location": 151,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str"
                ]
            }
        },
        "VisibilitySchemaTransform.on_directive": {
            "name": "on_directive",
            "location": 156,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "directive": [
                    "str"
                ]
            }
        },
        "VisibilitySchemaTransform.on_interface._filter_field": {
            "name": "_filter_field",
            "location": 113,
            "return": [
                "bool",
                "int",
                "Union[str, Dict]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "field": [
                    "str",
                    "Union[bool, List[bool]]"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/schema/transforms/__init__.py": {
        "transform_schema": {
            "name": "transform_schema",
            "location": 11,
            "return": [
                "Sequence[int]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "schema": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/sdl/ast_schema_printer.py": {
        "ASTSchemaPrinter.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ASTSchemaPrinter.__call__": {
            "name": "__call__",
            "location": 83,
            "return": [
                "list",
                "tuple",
                "Optional[int]",
                "float",
                "List[Tuple[float, str]]",
                "Union[List[float], List[int]]",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "List[float]",
                    "Callable",
                    "Set[int]",
                    "list"
                ]
            }
        },
        "ASTSchemaPrinter.print_description": {
            "name": "print_description",
            "location": 129,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "definition": [
                    "List[str]",
                    "Optional[List[str]]",
                    "str",
                    "IO[str]",
                    "int"
                ],
                "depth": [
                    "int",
                    "bool",
                    "List[str]"
                ],
                "first_in_block": [
                    "int",
                    "Iterable[Any]"
                ]
            }
        },
        "ASTSchemaPrinter.print_deprecated": {
            "name": "print_deprecated",
            "location": 171,
            "return": [
                "Callable",
                "str",
                "list",
                "float"
            ],
            "arguments": {
                "self": [],
                "field_or_enum_value": [
                    "Type",
                    "int",
                    "list",
                    "float"
                ]
            }
        },
        "ASTSchemaPrinter.include_custom_schema_directive": {
            "name": "include_custom_schema_directive",
            "location": 185,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "directive_name": [
                    "str"
                ]
            }
        },
        "ASTSchemaPrinter.print_directives": {
            "name": "print_directives",
            "location": 196,
            "return": [
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "definition": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "ASTSchemaPrinter.print_type": {
            "name": "print_type",
            "location": 234,
            "return": [
                "str",
                "Type"
            ],
            "arguments": {
                "self": [],
                "type_": []
            }
        },
        "ASTSchemaPrinter.print_scalar_type": {
            "name": "print_scalar_type",
            "location": 250,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "Type",
                    "str"
                ]
            }
        },
        "ASTSchemaPrinter.print_enum_type": {
            "name": "print_enum_type",
            "location": 257,
            "return": [
                "Optional[Type]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "type",
                    "Type",
                    "Tuple[Type]",
                    "str",
                    "Type[Any]"
                ]
            }
        },
        "ASTSchemaPrinter.print_union_type": {
            "name": "print_union_type",
            "location": 278,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "type"
                ]
            }
        },
        "ASTSchemaPrinter.print_object_type": {
            "name": "print_object_type",
            "location": 286,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "type"
                ]
            }
        },
        "ASTSchemaPrinter.print_interface_type": {
            "name": "print_interface_type",
            "location": 300,
            "return": [
                "Optional[Type]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "type"
                ]
            }
        },
        "ASTSchemaPrinter.print_fields": {
            "name": "print_fields",
            "location": 308,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "str",
                    "T",
                    "Union[str, List[Any]]"
                ]
            }
        },
        "ASTSchemaPrinter.print_input_object_type": {
            "name": "print_input_object_type",
            "location": 326,
            "return": [
                "Optional[Type]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "type",
                    "int"
                ]
            }
        },
        "ASTSchemaPrinter.print_directive_definition": {
            "name": "print_directive_definition",
            "location": 344,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "directive": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "ASTSchemaPrinter.print_arguments": {
            "name": "print_arguments",
            "location": 352,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "depth": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "ASTSchemaPrinter.print_input_value": {
            "name": "print_input_value",
            "location": 379,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arg_or_inut_field": [
                    "Iterable[Any]",
                    "Callable",
                    "bool",
                    "str"
                ]
            }
        },
        "ASTSchemaPrinter.print_schema_definition": {
            "name": "print_schema_definition",
            "location": 389,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "types.GraphQLType"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/sdl/ast_type_builder.py": {
        "_default_type_map": {
            "name": "_default_type_map",
            "location": 37,
            "return": [
                "str",
                "BinaryIO"
            ],
            "arguments": {}
        },
        "_deprecation_reason": {
            "name": "_deprecation_reason",
            "location": 530,
            "return": [
                "Optional[str]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "node": []
            }
        },
        "_desc": {
            "name": "_desc",
            "location": 537,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "node": [
                    "Sequence[object]",
                    "dict"
                ]
            }
        },
        "ASTTypeBuilder.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type_defs": [
                    "float",
                    "Optional[Type[BaseException]]"
                ],
                "directive_defs": [
                    "List[List[int]]",
                    "str",
                    "int"
                ],
                "type_extensions": [
                    "int",
                    "str"
                ],
                "additional_types": [
                    "List[Tuple[str, str, str]]",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "ASTTypeBuilder._collect_extensions": {
            "name": "_collect_extensions",
            "location": 87,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": [],
                "target_name": [
                    "str",
                    "Optional[int]"
                ],
                "ext_type": [
                    "str"
                ]
            }
        },
        "ASTTypeBuilder.build_type": {
            "name": "build_type",
            "location": 107,
            "return": [
                "int",
                "schema.GraphQLType",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "type_node": [
                    "str"
                ]
            }
        },
        "ASTTypeBuilder.build_directive": {
            "name": "build_directive",
            "location": 151,
            "return": [
                "Dict[str, Union[str, Any]]",
                "List[str]",
                "Optional[int]",
                "dict",
                "IO",
                "str"
            ],
            "arguments": {
                "self": [],
                "directive_def": [
                    "str",
                    "int"
                ]
            }
        },
        "ASTTypeBuilder.extend_type": {
            "name": "extend_type",
            "location": 166,
            "return": [
                "bool",
                "schema.GraphQLType"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "schema.GraphQLType",
                    "type.GraphQLType",
                    "Type[Any]"
                ]
            }
        },
        "ASTTypeBuilder.extend_directive": {
            "name": "extend_directive",
            "location": 199,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "directive": [
                    "schema.Directive",
                    "str",
                    "bool",
                    "Callable[..., Awaitable]",
                    "List[str]"
                ]
            }
        },
        "ASTTypeBuilder._build_object_type": {
            "name": "_build_object_type",
            "location": 211,
            "return": [],
            "arguments": {
                "self": [],
                "type_def": [
                    "str",
                    "basilisp.lang.symbol.Symbol",
                    "Type"
                ]
            }
        },
        "ASTTypeBuilder._build_interface_type": {
            "name": "_build_interface_type",
            "location": 231,
            "return": [],
            "arguments": {
                "self": [],
                "type_def": [
                    "str",
                    "basilisp.lang.symbol.Symbol",
                    "Type"
                ]
            }
        },
        "ASTTypeBuilder._build_field": {
            "name": "_build_field",
            "location": 243,
            "return": [
                "bool",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "field_def": [
                    "Mapping[str, Any]",
                    "int",
                    "bytes",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "ASTTypeBuilder._build_enum_type": {
            "name": "_build_enum_type",
            "location": 258,
            "return": [],
            "arguments": {
                "self": [],
                "type_def": [
                    "str",
                    "rflx.model.Field",
                    "int",
                    "basilisp.lang.symbol.Symbol"
                ]
            }
        },
        "ASTTypeBuilder._build_enum_value": {
            "name": "_build_enum_value",
            "location": 266,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ASTTypeBuilder._build_union_type": {
            "name": "_build_union_type",
            "location": 275,
            "return": [],
            "arguments": {
                "self": [],
                "type_def": [
                    "GraphQLType"
                ]
            }
        },
        "ASTTypeBuilder._build_scalar_type": {
            "name": "_build_scalar_type",
            "location": 288,
            "return": [
                "Type",
                "schema.ScalarType",
                "schema.UnionType",
                "bool"
            ],
            "arguments": {
                "self": [],
                "type_def": [
                    "Union[str, 'Type']",
                    "bool",
                    "schema.InputField"
                ]
            }
        },
        "ASTTypeBuilder._build_input_object_type": {
            "name": "_build_input_object_type",
            "location": 297,
            "return": [
                "schema.InputObjectType",
                "bool"
            ],
            "arguments": {
                "self": [],
                "type_def": [
                    "str",
                    "Union[str, 'Type']"
                ]
            }
        },
        "ASTTypeBuilder._build_argument": {
            "name": "_build_argument",
            "location": 310,
            "return": [
                "Type",
                "str",
                "Mapping[str, Any]",
                "type"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict",
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "ASTTypeBuilder._build_input_field": {
            "name": "_build_input_field",
            "location": 319,
            "return": [
                "bool",
                "Union[type, Tuple[type, ...]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict"
                ]
            }
        },
        "ASTTypeBuilder._extend_object_type": {
            "name": "_extend_object_type",
            "location": 328,
            "return": [],
            "arguments": {
                "self": [],
                "object_type": [
                    "str"
                ]
            }
        },
        "ASTTypeBuilder._extend_field": {
            "name": "_extend_field",
            "location": 376,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "field_def": [
                    "str",
                    "Type",
                    "Union[str, List[Any]]",
                    "schema.InputField"
                ]
            }
        },
        "ASTTypeBuilder._extend_interface_type": {
            "name": "_extend_interface_type",
            "location": 387,
            "return": [],
            "arguments": {
                "self": [],
                "interface_type": [
                    "str"
                ]
            }
        },
        "ASTTypeBuilder._extend_enum_type": {
            "name": "_extend_enum_type",
            "location": 414,
            "return": [],
            "arguments": {
                "self": [],
                "enum_type": [
                    "dataclasses.Field",
                    "rflx.model.Field",
                    "type.GraphQLType",
                    "Type"
                ]
            }
        },
        "ASTTypeBuilder._extend_union_type": {
            "name": "_extend_union_type",
            "location": 439,
            "return": [],
            "arguments": {
                "self": [],
                "union_type": [
                    "str"
                ]
            }
        },
        "ASTTypeBuilder._extend_input_object_type": {
            "name": "_extend_input_object_type",
            "location": 469,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input_object_type": []
            }
        },
        "ASTTypeBuilder._extend_scalar_type": {
            "name": "_extend_scalar_type",
            "location": 507,
            "return": [],
            "arguments": {
                "self": [],
                "scalar_type": [
                    "str"
                ]
            }
        },
        "ASTTypeBuilder._extend_argument": {
            "name": "_extend_argument",
            "location": 520,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "argument": [
                    "Callable[..., Awaitable]",
                    "str"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/sdl/schema_directives.py": {
        "_find_directives": {
            "name": "_find_directives",
            "location": 71,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "definition": [
                    "str",
                    "int"
                ]
            }
        },
        "apply_schema_directives": {
            "name": "apply_schema_directives",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "schema": [
                    "int",
                    "Callable",
                    "str"
                ],
                "schema_directives": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "SchemaDirective.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "_SchemaDirectivesApplicationVisitor.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "schema_directives": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ],
                "directives": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "_SchemaDirectivesApplicationVisitor._collect_schema_directives": {
            "name": "_collect_schema_directives",
            "location": 159,
            "return": [
                "typing.Iterator[SchemaDirective]"
            ],
            "arguments": {
                "self": [],
                "definition": [
                    "int",
                    "Callable",
                    "str"
                ],
                "loc": [
                    "str",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "_SchemaDirectivesApplicationVisitor.on_schema": {
            "name": "on_schema",
            "location": 188,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "schema.Schema"
                ]
            }
        },
        "_SchemaDirectivesApplicationVisitor.on_scalar": {
            "name": "on_scalar",
            "location": 197,
            "return": [
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "scalar": [
                    "int"
                ]
            }
        },
        "_SchemaDirectivesApplicationVisitor.on_object": {
            "name": "on_object",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "object_type": []
            }
        },
        "_SchemaDirectivesApplicationVisitor.on_field": {
            "name": "on_field",
            "location": 214,
            "return": [
                "Optional[List[str]]",
                "Optional[Dict]",
                "Optional[str]",
                "str",
                "Optional[\"Period\"]"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "lang.asField"
                ]
            }
        },
        "_SchemaDirectivesApplicationVisitor.on_argument": {
            "name": "on_argument",
            "location": 221,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "dict"
                ]
            }
        },
        "_SchemaDirectivesApplicationVisitor.on_interface": {
            "name": "on_interface",
            "location": 228,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "interface": []
            }
        },
        "_SchemaDirectivesApplicationVisitor.on_union": {
            "name": "on_union",
            "location": 235,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "union": []
            }
        },
        "_SchemaDirectivesApplicationVisitor.on_enum": {
            "name": "on_enum",
            "location": 242,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "enum": [
                    "float",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "_SchemaDirectivesApplicationVisitor.on_enum_value": {
            "name": "on_enum_value",
            "location": 249,
            "return": [
                "str",
                "Optional[str]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]"
            ],
            "arguments": {
                "self": [],
                "enum_value": [
                    "ByteString",
                    "Type",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "_SchemaDirectivesApplicationVisitor.on_input_object": {
            "name": "on_input_object",
            "location": 256,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "input_object": [
                    "basilisp.lang.ReaderForm"
                ]
            }
        },
        "_SchemaDirectivesApplicationVisitor.on_input_field": {
            "name": "on_input_field",
            "location": 265,
            "return": [
                "Optional[int]",
                "List[str]",
                "str",
                "type",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "dataclasses.Field",
                    "rflx.model.Field",
                    "schema.Field",
                    "django.db.models.fields.Field"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/sdl/schema_from_ast.py": {
        "build_schema": {
            "name": "build_schema",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "document": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "build_schema_ignoring_extensions": {
            "name": "build_schema_ignoring_extensions",
            "location": 88,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "document": [
                    "str",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "extend_schema": {
            "name": "extend_schema",
            "location": 149,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "schema": [
                    "schema.Schema",
                    "str",
                    "Dict[str, Any]",
                    "BinaryIO"
                ],
                "document": [
                    "bool",
                    "Optional[List[schema.NamedType]]",
                    "Union[lang.asDocument, str]"
                ]
            }
        },
        "_collect_definitions": {
            "name": "_collect_definitions",
            "location": 278,
            "return": [
                "tuple",
                "str"
            ],
            "arguments": {
                "document": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_document_ast": {
            "name": "_document_ast",
            "location": 312,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "document": [
                    "Union[str, lang.asDocument]",
                    "str",
                    "BinaryIO",
                    "int"
                ]
            }
        },
        "_collect_extensions": {
            "name": "_collect_extensions",
            "location": 321,
            "return": [
                "tuple"
            ],
            "arguments": {
                "schema": [
                    "schema.Schema",
                    "bool",
                    "Callable",
                    "Hashable",
                    "int"
                ],
                "document": [
                    "int",
                    "Callable",
                    "str"
                ],
                "strict": [
                    "bool",
                    "Optional[Any]"
                ]
            }
        },
        "extend_schema._extend_or": {
            "name": "_extend_or",
            "location": 241,
            "return": [
                "bool"
            ],
            "arguments": {
                "maybe_type": [
                    "str",
                    "schema.ScalarType"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/sdl/__init__.py": {},
    "py-gql-master/src/py_gql/utilities/ast_node_from_value.py": {
        "ast_node_from_value": {
            "name": "ast_node_from_value",
            "location": 26,
            "return": [
                "Optional[str]",
                "Callable"
            ],
            "arguments": {
                "value": [
                    "float",
                    "str"
                ],
                "input_type": [
                    "schema.GraphQLType",
                    "str",
                    "Optional[str]",
                    "T"
                ]
            }
        },
        "_object_value_node_from_value": {
            "name": "_object_value_node_from_value",
            "location": 90,
            "return": [
                "bool",
                "int",
                "Tuple[float, float, float, float]",
                "Type"
            ],
            "arguments": {
                "input_type": [
                    "schema.InputObjectType",
                    "str",
                    "dict",
                    "type"
                ],
                "value": [
                    "dict",
                    "str",
                    "Optional[dict]"
                ]
            }
        },
        "_scalar_node_from_value": {
            "name": "_scalar_node_from_value",
            "location": 116,
            "return": [
                "int"
            ],
            "arguments": {
                "input_type": [
                    "schema.GraphQLType",
                    "T",
                    "Callable"
                ],
                "scalar_value": [
                    "Union[int, float]",
                    "str"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/utilities/ast_transforms.py": {
        "RemoveFieldAliasesVisitor.enter_field": {
            "name": "enter_field",
            "location": 16,
            "return": [
                "List[str]",
                "str",
                "dataclasses.Field",
                "Container[str]"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "lang.asField",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "CamelCaseToSnakeCaseVisitor.enter_field": {
            "name": "enter_field",
            "location": 36,
            "return": [
                "List[str]",
                "str",
                "dataclasses.Field",
                "Container[str]"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "lang.asField",
                    "str",
                    "dataclasses.Field",
                    "Mapping[str, Any]"
                ]
            }
        },
        "SnakeCaseToCamelCaseVisitor.enter_field": {
            "name": "enter_field",
            "location": 55,
            "return": [
                "List[str]",
                "str",
                "dataclasses.Field",
                "Container[str]"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "lang.asField",
                    "str",
                    "dataclasses.Field",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/utilities/coerce_value.py": {
        "_path": {
            "name": "_path",
            "location": 39,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "coerce_value": {
            "name": "coerce_value",
            "location": 45,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "value": [
                    "Optional[str]",
                    "Optional[Iterable[str]]",
                    "Tuple[int, int]",
                    "Optional[Set[str]]"
                ],
                "type_": [
                    "schema.GraphQLType",
                    "type",
                    "Type",
                    "Union[Type[Any], Tuple[Any, ...]]",
                    "Set[str]",
                    "T"
                ],
                "node": [
                    "Optional[lang.asNode]",
                    "schema.InputObjectType"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "_coerce_list_value": {
            "name": "_coerce_list_value",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "Set[str]",
                    "Optional[lang.asNode]",
                    "Type",
                    "List[str]",
                    "bool"
                ],
                "type_": [
                    "Optional[lang.asNode]",
                    "Type[T]",
                    "Type",
                    "Set[str]",
                    "Dict[str, Any]",
                    "str"
                ],
                "node": [
                    "Optional[lang.asNode]",
                    "Type[T]",
                    "Type",
                    "Set[str]",
                    "Dict[str, Any]",
                    "str"
                ],
                "path": [
                    "Optional[lang.asNode]",
                    "Type[T]",
                    "Type",
                    "Set[str]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "_coerce_input_object": {
            "name": "_coerce_input_object",
            "location": 140,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "rflx.model.Field"
                ],
                "type_": [
                    "schema.InputObjectType",
                    "Type",
                    "Optional[str]",
                    "type"
                ],
                "node": [
                    "Optional[lang.asNode]",
                    "str",
                    "Dict[str, Any]"
                ],
                "path": [
                    "Optional[lang.asNode]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "coerce_argument_values": {
            "name": "coerce_argument_values",
            "location": 193,
            "return": [
                "int",
                "str",
                "tuple",
                "List[int]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "definition": [
                    "List[int]",
                    "list",
                    "callable",
                    "Type",
                    "str",
                    "int",
                    "List[List[T]]"
                ],
                "node": [
                    "Callable"
                ],
                "variables": [
                    "str",
                    "bool",
                    "Union[str, List[str]]",
                    "Callable",
                    "Union[None, str, List[str], Dict[str, str]]",
                    "Iterable[str]"
                ]
            }
        },
        "directive_arguments": {
            "name": "directive_arguments",
            "location": 267,
            "return": [
                "float",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "definition": [
                    "Optional[Dict[str, Any]]",
                    "dict"
                ],
                "node": [
                    "dict",
                    "Optional[Dict]"
                ],
                "variables": [
                    "Optional[Mapping[str, Any]]",
                    "str",
                    "Optional[T]",
                    "int"
                ]
            }
        },
        "coerce_variable_values": {
            "name": "coerce_variable_values",
            "location": 299,
            "return": [
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "schema": [
                    "str"
                ],
                "operation": [
                    "lang.asOperationDefinition",
                    "List[str]",
                    "Dict[str, Any]",
                    "str",
                    "Sequence[T]",
                    "int"
                ],
                "variables": [
                    "Mapping[str, Any]",
                    "Callable"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/utilities/collect_fields.py": {
        "collect_fields": {
            "name": "collect_fields",
            "location": 38,
            "return": [
                "str",
                "List[str]",
                "bool",
                "ObjectType"
            ],
            "arguments": {
                "schema": [
                    "bool",
                    "Mapping[str, Any]",
                    "Optional[List[schema.NamedType]]"
                ],
                "object_type": [
                    "bool",
                    "Mapping[str, Any]",
                    "Optional[List[schema.NamedType]]"
                ],
                "selections": [
                    "Mapping[str, lang.asFragmentDefinition]",
                    "int",
                    "bool"
                ],
                "fragments": [
                    "Mapping[str, lang.asFragmentDefinition]",
                    "schema.Field",
                    "schema.ObjectType",
                    "bool",
                    "Mapping[str, Any]"
                ],
                "variables": [
                    "Mapping[str, Any]",
                    "List[str]",
                    "int",
                    "bool",
                    "Optional[AbstractSet[str]]",
                    "Mapping[str, lang.asFragmentDefinition]"
                ],
                "_seen_fragments": [
                    "AbstractSet[\"OntologyNode\"]",
                    "List[int]",
                    "List[str]",
                    "type",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "collect_fields_untyped": {
            "name": "collect_fields_untyped",
            "location": 108,
            "return": [
                "str",
                "List[str]",
                "bool",
                "ObjectType"
            ],
            "arguments": {
                "selections": [
                    "Mapping[str, lang.asFragmentDefinition]",
                    "int",
                    "Optional[Dict[str, str]]"
                ],
                "fragments": [
                    "Mapping[str, lang.asFragmentDefinition]",
                    "List[str]"
                ],
                "variables": [
                    "Mapping[str, Any]",
                    "Optional[Dict[str, str]]",
                    "List[str]",
                    "int"
                ],
                "_seen_fragments": [
                    "str",
                    "Mapping[str, lang.asFragmentDefinition]",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "_merge": {
            "name": "_merge",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "groups": [
                    "Dict[str, object]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, int]]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "_fragment_type_applies": {
            "name": "_fragment_type_applies",
            "location": 178,
            "return": [
                "bool",
                "Union[bool, str]"
            ],
            "arguments": {
                "schema": [
                    "type"
                ],
                "object_type": [
                    "Sequence[Dict[str, Any]]",
                    "int",
                    "type"
                ],
                "fragment": [
                    "Type"
                ]
            }
        },
        "_skip_selection": {
            "name": "_skip_selection",
            "location": 194,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "node": [
                    "Dict[str, Any]"
                ],
                "variables": [
                    "Dict[str, Any]"
                ]
            }
        },
        "selected_fields": {
            "name": "selected_fields",
            "location": 205,
            "return": [
                "int",
                "List[int]",
                "str",
                "List[str]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "field": [
                    "dict",
                    "AbstractSet[\"TemplatePropertyVariable\"]",
                    "Tuple[List[Any], Tuple[str, str], Optional[Any]]"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/utilities/introspection_query.py": {
        "introspection_query": {
            "name": "introspection_query",
            "location": 4,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "List[str]"
            ],
            "arguments": {
                "description": [
                    "bool",
                    "Optional"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/utilities/max_depth.py": {
        "MaxDepthValidationRule.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "max_depth": [
                    "int",
                    "bool"
                ]
            }
        },
        "MaxDepthValidationRule.__call__": {
            "name": "__call__",
            "location": 53,
            "return": [
                "str",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "schema.Schema",
                    "Callable",
                    "Type['Model']",
                    "Dict[str, Any]",
                    "bool",
                    "int"
                ],
                "doc": [
                    "dict",
                    "int",
                    "bool"
                ],
                "variables": [
                    "Dict[str, Any]",
                    "Schema",
                    "str"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/utilities/untyped_value_from_ast.py": {
        "untyped_value_from_ast": {
            "name": "untyped_value_from_ast",
            "location": 8,
            "return": [
                "List[str]",
                "Optional[float]",
                "Optional[bool]",
                "int",
                "Optional[str]",
                "bool",
                "dict"
            ],
            "arguments": {
                "node": [
                    "Mapping[str, lang.asFragmentDefinition]"
                ],
                "variables": [
                    "Optional[Dict[str, Any]]",
                    "dict",
                    "Callable[..., str]"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/utilities/value_from_ast.py": {
        "value_from_ast": {
            "name": "value_from_ast",
            "location": 17,
            "return": [
                "mypy.types.Type",
                "Union[str, List[str]]",
                "mypy.types.CallableType",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "node": [
                    "Callable[[dict], None]",
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "Mapping[str, Any]",
                    "List[str]"
                ],
                "type_": [
                    "str",
                    "Callable[[dict], Dict[str, Any]]",
                    "dict",
                    "Type[Callable[[], int]]",
                    "Type[str]"
                ],
                "variables": [
                    "Optional[Mapping[str, Any]]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, str]",
                    "Type[object]",
                    "str"
                ]
            }
        },
        "_extract_input_object": {
            "name": "_extract_input_object",
            "location": 94,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "node": [
                    "str",
                    "List[Tuple[str, str]]",
                    "Optional[dict]",
                    "Dict[str, Any]"
                ],
                "type_": [
                    "Callable",
                    "Set[str]",
                    "int",
                    "bool",
                    "str"
                ],
                "variables": [
                    "Optional[Mapping[str, Any]]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "_extract_variable": {
            "name": "_extract_variable",
            "location": 116,
            "return": [
                "bool",
                "Type",
                "bytes",
                "int"
            ],
            "arguments": {
                "node": [
                    "Type",
                    "str"
                ],
                "type_": [
                    "Type",
                    "Optional[\"Scope\"]",
                    "List[lang.asField]",
                    "str",
                    "Callable"
                ],
                "variables": [
                    "Optional[Mapping[str, Any]]",
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "List[str]"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/utilities/__init__.py": {},
    "py-gql-master/src/py_gql/validation/validate.py": {
        "default_validator": {
            "name": "default_validator",
            "location": 75,
            "return": [
                "str",
                "int",
                "Sequence[Sequence[str]]",
                "bool"
            ],
            "arguments": {
                "schema": [
                    "type"
                ],
                "document": [
                    "lang.asDocument",
                    "str",
                    "Optional[List[str]]",
                    "Set[str]"
                ],
                "variables": [
                    "Optional[Dict[str, Any]]",
                    "int",
                    "Callable[[], None]",
                    "float",
                    "bool"
                ]
            }
        },
        "validate_ast": {
            "name": "validate_ast",
            "location": 107,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "schema": [
                    "str",
                    "List[Exception]",
                    "Dict[str, Any]",
                    "bool"
                ],
                "document": [
                    "str",
                    "List[Exception]",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "ValidationResult.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "errors": [
                    "str",
                    "List[Exception]",
                    "dict"
                ]
            }
        },
        "ValidationResult.__bool__": {
            "name": "__bool__",
            "location": 68,
            "return": [
                "str",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidationResult.__iter__": {
            "name": "__iter__",
            "location": 71,
            "return": [
                "set",
                "Union[tuple, list]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "py-gql-master/src/py_gql/validation/visitors.py": {
        "_peek": {
            "name": "_peek",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "lst": [
                    "int",
                    "Optional[T]",
                    "Sequence[T]",
                    "List[int]",
                    "bool",
                    "List[str]"
                ],
                "count": [
                    "int",
                    "Optional[T]",
                    "Sequence[T]",
                    "List[int]",
                    "bool",
                    "List[str]"
                ],
                "default": [
                    "int",
                    "Optional[T]",
                    "Sequence[T]",
                    "List[int]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "_get_field_def": {
            "name": "_get_field_def",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "schema": [
                    "str",
                    "Callable"
                ],
                "parent_type": [
                    "str",
                    "Optional[Union[int, float]]",
                    "Type"
                ],
                "field": [
                    "str"
                ]
            }
        },
        "ValidationVisitor.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "int",
                    "str",
                    "bool",
                    "List[str]"
                ],
                "type_info": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool",
                    "Union[int, str]",
                    "dict"
                ]
            }
        },
        "ValidationVisitor.add_error": {
            "name": "add_error",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "nodes": []
            }
        },
        "ValidationVisitor.enter": {
            "name": "enter",
            "location": 115,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int"
                ]
            }
        },
        "VariablesCollector.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "str",
                    "bool",
                    "type"
                ],
                "type_info": [
                    "str",
                    "bool",
                    "type"
                ]
            }
        },
        "VariablesCollector.enter_operation_definition": {
            "name": "enter_operation_definition",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int"
                ]
            }
        },
        "VariablesCollector.leave_operation_definition": {
            "name": "leave_operation_definition",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_node": [
                    "List[int]"
                ]
            }
        },
        "VariablesCollector.enter_fragment_definition": {
            "name": "enter_fragment_definition",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool"
                ]
            }
        },
        "VariablesCollector.leave_fragment_definition": {
            "name": "leave_fragment_definition",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_node": [
                    "List[int]"
                ]
            }
        },
        "VariablesCollector.enter_fragment_spread": {
            "name": "enter_fragment_spread",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool"
                ]
            }
        },
        "VariablesCollector.enter_variable_definition": {
            "name": "enter_variable_definition",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "VariablesCollector.leave_variable_definition": {
            "name": "leave_variable_definition",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_node": [
                    "bool",
                    "Dict[str, bool]"
                ]
            }
        },
        "VariablesCollector.enter_variable": {
            "name": "enter_variable",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int"
                ]
            }
        },
        "VariablesCollector._flatten_fragments": {
            "name": "_flatten_fragments",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VariablesCollector.leave_document": {
            "name": "leave_document",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TypeInfoVisitor.__init__": {
            "name": "__init__",
            "location": 246,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "TypeInfoVisitor.type": {
            "name": "type",
            "location": 260,
            "return": [
                "Callable[[T], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeInfoVisitor.parent_type": {
            "name": "parent_type",
            "location": 264,
            "return": [
                "bool",
                "schema.UnionType",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeInfoVisitor.input_type": {
            "name": "input_type",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeInfoVisitor.parent_input_type": {
            "name": "parent_input_type",
            "location": 272,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeInfoVisitor.field": {
            "name": "field",
            "location": 277,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeInfoVisitor.input_value_def": {
            "name": "input_value_def",
            "location": 281,
            "return": [
                "str",
                "dict",
                "int",
                "Dict[str, Any]",
                "Callable[[Mapping], T]",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeInfoVisitor._get_field_def": {
            "name": "_get_field_def",
            "location": 284,
            "return": [
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "TypeInfoVisitor._type_from_ast": {
            "name": "_type_from_ast",
            "location": 292,
            "return": [
                "Union[str, 'Type']",
                "rflx.model.Field",
                "Type",
                "schema.InputField",
                "schema.Argument",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "type_node": [
                    "Optional[List['mypy.types.TypeVarDef']]",
                    "schema.GraphQLType",
                    "GraphQLType"
                ]
            }
        },
        "TypeInfoVisitor._leave_input_value": {
            "name": "_leave_input_value",
            "location": 298,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeInfoVisitor.enter_selection_set": {
            "name": "enter_selection_set",
            "location": 302,
            "return": [
                "list",
                "Sequence[str]",
                "tuple",
                "Iterable[str]",
                "Tuple[str]",
                "str",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "List[List[int]]"
                ]
            }
        },
        "TypeInfoVisitor.leave_selection_set": {
            "name": "leave_selection_set",
            "location": 309,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_node": [
                    "int",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "List[List[int]]"
                ]
            }
        },
        "TypeInfoVisitor.enter_field": {
            "name": "enter_field",
            "location": 312,
            "return": [
                "int",
                "Union"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "TypeInfoVisitor.leave_field": {
            "name": "leave_field",
            "location": 322,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_node": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "TypeInfoVisitor.enter_directive": {
            "name": "enter_directive",
            "location": 326,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Dict[str, Any]",
                    "Set[str]"
                ]
            }
        },
        "TypeInfoVisitor.leave_directive": {
            "name": "leave_directive",
            "location": 330,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_node": [
                    "List[int]"
                ]
            }
        },
        "TypeInfoVisitor.enter_operation_definition": {
            "name": "enter_operation_definition",
            "location": 333,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "type.GraphQLType"
                ]
            }
        },
        "TypeInfoVisitor.leave_operation_definition": {
            "name": "leave_operation_definition",
            "location": 344,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_node": [
                    "List[int]"
                ]
            }
        },
        "TypeInfoVisitor.enter_fragment_definition": {
            "name": "enter_fragment_definition",
            "location": 347,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "TypeInfoVisitor.leave_fragment_definition": {
            "name": "leave_fragment_definition",
            "location": 352,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_node": [
                    "List[int]"
                ]
            }
        },
        "TypeInfoVisitor.enter_inline_fragment": {
            "name": "enter_inline_fragment",
            "location": 355,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "str"
                ]
            }
        },
        "TypeInfoVisitor.leave_inline_fragment": {
            "name": "leave_inline_fragment",
            "location": 365,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_node": [
                    "List[int]"
                ]
            }
        },
        "TypeInfoVisitor.enter_variable_definition": {
            "name": "enter_variable_definition",
            "location": 368,
            "return": [
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "TypeInfoVisitor.leave_variable_definition": {
            "name": "leave_variable_definition",
            "location": 373,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_node": [
                    "bool",
                    "Dict[str, bool]"
                ]
            }
        },
        "TypeInfoVisitor.enter_argument": {
            "name": "enter_argument",
            "location": 376,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool"
                ]
            }
        },
        "TypeInfoVisitor.leave_argument": {
            "name": "leave_argument",
            "location": 393,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_node": [
                    "List[int]"
                ]
            }
        },
        "TypeInfoVisitor.enter_list_value": {
            "name": "enter_list_value",
            "location": 397,
            "return": [
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[Type]",
                    "bool"
                ]
            }
        },
        "TypeInfoVisitor.leave_list_value": {
            "name": "leave_list_value",
            "location": 408,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_node": [
                    "List[Type]",
                    "bool"
                ]
            }
        },
        "TypeInfoVisitor.enter_object_field": {
            "name": "enter_object_field",
            "location": 411,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "Type[T]"
                ]
            }
        },
        "TypeInfoVisitor.leave_object_field": {
            "name": "leave_object_field",
            "location": 427,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_node": [
                    "List[Type]",
                    "bool"
                ]
            }
        },
        "TypeInfoVisitor.enter_enum_value": {
            "name": "enter_enum_value",
            "location": 430,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "type",
                    "ClassVar"
                ]
            }
        },
        "TypeInfoVisitor.leave_enum_value": {
            "name": "leave_enum_value",
            "location": 439,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_node": [
                    "bool"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/validation/__init__.py": {},
    "py-gql-master/src/py_gql/validation/rules/overlapping_fields_can_be_merged.py": {
        "_permutations": {
            "name": "_permutations",
            "location": 59,
            "return": [
                "typing.Iterator[typing.Tuple[T, T]]"
            ],
            "arguments": {
                "lst": [
                    "Callable[[int], None]",
                    "Sequence[T]",
                    "float",
                    "str"
                ]
            }
        },
        "_cross": {
            "name": "_cross",
            "location": 71,
            "return": [
                "typing.Iterator[typing.Tuple[T, G]]"
            ],
            "arguments": {
                "iter_1": [],
                "iter_2": []
            }
        },
        "_at": {
            "name": "_at",
            "location": 83,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "lst": [
                    "int",
                    "str",
                    "Sequence[T]",
                    "List[List[int]]"
                ],
                "index": [
                    "int",
                    "str",
                    "Sequence[T]",
                    "List[List[int]]"
                ],
                "default": [
                    "Iterable['cirq.Qid']",
                    "Optional[T]",
                    "bool",
                    "int"
                ]
            }
        },
        "_type_from_ast": {
            "name": "_type_from_ast",
            "location": 100,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "schema": [],
                "node": []
            }
        },
        "find_conflicts_within_selection_set": {
            "name": "find_conflicts_within_selection_set",
            "location": 146,
            "return": [
                "str"
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "basilisp.lang.LispForm",
                    "schema.GraphQLType",
                    "lang.asSelectionSet"
                ],
                "selection_set": [
                    "schema.GraphQLType",
                    "lang.asSelectionSet",
                    "Optional[schema.GraphQLType]",
                    "str",
                    "Optional[str]",
                    "Set[str]"
                ],
                "parent_type": [
                    "schema.GraphQLType",
                    "lang.asSelectionSet",
                    "Optional[schema.GraphQLType]",
                    "str",
                    "Optional[str]",
                    "Set[str]"
                ]
            }
        },
        "_fields_and_fragments": {
            "name": "_fields_and_fragments",
            "location": 244,
            "return": [
                "str",
                "tuple",
                "List[str]"
            ],
            "arguments": {
                "ctx": [],
                "parent_type": [
                    "Optional[schema.GraphQLType]",
                    "schema.GraphQLType",
                    "lang.asSelectionSet",
                    "Set[str]",
                    "Mapping[int, str]",
                    "str"
                ],
                "selection_set": []
            }
        },
        "_referenced_fields_and_fragments": {
            "name": "_referenced_fields_and_fragments",
            "location": 270,
            "return": [
                "type"
            ],
            "arguments": {
                "ctx": [
                    "Dict[str, Any]"
                ],
                "fragment": [
                    "Dict[str, Any]"
                ]
            }
        },
        "_collect_fields_and_fragments": {
            "name": "_collect_fields_and_fragments",
            "location": 286,
            "return": [
                "str",
                "Container[\"Taxon\"]",
                "Type[T]"
            ],
            "arguments": {
                "ctx": [],
                "parent_type": [
                    "str",
                    "Optional[str]",
                    "Dict[str, bool]",
                    "Type[T]",
                    "Type"
                ],
                "selection_set": [
                    "lang.asSelectionSet",
                    "bool",
                    "int"
                ],
                "node_and_defs": [
                    "bool",
                    "Tuple[Type]"
                ],
                "fragment_names": [
                    "bool"
                ]
            }
        },
        "_conflicts_within": {
            "name": "_conflicts_within",
            "location": 345,
            "return": [
                "typing.Iterator[Conflict]"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "List[Union[str, int]]",
                    "basilisp.lang.compiler.nodes.Recur"
                ],
                "field_map": [
                    "dict",
                    "MutableMapping[str, Any]",
                    "Dict[str, List[Callable]]",
                    "bool"
                ]
            }
        },
        "_conflicts_between": {
            "name": "_conflicts_between",
            "location": 365,
            "return": [
                "typing.Iterator[Conflict]"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "bool",
                    "list",
                    "int",
                    "Optional[str]"
                ],
                "parents_mutually_exclusive": [
                    "str",
                    "bool",
                    "list",
                    "int",
                    "Optional[str]"
                ],
                "field_map_1": [
                    "Optional[str]",
                    "BinaryIO",
                    "str"
                ],
                "field_map_2": [
                    "str",
                    "bool",
                    "int",
                    "Dict[str, Any]",
                    "Optional[bool]"
                ]
            }
        },
        "_conflicts_between_fields_and_fragment": {
            "name": "_conflicts_between_fields_and_fragment",
            "location": 396,
            "return": [
                "int"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "Set[str]",
                    "Optional[schema.GraphQLType]"
                ],
                "mutually_exclusive": [
                    "bool"
                ],
                "field_map": [
                    "bool",
                    "int"
                ],
                "fragment_name": [
                    "str",
                    "Optional[str]",
                    "Set[str]"
                ],
                "compared_fragments": [
                    "Set[str]",
                    "Optional[schema.GraphQLType]",
                    "schema.GraphQLType",
                    "lang.asSelectionSet",
                    "Mapping[int, str]",
                    "Type[T]",
                    "str"
                ]
            }
        },
        "_conflicts_between_fragments": {
            "name": "_conflicts_between_fragments",
            "location": 440,
            "return": [],
            "arguments": {
                "ctx": [],
                "mutually_exclusive": [
                    "basilisp.lang.LispForm"
                ],
                "fragment_1": [
                    "dict"
                ],
                "fragment_2": [
                    "dict"
                ]
            }
        },
        "_find_conflict": {
            "name": "_find_conflict",
            "location": 492,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "Mapping[int, str]",
                    "basilisp.lang.symbol.Symbol"
                ],
                "parents_mutually_exclusive": [
                    "bool",
                    "str",
                    "int",
                    "lang.asSelectionSet",
                    "Optional[schema.GraphQLType]",
                    "Mapping[int, str]"
                ],
                "response_name": [
                    "str"
                ],
                "field_1": [
                    "Optional[Iterable[str]]",
                    "str"
                ],
                "field_2": [
                    "Optional[Iterable[str]]",
                    "str"
                ]
            }
        },
        "_conflicts_between_subselections": {
            "name": "_conflicts_between_subselections",
            "location": 572,
            "return": [
                "typing.Iterator[Conflict]"
            ],
            "arguments": {
                "ctx": [
                    "lang.asSelectionSet",
                    "Optional[schema.GraphQLType]",
                    "basilisp.lang.runtime.Namespace",
                    "set",
                    "tuple"
                ],
                "mutually_exclusive": [
                    "bool"
                ],
                "parent_type_1": [
                    "lang.asSelectionSet",
                    "Optional[schema.GraphQLType]",
                    "basilisp.lang.runtime.Namespace",
                    "bool",
                    "basilisp.lang.LispForm"
                ],
                "node_1": [
                    "lang.asSelectionSet",
                    "Optional[schema.GraphQLType]",
                    "basilisp.lang.runtime.Namespace",
                    "bool",
                    "basilisp.lang.LispForm"
                ],
                "parent_type_2": [
                    "lang.asSelectionSet",
                    "Optional[schema.GraphQLType]",
                    "basilisp.lang.runtime.Namespace",
                    "bool",
                    "basilisp.lang.LispForm"
                ],
                "node_2": [
                    "lang.asSelectionSet",
                    "Optional[schema.GraphQLType]",
                    "basilisp.lang.runtime.Namespace",
                    "bool",
                    "basilisp.lang.LispForm"
                ]
            }
        },
        "_same_arguments": {
            "name": "_same_arguments",
            "location": 620,
            "return": [
                "bool"
            ],
            "arguments": {
                "args_1": [
                    "Dict[str, Any]",
                    "tuple",
                    "str",
                    "list",
                    "dict"
                ],
                "args_2": [
                    "Dict[str, Any]",
                    "tuple",
                    "str",
                    "list",
                    "dict"
                ]
            }
        },
        "_types_conflict": {
            "name": "_types_conflict",
            "location": 645,
            "return": [
                "bool",
                "schema.GraphQLType"
            ],
            "arguments": {
                "type_1": [
                    "schema.GraphQLType"
                ],
                "type_2": [
                    "schema.GraphQLType"
                ]
            }
        },
        "Context.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "int",
                    "bool",
                    "Sequence[int]"
                ],
                "fields_and_fragments": [
                    "int",
                    "bool",
                    "Sequence[int]"
                ],
                "compared_fragment_pairs": [
                    "int",
                    "bool",
                    "Sequence[int]"
                ],
                "fragments": [
                    "int",
                    "bool",
                    "Sequence[int]"
                ]
            }
        },
        "OverlappingFieldsCanBeMergedChecker.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "bool"
                ],
                "type_info": [
                    "bool",
                    "int",
                    "Optional[List[float]]"
                ]
            }
        },
        "OverlappingFieldsCanBeMergedChecker.enter_document": {
            "name": "enter_document",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict"
                ]
            }
        },
        "OverlappingFieldsCanBeMergedChecker.enter_selection_set": {
            "name": "enter_selection_set",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "py-gql-master/src/py_gql/validation/rules/values_of_correct_type.py": {
        "ValuesOfCorrectTypeChecker._report_bad_value": {
            "name": "_report_bad_value",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_type": [
                    "str"
                ],
                "node": [
                    "str"
                ],
                "extra": [
                    "Optional[str]",
                    "str",
                    "int"
                ]
            }
        },
        "ValuesOfCorrectTypeChecker._check_scalar": {
            "name": "_check_scalar",
            "location": 41,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict"
                ]
            }
        },
        "ValuesOfCorrectTypeChecker.enter_int_value": {
            "name": "enter_int_value",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int"
                ]
            }
        },
        "ValuesOfCorrectTypeChecker.enter_float_value": {
            "name": "enter_float_value",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int"
                ]
            }
        },
        "ValuesOfCorrectTypeChecker.enter_string_value": {
            "name": "enter_string_value",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int"
                ]
            }
        },
        "ValuesOfCorrectTypeChecker.enter_boolean_value": {
            "name": "enter_boolean_value",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int"
                ]
            }
        },
        "ValuesOfCorrectTypeChecker.enter_null_value": {
            "name": "enter_null_value",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ]
            }
        },
        "ValuesOfCorrectTypeChecker.enter_enum_value": {
            "name": "enter_enum_value",
            "location": 80,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ValuesOfCorrectTypeChecker.enter_object_value": {
            "name": "enter_object_value",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ValuesOfCorrectTypeChecker.enter_object_field": {
            "name": "enter_object_field",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "py-gql-master/src/py_gql/validation/rules/__init__.py": {
        "ExecutableDefinitionsChecker.enter_document": {
            "name": "enter_document",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int"
                ]
            }
        },
        "UniqueOperationNameChecker.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "bool",
                    "str",
                    "Optional[Type]"
                ],
                "type_info": [
                    "bool",
                    "str",
                    "Optional[Type]"
                ]
            }
        },
        "UniqueOperationNameChecker.enter_operation_definition": {
            "name": "enter_operation_definition",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int"
                ]
            }
        },
        "LoneAnonymousOperationChecker.enter_document": {
            "name": "enter_document",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "SingleFieldSubscriptionsChecker.enter_operation_definition": {
            "name": "enter_operation_definition",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool"
                ]
            }
        },
        "KnownTypeNamesChecker._skip": {
            "name": "_skip",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "KnownTypeNamesChecker._enter_type_literal": {
            "name": "_enter_type_literal",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool"
                ]
            }
        },
        "FragmentsOnCompositeTypesChecker.enter_inline_fragment": {
            "name": "enter_inline_fragment",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "FragmentsOnCompositeTypesChecker.enter_fragment_definition": {
            "name": "enter_fragment_definition",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int"
                ]
            }
        },
        "VariablesAreInputTypesChecker.enter_variable_definition": {
            "name": "enter_variable_definition",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int"
                ]
            }
        },
        "ScalarLeafsChecker.enter_field": {
            "name": "enter_field",
            "location": 237,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "FieldsOnCorrectTypeChecker.enter_field": {
            "name": "enter_field",
            "location": 274,
            "return": [
                "int",
                "Optional[bool]",
                "str",
                "Set[VT]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "dict"
                ]
            }
        },
        "UniqueFragmentNamesChecker.__init__": {
            "name": "__init__",
            "location": 332,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "bool",
                    "str",
                    "Optional[Type]"
                ],
                "type_info": [
                    "bool",
                    "str",
                    "Optional[Type]"
                ]
            }
        },
        "UniqueFragmentNamesChecker.enter_fragment_definition": {
            "name": "enter_fragment_definition",
            "location": 336,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "KnownFragmentNamesChecker.__init__": {
            "name": "__init__",
            "location": 351,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "bool",
                    "str",
                    "Optional[Type]"
                ],
                "type_info": [
                    "bool",
                    "str",
                    "Optional[Type]"
                ]
            }
        },
        "KnownFragmentNamesChecker.enter_document": {
            "name": "enter_document",
            "location": 354,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Sequence[object]"
                ]
            }
        },
        "KnownFragmentNamesChecker.enter_fragment_spread": {
            "name": "enter_fragment_spread",
            "location": 363,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "NoUnusedFragmentsChecker.__init__": {
            "name": "__init__",
            "location": 376,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "type_info": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "NoUnusedFragmentsChecker.enter_fragment_definition": {
            "name": "enter_fragment_definition",
            "location": 381,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Sequence[object]"
                ]
            }
        },
        "NoUnusedFragmentsChecker.enter_fragment_spread": {
            "name": "enter_fragment_spread",
            "location": 384,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Sequence[object]"
                ]
            }
        },
        "NoUnusedFragmentsChecker.leave_document": {
            "name": "leave_document",
            "location": 387,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_node": [
                    "List[int]"
                ]
            }
        },
        "PossibleFragmentSpreadsChecker.__init__": {
            "name": "__init__",
            "location": 401,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Optional[Iterable[Any]]"
                ],
                "type_info": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Optional[Iterable[Any]]"
                ]
            }
        },
        "PossibleFragmentSpreadsChecker.enter_document": {
            "name": "enter_document",
            "location": 405,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "PossibleFragmentSpreadsChecker.enter_fragment_spread": {
            "name": "enter_fragment_spread",
            "location": 416,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "PossibleFragmentSpreadsChecker.enter_inline_fragment": {
            "name": "enter_inline_fragment",
            "location": 433,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int"
                ]
            }
        },
        "NoFragmentCyclesChecker.__init__": {
            "name": "__init__",
            "location": 455,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "type_info": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "NoFragmentCyclesChecker.enter_fragment_definition": {
            "name": "enter_fragment_definition",
            "location": 460,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool"
                ]
            }
        },
        "NoFragmentCyclesChecker.leave_fragment_definition": {
            "name": "leave_fragment_definition",
            "location": 465,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_node": [
                    "List[int]"
                ]
            }
        },
        "NoFragmentCyclesChecker.enter_fragment_spread": {
            "name": "enter_fragment_spread",
            "location": 468,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "NoFragmentCyclesChecker.leave_document": {
            "name": "leave_document",
            "location": 481,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "List[Tuple[int]]",
                    "List[T]",
                    "List[int]"
                ]
            }
        },
        "UniqueVariableNamesChecker.enter_operation_definition": {
            "name": "enter_operation_definition",
            "location": 526,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_node": [
                    "List[int]"
                ]
            }
        },
        "UniqueVariableNamesChecker.leave_operation_definition": {
            "name": "leave_operation_definition",
            "location": 529,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_node": [
                    "List[int]"
                ]
            }
        },
        "UniqueVariableNamesChecker.enter_variable_definition": {
            "name": "enter_variable_definition",
            "location": 532,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool"
                ]
            }
        },
        "NoUndefinedVariablesChecker.leave_document": {
            "name": "leave_document",
            "location": 545,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int"
                ]
            }
        },
        "NoUnusedVariablesChecker.leave_document": {
            "name": "leave_document",
            "location": 582,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "basilisp.lang.interfaces.ISeq"
                ]
            }
        },
        "KnownDirectivesChecker.__init__": {
            "name": "__init__",
            "location": 609,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "type_info": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "KnownDirectivesChecker._enter_ancestor": {
            "name": "_enter_ancestor",
            "location": 613,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[str]",
                    "int",
                    "str"
                ]
            }
        },
        "KnownDirectivesChecker._leave_ancestor": {
            "name": "_leave_ancestor",
            "location": 616,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_node": [
                    "List[int]"
                ]
            }
        },
        "KnownDirectivesChecker._current_location": {
            "name": "_current_location",
            "location": 666,
            "return": [
                "Dict[str, Any]",
                "Dict[str, float]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "KnownDirectivesChecker.enter_directive": {
            "name": "enter_directive",
            "location": 707,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ]
            }
        },
        "UniqueDirectivesPerLocationChecker._validate_unique_directive_names": {
            "name": "_validate_unique_directive_names",
            "location": 727,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "KnownArgumentNamesChecker.enter_field": {
            "name": "enter_field",
            "location": 749,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "str"
                ]
            }
        },
        "KnownArgumentNamesChecker.enter_directive": {
            "name": "enter_directive",
            "location": 780,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int"
                ]
            }
        },
        "UniqueArgumentNamesChecker._check_duplicate_args": {
            "name": "_check_duplicate_args",
            "location": 812,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int",
                    "Iterable[str]"
                ]
            }
        },
        "ProvidedRequiredArgumentsChecker._missing_args": {
            "name": "_missing_args",
            "location": 830,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "arg_defs": [
                    "List[str]"
                ],
                "node": [
                    "bool",
                    "Iterator",
                    "Set[str]",
                    "dict"
                ]
            }
        },
        "ProvidedRequiredArgumentsChecker.leave_field": {
            "name": "leave_field",
            "location": 837,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ProvidedRequiredArgumentsChecker.leave_directive": {
            "name": "leave_directive",
            "location": 848,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "VariablesInAllowedPositionChecker.iter_op_variables": {
            "name": "iter_op_variables",
            "location": 863,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "op": [
                    "list",
                    "OrderedDict",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "VariablesInAllowedPositionChecker.leave_document": {
            "name": "leave_document",
            "location": 871,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ]
            }
        },
        "UniqueInputFieldNamesChecker.__init__": {
            "name": "__init__",
            "location": 928,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "bool",
                    "Type",
                    "Optional[str]",
                    "int"
                ],
                "type_info": [
                    "bool",
                    "Type",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "UniqueInputFieldNamesChecker.enter_object_value": {
            "name": "enter_object_value",
            "location": 932,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int"
                ]
            }
        },
        "UniqueInputFieldNamesChecker.leave_object_value": {
            "name": "leave_object_value",
            "location": 935,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_node": [
                    "bool"
                ]
            }
        },
        "UniqueInputFieldNamesChecker.enter_object_field": {
            "name": "enter_object_field",
            "location": 938,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "Tuple[str, Tuple[int, int]]"
                ]
            }
        },
        "VariablesAreInputTypesChecker.enter_variable_definition._err": {
            "name": "_err",
            "location": 216,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "NoFragmentCyclesChecker.leave_document._search": {
            "name": "_search",
            "location": 482,
            "return": [
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "outer": [
                    "bool",
                    "int",
                    "dict",
                    "Dict[str, Any]"
                ],
                "acc": [],
                "path": [
                    "str"
                ]
            }
        }
    },
    "py-gql-master/tests/conftest.py": {
        "fixture_file": {
            "name": "fixture_file",
            "location": 14,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "starwars_schema": {
            "name": "starwars_schema",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "github_schema": {
            "name": "github_schema",
            "location": 35,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "fixture_file": [
                    "List[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "raiser": {
            "name": "raiser",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "fixture_file.load": {
            "name": "load",
            "location": 19,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "raiser.factory": {
            "name": "factory",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "raiser.factory._raiser": {
            "name": "_raiser",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "py-gql-master/tests/test_graphql.py": {},
    "py-gql-master/tests/test_string_utils.py": {
        "test_highlight_location_1": {
            "name": "test_highlight_location_1",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_highlight_location_2": {
            "name": "test_highlight_location_2",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_block_string": {
            "name": "test_parse_block_string",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "str",
                    "int",
                    "dict",
                    "list"
                ],
                "expected": [
                    "str",
                    "int",
                    "dict",
                    "list"
                ]
            }
        },
        "test_wrapped_lines": {
            "name": "test_wrapped_lines",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_levenshtein": {
            "name": "test_levenshtein",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {
                "a": [
                    "int",
                    "tuple"
                ],
                "b": [
                    "int",
                    "tuple"
                ],
                "expected": [
                    "int",
                    "tuple"
                ]
            }
        }
    },
    "py-gql-master/tests/test_tracers.py": {
        "test_ApolloTracer": {
            "name": "test_ApolloTracer",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "starwars_schema": [
                    "str"
                ]
            }
        },
        "test_ApolloTracer_on_validation_error": {
            "name": "test_ApolloTracer_on_validation_error",
            "location": 260,
            "return": [
                ""
            ],
            "arguments": {
                "starwars_schema": []
            }
        },
        "test_ApolloTracer_on_syntax_error": {
            "name": "test_ApolloTracer_on_syntax_error",
            "location": 294,
            "return": [
                ""
            ],
            "arguments": {
                "starwars_schema": []
            }
        },
        "Any.__eq__": {
            "name": "__eq__",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "AnyTimestamp.__eq__": {
            "name": "__eq__",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "rhs": [
                    "float",
                    "str",
                    "int",
                    "datetime.timedelta",
                    "datetime.datetime"
                ]
            }
        },
        "AnyInt.__eq__": {
            "name": "__eq__",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "rhs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "py-gql-master/tests/_star_wars.py": {
        "get_character": {
            "name": "get_character",
            "location": 101,
            "return": [
                "str",
                "Optional[int]",
                "list",
                "Optional[str]"
            ],
            "arguments": {
                "id_": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "get_friends": {
            "name": "get_friends",
            "location": 105,
            "return": [
                "list",
                "Dict[str, Dict[str, str]]",
                "List[str]",
                "Optional[dict]",
                "int"
            ],
            "arguments": {
                "character": [
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "get_hero": {
            "name": "get_hero",
            "location": 109,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "episode": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "get_human": {
            "name": "get_human",
            "location": 115,
            "return": [
                "str",
                "Optional[int]",
                "dict",
                "int"
            ],
            "arguments": {
                "id_": [
                    "str",
                    "int",
                    "Dict[int, str]"
                ]
            }
        },
        "get_droid": {
            "name": "get_droid",
            "location": 119,
            "return": [
                "str",
                "Optional[int]",
                "dict",
                "int"
            ],
            "arguments": {
                "id_": [
                    "str",
                    "int",
                    "Dict[int, str]"
                ]
            }
        },
        "resolve_character_type": {
            "name": "resolve_character_type",
            "location": 134,
            "return": [],
            "arguments": {
                "character": [
                    "int",
                    "Dict[str, Any]",
                    "str",
                    "schema.Schema"
                ]
            }
        },
        "resolve_secret_backstory": {
            "name": "resolve_secret_backstory",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "py-gql-master/tests/__init__.py": {},
    "py-gql-master/tests/benchmarks/test_build_schema.py": {
        "test_build_github_schema": {
            "name": "test_build_github_schema",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "benchmark": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "fixture_file": [
                    "Optional[str]"
                ]
            }
        }
    },
    "py-gql-master/tests/benchmarks/test_execution.py": {
        "_resolve_list_of_ints": {
            "name": "_resolve_list_of_ints",
            "location": 44,
            "return": [
                "List[str]",
                "Optional[Iterable[str]]",
                "Tuple[str]",
                "Dict[str, Set[str]]",
                "Iterable[str]",
                "bytearray"
            ],
            "arguments": {}
        },
        "_resolve_list_of_objects": {
            "name": "_resolve_list_of_objects",
            "location": 49,
            "return": [
                "List[str]",
                "Optional[Iterable[str]]",
                "Tuple[str]",
                "Dict[str, Set[str]]",
                "Iterable[str]",
                "bytearray"
            ],
            "arguments": {}
        },
        "_resolve_list_of_dicts": {
            "name": "_resolve_list_of_dicts",
            "location": 54,
            "return": [
                "List[str]",
                "Optional[Iterable[str]]",
                "Tuple[str]",
                "Dict[str, Set[str]]",
                "Iterable[str]",
                "bytearray"
            ],
            "arguments": {}
        },
        "_resolve_list_of_strings": {
            "name": "_resolve_list_of_strings",
            "location": 60,
            "return": [
                "List[str]",
                "str",
                "Set[str]",
                "Optional[bool]"
            ],
            "arguments": {}
        },
        "_resolve_list_of_bools": {
            "name": "_resolve_list_of_bools",
            "location": 65,
            "return": [
                "List[str]",
                "Optional[Iterable[str]]",
                "Tuple[str]",
                "Dict[str, Set[str]]",
                "Iterable[str]",
                "bytearray"
            ],
            "arguments": {}
        },
        "_resolve_list_of_floats": {
            "name": "_resolve_list_of_floats",
            "location": 70,
            "return": [
                "List[str]",
                "Optional[Iterable[str]]",
                "Tuple[str]",
                "Dict[str, Set[str]]",
                "Iterable[str]",
                "bytearray"
            ],
            "arguments": {}
        },
        "test_list_of_ints": {
            "name": "test_list_of_ints",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "benchmark": [
                    "str",
                    "int"
                ]
            }
        },
        "test_list_of_floats": {
            "name": "test_list_of_floats",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "benchmark": [
                    "str",
                    "int"
                ]
            }
        },
        "test_list_of_strings": {
            "name": "test_list_of_strings",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "benchmark": [
                    "int",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_list_of_bools": {
            "name": "test_list_of_bools",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "benchmark": [
                    "str",
                    "int"
                ]
            }
        },
        "test_list_of_int_ids": {
            "name": "test_list_of_int_ids",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "benchmark": [
                    "int",
                    "str"
                ]
            }
        },
        "test_list_of_string_ids": {
            "name": "test_list_of_string_ids",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "benchmark": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "test_list_of_objects_one_field": {
            "name": "test_list_of_objects_one_field",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "benchmark": [
                    "str",
                    "int"
                ]
            }
        },
        "test_list_of_objects_two_fields": {
            "name": "test_list_of_objects_two_fields",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "benchmark": [
                    "str",
                    "int"
                ]
            }
        },
        "test_list_of_dicts_one_field": {
            "name": "test_list_of_dicts_one_field",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "benchmark": [
                    "str",
                    "int"
                ]
            }
        },
        "test_list_of_dicts_two_fields": {
            "name": "test_list_of_dicts_two_fields",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "benchmark": [
                    "str",
                    "int"
                ]
            }
        },
        "test_introspection_query": {
            "name": "test_introspection_query",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "benchmark": [
                    "str",
                    "Dict[str, int]",
                    "bool",
                    "float"
                ],
                "fixture_file": [
                    "str"
                ]
            }
        }
    },
    "py-gql-master/tests/benchmarks/test_parsing.py": {
        "parse_schema": {
            "name": "parse_schema",
            "location": 7,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "document": [
                    "tuple",
                    "str"
                ]
            }
        },
        "test_parse_kitchen_sink": {
            "name": "test_parse_kitchen_sink",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "benchmark": [
                    "str"
                ],
                "fixture_file": []
            }
        },
        "test_parse_schema_kitchen_sink": {
            "name": "test_parse_schema_kitchen_sink",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "benchmark": [],
                "fixture_file": []
            }
        },
        "test_parse_github_schema": {
            "name": "test_parse_github_schema",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "benchmark": [],
                "fixture_file": []
            }
        },
        "test_parse_introspection_query": {
            "name": "test_parse_introspection_query",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "benchmark": [
                    "bytes"
                ]
            }
        }
    },
    "py-gql-master/tests/benchmarks/test_query_validation.py": {
        "test_validate_introspection_query": {
            "name": "test_validate_introspection_query",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "benchmark": [
                    "str",
                    "basilisp.lang.map.PersistentMap[int, basilisp.lang.keyword.Keyword]"
                ],
                "fixture_file": [
                    "int"
                ]
            }
        }
    },
    "py-gql-master/tests/benchmarks/__init__.py": {},
    "py-gql-master/tests/test_execution/conftest.py": {
        "assert_execution": {
            "name": "assert_execution",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "bool",
                    "dict"
                ]
            }
        }
    },
    "py-gql-master/tests/test_execution/test_abstract_types.py": {
        "_resolve_pet_type": {
            "name": "_resolve_pet_type",
            "location": 305,
            "return": [],
            "arguments": {
                "value": [
                    "str",
                    "dict",
                    "Optional[int]",
                    "float",
                    "Dict[str, Any]"
                ]
            }
        },
        "Dog.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ],
                "woofs": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Cat.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ],
                "meows": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Human.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "Person.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ],
                "pets": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ],
                "friends": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "test_type_resolution_on_interface_yields_useful_error._resolve_pet_type": {
            "name": "_resolve_pet_type",
            "location": 56,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_type_resolution_on_union_yields_useful_error._resolve_pet_type": {
            "name": "_resolve_pet_type",
            "location": 123,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_type_resolution_supports_strings._resolve_pet_type": {
            "name": "_resolve_pet_type",
            "location": 181,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_type_resolution_supports_object_attribute.Dog.__init__": {
            "name": "__init__",
            "location": 248,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ],
                "woofs": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "test_type_resolution_supports_object_attribute.Cat.__init__": {
            "name": "__init__",
            "location": 255,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ],
                "meows": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "py-gql-master/tests/test_execution/test_asyncio.py": {
        "resolve_sync_a": {
            "name": "resolve_sync_a",
            "location": 44,
            "return": [
                "bool",
                "List[List[str]]"
            ],
            "arguments": {}
        },
        "resolve_sync_error": {
            "name": "resolve_sync_error",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_AsyncIORuntime_gather_values_surfaces_errors.a": {
            "name": "a",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_AsyncIORuntime_map_value_async_ok.cb": {
            "name": "cb",
            "location": 201,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        }
    },
    "py-gql-master/tests/test_execution/test_basic.py": {
        "_resolve_article": {
            "name": "_resolve_article",
            "location": 303,
            "return": [
                "bool"
            ],
            "arguments": {
                "id_": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "test_uses_mutation_schema_for_mutation_operation._f": {
            "name": "_f",
            "location": 134,
            "return": [
                "str",
                "Iterable[str]",
                "List[int]",
                "int"
            ],
            "arguments": {
                "resolver": [
                    "str",
                    "Dict[str, Any]",
                    "float",
                    "Set[str]"
                ]
            }
        },
        "test_result_is_ordered_according_to_query._extract_keys_in_order": {
            "name": "_extract_keys_in_order",
            "location": 458,
            "return": [
                "str",
                "Optional[str]",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "d": [
                    "str",
                    "bytes",
                    "Dict[int, str]"
                ]
            }
        }
    },
    "py-gql-master/tests/test_execution/test_coercion.py": {
        "_complex_parse": {
            "name": "_complex_parse",
            "location": 32,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "value": [
                    "int",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "_inspect": {
            "name": "_inspect",
            "location": 59,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "_inspect._inspect_resolver": {
            "name": "_inspect_resolver",
            "location": 60,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "py-gql-master/tests/test_execution/test_default_resolver.py": {
        "TestDefaultResolver.test_looks_up_key": {
            "name": "test_looks_up_key",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefaultResolver.test_looks_up_attribute": {
            "name": "test_looks_up_attribute",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefaultResolver.test_looks_up_key_with_custom_python_name": {
            "name": "test_looks_up_key_with_custom_python_name",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefaultResolver.test_looks_up_attribute_with_custom_python_name": {
            "name": "test_looks_up_attribute_with_custom_python_name",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefaultResolver.test_evaluates_methods": {
            "name": "test_evaluates_methods",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOverrides._override_test_schema": {
            "name": "_override_test_schema",
            "location": 73,
            "return": [
                "Type[Any]",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOverrides.test_type_default_resolver_with_no_field_resolver": {
            "name": "test_type_default_resolver_with_no_field_resolver",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOverrides.test_type_default_resolver_with_field_resolver": {
            "name": "test_type_default_resolver_with_field_resolver",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOverrides.test_global_default_resolver_with_field_resolver": {
            "name": "test_global_default_resolver_with_field_resolver",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOverrides.test_global_default_resolver_with_type_default_resolver": {
            "name": "test_global_default_resolver_with_type_default_resolver",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOverrides.test_global_default_resolver": {
            "name": "test_global_default_resolver",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOverrides.test_type_default_resolver_with_no_field_resolver.default_foo": {
            "name": "default_foo",
            "location": 90,
            "return": [],
            "arguments": {
                "root": [],
                "ctx": [],
                "info": []
            }
        },
        "TestOverrides.test_type_default_resolver_with_field_resolver.default_foo": {
            "name": "default_foo",
            "location": 105,
            "return": [],
            "arguments": {
                "root": [],
                "ctx": [],
                "info": []
            }
        },
        "TestOverrides.test_type_default_resolver_with_field_resolver.resolve_foo_b": {
            "name": "resolve_foo_b",
            "location": 111,
            "return": [],
            "arguments": {
                "root": [],
                "ctx": [],
                "info": []
            }
        },
        "TestOverrides.test_global_default_resolver_with_field_resolver.default_foo": {
            "name": "default_foo",
            "location": 124,
            "return": [],
            "arguments": {
                "root": [],
                "ctx": [],
                "info": []
            }
        },
        "TestOverrides.test_global_default_resolver_with_field_resolver.resolve_foo_b": {
            "name": "resolve_foo_b",
            "location": 130,
            "return": [],
            "arguments": {
                "root": [
                    "Sequence[str]",
                    "str",
                    "bool",
                    "type"
                ],
                "ctx": [
                    "Sequence[str]",
                    "str",
                    "bool",
                    "type"
                ],
                "info": [
                    "Sequence[str]",
                    "str",
                    "bool",
                    "type"
                ]
            }
        },
        "TestOverrides.test_global_default_resolver_with_type_default_resolver.default": {
            "name": "default",
            "location": 143,
            "return": [],
            "arguments": {
                "root": [],
                "ctx": [],
                "info": []
            }
        },
        "TestOverrides.test_global_default_resolver_with_type_default_resolver.default_foo": {
            "name": "default_foo",
            "location": 148,
            "return": [
                "Callable[[Mapping], T]",
                "int",
                "float"
            ],
            "arguments": {
                "root": [
                    "Sequence[str]",
                    "str",
                    "List[str]"
                ],
                "ctx": [
                    "Sequence[str]",
                    "str",
                    "List[str]"
                ],
                "info": [
                    "Sequence[str]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestOverrides.test_global_default_resolver.default": {
            "name": "default",
            "location": 163,
            "return": [
                "Callable[[Mapping], T]",
                "int",
                "float"
            ],
            "arguments": {
                "root": [
                    "Sequence[str]",
                    "str",
                    "List[str]"
                ],
                "ctx": [
                    "Sequence[str]",
                    "str",
                    "List[str]"
                ],
                "info": [
                    "Sequence[str]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestDefaultResolver.test_looks_up_attribute.TestObject.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "TestDefaultResolver.test_looks_up_attribute_with_custom_python_name.TestObject.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict[str, Any]",
                    "int",
                    "List[str]",
                    "Set[str]",
                    "str"
                ]
            }
        },
        "TestDefaultResolver.test_evaluates_methods.Adder.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict[str, Any]",
                    "int",
                    "List[str]",
                    "Set[str]",
                    "str"
                ]
            }
        },
        "TestDefaultResolver.test_evaluates_methods.Adder.test": {
            "name": "test",
            "location": 55,
            "return": [
                "str",
                "T_co",
                "int"
            ],
            "arguments": {
                "self": [],
                "ctx": []
            }
        }
    },
    "py-gql-master/tests/test_execution/test_directives.py": {
        "_obj.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "py-gql-master/tests/test_execution/test_instrumentation.py": {
        "test_multi_instrumentation_stack_ordering.assert_ordered_subset_in_stack": {
            "name": "assert_ordered_subset_in_stack",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "expected_subset": [
                    "str",
                    "Optional[int]",
                    "List[str]"
                ]
            }
        },
        "test_multi_instrumentation_stack_ordering.TrackingInstrumentation.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "int",
                    "bool",
                    "float"
                ],
                "stack": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "test_multi_instrumentation_stack_ordering.TrackingInstrumentation.on_query_start": {
            "name": "on_query_start",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_multi_instrumentation_stack_ordering.TrackingInstrumentation.on_parsing_start": {
            "name": "on_parsing_start",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_multi_instrumentation_stack_ordering.TrackingInstrumentation.on_validation_start": {
            "name": "on_validation_start",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_multi_instrumentation_stack_ordering.TrackingInstrumentation.on_execution_start": {
            "name": "on_execution_start",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_multi_instrumentation_stack_ordering.TrackingInstrumentation.on_field_start": {
            "name": "on_field_start",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_root": [
                    "bool",
                    "List[Tuple[str, str]]",
                    "List[Tuple[str, bool, Any]]"
                ],
                "_context": [
                    "bool",
                    "List[Tuple[str, str]]",
                    "List[Tuple[str, bool, Any]]"
                ],
                "info": [
                    "dict",
                    "list",
                    "Optional[Callable]",
                    "List[str]",
                    "List[dict]"
                ]
            }
        },
        "test_multi_instrumentation_stack_ordering.TrackingInstrumentation.on_query_end": {
            "name": "on_query_end",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_multi_instrumentation_stack_ordering.TrackingInstrumentation.on_parsing_end": {
            "name": "on_parsing_end",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_multi_instrumentation_stack_ordering.TrackingInstrumentation.on_validation_end": {
            "name": "on_validation_end",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_multi_instrumentation_stack_ordering.TrackingInstrumentation.on_execution_end": {
            "name": "on_execution_end",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_multi_instrumentation_stack_ordering.TrackingInstrumentation.on_field_end": {
            "name": "on_field_end",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_root": [
                    "Callable[[], None]",
                    "list",
                    "bool"
                ],
                "_context": [
                    "Callable[[], None]",
                    "list",
                    "bool"
                ],
                "info": [
                    "str",
                    "bool",
                    "Optional[int]",
                    "List[str]",
                    "dict",
                    "list",
                    "List[T]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "py-gql-master/tests/test_execution/test_introspection.py": {
        "test_allows_querying_the_schema_for_types": {
            "name": "test_allows_querying_the_schema_for_types",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "starwars_schema": [
                    "str",
                    "int"
                ]
            }
        },
        "test_allows_querying_the_schema_for_query_type": {
            "name": "test_allows_querying_the_schema_for_query_type",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "starwars_schema": [
                    "str",
                    "int",
                    "bool",
                    "Dict[str, float]"
                ]
            }
        },
        "test_allows_querying_the_schema_for_a_specific_type": {
            "name": "test_allows_querying_the_schema_for_a_specific_type",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "starwars_schema": [
                    "str",
                    "int",
                    "Dict[str, float]"
                ]
            }
        },
        "test_allows_querying_the_schema_for_an_object_kind": {
            "name": "test_allows_querying_the_schema_for_an_object_kind",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "starwars_schema": [
                    "str",
                    "dict"
                ]
            }
        },
        "test_allows_querying_the_schema_for_an_interface_kind": {
            "name": "test_allows_querying_the_schema_for_an_interface_kind",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "starwars_schema": [
                    "str",
                    "dict"
                ]
            }
        },
        "test_allows_querying_the_schema_for_object_fields": {
            "name": "test_allows_querying_the_schema_for_object_fields",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "starwars_schema": [
                    "rest_framework_json_schema.schema.Context"
                ]
            }
        },
        "test_allows_querying_the_schema_for_nested_object_fields": {
            "name": "test_allows_querying_the_schema_for_nested_object_fields",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "starwars_schema": [
                    "rest_framework_json_schema.schema.Context"
                ]
            }
        },
        "test_allows_querying_the_schema_for_field_args": {
            "name": "test_allows_querying_the_schema_for_field_args",
            "location": 258,
            "return": [
                ""
            ],
            "arguments": {
                "starwars_schema": [
                    "rest_framework_json_schema.schema.Context"
                ]
            }
        },
        "test_allows_querying_the_schema_for_documentation": {
            "name": "test_allows_querying_the_schema_for_documentation",
            "location": 350,
            "return": [
                ""
            ],
            "arguments": {
                "starwars_schema": [
                    "str",
                    "dict"
                ]
            }
        },
        "test_introspection_query": {
            "name": "test_introspection_query",
            "location": 371,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_introspection_on_input_object": {
            "name": "test_introspection_on_input_object",
            "location": 1241,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_supports_the_type_root_field": {
            "name": "test_it_supports_the_type_root_field",
            "location": 1340,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_identifies_deprecated_fields": {
            "name": "test_it_identifies_deprecated_fields",
            "location": 1357,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_respects_the_include_deprecated_parameter_for_fields": {
            "name": "test_it_respects_the_include_deprecated_parameter_for_fields",
            "location": 1402,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_identifies_deprecated_enum_values": {
            "name": "test_it_identifies_deprecated_enum_values",
            "location": 1442,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_respects_the_include_deprecated_parameter_for_enum_values": {
            "name": "test_it_respects_the_include_deprecated_parameter_for_enum_values",
            "location": 1494,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_fails_as_expected_on_the_type_root_field_without_an_arg": {
            "name": "test_it_fails_as_expected_on_the_type_root_field_without_an_arg",
            "location": 1541,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_exposes_descriptions_on_types_and_fields": {
            "name": "test_it_exposes_descriptions_on_types_and_fields",
            "location": 1558,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_exposes_descriptions_on_enums": {
            "name": "test_it_exposes_descriptions_on_enums",
            "location": 1609,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_disable_introspection_typename": {
            "name": "test_disable_introspection_typename",
            "location": 1675,
            "return": [
                ""
            ],
            "arguments": {
                "starwars_schema": []
            }
        },
        "test_disable_introspection_schema": {
            "name": "test_disable_introspection_schema",
            "location": 1692,
            "return": [
                ""
            ],
            "arguments": {
                "starwars_schema": []
            }
        },
        "test_disable_introspection_type": {
            "name": "test_disable_introspection_type",
            "location": 1709,
            "return": [
                ""
            ],
            "arguments": {
                "starwars_schema": []
            }
        }
    },
    "py-gql-master/tests/test_execution/test_lists.py": {
        "_generator": {
            "name": "_generator",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_sortedset": {
            "name": "_sortedset",
            "location": 71,
            "return": [
                "list",
                "str",
                "List[T]",
                "List['Frame']"
            ],
            "arguments": {
                "values": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str, bytes]"
                ]
            }
        },
        "_lazy": {
            "name": "_lazy",
            "location": 75,
            "return": [
                "int",
                "List[int]"
            ],
            "arguments": {
                "values": [
                    "int",
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "_obj.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "py-gql-master/tests/test_execution/test_middlewares.py": {
        "test_sync_path_collector": {
            "name": "test_sync_path_collector",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "starwars_schema": [
                    "str"
                ]
            }
        },
        "test_bail_out_in_middleware": {
            "name": "test_bail_out_in_middleware",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "starwars_schema": [
                    "Dict[str, Any]",
                    "Callable[[list], None]"
                ]
            }
        },
        "test_middlewares_chain": {
            "name": "test_middlewares_chain",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "starwars_schema": [
                    "str",
                    "tuple",
                    "Dict[str, Any]",
                    "IO[str]"
                ]
            }
        },
        "test_bail_out_in_middleware.block_deep_fields": {
            "name": "block_deep_fields",
            "location": 100,
            "return": [],
            "arguments": {
                "next_": [
                    "str",
                    "dict"
                ],
                "root": [
                    "str",
                    "dict"
                ],
                "ctx": [
                    "str",
                    "dict"
                ],
                "info": [
                    "int"
                ]
            }
        },
        "test_middlewares_chain.add_to_chain": {
            "name": "add_to_chain",
            "location": 173,
            "return": [
                "Optional[BaseException]",
                "Optional[str]",
                "str",
                "Type"
            ],
            "arguments": {
                "next_": [
                    "str",
                    "Callable",
                    "tuple",
                    "Any"
                ],
                "root": [
                    "str",
                    "Callable",
                    "tuple",
                    "Any"
                ],
                "ctx": [
                    "str",
                    "Sequence[str]",
                    "Optional[Callable]",
                    "Callable",
                    "Type"
                ],
                "info": [
                    "str",
                    "Sequence[str]",
                    "Optional[Callable]",
                    "Callable",
                    "Type"
                ]
            }
        },
        "test_sync_path_collector.PathCollector.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_sync_path_collector.PathCollector.__call__": {
            "name": "__call__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "next_": [],
                "root": [],
                "ctx": [],
                "info": []
            }
        },
        "test_async_path_collector.PathCollector.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "py-gql-master/tests/test_execution/test_mutations.py": {
        "NumberHolder.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "original": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Root.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "original": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Root.incrementTheNumber": {
            "name": "incrementTheNumber",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "steps": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Root.changeTheNumber": {
            "name": "changeTheNumber",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "newNumber": [
                    "str"
                ]
            }
        },
        "Root.failToChangeTheNumber": {
            "name": "failToChangeTheNumber",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_new_number": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "float",
                    "Callable"
                ]
            }
        }
    },
    "py-gql-master/tests/test_execution/test_nulls.py": {
        "_obj.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "py-gql-master/tests/test_execution/test_star_wars.py": {},
    "py-gql-master/tests/test_execution/test_subscriptions.py": {
        "subscription_schema": {
            "name": "subscription_schema",
            "location": 22,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "field": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "AsyncCounter.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "delay": [
                    "int",
                    "Union[str, float]",
                    "float",
                    "List[str]",
                    "str",
                    "bool"
                ],
                "max_value": [
                    "int",
                    "Optional[float]",
                    "Iterator[int]"
                ]
            }
        },
        "AsyncCounter.__aiter__": {
            "name": "__aiter__",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_simple_counter_subscription.counter_subscription": {
            "name": "counter_subscription",
            "location": 158,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_simple_counter_subscription_with_error.resolver": {
            "name": "resolver",
            "location": 201,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "event": [
                    "str"
                ]
            }
        }
    },
    "py-gql-master/tests/test_execution/test_wrappers.py": {
        "test_GraphQLResult_response_with_nothing": {
            "name": "test_GraphQLResult_response_with_nothing",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_GraphQLResult_json": {
            "name": "test_GraphQLResult_json",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_GraphQLResult_bool": {
            "name": "test_GraphQLResult_bool",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_GraphQLResult_add_extension": {
            "name": "test_GraphQLResult_add_extension",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_GraphQLResult_add_extension_raises_on_duplicate": {
            "name": "test_GraphQLResult_add_extension_raises_on_duplicate",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_GraphQLResult_add_extension.Ext.name": {
            "name": "name",
            "location": 34,
            "return": [
                "Dict[str, Any]",
                "str",
                "int",
                "Iterator",
                "Container[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_GraphQLResult_add_extension.Ext.payload": {
            "name": "payload",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_GraphQLResult_add_extension_raises_on_duplicate.Ext.payload": {
            "name": "payload",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "py-gql-master/tests/test_execution/_test_utils.py": {
        "create_test_schema": {
            "name": "create_test_schema",
            "location": 22,
            "return": [
                "Type",
                "str",
                "type"
            ],
            "arguments": {
                "field_or_type": [
                    "str",
                    "schema.InterfaceType"
                ]
            }
        },
        "assert_execution_result": {
            "name": "assert_execution_result",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "result": [
                    "bool",
                    "str",
                    "Exception",
                    "Union[Callable, str]",
                    "dict"
                ],
                "expected_data": [
                    "bool",
                    "Union[None, str, List[str], Dict[str, str]]",
                    "type",
                    "Dict[str, str]",
                    "str",
                    "Union[float, int]",
                    "List[Dict]",
                    "Mapping"
                ],
                "expected_errors": [
                    "Dict[str, Any]",
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "ensure_document": {
            "name": "ensure_document",
            "location": 67,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "doc": [
                    "Union[py_gql.lang.asDocument, str]",
                    "str",
                    "List[int]"
                ]
            }
        },
        "assert_sync_execution": {
            "name": "assert_sync_execution",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "List[str]",
                    "Sequence[Dict]",
                    "list",
                    "Tuple[str, str]"
                ],
                "doc": [
                    "int",
                    "Union[py_gql.lang.asDocument, str]",
                    "Optional[str]"
                ],
                "expected_data": [
                    "Dict[str, Any]"
                ],
                "expected_errors": [
                    "Dict[str, Any]"
                ],
                "expected_exc": [
                    "Sequence[Dict]",
                    "Dict[str, flambe.compile.Schema]",
                    "dict",
                    "Dict[str, Any]",
                    "Optional[int]"
                ]
            }
        }
    },
    "py-gql-master/tests/test_execution/__init__.py": {},
    "py-gql-master/tests/test_lang/test_ast_printer.py": {
        "test_minimal_ast": {
            "name": "test_minimal_ast",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_query_operation_without_name": {
            "name": "test_query_operation_without_name",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_query_operation_without_name_and_artifacts": {
            "name": "test_query_operation_without_name_and_artifacts",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_mutation_operation_without_name": {
            "name": "test_mutation_operation_without_name",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_mutation_operation_without_name_and_artifacts": {
            "name": "test_mutation_operation_without_name_and_artifacts",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_block_string_single_line_with_leading_space": {
            "name": "test_block_string_single_line_with_leading_space",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_block_string_string_with_a_first_line_indentation": {
            "name": "test_block_string_string_with_a_first_line_indentation",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_block_string_single_line_with_leading_space_and_quotation": {
            "name": "test_block_string_single_line_with_leading_space_and_quotation",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_fragment_defined_variables": {
            "name": "test_fragment_defined_variables",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_kitchen_sink": {
            "name": "test_kitchen_sink",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "fixture_file": [
                    "Optional[str]"
                ]
            }
        },
        "test_schema_kitchen_sink": {
            "name": "test_schema_kitchen_sink",
            "location": 216,
            "return": [
                ""
            ],
            "arguments": {
                "fixture_file": [
                    "Optional[str]"
                ]
            }
        },
        "test_custom_indentation_object": {
            "name": "test_custom_indentation_object",
            "location": 337,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_variable_definitions": {
            "name": "test_variable_definitions",
            "location": 382,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "py-gql-master/tests/test_lang/test_lexer.py": {
        "lex_one": {
            "name": "lex_one",
            "location": 15,
            "return": [],
            "arguments": {
                "source": []
            }
        },
        "test_disallow_uncommon_control_characters": {
            "name": "test_disallow_uncommon_control_characters",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "test_ignore_trailing_whitespace": {
            "name": "test_ignore_trailing_whitespace",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "test_ignore_trailing_whitespace_2": {
            "name": "test_ignore_trailing_whitespace_2",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "test_accept_bom_header": {
            "name": "test_accept_bom_header",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "test_accept_binary_type": {
            "name": "test_accept_binary_type",
            "location": 47,
            "return": [],
            "arguments": {}
        },
        "test_skip_whitespace_and_comments_1": {
            "name": "test_skip_whitespace_and_comments_1",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "test_skip_whitespace_and_comments_2": {
            "name": "test_skip_whitespace_and_comments_2",
            "location": 65,
            "return": [],
            "arguments": {}
        },
        "test_skip_whitespace_and_comments_3": {
            "name": "test_skip_whitespace_and_comments_3",
            "location": 77,
            "return": [],
            "arguments": {}
        },
        "test_errors_respect_whitespace": {
            "name": "test_errors_respect_whitespace",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "test_name": {
            "name": "test_name",
            "location": 112,
            "return": [],
            "arguments": {
                "value": [],
                "expected": []
            }
        },
        "test_strings": {
            "name": "test_strings",
            "location": 134,
            "return": [],
            "arguments": {
                "value": [],
                "expected": []
            }
        },
        "test_useful_string_errors": {
            "name": "test_useful_string_errors",
            "location": 162,
            "return": [],
            "arguments": {
                "value": [],
                "err_cls": [],
                "expected_positon": []
            }
        },
        "test_block_strings": {
            "name": "test_block_strings",
            "location": 207,
            "return": [],
            "arguments": {
                "value": [],
                "expected": []
            }
        },
        "test_useful_block_string_errors": {
            "name": "test_useful_block_string_errors",
            "location": 220,
            "return": [],
            "arguments": {
                "value": [],
                "err_cls": [],
                "expected_positon": []
            }
        },
        "test_numbers": {
            "name": "test_numbers",
            "location": 248,
            "return": [],
            "arguments": {
                "string": [],
                "expected": []
            }
        },
        "test_useful_number_errors": {
            "name": "test_useful_number_errors",
            "location": 282,
            "return": [],
            "arguments": {
                "value": [],
                "err_cls": [],
                "expected_positon": []
            }
        },
        "test_punctuation": {
            "name": "test_punctuation",
            "location": 307,
            "return": [],
            "arguments": {
                "string": [],
                "expected": []
            }
        },
        "test_useful_unknown_character_error": {
            "name": "test_useful_unknown_character_error",
            "location": 320,
            "return": [],
            "arguments": {
                "value": [],
                "err_cls": [],
                "pos": []
            }
        },
        "test_multiple_tokens": {
            "name": "test_multiple_tokens",
            "location": 326,
            "return": [],
            "arguments": {}
        },
        "test_kitchen_sink": {
            "name": "test_kitchen_sink",
            "location": 360,
            "return": [],
            "arguments": {
                "fixture_file": []
            }
        }
    },
    "py-gql-master/tests/test_lang/test_node.py": {
        "test_eq": {
            "name": "test_eq",
            "location": 105,
            "return": [],
            "arguments": {
                "rhs": [],
                "lhs": [],
                "eq": []
            }
        },
        "test_to_dict": {
            "name": "test_to_dict",
            "location": 159,
            "return": [],
            "arguments": {
                "value": [],
                "expected": []
            }
        },
        "test_copy_does_not_raise": {
            "name": "test_copy_does_not_raise",
            "location": 171,
            "return": [],
            "arguments": {
                "fixture_file": [],
                "fixture_name": []
            }
        }
    },
    "py-gql-master/tests/test_lang/test_parser.py": {
        "assert_node_equal": {
            "name": "assert_node_equal",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "ref": [
                    "str",
                    "Dict[str, int]",
                    "bool"
                ],
                "expected": [
                    "str",
                    "Dict[str, int]",
                    "bool"
                ]
            }
        },
        "test_it_provides_useful_errors": {
            "name": "test_it_provides_useful_errors",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "str",
                    "int",
                    "Callable",
                    "Iterable[str]"
                ],
                "error_cls": [
                    "Dict[str, Any]",
                    "Callable"
                ],
                "position": [
                    "Optional[Union[float, str]]",
                    "Optional[str]",
                    "bool",
                    "Optional[object]",
                    "Optional[T]"
                ],
                "message": [
                    "Optional[str]",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[Type[Exception]]"
                ]
            }
        },
        "test_it_parses_variable_inline_values": {
            "name": "test_it_parses_variable_inline_values",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_parses_constant_default_values": {
            "name": "test_it_parses_constant_default_values",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_does_not_accept_fragments_named_on": {
            "name": "test_it_does_not_accept_fragments_named_on",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_does_not_accept_fragments_spread_of_on": {
            "name": "test_it_does_not_accept_fragments_spread_of_on",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_parses_multi_bytes_characters": {
            "name": "test_it_parses_multi_bytes_characters",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_parses_kitchen_sink": {
            "name": "test_it_parses_kitchen_sink",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "fixture_file": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "test_it_allows_non_keywords_anywhere_a_name_is_allowed": {
            "name": "test_it_allows_non_keywords_anywhere_a_name_is_allowed",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "keyword": [
                    "str"
                ]
            }
        },
        "test_it_parses_anonymous_mutation_operations": {
            "name": "test_it_parses_anonymous_mutation_operations",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_parses_anonymous_subscription_operations": {
            "name": "test_it_parses_anonymous_subscription_operations",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_parses_named_mutation_operations": {
            "name": "test_it_parses_named_mutation_operations",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_parses_named_subscription_operations": {
            "name": "test_it_parses_named_subscription_operations",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_creates_ast": {
            "name": "test_it_creates_ast",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_creates_ast_from_nameless_query_without_variables": {
            "name": "test_it_creates_ast_from_nameless_query_without_variables",
            "location": 250,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_allows_parsing_without_source_location_information": {
            "name": "test_it_allows_parsing_without_source_location_information",
            "location": 301,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_experimental_allows_parsing_fragment_defined_variables": {
            "name": "test_it_experimental_allows_parsing_fragment_defined_variables",
            "location": 305,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_contains_references_to_source": {
            "name": "test_it_contains_references_to_source",
            "location": 315,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_value_it_parses_null_value": {
            "name": "test_parse_value_it_parses_null_value",
            "location": 320,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_value_it_parses_list_values": {
            "name": "test_parse_value_it_parses_list_values",
            "location": 324,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_value_it_parses_block_strings": {
            "name": "test_parse_value_it_parses_block_strings",
            "location": 337,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_type_it_parses_well_known_types": {
            "name": "test_parse_type_it_parses_well_known_types",
            "location": 350,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_type_it_parses_custom_types": {
            "name": "test_parse_type_it_parses_custom_types",
            "location": 357,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_type_it_parses_list_types": {
            "name": "test_parse_type_it_parses_list_types",
            "location": 364,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_type_it_parses_non_null_types": {
            "name": "test_parse_type_it_parses_non_null_types",
            "location": 376,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_type_it_parses_nested_types": {
            "name": "test_parse_type_it_parses_nested_types",
            "location": 388,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_type_it_parses_nested_types_2": {
            "name": "test_parse_type_it_parses_nested_types_2",
            "location": 403,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_parses_inline_fragment_without_type": {
            "name": "test_it_parses_inline_fragment_without_type",
            "location": 421,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_parses_variable_definition_with_directives": {
            "name": "test_it_parses_variable_definition_with_directives",
            "location": 467,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_parses_variable_definition_with_default_and_directives": {
            "name": "test_it_parses_variable_definition_with_default_and_directives",
            "location": 495,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "py-gql-master/tests/test_lang/test_schema_parser.py": {
        "assert_node_equal": {
            "name": "assert_node_equal",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "ref": [
                    "str",
                    "MutableMapping[str, str]",
                    "Exception"
                ],
                "expected": [
                    "str",
                    "MutableMapping[str, str]",
                    "Exception"
                ]
            }
        },
        "_name": {
            "name": "_name",
            "location": 24,
            "return": [
                "bool",
                "Type",
                "Optional[Any]",
                "Optional[str]",
                "str",
                "Callable[[str], str]"
            ],
            "arguments": {
                "loc": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "dict"
                ],
                "value": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "_type": {
            "name": "_type",
            "location": 28,
            "return": [],
            "arguments": {
                "loc": [
                    "Type",
                    "str",
                    "Type['Model']",
                    "Type[T]",
                    "Tuple[str, int, Dict[str, str]]"
                ],
                "value": [
                    "Type",
                    "str",
                    "Type['Model']",
                    "Type[T]",
                    "Tuple[str, int, Dict[str, str]]"
                ]
            }
        },
        "_field": {
            "name": "_field",
            "location": 32,
            "return": [
                "tuple",
                "dict"
            ],
            "arguments": {
                "loc": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "type_": [
                    "str"
                ],
                "args": []
            }
        },
        "_input": {
            "name": "_input",
            "location": 38,
            "return": [
                "str",
                "int",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "loc": [
                    "Union[str, int]",
                    "str",
                    "Optional[Type[BaseException]]",
                    "Optional[str]"
                ],
                "name": [
                    "Union[str, int]",
                    "str",
                    "Optional[Type[BaseException]]",
                    "Optional[str]"
                ],
                "type_": [
                    "Union[str, int]",
                    "str",
                    "Optional[Type[BaseException]]",
                    "Optional[str]"
                ],
                "default_value": [
                    "Union[str, int]",
                    "str",
                    "Optional[Type[BaseException]]",
                    "Optional[str]"
                ]
            }
        },
        "_doc": {
            "name": "_doc",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "loc": [
                    "int",
                    "Callable",
                    "str"
                ],
                "defs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_it_parses_simple_type": {
            "name": "test_it_parses_simple_type",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_parses_type_with_description_string": {
            "name": "test_it_parses_type_with_description_string",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_parses_type_with_description_multi_line_string": {
            "name": "test_it_parses_type_with_description_multi_line_string",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_parses_simple_extension": {
            "name": "test_it_parses_simple_extension",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_parses_extension_without_fields": {
            "name": "test_it_parses_extension_without_fields",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_parses_extension_without_fields_followed_by_extension": {
            "name": "test_it_parses_extension_without_fields_followed_by_extension",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_extension_without_anything_throws": {
            "name": "test_extension_without_anything_throws",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_extension_do_not_include_descriptions_0": {
            "name": "test_extension_do_not_include_descriptions_0",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_extension_do_not_include_descriptions_1": {
            "name": "test_extension_do_not_include_descriptions_1",
            "location": 250,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_parses_simple_non_null_type": {
            "name": "test_it_parses_simple_non_null_type",
            "location": 263,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_parses_simple_type_inheriting_interface": {
            "name": "test_it_parses_simple_type_inheriting_interface",
            "location": 293,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_parses_simple_type_inheriting_multiple_interfaces": {
            "name": "test_it_parses_simple_type_inheriting_multiple_interfaces",
            "location": 318,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_parses_simple_type_inheriting_multiple_interfaces_with_leading_ampersand": {
            "name": "test_it_parses_simple_type_inheriting_multiple_interfaces_with_leading_ampersand",
            "location": 343,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_parses_single_value_enum": {
            "name": "test_it_parses_single_value_enum",
            "location": 368,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_parses_double_value_enum": {
            "name": "test_it_parses_double_value_enum",
            "location": 390,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_parses_simple_interface": {
            "name": "test_it_parses_simple_interface",
            "location": 415,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_parses_simple_field_with_arg": {
            "name": "test_it_parses_simple_field_with_arg",
            "location": 442,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_parses_simple_field_with_arg_with_default_value": {
            "name": "test_it_parses_simple_field_with_arg_with_default_value",
            "location": 477,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_parses_simple_field_with_list_arg": {
            "name": "test_it_parses_simple_field_with_list_arg",
            "location": 513,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_parses_simple_field_with_two_args": {
            "name": "test_it_parses_simple_field_with_two_args",
            "location": 551,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_parses_simple_union": {
            "name": "test_it_parses_simple_union",
            "location": 591,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_parses_union_with_two_types": {
            "name": "test_it_parses_union_with_two_types",
            "location": 608,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_parses_union_with_two_types_and_leading_pipe": {
            "name": "test_it_parses_union_with_two_types_and_leading_pipe",
            "location": 625,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_union_fails_with_no_types": {
            "name": "test_union_fails_with_no_types",
            "location": 642,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_union_fails_with_leading_douple_pipe": {
            "name": "test_union_fails_with_leading_douple_pipe",
            "location": 649,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_union_fails_with_double_pipe": {
            "name": "test_union_fails_with_double_pipe",
            "location": 656,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_union_fails_with_trailing_pipe": {
            "name": "test_union_fails_with_trailing_pipe",
            "location": 663,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_parses_scalar": {
            "name": "test_it_parses_scalar",
            "location": 670,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_parses_simple_input_object": {
            "name": "test_it_parses_simple_input_object",
            "location": 684,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_simple_input_object_with_args_should_fail": {
            "name": "test_simple_input_object_with_args_should_fail",
            "location": 711,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_directive_with_incorrect_locations_fails": {
            "name": "test_directive_with_incorrect_locations_fails",
            "location": 725,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_parses_kitchen_sink": {
            "name": "test_it_parses_kitchen_sink",
            "location": 737,
            "return": [
                ""
            ],
            "arguments": {
                "fixture_file": [
                    "str"
                ]
            }
        },
        "test_it_parses_github_schema": {
            "name": "test_it_parses_github_schema",
            "location": 746,
            "return": [
                ""
            ],
            "arguments": {
                "fixture_file": [
                    "str"
                ]
            }
        },
        "test_it_does_not_parses_kitchen_sink_when_allow_type_system_is_false": {
            "name": "test_it_does_not_parses_kitchen_sink_when_allow_type_system_is_false",
            "location": 755,
            "return": [
                ""
            ],
            "arguments": {
                "fixture_file": []
            }
        }
    },
    "py-gql-master/tests/test_lang/test_visitor.py": {
        "test_null_visitor_does_not_crash": {
            "name": "test_null_visitor_does_not_crash",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_null_visitor_does_not_crash_on_kitchen_sink": {
            "name": "test_null_visitor_does_not_crash_on_kitchen_sink",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "fixture_file": []
            }
        },
        "test_null_visitor_does_not_crash_on_kitchen_sink_schema": {
            "name": "test_null_visitor_does_not_crash_on_kitchen_sink_schema",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "fixture_file": []
            }
        },
        "test_it_processes_nodes_in_the_correct_order": {
            "name": "test_it_processes_nodes_in_the_correct_order",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_allows_early_exit": {
            "name": "test_it_allows_early_exit",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_processes_kitchen_sink": {
            "name": "test_it_processes_kitchen_sink",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "fixture_file": [
                    "Optional[str]"
                ]
            }
        },
        "test_it_processes_schema_kitchen_sink": {
            "name": "test_it_processes_schema_kitchen_sink",
            "location": 280,
            "return": [
                ""
            ],
            "arguments": {
                "fixture_file": [
                    "Optional[str]"
                ]
            }
        },
        "test_it_processes_github_schema_sink_without_crashing": {
            "name": "test_it_processes_github_schema_sink_without_crashing",
            "location": 602,
            "return": [
                ""
            ],
            "arguments": {
                "fixture_file": [
                    "Optional[str]"
                ]
            }
        },
        "test_node_removal": {
            "name": "test_node_removal",
            "location": 608,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_node_inline_modification": {
            "name": "test_node_inline_modification",
            "location": 629,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_node_return_modification": {
            "name": "test_node_return_modification",
            "location": 651,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Tracker.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Tracker.enter": {
            "name": "enter",
            "location": 37,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "dict",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "Tracker.leave": {
            "name": "leave",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "dict",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "test_it_allows_early_exit._Visitor.enter": {
            "name": "enter",
            "location": 65,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "test_node_removal.Visitor.enter_field": {
            "name": "enter_field",
            "location": 610,
            "return": [],
            "arguments": {
                "self": [],
                "field": []
            }
        },
        "test_node_inline_modification.Visitor.enter_field": {
            "name": "enter_field",
            "location": 631,
            "return": [],
            "arguments": {
                "self": [],
                "field": []
            }
        },
        "test_node_return_modification.Visitor.enter_field": {
            "name": "enter_field",
            "location": 653,
            "return": [
                "AbstractSet[str]",
                "str",
                "Type",
                "type"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "lang.asField",
                    "tuple",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "py-gql-master/tests/test_lang/__init__.py": {},
    "py-gql-master/tests/test_schema/test_assign_resolver.py": {
        "test_register_resolver": {
            "name": "test_register_resolver",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_resolver_decorator": {
            "name": "test_resolver_decorator",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_resolver_decorator_multiple_applications": {
            "name": "test_resolver_decorator_multiple_applications",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_resolver_decorator_invalid_path": {
            "name": "test_resolver_decorator_invalid_path",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_resolver_decorator._resolve_foo": {
            "name": "_resolve_foo",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_resolver_decorator_multiple_applications._resolve_foo": {
            "name": "_resolve_foo",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "py-gql-master/tests/test_schema/test_camel_case_schema_transform.py": {
        "schema": {
            "name": "schema",
            "location": 12,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "test_it_renames_relevant_schema_elements": {
            "name": "test_it_renames_relevant_schema_elements",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_default_resolver_still_works": {
            "name": "test_default_resolver_still_works",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema",
                    "Iterable[Any]",
                    "bool"
                ]
            }
        },
        "test_custom_resolver_still_works": {
            "name": "test_custom_resolver_still_works",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_arguments_and_input_fields_are_handled_correctly": {
            "name": "test_arguments_and_input_fields_are_handled_correctly",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_arguments_and_input_fields_are_handled_correctly.resolver": {
            "name": "resolver",
            "location": 67,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "_root": [
                    "Sequence[str]",
                    "str",
                    "List[str]"
                ],
                "_ctx": [
                    "Sequence[str]",
                    "str",
                    "List[str]"
                ],
                "_info": [
                    "Sequence[str]",
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "py-gql-master/tests/test_schema/test_diff_schema.py": {
        "assert_change_found": {
            "name": "assert_change_found",
            "location": 880,
            "return": [
                ""
            ],
            "arguments": {
                "changes": [
                    "int",
                    "list"
                ],
                "expected": [
                    "bool",
                    "int",
                    "str",
                    "Dict[str, Union[str, int]]",
                    "List[int]"
                ]
            }
        },
        "test_diffs": {
            "name": "test_diffs",
            "location": 904,
            "return": [
                ""
            ],
            "arguments": {
                "old_schema": [
                    "int",
                    "float"
                ],
                "new_schema": [
                    "int",
                    "float"
                ],
                "expected": [
                    "int",
                    "float"
                ]
            }
        },
        "test_detects_no_change_in_same_schema": {
            "name": "test_detects_no_change_in_same_schema",
            "location": 908,
            "return": [
                ""
            ],
            "arguments": {
                "fixture_file": [
                    "int"
                ]
            }
        },
        "test_no_incompatible_changes": {
            "name": "test_no_incompatible_changes",
            "location": 936,
            "return": [
                ""
            ],
            "arguments": {
                "old_schema": [
                    "str"
                ],
                "new_schema": [
                    "str"
                ]
            }
        },
        "test_minimum_severity": {
            "name": "test_minimum_severity",
            "location": 946,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "py-gql-master/tests/test_schema/test_fix_type_references.py": {
        "schema": {
            "name": "schema",
            "location": 24,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "test_replace_interface_in_implementers": {
            "name": "test_replace_interface_in_implementers",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema",
                    "Type[Any]"
                ]
            }
        },
        "test_replace_type_in_union": {
            "name": "test_replace_type_in_union",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_replace_query_type": {
            "name": "test_replace_query_type",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema",
                    "Type[Any]"
                ]
            }
        },
        "test_replace_mutation_type": {
            "name": "test_replace_mutation_type",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_root_type_is_not_created": {
            "name": "test_root_type_is_not_created",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema",
                    "Type[Any]"
                ]
            }
        }
    },
    "py-gql-master/tests/test_schema/test_schema.py": {
        "_null_resolver": {
            "name": "_null_resolver",
            "location": 85,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_Schema_is_possible_type_is_accurate": {
            "name": "test_Schema_is_possible_type_is_accurate",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Schema_is_possible_handles_non_object_types": {
            "name": "test_Schema_is_possible_handles_non_object_types",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Schema_is_possible_rejects_non_abstract_types": {
            "name": "test_Schema_is_possible_rejects_non_abstract_types",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Schema_includes_input_types_only_used_in_directives": {
            "name": "test_Schema_includes_input_types_only_used_in_directives",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Schema_get_type_raises_on_unknown_type": {
            "name": "test_Schema_get_type_raises_on_unknown_type",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Schema_includes_nested_input_objects_in_the_map": {
            "name": "test_Schema_includes_nested_input_objects_in_the_map",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Schema_includes_interface_possible_types_in_the_type_map": {
            "name": "test_Schema_includes_interface_possible_types_in_the_type_map",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Schema_refuses_duplicate_type_names": {
            "name": "test_Schema_refuses_duplicate_type_names",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Schema_includes_introspection_types": {
            "name": "test_Schema_includes_introspection_types",
            "location": 204,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_register_resolver_on_root_type": {
            "name": "test_register_resolver_on_root_type",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_register_resolver_on_child_type": {
            "name": "test_register_resolver_on_child_type",
            "location": 226,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_register_resolver_raises_on_unknown_type": {
            "name": "test_register_resolver_raises_on_unknown_type",
            "location": 238,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_register_resolver_raises_on_unknown_field": {
            "name": "test_register_resolver_raises_on_unknown_field",
            "location": 247,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_register_resolver_raises_on_override_by_default": {
            "name": "test_register_resolver_raises_on_override_by_default",
            "location": 256,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_register_resolver_does_not_raise_on_same_resolver": {
            "name": "test_register_resolver_does_not_raise_on_same_resolver",
            "location": 267,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_register_resolver_accepts_override_with_flag": {
            "name": "test_register_resolver_accepts_override_with_flag",
            "location": 274,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_register_subscription_works": {
            "name": "test_register_subscription_works",
            "location": 287,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_register_subscription_raises_on_missing_subscription_type": {
            "name": "test_register_subscription_raises_on_missing_subscription_type",
            "location": 302,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_register_subscription_raises_on_missing_field": {
            "name": "test_register_subscription_raises_on_missing_field",
            "location": 310,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_register_subscription_raises_on_existing_resolver": {
            "name": "test_register_subscription_raises_on_existing_resolver",
            "location": 319,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_register_default_resolver": {
            "name": "test_register_default_resolver",
            "location": 330,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_register_default_resolver_already_set": {
            "name": "test_register_default_resolver_already_set",
            "location": 345,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_register_default_resolver_allow_override": {
            "name": "test_register_default_resolver_allow_override",
            "location": 366,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_resolver_decorator_with_wildcard": {
            "name": "test_resolver_decorator_with_wildcard",
            "location": 387,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_register_default_resolver.query_default": {
            "name": "query_default",
            "location": 334,
            "return": [],
            "arguments": {
                "root": [],
                "ctx": [],
                "info": []
            }
        },
        "test_register_default_resolver_already_set.query_default": {
            "name": "query_default",
            "location": 349,
            "return": [],
            "arguments": {
                "root": [],
                "ctx": [],
                "info": []
            }
        },
        "test_register_default_resolver_already_set.query_default_2": {
            "name": "query_default_2",
            "location": 352,
            "return": [],
            "arguments": {
                "root": [],
                "ctx": [],
                "info": []
            }
        },
        "test_register_default_resolver_allow_override.query_default": {
            "name": "query_default",
            "location": 370,
            "return": [],
            "arguments": {
                "root": [],
                "ctx": [],
                "info": []
            }
        },
        "test_register_default_resolver_allow_override.query_default_2": {
            "name": "query_default_2",
            "location": 373,
            "return": [
                "str",
                "float",
                "int",
                "bytes"
            ],
            "arguments": {
                "root": [
                    "str",
                    "type",
                    "Union[str, Tuple[str, str]]",
                    "tuple",
                    "Dict[str, Any]",
                    "Sequence[str]"
                ],
                "ctx": [
                    "str",
                    "type",
                    "Union[str, Tuple[str, str]]",
                    "tuple",
                    "Dict[str, Any]",
                    "Sequence[str]"
                ],
                "info": [
                    "str",
                    "type",
                    "Union[str, Tuple[str, str]]",
                    "tuple",
                    "Dict[str, Any]",
                    "Sequence[str]"
                ]
            }
        },
        "test_resolver_decorator_with_wildcard.query_default": {
            "name": "query_default",
            "location": 392,
            "return": [
                "str",
                "float",
                "int",
                "bytes"
            ],
            "arguments": {
                "root": [
                    "str",
                    "type",
                    "Union[str, Tuple[str, str]]",
                    "tuple",
                    "Dict[str, Any]",
                    "Sequence[str]"
                ],
                "ctx": [
                    "str",
                    "type",
                    "Union[str, Tuple[str, str]]",
                    "tuple",
                    "Dict[str, Any]",
                    "Sequence[str]"
                ],
                "info": [
                    "str",
                    "type",
                    "Union[str, Tuple[str, str]]",
                    "tuple",
                    "Dict[str, Any]",
                    "Sequence[str]"
                ]
            }
        }
    },
    "py-gql-master/tests/test_schema/test_schema_printer.py": {
        "print_schema": {
            "name": "print_schema",
            "location": 27,
            "return": [
                "int",
                "Exception",
                "str",
                "bool"
            ],
            "arguments": {
                "schema": [
                    "tuple",
                    "List[str]",
                    "list",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "_single_field_schema": {
            "name": "_single_field_schema",
            "location": 31,
            "return": [
                "str",
                "Callable[..., T]",
                "List[Tuple[str]]"
            ],
            "arguments": {}
        },
        "test_empty_schema": {
            "name": "test_empty_schema",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_single_field_schema": {
            "name": "test_single_field_schema",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "type_": [
                    "str",
                    "Union[str, int]"
                ],
                "opts": [
                    "str",
                    "Union[str, int]"
                ],
                "expected": [
                    "str",
                    "Union[str, int]"
                ]
            }
        },
        "test_mutation": {
            "name": "test_mutation",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_custom_mutation": {
            "name": "test_custom_mutation",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_subscription": {
            "name": "test_subscription",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_custom_subscription": {
            "name": "test_custom_subscription",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_object_field": {
            "name": "test_object_field",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_string_field_with_int_arg": {
            "name": "test_string_field_with_int_arg",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_string_field_with_int_arg_with_default_value": {
            "name": "test_string_field_with_int_arg_with_default_value",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_string_field_with_string_arg_with_default_value": {
            "name": "test_string_field_with_string_arg_with_default_value",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_string_field_with_int_arg_with_null_default_value": {
            "name": "test_string_field_with_int_arg_with_null_default_value",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_string_field_with_non_null_int_arg": {
            "name": "test_string_field_with_non_null_int_arg",
            "location": 216,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_string_field_with_multiple_args": {
            "name": "test_string_field_with_multiple_args",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_string_field_with_multiple_args_with_default": {
            "name": "test_string_field_with_multiple_args_with_default",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_custom_query_root_type": {
            "name": "test_custom_query_root_type",
            "location": 259,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_interfaces": {
            "name": "test_interfaces",
            "location": 276,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_unions": {
            "name": "test_unions",
            "location": 305,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_input_type": {
            "name": "test_input_type",
            "location": 335,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_custom_scalar_uuid": {
            "name": "test_custom_scalar_uuid",
            "location": 353,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_custom_scalar_regex_type": {
            "name": "test_custom_scalar_regex_type",
            "location": 369,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_enum": {
            "name": "test_enum",
            "location": 384,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_custom_directive": {
            "name": "test_custom_directive",
            "location": 403,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_description_fits_on_one_line": {
            "name": "test_description_fits_on_one_line",
            "location": 423,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_description_ends_with_a_quote": {
            "name": "test_description_ends_with_a_quote",
            "location": 438,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_description_has_leading_space": {
            "name": "test_description_has_leading_space",
            "location": 455,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_introspection_schema": {
            "name": "test_introspection_schema",
            "location": 471,
            "return": [
                ""
            ],
            "arguments": {
                "fixture_file": []
            }
        },
        "test_custom_directive_from_sdl_are_included_if_set": {
            "name": "test_custom_directive_from_sdl_are_included_if_set",
            "location": 477,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_custom_directives_from_sdl_are_included_if_set_to_True": {
            "name": "test_custom_directives_from_sdl_are_included_if_set_to_True",
            "location": 524,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_custom_directives_whitelist": {
            "name": "test_custom_directives_whitelist",
            "location": 588,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "py-gql-master/tests/test_schema/test_types.py": {
        "test_as_list": {
            "name": "test_as_list",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_as_non_null": {
            "name": "test_as_non_null",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_EnumType_rejects_duplicate_names": {
            "name": "test_EnumType_rejects_duplicate_names",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_EnumValue_rejects_forbidden_name": {
            "name": "test_EnumValue_rejects_forbidden_name",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "test_EnumType_get_value_ok": {
            "name": "test_EnumType_get_value_ok",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_EnumType_get_value_fail": {
            "name": "test_EnumType_get_value_fail",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_EnumType_get_name_ok": {
            "name": "test_EnumType_get_name_ok",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_EnumType_get_name_fail": {
            "name": "test_EnumType_get_name_fail",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_EnumType_from_python_enum": {
            "name": "test_EnumType_from_python_enum",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_scalar_serialization_ok": {
            "name": "test_scalar_serialization_ok",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "type_": [
                    "str",
                    "List[str]"
                ],
                "input_": [
                    "str",
                    "List[str]"
                ],
                "output": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_scalar_serialization_fail": {
            "name": "test_scalar_serialization_fail",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "type_": [
                    "str"
                ],
                "input_": [
                    "str"
                ],
                "err": [
                    "str",
                    "bool",
                    "Tuple[str, Any]"
                ]
            }
        },
        "TestUUID.test_parse_string": {
            "name": "test_parse_string",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUUID.test_serialize": {
            "name": "test_serialize",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUUID.test_parse_invalid": {
            "name": "test_parse_invalid",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUUID.test_serialize_invalid": {
            "name": "test_serialize_invalid",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegexType.test_accepts_string": {
            "name": "test_accepts_string",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegexType.test_accepts_compiled_regex": {
            "name": "test_accepts_compiled_regex",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegexType.test_parse_fail": {
            "name": "test_parse_fail",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegexType.test_parse_literal_ok": {
            "name": "test_parse_literal_ok",
            "location": 204,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegexType.test_parse_literal_fail": {
            "name": "test_parse_literal_fail",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRegexType.test_parse_literal_non_string": {
            "name": "test_parse_literal_non_string",
            "location": 216,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "py-gql-master/tests/test_schema/test_type_comparators.py": {
        "test_references_are_equal": {
            "name": "test_references_are_equal",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_int_and_float_are_not_equal": {
            "name": "test_int_and_float_are_not_equal",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lists_of_same_type_are_equal": {
            "name": "test_lists_of_same_type_are_equal",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lists_is_not_equal_to_item": {
            "name": "test_lists_is_not_equal_to_item",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_non_null_of_same_type_are_equal": {
            "name": "test_non_null_of_same_type_are_equal",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_non_null_is_not_equal_to_nullable": {
            "name": "test_non_null_is_not_equal_to_nullable",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_non_null_is_not_equal_to_list": {
            "name": "test_non_null_is_not_equal_to_list",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_same_referaence_is_subtype": {
            "name": "test_same_referaence_is_subtype",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_int_is_not_subtype_of_float": {
            "name": "test_int_is_not_subtype_of_float",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_non_null_is_subtype_of_nullable": {
            "name": "test_non_null_is_subtype_of_nullable",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_nullable_is_not_subtype_of_non_null": {
            "name": "test_nullable_is_not_subtype_of_non_null",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_item_is_not_subtype_of_list": {
            "name": "test_item_is_not_subtype_of_list",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_list_is_not_subtype_of_item": {
            "name": "test_list_is_not_subtype_of_item",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_list_of_non_null_is_subtype_of_list_of_nullable": {
            "name": "test_list_of_non_null_is_subtype_of_list_of_nullable",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_member_is_subtype_of_union": {
            "name": "test_member_is_subtype_of_union",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_not_member_is_not_subtype_of_union": {
            "name": "test_not_member_is_not_subtype_of_union",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_implementation_is_subtype_of_interface": {
            "name": "test_implementation_is_subtype_of_interface",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_not_implementation_is_not_subtype_of_interface": {
            "name": "test_not_implementation_is_not_subtype_of_interface",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_references_overlap": {
            "name": "test_references_overlap",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_int_and_float_do_not_overlap": {
            "name": "test_int_and_float_do_not_overlap",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_disjoint_unions_do_not_overlap": {
            "name": "test_disjoint_unions_do_not_overlap",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_common_unions_not_overlap": {
            "name": "test_common_unions_not_overlap",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_union_and_interface_with_common_types_overlap": {
            "name": "test_union_and_interface_with_common_types_overlap",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "py-gql-master/tests/test_schema/test_validation.py": {
        "_type_modifiers": {
            "name": "_type_modifiers",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "t": [
                    "GraphQLType",
                    "Optional[str]"
                ]
            }
        },
        "_with_modifiers": {
            "name": "_with_modifiers",
            "location": 58,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "types": [
                    "str",
                    "Iterable[str]",
                    "dict"
                ]
            }
        },
        "_single_type_schema": {
            "name": "_single_type_schema",
            "location": 76,
            "return": [],
            "arguments": {
                "type_": [
                    "str",
                    "Type"
                ],
                "fieldname": [
                    "str",
                    "Type"
                ]
            }
        },
        "test_query_type_is_an_object_type": {
            "name": "test_query_type_is_an_object_type",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_query_and_mutation_types_are_object_types": {
            "name": "test_query_and_mutation_types_are_object_types",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_query_and_subscription_types_are_object_types": {
            "name": "test_query_and_subscription_types_are_object_types",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_reject_non_object_query_type": {
            "name": "test_reject_non_object_query_type",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_reject_non_object_mutation_type": {
            "name": "test_reject_non_object_mutation_type",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_reject_non_object_subscription_type": {
            "name": "test_reject_non_object_subscription_type",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_reject_incorrectly_typed_directives": {
            "name": "test_reject_incorrectly_typed_directives",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_accept_object_type_with_fields_object": {
            "name": "test_accept_object_type_with_fields_object",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_reject_object_without_fields": {
            "name": "test_reject_object_without_fields",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_reject_object_with_incorrectly_named_fields": {
            "name": "test_reject_object_with_incorrectly_named_fields",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_reject_incorrectly_named_type": {
            "name": "test_reject_incorrectly_named_type",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_accept_field_args_with_correct_names": {
            "name": "test_accept_field_args_with_correct_names",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_reject_field_args_with_incorrect_names": {
            "name": "test_reject_field_args_with_incorrect_names",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_accept_union_type_with_valid_members": {
            "name": "test_accept_union_type_with_valid_members",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_reject_union_type_with_no_member": {
            "name": "test_reject_union_type_with_no_member",
            "location": 213,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_reject_union_type_with_duplicate_members": {
            "name": "test_reject_union_type_with_duplicate_members",
            "location": 225,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_reject_union_type_with_non_object_members": {
            "name": "test_reject_union_type_with_non_object_members",
            "location": 237,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_accept_input_type": {
            "name": "test_accept_input_type",
            "location": 250,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_reject_input_type_with_no_fields": {
            "name": "test_reject_input_type_with_no_fields",
            "location": 260,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_reject_input_type_with_incorectly_typed_fields": {
            "name": "test_reject_input_type_with_incorectly_typed_fields",
            "location": 276,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_reject_enum_type_with_no_values": {
            "name": "test_reject_enum_type_with_no_values",
            "location": 293,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_reject_enum_value_with_incorrect_name": {
            "name": "test_reject_enum_value_with_incorrect_name",
            "location": 303,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_accept_output_type_as_object_fields": {
            "name": "test_accept_output_type_as_object_fields",
            "location": 312,
            "return": [
                ""
            ],
            "arguments": {
                "type_": [
                    "str"
                ]
            }
        },
        "test_reject_non_output_type_as_object_fields": {
            "name": "test_reject_non_output_type_as_object_fields",
            "location": 320,
            "return": [
                ""
            ],
            "arguments": {
                "type_": [
                    "str"
                ]
            }
        },
        "test_reject_object_implementing_same_interface_twice": {
            "name": "test_reject_object_implementing_same_interface_twice",
            "location": 330,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_accept_interface_fields_with_output_type": {
            "name": "test_accept_interface_fields_with_output_type",
            "location": 348,
            "return": [
                ""
            ],
            "arguments": {
                "type_": [
                    "str",
                    "dict",
                    "type",
                    "Union[str, List]"
                ]
            }
        },
        "test_reject_interface_fields_with_non_output_type": {
            "name": "test_reject_interface_fields_with_non_output_type",
            "location": 357,
            "return": [
                ""
            ],
            "arguments": {
                "type_": [
                    "str",
                    "Type"
                ]
            }
        },
        "test_reject_interface_with_no_field": {
            "name": "test_reject_interface_with_no_field",
            "location": 369,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_accept_argument_with_input_type": {
            "name": "test_accept_argument_with_input_type",
            "location": 381,
            "return": [
                ""
            ],
            "arguments": {
                "type_": [
                    "Type[Any]",
                    "Sequence[Any]",
                    "bool",
                    "Union[str, List[str]]"
                ]
            }
        },
        "test_reject_argument_with_non_input_type": {
            "name": "test_reject_argument_with_non_input_type",
            "location": 393,
            "return": [
                ""
            ],
            "arguments": {
                "type_": [
                    "Optional[str]",
                    "Type[Any]",
                    "str",
                    "Union[str, List[str]]"
                ]
            }
        },
        "test_accept_input_object_with_input_type": {
            "name": "test_accept_input_object_with_input_type",
            "location": 409,
            "return": [
                ""
            ],
            "arguments": {
                "type_": [
                    "Union[str, List[str]]",
                    "Sequence[Any]",
                    "Type"
                ]
            }
        },
        "test_reject_input_object_with_non_input_type": {
            "name": "test_reject_input_object_with_non_input_type",
            "location": 435,
            "return": [
                ""
            ],
            "arguments": {
                "type_": [
                    "Optional[str]",
                    "Type[Any]",
                    "str",
                    "Union[str, List[str]]"
                ]
            }
        },
        "test_reject_input_object_with_no_field": {
            "name": "test_reject_input_object_with_no_field",
            "location": 464,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_accept_object_which_implements_interface": {
            "name": "test_accept_object_which_implements_interface",
            "location": 477,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_accept_object_which_implements_interface_along_with_more_fields": {
            "name": "test_accept_object_which_implements_interface_along_with_more_fields",
            "location": 486,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_accept_object_which_implements_interface_along_with_nullable_args": {
            "name": "test_accept_object_which_implements_interface_along_with_nullable_args",
            "location": 497,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_reject_object_missing_interface_field": {
            "name": "test_reject_object_missing_interface_field",
            "location": 508,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_reject_object_with_incorrectly_typed_interface_field": {
            "name": "test_reject_object_with_incorrectly_typed_interface_field",
            "location": 523,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_accept_object_fields_with_interface_subtype_of_interface_field": {
            "name": "test_accept_object_fields_with_interface_subtype_of_interface_field",
            "location": 536,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_accept_object_fields_with_union_subtype_of_interface_field": {
            "name": "test_accept_object_fields_with_union_subtype_of_interface_field",
            "location": 547,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_reject_object_fields_with_missing_interface_argument": {
            "name": "test_reject_object_fields_with_missing_interface_argument",
            "location": 555,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_reject_object_fields_with_incorrectly_typed_interface_argument": {
            "name": "test_reject_object_fields_with_incorrectly_typed_interface_argument",
            "location": 570,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_reject_object_which_implements_interface_along_with_required_args": {
            "name": "test_reject_object_which_implements_interface_along_with_required_args",
            "location": 587,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_accept_object_with_list_interface_list_field": {
            "name": "test_accept_object_with_list_interface_list_field",
            "location": 605,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_accept_object_with_non_list_interface_list_field": {
            "name": "test_accept_object_with_non_list_interface_list_field",
            "location": 615,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_accept_object_with_list_interface_non_list_field": {
            "name": "test_accept_object_with_list_interface_non_list_field",
            "location": 629,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_accept_object_with_non_null_interface_null_field": {
            "name": "test_accept_object_with_non_null_interface_null_field",
            "location": 645,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_reject_object_with_null_interface_non_null_field": {
            "name": "test_reject_object_with_null_interface_non_null_field",
            "location": 655,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_starwars_schema_is_valid": {
            "name": "test_starwars_schema_is_valid",
            "location": 669,
            "return": [
                ""
            ],
            "arguments": {
                "starwars_schema": []
            }
        },
        "test_github_schema_is_valid": {
            "name": "test_github_schema_is_valid",
            "location": 673,
            "return": [
                ""
            ],
            "arguments": {
                "github_schema": []
            }
        },
        "test_collects_multiple_errors": {
            "name": "test_collects_multiple_errors",
            "location": 677,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestResolverValidation.schema": {
            "name": "schema",
            "location": 711,
            "return": [
                "bool",
                "int",
                "List[Dict[str, Any]]",
                "Optional[Dict[str, str]]",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolverValidation.test_ok": {
            "name": "test_ok",
            "location": 729,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "str",
                    "float"
                ]
            }
        },
        "TestResolverValidation.test_reject_missing_parameter": {
            "name": "test_reject_missing_parameter",
            "location": 736,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": []
            }
        },
        "TestResolverValidation.test_reject_missing_default_value": {
            "name": "test_reject_missing_default_value",
            "location": 752,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": []
            }
        },
        "TestResolverValidation.test_reject_extra_keyword_without_default": {
            "name": "test_reject_extra_keyword_without_default",
            "location": 767,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "dict"
                ]
            }
        },
        "TestResolverValidation.test_accept_extra_keyword_with_default": {
            "name": "test_accept_extra_keyword_with_default",
            "location": 782,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "dict"
                ]
            }
        },
        "TestResolverValidation.test_reject_missing_positional": {
            "name": "test_reject_missing_positional",
            "location": 789,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "str",
                    "float"
                ]
            }
        },
        "TestResolverValidation.test_reject_extra_positional": {
            "name": "test_reject_extra_positional",
            "location": 804,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "str",
                    "float"
                ]
            }
        },
        "TestResolverValidation.test_accept_extra_positional_with_default": {
            "name": "test_accept_extra_positional_with_default",
            "location": 819,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "dict"
                ]
            }
        },
        "TestResolverValidation.test_accept_variable_keyword_args": {
            "name": "test_accept_variable_keyword_args",
            "location": 826,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "str"
                ]
            }
        },
        "TestResolverValidation.test_accept_partial_variable_keyword_args": {
            "name": "test_accept_partial_variable_keyword_args",
            "location": 833,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "dict"
                ]
            }
        },
        "TestResolverValidation.test_accept_reject_invalid_with_variable_keyword_args": {
            "name": "test_accept_reject_invalid_with_variable_keyword_args",
            "location": 840,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "dict"
                ]
            }
        },
        "TestResolverValidation.test_accept_callable_object": {
            "name": "test_accept_callable_object",
            "location": 857,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": []
            }
        },
        "TestResolverValidation.test_reject_bad_type_default_resolver": {
            "name": "test_reject_bad_type_default_resolver",
            "location": 866,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": []
            }
        },
        "TestResolverValidation.test_accept_generic_type_default_resolver": {
            "name": "test_accept_generic_type_default_resolver",
            "location": 874,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": []
            }
        },
        "TestResolverValidation.test_reject_bad_global_default_resolver": {
            "name": "test_reject_bad_global_default_resolver",
            "location": 881,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "float"
                ]
            }
        },
        "TestResolverValidation.test_accept_generic_global_default_resolver": {
            "name": "test_accept_generic_global_default_resolver",
            "location": 890,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "float"
                ]
            }
        },
        "TestResolverValidation.test_ok.resolver": {
            "name": "resolver",
            "location": 731,
            "return": [],
            "arguments": {
                "root": [],
                "ctx": [],
                "info": [],
                "b": [],
                "c": [],
                "a": []
            }
        },
        "TestResolverValidation.test_reject_missing_parameter.resolver": {
            "name": "resolver",
            "location": 738,
            "return": [],
            "arguments": {
                "root": [],
                "ctx": [],
                "info": []
            }
        },
        "TestResolverValidation.test_reject_missing_default_value.resolver": {
            "name": "resolver",
            "location": 754,
            "return": [],
            "arguments": {
                "root": [],
                "ctx": [],
                "info": []
            }
        },
        "TestResolverValidation.test_reject_extra_keyword_without_default.resolver": {
            "name": "resolver",
            "location": 769,
            "return": [],
            "arguments": {
                "root": [],
                "ctx": [],
                "info": []
            }
        },
        "TestResolverValidation.test_accept_extra_keyword_with_default.resolver": {
            "name": "resolver",
            "location": 784,
            "return": [],
            "arguments": {
                "root": [],
                "ctx": [],
                "info": []
            }
        },
        "TestResolverValidation.test_reject_missing_positional.resolver": {
            "name": "resolver",
            "location": 791,
            "return": [],
            "arguments": {}
        },
        "TestResolverValidation.test_reject_extra_positional.resolver": {
            "name": "resolver",
            "location": 806,
            "return": [],
            "arguments": {
                "root": [],
                "ctx": [],
                "info": [],
                "bar": []
            }
        },
        "TestResolverValidation.test_accept_extra_positional_with_default.resolver": {
            "name": "resolver",
            "location": 821,
            "return": [],
            "arguments": {
                "root": [],
                "ctx": [],
                "info": [],
                "d": []
            }
        },
        "TestResolverValidation.test_accept_variable_keyword_args.resolver": {
            "name": "resolver",
            "location": 828,
            "return": [],
            "arguments": {
                "root": [],
                "ctx": [],
                "info": []
            }
        },
        "TestResolverValidation.test_accept_partial_variable_keyword_args.resolver": {
            "name": "resolver",
            "location": 835,
            "return": [],
            "arguments": {
                "root": [],
                "ctx": [],
                "info": [],
                "b": [],
                "c": []
            }
        },
        "TestResolverValidation.test_accept_reject_invalid_with_variable_keyword_args.resolver": {
            "name": "resolver",
            "location": 844,
            "return": [
                ""
            ],
            "arguments": {
                "root": [
                    "bool",
                    "str",
                    "int"
                ],
                "ctx": [
                    "bool",
                    "str",
                    "int"
                ],
                "info": [
                    "bool",
                    "str",
                    "int"
                ],
                "a": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "TestResolverValidation.test_reject_bad_type_default_resolver.default_resolver": {
            "name": "default_resolver",
            "location": 868,
            "return": [],
            "arguments": {
                "root": [],
                "info": [],
                "ctx": []
            }
        },
        "TestResolverValidation.test_accept_generic_type_default_resolver.default_resolver": {
            "name": "default_resolver",
            "location": 876,
            "return": [],
            "arguments": {
                "root": [],
                "info": [],
                "ctx": []
            }
        },
        "TestResolverValidation.test_reject_bad_global_default_resolver.default_resolver": {
            "name": "default_resolver",
            "location": 882,
            "return": [],
            "arguments": {
                "root": [],
                "info": [],
                "ctx": []
            }
        },
        "TestResolverValidation.test_accept_generic_global_default_resolver.default_resolver": {
            "name": "default_resolver",
            "location": 893,
            "return": [
                ""
            ],
            "arguments": {
                "root": [
                    "List[int]"
                ],
                "info": [
                    "List[int]"
                ],
                "ctx": [
                    "List[int]"
                ]
            }
        },
        "TestResolverValidation.test_accept_callable_object.Resolver.__call__": {
            "name": "__call__",
            "location": 859,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "root": [
                    "bool",
                    "str",
                    "List[str]",
                    "List[List[str]]",
                    "int"
                ],
                "ctx": [
                    "bool",
                    "str",
                    "List[str]",
                    "List[List[str]]",
                    "int"
                ],
                "info": [
                    "bool",
                    "str",
                    "List[str]",
                    "List[List[str]]",
                    "int"
                ],
                "b": [
                    "bool",
                    "str",
                    "List[str]",
                    "List[List[str]]",
                    "int"
                ],
                "c": [
                    "bool",
                    "str",
                    "List[str]",
                    "List[List[str]]",
                    "int"
                ],
                "a": [
                    "bool",
                    "str",
                    "List[str]",
                    "List[List[str]]",
                    "int"
                ]
            }
        }
    },
    "py-gql-master/tests/test_schema/test_visibility_schema_transform.py": {
        "schema": {
            "name": "schema",
            "location": 11,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "_hide_type_transform": {
            "name": "_hide_type_transform",
            "location": 50,
            "return": [],
            "arguments": {
                "target": [
                    "type",
                    "bool"
                ]
            }
        },
        "_sdl": {
            "name": "_sdl",
            "location": 58,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "s": [
                    "str",
                    "set",
                    "Optional[str]"
                ]
            }
        },
        "test_hides_object": {
            "name": "test_hides_object",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_hides_interface": {
            "name": "test_hides_interface",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_hides_union": {
            "name": "test_hides_union",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_hides_enum": {
            "name": "test_hides_enum",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_hides_custom_scalar": {
            "name": "test_hides_custom_scalar",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_does_not_hide_specified_scalar": {
            "name": "test_does_not_hide_specified_scalar",
            "location": 251,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_hides_directive": {
            "name": "test_hides_directive",
            "location": 257,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "float"
                ]
            }
        },
        "test_hides_input_type_field": {
            "name": "test_hides_input_type_field",
            "location": 301,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_hide_type_transform.HideType.is_type_visible": {
            "name": "is_type_visible",
            "location": 52,
            "return": [
                "str",
                "List[str]",
                "type"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict"
                ]
            }
        },
        "test_hides_directive.HideDirective.is_directive_visible": {
            "name": "is_directive_visible",
            "location": 259,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_hides_input_type_field.HideInputField.is_input_field_visible": {
            "name": "is_input_field_visible",
            "location": 321,
            "return": [
                "type",
                "str",
                "Callable",
                "List[Callable]"
            ],
            "arguments": {
                "self": [],
                "typename": [
                    "str"
                ],
                "fieldname": [
                    "str"
                ]
            }
        }
    },
    "py-gql-master/tests/test_schema/__init__.py": {},
    "py-gql-master/tests/test_sdl/test_build_schema.py": {
        "_check": {
            "name": "_check",
            "location": 13,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "schema": [
                    "int",
                    "schema.Schema",
                    "bool",
                    "T"
                ]
            }
        },
        "test_built_schema_is_executable": {
            "name": "test_built_schema_is_executable",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_accepts_strings": {
            "name": "test_accepts_strings",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_simple_type": {
            "name": "test_simple_type",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_with_directive": {
            "name": "test_with_directive",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_descriptions_supports": {
            "name": "test_descriptions_supports",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_specified_directives_are_enforced": {
            "name": "test_specified_directives_are_enforced",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_type_modifiers": {
            "name": "test_type_modifiers",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_recursive_type": {
            "name": "test_recursive_type",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_circular_types": {
            "name": "test_circular_types",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_single_argument_field": {
            "name": "test_single_argument_field",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_multiple_arguments": {
            "name": "test_multiple_arguments",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_simple_interface": {
            "name": "test_simple_interface",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_simple_output_enum": {
            "name": "test_simple_output_enum",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_simple_input_enum": {
            "name": "test_simple_input_enum",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_multiple_values_enum": {
            "name": "test_multiple_values_enum",
            "location": 221,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_union": {
            "name": "test_union",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_executing_union_default_resolve_type": {
            "name": "test_executing_union_default_resolve_type",
            "location": 256,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_executing_interface_default_resolve_type": {
            "name": "test_executing_interface_default_resolve_type",
            "location": 300,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_custom_scalar": {
            "name": "test_custom_scalar",
            "location": 362,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_input_object": {
            "name": "test_input_object",
            "location": 377,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_input_object_with_default_value": {
            "name": "test_input_object_with_default_value",
            "location": 391,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_simple_argument_field_with_default": {
            "name": "test_simple_argument_field_with_default",
            "location": 405,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_custom_scalar_argument_field_with_default": {
            "name": "test_custom_scalar_argument_field_with_default",
            "location": 415,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_simple_type_with_mutation": {
            "name": "test_simple_type_with_mutation",
            "location": 427,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_simple_type_with_subscription": {
            "name": "test_simple_type_with_subscription",
            "location": 448,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_unreferenced_type_implementing_referenced_interface": {
            "name": "test_unreferenced_type_implementing_referenced_interface",
            "location": 469,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_unreferenced_type_implementing_referenced_union": {
            "name": "test_unreferenced_type_implementing_referenced_union",
            "location": 487,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_supports_deprecated": {
            "name": "test_supports_deprecated",
            "location": 503,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_root_operation_types_with_custom_names": {
            "name": "test_root_operation_types_with_custom_names",
            "location": 521,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_default_root_operation_type_names": {
            "name": "test_default_root_operation_type_names",
            "location": 540,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_allows_only_a_single_schema_definition": {
            "name": "test_allows_only_a_single_schema_definition",
            "location": 554,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_allows_only_a_single_query_type": {
            "name": "test_allows_only_a_single_query_type",
            "location": 577,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_allows_only_a_single_mutation_type": {
            "name": "test_allows_only_a_single_mutation_type",
            "location": 601,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_allows_only_a_single_subscription_type": {
            "name": "test_allows_only_a_single_subscription_type",
            "location": 626,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_unknown_type_referenced": {
            "name": "test_unknown_type_referenced",
            "location": 651,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_unknown_type_in_interface_list": {
            "name": "test_unknown_type_in_interface_list",
            "location": 670,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_unknown_type_in_union_list": {
            "name": "test_unknown_type_in_union_list",
            "location": 679,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_unknown_query_type": {
            "name": "test_unknown_query_type",
            "location": 693,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_unknown_mutation_type": {
            "name": "test_unknown_mutation_type",
            "location": 712,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_unknown_subscription_type": {
            "name": "test_unknown_subscription_type",
            "location": 732,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_does_not_consider_operation_names_or_fragment_name": {
            "name": "test_does_not_consider_operation_names_or_fragment_name",
            "location": 752,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_forbids_duplicate_type_definitions": {
            "name": "test_forbids_duplicate_type_definitions",
            "location": 771,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_forbids_duplicate_directive_definition": {
            "name": "test_forbids_duplicate_directive_definition",
            "location": 794,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_inject_custom_types": {
            "name": "test_inject_custom_types",
            "location": 812,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_build_schema_ignores_extensions_if_specified": {
            "name": "test_build_schema_ignores_extensions_if_specified",
            "location": 824,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_build_github_schema": {
            "name": "test_build_github_schema",
            "location": 852,
            "return": [
                ""
            ],
            "arguments": {
                "fixture_file": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "py-gql-master/tests/test_sdl/test_build_schema_with_directives.py": {
        "wrap_resolver": {
            "name": "wrap_resolver",
            "location": 27,
            "return": [
                "bool",
                "str",
                "schema.Argument"
            ],
            "arguments": {
                "field_def": [
                    "str",
                    "Optional[Any]",
                    "type",
                    "dict"
                ],
                "func": [
                    "str",
                    "bool",
                    "Iterable[Dict[str, Any]]"
                ]
            }
        },
        "test_simple_field_modifier": {
            "name": "test_simple_field_modifier",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_directive_on_wrong_location": {
            "name": "test_directive_on_wrong_location",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ignores_specified_directives": {
            "name": "test_ignores_specified_directives",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_field_modifier_using_arguments": {
            "name": "test_field_modifier_using_arguments",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_object_modifier_and_field_modifier": {
            "name": "test_object_modifier_and_field_modifier",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_missing_definition": {
            "name": "test_missing_definition",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_missing_definition_and_impl": {
            "name": "test_missing_definition_and_impl",
            "location": 262,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_multiple_directives_applied_in_order": {
            "name": "test_multiple_directives_applied_in_order",
            "location": 282,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_input_values": {
            "name": "test_input_values",
            "location": 319,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_enum_value_directive": {
            "name": "test_enum_value_directive",
            "location": 458,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_enum_type_directive": {
            "name": "test_enum_type_directive",
            "location": 498,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_schema_extension_duplicate_directive": {
            "name": "test_schema_extension_duplicate_directive",
            "location": 549,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "wrap_resolver.wrapped": {
            "name": "wrapped",
            "location": 31,
            "return": [
                "int",
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "parent_value": [
                    "bool",
                    "str",
                    "ClassVar",
                    "dict"
                ],
                "context": [
                    "bool",
                    "str",
                    "ClassVar",
                    "dict"
                ],
                "info": [
                    "bool",
                    "str",
                    "ClassVar",
                    "dict"
                ]
            }
        },
        "test_simple_field_modifier.UppercaseDirective.on_field": {
            "name": "on_field",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "field_definition": []
            }
        },
        "test_directive_on_wrong_location.UppercaseDirective.on_field": {
            "name": "on_field",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "field_definition": []
            }
        },
        "test_ignores_specified_directives.UppercaseDirective.on_field": {
            "name": "on_field",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "field_definition": []
            }
        },
        "test_field_modifier_using_arguments.PowerDirective.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "test_field_modifier_using_arguments.PowerDirective.on_field": {
            "name": "on_field",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "field_definition": []
            }
        },
        "test_object_modifier_and_field_modifier.UppercaseDirective.on_field": {
            "name": "on_field",
            "location": 152,
            "return": [
                "int",
                "List[str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "field_definition": [
                    "str",
                    "Collection[int]",
                    "Type[T]",
                    "Field",
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_object_modifier_and_field_modifier.UniqueIDDirective.__init__": {
            "name": "__init__",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "test_object_modifier_and_field_modifier.UniqueIDDirective.resolve": {
            "name": "resolve",
            "location": 163,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "str"
                ]
            }
        },
        "test_object_modifier_and_field_modifier.UniqueIDDirective.on_object": {
            "name": "on_object",
            "location": 169,
            "return": [
                "Optional[str]",
                "Sequence[Any]"
            ],
            "arguments": {
                "self": [],
                "object_definition": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_multiple_directives_applied_in_order.PowerDirective.__init__": {
            "name": "__init__",
            "location": 286,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "test_multiple_directives_applied_in_order.PowerDirective.on_field": {
            "name": "on_field",
            "location": 289,
            "return": [
                "int",
                "List[str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "field_definition": [
                    "str",
                    "Collection[int]",
                    "Type[T]",
                    "Field",
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_multiple_directives_applied_in_order.PlusOneDirective.on_field": {
            "name": "on_field",
            "location": 295,
            "return": [
                "int",
                "List[str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "field_definition": [
                    "str",
                    "Type[T]",
                    "FrozenSet[int]",
                    "Callable[[T], None]"
                ]
            }
        },
        "test_input_values.LimitedLengthScalarType.wrap": {
            "name": "wrap",
            "location": 322,
            "return": [
                "type"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Set[str]",
                    "List[str]"
                ],
                "type_": [
                    "Optional[types.ObjectType]",
                    "str",
                    "int",
                    "Type",
                    "Counter"
                ]
            }
        },
        "test_input_values.LimitedLengthScalarType.__init__": {
            "name": "__init__",
            "location": 327,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type": [
                    "str",
                    "Optional[str]",
                    "Optional[types.ObjectType]"
                ],
                "min": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "max": [
                    "str",
                    "Optional[List[str]]",
                    "Dict[str, Any]",
                    "Optional[Sequence[int]]"
                ]
            }
        },
        "test_input_values.LimitedLengthScalarType.serialize": {
            "name": "serialize",
            "location": 336,
            "return": [
                "str",
                "bool",
                "float",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str, bytes]"
                ]
            }
        },
        "test_input_values.LimitedLengthScalarType.parse": {
            "name": "parse",
            "location": 339,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Sequence[Any]",
                    "Sequence[str]",
                    "List[str]"
                ]
            }
        },
        "test_input_values.LimitedLengthDirective.__init__": {
            "name": "__init__",
            "location": 353,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "test_input_values.LimitedLengthDirective.on_argument": {
            "name": "on_argument",
            "location": 357,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "tuple"
                ]
            }
        },
        "test_input_values.LimitedLengthDirective.on_input_field": {
            "name": "on_input_field",
            "location": 363,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "input_field": [
                    "Field",
                    "List[Callable]"
                ]
            }
        },
        "test_input_values.Root.__init__": {
            "name": "__init__",
            "location": 404,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "resolver": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "test_input_values.Root.foo": {
            "name": "foo",
            "location": 407,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "info": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_enum_value_directive.CSSColorDirective.on_enum_value": {
            "name": "on_enum_value",
            "location": 466,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "enum_value": [
                    "dict"
                ]
            }
        },
        "test_enum_type_directive.GeneratedEnum.on_enum": {
            "name": "on_enum",
            "location": 505,
            "return": [
                "Type",
                "str",
                "Sequence[Any]",
                "int",
                "Tuple[str, str]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "enum": [
                    "Optional[Union[str, Any, Any, Any]]",
                    "int",
                    "Dict[str, Set[str]]",
                    "dict"
                ]
            }
        },
        "test_schema_extension_duplicate_directive.OnSchema.on_schema": {
            "name": "on_schema",
            "location": 553,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "py-gql-master/tests/test_sdl/test_build_schema_with_extensions.py": {
        "test_object_type_extension": {
            "name": "test_object_type_extension",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_injected_object_type_extension": {
            "name": "test_injected_object_type_extension",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_object_type_extension_duplicate_field": {
            "name": "test_object_type_extension_duplicate_field",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_object_type_extension_already_implemented_interface": {
            "name": "test_object_type_extension_already_implemented_interface",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_object_type_extension_bad_extension": {
            "name": "test_object_type_extension_bad_extension",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_interface_type_extension": {
            "name": "test_interface_type_extension",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_interface_type_extension_duplicate_field": {
            "name": "test_interface_type_extension_duplicate_field",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_interface_type_extension_bad_extension": {
            "name": "test_interface_type_extension_bad_extension",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_enum_extension": {
            "name": "test_enum_extension",
            "location": 216,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_enum_extension_duplicate_value": {
            "name": "test_enum_extension_duplicate_value",
            "location": 252,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_enum_extension_bad_extension": {
            "name": "test_enum_extension_bad_extension",
            "location": 278,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_input_object_type_extension": {
            "name": "test_input_object_type_extension",
            "location": 305,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_input_object_type_extension_duplicate_field": {
            "name": "test_input_object_type_extension_duplicate_field",
            "location": 337,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_input_object_type_extension_bad_extension": {
            "name": "test_input_object_type_extension_bad_extension",
            "location": 352,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_union_type_extension": {
            "name": "test_union_type_extension",
            "location": 370,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_union_type_extension_duplicate_type": {
            "name": "test_union_type_extension_duplicate_type",
            "location": 411,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_union_type_extension_bad_extension": {
            "name": "test_union_type_extension_bad_extension",
            "location": 441,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_scalar_type_extension": {
            "name": "test_scalar_type_extension",
            "location": 474,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_injected_scalar_type_extension": {
            "name": "test_injected_scalar_type_extension",
            "location": 519,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_does_not_extend_specified_scalar": {
            "name": "test_does_not_extend_specified_scalar",
            "location": 567,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_schema_extension": {
            "name": "test_schema_extension",
            "location": 591,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_schema_extension_directive": {
            "name": "test_schema_extension_directive",
            "location": 610,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_mixed_definition_and_extension": {
            "name": "test_mixed_definition_and_extension",
            "location": 627,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_scalar_type_extension.ProtectedDirective.visit_scalar": {
            "name": "visit_scalar",
            "location": 478,
            "return": [],
            "arguments": {
                "self": [],
                "scalar_type": []
            }
        },
        "test_injected_scalar_type_extension.ProtectedDirective.visit_scalar": {
            "name": "visit_scalar",
            "location": 523,
            "return": [],
            "arguments": {
                "self": [],
                "scalar_type": []
            }
        }
    },
    "py-gql-master/tests/test_sdl/test_extend_schema.py": {
        "test_noop_without_extension_nodes": {
            "name": "test_noop_without_extension_nodes",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_raises_on_schema_definition_in_strict_mode": {
            "name": "test_raises_on_schema_definition_in_strict_mode",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_raises_on_known_type_in_strict_mode": {
            "name": "test_raises_on_known_type_in_strict_mode",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ignores_known_type_in_non_strict_mode": {
            "name": "test_ignores_known_type_in_non_strict_mode",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_raises_on_known_directive_in_strict_mode": {
            "name": "test_raises_on_known_directive_in_strict_mode",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ignores_known_directive_in_non_strict_mode": {
            "name": "test_ignores_known_directive_in_non_strict_mode",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ignore_errors_in_non_strict_mode": {
            "name": "test_ignore_errors_in_non_strict_mode",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_raises_on_unknown_type_in_strict_mode": {
            "name": "test_raises_on_unknown_type_in_strict_mode",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ignores_unknown_type_in_non_strict_mode": {
            "name": "test_ignores_unknown_type_in_non_strict_mode",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_adds_new_type_definitions_and_opeations_to_schema": {
            "name": "test_it_adds_new_type_definitions_and_opeations_to_schema",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_rejects_duplicate_operation": {
            "name": "test_it_rejects_duplicate_operation",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_adds_new_directives_to_schema": {
            "name": "test_it_adds_new_directives_to_schema",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_it_correctly_updates_references": {
            "name": "test_it_correctly_updates_references",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "py-gql-master/tests/test_utilities/test_ast_node_from_value.py": {
        "_custom_serialize": {
            "name": "_custom_serialize",
            "location": 27,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "test_raises_on_non_input_type": {
            "name": "test_raises_on_non_input_type",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ast_node_from_value_with_scalars": {
            "name": "test_ast_node_from_value_with_scalars",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "str"
                ],
                "input_type": [
                    "str",
                    "Optional[Any]"
                ],
                "expected": [
                    "str",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "test_ast_node_from_value_with_enums": {
            "name": "test_ast_node_from_value_with_enums",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "int",
                    "str"
                ],
                "expected": [
                    "dict",
                    "str",
                    "ClassVar"
                ]
            }
        },
        "test_ast_node_from_value_with_list_types": {
            "name": "test_ast_node_from_value_with_list_types",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "str",
                    "Optional[str]",
                    "Tuple[int, int]",
                    "int"
                ],
                "input_type": [
                    "str",
                    "type"
                ],
                "expected": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "test_ast_node_from_value_with_objects": {
            "name": "test_ast_node_from_value_with_objects",
            "location": 228,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "str",
                    "int",
                    "dict"
                ],
                "expected": [
                    "str",
                    "dict"
                ]
            }
        },
        "_Object.__repr__": {
            "name": "__repr__",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "py-gql-master/tests/test_utilities/test_ast_transforms.py": {
        "test_RemoveFieldAliasesVisitor": {
            "name": "test_RemoveFieldAliasesVisitor",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_CamelCaseToSnakeCaseVisitor": {
            "name": "test_CamelCaseToSnakeCaseVisitor",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_SnakeCaseToCamelCaseVisitor": {
            "name": "test_SnakeCaseToCamelCaseVisitor",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "py-gql-master/tests/test_utilities/test_coerce_argument_values.py": {
        "_test_node": {
            "name": "_test_node",
            "location": 20,
            "return": [
                "str",
                "py_gql.schema.Schema"
            ],
            "arguments": {
                "argument_value": [
                    "Optional[str]",
                    "bool",
                    "sqlalchemy.sql.schema.Table",
                    "str"
                ],
                "argument_name": [
                    "str"
                ]
            }
        },
        "_var": {
            "name": "_var",
            "location": 32,
            "return": [
                "str",
                "IO",
                "dict",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_missing_nullable_arg_with_default": {
            "name": "test_missing_nullable_arg_with_default",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_missing_nullable_arg_without_default": {
            "name": "test_missing_nullable_arg_without_default",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_missing_non_nullable_arg_with_default": {
            "name": "test_missing_non_nullable_arg_with_default",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_missing_non_nullable_arg_without_default": {
            "name": "test_missing_non_nullable_arg_without_default",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_provided_value": {
            "name": "test_provided_value",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_provided_invalid_value": {
            "name": "test_provided_invalid_value",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_provided_known_variable": {
            "name": "test_provided_known_variable",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_provided_unknown_variable_without_default_nullable": {
            "name": "test_provided_unknown_variable_without_default_nullable",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_provided_unknown_variable_without_default_non_nullable": {
            "name": "test_provided_unknown_variable_without_default_non_nullable",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_custom_python_name": {
            "name": "test_custom_python_name",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_custom_python_name_in_input_object": {
            "name": "test_custom_python_name_in_input_object",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "py-gql-master/tests/test_utilities/test_coerce_value.py": {
        "_test": {
            "name": "_test",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "Optional[str]",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "type_": [
                    "AbstractSet[Type[object]]",
                    "float",
                    "Sequence[T]",
                    "bytes"
                ],
                "expected_result": [
                    "Optional[Dict]",
                    "Hashable",
                    "Dict[str, Any]"
                ],
                "expected_error": [
                    "Optional[List[str]]",
                    "Dict[str, Any]",
                    "Optional[Mapping[str, Any]]",
                    "Optional[int]"
                ]
            }
        },
        "test_String_raises_on_list": {
            "name": "test_String_raises_on_list",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Int_from_int_input": {
            "name": "test_Int_from_int_input",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Int_from_int_input_1": {
            "name": "test_Int_from_int_input_1",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Int_from_negative_int_input": {
            "name": "test_Int_from_negative_int_input",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Int_from_exponent_input": {
            "name": "test_Int_from_exponent_input",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Int_from_null_value": {
            "name": "test_Int_from_null_value",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Int_raises_for_empty_value": {
            "name": "test_Int_raises_for_empty_value",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Int_raises_for_float_input": {
            "name": "test_Int_raises_for_float_input",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Int_raises_for_char_input": {
            "name": "test_Int_raises_for_char_input",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Int_raises_for_string_input": {
            "name": "test_Int_raises_for_string_input",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Float_for_int_input": {
            "name": "test_Float_for_int_input",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Float_for_exponent_input": {
            "name": "test_Float_for_exponent_input",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Float_for_float_input": {
            "name": "test_Float_for_float_input",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Float_raises_for_empty_value": {
            "name": "test_Float_raises_for_empty_value",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Float_raises_for_char_input": {
            "name": "test_Float_raises_for_char_input",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Float_raises_for_string_input": {
            "name": "test_Float_raises_for_string_input",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Enum_for_a_known_enum_names": {
            "name": "test_Enum_for_a_known_enum_names",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Enum_raises_for_misspelled_enum_value": {
            "name": "test_Enum_raises_for_misspelled_enum_value",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_Enum_raises_for_incorrect_value_type": {
            "name": "test_Enum_raises_for_incorrect_value_type",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_InputObject_for_valid_input": {
            "name": "test_InputObject_for_valid_input",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_InputObject_raises_for_non_dict_input": {
            "name": "test_InputObject_raises_for_non_dict_input",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_InputObject_raises_for_invalid_field": {
            "name": "test_InputObject_raises_for_invalid_field",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_InputObject_raises_for_missing_required_field": {
            "name": "test_InputObject_raises_for_missing_required_field",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_InputObject_raises_for_unknown_field": {
            "name": "test_InputObject_raises_for_unknown_field",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_InputObject_with_custom_python_name": {
            "name": "test_InputObject_with_custom_python_name",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ListType_for_single_valid_value": {
            "name": "test_ListType_for_single_valid_value",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ListType_for_valid_values": {
            "name": "test_ListType_for_valid_values",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ListType_raises_for_invalid_item": {
            "name": "test_ListType_raises_for_invalid_item",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ListType_raises_for_invalid_items": {
            "name": "test_ListType_raises_for_invalid_items",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_nested_error": {
            "name": "test_nested_error",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_null_non_nullable_type": {
            "name": "test_null_non_nullable_type",
            "location": 208,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "py-gql-master/tests/test_utilities/test_directive_arguments.py": {
        "test_include": {
            "name": "test_include",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_include_missing": {
            "name": "test_include_missing",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_include_extra": {
            "name": "test_include_extra",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_custom_directive_field": {
            "name": "test_custom_directive_field",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_custom_directive_field_variables": {
            "name": "test_custom_directive_field_variables",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "py-gql-master/tests/test_utilities/test_max_depth.py": {
        "case": {
            "name": "case",
            "location": 94,
            "return": [
                "int",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "starwars_schema": [
                    "str",
                    "Dict[str, Sequence[str]]"
                ],
                "doc": [
                    "str",
                    "Dict[str, Sequence[str]]"
                ],
                "kwargs": [],
                "expected_errors": []
            }
        },
        "test_errors_point_to_the_correct_operation_node": {
            "name": "test_errors_point_to_the_correct_operation_node",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "starwars_schema": [
                    "bool",
                    "Dict[str, float]"
                ]
            }
        }
    },
    "py-gql-master/tests/test_utilities/test_selected_fields.py": {
        "_first_field": {
            "name": "_first_field",
            "location": 35,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "doc": []
            }
        },
        "test_default_case": {
            "name": "test_default_case",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_example_case": {
            "name": "test_example_case",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_nesting": {
            "name": "test_nesting",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_nesting_no_maxdepth": {
            "name": "test_nesting_no_maxdepth",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_filtering": {
            "name": "test_filtering",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_skip_and_include_directives_on_fields": {
            "name": "test_skip_and_include_directives_on_fields",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "py-gql-master/tests/test_utilities/test_value_from_ast.py": {
        "TestUntyped.test_it_parses_simple_values": {
            "name": "test_it_parses_simple_values",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[str]",
                    "int",
                    "str",
                    "bytes"
                ],
                "expected": [
                    "List[str]",
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "TestUntyped.test_it_parses_list_values": {
            "name": "test_it_parses_list_values",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "str",
                    "List[str]",
                    "bytes",
                    "Type"
                ],
                "expected": [
                    "int",
                    "str",
                    "List[str]",
                    "bytes",
                    "Type"
                ]
            }
        },
        "TestUntyped.test_it_parses_input_objects": {
            "name": "test_it_parses_input_objects",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Callable",
                    "List[str]",
                    "str",
                    "list",
                    "float"
                ],
                "expected": [
                    "int",
                    "Callable",
                    "List[str]",
                    "str",
                    "list",
                    "float"
                ]
            }
        },
        "TestUntyped.test_it_parses_enum_values_as_plain_strings": {
            "name": "test_it_parses_enum_values_as_plain_strings",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "List[str]",
                    "str",
                    "bytes"
                ],
                "expected": [
                    "int",
                    "List[str]",
                    "str",
                    "bytes"
                ]
            }
        },
        "TestUntyped.test_it_parses_variables": {
            "name": "test_it_parses_variables",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict[str, Any]",
                    "Sequence[int]",
                    "Type"
                ],
                "variables": [
                    "Dict[str, Any]",
                    "Sequence[int]",
                    "Type"
                ],
                "expected": [
                    "Dict[str, Any]",
                    "Sequence[int]",
                    "Type"
                ]
            }
        },
        "TestUntyped.test_it_raises_on_unknown_variables": {
            "name": "test_it_raises_on_unknown_variables",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTyped._run_test_case": {
            "name": "_run_test_case",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]",
                    "List[\"Block\"]",
                    "bool"
                ],
                "type_": [
                    "str",
                    "Optional[str]",
                    "List[\"Block\"]",
                    "bool"
                ],
                "expected": [
                    "Optional[Callable]",
                    "str",
                    "Mapping",
                    "bool"
                ],
                "error": [
                    "Sequence[str]",
                    "Optional[int]"
                ],
                "variables": [
                    "str",
                    "Optional[str]",
                    "List[\"Block\"]",
                    "bool"
                ]
            }
        },
        "TestTyped.test_it_converts_according_to_input_coercion_rules": {
            "name": "test_it_converts_according_to_input_coercion_rules",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "Callable[..., None]"
                ],
                "value": [
                    "Callable[..., None]"
                ],
                "expected": [
                    "Callable[..., None]"
                ]
            }
        },
        "TestTyped.test_it_does_not_convert_when_input_coercion_rules_reject_a_value": {
            "name": "test_it_does_not_convert_when_input_coercion_rules_reject_a_value",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "Optional[str]",
                    "Optional[type]",
                    "Dict[str, Any]",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Type",
                    "str"
                ],
                "value": [
                    "Optional[str]",
                    "Optional[type]",
                    "Dict[str, Any]",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Type",
                    "str"
                ]
            }
        },
        "TestTyped.test_it_converts_enum_values_according_to_input_coercion_rules": {
            "name": "test_it_converts_enum_values_according_to_input_coercion_rules",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[Dict[Hashable, Any]]",
                    "Optional[str]",
                    "bool"
                ],
                "expected": [
                    "str",
                    "Optional[Dict[Hashable, Any]]",
                    "Optional[str]",
                    "bool"
                ],
                "error": [
                    "str",
                    "Optional[Dict[Hashable, Any]]",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "TestTyped.test_it_coerces_nullable_to_none": {
            "name": "test_it_coerces_nullable_to_none",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTyped.test_it_raises_on_non_nullable_null": {
            "name": "test_it_raises_on_non_nullable_null",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTyped.test_it_coerces_lists_of_values": {
            "name": "test_it_coerces_lists_of_values",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "Callable[..., None]",
                    "Optional[Callable[[], mypy.types.Instance]]",
                    "AbstractSet[\"TemplatePropertyVariable\"]",
                    "int"
                ],
                "value": [
                    "Callable[..., None]",
                    "Optional[Callable[[], mypy.types.Instance]]",
                    "AbstractSet[\"TemplatePropertyVariable\"]",
                    "int"
                ],
                "expected": [
                    "Callable[..., None]",
                    "Optional[Callable[[], mypy.types.Instance]]",
                    "AbstractSet[\"TemplatePropertyVariable\"]",
                    "int"
                ],
                "error": [
                    "Callable[..., None]",
                    "Optional[Callable[[], mypy.types.Instance]]",
                    "AbstractSet[\"TemplatePropertyVariable\"]",
                    "int"
                ]
            }
        },
        "TestTyped.test_it_coerces_non_null_lists_of_values": {
            "name": "test_it_coerces_non_null_lists_of_values",
            "location": 222,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "Callable[..., None]",
                    "AbstractSet[\"TemplatePropertyVariable\"]",
                    "int",
                    "Optional[Callable[[], mypy.types.Instance]]",
                    "Type"
                ],
                "value": [
                    "Callable[..., None]",
                    "AbstractSet[\"TemplatePropertyVariable\"]",
                    "int",
                    "Optional[Callable[[], mypy.types.Instance]]",
                    "Type"
                ],
                "expected": [
                    "Callable[..., None]",
                    "AbstractSet[\"TemplatePropertyVariable\"]",
                    "int",
                    "Optional[Callable[[], mypy.types.Instance]]",
                    "Type"
                ],
                "error": [
                    "Callable[..., None]",
                    "AbstractSet[\"TemplatePropertyVariable\"]",
                    "int",
                    "Optional[Callable[[], mypy.types.Instance]]",
                    "Type"
                ]
            }
        },
        "TestTyped.test_it_coerces_lists_of_non_null_values": {
            "name": "test_it_coerces_lists_of_non_null_values",
            "location": 239,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "Callable[..., None]",
                    "AbstractSet[\"TemplatePropertyVariable\"]",
                    "int",
                    "Optional[Callable[[], mypy.types.Instance]]",
                    "Type"
                ],
                "value": [
                    "Callable[..., None]",
                    "AbstractSet[\"TemplatePropertyVariable\"]",
                    "int",
                    "Optional[Callable[[], mypy.types.Instance]]",
                    "Type"
                ],
                "expected": [
                    "Callable[..., None]",
                    "AbstractSet[\"TemplatePropertyVariable\"]",
                    "int",
                    "Optional[Callable[[], mypy.types.Instance]]",
                    "Type"
                ],
                "error": [
                    "Callable[..., None]",
                    "AbstractSet[\"TemplatePropertyVariable\"]",
                    "int",
                    "Optional[Callable[[], mypy.types.Instance]]",
                    "Type"
                ]
            }
        },
        "TestTyped.test_it_coerces_non_null_lists_of_non_null_values": {
            "name": "test_it_coerces_non_null_lists_of_non_null_values",
            "location": 256,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "Callable[..., None]",
                    "AbstractSet[\"TemplatePropertyVariable\"]",
                    "int",
                    "Optional[Callable[[], mypy.types.Instance]]"
                ],
                "value": [
                    "Callable[..., None]",
                    "AbstractSet[\"TemplatePropertyVariable\"]",
                    "int",
                    "Optional[Callable[[], mypy.types.Instance]]"
                ],
                "expected": [
                    "Callable[..., None]",
                    "AbstractSet[\"TemplatePropertyVariable\"]",
                    "int",
                    "Optional[Callable[[], mypy.types.Instance]]"
                ],
                "error": [
                    "Callable[..., None]",
                    "AbstractSet[\"TemplatePropertyVariable\"]",
                    "int",
                    "Optional[Callable[[], mypy.types.Instance]]"
                ]
            }
        },
        "TestTyped.test_it_coerces_input_object": {
            "name": "test_it_coerces_input_object",
            "location": 289,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "Callable[..., None]",
                    "Optional[Callable[[], mypy.types.Instance]]",
                    "AbstractSet[\"TemplatePropertyVariable\"]"
                ],
                "value": [
                    "Callable[..., None]",
                    "Optional[Callable[[], mypy.types.Instance]]",
                    "AbstractSet[\"TemplatePropertyVariable\"]"
                ],
                "expected": [
                    "Callable[..., None]",
                    "Optional[Callable[[], mypy.types.Instance]]",
                    "AbstractSet[\"TemplatePropertyVariable\"]"
                ],
                "error": [
                    "Callable[..., None]",
                    "Optional[Callable[[], mypy.types.Instance]]",
                    "AbstractSet[\"TemplatePropertyVariable\"]"
                ]
            }
        },
        "TestTyped.test_it_accepts_variable_values_assuming_already_coerced": {
            "name": "test_it_accepts_variable_values_assuming_already_coerced",
            "location": 300,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "str",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "Optional[str]",
                    "Exception"
                ],
                "value": [
                    "str",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "Optional[str]",
                    "Exception"
                ],
                "variables": [
                    "str",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "Optional[str]",
                    "Exception"
                ],
                "expected": [
                    "str",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "Optional[str]",
                    "Exception"
                ],
                "error": [
                    "str",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "Optional[str]",
                    "Exception"
                ]
            }
        },
        "TestTyped.test_it_raises_on_null_variable_with_non_null_type": {
            "name": "test_it_raises_on_null_variable_with_non_null_type",
            "location": 305,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTyped.test_it_asserts_variables_are_provided_as_items_in_lists": {
            "name": "test_it_asserts_variables_are_provided_as_items_in_lists",
            "location": 332,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "str",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "Optional[str]"
                ],
                "value": [
                    "str",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "Optional[str]"
                ],
                "variables": [
                    "str",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "Optional[str]"
                ],
                "expected": [
                    "str",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "Optional[str]"
                ],
                "error": [
                    "str",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "Optional[str]"
                ]
            }
        },
        "TestTyped.test_it_omits_input_object_fields_for_unprovided_variables": {
            "name": "test_it_omits_input_object_fields_for_unprovided_variables",
            "location": 362,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "str",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "Optional[str]",
                    "Exception"
                ],
                "value": [
                    "str",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "Optional[str]",
                    "Exception"
                ],
                "variables": [
                    "str",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "Optional[str]",
                    "Exception"
                ],
                "expected": [
                    "str",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "Optional[str]",
                    "Exception"
                ],
                "error": [
                    "str",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "Optional[str]",
                    "Exception"
                ]
            }
        }
    },
    "py-gql-master/tests/test_utilities/__init__.py": {},
    "py-gql-master/tests/test_validation/conftest.py": {
        "schema": {
            "name": "schema",
            "location": 29,
            "return": [
                "Callable"
            ],
            "arguments": {}
        },
        "schema_2": {
            "name": "schema_2",
            "location": 255,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "schema._invalid": {
            "name": "_invalid",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "schema._stringify": {
            "name": "_stringify",
            "location": 206,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        }
    },
    "py-gql-master/tests/test_validation/test_validation.py": {
        "test_it_validates_queries": {
            "name": "test_it_validates_queries",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "int"
                ]
            }
        },
        "test_it_detects_bad_scalar_parse": {
            "name": "test_it_detects_bad_scalar_parse",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "int",
                    "Callable"
                ]
            }
        },
        "test_complex_but_valid_query": {
            "name": "test_complex_but_valid_query",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "starwars_schema": [
                    "int"
                ]
            }
        },
        "test_non_existent_fields_are_invalid": {
            "name": "test_non_existent_fields_are_invalid",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "starwars_schema": [
                    "int"
                ]
            }
        },
        "test_requires_fields_on_objects": {
            "name": "test_requires_fields_on_objects",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "starwars_schema": [
                    "int"
                ]
            }
        },
        "test_disallows_fields_on_scalars": {
            "name": "test_disallows_fields_on_scalars",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "starwars_schema": [
                    "int"
                ]
            }
        },
        "test_disallows_object_fields_on_interface": {
            "name": "test_disallows_object_fields_on_interface",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "starwars_schema": [
                    "int"
                ]
            }
        },
        "test_allows_object_fields_in_fragments": {
            "name": "test_allows_object_fields_in_fragments",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "starwars_schema": [
                    "int"
                ]
            }
        },
        "test_allows_object_fields_in_inline_fragments": {
            "name": "test_allows_object_fields_in_inline_fragments",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "starwars_schema": [
                    "int"
                ]
            }
        }
    },
    "py-gql-master/tests/test_validation/_test_utils.py": {
        "_ensure_list": {
            "name": "_ensure_list",
            "location": 9,
            "return": [
                "bool",
                "Sequence[str]",
                "int"
            ],
            "arguments": {
                "value": [
                    "str",
                    "SupportsBytes",
                    "Sequence[str]",
                    "bool",
                    "complex"
                ]
            }
        },
        "assert_validation_result": {
            "name": "assert_validation_result",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[List[Any]]"
                ],
                "source": [
                    "Optional[List[Any]]",
                    "bool",
                    "str"
                ],
                "expected_msgs": [
                    "str",
                    "Sequence[str]",
                    "dict"
                ],
                "expected_locs": [
                    "bool",
                    "int"
                ],
                "checkers": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[List[Any]]"
                ]
            }
        },
        "assert_checker_validation_result": {
            "name": "assert_checker_validation_result",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "checker": [
                    "Dict[str, int]",
                    "Union[int, float]",
                    "Optional[str]"
                ],
                "schema": [
                    "Dict[str, int]",
                    "Union[int, float]",
                    "Optional[str]"
                ],
                "source": [
                    "Dict[str, int]",
                    "Union[int, float]",
                    "Optional[str]"
                ],
                "expected_msgs": [
                    "Dict[str, int]",
                    "Union[int, float]",
                    "Optional[str]"
                ],
                "expected_locs": [
                    "Dict[str, int]",
                    "Union[int, float]",
                    "Optional[str]"
                ]
            }
        }
    },
    "py-gql-master/tests/test_validation/__init__.py": {},
    "py-gql-master/tests/test_validation/rules/test_executable_definitions.py": {
        "test_only_operation": {
            "name": "test_only_operation",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "float"
                ]
            }
        },
        "test_operation_and_fragment": {
            "name": "test_operation_and_fragment",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "float"
                ]
            }
        },
        "test_type_definition": {
            "name": "test_type_definition",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "int",
                    "Iterator",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_schema_definition": {
            "name": "test_schema_definition",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "py-gql-master/tests/test_validation/rules/test_fields_on_correct_type.py": {
        "test_object_field_selection": {
            "name": "test_object_field_selection",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Callable",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_aliased_object_field_selection": {
            "name": "test_aliased_object_field_selection",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Callable",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_interface_field_selection": {
            "name": "test_interface_field_selection",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Callable",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_aliased_interface_field_selection": {
            "name": "test_aliased_interface_field_selection",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Callable",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_lying_alias_selection": {
            "name": "test_lying_alias_selection",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema",
                    "Callable"
                ]
            }
        },
        "test_ignores_fields_on_unknown_type": {
            "name": "test_ignores_fields_on_unknown_type",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema",
                    "Callable",
                    "Iterable[object]"
                ]
            }
        },
        "test_reports_errors_when_type_is_known_again": {
            "name": "test_reports_errors_when_type_is_known_again",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema",
                    "Callable",
                    "Iterable[object]"
                ]
            }
        },
        "test_field_not_defined_on_fragment": {
            "name": "test_field_not_defined_on_fragment",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Callable",
                    "py_gql.schema.Schema",
                    "Optional[str]"
                ]
            }
        },
        "test_ignores_deeply_unknown_field": {
            "name": "test_ignores_deeply_unknown_field",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Callable",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_sub_field_not_defined": {
            "name": "test_sub_field_not_defined",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Callable",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_field_not_defined_on_inline_fragment": {
            "name": "test_field_not_defined_on_inline_fragment",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Callable",
                    "py_gql.schema.Schema",
                    "Optional[str]"
                ]
            }
        },
        "test_aliased_field_target_not_defined": {
            "name": "test_aliased_field_target_not_defined",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Callable",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_aliased_lying_field_target_not_defined": {
            "name": "test_aliased_lying_field_target_not_defined",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Callable",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_not_defined_on_interface": {
            "name": "test_not_defined_on_interface",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema",
                    "Callable"
                ]
            }
        },
        "test_defined_on_implementers_but_not_on_interface": {
            "name": "test_defined_on_implementers_but_not_on_interface",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema",
                    "Callable"
                ]
            }
        },
        "test_meta_field_selection_on_union": {
            "name": "test_meta_field_selection_on_union",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Callable",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_direct_field_selection_on_union": {
            "name": "test_direct_field_selection_on_union",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Callable",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_defined_on_implementers_queried_on_union": {
            "name": "test_defined_on_implementers_queried_on_union",
            "location": 252,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Callable",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_valid_field_in_inline_fragment": {
            "name": "test_valid_field_in_inline_fragment",
            "location": 268,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Callable",
                    "py_gql.schema.Schema"
                ]
            }
        }
    },
    "py-gql-master/tests/test_validation/rules/test_fragments_on_composite_types.py": {
        "test_object_is_valid_fragment_type": {
            "name": "test_object_is_valid_fragment_type",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Callable",
                    "py_gql.schema.Schema",
                    "str"
                ]
            }
        },
        "test_interface_is_valid_fragment_type": {
            "name": "test_interface_is_valid_fragment_type",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Callable",
                    "py_gql.schema.Schema",
                    "str"
                ]
            }
        },
        "test_object_is_valid_inline_fragment_type": {
            "name": "test_object_is_valid_inline_fragment_type",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Callable",
                    "py_gql.schema.Schema",
                    "str"
                ]
            }
        },
        "test_inline_fragment_without_type_is_valid": {
            "name": "test_inline_fragment_without_type_is_valid",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Callable",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_union_is_valid_fragment_type": {
            "name": "test_union_is_valid_fragment_type",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Callable",
                    "py_gql.schema.Schema",
                    "str"
                ]
            }
        },
        "test_scalar_is_invalid_fragment_type": {
            "name": "test_scalar_is_invalid_fragment_type",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema",
                    "Callable"
                ]
            }
        },
        "test_enum_is_invalid_fragment_type": {
            "name": "test_enum_is_invalid_fragment_type",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema",
                    "Callable"
                ]
            }
        },
        "test_input_object_is_invalid_fragment_type": {
            "name": "test_input_object_is_invalid_fragment_type",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema",
                    "Callable"
                ]
            }
        },
        "test_scalar_is_invalid_inline_fragment_type": {
            "name": "test_scalar_is_invalid_inline_fragment_type",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema",
                    "Callable",
                    "Iterable[object]"
                ]
            }
        }
    },
    "py-gql-master/tests/test_validation/rules/test_known_argument_names.py": {
        "test_single_arg_is_known": {
            "name": "test_single_arg_is_known",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_multiple_args_are_known": {
            "name": "test_multiple_args_are_known",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_ignores_args_of_unknown_fields": {
            "name": "test_ignores_args_of_unknown_fields",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_multiple_args_in_reverse_order_are_known": {
            "name": "test_multiple_args_in_reverse_order_are_known",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_no_args_on_optional_arg": {
            "name": "test_no_args_on_optional_arg",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_args_are_known_deeply": {
            "name": "test_args_are_known_deeply",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_directive_args_are_known": {
            "name": "test_directive_args_are_known",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_unknown_directive_args_are_invalid": {
            "name": "test_unknown_directive_args_are_invalid",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_misspelled_directive_args_are_reported": {
            "name": "test_misspelled_directive_args_are_reported",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_invalid_arg_name": {
            "name": "test_invalid_arg_name",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_misspelled_arg_name_is_reported": {
            "name": "test_misspelled_arg_name_is_reported",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_unknown_args_amongst_known_args": {
            "name": "test_unknown_args_amongst_known_args",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_unknown_args_deeply": {
            "name": "test_unknown_args_deeply",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        }
    },
    "py-gql-master/tests/test_validation/rules/test_known_directives.py": {
        "test_with_no_directives": {
            "name": "test_with_no_directives",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_with_known_directives": {
            "name": "test_with_known_directives",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "float"
                ]
            }
        },
        "test_with_unknown_directive": {
            "name": "test_with_unknown_directive",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "float"
                ]
            }
        },
        "test_with_many_unknown_directives": {
            "name": "test_with_many_unknown_directives",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "float"
                ]
            }
        },
        "test_with_well_placed_directives": {
            "name": "test_with_well_placed_directives",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "float"
                ]
            }
        },
        "test_with_misplaced_directives": {
            "name": "test_with_misplaced_directives",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "float"
                ]
            }
        },
        "test_with_well_placed_directives_within_schema_language": {
            "name": "test_with_well_placed_directives_within_schema_language",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "float"
                ]
            }
        },
        "test_with_misplaced_directives_within_schema_language": {
            "name": "test_with_misplaced_directives_within_schema_language",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "py-gql-master/tests/test_validation/rules/test_known_fragment_names.py": {
        "test_known_fragment_names_are_valid": {
            "name": "test_known_fragment_names_are_valid",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_unknown_fragment_names_are_invalid": {
            "name": "test_unknown_fragment_names_are_invalid",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        }
    },
    "py-gql-master/tests/test_validation/rules/test_known_type_names.py": {
        "test_known_type_names_are_valid": {
            "name": "test_known_type_names_are_valid",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_unknown_type_names_are_invalid": {
            "name": "test_unknown_type_names_are_invalid",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_ignores_type_definitions": {
            "name": "test_ignores_type_definitions",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema"
                ]
            }
        }
    },
    "py-gql-master/tests/test_validation/rules/test_lone_anonymous_operation.py": {
        "test_no_operations": {
            "name": "test_no_operations",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Tuple[float, float, float, float, float]",
                    "float",
                    "int"
                ]
            }
        },
        "test_one_anon_operation": {
            "name": "test_one_anon_operation",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "float"
                ]
            }
        },
        "test_multiple_named_operations": {
            "name": "test_multiple_named_operations",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_anon_operation_with_fragment": {
            "name": "test_anon_operation_with_fragment",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "float"
                ]
            }
        },
        "test_multiple_anon_operations": {
            "name": "test_multiple_anon_operations",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "float"
                ]
            }
        },
        "test_anon_operation_with_a_mutation": {
            "name": "test_anon_operation_with_a_mutation",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_anon_operation_with_a_subscription": {
            "name": "test_anon_operation_with_a_subscription",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "schema": []
            }
        }
    },
    "py-gql-master/tests/test_validation/rules/test_no_fragment_cycles.py": {
        "test_single_reference_is_valid": {
            "name": "test_single_reference_is_valid",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_spreading_twice_is_not_circular": {
            "name": "test_spreading_twice_is_not_circular",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_spreading_twice_indirectly_is_not_circular": {
            "name": "test_spreading_twice_indirectly_is_not_circular",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_double_spread_within_abstract_types": {
            "name": "test_double_spread_within_abstract_types",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_does_not_false_positive_on_unknown_fragment": {
            "name": "test_does_not_false_positive_on_unknown_fragment",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Tuple[float, float, float, float, float]"
                ]
            }
        },
        "test_spreading_recursively_within_field_fails": {
            "name": "test_spreading_recursively_within_field_fails",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_no_spreading_itself_directly": {
            "name": "test_no_spreading_itself_directly",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Tuple[float, float, float, float, float]",
                    "float",
                    "int"
                ]
            }
        },
        "test_no_spreading_itself_directly_within_inline_fragment": {
            "name": "test_no_spreading_itself_directly_within_inline_fragment",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Tuple[float, float, float, float, float]",
                    "float",
                    "int"
                ]
            }
        },
        "test_no_spreading_itself_indirectly": {
            "name": "test_no_spreading_itself_indirectly",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Tuple[float, float, float, float, float]",
                    "float",
                    "int"
                ]
            }
        },
        "test_no_spreading_itself_indirectly_reports_opposite_order": {
            "name": "test_no_spreading_itself_indirectly_reports_opposite_order",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Tuple[float, float, float, float, float]",
                    "float",
                    "int"
                ]
            }
        },
        "test_no_spreading_itself_indirectly_within_inline_fragment": {
            "name": "test_no_spreading_itself_indirectly_within_inline_fragment",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Tuple[float, float, float, float, float]",
                    "float",
                    "int"
                ]
            }
        },
        "test_no_spreading_itself_deeply": {
            "name": "test_no_spreading_itself_deeply",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Tuple[float, float, float, float, float]",
                    "float",
                    "int"
                ]
            }
        },
        "test_no_spreading_itself_deeply_two_paths": {
            "name": "test_no_spreading_itself_deeply_two_paths",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Callable"
                ]
            }
        },
        "test_no_spreading_itself_deeply_two_paths_alt_traverse_order": {
            "name": "test_no_spreading_itself_deeply_two_paths_alt_traverse_order",
            "location": 202,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Callable"
                ]
            }
        },
        "test_no_spreading_itself_deeply_and_immediately": {
            "name": "test_no_spreading_itself_deeply_and_immediately",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Tuple[float, float, float, float, float]",
                    "float",
                    "int"
                ]
            }
        }
    },
    "py-gql-master/tests/test_validation/rules/test_no_undefined_variables.py": {
        "test_all_variables_defined": {
            "name": "test_all_variables_defined",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "int",
                    "Callable",
                    "T_co",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_all_variables_deeply_defined": {
            "name": "test_all_variables_deeply_defined",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "int",
                    "Callable",
                    "T_co",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_all_variables_deeply_in_inline_fragments_defined": {
            "name": "test_all_variables_deeply_in_inline_fragments_defined",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "bool",
                    "str",
                    "Optional[Exception]"
                ]
            }
        },
        "test_all_variables_in_fragments_deeply_defined": {
            "name": "test_all_variables_in_fragments_deeply_defined",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "dict",
                    "Callable"
                ]
            }
        },
        "test_variable_within_single_fragment_defined_in_multiple_operations": {
            "name": "test_variable_within_single_fragment_defined_in_multiple_operations",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "dict"
                ]
            }
        },
        "test_variable_within_fragments_defined_in_operations": {
            "name": "test_variable_within_fragments_defined_in_operations",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "dict"
                ]
            }
        },
        "test_variable_within_recursive_fragment_defined": {
            "name": "test_variable_within_recursive_fragment_defined",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Callable",
                    "bool",
                    "Optional[Exception]"
                ]
            }
        },
        "test_variable_not_defined": {
            "name": "test_variable_not_defined",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Callable",
                    "bool",
                    "Optional[Exception]"
                ]
            }
        },
        "test_variable_not_defined_by_unnamed_query": {
            "name": "test_variable_not_defined_by_unnamed_query",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "dict"
                ]
            }
        },
        "test_multiple_variables_not_defined": {
            "name": "test_multiple_variables_not_defined",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_variable_in_fragment_not_defined_by_unnamed_query": {
            "name": "test_variable_in_fragment_not_defined_by_unnamed_query",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "dict",
                    "Callable"
                ]
            }
        },
        "test_variable_in_fragment_not_defined_by_operation": {
            "name": "test_variable_in_fragment_not_defined_by_operation",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "dict",
                    "Callable"
                ]
            }
        },
        "test_multiple_variables_in_fragments_not_defined": {
            "name": "test_multiple_variables_in_fragments_not_defined",
            "location": 233,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "dict"
                ]
            }
        },
        "test_single_variable_in_fragment_not_defined_by_multiple_operations": {
            "name": "test_single_variable_in_fragment_not_defined_by_multiple_operations",
            "location": 262,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "dict"
                ]
            }
        },
        "test_variables_in_fragment_not_defined_by_multiple_operations": {
            "name": "test_variables_in_fragment_not_defined_by_multiple_operations",
            "location": 286,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "dict",
                    "Callable"
                ]
            }
        },
        "test_variable_in_fragment_used_by_other_operation": {
            "name": "test_variable_in_fragment_used_by_other_operation",
            "location": 311,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "dict"
                ]
            }
        },
        "test_multiple_undefined_variables_produce_multiple_errors": {
            "name": "test_multiple_undefined_variables_produce_multiple_errors",
            "location": 336,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "dict",
                    "Callable"
                ]
            }
        }
    },
    "py-gql-master/tests/test_validation/rules/test_no_unused_fragments.py": {
        "test_all_fragment_names_are_used": {
            "name": "test_all_fragment_names_are_used",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_all_fragment_names_are_used_by_multiple_operations": {
            "name": "test_all_fragment_names_are_used_by_multiple_operations",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_contains_unknown_fragments": {
            "name": "test_contains_unknown_fragments",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "float"
                ]
            }
        },
        "test_contains_unknown_fragments_with_ref_cycle": {
            "name": "test_contains_unknown_fragments_with_ref_cycle",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_contains_unknown_and_undef_fragments": {
            "name": "test_contains_unknown_and_undef_fragments",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "py-gql-master/tests/test_validation/rules/test_no_unused_variables.py": {
        "test_uses_all_variables": {
            "name": "test_uses_all_variables",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "dict"
                ]
            }
        },
        "test_uses_all_variables_deeply": {
            "name": "test_uses_all_variables_deeply",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "dict"
                ]
            }
        },
        "test_uses_all_variables_deeply_in_inline_fragments": {
            "name": "test_uses_all_variables_deeply_in_inline_fragments",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "dict"
                ]
            }
        },
        "test_uses_all_variables_in_fragments": {
            "name": "test_uses_all_variables_in_fragments",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "dict",
                    "Callable"
                ]
            }
        },
        "test_variable_used_by_fragment_in_multiple_operations": {
            "name": "test_variable_used_by_fragment_in_multiple_operations",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "dict"
                ]
            }
        },
        "test_variable_used_by_recursive_fragment": {
            "name": "test_variable_used_by_recursive_fragment",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "dict",
                    "Callable"
                ]
            }
        },
        "test_variable_not_used": {
            "name": "test_variable_not_used",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "dict"
                ]
            }
        },
        "test_multiple_variables_not_used": {
            "name": "test_multiple_variables_not_used",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "dict"
                ]
            }
        },
        "test_variable_not_used_in_fragments": {
            "name": "test_variable_not_used_in_fragments",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "dict"
                ]
            }
        },
        "test_multiple_variables_not_used_in_fragments": {
            "name": "test_multiple_variables_not_used_in_fragments",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "dict"
                ]
            }
        },
        "test_variable_not_used_by_unreferenced_fragment": {
            "name": "test_variable_not_used_by_unreferenced_fragment",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "dict"
                ]
            }
        },
        "test_variable_not_used_by_fragment_used_by_other_operation": {
            "name": "test_variable_not_used_by_fragment_used_by_other_operation",
            "location": 226,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "dict"
                ]
            }
        }
    },
    "py-gql-master/tests/test_validation/rules/test_overlapping_fields_can_be_merged.py": {
        "test_unique_fields": {
            "name": "test_unique_fields",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_identical_fields": {
            "name": "test_identical_fields",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_identical_fields_with_identical_args": {
            "name": "test_identical_fields_with_identical_args",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_identical_fields_with_identical_directives": {
            "name": "test_identical_fields_with_identical_directives",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_different_args_with_different_aliases": {
            "name": "test_different_args_with_different_aliases",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_different_directives_with_different_aliases": {
            "name": "test_different_directives_with_different_aliases",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_different_skip_include_directives_accepted": {
            "name": "test_different_skip_include_directives_accepted",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_same_aliases_with_different_field_targets": {
            "name": "test_same_aliases_with_different_field_targets",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_same_aliases_allowed_on_non_overlapping_fields": {
            "name": "test_same_aliases_allowed_on_non_overlapping_fields",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_alias_masking_direct_field_access": {
            "name": "test_alias_masking_direct_field_access",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_different_args_second_adds_an_argument": {
            "name": "test_different_args_second_adds_an_argument",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_different_args_second_missing_an_argument": {
            "name": "test_different_args_second_missing_an_argument",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_conflicting_args": {
            "name": "test_conflicting_args",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_allows_different_args_where_no_conflict_is_possible": {
            "name": "test_allows_different_args_where_no_conflict_is_possible",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_encounters_conflict_in_fragments": {
            "name": "test_encounters_conflict_in_fragments",
            "location": 226,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_reports_each_conflict_once": {
            "name": "test_reports_each_conflict_once",
            "location": 250,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_deep_conflict": {
            "name": "test_deep_conflict",
            "location": 296,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_deep_conflict_with_multiple_issues": {
            "name": "test_deep_conflict_with_multiple_issues",
            "location": 319,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_very_deep_conflict": {
            "name": "test_very_deep_conflict",
            "location": 345,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_reports_deep_conflict_to_nearest_common_ancestor": {
            "name": "test_reports_deep_conflict_to_nearest_common_ancestor",
            "location": 373,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_reports_deep_conflict_to_nearest_common_ancestor_in_fragments": {
            "name": "test_reports_deep_conflict_to_nearest_common_ancestor_in_fragments",
            "location": 403,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_reports_deep_conflict_in_nested_fragments": {
            "name": "test_reports_deep_conflict_in_nested_fragments",
            "location": 441,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_ignores_unknown_fragments": {
            "name": "test_ignores_unknown_fragments",
            "location": 479,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_conflicting_return_types_which_potentially_overlap": {
            "name": "test_conflicting_return_types_which_potentially_overlap",
            "location": 498,
            "return": [
                ""
            ],
            "arguments": {
                "schema_2": [
                    "str",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_compatible_return_shapes_on_different_return_types": {
            "name": "test_compatible_return_shapes_on_different_return_types",
            "location": 522,
            "return": [
                ""
            ],
            "arguments": {
                "schema_2": [
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_disallows_differing_return_types_despite_no_overlap": {
            "name": "test_disallows_differing_return_types_despite_no_overlap",
            "location": 545,
            "return": [
                ""
            ],
            "arguments": {
                "schema_2": [
                    "str"
                ]
            }
        },
        "test_reports_correctly_when_a_non_exclusive_follows_an_exclusive": {
            "name": "test_reports_correctly_when_a_non_exclusive_follows_an_exclusive",
            "location": 569,
            "return": [
                ""
            ],
            "arguments": {
                "schema_2": [
                    "str"
                ]
            }
        },
        "test_disallows_differing_return_type_nullability_despite_no_overlap": {
            "name": "test_disallows_differing_return_type_nullability_despite_no_overlap",
            "location": 626,
            "return": [
                ""
            ],
            "arguments": {
                "schema_2": [
                    "str"
                ]
            }
        },
        "test_disallows_differing_return_type_list_despite_no_overlap_0": {
            "name": "test_disallows_differing_return_type_list_despite_no_overlap_0",
            "location": 653,
            "return": [
                ""
            ],
            "arguments": {
                "schema_2": [
                    "str"
                ]
            }
        },
        "test_disallows_differing_return_type_list_despite_no_overlap_1": {
            "name": "test_disallows_differing_return_type_list_despite_no_overlap_1",
            "location": 681,
            "return": [
                ""
            ],
            "arguments": {
                "schema_2": [
                    "str"
                ]
            }
        },
        "test_disallows_differing_subfields": {
            "name": "test_disallows_differing_subfields",
            "location": 709,
            "return": [
                ""
            ],
            "arguments": {
                "schema_2": [
                    "str"
                ]
            }
        },
        "test_disallows_differing_deep_return_types_despite_no_overlap": {
            "name": "test_disallows_differing_deep_return_types_despite_no_overlap",
            "location": 738,
            "return": [
                ""
            ],
            "arguments": {
                "schema_2": [
                    "str"
                ]
            }
        },
        "test_allows_non_conflicting_overlaping_types": {
            "name": "test_allows_non_conflicting_overlaping_types",
            "location": 766,
            "return": [
                ""
            ],
            "arguments": {
                "schema_2": [
                    "str"
                ]
            }
        },
        "test_same_wrapped_scalar_return_types": {
            "name": "test_same_wrapped_scalar_return_types",
            "location": 785,
            "return": [
                ""
            ],
            "arguments": {
                "schema_2": [
                    "str"
                ]
            }
        },
        "test_allows_inline_typeless_fragments": {
            "name": "test_allows_inline_typeless_fragments",
            "location": 804,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_compares_deep_types_including_list": {
            "name": "test_compares_deep_types_including_list",
            "location": 819,
            "return": [
                ""
            ],
            "arguments": {
                "schema_2": [
                    "str"
                ]
            }
        },
        "test_ignores_unknown_types": {
            "name": "test_ignores_unknown_types",
            "location": 852,
            "return": [
                ""
            ],
            "arguments": {
                "schema_2": [
                    "str"
                ]
            }
        },
        "test_does_not_infinite_loop_on_recursive_fragment": {
            "name": "test_does_not_infinite_loop_on_recursive_fragment",
            "location": 871,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_does_not_infinite_loop_on_immediately_recursive_fragment": {
            "name": "test_does_not_infinite_loop_on_immediately_recursive_fragment",
            "location": 881,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_does_not_infinite_loop_on_transitively_recursive_fragment": {
            "name": "test_does_not_infinite_loop_on_transitively_recursive_fragment",
            "location": 891,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_finds_invalid_case_even_with_immediately_recursive_fragment": {
            "name": "test_finds_invalid_case_even_with_immediately_recursive_fragment",
            "location": 903,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        }
    },
    "py-gql-master/tests/test_validation/rules/test_possible_fragment_spreads.py": {
        "test_of_the_same_object": {
            "name": "test_of_the_same_object",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "bool",
                    "py_gql.schema.Schema",
                    "Iterable[Any]"
                ]
            }
        },
        "test_of_the_same_object_with_inline_fragment": {
            "name": "test_of_the_same_object_with_inline_fragment",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "bool",
                    "py_gql.schema.Schema",
                    "Iterable[Any]"
                ]
            }
        },
        "test_object_into_an_implemented_interface": {
            "name": "test_object_into_an_implemented_interface",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "float"
                ]
            }
        },
        "test_object_into_containing_union": {
            "name": "test_object_into_containing_union",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "float"
                ]
            }
        },
        "test_union_into_contained_object": {
            "name": "test_union_into_contained_object",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "float"
                ]
            }
        },
        "test_union_into_overlapping_interface": {
            "name": "test_union_into_overlapping_interface",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "float"
                ]
            }
        },
        "test_union_into_overlapping_union": {
            "name": "test_union_into_overlapping_union",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "float"
                ]
            }
        },
        "test_interface_into_implemented_object": {
            "name": "test_interface_into_implemented_object",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "float"
                ]
            }
        },
        "test_interface_into_overlapping_interface": {
            "name": "test_interface_into_overlapping_interface",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "float"
                ]
            }
        },
        "test_interface_into_overlapping_interface_in_inline_fragment": {
            "name": "test_interface_into_overlapping_interface_in_inline_fragment",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "dict"
                ]
            }
        },
        "test_interface_into_overlapping_union": {
            "name": "test_interface_into_overlapping_union",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "float"
                ]
            }
        },
        "test_ignores_incorrect_type_caught_by_FragmentsOnCompositeTypes": {
            "name": "test_ignores_incorrect_type_caught_by_FragmentsOnCompositeTypes",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Type"
                ]
            }
        },
        "test_different_object_into_object": {
            "name": "test_different_object_into_object",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "float"
                ]
            }
        },
        "test_different_object_into_object_in_inline_fragment": {
            "name": "test_different_object_into_object_in_inline_fragment",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "dict"
                ]
            }
        },
        "test_object_into_not_implementing_interface": {
            "name": "test_object_into_not_implementing_interface",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "float"
                ]
            }
        },
        "test_object_into_not_containing_union": {
            "name": "test_object_into_not_containing_union",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "float"
                ]
            }
        },
        "test_union_into_not_contained_object": {
            "name": "test_union_into_not_contained_object",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "float"
                ]
            }
        },
        "test_union_into_non_overlapping_interface": {
            "name": "test_union_into_non_overlapping_interface",
            "location": 221,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "dict"
                ]
            }
        },
        "test_union_into_non_overlapping_union": {
            "name": "test_union_into_non_overlapping_union",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "dict"
                ]
            }
        },
        "test_interface_into_non_implementing_object": {
            "name": "test_interface_into_non_implementing_object",
            "location": 251,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "dict"
                ]
            }
        },
        "test_interface_into_non_overlapping_interface": {
            "name": "test_interface_into_non_overlapping_interface",
            "location": 266,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "dict"
                ]
            }
        },
        "test_interface_into_non_overlapping_interface_in_inline_fragment": {
            "name": "test_interface_into_non_overlapping_interface_in_inline_fragment",
            "location": 283,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "dict"
                ]
            }
        },
        "test_interface_into_non_overlapping_union": {
            "name": "test_interface_into_non_overlapping_union",
            "location": 299,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "dict"
                ]
            }
        }
    },
    "py-gql-master/tests/test_validation/rules/test_provided_required_arguments.py": {
        "test_ignores_unknown_arguments": {
            "name": "test_ignores_unknown_arguments",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "float"
                ]
            }
        },
        "test_arg_on_optional_arg": {
            "name": "test_arg_on_optional_arg",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "float"
                ]
            }
        },
        "test_no_arg_on_optional_arg": {
            "name": "test_no_arg_on_optional_arg",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Tuple[float, float, float, float, float]",
                    "float",
                    "int"
                ]
            }
        },
        "test_no_arg_on_non_null_field_with_default": {
            "name": "test_no_arg_on_non_null_field_with_default",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "schema_2": [
                    "dict"
                ]
            }
        },
        "test_multiple_args": {
            "name": "test_multiple_args",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "dict"
                ]
            }
        },
        "test_multiple_args_reverse_order": {
            "name": "test_multiple_args_reverse_order",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "dict"
                ]
            }
        },
        "test_no_args_on_multiple_optional": {
            "name": "test_no_args_on_multiple_optional",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_one_arg_on_multiple_optional": {
            "name": "test_one_arg_on_multiple_optional",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "float"
                ]
            }
        },
        "test_second_arg_on_multiple_optional": {
            "name": "test_second_arg_on_multiple_optional",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "float"
                ]
            }
        },
        "test_multiple_reqs_on_mixed_list": {
            "name": "test_multiple_reqs_on_mixed_list",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_multiple_reqs_and_one_opt_on_mixed_list": {
            "name": "test_multiple_reqs_and_one_opt_on_mixed_list",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "dict"
                ]
            }
        },
        "test_all_reqs_and_opts_on_mixed_list": {
            "name": "test_all_reqs_and_opts_on_mixed_list",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "int",
                    "str"
                ]
            }
        },
        "test_missing_one_non_nullable_argument": {
            "name": "test_missing_one_non_nullable_argument",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "dict"
                ]
            }
        },
        "test_missing_multiple_non_nullable_arguments": {
            "name": "test_missing_multiple_non_nullable_arguments",
            "location": 202,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "dict"
                ]
            }
        },
        "test_incorrect_value_and_missing_argument": {
            "name": "test_incorrect_value_and_missing_argument",
            "location": 222,
            "return": [
                ""
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_it_ignores_unknown_directives": {
            "name": "test_it_ignores_unknown_directives",
            "location": 240,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "float"
                ]
            }
        },
        "test_directives_of_valid_types": {
            "name": "test_directives_of_valid_types",
            "location": 252,
            "return": [
                ""
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_directive_with_missing_types": {
            "name": "test_directive_with_missing_types",
            "location": 269,
            "return": [
                ""
            ],
            "arguments": {
                "schema": []
            }
        }
    },
    "py-gql-master/tests/test_validation/rules/test_scalar_leafs.py": {
        "test_valid_scalar_selection": {
            "name": "test_valid_scalar_selection",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_object_type_missing_selection": {
            "name": "test_object_type_missing_selection",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Type"
                ]
            }
        },
        "test_interface_type_missing_selection": {
            "name": "test_interface_type_missing_selection",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Type"
                ]
            }
        },
        "test_valid_scalar_selection_with_args": {
            "name": "test_valid_scalar_selection_with_args",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_scalar_selection_not_allowed_on_boolean": {
            "name": "test_scalar_selection_not_allowed_on_boolean",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Callable"
                ]
            }
        },
        "test_scalar_selection_not_allowed_on_enum": {
            "name": "test_scalar_selection_not_allowed_on_enum",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Callable"
                ]
            }
        },
        "test_scalar_selection_not_allowed_with_args": {
            "name": "test_scalar_selection_not_allowed_with_args",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "schema": []
            }
        },
        "test_scalar_selection_not_allowed_with_directives": {
            "name": "test_scalar_selection_not_allowed_with_directives",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Callable"
                ]
            }
        },
        "test_scalar_selection_not_allowed_with_directives_and_args": {
            "name": "test_scalar_selection_not_allowed_with_directives_and_args",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Type",
                    "dict"
                ]
            }
        }
    },
    "py-gql-master/tests/test_validation/rules/test_single_field_subscriptions.py": {
        "test_valid_subscription": {
            "name": "test_valid_subscription",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_fails_with_more_than_one_root_field": {
            "name": "test_fails_with_more_than_one_root_field",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_fails_with_more_than_one_root_field_including_introspection": {
            "name": "test_fails_with_more_than_one_root_field_including_introspection",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_fails_with_many_more_than_one_root_field": {
            "name": "test_fails_with_many_more_than_one_root_field",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "Iterable[Any]",
                    "Sequence[Any]"
                ]
            }
        },
        "test_fails_with_more_than_one_root_field_in_anonymous_subscriptions": {
            "name": "test_fails_with_more_than_one_root_field_in_anonymous_subscriptions",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Iterable[Any]"
                ]
            }
        }
    },
    "py-gql-master/tests/test_validation/rules/test_unique_argument_names.py": {
        "test_no_arguments_on_field": {
            "name": "test_no_arguments_on_field",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_no_arguments_on_directive": {
            "name": "test_no_arguments_on_directive",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_argument_on_field": {
            "name": "test_argument_on_field",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_argument_on_directive": {
            "name": "test_argument_on_directive",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_same_argument_on_two_fields": {
            "name": "test_same_argument_on_two_fields",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_same_argument_on_field_and_directive": {
            "name": "test_same_argument_on_field_and_directive",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_same_argument_on_two_directives": {
            "name": "test_same_argument_on_two_directives",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_multiple_field_arguments": {
            "name": "test_multiple_field_arguments",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_multiple_directive_arguments": {
            "name": "test_multiple_directive_arguments",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_duplicate_field_arguments": {
            "name": "test_duplicate_field_arguments",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_many_duplicate_field_arguments": {
            "name": "test_many_duplicate_field_arguments",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_duplicate_directive_arguments": {
            "name": "test_duplicate_directive_arguments",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_many_duplicate_directive_arguments": {
            "name": "test_many_duplicate_directive_arguments",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        }
    },
    "py-gql-master/tests/test_validation/rules/test_unique_directives_per_location.py": {
        "test_no_directives": {
            "name": "test_no_directives",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "int",
                    "str",
                    "Tuple[float, float, float, float, float]",
                    "float"
                ]
            }
        },
        "test_unique_directives_in_different_locations": {
            "name": "test_unique_directives_in_different_locations",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "int",
                    "str"
                ]
            }
        },
        "test_unique_directives_in_same_locations": {
            "name": "test_unique_directives_in_same_locations",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "int",
                    "str"
                ]
            }
        },
        "test_same_directives_in_different_locations": {
            "name": "test_same_directives_in_different_locations",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "int",
                    "str"
                ]
            }
        },
        "test_same_directives_in_similar_locations": {
            "name": "test_same_directives_in_similar_locations",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "int",
                    "str"
                ]
            }
        },
        "test_duplicate_directives_in_one_location": {
            "name": "test_duplicate_directives_in_one_location",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "int",
                    "str"
                ]
            }
        },
        "test_many_duplicate_directives_in_one_location": {
            "name": "test_many_duplicate_directives_in_one_location",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "int",
                    "str"
                ]
            }
        },
        "test_different_duplicate_directives_in_one_location": {
            "name": "test_different_duplicate_directives_in_one_location",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "int",
                    "str"
                ]
            }
        },
        "test_duplicate_directives_in_many_locations": {
            "name": "test_duplicate_directives_in_many_locations",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "py-gql-master/tests/test_validation/rules/test_unique_fragment_names.py": {
        "test_no_fragments": {
            "name": "test_no_fragments",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_one_fragment": {
            "name": "test_one_fragment",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_many_fragments": {
            "name": "test_many_fragments",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_inline_fragments_are_always_unique": {
            "name": "test_inline_fragments_are_always_unique",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_fragment_and_operation_named_the_same": {
            "name": "test_fragment_and_operation_named_the_same",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_fragments_named_the_same": {
            "name": "test_fragments_named_the_same",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_fragments_named_the_same_without_being_referenced": {
            "name": "test_fragments_named_the_same_without_being_referenced",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        }
    },
    "py-gql-master/tests/test_validation/rules/test_unique_input_field_names.py": {
        "test_input_object_with_fields": {
            "name": "test_input_object_with_fields",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_same_input_object_within_two_args": {
            "name": "test_same_input_object_within_two_args",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_multiple_input_object_fields": {
            "name": "test_multiple_input_object_fields",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_allows_for_nested_input_objects_with_similar_fields": {
            "name": "test_allows_for_nested_input_objects_with_similar_fields",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_duplicate_input_object_fields": {
            "name": "test_duplicate_input_object_fields",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_many_duplicate_input_object_fields": {
            "name": "test_many_duplicate_input_object_fields",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema",
                    "str"
                ]
            }
        }
    },
    "py-gql-master/tests/test_validation/rules/test_unique_operation_name.py": {
        "test_no_operations": {
            "name": "test_no_operations",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_one_anon_operation": {
            "name": "test_one_anon_operation",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_one_named_operation": {
            "name": "test_one_named_operation",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_multiple_operations": {
            "name": "test_multiple_operations",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_multiple_operations_of_different_types": {
            "name": "test_multiple_operations_of_different_types",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_fragment_and_operation_named_the_same": {
            "name": "test_fragment_and_operation_named_the_same",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_multiple_operations_of_same_name": {
            "name": "test_multiple_operations_of_same_name",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_multiple_ops_of_same_name_of_different_types_mutation": {
            "name": "test_multiple_ops_of_same_name_of_different_types_mutation",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        },
        "test_multiple_ops_of_same_name_of_different_types_subscription": {
            "name": "test_multiple_ops_of_same_name_of_different_types_subscription",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ]
            }
        }
    },
    "py-gql-master/tests/test_validation/rules/test_unique_variable_names.py": {
        "test_unique_variable_names": {
            "name": "test_unique_variable_names",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema",
                    "str"
                ]
            }
        },
        "test_duplicate_variable_names": {
            "name": "test_duplicate_variable_names",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema",
                    "str"
                ]
            }
        }
    },
    "py-gql-master/tests/test_validation/rules/test_values_of_correct_type.py": {
        "test_good_int_value": {
            "name": "test_good_int_value",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema",
                    "Callable"
                ]
            }
        },
        "test_good_negative_int_value": {
            "name": "test_good_negative_int_value",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Callable",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_good_boolean_value": {
            "name": "test_good_boolean_value",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema",
                    "Callable"
                ]
            }
        },
        "test_good_string_value": {
            "name": "test_good_string_value",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema",
                    "Callable"
                ]
            }
        },
        "test_good_float_value": {
            "name": "test_good_float_value",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema",
                    "Callable"
                ]
            }
        },
        "test_good_negative_float_value": {
            "name": "test_good_negative_float_value",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Callable",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_int_into_float": {
            "name": "test_int_into_float",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Callable",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_int_into_id": {
            "name": "test_int_into_id",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema",
                    "Callable"
                ]
            }
        },
        "test_string_into_id": {
            "name": "test_string_into_id",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Callable",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_good_enum_value": {
            "name": "test_good_enum_value",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema",
                    "Callable"
                ]
            }
        },
        "test_enum_with_undefined_value": {
            "name": "test_enum_with_undefined_value",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Callable",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_enum_with_null_value": {
            "name": "test_enum_with_null_value",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Callable",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_null_into_nullable_type_1": {
            "name": "test_null_into_nullable_type_1",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema",
                    "Callable"
                ]
            }
        },
        "test_null_into_nullable_type_2": {
            "name": "test_null_into_nullable_type_2",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema",
                    "Callable"
                ]
            }
        },
        "test_invalid_string_values": {
            "name": "test_invalid_string_values",
            "location": 239,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "Optional[Dict[Hashable, Any]]",
                    "Exception",
                    "Dict[str, Any]"
                ],
                "value": [
                    "str",
                    "Optional[Dict[Hashable, Any]]",
                    "Exception",
                    "Dict[str, Any]"
                ],
                "expected_err": [
                    "str",
                    "Optional[Dict[Hashable, Any]]",
                    "Exception",
                    "Dict[str, Any]"
                ],
                "loc": [
                    "str",
                    "Optional[Dict[Hashable, Any]]",
                    "Exception",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_invalid_int_values": {
            "name": "test_invalid_int_values",
            "location": 285,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ],
                "value": [
                    "str"
                ],
                "expected_err": [
                    "str"
                ],
                "loc": [
                    "str"
                ]
            }
        },
        "test_invalid_float_values": {
            "name": "test_invalid_float_values",
            "location": 331,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ],
                "value": [
                    "str"
                ],
                "expected_err": [
                    "str"
                ],
                "loc": [
                    "str"
                ]
            }
        },
        "test_invalid_boolean_values": {
            "name": "test_invalid_boolean_values",
            "location": 374,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ],
                "value": [
                    "str"
                ],
                "expected_err": [
                    "str"
                ],
                "loc": [
                    "str"
                ]
            }
        },
        "test_invalid_id_values": {
            "name": "test_invalid_id_values",
            "location": 408,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Exception",
                    "Mapping[str, T]",
                    "str",
                    "type",
                    "Mapping[Tuple[str, str], Any]"
                ],
                "value": [
                    "Exception",
                    "Mapping[str, T]",
                    "str",
                    "type",
                    "Mapping[Tuple[str, str], Any]"
                ],
                "expected_err": [
                    "Exception",
                    "Mapping[str, T]",
                    "str",
                    "type",
                    "Mapping[Tuple[str, str], Any]"
                ],
                "loc": [
                    "Exception",
                    "Mapping[str, T]",
                    "str",
                    "type",
                    "Mapping[Tuple[str, str], Any]"
                ]
            }
        },
        "test_invalid_enum_values": {
            "name": "test_invalid_enum_values",
            "location": 463,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str"
                ],
                "value": [
                    "str"
                ],
                "expected_err": [
                    "str"
                ],
                "loc": [
                    "str"
                ]
            }
        },
        "test_valid_list_value": {
            "name": "test_valid_list_value",
            "location": 489,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "float",
                    "Set[str]",
                    "type",
                    "Type[T]"
                ],
                "value": [
                    "str",
                    "float",
                    "Set[str]",
                    "type",
                    "Type[T]"
                ]
            }
        },
        "test_invalid_list_value": {
            "name": "test_invalid_list_value",
            "location": 521,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "Optional[Dict[Hashable, Any]]",
                    "Callable[[KT, VT], bool]",
                    "Exception"
                ],
                "value": [
                    "str",
                    "Optional[Dict[Hashable, Any]]",
                    "Callable[[KT, VT], bool]",
                    "Exception"
                ],
                "expected_err": [
                    "str",
                    "Optional[Dict[Hashable, Any]]",
                    "Callable[[KT, VT], bool]",
                    "Exception"
                ],
                "loc": [
                    "str",
                    "Optional[Dict[Hashable, Any]]",
                    "Callable[[KT, VT], bool]",
                    "Exception"
                ]
            }
        },
        "test_valid_non_nullable_value": {
            "name": "test_valid_non_nullable_value",
            "location": 643,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "float",
                    "Set[str]"
                ],
                "value": [
                    "str",
                    "float",
                    "Set[str]"
                ]
            }
        },
        "test_invalid_non_nullable_value": {
            "name": "test_invalid_non_nullable_value",
            "location": 691,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "type",
                    "Dict[Hashable, Iterable[Hashable]]",
                    "Type[Any]"
                ],
                "value": [
                    "type",
                    "Dict[Hashable, Iterable[Hashable]]",
                    "Type[Any]"
                ],
                "expected_errors": [
                    "type",
                    "Dict[Hashable, Iterable[Hashable]]",
                    "Type[Any]"
                ],
                "locs": [
                    "type",
                    "Dict[Hashable, Iterable[Hashable]]",
                    "Type[Any]"
                ]
            }
        },
        "test_valid_input_object_value": {
            "name": "test_valid_input_object_value",
            "location": 783,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "float"
                ],
                "value": [
                    "str",
                    "float"
                ]
            }
        },
        "test_invalid_input_object_value": {
            "name": "test_invalid_input_object_value",
            "location": 867,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "type",
                    "Type[Any]",
                    "str"
                ],
                "value": [
                    "type",
                    "Type[Any]",
                    "str"
                ],
                "expected_errors": [
                    "type",
                    "Type[Any]",
                    "str"
                ],
                "locs": [
                    "type",
                    "Type[Any]",
                    "str"
                ]
            }
        },
        "test_directive_arguments_with_directives_of_valid_types": {
            "name": "test_directive_arguments_with_directives_of_valid_types",
            "location": 871,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Callable",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_directive_arguments_with_directive_with_incorrect_types": {
            "name": "test_directive_arguments_with_directive_with_incorrect_types",
            "location": 888,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Callable",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_variables_with_valid_default_values": {
            "name": "test_variables_with_valid_default_values",
            "location": 907,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Callable",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_variables_with_valid_default_null_values": {
            "name": "test_variables_with_valid_default_null_values",
            "location": 924,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema",
                    "Callable"
                ]
            }
        },
        "test_variables_with_invalid_default_null_values": {
            "name": "test_variables_with_invalid_default_null_values",
            "location": 940,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Callable",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_variables_with_invalid_default_values": {
            "name": "test_variables_with_invalid_default_values",
            "location": 962,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Callable",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_variables_with_complex_invalid_default_values": {
            "name": "test_variables_with_complex_invalid_default_values",
            "location": 983,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Callable",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_complex_variables_missing_required_field": {
            "name": "test_complex_variables_missing_required_field",
            "location": 998,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema",
                    "Callable"
                ]
            }
        },
        "test_list_variables_with_invalid_item": {
            "name": "test_list_variables_with_invalid_item",
            "location": 1014,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "Callable",
                    "py_gql.schema.Schema"
                ]
            }
        }
    },
    "py-gql-master/tests/test_validation/rules/test_variables_are_input_types.py": {
        "test_input_types_are_valid": {
            "name": "test_input_types_are_valid",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema",
                    "str",
                    "int"
                ]
            }
        },
        "test_output_types_are_invalid": {
            "name": "test_output_types_are_invalid",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema",
                    "int"
                ]
            }
        },
        "test_unknown_types_are_invalid": {
            "name": "test_unknown_types_are_invalid",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema"
                ]
            }
        }
    },
    "py-gql-master/tests/test_validation/rules/test_variables_in_allowed_position.py": {
        "test_boolean_to_boolean": {
            "name": "test_boolean_to_boolean",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_boolean_to_boolean_within_fragment_0": {
            "name": "test_boolean_to_boolean_within_fragment_0",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_boolean_to_boolean_within_fragment_1": {
            "name": "test_boolean_to_boolean_within_fragment_1",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_required_boolean_to_boolean": {
            "name": "test_required_boolean_to_boolean",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_required_boolean_to_boolean_within_fragment": {
            "name": "test_required_boolean_to_boolean_within_fragment",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_int_to_required_int_with_default": {
            "name": "test_int_to_required_int_with_default",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_list_of_string_to_list_of_string": {
            "name": "test_list_of_string_to_list_of_string",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_list_of_required_string_to_list_of_string": {
            "name": "test_list_of_required_string_to_list_of_string",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_string_to_list_of_string_in_field": {
            "name": "test_string_to_list_of_string_in_field",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema",
                    "str",
                    "bool"
                ]
            }
        },
        "test_required_string_to_list_of_string": {
            "name": "test_required_string_to_list_of_string",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_complex_input_to_complex_input": {
            "name": "test_complex_input_to_complex_input",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_complex_input_field_to_complex_input_field_0": {
            "name": "test_complex_input_field_to_complex_input_field_0",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_complex_input_field_to_complex_input_field_1": {
            "name": "test_complex_input_field_to_complex_input_field_1",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_req_boolean_to_req_boolean_in_directive": {
            "name": "test_req_boolean_to_req_boolean_in_directive",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_boolean_to_req_boolean_in_directive_with_default": {
            "name": "test_boolean_to_req_boolean_in_directive_with_default",
            "location": 223,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_int_to_required_int": {
            "name": "test_int_to_required_int",
            "location": 235,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_int_to_required_int_within_fragment": {
            "name": "test_int_to_required_int_within_fragment",
            "location": 251,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_int_to_required_int_within_nested_fragment": {
            "name": "test_int_to_required_int_within_nested_fragment",
            "location": 271,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_string_over_boolean": {
            "name": "test_string_over_boolean",
            "location": 295,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_string_to_list_of_string": {
            "name": "test_string_to_list_of_string",
            "location": 313,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema",
                    "str"
                ]
            }
        },
        "test_boolean_to_required_boolean_in_directive": {
            "name": "test_boolean_to_required_boolean_in_directive",
            "location": 331,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_string_to_required_boolean_in_directive": {
            "name": "test_string_to_required_boolean_in_directive",
            "location": 347,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "py_gql.schema.Schema",
                    "str"
                ]
            }
        },
        "test_list_of_string_to_list_of_required_string": {
            "name": "test_list_of_string_to_list_of_required_string",
            "location": 363,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_int_to_non_null_int_fails_when_variable_provides_null_default": {
            "name": "test_int_to_non_null_int_fails_when_variable_provides_null_default",
            "location": 381,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_int_to_non_null_int_ok_when_variable_provides_non_null_default": {
            "name": "test_int_to_non_null_int_ok_when_variable_provides_non_null_default",
            "location": 397,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_int_to_non_null_int_ok_when_optional_argument_provides_default": {
            "name": "test_int_to_non_null_int_ok_when_optional_argument_provides_default",
            "location": 411,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "py_gql.schema.Schema"
                ]
            }
        },
        "test_bool_to_non_null_bool_in_directive_with_default_with_option": {
            "name": "test_bool_to_non_null_bool_in_directive_with_default_with_option",
            "location": 425,
            "return": [
                ""
            ],
            "arguments": {
                "schema": [
                    "str",
                    "py_gql.schema.Schema"
                ]
            }
        }
    },
    "py-gql-master/tests/test_validation/rules/__init__.py": {}
}
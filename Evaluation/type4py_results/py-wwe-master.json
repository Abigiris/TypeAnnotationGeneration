{
    "py-wwe-master/setup.py": {},
    "py-wwe-master/tests/conftest.py": {
        "mock_config": {
            "name": "mock_config",
            "location": 7,
            "return": [
                "str",
                "Optional[int]",
                "int",
                "float"
            ],
            "arguments": {}
        },
        "mock_entry": {
            "name": "mock_entry",
            "location": 17,
            "return": [
                "int",
                "datetime.datetime",
                "str",
                "Optional[datetime.tzinfo]",
                "datetime.timedelta",
                "float"
            ],
            "arguments": {}
        }
    },
    "py-wwe-master/tests/test_cli.py": {
        "test_main": {
            "name": "test_main",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_end_date": {
            "name": "test_end_date",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "arguments": [
                    "Callable"
                ]
            }
        }
    },
    "py-wwe-master/tests/test_log.py": {
        "verbose_on": {
            "name": "verbose_on",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_format_log": {
            "name": "test_format_log",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "mock_entry": [
                    "bool"
                ],
                "verbose_on": [
                    "bool",
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        }
    },
    "py-wwe-master/tests/test_toggl.py": {
        "test_empty": {
            "name": "test_empty",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "mock_config": []
            }
        }
    },
    "py-wwe-master/tests/__debug__.py": {},
    "py-wwe-master/tests/__init__.py": {},
    "py-wwe-master/wwe/cli.py": {
        "partition_days_between": {
            "name": "partition_days_between",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "start_date": [
                    "datetime.datetime",
                    "int",
                    "Optional[datetime.datetime]",
                    "str",
                    "Tuple[int, int]"
                ],
                "end_date": [
                    "datetime.datetime",
                    "str",
                    "Optional[str]",
                    "datetime.date"
                ]
            }
        },
        "filter_out_weekends": {
            "name": "filter_out_weekends",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "times": [
                    "Callable",
                    "Optional[Any]",
                    "List[dict]",
                    "bytes",
                    "float",
                    "bool"
                ]
            }
        },
        "filter_out_non_working_hours": {
            "name": "filter_out_non_working_hours",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "times": [
                    "str",
                    "Optional[Tuple[Any, Any]]",
                    "Callable"
                ]
            }
        },
        "get_project_ids": {
            "name": "get_project_ids",
            "location": 48,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "target_client": [
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "t": [
                    "str",
                    "int"
                ]
            }
        },
        "is_work": {
            "name": "is_work",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "entry": [
                    "dict",
                    "List[str]",
                    "str",
                    "int"
                ],
                "work_projects": [
                    "dict",
                    "List[str]",
                    "str",
                    "int"
                ]
            }
        },
        "get_weekend_days_between": {
            "name": "get_weekend_days_between",
            "location": 80,
            "return": [
                "str",
                "dict",
                "set",
                "List[Dict[str, Any]]",
                "List[str]"
            ],
            "arguments": {
                "start": [
                    "datetime.datetime",
                    "int",
                    "datetime.date",
                    "str"
                ],
                "end": [
                    "datetime.datetime",
                    "int",
                    "datetime.date",
                    "str"
                ]
            }
        },
        "get_holiday_amount": {
            "name": "get_holiday_amount",
            "location": 91,
            "return": [
                "str",
                "dict",
                "set",
                "List[str]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "days": [
                    "Any",
                    "int",
                    "bool",
                    "List[str]",
                    "Optional[int]"
                ],
                "start": [
                    "datetime.datetime",
                    "int",
                    "bool",
                    "str"
                ],
                "end": [
                    "datetime.datetime",
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "get_personal_holidays_between": {
            "name": "get_personal_holidays_between",
            "location": 112,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "bool"
            ],
            "arguments": {
                "config": [
                    "int",
                    "dict"
                ],
                "start": [
                    "datetime.datetime",
                    "str",
                    "Optional[str]",
                    "Tuple[str, str, str, str, str, str, str]",
                    "List[int]"
                ],
                "end": [
                    "datetime.datetime",
                    "str",
                    "Optional[str]",
                    "Tuple[str, str, str, str, str, str, str]",
                    "List[int]"
                ]
            }
        },
        "get_company_holidays_between": {
            "name": "get_company_holidays_between",
            "location": 120,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "config": [
                    "datetime.datetime",
                    "Any",
                    "int",
                    "str"
                ],
                "start": [
                    "datetime.datetime",
                    "Any",
                    "int",
                    "str"
                ],
                "end": [
                    "datetime.datetime",
                    "Any",
                    "int",
                    "str"
                ]
            }
        },
        "format_balance": {
            "name": "format_balance",
            "location": 127,
            "return": [
                "bool",
                "int",
                "str",
                "Dict[str, Tuple[int, int]]"
            ],
            "arguments": {
                "delta": [
                    "int",
                    "List[str]",
                    "str",
                    "datetime.datetime",
                    "float"
                ]
            }
        },
        "print_balance": {
            "name": "print_balance",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "to_work": [
                    "datetime.datetime",
                    "Optional[str]",
                    "str"
                ],
                "worked": [
                    "datetime.datetime",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "verbose": [
                    "bool",
                    "str",
                    "int"
                ],
                "end": [
                    "int",
                    "datetime.datetime",
                    "Optional[datetime.datetime]",
                    "str"
                ]
            }
        }
    },
    "py-wwe-master/wwe/config.py": {
        "get_default_config_path": {
            "name": "get_default_config_path",
            "location": 7,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "load_config": {
            "name": "load_config",
            "location": 19,
            "return": [
                "Optional[List[str]]",
                "Dict[str, Dict[str, str]]",
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "int"
                ]
            }
        },
        "import_json_file": {
            "name": "import_json_file",
            "location": 32,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "py-wwe-master/wwe/gov.py": {
        "gov_uk_bank_holidays": {
            "name": "gov_uk_bank_holidays",
            "location": 9,
            "return": [
                "builtins.set"
            ],
            "arguments": {}
        },
        "gov_uk_bank_holidays_between": {
            "name": "gov_uk_bank_holidays_between",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "start": [
                    "int",
                    "Optional[int]"
                ],
                "end": [
                    "int",
                    "Optional[int]"
                ]
            }
        }
    },
    "py-wwe-master/wwe/log.py": {
        "set_verbose_mode": {
            "name": "set_verbose_mode",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "verbose_mode": [
                    "str"
                ]
            }
        },
        "format_log": {
            "name": "format_log",
            "location": 11,
            "return": [
                "str",
                "list",
                "bool",
                "datetime.datetime"
            ],
            "arguments": {
                "time_entry": [
                    "datetime.datetime",
                    "str",
                    "datetime.date",
                    "List[datetime.date]",
                    "datetime.time.delta"
                ]
            }
        }
    },
    "py-wwe-master/wwe/toggl.py": {
        "filter_entries": {
            "name": "filter_entries",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "entries": [
                    "str",
                    "float",
                    "int",
                    "bool",
                    "Optional[Any]"
                ],
                "filters": [
                    "str",
                    "float",
                    "int",
                    "bool",
                    "Optional[Any]"
                ]
            }
        },
        "ensure_datetime_timezone": {
            "name": "ensure_datetime_timezone",
            "location": 22,
            "return": [
                "str",
                "dict",
                "Iterable[Hashable]",
                "int"
            ],
            "arguments": {
                "timestamp": [
                    "Optional[str]",
                    "int",
                    "Optional[Callable]",
                    "Optional[Hashable]"
                ]
            }
        },
        "TogglWrap.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "TogglWrap.get_filtered_entries": {
            "name": "get_filtered_entries",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filters": [
                    "int",
                    "str",
                    "datetime.datetime"
                ],
                "start": [
                    "datetime.date",
                    "int",
                    "datetime.datetime",
                    "Optional[datetime.timedelta]",
                    "str"
                ],
                "end": [
                    "Optional[int]",
                    "float",
                    "int",
                    "datetime.datetime",
                    "Optional[str]"
                ]
            }
        },
        "TogglWrap._client_by_id": {
            "name": "_client_by_id",
            "location": 52,
            "return": [
                "List[str]",
                "str",
                "Union[List, Dict]",
                "Tuple[Any, Any, Any]",
                "List[Mapping[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "client_id": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TogglWrap._project_by_client": {
            "name": "_project_by_client",
            "location": 64,
            "return": [
                "dict",
                "bool",
                "List[object]",
                "Iterable[Type]",
                "Dict[str, Tuple[int, int]]",
                "Iterable"
            ],
            "arguments": {
                "self": [],
                "client_name": [
                    "str"
                ]
            }
        },
        "TogglWrap.clients": {
            "name": "clients",
            "location": 84,
            "return": [
                "dict",
                "Dict[str, Any]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "TogglWrap.projects": {
            "name": "projects",
            "location": 105,
            "return": [
                "Tuple[Dict[str, object], Dict[str, str]]",
                "Iterable[Type]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "py-wwe-master/wwe/toggl_api.py": {
        "write_toggl_timestamp": {
            "name": "write_toggl_timestamp",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "ts": [
                    "datetime.datetime",
                    "int",
                    "float"
                ]
            }
        },
        "read_toggl_timestamp": {
            "name": "read_toggl_timestamp",
            "location": 25,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "deserialize_toggl": {
            "name": "deserialize_toggl",
            "location": 35,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Hashable",
                    "Generator",
                    "dict"
                ]
            }
        },
        "TogglAPI.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "api_token": [
                    "Sequence",
                    "List[str]",
                    "str"
                ]
            }
        },
        "TogglAPI.get": {
            "name": "get",
            "location": 67,
            "return": [
                "int",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "section": [
                    "str"
                ],
                "params": [
                    "str"
                ]
            }
        },
        "TogglAPI.get_time_entries": {
            "name": "get_time_entries",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "start_date": [
                    "datetime.date",
                    "datetime.datetime",
                    "int"
                ],
                "end_date": [
                    "datetime.datetime",
                    "datetime.date",
                    "str",
                    "int"
                ]
            }
        },
        "TogglAPI.get_clients": {
            "name": "get_clients",
            "location": 117,
            "return": [
                "str",
                "Optional[str]",
                "Optional[Dict[str, Any]]",
                "Callable[[], T]",
                "Optional[Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "workspace_id": [
                    "str",
                    "int"
                ]
            }
        },
        "TogglAPI.get_projects": {
            "name": "get_projects",
            "location": 123,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "workspace_id": [
                    "str",
                    "int"
                ]
            }
        },
        "TogglAPI.get_workspaces": {
            "name": "get_workspaces",
            "location": 145,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TogglAPI.get_me": {
            "name": "get_me",
            "location": 169,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "py-wwe-master/wwe/__init__.py": {}
}
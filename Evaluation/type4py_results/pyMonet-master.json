{
    "pyMonet-master/conf.py": {},
    "pyMonet-master/setup.py": {},
    "pyMonet-master/pymonet/box.py": {
        "Box.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "Box.__eq__": {
            "name": "__eq__",
            "location": 20,
            "return": [
                "Optional[int]",
                "bool",
                "Optional[bool]",
                "int",
                "Optional[List[Any]]",
                "str",
                "Tuple[float, float]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Box.__str__": {
            "name": "__str__",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Box.map": {
            "name": "map",
            "location": 26,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": [],
                "mapper": [
                    "dict",
                    "str",
                    "List[str]",
                    "Maybe[A]"
                ]
            }
        },
        "Box.bind": {
            "name": "bind",
            "location": 37,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "mapper": [
                    "DefaultDict[int, List[Any]]",
                    "OrderedDict",
                    "str",
                    "int"
                ]
            }
        },
        "Box.ap": {
            "name": "ap",
            "location": 48,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": [],
                "applicative": [
                    "dict",
                    "str",
                    "List[str]",
                    "Maybe[A]"
                ]
            }
        },
        "Box.to_maybe": {
            "name": "to_maybe",
            "location": 59,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Box.to_either": {
            "name": "to_either",
            "location": 70,
            "return": [
                "str",
                "int",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Box.to_lazy": {
            "name": "to_lazy",
            "location": 81,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Box.to_try": {
            "name": "to_try",
            "location": 92,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Box.to_validation": {
            "name": "to_validation",
            "location": 103,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyMonet-master/pymonet/either.py": {
        "Either.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "Either.__eq__": {
            "name": "__eq__",
            "location": 17,
            "return": [
                "Optional[int]",
                "bool",
                "Optional[bool]",
                "int",
                "Optional[List[Any]]",
                "str",
                "Tuple[float, float]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T",
                    "Tuple[int, int]"
                ]
            }
        },
        "Either.case": {
            "name": "case",
            "location": 22,
            "return": [
                "int",
                "Dict[str, Any]",
                "float"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "List[str]",
                    "Mapping[str, Dict[str, Any]]",
                    "str"
                ],
                "success": [
                    "List[str]",
                    "Mapping[str, Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "Either.ap": {
            "name": "ap",
            "location": 37,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": [],
                "applicative": [
                    "dict",
                    "str",
                    "List[str]",
                    "Maybe[A]"
                ]
            }
        },
        "Either.to_box": {
            "name": "to_box",
            "location": 48,
            "return": [
                "str",
                "int",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Either.to_try": {
            "name": "to_try",
            "location": 59,
            "return": [
                "bool",
                "Callable",
                "Union[List[str], List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Either.to_lazy": {
            "name": "to_lazy",
            "location": 70,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Either.is_right": {
            "name": "is_right",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Left.map": {
            "name": "map",
            "location": 88,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Left.bind": {
            "name": "bind",
            "location": 97,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Left.ap": {
            "name": "ap",
            "location": 106,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "monad": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Left.is_left": {
            "name": "is_left",
            "location": 113,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Left.is_right": {
            "name": "is_right",
            "location": 120,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Left.to_maybe": {
            "name": "to_maybe",
            "location": 127,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Left.to_validation": {
            "name": "to_validation",
            "location": 138,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Right.map": {
            "name": "map",
            "location": 153,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": [],
                "mapper": [
                    "dict",
                    "str",
                    "List[str]",
                    "Maybe[A]"
                ]
            }
        },
        "Right.bind": {
            "name": "bind",
            "location": 164,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "mapper": [
                    "DefaultDict[int, List[Any]]",
                    "OrderedDict",
                    "str",
                    "int"
                ]
            }
        },
        "Right.is_right": {
            "name": "is_right",
            "location": 175,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Right.is_left": {
            "name": "is_left",
            "location": 182,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Right.to_maybe": {
            "name": "to_maybe",
            "location": 189,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Right.to_validation": {
            "name": "to_validation",
            "location": 200,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyMonet-master/pymonet/immutable_list.py": {
        "ImmutableList.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "head": [
                    "int",
                    "bool",
                    "Callable[[str], bool]",
                    "List[int]"
                ],
                "tail": [
                    "int",
                    "bool",
                    "Callable[[str], bool]",
                    "List[int]"
                ],
                "is_empty": [
                    "int",
                    "bool",
                    "Callable[[str], bool]",
                    "List[int]"
                ]
            }
        },
        "ImmutableList.__eq__": {
            "name": "__eq__",
            "location": 18,
            "return": [
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ImmutableList.__str__": {
            "name": "__str__",
            "location": 24,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableList.__add__": {
            "name": "__add__",
            "location": 27,
            "return": [
                "str",
                "Sequence[str]",
                "float",
                "List[str]",
                "list",
                "Iterable[float]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Deque",
                    "dict",
                    "List[Tuple[str, str]]",
                    "str",
                    "set"
                ]
            }
        },
        "ImmutableList.__len__": {
            "name": "__len__",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableList.of": {
            "name": "of",
            "location": 57,
            "return": [
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "list",
                    "Dict[str, Any]"
                ],
                "head": [
                    "T",
                    "List[str]",
                    "dict",
                    "Dict[str, List['WantedGallery']]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "ImmutableList.empty": {
            "name": "empty",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "ImmutableList.to_list": {
            "name": "to_list",
            "location": 71,
            "return": [
                "int",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImmutableList.append": {
            "name": "append",
            "location": 77,
            "return": [
                "Optional[Union[str, Any]]",
                "str",
                "Set[str]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "new_element": [
                    "List[str]",
                    "int",
                    "Sequence[str]",
                    "List[Tuple[bool, str]]",
                    "List[Dict[str, Any]]",
                    "List[int]"
                ]
            }
        },
        "ImmutableList.unshift": {
            "name": "unshift",
            "location": 88,
            "return": [
                "Optional[Union[str, Any]]",
                "str",
                "Set[str]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "new_element": [
                    "List[str]",
                    "int",
                    "Sequence[str]",
                    "List[Tuple[bool, str]]",
                    "List[Dict[str, Any]]",
                    "List[int]"
                ]
            }
        },
        "ImmutableList.map": {
            "name": "map",
            "location": 99,
            "return": [
                "List[Dict]",
                "List[int]",
                "float",
                "list",
                "List[float]",
                "Tuple[int, int, int]",
                "List[List[Any]]",
                "Sequence[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "str",
                    "bytes",
                    "Deque"
                ]
            }
        },
        "ImmutableList.filter": {
            "name": "filter",
            "location": 113,
            "return": [
                "str",
                "bool",
                "List[str]",
                "list",
                "Iterable[float]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "fn": []
            }
        },
        "ImmutableList.find": {
            "name": "find",
            "location": 132,
            "return": [
                "type",
                "str"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "dict",
                    "str",
                    "Optional[Dict]",
                    "Iterable[T]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ImmutableList.reduce": {
            "name": "reduce",
            "location": 149,
            "return": [
                "int",
                "float",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "pyMonet-master/pymonet/lazy.py": {
        "Lazy.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "constructor_fn": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Lazy.__str__": {
            "name": "__str__",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lazy.__eq__": {
            "name": "__eq__",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T",
                    "Tuple[int, int]"
                ]
            }
        },
        "Lazy.of": {
            "name": "of",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[Union[Any, Any]]",
                    "Pattern[str]",
                    "int",
                    "list",
                    "bool"
                ],
                "value": [
                    "str",
                    "float",
                    "Callable[..., None]",
                    "Callable[[], None]"
                ]
            }
        },
        "Lazy._compute_value": {
            "name": "_compute_value",
            "location": 50,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lazy.map": {
            "name": "map",
            "location": 56,
            "return": [
                "bool",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "mapper": [
                    "str",
                    "Callable"
                ]
            }
        },
        "Lazy.ap": {
            "name": "ap",
            "location": 68,
            "return": [
                "Iterable[str]",
                "bool",
                "List[List[str]]"
            ],
            "arguments": {
                "self": [],
                "applicative": [
                    "str",
                    "Optional[int]",
                    "dict",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "Lazy.bind": {
            "name": "bind",
            "location": 80,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Lazy.get": {
            "name": "get",
            "location": 95,
            "return": [
                "int",
                "str",
                "bool",
                "float",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lazy.to_box": {
            "name": "to_box",
            "location": 106,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lazy.to_either": {
            "name": "to_either",
            "location": 117,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lazy.to_maybe": {
            "name": "to_maybe",
            "location": 128,
            "return": [
                "int",
                "str",
                "Optional[List[Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lazy.to_try": {
            "name": "to_try",
            "location": 139,
            "return": [
                "bool",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lazy.to_validation": {
            "name": "to_validation",
            "location": 151,
            "return": [
                "int",
                "str",
                "Optional[List[Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lazy.bind.lambda_fn": {
            "name": "lambda_fn",
            "location": 89,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {}
        }
    },
    "pyMonet-master/pymonet/maybe.py": {
        "Maybe.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "T",
                    "str",
                    "bool",
                    "bytes"
                ],
                "is_nothing": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "Maybe.__eq__": {
            "name": "__eq__",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T",
                    "Tuple[int, int]"
                ]
            }
        },
        "Maybe.just": {
            "name": "just",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "T",
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "value": [
                    "bool",
                    "str",
                    "dict",
                    "list",
                    "Type[T]"
                ]
            }
        },
        "Maybe.nothing": {
            "name": "nothing",
            "location": 36,
            "return": [
                "Optional[str]",
                "bool",
                "Callable[..., None]",
                "tuple",
                "str",
                "bytes",
                "int",
                "float"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "Maybe.map": {
            "name": "map",
            "location": 44,
            "return": [
                "Optional[int]",
                "int",
                "float",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "mapper": [
                    "str",
                    "int"
                ]
            }
        },
        "Maybe.bind": {
            "name": "bind",
            "location": 60,
            "return": [
                "int",
                "str",
                "List[int]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "mapper": [
                    "DefaultDict[int, List[Any]]",
                    "OrderedDict",
                    "str",
                    "int"
                ]
            }
        },
        "Maybe.ap": {
            "name": "ap",
            "location": 73,
            "return": [
                "int",
                "Optional[int]",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "applicative": [
                    "dict",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Maybe.filter": {
            "name": "filter",
            "location": 87,
            "return": [
                "Dict[str, int]",
                "Optional[int]",
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "filterer": [
                    "dict"
                ]
            }
        },
        "Maybe.get_or_else": {
            "name": "get_or_else",
            "location": 101,
            "return": [
                "int",
                "Optional[str]",
                "str",
                "float",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "default_value": [
                    "T",
                    "str",
                    "dict",
                    "KT",
                    "bool",
                    "int"
                ]
            }
        },
        "Maybe.to_either": {
            "name": "to_either",
            "location": 114,
            "return": [
                "Optional[str]",
                "str",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maybe.to_box": {
            "name": "to_box",
            "location": 127,
            "return": [
                "Optional[str]",
                "str",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maybe.to_lazy": {
            "name": "to_lazy",
            "location": 140,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maybe.to_try": {
            "name": "to_try",
            "location": 153,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maybe.to_validation": {
            "name": "to_validation",
            "location": 166,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyMonet-master/pymonet/monad_try.py": {
        "Try.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "T",
                    "str",
                    "bool",
                    "bytes"
                ],
                "is_success": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "Try.__eq__": {
            "name": "__eq__",
            "location": 14,
            "return": [
                "str",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[T]"
                ]
            }
        },
        "Try.__str__": {
            "name": "__str__",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Try.of": {
            "name": "of",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "tuple",
                    "str",
                    "Dict[str, Any]"
                ],
                "fn": [
                    "Callable",
                    "Optional[str]",
                    "str",
                    "Callable[..., T]"
                ]
            }
        },
        "Try.map": {
            "name": "map",
            "location": 40,
            "return": [
                "bool",
                "Optional[str]",
                "Dict[str, Any]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "mapper": [
                    "List[dict]",
                    "Iterable[Mapping[str, Any]]",
                    "Iterable['cirq.Qid']",
                    "Iterable[int]"
                ]
            }
        },
        "Try.bind": {
            "name": "bind",
            "location": 53,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "binder": [
                    "DefaultDict[int, List[Any]]",
                    "OrderedDict",
                    "str",
                    "int"
                ]
            }
        },
        "Try.on_success": {
            "name": "on_success",
            "location": 66,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "success_callback": [
                    "dict",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Try.on_fail": {
            "name": "on_fail",
            "location": 79,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "fail_callback": [
                    "dict",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Try.filter": {
            "name": "filter",
            "location": 92,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "filterer": [
                    "dict"
                ]
            }
        },
        "Try.get": {
            "name": "get",
            "location": 107,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Try.get_or_else": {
            "name": "get_or_else",
            "location": 116,
            "return": [
                "str",
                "int",
                "Optional[int]",
                "bool",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "default_value": [
                    "T",
                    "str",
                    "dict",
                    "KT",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "pyMonet-master/pymonet/semigroups.py": {
        "Semigroup.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "Semigroup.__eq__": {
            "name": "__eq__",
            "location": 13,
            "return": [
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Semigroup.fold": {
            "name": "fold",
            "location": 16,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "DefaultDict[int, List[Any]]",
                    "OrderedDict",
                    "str",
                    "int"
                ]
            }
        },
        "Semigroup.neutral": {
            "name": "neutral",
            "location": 20,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[int]",
                    "bool",
                    "Type",
                    "complex",
                    "bytes"
                ]
            }
        },
        "Sum.__str__": {
            "name": "__str__",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sum.concat": {
            "name": "concat",
            "location": 34,
            "return": [
                "int",
                "bool",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "semigroup": [
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "All.__str__": {
            "name": "__str__",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "All.concat": {
            "name": "concat",
            "location": 54,
            "return": [
                "str",
                "Awaitable[None]",
                "bool",
                "float",
                "Union[dict, list]",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "semigroup": [
                    "int",
                    "set",
                    "Optional[str]"
                ]
            }
        },
        "One.__str__": {
            "name": "__str__",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "One.concat": {
            "name": "concat",
            "location": 74,
            "return": [
                "int",
                "float",
                "bool",
                "str",
                "List[int]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "semigroup": [
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "First.__str__": {
            "name": "__str__",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "First.concat": {
            "name": "concat",
            "location": 92,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "semigroup": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Last.__str__": {
            "name": "__str__",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Last.concat": {
            "name": "concat",
            "location": 110,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "List[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "semigroup": [
                    "dict",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Map.__str__": {
            "name": "__str__",
            "location": 125,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Map.concat": {
            "name": "concat",
            "location": 128,
            "return": [
                "bool",
                "Tuple[int, int]",
                "Sequence",
                "list"
            ],
            "arguments": {
                "self": [],
                "semigroup": [
                    "Match"
                ]
            }
        },
        "Max.__str__": {
            "name": "__str__",
            "location": 147,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Max.concat": {
            "name": "concat",
            "location": 150,
            "return": [
                "int",
                "bool",
                "str",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "semigroup": [
                    "bool"
                ]
            }
        },
        "Min.__str__": {
            "name": "__str__",
            "location": 167,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Min.concat": {
            "name": "concat",
            "location": 170,
            "return": [
                "int",
                "bool",
                "str",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "semigroup": [
                    "bool"
                ]
            }
        }
    },
    "pyMonet-master/pymonet/task.py": {
        "Task.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fork": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Task.of": {
            "name": "of",
            "location": 15,
            "return": [
                "bool",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[Union[Any, Any]]",
                    "Pattern[str]",
                    "int",
                    "list",
                    "bool"
                ],
                "value": [
                    "str",
                    "bytes",
                    "Union[str, Sequence[str]]"
                ]
            }
        },
        "Task.reject": {
            "name": "reject",
            "location": 27,
            "return": [
                "List[str]",
                "bytes",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "T",
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "value": [
                    "T",
                    "Union[float, int]",
                    "str",
                    "Callable[[Any], T]"
                ]
            }
        },
        "Task.map": {
            "name": "map",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Task.bind": {
            "name": "bind",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Task.map.result": {
            "name": "result",
            "location": 48,
            "return": [],
            "arguments": {
                "reject": [],
                "resolve": []
            }
        },
        "Task.bind.result": {
            "name": "result",
            "location": 66,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "reject": [
                    "set",
                    "int",
                    "Union[\"RangeSet[T]\", Iterable[Any]]",
                    "Sequence[str]"
                ],
                "resolve": [
                    "set",
                    "int",
                    "Union[\"RangeSet[T]\", Iterable[Any]]",
                    "Sequence[str]"
                ]
            }
        }
    },
    "pyMonet-master/pymonet/utils.py": {
        "curry": {
            "name": "curry",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "int"
                ],
                "args_count": [
                    "bool",
                    "int"
                ]
            }
        },
        "identity": {
            "name": "identity",
            "location": 25,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "increase": {
            "name": "increase",
            "location": 37,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "eq": {
            "name": "eq",
            "location": 50,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "value": [
                    "float",
                    "str",
                    "Union[str, list]"
                ],
                "value1": [
                    "float",
                    "str",
                    "Union[str, list]"
                ]
            }
        },
        "curried_map": {
            "name": "curried_map",
            "location": 55,
            "return": [
                "str",
                "list",
                "Optional[dict]",
                "int",
                "Sequence[int]",
                "Counter"
            ],
            "arguments": {
                "mapper": [
                    "Set[int]",
                    "int",
                    "list",
                    "Iterable[Any]",
                    "List[float]",
                    "T"
                ],
                "collection": [
                    "Set[int]",
                    "int",
                    "list",
                    "Iterable[Any]",
                    "List[float]",
                    "T"
                ]
            }
        },
        "curried_filter": {
            "name": "curried_filter",
            "location": 60,
            "return": [
                "List[str]",
                "str",
                "dict",
                "list",
                "Union[int, None]"
            ],
            "arguments": {
                "filterer": [
                    "dict",
                    "Dict[str, float]",
                    "Type",
                    "Mapping",
                    "Dict[str, Any]"
                ],
                "collection": [
                    "dict",
                    "Dict[str, float]",
                    "Type",
                    "Mapping",
                    "Dict[str, Any]"
                ]
            }
        },
        "find": {
            "name": "find",
            "location": 65,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "Iterable[str]"
            ],
            "arguments": {
                "collection": [
                    "List[T]",
                    "bytes",
                    "str",
                    "Sequence[T]",
                    "int",
                    "Optional[bytes]"
                ],
                "key": [
                    "Callable[[T], bool]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "compose": {
            "name": "compose",
            "location": 81,
            "return": [
                "str",
                "tuple",
                "Type"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "pipe": {
            "name": "pipe",
            "location": 99,
            "return": [
                "str",
                "tuple",
                "Type"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "cond": {
            "name": "cond",
            "location": 117,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "condition_list": [
                    "List[Tuple[str, str]]",
                    "Sequence[dict]",
                    "list",
                    "List[str]",
                    "Iterator[tuple]",
                    "bool"
                ]
            }
        },
        "memoize": {
            "name": "memoize",
            "location": 140,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "Callable"
                ],
                "key": [
                    "str",
                    "Callable"
                ]
            }
        },
        "curry.fn": {
            "name": "fn",
            "location": 18,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "cond.result": {
            "name": "result",
            "location": 132,
            "return": [],
            "arguments": {}
        },
        "memoize.memoized_fn": {
            "name": "memoized_fn",
            "location": 156,
            "return": [],
            "arguments": {
                "argument": []
            }
        }
    },
    "pyMonet-master/pymonet/validation.py": {
        "Validation.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "dict",
                    "List[str]"
                ],
                "errors": [
                    "Optional[List[str]]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Validation.__eq__": {
            "name": "__eq__",
            "location": 8,
            "return": [
                "Iterable[str]",
                "str",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Validation.__str__": {
            "name": "__str__",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Validation.success": {
            "name": "success",
            "location": 22,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "T",
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "value": [
                    "T",
                    "str",
                    "bytes",
                    "float",
                    "Callable[[object], Any]",
                    "type"
                ]
            }
        },
        "Validation.fail": {
            "name": "fail",
            "location": 34,
            "return": [
                "tuple",
                "str",
                "Callable",
                "type"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Union[Type[Exception], Tuple[Any, ...]]",
                    "bool",
                    "Exception"
                ],
                "errors": [
                    "str",
                    "Optional[float]",
                    "Optional[str]"
                ]
            }
        },
        "Validation.is_success": {
            "name": "is_success",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Validation.is_fail": {
            "name": "is_fail",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Validation.map": {
            "name": "map",
            "location": 63,
            "return": [
                "int",
                "Generator",
                "str"
            ],
            "arguments": {
                "self": [],
                "mapper": [
                    "str",
                    "int",
                    "Tuple[float, float, float]"
                ]
            }
        },
        "Validation.bind": {
            "name": "bind",
            "location": 74,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "DefaultDict[int, List[Any]]",
                    "OrderedDict",
                    "str",
                    "int"
                ]
            }
        },
        "Validation.ap": {
            "name": "ap",
            "location": 85,
            "return": [
                "Tuple[str, str]",
                "int",
                "dict",
                "str",
                "Exception",
                "Type"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "bool"
                ]
            }
        },
        "Validation.to_either": {
            "name": "to_either",
            "location": 98,
            "return": [
                "int",
                "Optional[int]",
                "List[int]",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Validation.to_maybe": {
            "name": "to_maybe",
            "location": 111,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Validation.to_box": {
            "name": "to_box",
            "location": 124,
            "return": [
                "str",
                "int",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Validation.to_lazy": {
            "name": "to_lazy",
            "location": 135,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Validation.to_try": {
            "name": "to_try",
            "location": 146,
            "return": [
                "bool",
                "Callable",
                "Union[List[str], List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyMonet-master/pymonet/__init__.py": {},
    "pyMonet-master/testers/applicative_law_tester.py": {
        "ApplicativeLawTester.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "applicative": [
                    "bool",
                    "List[cmk.gui.plugins.views.utils.Cell]",
                    "int",
                    "List[int]"
                ],
                "value": [
                    "bool",
                    "Optional[int]",
                    "set",
                    "bytes"
                ],
                "mapper1": [
                    "bool",
                    "List[cmk.gui.plugins.views.utils.Cell]",
                    "int",
                    "List[int]"
                ],
                "mapper2": [
                    "bool",
                    "List[cmk.gui.plugins.views.utils.Cell]",
                    "int",
                    "List[int]"
                ],
                "get_fn": [
                    "int",
                    "Dict[int, dict]",
                    "bool",
                    "tuple",
                    "str"
                ]
            }
        },
        "ApplicativeLawTester._assert": {
            "name": "_assert",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "mode.utils.Deque[T]",
                    "int",
                    "Iterable[T]",
                    "Sequence[T]",
                    "Union[bytearray, List[int]]"
                ],
                "y": [
                    "mode.utils.Deque[T]",
                    "int",
                    "Iterable[T]",
                    "Sequence[T]",
                    "Union[bytearray, List[int]]"
                ]
            }
        },
        "ApplicativeLawTester.identity_test": {
            "name": "identity_test",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApplicativeLawTester.composition_test": {
            "name": "composition_test",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApplicativeLawTester.homomorphism_test": {
            "name": "homomorphism_test",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApplicativeLawTester.interchange_test": {
            "name": "interchange_test",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApplicativeLawTester.test": {
            "name": "test",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApplicativeLawTester.composition_test.lambda_fn": {
            "name": "lambda_fn",
            "location": 23,
            "return": [
                "Optional[int]",
                "int",
                "List[int]",
                "float",
                "Optional[bool]"
            ],
            "arguments": {
                "fn1": [
                    "Optional[Tuple[str, ...]]",
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "Dict[str, float]"
                ]
            }
        }
    },
    "pyMonet-master/testers/functor_law_tester.py": {
        "FunctorLawTester.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "functor": [
                    "int",
                    "float",
                    "bool"
                ],
                "mapper1": [
                    "int",
                    "float",
                    "bool"
                ],
                "mapper2": [
                    "int",
                    "float",
                    "bool"
                ],
                "get_fn": [
                    "int",
                    "tuple",
                    "bool"
                ]
            }
        },
        "FunctorLawTester._assert": {
            "name": "_assert",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "mode.utils.Deque[T]",
                    "int",
                    "Iterable[T]",
                    "Sequence[T]",
                    "Union[bytearray, List[int]]"
                ],
                "y": [
                    "mode.utils.Deque[T]",
                    "int",
                    "Iterable[T]",
                    "Sequence[T]",
                    "Union[bytearray, List[int]]"
                ]
            }
        },
        "FunctorLawTester.identity_law_test": {
            "name": "identity_law_test",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctorLawTester.composition_law_test": {
            "name": "composition_law_test",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctorLawTester.test": {
            "name": "test",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "run_identity_law_test": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "List[Dict[str, Any]]"
                ],
                "run_composition_law_test": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "List[Dict[str, Any]]"
                ]
            }
        }
    },
    "pyMonet-master/testers/monad_law_tester.py": {
        "MonadLawTester.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "monad": [
                    "bool",
                    "List[cmk.gui.plugins.views.utils.Cell]",
                    "int",
                    "List[int]"
                ],
                "value": [
                    "bool",
                    "Optional[int]",
                    "set",
                    "bytes"
                ],
                "mapper1": [
                    "bool",
                    "List[cmk.gui.plugins.views.utils.Cell]",
                    "int",
                    "List[int]"
                ],
                "mapper2": [
                    "bool",
                    "List[cmk.gui.plugins.views.utils.Cell]",
                    "int",
                    "List[int]"
                ],
                "get_fn": [
                    "int",
                    "Dict[int, dict]",
                    "bool",
                    "tuple",
                    "str"
                ]
            }
        },
        "MonadLawTester._assert": {
            "name": "_assert",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "mode.utils.Deque[T]",
                    "int",
                    "Iterable[T]",
                    "Sequence[T]",
                    "Union[bytearray, List[int]]"
                ],
                "y": [
                    "mode.utils.Deque[T]",
                    "int",
                    "Iterable[T]",
                    "Sequence[T]",
                    "Union[bytearray, List[int]]"
                ]
            }
        },
        "MonadLawTester.associativity_test": {
            "name": "associativity_test",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MonadLawTester.left_unit_test": {
            "name": "left_unit_test",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MonadLawTester.right_unit_test": {
            "name": "right_unit_test",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MonadLawTester.test": {
            "name": "test",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "run_associativity_law_test": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "run_left_law_test": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "run_right_law_test": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "pyMonet-master/testers/monad_transform_tester.py": {
        "MonadTransformTester.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "monad": [
                    "str",
                    "bool",
                    "bytes",
                    "Callable",
                    "int"
                ],
                "value": [
                    "float",
                    "int",
                    "str"
                ],
                "is_fail": [
                    "str",
                    "bool",
                    "bytes",
                    "Callable",
                    "int"
                ]
            }
        },
        "MonadTransformTester.to_box_test": {
            "name": "to_box_test",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MonadTransformTester.to_maybe_test": {
            "name": "to_maybe_test",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MonadTransformTester.to_either_test": {
            "name": "to_either_test",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MonadTransformTester.to_lazy_test": {
            "name": "to_lazy_test",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MonadTransformTester.to_try_test": {
            "name": "to_try_test",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MonadTransformTester.to_validation_test": {
            "name": "to_validation_test",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MonadTransformTester.test": {
            "name": "test",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "run_to_box_test": [
                    "bool",
                    "str",
                    "int"
                ],
                "run_to_maybe_test": [
                    "bool",
                    "str",
                    "int"
                ],
                "run_to_either_test": [
                    "bool",
                    "str",
                    "int"
                ],
                "run_to_lazy_test": [
                    "bool",
                    "str",
                    "int"
                ],
                "run_to_try_test": [
                    "bool",
                    "str",
                    "int"
                ],
                "run_to_validation_test": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        }
    },
    "pyMonet-master/testers/monoid_law_tester.py": {
        "MonoidLawTester.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "monoid": [
                    "List[Tuple[int, float]]",
                    "int",
                    "float",
                    "str"
                ],
                "value": [
                    "float",
                    "str",
                    "int",
                    "Callable[[None], bool]"
                ]
            }
        },
        "MonoidLawTester.left_identity_test": {
            "name": "left_identity_test",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MonoidLawTester.right_identity_test": {
            "name": "right_identity_test",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MonoidLawTester.test": {
            "name": "test",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyMonet-master/testers/semigroup_law_tester.py": {
        "SemigroupLawTester.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "semigroup": [
                    "str",
                    "Optional[int]",
                    "Type[T]",
                    "bool"
                ],
                "value1": [
                    "str",
                    "T",
                    "int",
                    "bytes"
                ],
                "value2": [
                    "str",
                    "T",
                    "int",
                    "bytes"
                ],
                "value3": [
                    "str",
                    "T",
                    "int",
                    "bytes"
                ],
                "result": [
                    "bool",
                    "Counter",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "tuple"
                ]
            }
        },
        "SemigroupLawTester.associativity_test": {
            "name": "associativity_test",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SemigroupLawTester.test": {
            "name": "test",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyMonet-master/testers/__init__.py": {},
    "pyMonet-master/tests/test_box.py": {
        "test_eq_should_compare_only_box_value": {
            "name": "test_eq_should_compare_only_box_value",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_map_should_return_box_with_mapped_value": {
            "name": "test_map_should_return_box_with_mapped_value",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_map_should_return_new_instance_of_box": {
            "name": "test_map_should_return_new_instance_of_box",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_fold_should_return_result_of_fold_function_called_with_box_value": {
            "name": "test_fold_should_return_result_of_fold_function_called_with_box_value",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_box_monad_law": {
            "name": "test_box_monad_law",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "integer": [
                    "cmk.utils.type_defs.EventRule"
                ]
            }
        },
        "test_box_functor_law": {
            "name": "test_box_functor_law",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "integer": []
            }
        },
        "test_box_transform_monad": {
            "name": "test_box_transform_monad",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "integer": []
            }
        },
        "test_box_applicative_law": {
            "name": "test_box_applicative_law",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "integer": [
                    "cmk.utils.type_defs.EventRule"
                ]
            }
        }
    },
    "pyMonet-master/tests/test_either.py": {
        "either_spy": {
            "name": "either_spy",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_either_eq_operator_should_compare_values": {
            "name": "test_either_eq_operator_should_compare_values",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "integer": []
            }
        },
        "test_mapper_should_be_applied_only_on_current_value": {
            "name": "test_mapper_should_be_applied_only_on_current_value",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "integer": []
            }
        },
        "test_is_right_should_return_suitable_value": {
            "name": "test_is_right_should_return_suitable_value",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "integer": []
            }
        },
        "test_is_left_should_return_suitable_value": {
            "name": "test_is_left_should_return_suitable_value",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "integer": []
            }
        },
        "test_bind_should_be_applied_only_on_current_value_and_return_value": {
            "name": "test_bind_should_be_applied_only_on_current_value_and_return_value",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_case_method_should_call_proper_handler": {
            "name": "test_case_method_should_call_proper_handler",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "either_spy": [
                    "int"
                ]
            }
        },
        "test_either_monad_law": {
            "name": "test_either_monad_law",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "integer": [
                    "cmk.utils.type_defs.EventRule",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_either_functor_law": {
            "name": "test_either_functor_law",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "integer": []
            }
        },
        "test_either_transform": {
            "name": "test_either_transform",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "integer": [
                    "str",
                    "set"
                ]
            }
        },
        "test_either_applicative_law": {
            "name": "test_either_applicative_law",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "integer": [
                    "cmk.utils.type_defs.EventRule"
                ]
            }
        },
        "test_either_ap_on_left_should_not_be_applied": {
            "name": "test_either_ap_on_left_should_not_be_applied",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "integer": []
            }
        },
        "EitherSpy.error_handler": {
            "name": "error_handler",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "int",
                    "bool",
                    "T",
                    "Tuple[str, int]",
                    "str"
                ]
            }
        },
        "EitherSpy.success_handler": {
            "name": "success_handler",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "test_either_ap_on_left_should_not_be_applied.lambda_fn": {
            "name": "lambda_fn",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pyMonet-master/tests/test_immutable_list.py": {
        "test_eq": {
            "name": "test_eq",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_immutable": {
            "name": "test_immutable",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_to_list": {
            "name": "test_to_list",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_of": {
            "name": "test_of",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_map": {
            "name": "test_map",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_filter": {
            "name": "test_filter",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_empty_filter": {
            "name": "test_empty_filter",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_plus_operator": {
            "name": "test_plus_operator",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_plus_operator_exception": {
            "name": "test_plus_operator_exception",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_find_positive": {
            "name": "test_find_positive",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_find_negative": {
            "name": "test_find_negative",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_unshift": {
            "name": "test_unshift",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_append": {
            "name": "test_append",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pyMonet-master/tests/test_lazy.py": {
        "lazy_spy": {
            "name": "lazy_spy",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "fn": {
            "name": "fn",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "fn1": {
            "name": "fn1",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_applicative_should_call_stored_function_during_fold_method_call": {
            "name": "test_applicative_should_call_stored_function_during_fold_method_call",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "lazy_spy": []
            }
        },
        "test_applicative_should_not_call_mapper_until_call_get": {
            "name": "test_applicative_should_not_call_mapper_until_call_get",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "lazy_spy": [
                    "int",
                    "str"
                ]
            }
        },
        "test_applicative_should_not_call_binder_until_call_get": {
            "name": "test_applicative_should_not_call_binder_until_call_get",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "lazy_spy": []
            }
        },
        "test_applicative_should_call_memoize_saved_value": {
            "name": "test_applicative_should_call_memoize_saved_value",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "lazy_spy": []
            }
        },
        "test_applicative_eq": {
            "name": "test_applicative_eq",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_applicative_eq_evaluated": {
            "name": "test_applicative_eq_evaluated",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_applicative_eq_value": {
            "name": "test_applicative_eq_value",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_transform_to_validation_should_validation": {
            "name": "test_transform_to_validation_should_validation",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "integer": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_lazy_applicative": {
            "name": "test_lazy_applicative",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "integer": []
            }
        },
        "test_lazy_functor_law": {
            "name": "test_lazy_functor_law",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "integer": []
            }
        },
        "test_lazy_transform_monad": {
            "name": "test_lazy_transform_monad",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "integer": []
            }
        },
        "test_lazy_monad_laws": {
            "name": "test_lazy_monad_laws",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "integer": []
            }
        },
        "test_lazy_applicative_laws": {
            "name": "test_lazy_applicative_laws",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "integer": [
                    "cmk.utils.type_defs.EventRule"
                ]
            }
        },
        "test_lazy_monad_laws.get_fn": {
            "name": "get_fn",
            "location": 160,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "lazy": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "Callable",
                    "dict"
                ]
            }
        },
        "lazy_spy.LazySpy.mapper": {
            "name": "mapper",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "lazy_spy.LazySpy.fn": {
            "name": "fn",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "lazy_spy.LazySpy.binder": {
            "name": "binder",
            "location": 29,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        }
    },
    "pyMonet-master/tests/test_maybe.py": {
        "maybe_spy": {
            "name": "maybe_spy",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_maybe_eq_operator_should_compare_values": {
            "name": "test_maybe_eq_operator_should_compare_values",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "integer": [
                    "Sequence[str]",
                    "Maybe[_T]"
                ]
            }
        },
        "test_maybe_map_operator_should_be_applied_only_on_just_value": {
            "name": "test_maybe_map_operator_should_be_applied_only_on_just_value",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "integer": []
            }
        },
        "test_maybe_map_should_not_call_mapper_when_monad_has_nothing": {
            "name": "test_maybe_map_should_not_call_mapper_when_monad_has_nothing",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "maybe_spy": [
                    "dict"
                ]
            }
        },
        "test_maybe_bind_should_retrun_result_of_mapper_called_with_maybe_value": {
            "name": "test_maybe_bind_should_retrun_result_of_mapper_called_with_maybe_value",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "maybe_spy": [
                    "str"
                ]
            }
        },
        "test_maybe_bind_should_not_call_mapper_when_monad_has_nothing": {
            "name": "test_maybe_bind_should_not_call_mapper_when_monad_has_nothing",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "maybe_spy": [
                    "dict"
                ]
            }
        },
        "test_maybe_get_or_else_method_should_return_maybe_value_when_monad_is_not_empty": {
            "name": "test_maybe_get_or_else_method_should_return_maybe_value_when_monad_is_not_empty",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "integer": [
                    "Callable"
                ]
            }
        },
        "test_maybe_get_or_else_method_should_return_argument_when_monad_is_empty": {
            "name": "test_maybe_get_or_else_method_should_return_argument_when_monad_is_empty",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "integer": []
            }
        },
        "test_maybe_is_nothing_should_return_proper_boolean": {
            "name": "test_maybe_is_nothing_should_return_proper_boolean",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "integer": [
                    "str"
                ]
            }
        },
        "test_maybe_if_filter_returns_false_method_should_return_empty_maybe": {
            "name": "test_maybe_if_filter_returns_false_method_should_return_empty_maybe",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_maybe_if_filter_returns_true_method_should_return_self": {
            "name": "test_maybe_if_filter_returns_true_method_should_return_self",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_maybe_monad_law": {
            "name": "test_maybe_monad_law",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "integer": [
                    "dict",
                    "Union[int, float]",
                    "Optional[Exception]"
                ]
            }
        },
        "test_maybe_functor_law": {
            "name": "test_maybe_functor_law",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "integer": [
                    "Union[int, float]",
                    "str"
                ]
            }
        },
        "test_maybe_transform": {
            "name": "test_maybe_transform",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "integer": []
            }
        },
        "test_maybe_applicative_law": {
            "name": "test_maybe_applicative_law",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "integer": []
            }
        },
        "test_maybe_ap_on_empty_maybe_should_not_be_applied": {
            "name": "test_maybe_ap_on_empty_maybe_should_not_be_applied",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "MaybeSpy.mapper": {
            "name": "mapper",
            "location": 21,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "MaybeSpy.binder": {
            "name": "binder",
            "location": 24,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "test_maybe_ap_on_empty_maybe_should_not_be_applied.lambda_fn": {
            "name": "lambda_fn",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pyMonet-master/tests/test_semigroups.py": {
        "test_sum_semigroup": {
            "name": "test_sum_semigroup",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "float",
                    "Sequence['cirq.Qid']"
                ],
                "y": [
                    "float",
                    "Sequence['cirq.Qid']"
                ],
                "z": [
                    "float",
                    "Sequence['cirq.Qid']"
                ]
            }
        },
        "test_sum_monoid": {
            "name": "test_sum_monoid",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "integer": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_max_semigroup": {
            "name": "test_max_semigroup",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "float",
                    "Sequence['cirq.Qid']"
                ],
                "y": [
                    "float",
                    "Sequence['cirq.Qid']"
                ],
                "z": [
                    "float",
                    "Sequence['cirq.Qid']"
                ]
            }
        },
        "test_max_monoid": {
            "name": "test_max_monoid",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "integer": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_min_semigroup": {
            "name": "test_min_semigroup",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "float",
                    "Sequence['cirq.Qid']"
                ],
                "y": [
                    "float",
                    "Sequence['cirq.Qid']"
                ],
                "z": [
                    "float",
                    "Sequence['cirq.Qid']"
                ]
            }
        },
        "test_min_monoid": {
            "name": "test_min_monoid",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "integer": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_all": {
            "name": "test_all",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "bool1": [
                    "bool"
                ],
                "bool2": [
                    "bool"
                ],
                "bool3": [
                    "bool"
                ]
            }
        },
        "test_all_monoid": {
            "name": "test_all_monoid",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "boolean": [
                    "Mapping[str, Any]",
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "test_one": {
            "name": "test_one",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "bool1": [
                    "int",
                    "bool"
                ],
                "bool2": [
                    "int",
                    "bool"
                ],
                "bool3": [
                    "int",
                    "bool"
                ]
            }
        },
        "test_one_monoid": {
            "name": "test_one_monoid",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "boolean": [
                    "str"
                ]
            }
        },
        "test_first_semigroup": {
            "name": "test_first_semigroup",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "text1": [
                    "str",
                    "Dict[str, Any]",
                    "Callable"
                ],
                "text2": [
                    "str",
                    "Dict[str, Any]",
                    "Callable"
                ],
                "text3": [
                    "str",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "test_last_semigroup": {
            "name": "test_last_semigroup",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "text1": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "Optional[float]"
                ],
                "text2": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "Optional[float]"
                ],
                "text3": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "test_map": {
            "name": "test_map",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "integer1": [
                    "bool",
                    "str",
                    "Callable"
                ],
                "integer2": [
                    "bool",
                    "str",
                    "Callable"
                ],
                "integer3": [
                    "bool",
                    "str",
                    "Callable"
                ],
                "boolean1": [
                    "bool",
                    "str",
                    "Callable"
                ],
                "boolean2": [
                    "bool",
                    "str",
                    "Callable"
                ],
                "boolean3": [
                    "bool",
                    "str",
                    "Callable"
                ],
                "text1": [
                    "bool",
                    "str",
                    "Callable"
                ],
                "text2": [
                    "bool",
                    "str",
                    "Callable"
                ],
                "text3": [
                    "bool",
                    "str",
                    "Callable"
                ]
            }
        },
        "test_fold": {
            "name": "test_fold",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "integer": [
                    "List[int]",
                    "str",
                    "Iterable[str]",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "text": [
                    "str"
                ],
                "boolean": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Tuple[float, float, float, float]"
                ],
                "dictionary": [
                    "str",
                    "Tuple[str, str]"
                ]
            }
        }
    },
    "pyMonet-master/tests/test_task.py": {
        "task_spy": {
            "name": "task_spy",
            "location": 38,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "raiden.utils.Address"
                ]
            }
        },
        "test_task_resolved_fork_should_be_called_only_during_calling_fork": {
            "name": "test_task_resolved_fork_should_be_called_only_during_calling_fork",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "task_spy": [
                    "Awaitable",
                    "tasks.Task"
                ]
            }
        },
        "test_task_rejected_fork_should_be_called_only_during_calling_fork": {
            "name": "test_task_rejected_fork_should_be_called_only_during_calling_fork",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "task_spy": [
                    "Awaitable",
                    "tasks.Task"
                ]
            }
        },
        "test_task_resolved_fork_should_return_resolved_value": {
            "name": "test_task_resolved_fork_should_return_resolved_value",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_task_rejected_fork_should_return_resolved_value": {
            "name": "test_task_rejected_fork_should_return_resolved_value",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_task_mapper_should_be_called_during_calling_fork": {
            "name": "test_task_mapper_should_be_called_during_calling_fork",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "task_spy": []
            }
        },
        "test_task_rejected_fork_should_not_applied_map_on_his_result": {
            "name": "test_task_rejected_fork_should_not_applied_map_on_his_result",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_task_resolved_fork_should_applied_map_on_his_result": {
            "name": "test_task_resolved_fork_should_applied_map_on_his_result",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_task_rejected_fork_should_not_applied_bind_on_his_result": {
            "name": "test_task_rejected_fork_should_not_applied_bind_on_his_result",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_task_resolved_fork_should_applied_bind_on_his_result": {
            "name": "test_task_resolved_fork_should_applied_bind_on_his_result",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_task_of_should_applied_only_resolve_callback": {
            "name": "test_task_of_should_applied_only_resolve_callback",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "task_spy": [
                    "utils.clienClient"
                ]
            }
        },
        "test_task_of_should_applied_only_reject_callback": {
            "name": "test_task_of_should_applied_only_reject_callback",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "task_spy": []
            }
        },
        "test_task_functor_laws": {
            "name": "test_task_functor_laws",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "integer": [
                    "bool",
                    "int"
                ]
            }
        },
        "test_task_monad_laws": {
            "name": "test_task_monad_laws",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "integer": [
                    "str",
                    "float",
                    "dict"
                ]
            }
        },
        "TaskSpy.resolved": {
            "name": "resolved",
            "location": 15,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "TaskSpy.rejected": {
            "name": "rejected",
            "location": 18,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "TaskSpy.mapper": {
            "name": "mapper",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TaskSpy.side_effect": {
            "name": "side_effect",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TaskSpy.binder": {
            "name": "binder",
            "location": 27,
            "return": [
                "str",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "bool",
                    "Optional[bool]",
                    "str",
                    "Dict[str, List[Any]]",
                    "int",
                    "List[List[str]]"
                ]
            }
        },
        "TaskSpy.fork_rejected": {
            "name": "fork_rejected",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "reject": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TaskSpy.fork_resolved": {
            "name": "fork_resolved",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "resolve": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_task_resolved_fork_should_return_resolved_value.rejected_spy": {
            "name": "rejected_spy",
            "location": 73,
            "return": [],
            "arguments": {
                "_": []
            }
        },
        "test_task_resolved_fork_should_return_resolved_value.resolved_spy": {
            "name": "resolved_spy",
            "location": 76,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_task_rejected_fork_should_return_resolved_value.rejected_spy": {
            "name": "rejected_spy",
            "location": 85,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_task_rejected_fork_should_return_resolved_value.resolved_spy": {
            "name": "resolved_spy",
            "location": 88,
            "return": [],
            "arguments": {
                "_": []
            }
        },
        "test_task_rejected_fork_should_not_applied_map_on_his_result.rejected_spy": {
            "name": "rejected_spy",
            "location": 105,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_task_rejected_fork_should_not_applied_map_on_his_result.resolved_spy": {
            "name": "resolved_spy",
            "location": 108,
            "return": [],
            "arguments": {
                "_": []
            }
        },
        "test_task_resolved_fork_should_applied_map_on_his_result.rejected_spy": {
            "name": "rejected_spy",
            "location": 117,
            "return": [],
            "arguments": {
                "_": []
            }
        },
        "test_task_resolved_fork_should_applied_map_on_his_result.resolved_spy": {
            "name": "resolved_spy",
            "location": 120,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_task_rejected_fork_should_not_applied_bind_on_his_result.rejected_spy": {
            "name": "rejected_spy",
            "location": 129,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_task_rejected_fork_should_not_applied_bind_on_his_result.resolved_spy": {
            "name": "resolved_spy",
            "location": 132,
            "return": [],
            "arguments": {
                "_": []
            }
        },
        "test_task_resolved_fork_should_applied_bind_on_his_result.rejected_spy": {
            "name": "rejected_spy",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_task_resolved_fork_should_applied_bind_on_his_result.resolved_spy": {
            "name": "resolved_spy",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        }
    },
    "pyMonet-master/tests/test_try.py": {
        "divide": {
            "name": "divide",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "dividend": [
                    "int",
                    "Callable",
                    "str"
                ],
                "divisor": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "try_spy": {
            "name": "try_spy",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_try_should_call_success_callback_with_result_of_function_when_exception_was_not_thrown": {
            "name": "test_try_should_call_success_callback_with_result_of_function_when_exception_was_not_thrown",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "try_spy": []
            }
        },
        "test_try_should_call_fail_callback_with_result_of_function_when_exception_was_thrown": {
            "name": "test_try_should_call_fail_callback_with_result_of_function_when_exception_was_thrown",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "try_spy": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_try_eq_should_compare_value_and_result_of_try": {
            "name": "test_try_eq_should_compare_value_and_result_of_try",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "try_spy": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "test_try_should_appied_map_when_exception_was_thrown": {
            "name": "test_try_should_appied_map_when_exception_was_thrown",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "try_spy": []
            }
        },
        "test_try_should_appied_bind_when_exception_not_was_thrown": {
            "name": "test_try_should_appied_bind_when_exception_not_was_thrown",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "try_spy": []
            }
        },
        "test_try_should_not_appied_bind_when_exception_was_thrown": {
            "name": "test_try_should_not_appied_bind_when_exception_was_thrown",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "try_spy": [
                    "int",
                    "str"
                ]
            }
        },
        "test_when_bind_is_rejected_monad_also_should_be_rejected": {
            "name": "test_when_bind_is_rejected_monad_also_should_be_rejected",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "try_spy": []
            }
        },
        "test_try_should_not_applied_map_when_exception_thrown": {
            "name": "test_try_should_not_applied_map_when_exception_thrown",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "try_spy": [
                    "int",
                    "bool"
                ]
            }
        },
        "test_get_or_default_method_should_return_value_when_exception_was_not_thrown": {
            "name": "test_get_or_default_method_should_return_value_when_exception_was_not_thrown",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "try_spy": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "test_get_or_default_method_should_return_default_value_when_exception_was_thrown": {
            "name": "test_get_or_default_method_should_return_default_value_when_exception_was_thrown",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "try_spy": []
            }
        },
        "test_filer_should_converts_to_fail_when_predicate_returns_false": {
            "name": "test_filer_should_converts_to_fail_when_predicate_returns_false",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "try_spy": [
                    "dict"
                ]
            }
        },
        "test_try_functor_laws": {
            "name": "test_try_functor_laws",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "integer": [
                    "Union[int, float]",
                    "str"
                ]
            }
        },
        "test_try_monad_associativity_law": {
            "name": "test_try_monad_associativity_law",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "integer": [
                    "dict",
                    "float",
                    "Optional[Exception]"
                ]
            }
        },
        "test_try_monad_left_unit_law": {
            "name": "test_try_monad_left_unit_law",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "integer": [
                    "dict"
                ]
            }
        },
        "test_try_monad_right_unit_law": {
            "name": "test_try_monad_right_unit_law",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "integer": [
                    "dict"
                ]
            }
        },
        "TrySpy.fn": {
            "name": "fn",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrySpy.fail": {
            "name": "fail",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrySpy.mapper": {
            "name": "mapper",
            "location": 25,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "TrySpy.binder": {
            "name": "binder",
            "location": 28,
            "return": [
                "int",
                "Optional[int]",
                "List[int]",
                "utils.Node",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[str, int, float]",
                    "float",
                    "int"
                ]
            }
        },
        "TrySpy.fail_binder": {
            "name": "fail_binder",
            "location": 31,
            "return": [
                "int",
                "Optional[int]",
                "List[int]",
                "utils.Node",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[str, int, float]",
                    "float",
                    "int"
                ]
            }
        },
        "TrySpy.success_callback": {
            "name": "success_callback",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "TrySpy.fail_callback": {
            "name": "fail_callback",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        }
    },
    "pyMonet-master/tests/test_utils.py": {
        "test_identity_should_return_first_argument": {
            "name": "test_identity_should_return_first_argument",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "integer": [
                    "str",
                    "raiden_contracts.utils.type_aliases.ChainID"
                ]
            }
        },
        "test_compose_should_applied_function_on_value_and_return_it_result": {
            "name": "test_compose_should_applied_function_on_value_and_return_it_result",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "integer": [
                    "List[str]"
                ]
            }
        },
        "test_compose_should_appield_functions_from_last_to_first": {
            "name": "test_compose_should_appield_functions_from_last_to_first",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "integer": []
            }
        },
        "test_eq": {
            "name": "test_eq",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "test_compose_with_collections": {
            "name": "test_compose_with_collections",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_pipe_should_appield_functions_from_first_to_last": {
            "name": "test_pipe_should_appield_functions_from_first_to_last",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "integer": []
            }
        },
        "test_find_should_return_none_when_item_is_not_in_collection_otherwise_should_return_item": {
            "name": "test_find_should_return_none_when_item_is_not_in_collection_otherwise_should_return_item",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "lst": [],
                "integer": [
                    "str"
                ]
            }
        },
        "test_compose_with_collections.is_odd": {
            "name": "is_odd",
            "location": 40,
            "return": [
                "str",
                "list",
                "Dict[str, Any]",
                "Union[str, int]"
            ],
            "arguments": {
                "value": [
                    "int",
                    "bool",
                    "float",
                    "T"
                ]
            }
        }
    },
    "pyMonet-master/tests/test_utils_cond.py": {
        "cond_spy": {
            "name": "cond_spy",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_cond_should_return_function_with_calls_first_passed_function": {
            "name": "test_cond_should_return_function_with_calls_first_passed_function",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "cond_spy": []
            }
        },
        "CondSpy.cond_function": {
            "name": "cond_function",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CondSpy.cond_function_false": {
            "name": "cond_function_false",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CondSpy.execute_function": {
            "name": "execute_function",
            "location": 19,
            "return": [
                "int",
                "bool",
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "CondSpy.execute_function1": {
            "name": "execute_function1",
            "location": 24,
            "return": [
                "int",
                "bool",
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyMonet-master/tests/test_utils_curry.py": {
        "test_curry_1_argument": {
            "name": "test_curry_1_argument",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "integer1": []
            }
        },
        "test_curry_2_arguments": {
            "name": "test_curry_2_arguments",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "integer1": [
                    "str"
                ],
                "integer2": [
                    "str"
                ]
            }
        },
        "test_curry_3_arguments": {
            "name": "test_curry_3_arguments",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "integer1": [
                    "str",
                    "Optional[str]"
                ],
                "integer2": [
                    "str",
                    "Optional[str]"
                ],
                "integer3": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_curry_4_arguments": {
            "name": "test_curry_4_arguments",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "integer1": [
                    "str"
                ],
                "integer2": [
                    "str"
                ],
                "integer3": [
                    "str"
                ],
                "integer4": [
                    "str"
                ]
            }
        },
        "test_curry_1_argument.fn": {
            "name": "fn",
            "location": 11,
            "return": [],
            "arguments": {
                "arg1": []
            }
        },
        "test_curry_2_arguments.fn": {
            "name": "fn",
            "location": 21,
            "return": [],
            "arguments": {
                "arg1": [],
                "arg2": []
            }
        },
        "test_curry_3_arguments.fn": {
            "name": "fn",
            "location": 31,
            "return": [],
            "arguments": {
                "arg1": [],
                "arg2": [],
                "arg3": []
            }
        },
        "test_curry_4_arguments.fn": {
            "name": "fn",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "arg1": [
                    "int",
                    "list",
                    "List[str]",
                    "Union[List[float], List[int]]",
                    "str"
                ],
                "arg2": [
                    "int",
                    "list",
                    "List[str]",
                    "Union[List[float], List[int]]",
                    "str"
                ],
                "arg3": [
                    "int",
                    "list",
                    "List[str]",
                    "Union[List[float], List[int]]",
                    "str"
                ],
                "arg4": [
                    "int",
                    "list",
                    "List[str]",
                    "Union[List[float], List[int]]",
                    "str"
                ]
            }
        }
    },
    "pyMonet-master/tests/test_utlis_memoize.py": {
        "test_utils_memoize_should_call_fn_once_when_args_are_equal": {
            "name": "test_utils_memoize_should_call_fn_once_when_args_are_equal",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "Type"
                ]
            }
        },
        "test_utils_memoize_should_call_fn_when_arguments_change": {
            "name": "test_utils_memoize_should_call_fn_when_arguments_change",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_utils_memoize_should_cache_output_when_key_returns_truthy": {
            "name": "test_utils_memoize_should_cache_output_when_key_returns_truthy",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "str",
                    "int",
                    "Type"
                ]
            }
        },
        "MemoizeSpy.fn": {
            "name": "fn",
            "location": 9,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "set"
            ],
            "arguments": {}
        },
        "MemoizeSpy.key": {
            "name": "key",
            "location": 12,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "_": [],
                "value": [
                    "str",
                    "bool",
                    "Optional[Callable]"
                ],
                "new_value": [
                    "str",
                    "bool",
                    "Optional[Callable]"
                ]
            }
        }
    },
    "pyMonet-master/tests/test_validation.py": {
        "test_validation_map": {
            "name": "test_validation_map",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validation_bind": {
            "name": "test_validation_bind",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validation_is_success": {
            "name": "test_validation_is_success",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validation_is_fail": {
            "name": "test_validation_is_fail",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "validate_length": {
            "name": "validate_length",
            "location": 34,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "validate_uppercase": {
            "name": "validate_uppercase",
            "location": 40,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "value": [
                    "Optional[str]",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "validate_contains_special_character": {
            "name": "validate_contains_special_character",
            "location": 46,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "validate": {
            "name": "validate",
            "location": 52,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "tuple",
                    "Union[Sequence, 'SweepFixedValues']",
                    "float"
                ]
            }
        },
        "test_validation_applicative": {
            "name": "test_validation_applicative",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validation_monad_law": {
            "name": "test_validation_monad_law",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "integer": []
            }
        },
        "test_validation_functor_law": {
            "name": "test_validation_functor_law",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "integer": []
            }
        },
        "test_validation_transform": {
            "name": "test_validation_transform",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "integer": [
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "pyMonet-master/tests/__init__.py": {}
}
{
    "pyReaderWriterLock-master/setup.py": {
        "read": {
            "name": "read",
            "location": 7,
            "return": [],
            "arguments": {
                "fname": []
            }
        }
    },
    "pyReaderWriterLock-master/readerwriterlock/rwlock.py": {
        "Lockable.acquire": {
            "name": "acquire",
            "location": 30,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "blocking": [
                    "bool",
                    "float",
                    "Exception",
                    "list"
                ],
                "timeout": [
                    "bool",
                    "float",
                    "Exception",
                    "list"
                ]
            }
        },
        "Lockable.release": {
            "name": "release",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lockable.locked": {
            "name": "locked",
            "location": 38,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lockable.__enter__": {
            "name": "__enter__",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lockable.__exit__": {
            "name": "__exit__",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[types.TracebackType]",
                    "Optional[Type[BaseException]]",
                    "str",
                    "types.TracebackType",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[types.TracebackType]",
                    "Optional[Type[BaseException]]",
                    "str",
                    "types.TracebackType",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[types.TracebackType]",
                    "Optional[Type[BaseException]]",
                    "str",
                    "types.TracebackType",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "LockableD.downgrade": {
            "name": "downgrade",
            "location": 57,
            "return": [
                "Lockable"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ThreadSafeInt.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial_value": [
                    "int",
                    "Union[int, float]",
                    "list"
                ],
                "lock_factory": [
                    "List[Tuple[int, float]]",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "_ThreadSafeInt.__int__": {
            "name": "__int__",
            "location": 73,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ThreadSafeInt.__eq__": {
            "name": "__eq__",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "str"
                ]
            }
        },
        "_ThreadSafeInt.increment": {
            "name": "increment",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ThreadSafeInt.decrement": {
            "name": "decrement",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RWLockable.gen_rlock": {
            "name": "gen_rlock",
            "location": 96,
            "return": [
                "Lockable"
            ],
            "arguments": {
                "self": []
            }
        },
        "RWLockable.gen_wlock": {
            "name": "gen_wlock",
            "location": 100,
            "return": [
                "Lockable"
            ],
            "arguments": {
                "self": []
            }
        },
        "RWLockableD.gen_rlock": {
            "name": "gen_rlock",
            "location": 109,
            "return": [
                "Lockable"
            ],
            "arguments": {
                "self": []
            }
        },
        "RWLockableD.gen_wlock": {
            "name": "gen_wlock",
            "location": 113,
            "return": [
                "LockableD"
            ],
            "arguments": {
                "self": []
            }
        },
        "RWLockRead.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lock_factory": [
                    "Tuple[int]",
                    "int"
                ],
                "time_source": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "RWLockRead.gen_rlock": {
            "name": "gen_rlock",
            "location": 184,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RWLockRead.gen_wlock": {
            "name": "gen_wlock",
            "location": 188,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RWLockWrite.__init__": {
            "name": "__init__",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lock_factory": [
                    "int"
                ],
                "time_source": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "RWLockWrite.gen_rlock": {
            "name": "gen_rlock",
            "location": 296,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RWLockWrite.gen_wlock": {
            "name": "gen_wlock",
            "location": 300,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RWLockFair.__init__": {
            "name": "__init__",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lock_factory": [
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "time_source": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "RWLockFair.gen_rlock": {
            "name": "gen_rlock",
            "location": 384,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RWLockFair.gen_wlock": {
            "name": "gen_wlock",
            "location": 388,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RWLockReadD.__init__": {
            "name": "__init__",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lock_factory": [],
                "time_source": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "RWLockReadD.gen_rlock": {
            "name": "gen_rlock",
            "location": 484,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RWLockReadD.gen_wlock": {
            "name": "gen_wlock",
            "location": 488,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RWLockWriteD.__init__": {
            "name": "__init__",
            "location": 496,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lock_factory": [
                    "int",
                    "bytes"
                ],
                "time_source": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "RWLockWriteD.gen_rlock": {
            "name": "gen_rlock",
            "location": 612,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RWLockWriteD.gen_wlock": {
            "name": "gen_wlock",
            "location": 616,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RWLockFairD.__init__": {
            "name": "__init__",
            "location": 624,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lock_factory": [
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "time_source": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "RWLockFairD.gen_rlock": {
            "name": "gen_rlock",
            "location": 712,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RWLockFairD.gen_wlock": {
            "name": "gen_wlock",
            "location": 716,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RWLockRead._aReader.__init__": {
            "name": "__init__",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "p_RWLock": []
            }
        },
        "RWLockRead._aReader.acquire": {
            "name": "acquire",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "blocking": [],
                "timeout": []
            }
        },
        "RWLockRead._aReader.release": {
            "name": "release",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RWLockRead._aReader.locked": {
            "name": "locked",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RWLockRead._aWriter.__init__": {
            "name": "__init__",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "p_RWLock": []
            }
        },
        "RWLockRead._aWriter.acquire": {
            "name": "acquire",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "blocking": [],
                "timeout": []
            }
        },
        "RWLockRead._aWriter.release": {
            "name": "release",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RWLockRead._aWriter.locked": {
            "name": "locked",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RWLockWrite._aReader.__init__": {
            "name": "__init__",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "p_RWLock": []
            }
        },
        "RWLockWrite._aReader.acquire": {
            "name": "acquire",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "blocking": [],
                "timeout": []
            }
        },
        "RWLockWrite._aReader.release": {
            "name": "release",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RWLockWrite._aReader.locked": {
            "name": "locked",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RWLockWrite._aWriter.__init__": {
            "name": "__init__",
            "location": 254,
            "return": [],
            "arguments": {
                "self": [],
                "p_RWLock": []
            }
        },
        "RWLockWrite._aWriter.acquire": {
            "name": "acquire",
            "location": 258,
            "return": [],
            "arguments": {
                "self": [],
                "blocking": [],
                "timeout": []
            }
        },
        "RWLockWrite._aWriter.release": {
            "name": "release",
            "location": 281,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RWLockWrite._aWriter.locked": {
            "name": "locked",
            "location": 292,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RWLockFair._aReader.__init__": {
            "name": "__init__",
            "location": 317,
            "return": [],
            "arguments": {
                "self": [],
                "p_RWLock": []
            }
        },
        "RWLockFair._aReader.acquire": {
            "name": "acquire",
            "location": 321,
            "return": [],
            "arguments": {
                "self": [],
                "blocking": [],
                "timeout": []
            }
        },
        "RWLockFair._aReader.release": {
            "name": "release",
            "location": 342,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RWLockFair._aReader.locked": {
            "name": "locked",
            "location": 352,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RWLockFair._aWriter.__init__": {
            "name": "__init__",
            "location": 357,
            "return": [],
            "arguments": {
                "self": [],
                "p_RWLock": []
            }
        },
        "RWLockFair._aWriter.acquire": {
            "name": "acquire",
            "location": 361,
            "return": [],
            "arguments": {
                "self": [],
                "blocking": [],
                "timeout": []
            }
        },
        "RWLockFair._aWriter.release": {
            "name": "release",
            "location": 373,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RWLockFair._aWriter.locked": {
            "name": "locked",
            "location": 380,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RWLockReadD._aReader.__init__": {
            "name": "__init__",
            "location": 404,
            "return": [],
            "arguments": {
                "self": [],
                "p_RWLock": []
            }
        },
        "RWLockReadD._aReader.acquire": {
            "name": "acquire",
            "location": 408,
            "return": [],
            "arguments": {
                "self": [],
                "blocking": [],
                "timeout": []
            }
        },
        "RWLockReadD._aReader.release": {
            "name": "release",
            "location": 424,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RWLockReadD._aReader.locked": {
            "name": "locked",
            "location": 434,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RWLockReadD._aWriter.__init__": {
            "name": "__init__",
            "location": 439,
            "return": [],
            "arguments": {
                "self": [],
                "p_RWLock": []
            }
        },
        "RWLockReadD._aWriter.acquire": {
            "name": "acquire",
            "location": 443,
            "return": [],
            "arguments": {
                "self": [],
                "blocking": [],
                "timeout": []
            }
        },
        "RWLockReadD._aWriter.downgrade": {
            "name": "downgrade",
            "location": 449,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RWLockReadD._aWriter.release": {
            "name": "release",
            "location": 474,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RWLockReadD._aWriter.locked": {
            "name": "locked",
            "location": 480,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RWLockWriteD._aReader.__init__": {
            "name": "__init__",
            "location": 508,
            "return": [],
            "arguments": {
                "self": [],
                "p_RWLock": []
            }
        },
        "RWLockWriteD._aReader.acquire": {
            "name": "acquire",
            "location": 512,
            "return": [],
            "arguments": {
                "self": [],
                "blocking": [],
                "timeout": []
            }
        },
        "RWLockWriteD._aReader.release": {
            "name": "release",
            "location": 539,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RWLockWriteD._aReader.locked": {
            "name": "locked",
            "location": 549,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RWLockWriteD._aWriter.__init__": {
            "name": "__init__",
            "location": 554,
            "return": [],
            "arguments": {
                "self": [],
                "p_RWLock": []
            }
        },
        "RWLockWriteD._aWriter.acquire": {
            "name": "acquire",
            "location": 558,
            "return": [],
            "arguments": {
                "self": [],
                "blocking": [],
                "timeout": []
            }
        },
        "RWLockWriteD._aWriter.downgrade": {
            "name": "downgrade",
            "location": 581,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RWLockWriteD._aWriter.release": {
            "name": "release",
            "location": 597,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RWLockWriteD._aWriter.locked": {
            "name": "locked",
            "location": 608,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RWLockFairD._aReader.__init__": {
            "name": "__init__",
            "location": 633,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p_RWLock": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "RWLockFairD._aReader.acquire": {
            "name": "acquire",
            "location": 637,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "blocking": [
                    "int",
                    "float"
                ],
                "timeout": [
                    "int",
                    "float"
                ]
            }
        },
        "RWLockFairD._aReader.release": {
            "name": "release",
            "location": 658,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RWLockFairD._aReader.locked": {
            "name": "locked",
            "location": 668,
            "return": [
                "str",
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RWLockFairD._aWriter.__init__": {
            "name": "__init__",
            "location": 673,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p_RWLock": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "RWLockFairD._aWriter.acquire": {
            "name": "acquire",
            "location": 677,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "blocking": [
                    "int",
                    "float"
                ],
                "timeout": [
                    "int",
                    "float"
                ]
            }
        },
        "RWLockFairD._aWriter.downgrade": {
            "name": "downgrade",
            "location": 689,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RWLockFairD._aWriter.release": {
            "name": "release",
            "location": 701,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RWLockFairD._aWriter.locked": {
            "name": "locked",
            "location": 708,
            "return": [
                "str",
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RWLockReadD._aWriter.downgrade.lock_result": {
            "name": "lock_result",
            "location": 457,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyReaderWriterLock-master/readerwriterlock/rwlock_async.py": {
        "Lockable.locked": {
            "name": "locked",
            "location": 44,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ThreadSafeInt.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial_value": [
                    "int",
                    "Union[int, float]",
                    "list"
                ],
                "lock_factory": [
                    "List[Tuple[int, float]]",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "_ThreadSafeInt.__int__": {
            "name": "__int__",
            "location": 79,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ThreadSafeInt.__eq__": {
            "name": "__eq__",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "str"
                ]
            }
        },
        "RWLockRead.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lock_factory": [
                    "Tuple[int]",
                    "int"
                ],
                "time_source": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "RWLockWrite.__init__": {
            "name": "__init__",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lock_factory": [
                    "int"
                ],
                "time_source": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "RWLockFair.__init__": {
            "name": "__init__",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lock_factory": [
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "time_source": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "RWLockReadD.__init__": {
            "name": "__init__",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lock_factory": [],
                "time_source": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "RWLockWriteD.__init__": {
            "name": "__init__",
            "location": 548,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lock_factory": [
                    "int",
                    "bytes"
                ],
                "time_source": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "RWLockFairD.__init__": {
            "name": "__init__",
            "location": 690,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lock_factory": [
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "time_source": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "RWLockRead._aReader.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "p_RWLock": []
            }
        },
        "RWLockRead._aReader.locked": {
            "name": "locked",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RWLockRead._aWriter.__init__": {
            "name": "__init__",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "p_RWLock": []
            }
        },
        "RWLockRead._aWriter.locked": {
            "name": "locked",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RWLockWrite._aReader.__init__": {
            "name": "__init__",
            "location": 224,
            "return": [],
            "arguments": {
                "self": [],
                "p_RWLock": []
            }
        },
        "RWLockWrite._aReader.locked": {
            "name": "locked",
            "location": 273,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RWLockWrite._aWriter.__init__": {
            "name": "__init__",
            "location": 278,
            "return": [],
            "arguments": {
                "self": [],
                "p_RWLock": []
            }
        },
        "RWLockWrite._aWriter.locked": {
            "name": "locked",
            "location": 322,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RWLockFair._aReader.__init__": {
            "name": "__init__",
            "location": 347,
            "return": [],
            "arguments": {
                "self": [],
                "p_RWLock": []
            }
        },
        "RWLockFair._aReader.locked": {
            "name": "locked",
            "location": 388,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RWLockFair._aWriter.__init__": {
            "name": "__init__",
            "location": 393,
            "return": [],
            "arguments": {
                "self": [],
                "p_RWLock": []
            }
        },
        "RWLockFair._aWriter.locked": {
            "name": "locked",
            "location": 420,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RWLockReadD._aReader.__init__": {
            "name": "__init__",
            "location": 444,
            "return": [],
            "arguments": {
                "self": [],
                "p_RWLock": []
            }
        },
        "RWLockReadD._aReader.locked": {
            "name": "locked",
            "location": 478,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RWLockReadD._aWriter.__init__": {
            "name": "__init__",
            "location": 483,
            "return": [],
            "arguments": {
                "self": [],
                "p_RWLock": []
            }
        },
        "RWLockReadD._aWriter.locked": {
            "name": "locked",
            "location": 532,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RWLockWriteD._aReader.__init__": {
            "name": "__init__",
            "location": 560,
            "return": [],
            "arguments": {
                "self": [],
                "p_RWLock": []
            }
        },
        "RWLockWriteD._aReader.locked": {
            "name": "locked",
            "location": 609,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RWLockWriteD._aWriter.__init__": {
            "name": "__init__",
            "location": 614,
            "return": [],
            "arguments": {
                "self": [],
                "p_RWLock": []
            }
        },
        "RWLockWriteD._aWriter.locked": {
            "name": "locked",
            "location": 674,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RWLockFairD._aReader.__init__": {
            "name": "__init__",
            "location": 699,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p_RWLock": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "RWLockFairD._aReader.locked": {
            "name": "locked",
            "location": 740,
            "return": [
                "str",
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RWLockFairD._aWriter.__init__": {
            "name": "__init__",
            "location": 745,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p_RWLock": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "RWLockFairD._aWriter.locked": {
            "name": "locked",
            "location": 784,
            "return": [
                "str",
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyReaderWriterLock-master/readerwriterlock/__init__.py": {},
    "pyReaderWriterLock-master/tests/test_rwlock.py": {
        "TestRWLock.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRWLock.test_multi_thread": {
            "name": "test_multi_thread",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRWLockSpecificCase.setUp": {
            "name": "setUp",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRWLockSpecificCase.test_write_req00": {
            "name": "test_write_req00",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRWLockSpecificCase.test_write_req01": {
            "name": "test_write_req01",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRWLockSpecificCase.test_write_req02": {
            "name": "test_write_req02",
            "location": 216,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRWLockSpecificCase.test_write_req03": {
            "name": "test_write_req03",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRWLockSpecificCase.test_write_req04": {
            "name": "test_write_req04",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRWLockSpecificCase.test_write_req05": {
            "name": "test_write_req05",
            "location": 269,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRWLockSpecificCase.test_write_req06": {
            "name": "test_write_req06",
            "location": 290,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRWLockSpecificCase.test_write_req07": {
            "name": "test_write_req07",
            "location": 308,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRWLockSpecificCase.test_write_req08": {
            "name": "test_write_req08",
            "location": 326,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRWLockSpecificCase.test_write_req09": {
            "name": "test_write_req09",
            "location": 344,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRWLockSpecificCase.test_write_req10": {
            "name": "test_write_req10",
            "location": 362,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRWLockSpecificCase.test_write_req11": {
            "name": "test_write_req11",
            "location": 380,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRWLockSpecificCase.test_write_req12": {
            "name": "test_write_req12",
            "location": 398,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRWLockSpecificCase.test_write_req13": {
            "name": "test_write_req13",
            "location": 417,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRWLockSpecificCase.test_write_req14": {
            "name": "test_write_req14",
            "location": 440,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRWLockSpecificCase.test_write_req15": {
            "name": "test_write_req15",
            "location": 478,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWhiteBoxRWLockReadD.test_read_vs_downgrade_read": {
            "name": "test_read_vs_downgrade_read",
            "location": 509,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWhiteBoxRWLockReadD.test_read_vs_downgrade_write": {
            "name": "test_read_vs_downgrade_write",
            "location": 542,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWhiteBoxRWLockReadD.test_read_vs_downgrade_fair": {
            "name": "test_read_vs_downgrade_fair",
            "location": 581,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWhiteBoxRWLockReadD.test_read_vs_downgrade_read.assert_internal_state": {
            "name": "assert_internal_state",
            "location": 521,
            "return": [],
            "arguments": {}
        },
        "TestWhiteBoxRWLockReadD.test_read_vs_downgrade_write.assert_internal_state": {
            "name": "assert_internal_state",
            "location": 554,
            "return": [],
            "arguments": {}
        },
        "TestWhiteBoxRWLockReadD.test_read_vs_downgrade_fair.assert_internal_state": {
            "name": "assert_internal_state",
            "location": 593,
            "return": [],
            "arguments": {}
        },
        "TestRWLock.test_multi_thread.downgrader1": {
            "name": "downgrader1",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "TestRWLock.test_multi_thread.writer1": {
            "name": "writer1",
            "location": 77,
            "return": [],
            "arguments": {}
        },
        "TestRWLock.test_multi_thread.writer2": {
            "name": "writer2",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "TestRWLock.test_multi_thread.reader1": {
            "name": "reader1",
            "location": 119,
            "return": [],
            "arguments": {}
        },
        "TestRWLock.test_multi_thread.reader2": {
            "name": "reader2",
            "location": 136,
            "return": [],
            "arguments": {}
        }
    },
    "pyReaderWriterLock-master/tests/test_rwlock_async.py": {
        "TestRWLock_Async.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRWLock_Async.test_multi_async": {
            "name": "test_multi_async",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRWLockSpecificCase.setUp": {
            "name": "setUp",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRWLockSpecificCase.test_write_req00": {
            "name": "test_write_req00",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRWLockSpecificCase.test_write_req01": {
            "name": "test_write_req01",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRWLockSpecificCase.test_write_req02": {
            "name": "test_write_req02",
            "location": 216,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRWLockSpecificCase.test_write_req03": {
            "name": "test_write_req03",
            "location": 237,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRWLockSpecificCase.test_write_req04": {
            "name": "test_write_req04",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRWLockSpecificCase.test_write_req05": {
            "name": "test_write_req05",
            "location": 283,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRWLockSpecificCase.test_write_req06": {
            "name": "test_write_req06",
            "location": 310,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRWLockSpecificCase.test_write_req07": {
            "name": "test_write_req07",
            "location": 331,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRWLockSpecificCase.test_write_req08": {
            "name": "test_write_req08",
            "location": 352,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRWLockSpecificCase.test_write_req09": {
            "name": "test_write_req09",
            "location": 373,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRWLockSpecificCase.test_write_req10": {
            "name": "test_write_req10",
            "location": 394,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRWLockSpecificCase.test_write_req11": {
            "name": "test_write_req11",
            "location": 415,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRWLockSpecificCase.test_write_req12": {
            "name": "test_write_req12",
            "location": 436,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRWLockSpecificCase.test_write_req13": {
            "name": "test_write_req13",
            "location": 458,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRWLockSpecificCase.test_write_req14": {
            "name": "test_write_req14",
            "location": 484,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRWLockSpecificCase.test_write_req15": {
            "name": "test_write_req15",
            "location": 525,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWhiteBoxRWLockReadD.test_read_vs_downgrade_read": {
            "name": "test_read_vs_downgrade_read",
            "location": 559,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWhiteBoxRWLockReadD.test_read_vs_downgrade_write": {
            "name": "test_read_vs_downgrade_write",
            "location": 597,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWhiteBoxRWLockReadD.test_read_vs_downgrade_fair": {
            "name": "test_read_vs_downgrade_fair",
            "location": 638,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWhiteBoxRWLockReadD.test_read_vs_downgrade_write.assert_internal_state": {
            "name": "assert_internal_state",
            "location": 610,
            "return": [],
            "arguments": {}
        },
        "TestWhiteBoxRWLockReadD.test_read_vs_downgrade_fair.assert_internal_state": {
            "name": "assert_internal_state",
            "location": 651,
            "return": [],
            "arguments": {}
        },
        "TestWhiteBoxRWLockReadD.test_read_vs_downgrade_read.test_it.assert_internal_state": {
            "name": "assert_internal_state",
            "location": 574,
            "return": [],
            "arguments": {}
        }
    }
}
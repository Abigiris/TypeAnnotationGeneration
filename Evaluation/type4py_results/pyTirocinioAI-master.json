{
    "pyTirocinioAI-master/conftest.py": {},
    "pyTirocinioAI-master/get_swagger.py": {},
    "pyTirocinioAI-master/setup.py": {},
    "pyTirocinioAI-master/docs/conf.py": {},
    "pyTirocinioAI-master/hooks/subhooks.py": {
        "setup_logging": {
            "name": "setup_logging",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pyTirocinioAI-master/progTiroc/_server_setup.py": {
        "conf_value": {
            "name": "conf_value",
            "location": 15,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "var_name": [
                    "str",
                    "int",
                    "Optional[str]",
                    "List[str]",
                    "dict"
                ],
                "cfg": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int",
                    "Tuple[str]"
                ],
                "yml_cfg": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int",
                    "Tuple[str]"
                ],
                "default": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int",
                    "Tuple[str]"
                ]
            }
        },
        "setup_app_config": {
            "name": "setup_app_config",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "str",
                    "neuromation.api.Config",
                    "sanic.Sanic",
                    "Dict[str, Any]"
                ]
            }
        },
        "setup": {
            "name": "setup",
            "location": 100,
            "return": [],
            "arguments": {}
        }
    },
    "pyTirocinioAI-master/progTiroc/__init__.py": {},
    "pyTirocinioAI-master/progTiroc/__main__.py": {},
    "pyTirocinioAI-master/progTiroc/ai/_main.py": {
        "check": {
            "name": "check",
            "location": 24,
            "return": [],
            "arguments": {
                "condition": [],
                "value": []
            }
        },
        "possible": {
            "name": "possible",
            "location": 96,
            "return": [],
            "arguments": {
                "params": [],
                "condition": []
            }
        },
        "verify_mapping": {
            "name": "verify_mapping",
            "location": 120,
            "return": [],
            "arguments": {
                "msg": [],
                "params": [],
                "mapping": [],
                "py": []
            }
        },
        "get_multiple_mappings": {
            "name": "get_multiple_mappings",
            "location": 135,
            "return": [],
            "arguments": {
                "msg": [],
                "msg_condition": [],
                "params": [],
                "params_conditions": [],
                "py": []
            }
        },
        "get_mapping": {
            "name": "get_mapping",
            "location": 167,
            "return": [],
            "arguments": {
                "msg": [],
                "msg_condition": [],
                "params": [],
                "params_conditions": [],
                "py": []
            }
        },
        "check.std_check": {
            "name": "std_check",
            "location": 27,
            "return": [],
            "arguments": {
                "key": [],
                "v": [],
                "value": []
            }
        },
        "AI.__init__": {
            "name": "__init__",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "google_project_id": [],
                "log": []
            }
        },
        "AI.analyze_text": {
            "name": "analyze_text",
            "location": 188,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "googleSessionId": []
            }
        },
        "AI.update_context": {
            "name": "update_context",
            "location": 353,
            "return": [],
            "arguments": {
                "db_ctx": [],
                "mapping": [],
                "action": [],
                "options": [],
                "init_values": []
            }
        }
    },
    "pyTirocinioAI-master/progTiroc/ai/_text_analysis.py": {
        "analyze_intent": {
            "name": "analyze_intent",
            "location": 15,
            "return": [
                "str",
                "Dict[str, List[str]]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "project_id": [
                    "Optional[str]",
                    "bool",
                    "dict",
                    "int",
                    "str"
                ],
                "session_id": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "int",
                    "Optional[int]"
                ],
                "text": [
                    "str",
                    "bytes"
                ],
                "language_code": [
                    "str",
                    "bool"
                ],
                "log": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "analyze_categories": {
            "name": "analyze_categories",
            "location": 39,
            "return": [
                "str",
                "Dict[str, Any]",
                "Sequence[Sequence[str]]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "List[str]"
                ],
                "log": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "analyze_sentiment": {
            "name": "analyze_sentiment",
            "location": 56,
            "return": [
                "bytes",
                "dict",
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "List[str]"
                ],
                "log": [
                    "str",
                    "List[str]",
                    "bool",
                    "Iterable[Tuple[str, str]]"
                ]
            }
        }
    },
    "pyTirocinioAI-master/progTiroc/ai/__init__.py": {},
    "pyTirocinioAI-master/progTiroc/api/context.py": {},
    "pyTirocinioAI-master/progTiroc/api/message.py": {},
    "pyTirocinioAI-master/progTiroc/api/rule.py": {},
    "pyTirocinioAI-master/progTiroc/api/topic.py": {},
    "pyTirocinioAI-master/progTiroc/api/user.py": {},
    "pyTirocinioAI-master/progTiroc/api/_index.py": {
        "create_api": {
            "name": "create_api",
            "location": 10,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {}
        }
    },
    "pyTirocinioAI-master/progTiroc/api/__init__.py": {},
    "pyTirocinioAI-master/progTiroc/db/_db.py": {},
    "pyTirocinioAI-master/progTiroc/db/_db_instance.py": {
        "get_meta_fields": {
            "name": "get_meta_fields",
            "location": 66,
            "return": [
                "Type",
                "Callable[..., None]",
                "int",
                "str"
            ],
            "arguments": {
                "load": [
                    "str",
                    "Set[str]",
                    "Optional[str]",
                    "bool"
                ],
                "dump": [
                    "str",
                    "Set[str]",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "DBContext.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "DBContext.__enter__": {
            "name": "__enter__",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DBContext.__exit__": {
            "name": "__exit__",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[types.TracebackType]",
                    "Optional[Type[BaseException]]",
                    "str",
                    "types.TracebackType",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[types.TracebackType]",
                    "Optional[Type[BaseException]]",
                    "str",
                    "types.TracebackType",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[types.TracebackType]",
                    "Optional[Type[BaseException]]",
                    "str",
                    "types.TracebackType",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "DBInstance.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "database_name": [
                    "str",
                    "int",
                    "bool",
                    "Optional[bytes]"
                ],
                "database_host": [
                    "str",
                    "int",
                    "bool",
                    "Optional[bytes]"
                ],
                "database_port": [
                    "str",
                    "int",
                    "bool",
                    "Optional[bytes]"
                ],
                "database_user": [
                    "str",
                    "int",
                    "bool",
                    "Optional[bytes]"
                ],
                "database_pwd": [
                    "str",
                    "int",
                    "bool",
                    "Optional[bytes]"
                ],
                "loop": [
                    "str",
                    "int",
                    "bool",
                    "Optional[bytes]"
                ]
            }
        },
        "DBInstance.context": {
            "name": "context",
            "location": 156,
            "return": [
                "str",
                "Tuple[int, int]",
                "Iterable[allennlp.data.instance.Instance]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DBInstance.__init__.MessageWebSchema._get_text": {
            "name": "_get_text",
            "location": 142,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int"
                ]
            }
        },
        "DBInstance.__init__.MessageWebSchema._get_bot": {
            "name": "_get_bot",
            "location": 145,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "pyTirocinioAI-master/progTiroc/db/__init__.py": {},
    "pyTirocinioAI-master/test/condition_ver.py": {
        "test_single_lt": {
            "name": "test_single_lt",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "condition": [
                    "str",
                    "Dict[str, Any]"
                ],
                "value": [
                    "str",
                    "Dict[str, Any]"
                ],
                "expected": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_single_ge": {
            "name": "test_single_ge",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "condition": [
                    "str",
                    "Dict[str, Any]"
                ],
                "value": [
                    "str",
                    "Dict[str, Any]"
                ],
                "expected": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_single_gt": {
            "name": "test_single_gt",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "condition": [
                    "str",
                    "Dict[str, Any]"
                ],
                "value": [
                    "str",
                    "Dict[str, Any]"
                ],
                "expected": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_single_le": {
            "name": "test_single_le",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "condition": [
                    "str",
                    "Dict[str, Any]"
                ],
                "value": [
                    "str",
                    "Dict[str, Any]"
                ],
                "expected": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_single_eq": {
            "name": "test_single_eq",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "condition": [
                    "str",
                    "Dict[str, Any]"
                ],
                "value": [
                    "str",
                    "Dict[str, Any]"
                ],
                "expected": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_single_neq": {
            "name": "test_single_neq",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {
                "condition": [
                    "str",
                    "Dict[str, Any]"
                ],
                "value": [
                    "str",
                    "Dict[str, Any]"
                ],
                "expected": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_single_in": {
            "name": "test_single_in",
            "location": 243,
            "return": [
                ""
            ],
            "arguments": {
                "condition": [
                    "str",
                    "Optional[str]",
                    "float"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "float"
                ],
                "expected": [
                    "str",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "test_single_nin": {
            "name": "test_single_nin",
            "location": 269,
            "return": [
                ""
            ],
            "arguments": {
                "condition": [
                    "str",
                    "Dict[str, Any]"
                ],
                "value": [
                    "str",
                    "Dict[str, Any]"
                ],
                "expected": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_single_op_None": {
            "name": "test_single_op_None",
            "location": 299,
            "return": [
                ""
            ],
            "arguments": {
                "condition": [
                    "Type[Any]",
                    "Callable[[KT], VT]",
                    "Callable"
                ],
                "value": [
                    "Type[Any]",
                    "Callable[[KT], VT]",
                    "Callable"
                ]
            }
        },
        "test_multiple_op": {
            "name": "test_multiple_op",
            "location": 335,
            "return": [
                ""
            ],
            "arguments": {
                "condition": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "int"
                ],
                "value": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "int"
                ],
                "expected": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "int"
                ]
            }
        },
        "test_nested_op_None": {
            "name": "test_nested_op_None",
            "location": 381,
            "return": [
                ""
            ],
            "arguments": {
                "condition": [
                    "Type[Any]",
                    "Callable[[KT], VT]",
                    "Callable"
                ],
                "value": [
                    "Type[Any]",
                    "Callable[[KT], VT]",
                    "Callable"
                ]
            }
        },
        "test_nested_op": {
            "name": "test_nested_op",
            "location": 531,
            "return": [
                ""
            ],
            "arguments": {
                "condition": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "int"
                ],
                "value": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "int"
                ],
                "expected": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "pyTirocinioAI-master/test/test_ai.py": {
        "patch_datetime_now": {
            "name": "patch_datetime_now",
            "location": 18,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "remove_id": {
            "name": "remove_id",
            "location": 32,
            "return": [],
            "arguments": {
                "a": []
            }
        },
        "db_ctx": {
            "name": "db_ctx",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_connection": {
            "name": "test_connection",
            "location": 64,
            "return": [],
            "arguments": {
                "db_ctx": []
            }
        },
        "test_user_save": {
            "name": "test_user_save",
            "location": 68,
            "return": [],
            "arguments": {
                "db_ctx": []
            }
        },
        "test_now": {
            "name": "test_now",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "test_update1": {
            "name": "test_update1",
            "location": 115,
            "return": [],
            "arguments": {
                "db_ctx": []
            }
        },
        "test_update2": {
            "name": "test_update2",
            "location": 153,
            "return": [],
            "arguments": {
                "db_ctx": []
            }
        },
        "test_udpate3": {
            "name": "test_udpate3",
            "location": 211,
            "return": [],
            "arguments": {
                "db_ctx": []
            }
        },
        "test_update4": {
            "name": "test_update4",
            "location": 269,
            "return": [],
            "arguments": {
                "db_ctx": []
            }
        },
        "test_update5": {
            "name": "test_update5",
            "location": 327,
            "return": [],
            "arguments": {
                "db_ctx": []
            }
        },
        "test_update6": {
            "name": "test_update6",
            "location": 399,
            "return": [],
            "arguments": {
                "db_ctx": []
            }
        },
        "patch_datetime_now.MockedDatetime.utcnow": {
            "name": "utcnow",
            "location": 24,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "pyTirocinioAI-master/test/test_api.py": {
        "check_user": {
            "name": "check_user",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "obj": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "check_message": {
            "name": "check_message",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Dict[str, Type]",
                    "Dict[str, float]"
                ]
            }
        },
        "app": {
            "name": "app",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_user_list": {
            "name": "test_user_list",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "app": []
            }
        },
        "test_put_get_single_user": {
            "name": "test_put_get_single_user",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "str",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "test_put_malformed": {
            "name": "test_put_malformed",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "str"
                ]
            }
        },
        "test_put_malformed2": {
            "name": "test_put_malformed2",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "str"
                ]
            }
        }
    }
}
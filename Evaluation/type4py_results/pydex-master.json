{
    "pydex-master/src/run.py": {},
    "pydex-master/src/pydex_app/config.py": {},
    "pydex-master/src/pydex_app/constants.py": {},
    "pydex-master/src/pydex_app/database.py": {},
    "pydex-master/src/pydex_app/db_models.py": {
        "SignedOrder.__str__": {
            "name": "__str__",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignedOrder.last_updated_at_msecs": {
            "name": "last_updated_at_msecs",
            "location": 107,
            "return": [
                "List[recidiviz.persistence.database.schema.state.schema.StateIncarcerationPeriod]",
                "Dict[int, dict]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignedOrder.last_updated_at": {
            "name": "last_updated_at",
            "location": 112,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignedOrder.order_status": {
            "name": "order_status",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "SignedOrder.fill_amount": {
            "name": "fill_amount",
            "location": 129,
            "return": [
                "Dict[str, int]",
                "int",
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "Generator",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pydex-master/src/pydex_app/orderbook.py": {
        "Orderbook.get_order_by_hash": {
            "name": "get_order_by_hash",
            "location": 19,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Optional[bool]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Callable",
                    "Optional[str]"
                ],
                "order_hash": [
                    "str",
                    "Optional[dict]"
                ]
            }
        },
        "Orderbook.get_asset_pairs": {
            "name": "get_asset_pairs",
            "location": 31,
            "return": [
                "int",
                "bool",
                "rotkehlchen.db.dbhandler.DBHandler"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "asset_data_a": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "asset_data_b": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "page": [
                    "int",
                    "List[str]",
                    "str",
                    "bytes",
                    "Iterable[Hashable]"
                ],
                "per_page": [
                    "int",
                    "List[str]",
                    "str",
                    "bytes",
                    "Iterable[Hashable]"
                ],
                "include_maybe_fillables": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Orderbook.add_order": {
            "name": "add_order",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable[Tuple[int, int]]",
                    "Dict[str, str]"
                ],
                "order_json": [
                    "str",
                    "Collection[str]",
                    "dict",
                    "Callable[..., T]"
                ]
            }
        },
        "Orderbook.get_bids": {
            "name": "get_bids",
            "location": 112,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable[..., Awaitable]"
                ],
                "base_asset": [
                    "List[int]",
                    "float",
                    "int",
                    "Iterable[int]"
                ],
                "quote_asset": [
                    "List[int]",
                    "float",
                    "int",
                    "Iterable[int]"
                ],
                "full_asset_set": [
                    "str",
                    "Callable[..., Awaitable]"
                ],
                "page": [
                    "float",
                    "bool",
                    "str",
                    "Hashable"
                ],
                "per_page": [
                    "float",
                    "bool",
                    "str",
                    "Hashable"
                ]
            }
        },
        "Orderbook.get_asks": {
            "name": "get_asks",
            "location": 164,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ],
                "base_asset": [
                    "str",
                    "int",
                    "bool",
                    "list",
                    "float"
                ],
                "quote_asset": [
                    "str",
                    "int",
                    "bool",
                    "list",
                    "float"
                ],
                "full_asset_set": [
                    "str",
                    "bool"
                ],
                "page": [
                    "float",
                    "bool",
                    "str",
                    "Hashable"
                ],
                "per_page": [
                    "float",
                    "bool",
                    "str",
                    "Hashable"
                ]
            }
        },
        "Orderbook.get_orders": {
            "name": "get_orders",
            "location": 216,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Iterable[str]",
                    "Optional[Set[int]]",
                    "set"
                ],
                "maker_asset_proxy_id": [
                    "int",
                    "str"
                ],
                "taker_asset_proxy_id": [
                    "int",
                    "str"
                ],
                "maker_asset_address": [
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "Mapping[str, Any]"
                ],
                "taker_asset_address": [
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "Mapping[str, Any]"
                ],
                "exchange_address": [
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "Mapping[str, Any]"
                ],
                "sender_address": [
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "Mapping[str, Any]"
                ],
                "maker_asset_data": [
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "Mapping[str, Any]"
                ],
                "taker_asset_data": [
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "Mapping[str, Any]"
                ],
                "maker_address": [
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "Mapping[str, Any]"
                ],
                "taker_address": [
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "Mapping[str, Any]"
                ],
                "fee_recipient_address": [
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "Mapping[str, Any]"
                ],
                "page": [
                    "float",
                    "bool",
                    "str",
                    "int",
                    "Union[int, float]"
                ],
                "per_page": [
                    "float",
                    "bool",
                    "str",
                    "int",
                    "Union[int, float]"
                ],
                "include_maybe_fillables": [
                    "str",
                    "List[str]",
                    "int",
                    "bool",
                    "Mapping[Any, str]"
                ]
            }
        },
        "Orderbook.get_full_set_equivalent": {
            "name": "get_full_set_equivalent",
            "location": 276,
            "return": [
                "List[str]",
                "str",
                "Callable",
                "int"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.Address"
                ],
                "maker_asset": [
                    "bool",
                    "str",
                    "Optional[dict]",
                    "Dict[str, List[Any]]",
                    "int"
                ],
                "taker_asset": [
                    "bool",
                    "str",
                    "Optional[dict]",
                    "Dict[str, List[Any]]",
                    "int"
                ],
                "full_asset_set": [
                    "float",
                    "int",
                    "List[str]",
                    "str",
                    "Optional[float]"
                ]
            }
        },
        "Orderbook.get_asset_pairs.erc721_asset_data_to_asset": {
            "name": "erc721_asset_data_to_asset",
            "location": 65,
            "return": [
                "str",
                "int",
                "Tuple[int, str, str, str]",
                "Callable"
            ],
            "arguments": {
                "asset_data": [
                    "dict",
                    "bytes"
                ]
            }
        },
        "Orderbook.get_asset_pairs.erc20_asset_data_to_asset": {
            "name": "erc20_asset_data_to_asset",
            "location": 73,
            "return": [
                "str",
                "int",
                "Tuple[int, str, str, str]",
                "Callable"
            ],
            "arguments": {
                "asset_data": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "Orderbook.get_asset_pairs.asset_data_to_asset": {
            "name": "asset_data_to_asset",
            "location": 81,
            "return": [
                "Optional[str]",
                "str",
                "Iterable[Tuple[str, int]]",
                "tuple",
                "Tuple[str, int, Dict[str, str]]"
            ],
            "arguments": {
                "asset_data": [
                    "str",
                    "Union[List, Dict]",
                    "list"
                ]
            }
        },
        "Orderbook.get_asset_pairs.get_asset_pair_data": {
            "name": "get_asset_pair_data",
            "location": 89,
            "return": [
                "dict",
                "str",
                "Optional[Dict]",
                "int"
            ],
            "arguments": {
                "asset_pair": [
                    "dict",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "pydex-master/src/pydex_app/order_update_handler.py": {
        "OrderUpdateHandler.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "str"
                ],
                "order_watcher_server_url": [
                    "float",
                    "raiden.utils.BlockTimeout",
                    "List[str]"
                ],
                "db_check_period_secs": [
                    "str",
                    "bool",
                    "List[Dict]"
                ],
                "heatbeat_period": [
                    "str",
                    "bool",
                    "List[Dict]"
                ]
            }
        },
        "OrderUpdateHandler._fetch_non_unfillables": {
            "name": "_fetch_non_unfillables",
            "location": 76,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderUpdateHandler.run": {
            "name": "run",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderUpdateHandler.on_update": {
            "name": "on_update",
            "location": 123,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "res": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "OrderUpdateHandler.get_order_by_hash": {
            "name": "get_order_by_hash",
            "location": 152,
            "return": [
                "int",
                "str",
                "Tuple[bytes]"
            ],
            "arguments": {
                "self": [],
                "order_hash": [
                    "str"
                ]
            }
        },
        "OrderUpdateHandler.handle_maybe_fillable_order": {
            "name": "handle_maybe_fillable_order",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "order": [
                    "str",
                    "BaseException",
                    "int"
                ],
                "commit": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "OrderUpdateHandler.handle_fillable_order": {
            "name": "handle_fillable_order",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "order_hash": [
                    "Exception",
                    "str",
                    "dict"
                ],
                "commit": [
                    "bool",
                    "str"
                ]
            }
        },
        "OrderUpdateHandler.handle_unfillable_order": {
            "name": "handle_unfillable_order",
            "location": 196,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "order_hash": [
                    "Exception"
                ],
                "reason": [
                    "Exception",
                    "str",
                    "T"
                ],
                "commit": [
                    "bool",
                    "str"
                ]
            }
        },
        "OrderUpdateHandler._commit_db": {
            "name": "_commit_db",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "signal_handler": {
            "name": "signal_handler",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {
                "_signal": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "_frame": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "pydex-master/src/pydex_app/order_watcher_client.py": {
        "OrderWatcherClient.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "server_url": [
                    "str",
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ],
                "on_open": [
                    "str",
                    "Optional[str]"
                ],
                "on_update": [
                    "str",
                    "Optional[str]",
                    "Optional[Mapping]",
                    "int"
                ],
                "on_error": [
                    "str",
                    "raiden.utils.TokenNetworkAddress",
                    "List[Optional[str]]",
                    "Optional[str]",
                    "bool"
                ],
                "on_close": [
                    "str",
                    "List[str]"
                ],
                "enable_trace": [
                    "str",
                    "Optional[str]",
                    "Optional[Mapping]",
                    "int"
                ]
            }
        },
        "OrderWatcherClient.run": {
            "name": "run",
            "location": 74,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderWatcherClient.stop": {
            "name": "stop",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderWatcherClient.join": {
            "name": "join",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderWatcherClient._rpc": {
            "name": "_rpc",
            "location": 99,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "Union[str, int]",
                    "List['Product']",
                    "Dict[str, Any]",
                    "str"
                ],
                "params": [
                    "str",
                    "flask_dialogflow.json.JSON",
                    "list",
                    "int"
                ]
            }
        },
        "OrderWatcherClient.get_stats": {
            "name": "get_stats",
            "location": 123,
            "return": [
                "str",
                "raiden.utils.BlockNumber",
                "raiden.utils.TokenAmount",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderWatcherClient.add_order": {
            "name": "add_order",
            "location": 127,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "signed_order": [
                    "str",
                    "bool"
                ]
            }
        },
        "OrderWatcherClient.remove_order": {
            "name": "remove_order",
            "location": 137,
            "return": [
                "str",
                "cmk.utils.type_defs.HostName",
                "bool"
            ],
            "arguments": {
                "self": [],
                "order_hash": [
                    "str",
                    "bool"
                ]
            }
        },
        "OrderWatcherClient.on_open_router": {
            "name": "on_open_router",
            "location": 147,
            "return": [
                "Optional[bool]",
                "Optional[str]",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderWatcherClient.on_update_router": {
            "name": "on_update_router",
            "location": 154,
            "return": [
                "str",
                "bool",
                "List[str]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Callable"
                ]
            }
        },
        "OrderWatcherClient.on_close_router": {
            "name": "on_close_router",
            "location": 171,
            "return": [
                "str",
                "Optional[str]",
                "Optional[List[Any]]",
                "list",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderWatcherClient.on_error_router": {
            "name": "on_error_router",
            "location": 178,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "Exception"
                ]
            }
        },
        "signal_handler": {
            "name": "signal_handler",
            "location": 201,
            "return": [
                ""
            ],
            "arguments": {
                "_signal": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "_frame": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "pydex-master/src/pydex_app/sra_routes.py": {
        "hello": {
            "name": "hello",
            "location": 19,
            "return": [
                "Dict[str, List[int]]",
                "Dict[str, str]",
                "dict",
                "bytes",
                "Union[shap.utils._legacy.Data, pandas.DataFrame, numpy.ndarray, scipy.sparse.spmatrix]"
            ],
            "arguments": {}
        },
        "get_asset_pairs": {
            "name": "get_asset_pairs",
            "location": 27,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "get_orders": {
            "name": "get_orders",
            "location": 65,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "get_order_book": {
            "name": "get_order_book",
            "location": 110,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "post_order_config": {
            "name": "post_order_config",
            "location": 170,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_post_recipients": {
            "name": "get_post_recipients",
            "location": 196,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "post_order": {
            "name": "post_order",
            "location": 223,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "get_order_by_hash": {
            "name": "get_order_by_hash",
            "location": 242,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "order_hash": [
                    "float",
                    "dict",
                    "str"
                ]
            }
        }
    },
    "pydex-master/src/pydex_app/__init__.py": {
        "create_app": {
            "name": "create_app",
            "location": 14,
            "return": [
                "flask.Flask"
            ],
            "arguments": {
                "config": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "pydex-master/src/pydex_client/client.py": {
        "PyDexClient.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "network_id": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "web3_rpc_url": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "private_key": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "pydex_api_url": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "PyDexClient._str_arg_append": {
            "name": "_str_arg_append",
            "location": 52,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyDexClient.make_asset_pairs_query": {
            "name": "make_asset_pairs_query",
            "location": 56,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "asset_data_a": [
                    "Dict[str, str]",
                    "Sequence",
                    "List[int]",
                    "Tuple[str, List[str]]",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Optional[Dict]"
                ],
                "asset_data_b": [
                    "Dict[str, str]",
                    "Sequence",
                    "List[int]",
                    "Tuple[str, List[str]]",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Optional[Dict]"
                ],
                "page": [
                    "Dict[str, str]",
                    "Sequence",
                    "List[int]",
                    "Tuple[str, List[str]]",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Optional[Dict]"
                ],
                "per_page": [
                    "Dict[str, str]",
                    "Sequence",
                    "List[int]",
                    "Tuple[str, List[str]]",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Optional[Dict]"
                ],
                "include_maybe_fillables": [
                    "Dict[str, str]",
                    "Sequence",
                    "List[int]",
                    "Tuple[str, List[str]]",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Optional[Dict]"
                ]
            }
        },
        "PyDexClient.make_orders_query": {
            "name": "make_orders_query",
            "location": 83,
            "return": [
                "str",
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "maker_asset_proxy_id": [
                    "str",
                    "Optional[Dict]",
                    "Set[int]",
                    "List[Dict[str, Any]]",
                    "Sequence[str]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Dict[int, dict]"
                ],
                "taker_asset_proxy_id": [
                    "str",
                    "Optional[Dict]",
                    "Set[int]",
                    "List[Dict[str, Any]]",
                    "Sequence[str]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Dict[int, dict]"
                ],
                "maker_asset_address": [
                    "str",
                    "Optional[Dict]",
                    "Set[int]",
                    "List[Dict[str, Any]]",
                    "Sequence[str]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Dict[int, dict]"
                ],
                "taker_asset_address": [
                    "str",
                    "Optional[Dict]",
                    "Set[int]",
                    "List[Dict[str, Any]]",
                    "Sequence[str]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Dict[int, dict]"
                ],
                "exchange_address": [
                    "str",
                    "Optional[Dict]",
                    "Set[int]",
                    "List[Dict[str, Any]]",
                    "Sequence[str]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Dict[int, dict]"
                ],
                "sender_address": [
                    "str",
                    "Optional[Dict]",
                    "Set[int]",
                    "List[Dict[str, Any]]",
                    "Sequence[str]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Dict[int, dict]"
                ],
                "maker_asset_data": [
                    "str",
                    "Optional[Dict]",
                    "Set[int]",
                    "List[Dict[str, Any]]",
                    "Sequence[str]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Dict[int, dict]"
                ],
                "taker_asset_data": [
                    "str",
                    "Optional[Dict]",
                    "Set[int]",
                    "List[Dict[str, Any]]",
                    "Sequence[str]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Dict[int, dict]"
                ],
                "trader_asset_data": [
                    "str",
                    "Optional[Dict]",
                    "Set[int]",
                    "List[Dict[str, Any]]",
                    "Sequence[str]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Dict[int, dict]"
                ],
                "maker_address": [
                    "str",
                    "Optional[Dict]",
                    "Set[int]",
                    "List[Dict[str, Any]]",
                    "Sequence[str]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Dict[int, dict]"
                ],
                "taker_address": [
                    "str",
                    "Optional[Dict]",
                    "Set[int]",
                    "List[Dict[str, Any]]",
                    "Sequence[str]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Dict[int, dict]"
                ],
                "trader_address": [
                    "str",
                    "Optional[Dict]",
                    "Set[int]",
                    "List[Dict[str, Any]]",
                    "Sequence[str]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Dict[int, dict]"
                ],
                "fee_recipient_address": [
                    "str",
                    "Optional[Dict]",
                    "Set[int]",
                    "List[Dict[str, Any]]",
                    "Sequence[str]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Dict[int, dict]"
                ],
                "page": [
                    "str",
                    "Optional[Dict]",
                    "Set[int]",
                    "List[Dict[str, Any]]",
                    "Sequence[str]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Dict[int, dict]"
                ],
                "per_page": [
                    "str",
                    "Optional[Dict]",
                    "Set[int]",
                    "List[Dict[str, Any]]",
                    "Sequence[str]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Dict[int, dict]"
                ],
                "include_maybe_fillables": [
                    "str",
                    "Optional[Dict]",
                    "Set[int]",
                    "List[Dict[str, Any]]",
                    "Sequence[str]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Dict[int, dict]"
                ]
            }
        },
        "PyDexClient.make_orderbook_query": {
            "name": "make_orderbook_query",
            "location": 143,
            "return": [
                "str",
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "base_asset_data": [
                    "bool",
                    "bytes",
                    "str",
                    "Optional[bytes]",
                    "Optional[int]",
                    "dict",
                    "Optional[str]",
                    "\"PNCursorTableModel\""
                ],
                "quote_asset_data": [
                    "bool",
                    "bytes",
                    "str",
                    "Optional[bytes]",
                    "Optional[int]",
                    "dict",
                    "Optional[str]",
                    "\"PNCursorTableModel\""
                ],
                "full_set_asset_data": [
                    "str",
                    "dict",
                    "Callable[[dict], None]",
                    "Sequence[str]",
                    "bytes"
                ],
                "page": [
                    "bool",
                    "bytes",
                    "str",
                    "Optional[bytes]",
                    "Optional[int]",
                    "dict",
                    "Optional[str]",
                    "\"PNCursorTableModel\""
                ],
                "per_page": [
                    "bool",
                    "bytes",
                    "str",
                    "Optional[bytes]",
                    "Optional[int]",
                    "dict",
                    "Optional[str]",
                    "\"PNCursorTableModel\""
                ]
            }
        },
        "PyDexClient.get_orderbook": {
            "name": "get_orderbook",
            "location": 173,
            "return": [
                "int",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyDexClient.post_signed_order": {
            "name": "post_signed_order",
            "location": 195,
            "return": [
                "str",
                "bool",
                "Tuple[int, int]",
                "Optional[str]",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "self": [],
                "order": [
                    "mode.utils.Counter[faustypes.TP]",
                    "Optional[str]",
                    "int",
                    "dict"
                ]
            }
        }
    },
    "pydex-master/src/pydex_client/__init__.py": {},
    "pydex-master/src/utils/logutils.py": {
        "setup_logger": {
            "name": "setup_logger",
            "location": 11,
            "return": [
                "int",
                "bytearray",
                "IO"
            ],
            "arguments": {
                "logger_name": [
                    "str",
                    "Optional[str]"
                ],
                "file_name": [
                    "str",
                    "Optional[str]"
                ],
                "log_to_stdout": [
                    "str"
                ],
                "log_level": [
                    "int",
                    "Callable[[], float]",
                    "Optional[int]",
                    "str"
                ],
                "base_dir": [
                    "str"
                ]
            }
        }
    },
    "pydex-master/src/utils/miscutils.py": {
        "now_epoch_secs": {
            "name": "now_epoch_secs",
            "location": 11,
            "return": [
                "float",
                "int",
                "bool",
                "Callable"
            ],
            "arguments": {}
        },
        "now_epoch_msecs": {
            "name": "now_epoch_msecs",
            "location": 16,
            "return": [
                "float",
                "Optional[datetime.timedelta]",
                "int",
                "datetime.datetime"
            ],
            "arguments": {}
        },
        "now_epoch_usecs": {
            "name": "now_epoch_usecs",
            "location": 21,
            "return": [
                "float",
                "Optional[datetime.timedelta]",
                "int",
                "datetime.datetime"
            ],
            "arguments": {}
        },
        "epoch_secs_to_local_time_str": {
            "name": "epoch_secs_to_local_time_str",
            "location": 26,
            "return": [
                "datetime.datetime",
                "str",
                "datetime.timedelta"
            ],
            "arguments": {
                "epoch_secs": [
                    "str",
                    "float",
                    "dict",
                    "int"
                ]
            }
        },
        "epoch_msecs_to_local_time_str": {
            "name": "epoch_msecs_to_local_time_str",
            "location": 31,
            "return": [
                "datetime.datetime",
                "str",
                "datetime.timedelta"
            ],
            "arguments": {
                "epoch_msecs": [
                    "str",
                    "float",
                    "dict",
                    "int"
                ]
            }
        },
        "epoch_secs_to_local_datetime": {
            "name": "epoch_secs_to_local_datetime",
            "location": 36,
            "return": [
                "str",
                "datetime.datetime",
                "datetime.timedelta"
            ],
            "arguments": {
                "epoch_secs": [
                    "float",
                    "str",
                    "dict"
                ]
            }
        },
        "epoch_msecs_to_local_datetime": {
            "name": "epoch_msecs_to_local_datetime",
            "location": 41,
            "return": [
                "str",
                "datetime.datetime",
                "datetime.timedelta"
            ],
            "arguments": {
                "epoch_msecs": [
                    "float",
                    "str",
                    "dict"
                ]
            }
        },
        "try_": {
            "name": "try_",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., Awaitable[Any]]"
                ]
            }
        },
        "assert_like_integer": {
            "name": "assert_like_integer",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "str",
                    "float",
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "paginate": {
            "name": "paginate",
            "location": 67,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "arr": [
                    "int"
                ],
                "page": [
                    "int",
                    "List[List[int]]",
                    "bool"
                ],
                "per_page": [
                    "int"
                ]
            }
        },
        "normalize_query_param": {
            "name": "normalize_query_param",
            "location": 81,
            "return": [
                "Dict[str, Any]",
                "Mapping[str, Any]",
                "Callable",
                "str"
            ],
            "arguments": {
                "query_param": [
                    "str"
                ]
            }
        },
        "to_api_order": {
            "name": "to_api_order",
            "location": 86,
            "return": [
                "Optional[float]",
                "str",
                "dict",
                "bool",
                "int"
            ],
            "arguments": {
                "signed_order_json": [
                    "dict",
                    "IO",
                    "List[str]",
                    "int",
                    "Iterator[Dict[str, str]]"
                ]
            }
        }
    },
    "pydex-master/src/utils/web3utils.py": {
        "assert_valid_address": {
            "name": "assert_valid_address",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "address": [
                    "str",
                    "web3.contracContract",
                    "Optional[str]"
                ]
            }
        },
        "assert_valid_address_or_none": {
            "name": "assert_valid_address_or_none",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "address": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Iterable[T]",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_clean_address_or_throw": {
            "name": "get_clean_address_or_throw",
            "location": 30,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "address": [
                    "str",
                    "Union[str, int]",
                    "Union[str, Iterable[str]]"
                ]
            }
        },
        "to_base_unit_amount": {
            "name": "to_base_unit_amount",
            "location": 45,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "amount": [
                    "int",
                    "bytes",
                    "Sequence[int]"
                ],
                "decimals": [
                    "int",
                    "bytes",
                    "Sequence[int]"
                ]
            }
        },
        "from_base_unit_amount": {
            "name": "from_base_unit_amount",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "base_amount": [
                    "str",
                    "bool",
                    "Sequence[int]",
                    "int"
                ],
                "decimals": [
                    "str",
                    "bool",
                    "Sequence[int]",
                    "int"
                ]
            }
        },
        "Web3Client.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "network_id": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "List[dict]",
                    "Optional[str]",
                    "int"
                ],
                "web3_rpc_url": [
                    "str",
                    "Optional[str]"
                ],
                "private_key": [
                    "List[int]",
                    "Sequence[int]",
                    "int",
                    "List[float]",
                    "Callable",
                    "List[dict]",
                    "bool"
                ]
            }
        },
        "Web3Client.__str__": {
            "name": "__str__",
            "location": 96,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Web3Client._str_arg_append": {
            "name": "_str_arg_append",
            "location": 107,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Web3Client.private_key": {
            "name": "private_key",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[hexbytes.HexBytes, str]",
                    "bytes",
                    "Union[str, bytes]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Web3Client.web3_provider": {
            "name": "web3_provider",
            "location": 132,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Web3Client.web3_instance": {
            "name": "web3_instance",
            "location": 140,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Web3Client.web3_eth": {
            "name": "web3_eth",
            "location": 150,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Web3Client.account": {
            "name": "account",
            "location": 159,
            "return": [
                "dict",
                "Exception",
                "Dict[str, Any]",
                "Dict[str, Union[str, Set]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Web3Client.account_address": {
            "name": "account_address",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "addr_str": [
                    "str"
                ]
            }
        },
        "Web3Client.account_address_checksumed": {
            "name": "account_address_checksumed",
            "location": 187,
            "return": [
                "Dict[str, Any]",
                "Exception",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Web3Client.sign_hash": {
            "name": "sign_hash",
            "location": 191,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "hash_hex": [
                    "str",
                    "dict"
                ]
            }
        },
        "Web3Client.get_checksum_address": {
            "name": "get_checksum_address",
            "location": 210,
            "return": [
                "dict",
                "Optional[Dict]",
                "bool",
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "List[str]",
                    "Callable",
                    "List[Dict]"
                ],
                "addr": [
                    "BinaryIO",
                    "str"
                ]
            }
        },
        "Web3Client.get_eth_balance": {
            "name": "get_eth_balance",
            "location": 214,
            "return": [
                "bool",
                "Dict[str, Dict[str, Any]]",
                "Optional[List[Any]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pydex-master/src/utils/zeroexutils.py": {
        "ZxOrderInfo.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "zx_order_status": [
                    "int",
                    "bool",
                    "Union[int, float]",
                    "List[str]",
                    "Iterable"
                ],
                "order_hash": [
                    "int",
                    "raiden.utils.Secret",
                    "Optional[int]",
                    "bool",
                    "str"
                ],
                "order_taker_asset_filled_amount": [
                    "int",
                    "List[Tuple[str, str]]",
                    "List[str]",
                    "Callable[[int], bool]"
                ]
            }
        },
        "ZxOrderInfo.__str__": {
            "name": "__str__",
            "location": 85,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZxSignedOrder.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ZxSignedOrder.__str__": {
            "name": "__str__",
            "location": 149,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZxSignedOrder.hash": {
            "name": "hash",
            "location": 173,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZxSignedOrder.maker_address": {
            "name": "maker_address",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T",
                    "Union[None, int, float]",
                    "dict",
                    "Optional[int]",
                    "Union[None, float, int, str]",
                    "Optional[Union[str, Any]]",
                    "Optional[Tuple[Any, Any]]",
                    "bool"
                ]
            }
        },
        "ZxSignedOrder.taker_address": {
            "name": "taker_address",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T",
                    "Union[None, int, float]",
                    "dict",
                    "Optional[int]",
                    "Union[None, float, int, str]",
                    "Optional[Union[str, Any]]",
                    "Optional[Tuple[Any, Any]]",
                    "bool"
                ]
            }
        },
        "ZxSignedOrder.fee_recipient_address": {
            "name": "fee_recipient_address",
            "location": 213,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "T",
                    "Optional[str]",
                    "Optional[float]",
                    "Union[int, None]",
                    "Union[str, None]",
                    "VT",
                    "Iterator[T]"
                ]
            }
        },
        "ZxSignedOrder.sender_address": {
            "name": "sender_address",
            "location": 227,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T",
                    "Union[None, int, float]",
                    "dict",
                    "Optional[int]",
                    "Union[None, float, int, str]",
                    "Optional[Union[str, Any]]",
                    "Optional[Tuple[Any, Any]]",
                    "bool"
                ]
            }
        },
        "ZxSignedOrder.exchange_address": {
            "name": "exchange_address",
            "location": 241,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T",
                    "Union[None, int, float]",
                    "dict",
                    "Optional[int]",
                    "Union[None, float, int, str]",
                    "Optional[Union[str, Any]]",
                    "Optional[Tuple[Any, Any]]",
                    "bool"
                ]
            }
        },
        "ZxSignedOrder.maker_asset_amount": {
            "name": "maker_asset_amount",
            "location": 255,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "ZxSignedOrder.taker_asset_amount": {
            "name": "taker_asset_amount",
            "location": 272,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "ZxSignedOrder.maker_fee": {
            "name": "maker_fee",
            "location": 289,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[float, int]",
                    "bool",
                    "float"
                ]
            }
        },
        "ZxSignedOrder.taker_fee": {
            "name": "taker_fee",
            "location": 304,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[float, int]",
                    "bool",
                    "float"
                ]
            }
        },
        "ZxSignedOrder.salt": {
            "name": "salt",
            "location": 319,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float"
                ]
            }
        },
        "ZxSignedOrder.expiration_time": {
            "name": "expiration_time",
            "location": 329,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZxSignedOrder.expiration_time_seconds": {
            "name": "expiration_time_seconds",
            "location": 339,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "cmk.utils.type_defs.Seconds",
                    "int"
                ]
            }
        },
        "ZxSignedOrder.maker_asset_data": {
            "name": "maker_asset_data",
            "location": 353,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "object",
                    "bytes",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "ZxSignedOrder.taker_asset_data": {
            "name": "taker_asset_data",
            "location": 367,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "object",
                    "bytes",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "ZxSignedOrder.signature": {
            "name": "signature",
            "location": 381,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[Union[bool, int]]",
                    "raiden.utils.Address",
                    "raiden.utils.TokenAmount"
                ]
            }
        },
        "ZxSignedOrder.created_at_msecs": {
            "name": "created_at_msecs",
            "location": 386,
            "return": [
                "Tuple[int, int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZxSignedOrder.created_at": {
            "name": "created_at",
            "location": 391,
            "return": [
                "str",
                "float",
                "Callable",
                "raiden.utils.TokenAmount"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZxSignedOrder.bid_price": {
            "name": "bid_price",
            "location": 396,
            "return": [
                "int",
                "trezor.utils.Writer",
                "utils.Node",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZxSignedOrder.ask_price": {
            "name": "ask_price",
            "location": 401,
            "return": [
                "int",
                "trezor.utils.Writer",
                "utils.Node",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZxSignedOrder.sort_price": {
            "name": "sort_price",
            "location": 406,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZxSignedOrder.update_hash": {
            "name": "update_hash",
            "location": 414,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZxSignedOrder.update": {
            "name": "update",
            "location": 419,
            "return": [
                "float",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZxSignedOrder.update_bid_price": {
            "name": "update_bid_price",
            "location": 424,
            "return": [
                "float",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZxSignedOrder.update_ask_price": {
            "name": "update_ask_price",
            "location": 435,
            "return": [
                "float",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZxSignedOrder.set_bid_as_sort_price": {
            "name": "set_bid_as_sort_price",
            "location": 446,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZxSignedOrder.set_ask_as_sort_price": {
            "name": "set_ask_as_sort_price",
            "location": 453,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZxSignedOrder.to_json": {
            "name": "to_json",
            "location": 460,
            "return": [
                "float",
                "dict",
                "decimal.Decimal",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "include_hash": [
                    "int",
                    "bool"
                ],
                "include_signature": [
                    "int",
                    "bool"
                ],
                "include_exchange_address": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Iterable[str]",
                    "int"
                ],
                "for_web3": [
                    "int",
                    "bool"
                ]
            }
        },
        "ZxSignedOrder.get_order_hash": {
            "name": "get_order_hash",
            "location": 529,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Type[T]",
                    "List[str]"
                ],
                "order_json": [
                    "int",
                    "List[int]",
                    "Type['DataclassT']",
                    "str"
                ]
            }
        },
        "ZxSignedOrder.from_json": {
            "name": "from_json",
            "location": 567,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "cls": [
                    "Optional[Any]",
                    "bool",
                    "Union[float, Tuple[float, float]]"
                ],
                "order_json": [
                    "bool",
                    "str",
                    "int",
                    "Optional[Dict[str, Any]]"
                ],
                "check_validity": [
                    "bool"
                ],
                "include_signature": [
                    "bool"
                ]
            }
        },
        "ZxWeb3Client.__init__": {
            "name": "__init__",
            "location": 616,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "network_id": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "web3_rpc_url": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "private_key": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "ZxWeb3Client.exchange_address_checksumed": {
            "name": "exchange_address_checksumed",
            "location": 639,
            "return": [
                "str",
                "Callable",
                "Optional[str]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZxWeb3Client.zx_exchange": {
            "name": "zx_exchange",
            "location": 644,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZxWeb3Client.sign_hash_zx_compat": {
            "name": "sign_hash_zx_compat",
            "location": 652,
            "return": [
                "Optional[str]",
                "Dict[str, Dict[str, Any]]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "hash_hex": [
                    "str",
                    "int"
                ]
            }
        },
        "ZxWeb3Client.get_zx_signature_from_ec_signature": {
            "name": "get_zx_signature_from_ec_signature",
            "location": 663,
            "return": [
                "type",
                "int",
                "Optional[BaseException]",
                "dict"
            ],
            "arguments": {
                "ec_signature": [
                    "int",
                    "bytes"
                ]
            }
        },
        "ZxWeb3Client.cancel_zx_order": {
            "name": "cancel_zx_order",
            "location": 683,
            "return": [
                "float",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "zx_signed_order": [
                    "str",
                    "Exception",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "ZxWeb3Client.fill_zx_order": {
            "name": "fill_zx_order",
            "location": 696,
            "return": [
                "float",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "zx_signed_order": [
                    "float",
                    "int"
                ],
                "taker_fill_amount": [
                    "int",
                    "Optional[int]",
                    "Sequence",
                    "Union[int, float]",
                    "List[str]"
                ],
                "base_unit_decimals": [
                    "int",
                    "Sequence",
                    "raiden.utils.TokenAmount"
                ]
            }
        },
        "ZxWeb3Client._build_and_send_tx": {
            "name": "_build_and_send_tx",
            "location": 719,
            "return": [
                "Callable",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "T",
                    "Callable",
                    "List[dict]"
                ],
                "gas": [
                    "List[str]"
                ]
            }
        },
        "ZxWeb3Client._get_tx_params": {
            "name": "_get_tx_params",
            "location": 732,
            "return": [
                "Dict[str, str]",
                "int",
                "bool",
                "Collection[Any]",
                "str",
                "Dict[str, Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "gas": [
                    "Callable[[dict], None]",
                    "List[cmk.utils.type_defs.HostName]",
                    "List[int]",
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "pydex-master/src/utils/__init__.py": {},
    "pydex-master/tests/conftest.py": {
        "logger": {
            "name": "logger",
            "location": 29,
            "return": [
                "int",
                "str",
                "bytearray"
            ],
            "arguments": {}
        },
        "asset_infos": {
            "name": "asset_infos",
            "location": 35,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {}
        },
        "network_id": {
            "name": "network_id",
            "location": 58,
            "return": [
                "bool",
                "int",
                "Optional[str]",
                "Optional[bool]",
                "Optional[List[Any]]"
            ],
            "arguments": {}
        },
        "exchange_address": {
            "name": "exchange_address",
            "location": 64,
            "return": [
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "network_id": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "web3_rpc_url": {
            "name": "web3_rpc_url",
            "location": 70,
            "return": [
                "str",
                "float"
            ],
            "arguments": {}
        },
        "private_key": {
            "name": "private_key",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "test_app": {
            "name": "test_app",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "network_id": [
                    "str",
                    "Set[int]",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "test_client": {
            "name": "test_client",
            "location": 117,
            "return": [
                "Tuple[Callable, Callable]"
            ],
            "arguments": {
                "test_app": []
            }
        },
        "pydex_client": {
            "name": "pydex_client",
            "location": 123,
            "return": [
                "Callable[[List, bool], None]",
                "bool"
            ],
            "arguments": {
                "network_id": [
                    "str",
                    "bytes",
                    "raiden.utils.Address"
                ],
                "web3_rpc_url": [
                    "str",
                    "bytes",
                    "raiden.utils.Address"
                ],
                "private_key": [
                    "str",
                    "bytes",
                    "raiden.utils.Address"
                ]
            }
        },
        "make_veth_signed_order": {
            "name": "make_veth_signed_order",
            "location": 133,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "asset_infos": [
                    "str"
                ],
                "pydex_client": [
                    "str"
                ],
                "exchange_address": [
                    "str"
                ]
            }
        },
        "make_veth_signed_order._make_veth_signed_order": {
            "name": "_make_veth_signed_order",
            "location": 139,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "asset_type": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "qty": [
                    "float",
                    "str",
                    "int"
                ],
                "price": [
                    "int",
                    "float",
                    "bool",
                    "str",
                    "Optional[float]"
                ],
                "side": [
                    "bool",
                    "Optional[bool]",
                    "str",
                    "Union[bool, int]",
                    "List[Dict[str, Any]]"
                ],
                "maker_address": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "Optional[str]"
                ],
                "expiration_time_seconds": [
                    "int",
                    "Optional[int]"
                ],
                "maker_fee": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "taker_fee": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "salt": [
                    "Optional[bool]",
                    "Optional[float]",
                    "Optional[\"ValidatorTypes\"]",
                    "Optional[int]",
                    "Optional[List[\"Node\"]]"
                ],
                "taker_address": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "Optional[str]"
                ],
                "fee_recipient_address": [
                    "str",
                    "int",
                    "bool",
                    "Optional[\"CustomerReference\"]"
                ],
                "sender_address": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "Optional[str]"
                ],
                "exchange_address": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "Optional[str]"
                ],
                "pydex_client": [
                    "str",
                    "bool",
                    "raiden.utils.Dict",
                    "raiden.utils.TokenAmount"
                ]
            }
        }
    },
    "pydex-master/tests/__init__.py": {},
    "pydex-master/tests/functional/test_sra_api.py": {
        "test_post_order": {
            "name": "test_post_order",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "test_client": [
                    "bool",
                    "List[str]"
                ],
                "pydex_client": [
                    "bool",
                    "List[str]"
                ],
                "make_veth_signed_order": [
                    "List[str]",
                    "str",
                    "float",
                    "raiden.utils.List[raiden.utils.TokenAddress]"
                ]
            }
        },
        "test_query_orders": {
            "name": "test_query_orders",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "test_client": [
                    "str"
                ],
                "pydex_client": [
                    "float",
                    "raiden.utils.BlockTimeout",
                    "str"
                ],
                "asset_infos": [
                    "float",
                    "raiden.utils.BlockTimeout",
                    "str"
                ]
            }
        },
        "test_query_orderbook": {
            "name": "test_query_orderbook",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "test_client": [
                    "str"
                ],
                "pydex_client": [
                    "float",
                    "raiden.utils.BlockTimeout",
                    "str"
                ],
                "asset_infos": [
                    "float",
                    "raiden.utils.BlockTimeout",
                    "str"
                ]
            }
        },
        "test_query_asset_pairs": {
            "name": "test_query_asset_pairs",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "test_client": [
                    "str",
                    "raiden.utils.Address"
                ],
                "pydex_client": [
                    "str"
                ],
                "asset_infos": [
                    "int"
                ]
            }
        },
        "test_query_fee_recipients": {
            "name": "test_query_fee_recipients",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "test_client": [
                    "List[str]"
                ],
                "pydex_client": [
                    "List[str]"
                ]
            }
        },
        "test_to_and_from_json_signed_order": {
            "name": "test_to_and_from_json_signed_order",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "pydex_client": []
            }
        }
    },
    "pydex-master/tests/functional/__init__.py": {},
    "pydex-master/tests/unit/test_zeroex_web3_client.py": {
        "zx_client": {
            "name": "zx_client",
            "location": 12,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "test_account_address": {
            "name": "test_account_address",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "zx_client": [
                    "str"
                ]
            }
        },
        "test_sign_hash": {
            "name": "test_sign_hash",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "zx_client": [
                    "str"
                ]
            }
        }
    },
    "pydex-master/tests/unit/__init__.py": {}
}
{
    "pydiggy-master/setup.py": {},
    "pydiggy-master/docs/conf.py": {},
    "pydiggy-master/examples/basic.py": {},
    "pydiggy-master/examples/subclass.py": {
        "NoneNode.__bool__": {
            "name": "__bool__",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoneNode.__eq__": {
            "name": "__eq__",
            "location": 40,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "Node",
                    "Sequence[str]",
                    "str"
                ]
            }
        },
        "NoneNode.to_json": {
            "name": "to_json",
            "location": 47,
            "return": [
                "Optional[str]",
                "Optional[Node]",
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {}
        },
        "BaseAbstract.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAbstract.__getattr__": {
            "name": "__getattr__",
            "location": 60,
            "return": [
                "float",
                "Tuple[Any, int]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "BaseAbstract.__checker": {
            "name": "__checker",
            "location": 73,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "int",
                    "bytes",
                    "str",
                    "Callable",
                    "Union[Type, Tuple[Type, ...]]",
                    "float"
                ],
                "default": [
                    "int",
                    "bytes",
                    "str",
                    "Callable",
                    "Union[Type, Tuple[Type, ...]]",
                    "float"
                ]
            }
        },
        "BaseAbstract.get": {
            "name": "get",
            "location": 77,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, str]]"
                ],
                "uid": [
                    "str",
                    "Tuple['cirq.Qid']",
                    "Optional[str]",
                    "bool",
                    "Dict[str, str]"
                ],
                "query": [
                    "Optional[str]",
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, str]"
                ],
                "query_name": [
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "single": [
                    "float",
                    "str",
                    "Dict[str, List[str]]",
                    "Union[str, Iterable[str]]"
                ],
                "first": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "offset": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "filters": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "subqueries": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "BaseAbstract.filter": {
            "name": "filter",
            "location": 121,
            "return": [
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, Any]"
                ],
                "query": [
                    "str"
                ],
                "query_name": [
                    "str"
                ]
            }
        },
        "BaseAbstract.update": {
            "name": "update",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAbstract.to_json": {
            "name": "to_json",
            "location": 159,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "include": [
                    "Optional[bytes]"
                ]
            }
        },
        "BaseAbstract.clean_computed": {
            "name": "clean_computed",
            "location": 168,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "json": [
                    "int",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "Person._get_parents": {
            "name": "_get_parents",
            "location": 286,
            "return": [
                "str",
                "dict",
                "Optional[str]",
                "Tuple[str]",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "Type[Any]",
                    "Type[T]",
                    "type",
                    "Exception"
                ],
                "person": [
                    "type",
                    "dict",
                    "str",
                    "Callable",
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]"
                ],
                "step": [
                    "str",
                    "Type[T]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Person.ancestors": {
            "name": "ancestors",
            "location": 319,
            "return": [
                "bool",
                "float",
                "AsyncGenerator",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAbstract.filter.make_filter": {
            "name": "make_filter",
            "location": 124,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "value": [
                    "str",
                    "set",
                    "int"
                ]
            }
        }
    },
    "pydiggy-master/examples/__init__.py": {},
    "pydiggy-master/pydiggy/cli.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "flush": {
            "name": "flush",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "host": [
                    "int",
                    "str",
                    "bool"
                ],
                "port": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "generate": {
            "name": "generate",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "module": [
                    "bool",
                    "str",
                    "Type['BaseModel']",
                    "List[str]"
                ],
                "run": [
                    "bool",
                    "dict"
                ],
                "host": [
                    "str",
                    "Optional[int]",
                    "bool",
                    "int"
                ],
                "port": [
                    "str",
                    "Optional[int]",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "pydiggy-master/pydiggy/connection.py": {
        "get_stub": {
            "name": "get_stub",
            "location": 58,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "host": [
                    "str",
                    "int",
                    "bool"
                ],
                "port": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "get_client": {
            "name": "get_client",
            "location": 65,
            "return": [
                "int"
            ],
            "arguments": {
                "host": [
                    "str",
                    "int"
                ],
                "port": [
                    "str",
                    "int"
                ],
                "test": [
                    "bool",
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "PyDiggyClient.__repr__": {
            "name": "__repr__",
            "location": 10,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyDiggyClient.query": {
            "name": "query",
            "location": 14,
            "return": [
                "str",
                "set",
                "dict",
                "List[Dict[str, Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyDiggyTestTransaction.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PyDiggyTestTransaction.mutate": {
            "name": "mutate",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PyDiggyTestTransaction.commit": {
            "name": "commit",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PyDiggyTestTransaction.discard": {
            "name": "discard",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PyDiggyTestClient.query": {
            "name": "query",
            "location": 38,
            "return": [
                "str",
                "set",
                "dict",
                "List[Dict[str, Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "variables": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "timeout": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "metadata": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "credentials": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "PyDiggyTestClient.txn": {
            "name": "txn",
            "location": 54,
            "return": [
                "List[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "read_only": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "PyDiggyTestClient.query.Result.json": {
            "name": "json",
            "location": 49,
            "return": [
                "bool",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pydiggy-master/pydiggy/exceptions.py": {
        "ConflictingType.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pname": [
                    "str"
                ],
                "incoming": [
                    "str",
                    "bool"
                ],
                "existing": [
                    "str",
                    "bool"
                ]
            }
        },
        "NotStaged.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "\"ks.Series\"",
                    "str"
                ]
            }
        },
        "InvalidData.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "Union[str, List[str], Tuple[str, ...]]"
                ]
            }
        },
        "MissingAttribute.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "IO",
                    "bool",
                    "Optional[int]"
                ],
                "attribute": [
                    "str",
                    "IO",
                    "bool",
                    "Optional[int]"
                ]
            }
        }
    },
    "pydiggy-master/pydiggy/node.py": {
        "Facets": {
            "name": "Facets",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [
                    "Optional[Union[str, Any]]",
                    "list",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "Computed": {
            "name": "Computed",
            "location": 32,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "is_facets": {
            "name": "is_facets",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "int"
                ]
            }
        },
        "is_computed": {
            "name": "is_computed",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "node": [
                    "str"
                ]
            }
        },
        "_force_instance": {
            "name": "_force_instance",
            "location": 53,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "directive": [
                    "str",
                    "Type",
                    "Tuple[str]",
                    "int",
                    "Union[type, Tuple[type, ...]]",
                    "bool",
                    "Optional[type]"
                ],
                "prop_type": [
                    "Type[BaseException]",
                    "str",
                    "Tuple[Type]",
                    "Type",
                    "Union[str, 'Type']"
                ]
            }
        },
        "extract_type": {
            "name": "extract_type",
            "location": 73,
            "return": [
                "int",
                "Dict[str, type]",
                "bool"
            ],
            "arguments": {
                "p_type": [
                    "str",
                    "Dict[str, Any]",
                    "list",
                    "Union[str]",
                    "int"
                ]
            }
        },
        "get_node": {
            "name": "get_node",
            "location": 82,
            "return": [
                "bool",
                "Optional[Dict[str, Any]]",
                "str",
                "lang.LanguageContext",
                "Optional[str]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "ReverseRegistry.__new__": {
            "name": "__new__",
            "location": 98,
            "return": [
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ReverseRegistry.__setattr__": {
            "name": "__setattr__",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "enum.Enum"
                ],
                "value": [
                    "T",
                    "str"
                ]
            }
        },
        "NodeMeta.__new__": {
            "name": "__new__",
            "location": 111,
            "return": [
                "Type",
                "str",
                "Type[Any]",
                "Sequence[Any]",
                "int",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ],
                "name": [
                    "dict",
                    "str",
                    "List[Tuple[str, str]]"
                ],
                "bases": [
                    "str",
                    "bool"
                ],
                "attrs": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "MutableMapping[str, Any]"
                ]
            }
        },
        "Node.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[int]",
                    "Type[T]"
                ],
                "is_abstract": [
                    "bool",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "uid": [
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "Node.__repr__": {
            "name": "__repr__",
            "location": 214,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__hash__": {
            "name": "__hash__",
            "location": 217,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__getattr__": {
            "name": "__getattr__",
            "location": 220,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "Iterable[T]",
                    "bool",
                    "Callable",
                    "qcodes.datasesqlite.connection.ConnectionPlus"
                ]
            }
        },
        "Node.__eq__": {
            "name": "__eq__",
            "location": 225,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "BinaryIO",
                    "Exception",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "Node.__setattr__": {
            "name": "__setattr__",
            "location": 230,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "Iterable[Hashable]",
                    "Dict[str, str]"
                ]
            }
        },
        "Node._reset": {
            "name": "_reset",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "T",
                    "str",
                    "bytes",
                    "dict",
                    "List[str]",
                    "\"CategoricalDtype\"",
                    "bool"
                ]
            }
        },
        "Node._register_node": {
            "name": "_register_node",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "Dict[str, Any]"
                ],
                "node": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Node._get_name": {
            "name": "_get_name",
            "location": 300,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable[..., T]",
                    "dict"
                ]
            }
        },
        "Node._generate_schema": {
            "name": "_generate_schema",
            "location": 304,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "type"
                ]
            }
        },
        "Node._get_type_name": {
            "name": "_get_type_name",
            "location": 426,
            "return": [
                "Callable",
                "dict",
                "bool",
                "Union[str, 'Type']"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ],
                "schema_type": [
                    "str",
                    "bool"
                ]
            }
        },
        "Node._get_staged": {
            "name": "_get_staged",
            "location": 439,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[int]",
                    "Type['DataclassT']",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Node._clear_staged": {
            "name": "_clear_staged",
            "location": 443,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "IO[bytes]",
                    "Callable",
                    "T",
                    "str",
                    "Exception",
                    "Callable[[], Any]"
                ]
            }
        },
        "Node._hydrate": {
            "name": "_hydrate",
            "location": 448,
            "return": [
                "str",
                "Optional[str]",
                "Optional[List[Any]]",
                "list",
                "Optional[BaseException]"
            ],
            "arguments": {
                "cls": [
                    "Set[str]",
                    "str",
                    "Set[enum.Enum]",
                    "Type[T]"
                ],
                "raw": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ],
                "types": [
                    "str",
                    "Union[str, int]",
                    "Tuple[str]",
                    "Type"
                ]
            }
        },
        "Node.json": {
            "name": "json",
            "location": 571,
            "return": [
                "str",
                "Type",
                "bool",
                "int"
            ],
            "arguments": {
                "cls": [
                    "T",
                    "int",
                    "basilisp.lang.interfaces.ISeq",
                    "list",
                    "\"Vector\"",
                    "Iterable[Any]"
                ]
            }
        },
        "Node._explode": {
            "name": "_explode",
            "location": 589,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "T",
                    "dict",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "str",
                    "Type",
                    "int"
                ],
                "instance": [
                    "dict",
                    "Dict[str, Any]",
                    "bytes",
                    "T",
                    "str",
                    "Union[int, slice]"
                ],
                "max_depth": [
                    "int",
                    "str",
                    "bool",
                    "Optional[int]",
                    "Iterable[T]"
                ],
                "depth": [
                    "int",
                    "str",
                    "bool",
                    "Optional[int]",
                    "Iterable[T]"
                ],
                "include": [
                    "List[str]",
                    "str",
                    "dict",
                    "Tuple[List[Any], List[Any]]",
                    "\"DataFrame\""
                ]
            }
        },
        "Node.create": {
            "name": "create",
            "location": 683,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "float",
                    "Callable"
                ]
            }
        },
        "Node._is_node_type": {
            "name": "_is_node_type",
            "location": 693,
            "return": [
                "str",
                "int",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "cls": [
                    "Optional[bool]",
                    "Type[T]",
                    "bool",
                    "str"
                ]
            }
        },
        "Node._type": {
            "name": "_type",
            "location": 698,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node._generate_uid": {
            "name": "_generate_uid",
            "location": 701,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.to_json": {
            "name": "to_json",
            "location": 705,
            "return": [
                "str",
                "int",
                "list"
            ],
            "arguments": {
                "self": [],
                "include": [
                    "float",
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "Node.stage": {
            "name": "stage",
            "location": 711,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.delete": {
            "name": "delete",
            "location": 724,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Set[str]",
                    "Sequence[object]"
                ],
                "pred": [
                    "Sequence[object]",
                    "Set[str]",
                    "bool"
                ]
            }
        },
        "Node.save": {
            "name": "save",
            "location": 737,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "pydiggy.connection.PyDiggyClient",
                    "bool",
                    "bytes",
                    "str"
                ],
                "host": [
                    "int",
                    "str",
                    "bool"
                ],
                "port": [
                    "int",
                    "str",
                    "bool"
                ],
                "commit": [
                    "raiden.utils.Address",
                    "int",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "Node.save._make_obj": {
            "name": "_make_obj",
            "location": 753,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "node": [
                    "dict"
                ],
                "pred": [
                    "str",
                    "purplship.providers.ups.utils.Settings"
                ],
                "obj": [
                    "Dict[str, bool]",
                    "set",
                    "str"
                ]
            }
        },
        "Node.__setattr__._assign": {
            "name": "_assign",
            "location": 255,
            "return": [
                ""
            ],
            "arguments": {
                "obj": [
                    "str",
                    "bool",
                    "dict"
                ],
                "key": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Tuple[object]"
                ],
                "value": [
                    "Union[dict, List[Any]]",
                    "List[str]",
                    "Iterable",
                    "Optional[Iterable]",
                    "asyncpg.connection.Connection",
                    "T",
                    "Callable"
                ],
                "do_many": [
                    "Optional[Any]",
                    "str",
                    "bool",
                    "Callable",
                    "Optional[bool]",
                    "int"
                ],
                "remove": [
                    "dict",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "pydiggy-master/pydiggy/operations.py": {
        "_make_obj": {
            "name": "_make_obj",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "node": [
                    "mypy.nodes.Node",
                    "dict"
                ],
                "pred": [
                    "Dict[str, Any]",
                    "str",
                    "purplship.providers.ups.utils.Settings"
                ],
                "obj": [
                    "node.Node",
                    "str",
                    "dict"
                ]
            }
        },
        "generate_mutation": {
            "name": "generate_mutation",
            "location": 70,
            "return": [
                "bool",
                "Dict[str, Set[str]]",
                "Type",
                "str",
                "bytes"
            ],
            "arguments": {}
        },
        "hydrate": {
            "name": "hydrate",
            "location": 126,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "Mapping[str, Any]"
                ],
                "types": [
                    "Optional[int]",
                    "Optional[str]",
                    "str",
                    "Optional[Type]",
                    "Dict[str, str]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "query": {
            "name": "query",
            "location": 150,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "qry": [
                    "str"
                ],
                "client": [
                    "cmk.utils.type_defs.ServiceName",
                    "dict"
                ],
                "raw": [
                    "bool",
                    "str",
                    "List[Tuple[int, str]]",
                    "Callable",
                    "raiden.utils.BlockTimeout"
                ],
                "json": [
                    "int",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "run_mutation": {
            "name": "run_mutation",
            "location": 183,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "mutation": [
                    "Optional[bool]",
                    "Callable",
                    "str",
                    "bool"
                ],
                "client": [
                    "pyppeteer.connection.CDPSession"
                ]
            }
        }
    },
    "pydiggy-master/pydiggy/utils.py": {
        "_parse_subject": {
            "name": "_parse_subject",
            "location": 1,
            "return": [
                "str"
            ],
            "arguments": {
                "uid": [
                    "int",
                    "str",
                    "Callable",
                    "bool",
                    "bytes"
                ]
            }
        },
        "_rdf_value": {
            "name": "_rdf_value",
            "location": 8,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "float",
                    "bool",
                    "bytes",
                    "int"
                ]
            }
        },
        "_raw_value": {
            "name": "_raw_value",
            "location": 20,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "float",
                    "bool",
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "pydiggy-master/pydiggy/_types.py": {
        "DirectiveArgument._clean_name": {
            "name": "_clean_name",
            "location": 18,
            "return": [
                "str",
                "BaseException",
                "Exception",
                "Type[BaseException]",
                "type",
                "int"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict",
                    "type"
                ]
            }
        },
        "Directive.__str__": {
            "name": "__str__",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "index.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tokenizer": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "reverse.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ],
                "many": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "datetime.datetime",
                    "Optional[str]"
                ],
                "with_facets": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "datetime.datetime",
                    "Optional[str]"
                ]
            }
        }
    },
    "pydiggy-master/pydiggy/__init__.py": {},
    "pydiggy-master/pydiggy/__main__.py": {},
    "pydiggy-master/tests/conftest.py": {
        "RegionClass": {
            "name": "RegionClass",
            "location": 11,
            "return": [
                "int",
                "str",
                "Callable[..., T]"
            ],
            "arguments": {}
        },
        "TypeTestClass": {
            "name": "TypeTestClass",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "commands": {
            "name": "commands",
            "location": 34,
            "return": [
                "list",
                "Callable[[Mapping], T]",
                "int",
                "Tuple[str, str]",
                "str"
            ],
            "arguments": {}
        }
    },
    "pydiggy-master/tests/test_hydration.py": {
        "retrieved_data_simple": {
            "name": "retrieved_data_simple",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "retrieved_data_with_reverse": {
            "name": "retrieved_data_with_reverse",
            "location": 59,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "test_hydration": {
            "name": "test_hydration",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "retrieved_data_simple": [
                    "Set[Hashable]",
                    "Hashable",
                    "Node"
                ]
            }
        },
        "test_hydration_reverse": {
            "name": "test_hydration_reverse",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "retrieved_data_with_reverse": [
                    "dict",
                    "str",
                    "Dict[str, Union[int, bool]]",
                    "Dict[str, int]"
                ]
            }
        }
    },
    "pydiggy-master/tests/test_missing.py": {
        "test_missing": {
            "name": "test_missing",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "RegionClass": [
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "pydiggy-master/tests/test_mutation.py": {
        "test_mutations": {
            "name": "test_mutations",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "RegionClass": [
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "pydiggy-master/tests/test_node.py": {
        "test__node__to__json": {
            "name": "test__node__to__json",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "RegionClass": [
                    "bool",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        }
    },
    "pydiggy-master/tests/test_operations.py": {
        "test__parse_subject": {
            "name": "test__parse_subject",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test__make_obj": {
            "name": "test__make_obj",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "TypeTestClass": [
                    "str"
                ]
            }
        }
    },
    "pydiggy-master/tests/test_pydiggy.py": {
        "runner": {
            "name": "runner",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_command_line_interface_has_commands": {
            "name": "test_command_line_interface_has_commands",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "runner": [],
                "commands": [
                    "bool"
                ]
            }
        },
        "test_dry_run_generate_schema": {
            "name": "test_dry_run_generate_schema",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "runner": []
            }
        }
    },
    "pydiggy-master/tests/test_reverse.py": {
        "test_reverse_normal": {
            "name": "test_reverse_normal",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_reverse_list_many": {
            "name": "test_reverse_list_many",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_reverse_list_single": {
            "name": "test_reverse_list_single",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_reverse_name": {
            "name": "test_reverse_name",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_reverse_name_many": {
            "name": "test_reverse_name_many",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pydiggy-master/tests/__init__.py": {},
    "pydiggy-master/tests/fakeapp/basic.py": {},
    "pydiggy-master/tests/fakeapp/__init__.py": {}
}
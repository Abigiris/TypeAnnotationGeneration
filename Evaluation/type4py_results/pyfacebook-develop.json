{
    "pyfacebook-develop/conftest.py": {},
    "pyfacebook-develop/setup.py": {
        "find_version": {
            "name": "find_version",
            "location": 18,
            "return": [
                "str",
                "Union[str, int]",
                "int"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "read": {
            "name": "read",
            "location": 38,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "pyfacebook-develop/pyfacebook/config.py": {},
    "pyfacebook-develop/pyfacebook/event.py": {
        "Event.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "messaging": [
                    "Optional[int]",
                    "List[str]",
                    "Optional[str]",
                    "Optional[Callable]",
                    "Optional[Hashable]",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "Event.sender_id": {
            "name": "sender_id",
            "location": 13,
            "return": [
                "Optional[str]",
                "Iterable[T]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.recipient_id": {
            "name": "recipient_id",
            "location": 17,
            "return": [
                "Optional[str]",
                "Iterable[T]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.timestamp": {
            "name": "timestamp",
            "location": 21,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.message": {
            "name": "message",
            "location": 25,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.message_text": {
            "name": "message_text",
            "location": 29,
            "return": [
                "Optional[str]",
                "Type",
                "Optional[List[str]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.message_attachments": {
            "name": "message_attachments",
            "location": 33,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.quick_reply": {
            "name": "quick_reply",
            "location": 37,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.postback": {
            "name": "postback",
            "location": 41,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.postback_referral": {
            "name": "postback_referral",
            "location": 45,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.option": {
            "name": "option",
            "location": 49,
            "return": [
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.account_linking": {
            "name": "account_linking",
            "location": 53,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "bool",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.delivery": {
            "name": "delivery",
            "location": 57,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.read": {
            "name": "read",
            "location": 61,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.referral": {
            "name": "referral",
            "location": 65,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.message_mid": {
            "name": "message_mid",
            "location": 69,
            "return": [
                "str",
                "Optional[str]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.message_seq": {
            "name": "message_seq",
            "location": 73,
            "return": [
                "str",
                "Optional[str]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.is_option": {
            "name": "is_option",
            "location": 77,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.is_message": {
            "name": "is_message",
            "location": 81,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.is_text_message": {
            "name": "is_text_message",
            "location": 85,
            "return": [
                "Optional[int]",
                "str",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.is_attachment_message": {
            "name": "is_attachment_message",
            "location": 89,
            "return": [
                "Optional[str]",
                "bool",
                "str",
                "Optional[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.is_echo": {
            "name": "is_echo",
            "location": 93,
            "return": [
                "Optional[str]",
                "bool",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.is_delivery": {
            "name": "is_delivery",
            "location": 97,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.is_postback": {
            "name": "is_postback",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.is_postback_referral": {
            "name": "is_postback_referral",
            "location": 105,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.is_read": {
            "name": "is_read",
            "location": 109,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.is_account_linking": {
            "name": "is_account_linking",
            "location": 113,
            "return": [
                "Optional[str]",
                "str",
                "int",
                "Optional[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.is_referral": {
            "name": "is_referral",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.is_quick_reply": {
            "name": "is_quick_reply",
            "location": 121,
            "return": [
                "Optional[str]",
                "str",
                "bool",
                "Optional[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.quick_reply_payload": {
            "name": "quick_reply_payload",
            "location": 125,
            "return": [
                "Optional[bool]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.postback_payload": {
            "name": "postback_payload",
            "location": 131,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.referral_ref": {
            "name": "referral_ref",
            "location": 135,
            "return": [
                "str",
                "Callable[..., None]",
                "Optional[str]",
                "int",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.postback_referral_ref": {
            "name": "postback_referral_ref",
            "location": 139,
            "return": [
                "T",
                "Optional[Iterable[Any]]",
                "str",
                "List[str]",
                "bool",
                "Callable",
                "Optional[str]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyfacebook-develop/pyfacebook/graph.py": {
        "Graph.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.send_raw": {
            "name": "send_raw",
            "location": 38,
            "return": [
                "str",
                "bool",
                "Dict[str, int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.get_all_members": {
            "name": "get_all_members",
            "location": 54,
            "return": [
                "str",
                "int",
                "abilian.core.models.subjects.Principal"
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "wtforms.fields.core.Field",
                    "type",
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "list"
                ]
            }
        },
        "Group.add_member": {
            "name": "add_member",
            "location": 66,
            "return": [
                "str",
                "Dict[str, int]",
                "float",
                "core_lib.core.models.Venue"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "dict",
                    "List[str]",
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "Group.remove_member": {
            "name": "remove_member",
            "location": 78,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "List[str]",
                    "str",
                    "Sequence[int]"
                ]
            }
        }
    },
    "pyfacebook-develop/pyfacebook/message.py": {
        "Message.send_text_message": {
            "name": "send_text_message",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "recipient_id": [
                    "dict",
                    "Sequence[str]",
                    "bool",
                    "bytes"
                ],
                "message": [
                    "str"
                ],
                "notification_type": [
                    "dict",
                    "Sequence[str]",
                    "bool",
                    "bytes"
                ]
            }
        },
        "Message.send_quick_replies_message": {
            "name": "send_quick_replies_message",
            "location": 29,
            "return": [
                "str",
                "starlette.requests.HTTPConnection",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "recipient_id": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "static_frame.core.util.DtypesSpecifier",
                    "Hashable",
                    "int"
                ],
                "message": [
                    "str",
                    "int",
                    "float"
                ],
                "quick_replies": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "static_frame.core.util.DtypesSpecifier",
                    "Hashable",
                    "int"
                ],
                "notification_type": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "static_frame.core.util.DtypesSpecifier",
                    "Hashable",
                    "int"
                ]
            }
        },
        "Template.send_generic_message": {
            "name": "send_generic_message",
            "location": 58,
            "return": [
                "Iterable[str]",
                "int",
                "Dict[str, List[str]]",
                "IO[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "recipient_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "elements": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "notification_type": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Template.send_button": {
            "name": "send_button",
            "location": 80,
            "return": [
                "Callable[..., None]",
                "tuple",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "recipient_id": [
                    "bool",
                    "int",
                    "Type[T]",
                    "str"
                ],
                "message": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "list",
                    "bytes"
                ],
                "buttons": [
                    "bool",
                    "int",
                    "Type[T]",
                    "str"
                ],
                "notification_type": [
                    "bool",
                    "int",
                    "Type[T]",
                    "str"
                ]
            }
        },
        "Attachment.send_attachment": {
            "name": "send_attachment",
            "location": 112,
            "return": [
                "str",
                "dict",
                "core_lib.core.models.Event"
            ],
            "arguments": {
                "self": [],
                "recipient_id": [
                    "str",
                    "bool",
                    "Union[int, str]"
                ],
                "attachment_type": [
                    "str",
                    "bool",
                    "Union[int, str]"
                ],
                "attachment_path": [
                    "str",
                    "bool",
                    "Union[int, str]"
                ],
                "notification_type": [
                    "str",
                    "bool",
                    "Union[int, str]"
                ]
            }
        },
        "Attachment.send_attachment_url": {
            "name": "send_attachment_url",
            "location": 145,
            "return": [
                "str",
                "blurr.core.schema_loader.SchemaLoader"
            ],
            "arguments": {
                "self": [],
                "recipient_id": [
                    "str"
                ],
                "attachment_type": [
                    "str"
                ],
                "attachment_url": [
                    "str"
                ],
                "notification_type": [
                    "str"
                ]
            }
        },
        "Attachment.send_image": {
            "name": "send_image",
            "location": 171,
            "return": [
                "str",
                "bytes",
                "Tuple[str, str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "recipient_id": [
                    "str",
                    "int",
                    "bool"
                ],
                "image_path": [
                    "str",
                    "int",
                    "bool"
                ],
                "notification_type": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "Attachment.send_image_url": {
            "name": "send_image_url",
            "location": 187,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "self": [],
                "recipient_id": [
                    "str"
                ],
                "image_url": [
                    "str"
                ],
                "notification_type": [
                    "str"
                ]
            }
        },
        "Attachment.send_audio": {
            "name": "send_audio",
            "location": 203,
            "return": [
                "str",
                "bytes",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "recipient_id": [
                    "str",
                    "dict"
                ],
                "audio_path": [
                    "str",
                    "dict"
                ],
                "notification_type": [
                    "str",
                    "dict"
                ]
            }
        },
        "Attachment.send_audio_url": {
            "name": "send_audio_url",
            "location": 219,
            "return": [
                "int",
                "str",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "recipient_id": [
                    "str",
                    "int"
                ],
                "audio_url": [
                    "str",
                    "int"
                ],
                "notification_type": [
                    "str",
                    "int"
                ]
            }
        },
        "Attachment.send_video": {
            "name": "send_video",
            "location": 235,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "recipient_id": [
                    "str",
                    "dict"
                ],
                "video_path": [
                    "str",
                    "dict"
                ],
                "notification_type": [
                    "str",
                    "dict"
                ]
            }
        },
        "Attachment.send_video_url": {
            "name": "send_video_url",
            "location": 251,
            "return": [
                "int",
                "str",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "recipient_id": [
                    "str",
                    "int"
                ],
                "video_url": [
                    "str",
                    "int"
                ],
                "notification_type": [
                    "str",
                    "int"
                ]
            }
        },
        "Attachment.send_file": {
            "name": "send_file",
            "location": 267,
            "return": [
                "str",
                "simulation.core.common.Structure"
            ],
            "arguments": {
                "self": [],
                "recipient_id": [
                    "str",
                    "Optional[str]"
                ],
                "file_path": [
                    "str",
                    "Optional[str]"
                ],
                "notification_type": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Attachment.send_file_url": {
            "name": "send_file_url",
            "location": 280,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "recipient_id": [
                    "str",
                    "int"
                ],
                "file_url": [
                    "str",
                    "int"
                ],
                "notification_type": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "pyfacebook-develop/pyfacebook/mixins.py": {
        "BaseMixin.to_json": {
            "name": "to_json",
            "location": 6,
            "return": [
                "Dict[str, Any]",
                "float",
                "hackathon.utils.utils.DataMessage"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyfacebook-develop/pyfacebook/status.py": {
        "is_informational": {
            "name": "is_informational",
            "location": 11,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "code": [
                    "int",
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "is_success": {
            "name": "is_success",
            "location": 15,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "code": [
                    "int",
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "is_redirect": {
            "name": "is_redirect",
            "location": 19,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "code": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "is_client_error": {
            "name": "is_client_error",
            "location": 23,
            "return": [
                "str",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "code": [
                    "int",
                    "str",
                    "Callable",
                    "List[str]",
                    "list"
                ]
            }
        },
        "is_server_error": {
            "name": "is_server_error",
            "location": 27,
            "return": [
                "str",
                "Union[str, List[str]]"
            ],
            "arguments": {
                "code": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "pyfacebook-develop/pyfacebook/user.py": {
        "User.filter_by_email": {
            "name": "filter_by_email",
            "location": 12,
            "return": [
                "bool",
                "list",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str",
                    "int"
                ]
            }
        },
        "User.get_by_id": {
            "name": "get_by_id",
            "location": 23,
            "return": [
                "str",
                "abilian.core.models.subjects.Principal",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "User.update": {
            "name": "update",
            "location": 35,
            "return": [
                "Optional[str]",
                "Optional[float]",
                "Optional[bool]",
                "str"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "int"
                ],
                "data": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "pyfacebook-develop/pyfacebook/utils.py": {
        "to_json": {
            "name": "to_json",
            "location": 5,
            "return": [
                "int",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "obj": [
                    "List[dict]",
                    "str",
                    "Sequence",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "pyfacebook-develop/pyfacebook/__init__.py": {
        "Page.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "page_access_token": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]",
                    "dict",
                    "bytes"
                ]
            }
        },
        "Page._call_handler": {
            "name": "_call_handler",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Callable",
                    "Union[None, str, int]",
                    "Optional[str]",
                    "type",
                    "Dict[str, object]"
                ],
                "func": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[Callable[[], None]]",
                    "Callable",
                    "Optional[str]"
                ]
            }
        },
        "Page.handle_webhook": {
            "name": "handle_webhook",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "Union[bool, Iterable[str]]",
                    "bool",
                    "Union[Callable, str]",
                    "float"
                ],
                "option": [
                    "Optional[\"ShippingInfo\"]",
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ],
                "message": [
                    "bool",
                    "Callable",
                    "str",
                    "Union[int, float]"
                ],
                "echo": [
                    "Callable",
                    "list",
                    "bool",
                    "str",
                    "Optional[\"ShippingInfo\"]"
                ],
                "delivery": [
                    "Callable",
                    "list",
                    "bool",
                    "Optional[\"ShippingInfo\"]"
                ],
                "postback": [
                    "Callable",
                    "list",
                    "bool",
                    "Optional[\"ShippingInfo\"]"
                ],
                "read": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, str]",
                    "float"
                ],
                "account_linking": [
                    "bool",
                    "Optional[str]",
                    "float",
                    "str",
                    "Optional[Literal[\"only_clustered\", \"include_clustered\"]]"
                ],
                "referral": [
                    "Callable",
                    "list",
                    "bool",
                    "Optional[\"ShippingInfo\"]"
                ]
            }
        },
        "Page.handle_option": {
            "name": "handle_option",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "func": [
                    "T",
                    "Callable"
                ]
            }
        },
        "Page.handle_message": {
            "name": "handle_message",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "func": [
                    "T",
                    "Callable",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Page.handle_echo": {
            "name": "handle_echo",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "func": [
                    "T",
                    "Callable",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Page.handle_delivery": {
            "name": "handle_delivery",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "func": [
                    "T",
                    "Callable",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Page.handle_postback": {
            "name": "handle_postback",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "func": [
                    "T",
                    "Callable",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Page.handle_read": {
            "name": "handle_read",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "func": [
                    "T",
                    "Callable",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Page.handle_account_linking": {
            "name": "handle_account_linking",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "func": [
                    "bytes",
                    "float",
                    "Dict[str, object]",
                    "type"
                ]
            }
        },
        "Page.handle_referral": {
            "name": "handle_referral",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "func": [
                    "T",
                    "Callable",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Page.after_send": {
            "name": "after_send",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "Callable[[T], bool]",
                    "float"
                ]
            }
        },
        "Page.callback": {
            "name": "callback",
            "location": 132,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "payloads": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "types": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "Page.get_quick_reply_callbacks": {
            "name": "get_quick_reply_callbacks",
            "location": 157,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Page.get_postback_callbacks": {
            "name": "get_postback_callbacks",
            "location": 170,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Dict[int, Any]"
                ]
            }
        },
        "Page.handle_webhook.get_events": {
            "name": "get_events",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Dict[int, Dict]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Page.callback.wrapper": {
            "name": "wrapper",
            "location": 143,
            "return": [
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "bool"
                ]
            }
        }
    },
    "pyfacebook-develop/pyfacebook/core/enum.py": {
        "BaseEnum.__str__": {
            "name": "__str__",
            "location": 6,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyfacebook-develop/pyfacebook/core/__init__.py": {
        "Base.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Base._send": {
            "name": "_send",
            "location": 61,
            "return": [
                "Optional[str]",
                "float",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.auth_args": {
            "name": "auth_args",
            "location": 79,
            "return": [
                "Iterable[str]",
                "Optional[BaseException]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.request_endpoint": {
            "name": "request_endpoint",
            "location": 92,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.response": {
            "name": "response",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "int",
                    "str",
                    "T",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "Base.send_raw": {
            "name": "send_raw",
            "location": 103,
            "return": [
                "str",
                "bool",
                "Dict[str, int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.send_message": {
            "name": "send_message",
            "location": 120,
            "return": [
                "str",
                "Optional[int]",
                "Optional[str]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "recipient_id": [
                    "Optional[str]",
                    "bytes",
                    "Sequence[str]",
                    "bool",
                    "dict",
                    "str"
                ],
                "message": [
                    "Optional[str]",
                    "bytes",
                    "Sequence[str]",
                    "bool",
                    "dict",
                    "str"
                ],
                "notification_type": [
                    "Optional[str]",
                    "bytes",
                    "Sequence[str]",
                    "bool",
                    "dict",
                    "str"
                ]
            }
        },
        "Base.send_recipient": {
            "name": "send_recipient",
            "location": 127,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "recipient_id": [
                    "str",
                    "int"
                ],
                "payload": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "int"
                ],
                "notification_type": [
                    "str"
                ]
            }
        },
        "Facebook.auth_args": {
            "name": "auth_args",
            "location": 139,
            "return": [
                "Iterable[str]",
                "Optional[BaseException]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Facebook.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Facebook.send_raw": {
            "name": "send_raw",
            "location": 158,
            "return": [
                "str",
                "bool",
                "Dict[str, int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyfacebook-develop/pyfacebook/fixtures/core.py": {},
    "pyfacebook-develop/pyfacebook/fixtures/data.py": {},
    "pyfacebook-develop/pyfacebook/fixtures/db.py": {},
    "pyfacebook-develop/pyfacebook/fixtures/__init__.py": {}
}
{
    "pygameweb-master/setup.py": {
        "read": {
            "name": "read",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_version": {
            "name": "get_version",
            "location": 20,
            "return": [
                "str",
                "bytes",
                "List[str]",
                "List[\"libkol.Item\"]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "get_requirements": {
            "name": "get_requirements",
            "location": 31,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "pygameweb-master/pygameweb/app.py": {
        "create_app": {
            "name": "create_app",
            "location": 4,
            "return": [
                "flask.Flask"
            ],
            "arguments": {
                "object_name": [
                    "str",
                    "Optional[cmk.utils.type_defs.SectionName]",
                    "dict"
                ],
                "engine": [
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "int"
                ],
                "session_factory": [
                    "Optional[Callable]",
                    "Type",
                    "Optional[str]",
                    "Dict[str, list]",
                    "str"
                ]
            }
        },
        "upgrade_https_urls": {
            "name": "upgrade_https_urls",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "flask.Flask",
                    "str",
                    "Optional[flask.Flask]"
                ]
            }
        },
        "http_error_handler": {
            "name": "http_error_handler",
            "location": 73,
            "return": [
                "str",
                "dict",
                "botocore.exceptions.ClientError",
                "Mapping[str, Any]",
                "Optional[Dict]"
            ],
            "arguments": {
                "error": [
                    "str",
                    "int",
                    "Exception"
                ]
            }
        },
        "error_handler": {
            "name": "error_handler",
            "location": 82,
            "return": [
                "Optional[str]",
                "str",
                "Optional[Any]",
                "werkzeug.wrappers.Response"
            ],
            "arguments": {
                "_": [
                    "str",
                    "bool",
                    "List[object]"
                ]
            }
        },
        "add_views_front": {
            "name": "add_views_front",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "app": []
            }
        },
        "upgrade_https_urls._url_for_security": {
            "name": "_url_for_security",
            "location": 64,
            "return": [
                "str",
                "Optional[cmk.utils.type_defs.HostName]",
                "Optional[str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "endpoint": [
                    "str",
                    "float"
                ]
            }
        },
        "upgrade_https_urls.inject_url_for_image": {
            "name": "inject_url_for_image",
            "location": 69,
            "return": [
                "List[str]",
                "dict",
                "bool",
                "Dict[str, Any]",
                "str",
                "Set[str]",
                "List[List[str]]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "upgrade_https_urls.ForceHttpsUrlFor.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "upgrade_https_urls.ForceHttpsUrlFor.__call__": {
            "name": "__call__",
            "location": 57,
            "return": [
                "str",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "Callable",
                    "Dict[str, Any]",
                    "dict"
                ],
                "start_response": [
                    "Callable",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "pygameweb-master/pygameweb/cache.py": {},
    "pygameweb-master/pygameweb/config.py": {
        "truthy_config": {
            "name": "truthy_config",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "key": [
                    "str",
                    "int",
                    "KT",
                    "bytes"
                ],
                "default": [
                    "str",
                    "int",
                    "KT",
                    "bytes"
                ]
            }
        }
    },
    "pygameweb-master/pygameweb/db.py": {
        "init": {
            "name": "init",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "Dict[str, Any]"
                ],
                "engine": [
                    "Dict[str, Any]"
                ],
                "session_factory": []
            }
        },
        "_get_session": {
            "name": "_get_session",
            "location": 26,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "pygameweb-master/pygameweb/fixtures.py": {
        "_user_fixtures": {
            "name": "_user_fixtures",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "fixture": [
                    "str",
                    "managers.models.Project",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "populate_db": {
            "name": "populate_db",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "make_app": [
                    "app.App"
                ]
            }
        }
    },
    "pygameweb-master/pygameweb/models.py": {},
    "pygameweb-master/pygameweb/run.py": {
        "run_app": {
            "name": "run_app",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "add_view_funcs": [
                    "bool",
                    "List[str]",
                    "dict"
                ],
                "url_prefix": [
                    "int",
                    "Tuple[int, int, bool]"
                ],
                "port": [
                    "List[str]",
                    "Dict[str, Any]",
                    "Mapping"
                ]
            }
        },
        "run_front": {
            "name": "run_front",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "url_prefix": [
                    "str",
                    "Optional[List[str]]"
                ],
                "port": [
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "run_app.empty_app": {
            "name": "empty_app",
            "location": 26,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "_": [
                    "Callable",
                    "List[str]",
                    "bool"
                ],
                "resp": [
                    "Callable",
                    "List[str]",
                    "bool"
                ]
            }
        }
    },
    "pygameweb-master/pygameweb/sanitize.py": {
        "sanitize_html": {
            "name": "sanitize_html",
            "location": 2,
            "return": [
                "bool"
            ],
            "arguments": {
                "html": [
                    "int",
                    "Callable",
                    "str"
                ],
                "force_https": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "pygameweb-master/pygameweb/__init__.py": {},
    "pygameweb-master/pygameweb/admin/views.py": {
        "add_admin": {
            "name": "add_admin",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "Dict[str, Any]",
                    "flask.Flask"
                ]
            }
        },
        "TheAdminIndexView.is_accessible": {
            "name": "is_accessible",
            "location": 23,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserAdmin.is_accessible": {
            "name": "is_accessible",
            "location": 35,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserAdmin.scaffold_form": {
            "name": "scaffold_form",
            "location": 38,
            "return": [
                "str",
                "int",
                "Exception",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserAdmin.on_model_change": {
            "name": "on_model_change",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "form": [
                    "bool",
                    "int"
                ],
                "model": [
                    "abilian.core.models.subjects.User",
                    "int",
                    "bool",
                    "Union[int, str]",
                    "models.Trip",
                    "raiden.utils.BlockNumber"
                ],
                "is_created": [
                    "bool",
                    "int"
                ]
            }
        },
        "GroupAdmin.is_accessible": {
            "name": "is_accessible",
            "location": 49,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewsAdmin.is_accessible": {
            "name": "is_accessible",
            "location": 60,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectAdmin.is_accessible": {
            "name": "is_accessible",
            "location": 71,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectAdmin.on_model_delete": {
            "name": "on_model_delete",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "project": [
                    "bool",
                    "Tuple[int, int]",
                    "str",
                    "flask.Flask"
                ]
            }
        },
        "ReleaseAdmin.is_accessible": {
            "name": "is_accessible",
            "location": 85,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageAdmin.is_accessible": {
            "name": "is_accessible",
            "location": 96,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pygameweb-master/pygameweb/alembic/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pygameweb-master/pygameweb/alembic/versions/086dc480986c_adding_members_and_admin_groups.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pygameweb-master/pygameweb/alembic/versions/0b16e0992d44_adding_active_field_to_user.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pygameweb-master/pygameweb/alembic/versions/0e8bf71a8d9f_foreign_keys_for_project_users_release_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pygameweb-master/pygameweb/alembic/versions/2c97c1c55e0b_additional_user_fields_social_profiles.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pygameweb-master/pygameweb/alembic/versions/31d24cc4f46b_wiki_users_id_foreign_key.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pygameweb-master/pygameweb/alembic/versions/47683b299022_initial_db_before_import_of_old_db.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pygameweb-master/pygameweb/alembic/versions/51742dea4d0d_adding_moderator_group.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pygameweb-master/pygameweb/alembic/versions/6b5555b76772_news_summary_field_added.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pygameweb-master/pygameweb/alembic/versions/6cb6a6a151b7_removed_unused_page_tables_and_fields.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pygameweb-master/pygameweb/alembic/versions/71cf723fb7cb_added_foreign_keys_for_users_groups.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pygameweb-master/pygameweb/alembic/versions/7bb2943bbcaf_wiki_locked_added.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pygameweb-master/pygameweb/alembic/versions/8acbad111ef6_queue_table_for_pq.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pygameweb-master/pygameweb/alembic/versions/8d334297f83a_comment_models.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pygameweb-master/pygameweb/alembic/versions/95639507ec8b_make_news_slug_unique_and_not_nullable.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pygameweb-master/pygameweb/alembic/versions/c25a81c43821_added_unique_constraints_to_users_name_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pygameweb-master/pygameweb/alembic/versions/c4e6d5863a94_removing_unused_tables_adding_tag_index.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pygameweb-master/pygameweb/alembic/versions/d5833b09e4f5_adding_news_alert_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pygameweb-master/pygameweb/alembic/versions/e21cfb702854_link_slug_added_to_news.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pygameweb-master/pygameweb/alembic/versions/e22b4355e6fd_youtube_github_and_patreon_fields_added_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pygameweb-master/pygameweb/alembic/versions/f15de2cc22c7_release_title_is_release_version.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pygameweb-master/pygameweb/alembic/versions/f31ad1385ed5_adding_nav_group_to_page_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pygameweb-master/pygameweb/builds/launchpad_build_badge.py": {
        "update_build_badge": {
            "name": "update_build_badge",
            "location": 14,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "badge_fname": [
                    "str"
                ],
                "lanchpad_url": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "check_pygame_builds": {
            "name": "check_pygame_builds",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pygameweb-master/pygameweb/builds/stackoverflow.py": {
        "download_stack_json": {
            "name": "download_stack_json",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pygameweb-master/pygameweb/builds/update_docs.py": {
        "update_docs": {
            "name": "update_docs",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pygameweb-master/pygameweb/builds/update_version_from_git.py": {
        "migrate_source_attribute": {
            "name": "migrate_source_attribute",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "attr": [
                    "str",
                    "Optional[str]"
                ],
                "to_this": [
                    "str",
                    "int",
                    "Optional[dict]",
                    "bytes",
                    "Mapping[str, Any]",
                    "bool",
                    "List[Tuple[int, int]]"
                ],
                "target_file": [
                    "str",
                    "pathlib.Path"
                ],
                "regex": [
                    "Optional[str]",
                    "List[str]",
                    "Sequence[str]",
                    "List[Tuple[str, Any]]",
                    "int",
                    "Optional[Callable]"
                ]
            }
        },
        "migrate_version": {
            "name": "migrate_version",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "target_file": [
                    "str",
                    "Tuple[int, int]",
                    "pathlib.Path",
                    "BinaryIO"
                ],
                "new_version": [
                    "str",
                    "Tuple[int, int]",
                    "pathlib.Path",
                    "BinaryIO"
                ]
            }
        },
        "is_master_or_mastertest": {
            "name": "is_master_or_mastertest",
            "location": 61,
            "return": [
                "List[str]",
                "bool",
                "Sequence"
            ],
            "arguments": {}
        },
        "git_tag_name": {
            "name": "git_tag_name",
            "location": 66,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {}
        },
        "get_git_version_info": {
            "name": "get_git_version_info",
            "location": 72,
            "return": [
                "str",
                "Dict[str, List[str]]",
                "int",
                "float"
            ],
            "arguments": {}
        },
        "prerelease_version": {
            "name": "prerelease_version",
            "location": 78,
            "return": [
                "str",
                "Iterable[str]",
                "int"
            ],
            "arguments": {}
        },
        "read": {
            "name": "read",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_version": {
            "name": "get_version",
            "location": 101,
            "return": [
                "str",
                "bytes",
                "List[str]",
                "List[\"libkol.Item\"]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "release_version_correct": {
            "name": "release_version_correct",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pygameweb-master/pygameweb/builds/views.py": {
        "verify_github": {
            "name": "verify_github",
            "location": 16,
            "return": [
                "Set[str]",
                "set",
                "str",
                "int",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "secret": [
                    "bool"
                ],
                "body": [
                    "bool"
                ],
                "x_hub_signature": [
                    "int",
                    "float",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "add_builds": {
            "name": "add_builds",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "flask.Flask",
                    "Exception"
                ]
            }
        },
        "add_builds.github_webhook": {
            "name": "github_webhook",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "pygameweb-master/pygameweb/comment/classifier.py": {
        "classify_comment": {
            "name": "classify_comment",
            "location": 6,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "comment": [
                    "str",
                    "List[int]",
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "pygameweb-master/pygameweb/comment/classifier_train.py": {
        "get_comment_data": {
            "name": "get_comment_data",
            "location": 18,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "build_df": {
            "name": "build_df",
            "location": 24,
            "return": [
                "str",
                "bool",
                "Callable"
            ],
            "arguments": {
                "comments": [
                    "bool",
                    "list",
                    "Iterable[str]"
                ],
                "classification": [
                    "dict",
                    "Optional[str]",
                    "str",
                    "pandas.DataFrame",
                    "callable"
                ]
            }
        },
        "process_comment_data": {
            "name": "process_comment_data",
            "location": 36,
            "return": [
                "Dict[str, List[int]]",
                "Optional[float]",
                "dict",
                "str",
                "int",
                "Optional[Dict[str, Any]]",
                "bytes",
                "float"
            ],
            "arguments": {
                "comment_data": [
                    "int",
                    "str",
                    "pandas.DataFrame",
                    "Optional[str]"
                ]
            }
        },
        "make_classifier": {
            "name": "make_classifier",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "test_run_train": {
            "name": "test_run_train",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "pipeline": [
                    "magic.models.Card"
                ],
                "data": [
                    "str",
                    "dict",
                    "rotkehlchen.db.dbhandler.DBHandler",
                    "List[str]",
                    "Callable[[pandas.DataFrame], pandas.DataFrame]"
                ]
            }
        },
        "train_full": {
            "name": "train_full",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "pipeline": [
                    "str",
                    "int"
                ],
                "data": [
                    "str",
                    "dict",
                    "Tuple[bytes]",
                    "bool",
                    "numpy.ndarray",
                    "Tuple[Union[int, slice], Union[int, slice]]"
                ],
                "output_fname": [
                    "numpy.ndarray",
                    "Dict[str, Any]",
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "train_comments": {
            "name": "train_comments",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "output_fname": [
                    "bool",
                    "int",
                    "List[str]",
                    "str"
                ],
                "test_run": [
                    "Sequence[str]",
                    "Optional[Callable[..., Any]]",
                    "bool",
                    "dict"
                ]
            }
        },
        "classify_comments": {
            "name": "classify_comments",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pygameweb-master/pygameweb/comment/models.py": {
        "remove_prefix": {
            "name": "remove_prefix",
            "location": 191,
            "return": [
                "square.dtypes.Config",
                "str",
                "app.models.Question"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "float"
                ]
            }
        },
        "load_xml_threads": {
            "name": "load_xml_threads",
            "location": 213,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "socialhome.users.models.Profile",
                    "app.models.Game",
                    "str"
                ],
                "root": [
                    "str",
                    "Optional[str]",
                    "type"
                ]
            }
        },
        "load_xml_posts": {
            "name": "load_xml_posts",
            "location": 240,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "abilian.core.models.subjects.User",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session"
                ],
                "root": [
                    "str",
                    "Tuple[int, int]",
                    "List[str]",
                    "django.contrib.auth.models.User"
                ]
            }
        },
        "load_xml": {
            "name": "load_xml",
            "location": 275,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "dict",
                    "List[Tuple[str, str]]",
                    "Optional[str]",
                    "Iterable[str]",
                    "Pattern"
                ],
                "source": [
                    "str",
                    "config.CommentSymbol",
                    "Optional[str]"
                ]
            }
        },
        "load_comments": {
            "name": "load_comments",
            "location": 286,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "CommentAuthor.__repr__": {
            "name": "__repr__",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommentAuthor.old_or_new": {
            "name": "old_or_new",
            "location": 46,
            "return": [
                "Type[T]",
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "dict",
                    "Callable",
                    "Optional[Dict[str, Any]]",
                    "Iterable[str]"
                ],
                "session": [
                    "list",
                    "zerver.models.Realm",
                    "Optional[int]",
                    "Dict[str, Any]",
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "newauthor": [
                    "list",
                    "zerver.models.Realm",
                    "Optional[int]",
                    "Dict[str, Any]",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "CommentAuthor.from_eauthor": {
            "name": "from_eauthor",
            "location": 61,
            "return": [
                "bool",
                "str",
                "IO[str]",
                "Iterable[str]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session",
                    "bool",
                    "Type[T]"
                ],
                "session": [
                    "str",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session",
                    "bool",
                    "Type[T]"
                ],
                "eauthor": [
                    "audiopyle.lib.models.plugin.VampyPlugin",
                    "sqlalchemy.Table",
                    "Mapping[str, Any]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "CommentAuthor.from_user": {
            "name": "from_user",
            "location": 74,
            "return": [
                "bool",
                "str",
                "Iterable[str]",
                "IO[str]",
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "sqlalchemy.exdeclarative.DeclarativeMeta",
                    "sqlalchemy.orm.session.Session",
                    "bool",
                    "sqlalchemy.orm.Session",
                    "Dict[str, Any]",
                    "dict"
                ],
                "session": [
                    "sqlalchemy.exdeclarative.DeclarativeMeta",
                    "sqlalchemy.orm.session.Session",
                    "bool",
                    "sqlalchemy.orm.Session",
                    "Dict[str, Any]",
                    "dict"
                ],
                "user": [
                    "models.User",
                    "Type",
                    "dict",
                    "type"
                ]
            }
        },
        "CommentThread.link_path": {
            "name": "link_path",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommentPost.message_html": {
            "name": "message_html",
            "location": 135,
            "return": [
                "Tuple[Any, Any, Any]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommentPost.for_thread": {
            "name": "for_thread",
            "location": 153,
            "return": [
                "int",
                "str",
                "Optional[str]",
                "bool",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Iterable[str]"
                ],
                "session": [
                    "Optional[int]",
                    "str",
                    "Optional[str]"
                ],
                "forum": [
                    "Optional[int]",
                    "str",
                    "Optional[str]"
                ],
                "id_text": [
                    "Optional[int]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "CommentPost.in_thread": {
            "name": "in_thread",
            "location": 174,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "List[Dict[str, Any]]",
                "int",
                "float"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "bool",
                    "List[manager.models.reflection.Reflection]",
                    "List[int]",
                    "dict",
                    "Sequence[services.seating.models.seaSeat]"
                ],
                "session": [
                    "int",
                    "sqlalchemy.orm.session.Session",
                    "Optional[int]",
                    "django.contrib.auth.models.User"
                ],
                "thread_id": [
                    "int",
                    "sqlalchemy.orm.session.Session",
                    "Optional[int]",
                    "django.contrib.auth.models.User"
                ]
            }
        }
    },
    "pygameweb-master/pygameweb/comment/views.py": {
        "comments_for": {
            "name": "comments_for",
            "location": 16,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "List[Dict[str, Any]]",
                "int",
                "float"
            ],
            "arguments": {
                "forum": [
                    "str",
                    "bool",
                    "int",
                    "List[str]",
                    "Union[int, Tuple[int, int]]",
                    "Optional[int]"
                ]
            }
        },
        "comments_js": {
            "name": "comments_js",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "recent_comments": {
            "name": "recent_comments",
            "location": 40,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "forum": [
                    "str",
                    "Sequence[Sequence[T]]"
                ]
            }
        },
        "mark_comment": {
            "name": "mark_comment",
            "location": 52,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Union[str, Dict]"
            ],
            "arguments": {
                "comment_post_id": [
                    "int",
                    "Type[models.taxonomies.T]"
                ],
                "action": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "add_comment": {
            "name": "add_comment",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        }
    },
    "pygameweb-master/pygameweb/dashboard/generate_json.py": {
        "create_session": {
            "name": "create_session",
            "location": 22,
            "return": [
                "str",
                "bool",
                "Tuple[int, int, int]"
            ],
            "arguments": {
                "verbose": [
                    "bool",
                    "Mapping[str, Any]",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "__utf8": {
            "name": "__utf8",
            "location": 29,
            "return": [
                "str",
                "int",
                "dict",
                "tuple"
            ],
            "arguments": {
                "value": [
                    "dict",
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "qhtml": {
            "name": "qhtml",
            "location": 36,
            "return": [
                "os.PathLike",
                "List[int]",
                "str"
            ],
            "arguments": {
                "value": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "sanitise_html": {
            "name": "sanitise_html",
            "location": 49,
            "return": [
                "bool",
                "Iterable[List[T]]"
            ],
            "arguments": {
                "html": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "strip_html": {
            "name": "strip_html",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "remove_tags": {
            "name": "remove_tags",
            "location": 83,
            "return": [
                "str",
                "int",
                "Tuple[List[str], List[str]]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "isnumber": {
            "name": "isnumber",
            "location": 87,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "n": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "sanitise_the_rows": {
            "name": "sanitise_the_rows",
            "location": 91,
            "return": [
                "int",
                "Dict[int, zam_repondeur.services.fetch.an.dossiers.models.TexteRef]",
                "bool",
                "float"
            ],
            "arguments": {
                "rows": [
                    "int",
                    "bool",
                    "str",
                    "List[str]"
                ],
                "except_for_keys": [
                    "List[Tuple[str, bytes]]",
                    "Optional[dict]",
                    "str",
                    "Type[T]",
                    "Optional[str]",
                    "bytes",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "dthandler": {
            "name": "dthandler",
            "location": 117,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "obj": [
                    "Optional[str]",
                    "str",
                    "datetime.timedelta",
                    "float",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 280,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "GenerateJson.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "www_path": [
                    "str"
                ],
                "json_fname": [
                    "dict",
                    "bool"
                ]
            }
        },
        "GenerateJson.generate_json": {
            "name": "generate_json",
            "location": 147,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenerateJson.generate_json.for_link": {
            "name": "for_link",
            "location": 261,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]",
                "dict",
                "zerver.models.Stream"
            ],
            "arguments": {
                "link": [
                    "str",
                    "Callable[[], T]",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "_test": {
            "name": "_test",
            "location": 292,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pygameweb-master/pygameweb/dashboard/generate_static.py": {
        "log": {
            "name": "log",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 302,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Urls.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "Dict[str, Dict[str, int]]",
                "str",
                "Dict[str, Any]",
                "Union[tuple, list]"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Urls.cleanup_at_start": {
            "name": "cleanup_at_start",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "urls_to_remove": [
                    "str",
                    "list",
                    "int",
                    "MutableMapping",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "Urls.parseUrls": {
            "name": "parseUrls",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "parse_urls": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "Urls.generateAllUrls": {
            "name": "generateAllUrls",
            "location": 98,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "parse_urls": [
                    "str",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "Urls.downloadUrls": {
            "name": "downloadUrls",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "urls": [
                    "str",
                    "List[str]",
                    "dict",
                    "Callable[[str], str]"
                ]
            }
        },
        "Urls.process_file": {
            "name": "process_file",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "old_fname": [
                    "bool",
                    "dict",
                    "str",
                    "Optional[int]"
                ],
                "new_fname": [
                    "bool",
                    "dict",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "Urls.generateFiles": {
            "name": "generateFiles",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "urls": [
                    "str"
                ]
            }
        },
        "Urls.compress_javascript": {
            "name": "compress_javascript",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Urls.compress_css": {
            "name": "compress_css",
            "location": 228,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Urls.parse_args": {
            "name": "parse_args",
            "location": 260,
            "return": [
                "argparse.Namespace",
                "argparse.ArgumentParser",
                "Tuple[Dict[str, str], List[str]]"
            ],
            "arguments": {
                "input_args": [
                    "List[str]",
                    "int",
                    "str",
                    "Optional[argparse.Namespace]",
                    "Optional[List[str]]",
                    "Sequence[str]"
                ],
                "sys_exit": [
                    "str",
                    "subprocess.CompletedProcess",
                    "List[Tuple[str, str]]",
                    "int"
                ]
            }
        },
        "Urls.parse_args.ArgParse.exit": {
            "name": "exit",
            "location": 265,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool",
                    "List[Dict[str, Any]]"
                ],
                "message": [
                    "str"
                ]
            }
        }
    },
    "pygameweb-master/pygameweb/dashboard/views.py": {
        "index": {
            "name": "index",
            "location": 17,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "dashboard": {
            "name": "dashboard",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "screenshots300": {
            "name": "screenshots300",
            "location": 38,
            "return": [
                "Dict[str, Any]",
                "List[str]",
                "Optional[str]",
                "\"TopicQuery\"",
                "str"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "add_dashboard": {
            "name": "add_dashboard",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        }
    },
    "pygameweb-master/pygameweb/doc/models.py": {},
    "pygameweb-master/pygameweb/nav/views.py": {
        "make_nav": {
            "name": "make_nav",
            "location": 89,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "session": [
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "add_nav": {
            "name": "add_nav",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "str",
                    "flask.Flask"
                ]
            }
        },
        "BootstrapRendererNew.visit_Navbar": {
            "name": "visit_Navbar",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "add_nav.mynavbar": {
            "name": "mynavbar",
            "location": 131,
            "return": [
                "str",
                "MutableMapping[str, Any]",
                "Callable[[T], None]"
            ],
            "arguments": {}
        }
    },
    "pygameweb-master/pygameweb/news/forms.py": {},
    "pygameweb-master/pygameweb/news/models.py": {
        "slugify_title": {
            "name": "slugify_title",
            "location": 19,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "title": [
                    "int",
                    "Sequence[int]",
                    "list"
                ],
                "datetimeon": [
                    "int",
                    "bool",
                    "Optional[List[str]]"
                ]
            }
        },
        "News.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "title": [
                    "int",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]",
                    "str",
                    "bool",
                    "bytes",
                    "transfer.models.Order"
                ],
                "description": [
                    "int",
                    "str"
                ],
                "summary": [
                    "int",
                    "str"
                ],
                "id": [
                    "str",
                    "int",
                    "list",
                    "bool"
                ],
                "datetimeon": [
                    "datetime.datetime",
                    "Optional[int]",
                    "Optional[datetime.timedelta]",
                    "int"
                ],
                "submit_users_id": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "slug": [
                    "Optional[str]",
                    "Optional[int]",
                    "str",
                    "bytes",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "News.title_html": {
            "name": "title_html",
            "location": 76,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "News.description_html": {
            "name": "description_html",
            "location": 80,
            "return": [
                "bool",
                "Optional[int]",
                "Callable",
                "Optional[bool]",
                "int",
                "Optional[List[Any]]",
                "Index"
            ],
            "arguments": {
                "self": []
            }
        },
        "News.datetimeon_2882": {
            "name": "datetimeon_2882",
            "location": 84,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewsAlert.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "title": [
                    "int",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]",
                    "str",
                    "bool",
                    "bytes",
                    "transfer.models.Order"
                ],
                "description": [
                    "int",
                    "str"
                ],
                "summary": [
                    "int",
                    "str"
                ],
                "id": [
                    "str",
                    "int",
                    "list",
                    "bool"
                ],
                "datetimeon": [
                    "datetime.datetime",
                    "Optional[int]",
                    "Optional[datetime.timedelta]",
                    "int"
                ],
                "submit_users_id": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "slug": [
                    "Optional[str]",
                    "Optional[int]",
                    "str",
                    "bytes",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "NewsAlert.title_html": {
            "name": "title_html",
            "location": 135,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewsAlert.description_html": {
            "name": "description_html",
            "location": 139,
            "return": [
                "bool",
                "Optional[int]",
                "Callable",
                "Optional[bool]",
                "int",
                "Optional[List[Any]]",
                "Index"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewsAlert.datetimeon_2882": {
            "name": "datetimeon_2882",
            "location": 143,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pygameweb-master/pygameweb/news/views.py": {
        "news_for": {
            "name": "news_for",
            "location": 24,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "slug": [
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "news_id": [
                    "Optional[int]",
                    "Optional[str]",
                    "Set[int]"
                ]
            }
        },
        "news_alert_for": {
            "name": "news_alert_for",
            "location": 40,
            "return": [
                "float",
                "raiden.utils.SecretHash",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "slug": [
                    "Optional[int]",
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "news_alert_id": [
                    "Optional[int]",
                    "Optional[str]",
                    "str",
                    "int"
                ]
            }
        },
        "latest_news": {
            "name": "latest_news",
            "location": 57,
            "return": [
                "bool",
                "Dict[str, float]",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "session": [
                    "int",
                    "models.Book",
                    "Optional[str]"
                ],
                "per_page": [
                    "int",
                    "models.Book",
                    "Optional[str]"
                ]
            }
        },
        "index": {
            "name": "index",
            "location": 66,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {}
        },
        "index_redirect": {
            "name": "index_redirect",
            "location": 76,
            "return": [
                "cmk.utils.type_defs.UserId",
                "str",
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {}
        },
        "atom": {
            "name": "atom",
            "location": 85,
            "return": [
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {}
        },
        "rss": {
            "name": "rss",
            "location": 112,
            "return": [
                "dict",
                "Optional[str]",
                "List[str]",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "legacy_feeds": {
            "name": "legacy_feeds",
            "location": 132,
            "return": [
                "bool",
                "List[int]",
                "List[Tuple[str, str]]",
                "int",
                "List[str]",
                "List[\"Node\"]"
            ],
            "arguments": {}
        },
        "view": {
            "name": "view",
            "location": 142,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "slug": [
                    "Optional[int]"
                ]
            }
        },
        "view_news_id": {
            "name": "view_news_id",
            "location": 152,
            "return": [
                "str"
            ],
            "arguments": {
                "news_id": [
                    "str",
                    "int",
                    "transfer.models.OrderID",
                    "Optional[int]",
                    "shop.transfer.models.ShopID"
                ]
            }
        },
        "view_news_alert_id": {
            "name": "view_news_alert_id",
            "location": 162,
            "return": [
                "str"
            ],
            "arguments": {
                "news_alert_id": [
                    "str",
                    "int",
                    "float",
                    "raiden_contracts.utils.type_aliases.ChainID",
                    "Type[models.taxonomies.T]"
                ]
            }
        },
        "edit_news": {
            "name": "edit_news",
            "location": 174,
            "return": [
                "str",
                "Dict[str, str]",
                "bool",
                "int"
            ],
            "arguments": {
                "slug": [
                    "bool",
                    "str"
                ]
            }
        },
        "new_news": {
            "name": "new_news",
            "location": 198,
            "return": [
                "bool",
                "int",
                "List[str]",
                "cmk.utils.type_defs.UserId",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "add_news_blueprint": {
            "name": "add_news_blueprint",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        }
    },
    "pygameweb-master/pygameweb/page/models.py": {},
    "pygameweb-master/pygameweb/page/views.py": {
        "render_page": {
            "name": "render_page",
            "location": 30,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "page": [
                    "str",
                    "Optional[float]",
                    "bool",
                    "int",
                    "Optional[\"Outcome\"]"
                ]
            }
        },
        "page_link": {
            "name": "page_link",
            "location": 38,
            "return": [
                "str",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "link": [
                    "str",
                    "Union[sqlalchemy.orm.session.Session, abilian.core.models.blob.Blob]"
                ]
            }
        },
        "add_page": {
            "name": "add_page",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        }
    },
    "pygameweb-master/pygameweb/project/forms.py": {},
    "pygameweb-master/pygameweb/project/gh_releases.py": {
        "sync_github_releases": {
            "name": "sync_github_releases",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "sync_project": {
            "name": "sync_project",
            "location": 34,
            "return": [
                "Iterator[Dict[str, str]]",
                "app.models.Article",
                "set"
            ],
            "arguments": {
                "session": [
                    "NamedTuple",
                    "abilian.core.models.subjects.User"
                ],
                "project": [
                    "bob_emploi.frontend.api.project_pb2.Project"
                ]
            }
        },
        "release_from_gh": {
            "name": "release_from_gh",
            "location": 82,
            "return": [
                "float",
                "Sequence[float]",
                "Tuple[int, int]",
                "tuple"
            ],
            "arguments": {
                "session": [
                    "Tuple[int, int]",
                    "config.Config",
                    "str"
                ],
                "project": [
                    "str",
                    "Dict[str, Any]",
                    "type"
                ],
                "gh_release_atom": [
                    "str",
                    "Dict[str, Any]",
                    "type"
                ],
                "gh_release_api": [
                    "str",
                    "bool",
                    "Iterator[dep_check.models.SourceFile]",
                    "Iterable[str]"
                ]
            }
        },
        "releases_to_sync": {
            "name": "releases_to_sync",
            "location": 114,
            "return": [
                "bool",
                "salon.models.Stylist",
                "str"
            ],
            "arguments": {
                "gh_releases": [
                    "dict",
                    "List[zerver.models.Stream]",
                    "jumeaux.models.Res2DictAddOnPayload",
                    "int"
                ],
                "releases": [
                    "dict",
                    "int",
                    "jumeaux.models.Res2DictAddOnPayload",
                    "requests.Response"
                ]
            }
        },
        "versions_to_sync": {
            "name": "versions_to_sync",
            "location": 126,
            "return": [
                "int",
                "List[List[str]]"
            ],
            "arguments": {
                "gh_releases": [
                    "dict",
                    "bytes"
                ],
                "releases": [
                    "dict",
                    "bytes"
                ]
            }
        },
        "what_versions_sync": {
            "name": "what_versions_sync",
            "location": 140,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "pg_versions": [
                    "List[List[str]]",
                    "Optional[str]",
                    "Optional[Mapping]",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "str"
                ],
                "gh_versions": [
                    "bool",
                    "Dict[str, Dict[str, Any]]",
                    "Set[str]",
                    "Optional[\"ShippingInfo\"]",
                    "int",
                    "dict"
                ],
                "pg_versions_gh": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "Optional[str]"
                ]
            }
        },
        "get_gh_releases_feed": {
            "name": "get_gh_releases_feed",
            "location": 148,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "project": [
                    "models.Category",
                    "models.Project"
                ]
            }
        },
        "get_repo_from_url": {
            "name": "get_repo_from_url",
            "location": 164,
            "return": [
                "str",
                "Config"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "get_gh_releases_api": {
            "name": "get_gh_releases_api",
            "location": 179,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "project": [
                    "app.models.Game",
                    "bob_emploi.frontend.api.project_pb2.Project",
                    "str",
                    "List[str]"
                ],
                "version": [
                    "str"
                ]
            }
        }
    },
    "pygameweb-master/pygameweb/project/models.py": {
        "top_tags": {
            "name": "top_tags",
            "location": 136,
            "return": [
                "List[str]",
                "bool",
                "int",
                "List[cmk.gui.plugins.views.utils.JoinCell]",
                "str"
            ],
            "arguments": {
                "session": [
                    "Union[zerver.models.UserProfile, zilencer.models.RemoteZulipServer]",
                    "purplship.providers.purolator.utils.Settings",
                    "purplship.providers.ups.utils.Settings",
                    "bytes"
                ],
                "limit": [
                    "Union[zerver.models.UserProfile, zilencer.models.RemoteZulipServer]",
                    "purplship.providers.purolator.utils.Settings",
                    "purplship.providers.ups.utils.Settings",
                    "bytes"
                ]
            }
        },
        "recent_releases": {
            "name": "recent_releases",
            "location": 181,
            "return": [
                "bool",
                "Dict[str, Set[str]]",
                "Type",
                "str",
                "bytes"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "grouper.models.base.session.Session",
                    "sqlalchemy.orm.session.Session.Transaction",
                    "sqlalchemy.orm.Session",
                    "models.Queue"
                ]
            }
        },
        "Project.__repr__": {
            "name": "__repr__",
            "location": 76,
            "return": [
                "bool",
                "Optional[int]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.summary_html": {
            "name": "summary_html",
            "location": 80,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.summary_html_text": {
            "name": "summary_html_text",
            "location": 84,
            "return": [
                "str",
                "Iterable[int]",
                "List[str]",
                "esm.models.ServiceType",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.description_html": {
            "name": "description_html",
            "location": 88,
            "return": [
                "bool",
                "Optional[int]",
                "Callable",
                "Optional[bool]",
                "int",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.image_thumb": {
            "name": "image_thumb",
            "location": 91,
            "return": [
                "str",
                "Mapping[str, Any]",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": [],
                "width": [
                    "str",
                    "raiden.utils.ChainID",
                    "dss.config.Replica",
                    "Optional[\"ShippingInfo\"]"
                ],
                "height": [
                    "str",
                    "raiden.utils.ChainID",
                    "dss.config.Replica",
                    "Optional[\"ShippingInfo\"]"
                ]
            }
        },
        "Project.tag_counts": {
            "name": "tag_counts",
            "location": 100,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.youtube_trailer_embed": {
            "name": "youtube_trailer_embed",
            "location": 118,
            "return": [
                "int",
                "str",
                "app.models.Article",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Release.datetimeon_2882": {
            "name": "datetimeon_2882",
            "location": 226,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Release.description_html": {
            "name": "description_html",
            "location": 230,
            "return": [
                "bool",
                "Optional[int]",
                "Callable",
                "Optional[bool]",
                "int",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pygameweb-master/pygameweb/project/views.py": {
        "project_for": {
            "name": "project_for",
            "location": 34,
            "return": [
                "bool",
                "Project",
                "str",
                "pathlib.Path",
                "config.Project",
                "List[annofabapi.models.ProjectMember]",
                "List[str]"
            ],
            "arguments": {
                "project_id": [
                    "str",
                    "int",
                    "Optional[datetime.datetime]"
                ]
            }
        },
        "release_for": {
            "name": "release_for",
            "location": 49,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "release_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "comments_for": {
            "name": "comments_for",
            "location": 63,
            "return": [
                "int",
                "zerver.models.Realm",
                "Dict[str, Any]"
            ],
            "arguments": {
                "project_id": [
                    "str",
                    "int"
                ]
            }
        },
        "projects": {
            "name": "projects",
            "location": 72,
            "return": [
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {}
        },
        "releases": {
            "name": "releases",
            "location": 87,
            "return": [
                "werkzeug.datastructures.FileStorage",
                "models.User",
                "List[str]",
                "str",
                "zerver.models.Stream",
                "dict"
            ],
            "arguments": {
                "project_id": [
                    "str",
                    "Optional[str]",
                    "int",
                    "projects.project_models.Project"
                ]
            }
        },
        "view": {
            "name": "view",
            "location": 106,
            "return": [
                "bool",
                "dict",
                "models.seat_group.SeatGroup",
                "ticketing.models.ticket_bundle.TicketBundle"
            ],
            "arguments": {
                "project_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "title": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "release": {
            "name": "release",
            "location": 127,
            "return": [
                "str",
                "int",
                "Hashable",
                "List[str]",
                "models.scenes.scenes_base.Scene"
            ],
            "arguments": {
                "project_id": [
                    "str"
                ],
                "release_id": [
                    "str"
                ],
                "title": [
                    "str",
                    "utils.types.Id",
                    "int"
                ]
            }
        },
        "inchunks": {
            "name": "inchunks",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "alist": [
                    "int",
                    "Sequence",
                    "list"
                ],
                "chunk_size": [
                    "int",
                    "Sequence",
                    "list"
                ]
            }
        },
        "tags": {
            "name": "tags",
            "location": 149,
            "return": [
                "str",
                "dict",
                "list"
            ],
            "arguments": {
                "tag": [
                    "medtagger.database.models.Task",
                    "pathlib.Path",
                    "List[str]",
                    "Tuple[str, str]",
                    "int",
                    "Dict[str, cerulean.path.Path]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "all_tags": {
            "name": "all_tags",
            "location": 197,
            "return": [
                "str",
                "dict",
                "zerver.models.Realm"
            ],
            "arguments": {}
        },
        "new_comment": {
            "name": "new_comment",
            "location": 230,
            "return": [
                "str",
                "int",
                "zerver.models.Realm",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "project_id": [
                    "str",
                    "int",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "save_image": {
            "name": "save_image",
            "location": 290,
            "return": [
                "str",
                "cmk.utils.type_defs.UserId",
                "werkzeug.exceptions.HTTPException",
                "Dict[str, Any]",
                "int",
                "Optional[str]",
                "jumeaux.models.Res2DictAddOnPayload",
                "bytes"
            ],
            "arguments": {
                "form_field": [
                    "str",
                    "List[str]"
                ],
                "image_path": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "new_project": {
            "name": "new_project",
            "location": 299,
            "return": [
                "str",
                "Dict[str, str]",
                "Dict[int, Set[str]]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "edit_project": {
            "name": "edit_project",
            "location": 361,
            "return": [
                "str",
                "Dict[str, str]",
                "Dict[int, Set[str]]",
                "Optional[int]"
            ],
            "arguments": {
                "project_id": [
                    "str",
                    "int",
                    "zerver.models.Realm"
                ]
            }
        },
        "edit_release": {
            "name": "edit_release",
            "location": 429,
            "return": [
                "int",
                "raiden.utils.List[raiden.utils.Tuple[str, raiden.utils.Any]]",
                "bool",
                "str",
                "zerver.models.Realm"
            ],
            "arguments": {
                "project_id": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "release_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "delete_release": {
            "name": "delete_release",
            "location": 483,
            "return": [
                "str",
                "bool",
                "models.User",
                "List[str]"
            ],
            "arguments": {
                "project_id": [
                    "str",
                    "cmk.utils.type_defs.UserId",
                    "Optional[int]",
                    "ClassVar[str]",
                    "int"
                ],
                "release_id": [
                    "str"
                ]
            }
        },
        "feed_recent_releases": {
            "name": "feed_recent_releases",
            "location": 520,
            "return": [
                "str",
                "pathlib.Path",
                "trezor.utils.Writer",
                "int"
            ],
            "arguments": {}
        },
        "atom": {
            "name": "atom",
            "location": 527,
            "return": [
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {}
        },
        "rss": {
            "name": "rss",
            "location": 539,
            "return": [
                "dict",
                "Optional[str]",
                "List[str]",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "legacy_feeds": {
            "name": "legacy_feeds",
            "location": 553,
            "return": [
                "bool",
                "List[int]",
                "List[Tuple[str, str]]",
                "int",
                "List[str]",
                "List[\"Node\"]"
            ],
            "arguments": {}
        },
        "add_project_blueprint": {
            "name": "add_project_blueprint",
            "location": 562,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        }
    },
    "pygameweb-master/pygameweb/sidebar/views.py": {
        "sidebar": {
            "name": "sidebar",
            "location": 14,
            "return": [
                "Dict[str, int]",
                "Dict[str, str]",
                "List[float]",
                "dict",
                "List[str]",
                "Set[str]",
                "Dict[Any, str]",
                "Dict[str, dict]"
            ],
            "arguments": {}
        },
        "add_sidebar": {
            "name": "add_sidebar",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "pygameweb-master/pygameweb/static/views.py": {
        "is_there": {
            "name": "is_there",
            "location": 24,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "app": [
                    "str",
                    "bool",
                    "pathlib.Path"
                ],
                "full_path": [
                    "pathlib.Path",
                    "bool",
                    "Union[pathlib.Path, str, None]",
                    "str",
                    "cerulean.Path"
                ],
                "file_folder": [
                    "str",
                    "bool",
                    "pathlib.Path"
                ]
            }
        },
        "add_folder": {
            "name": "add_folder",
            "location": 29,
            "return": [],
            "arguments": {
                "app": [
                    "flask.Flask",
                    "Optional[\"Game\"]",
                    "bool",
                    "flask.testing.FlaskClient"
                ],
                "static_blueprint": [
                    "flask.Flask"
                ],
                "folder": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "add_file": {
            "name": "add_file",
            "location": 54,
            "return": [
                "bool",
                "Set[str]",
                "List[Dict[str, str]]",
                "str",
                "Tuple[int, str]"
            ],
            "arguments": {
                "app": [
                    "str",
                    "pathlib.Path",
                    "List[str]",
                    "Union[pathlib.Path, str, None]",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "static_blueprint": [
                    "bool",
                    "str",
                    "Union[str, pathlib.Path]",
                    "dict"
                ],
                "file": [
                    "Union[str, pathlib.Path]",
                    "pathlib.Path",
                    "dict",
                    "path.Path",
                    "Iterable[str]",
                    "bool",
                    "str",
                    "bytes"
                ]
            }
        },
        "add_static_blueprint": {
            "name": "add_static_blueprint",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "add_folder.download_file": {
            "name": "download_file",
            "location": 38,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "add_file.download_file": {
            "name": "download_file",
            "location": 62,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "pathlib.Path"
            ],
            "arguments": {}
        },
        "add_folder.download_index_file": {
            "name": "download_index_file",
            "location": 46,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "pygameweb-master/pygameweb/tasks/models.py": {},
    "pygameweb-master/pygameweb/tasks/worker.py": {
        "compress_png": {
            "name": "compress_png",
            "location": 12,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "work": {
            "name": "work",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pygameweb-master/pygameweb/tasks/__init__.py": {
        "put": {
            "name": "put",
            "location": 12,
            "return": [
                "Type",
                "Sequence[Any]",
                "Type[Any]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]"
                ],
                "what": [
                    "str",
                    "List[str]"
                ],
                "when": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "get": {
            "name": "get",
            "location": 32,
            "return": [
                "str",
                "Type",
                "int"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "queue": {
            "name": "queue",
            "location": 38,
            "return": [
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]"
                ],
                "session": [
                    "Optional[str]",
                    "Optional['Node']",
                    "Optional[Pattern]"
                ],
                "engine": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional['InstrumentBase']",
                    "str",
                    "Optional[Any]",
                    "Optional[bool]"
                ]
            }
        }
    },
    "pygameweb-master/pygameweb/thumb/views.py": {
        "add_thumb_blueprint": {
            "name": "add_thumb_blueprint",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        }
    },
    "pygameweb-master/pygameweb/thumb/__init__.py": {
        "compress_later": {
            "name": "compress_later",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "fname": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "image_thumb": {
            "name": "image_thumb",
            "location": 19,
            "return": [
                "Optional[int]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "Optional[Any]",
                "Optional[bytes]",
                "Optional[List[Any]]",
                "Optional[List[str]]",
                "Optional[Union[str, Any]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "www_path": [
                    "str",
                    "int",
                    "Optional[str]",
                    "pathlib.Path"
                ],
                "fname": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Optional[Dict[str, Any]]"
                ],
                "width": [
                    "int",
                    "bool"
                ],
                "height": [
                    "int",
                    "bool"
                ],
                "itype": [
                    "str"
                ],
                "quality": [
                    "int"
                ]
            }
        }
    },
    "pygameweb-master/pygameweb/user/models.py": {
        "User.__repr__": {
            "name": "__repr__",
            "location": 78,
            "return": [
                "str",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.__str__": {
            "name": "__str__",
            "location": 93,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pygameweb-master/pygameweb/user/rbl.py": {
        "rbl": {
            "name": "rbl",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "ip_address": []
            }
        },
        "rbl_list": {
            "name": "rbl_list",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "address": [
                    "int",
                    "bytes",
                    "bool"
                ],
                "black_list": [
                    "str",
                    "List[str]",
                    "Dict[str, str]",
                    "Optional[Callable[[Any, Any], None]]"
                ]
            }
        }
    },
    "pygameweb-master/pygameweb/user/views.py": {
        "monkey_patch_email": {
            "name": "monkey_patch_email",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "monkey_patch_email_field": {
            "name": "monkey_patch_email_field",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "form_class": [
                    "str",
                    "int",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "monkey_patch_sqlstore": {
            "name": "monkey_patch_sqlstore",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "add_user_blueprint": {
            "name": "add_user_blueprint",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "monkey_patch_email_field.rbl_spamlist_validator": {
            "name": "rbl_spamlist_validator",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "form": [
                    "faustypes.models.ModelT",
                    "str",
                    "wtforms.Form"
                ],
                "field": [
                    "faustypes.models.ModelT",
                    "str",
                    "wtforms.Form"
                ]
            }
        },
        "add_user_blueprint.unique_user_name": {
            "name": "unique_user_name",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "form": [
                    "bool",
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "field": [
                    "str"
                ]
            }
        },
        "add_user_blueprint.when_the_user_is_confirmed": {
            "name": "when_the_user_is_confirmed",
            "location": 216,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "flask.Flask",
                    "asgard.models.user.User"
                ],
                "user": [
                    "str",
                    "zerver.models.UserProfile",
                    "raiden.utils.Address",
                    "asgard.models.job.ScheduledJob",
                    "daylighdb.models.User",
                    "Optional[zerver.models.UserProfile]",
                    "zerver.models.Stream"
                ]
            }
        },
        "add_user_blueprint.when_user_is_registered": {
            "name": "when_user_is_registered",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "bool",
                    "str",
                    "src.application.usecase.user.publish_online_user.PublishOnlineUserUseCase",
                    "src.application.usecase.user.remove_online_user.RemoveOnlineUserUseCase",
                    "src.application.usecase.user.check_creds.CheckUserCredentialsUseCase",
                    "src.application.usecase.user.add_online_user.AddOnlineUserUseCase"
                ],
                "user": [
                    "str",
                    "Optional[List[str]]",
                    "bool"
                ],
                "confirm_token": [
                    "bool",
                    "str",
                    "src.application.usecase.user.publish_online_user.PublishOnlineUserUseCase",
                    "src.application.usecase.user.remove_online_user.RemoveOnlineUserUseCase",
                    "src.application.usecase.user.check_creds.CheckUserCredentialsUseCase",
                    "src.application.usecase.user.add_online_user.AddOnlineUserUseCase"
                ]
            }
        },
        "monkey_patch_email.Email.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "monkey_patch_email.Email.__call__": {
            "name": "__call__",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "form": [
                    "faustypes.models.ModelT",
                    "wtforms.Form",
                    "str"
                ],
                "field": [
                    "wtforms.StringField",
                    "Callable[..., Awaitable[None]]",
                    "str",
                    "type",
                    "models.Variable",
                    "wtforms.fields.StringField"
                ]
            }
        },
        "monkey_patch_sqlstore.PretendFlaskSQLAlchemyDb.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "List[str]",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "monkey_patch_sqlstore.SQLAlchemyUserDatastore.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "db": [
                    "models.User",
                    "bool",
                    "Optional[int]",
                    "str",
                    "tracim.models.data.Workspace",
                    "tracim.models.data.Content"
                ],
                "user_model": [
                    "zerver.models.UserProfile",
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "role_model": [
                    "zerver.models.UserProfile",
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "monkey_patch_sqlstore.SQLAlchemyUserDatastore.get_user": {
            "name": "get_user",
            "location": 98,
            "return": [
                "Callable[[Dict], None]",
                "Optional[List]",
                "Optional[cmk.utils.type_defs.SectionName]",
                "server.models.User"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "bytes",
                    "zerver.models.Realm",
                    "excars.models.user.User",
                    "zerver.models.UserProfile",
                    "Dict[str, Any]"
                ]
            }
        },
        "monkey_patch_sqlstore.SQLAlchemyUserDatastore._is_numeric": {
            "name": "_is_numeric",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "List[str]",
                    "float",
                    "Callable[[object], Any]"
                ]
            }
        },
        "monkey_patch_sqlstore.SQLAlchemyUserDatastore.find_user": {
            "name": "find_user",
            "location": 115,
            "return": [
                "bool",
                "str",
                "raiden.utils.ChannelID"
            ],
            "arguments": {
                "self": []
            }
        },
        "monkey_patch_sqlstore.SQLAlchemyUserDatastore.find_role": {
            "name": "find_role",
            "location": 119,
            "return": [
                "bool",
                "str",
                "Optional[User]",
                "T",
                "django.contrib.auth.models.AbstractBaseUser",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "self": [],
                "role": [
                    "int",
                    "article.transfer.models.ArticleNumber",
                    "bytes",
                    "str",
                    "set",
                    "bool",
                    "abilian.core.models.subjects.User"
                ]
            }
        },
        "monkey_patch_sqlstore.SQLAlchemySessionUserDatastore.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "user_model": [
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "role_model": [
                    "Optional[str]",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "pygameweb-master/pygameweb/uwsgi/front.py": {},
    "pygameweb-master/pygameweb/wiki/forms.py": {},
    "pygameweb-master/pygameweb/wiki/models.py": {
        "Wiki.content_for_link": {
            "name": "content_for_link",
            "location": 46,
            "return": [
                "bool",
                "int",
                "Optional[str]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "sqlalchemy.orm.Session"
                ],
                "session": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "sqlalchemy.orm.Session"
                ],
                "link": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "Wiki.for_link": {
            "name": "for_link",
            "location": 53,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]",
                "dict",
                "zerver.models.Stream"
            ],
            "arguments": {
                "cls": [],
                "session": [],
                "link": [
                    "str",
                    "Callable[[], T]",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "Wiki.new_version": {
            "name": "new_version",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session",
                    "recidiviz.persistence.database.session.Session",
                    "grouper.models.user.User",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "Wiki.content_rendered": {
            "name": "content_rendered",
            "location": 82,
            "return": [
                "str",
                "int",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wiki.content_toc": {
            "name": "content_toc",
            "location": 93,
            "return": [
                "Mapping[str, Any]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wiki.content_sanitized": {
            "name": "content_sanitized",
            "location": 109,
            "return": [
                "str",
                "List[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wiki.content_rendered.for_link": {
            "name": "for_link",
            "location": 87,
            "return": [],
            "arguments": {
                "link": []
            }
        },
        "Wiki.content_toc.for_link": {
            "name": "for_link",
            "location": 98,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]",
                "dict",
                "zerver.models.Stream"
            ],
            "arguments": {
                "link": [
                    "str",
                    "Callable[[], T]",
                    "sqlalchemy.orm.Session"
                ]
            }
        }
    },
    "pygameweb-master/pygameweb/wiki/views.py": {
        "wiki_for": {
            "name": "wiki_for",
            "location": 21,
            "return": [
                "int",
                "bool",
                "Dict[str, int]",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "link": [
                    "str",
                    "bytes"
                ]
            }
        },
        "index": {
            "name": "index",
            "location": 38,
            "return": [
                "List[str]",
                "Sequence",
                "bool",
                "float",
                "str"
            ],
            "arguments": {
                "link": [
                    "str",
                    "bytes",
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "revert": {
            "name": "revert",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "link": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "source": {
            "name": "source",
            "location": 90,
            "return": [
                "str",
                "Dict[str, str]",
                "Dict[str, Any]",
                "Dict[str, Dict[str, str]]",
                "List[int]"
            ],
            "arguments": {
                "link": [
                    "str",
                    "int",
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "history": {
            "name": "history",
            "location": 111,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "link": [
                    "str",
                    "float",
                    "Optional[str]",
                    "Optional[bool]"
                ]
            }
        },
        "diff": {
            "name": "diff",
            "location": 125,
            "return": [
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "link": [
                    "str",
                    "List[Tuple[float, float]]",
                    "int",
                    "Iterable[str]"
                ]
            }
        },
        "recent": {
            "name": "recent",
            "location": 156,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "edit": {
            "name": "edit",
            "location": 184,
            "return": [
                "bool"
            ],
            "arguments": {
                "link": [
                    "str",
                    "dict",
                    "bytes"
                ]
            }
        },
        "delete_view_wiki_cache": {
            "name": "delete_view_wiki_cache",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {
                "link": [
                    "bytes",
                    "Hashable",
                    "str",
                    "dict"
                ]
            }
        },
        "add_wiki_blueprint": {
            "name": "add_wiki_blueprint",
            "location": 228,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "recent.grouper": {
            "name": "grouper",
            "location": 168,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "item": [
                    "T",
                    "Union[int, slice]"
                ]
            }
        }
    },
    "pygameweb-master/pygameweb/wiki/wiki.py": {
        "_wiki_img": {
            "name": "_wiki_img",
            "location": 27,
            "return": [],
            "arguments": {
                "content": []
            }
        },
        "_wiki_img_callback": {
            "name": "_wiki_img_callback",
            "location": 33,
            "return": [],
            "arguments": {
                "matchobj": []
            }
        },
        "_wiki_href": {
            "name": "_wiki_href",
            "location": 53,
            "return": [],
            "arguments": {
                "content": []
            }
        },
        "_wiki_href_callback": {
            "name": "_wiki_href_callback",
            "location": 61,
            "return": [],
            "arguments": {
                "matchobj": []
            }
        },
        "_wiki_code": {
            "name": "_wiki_code",
            "location": 69,
            "return": [],
            "arguments": {
                "content": []
            }
        },
        "_wiki_code_callback": {
            "name": "_wiki_code_callback",
            "location": 88,
            "return": [],
            "arguments": {
                "matchobj": []
            }
        },
        "_wiki_pre_code_clean": {
            "name": "_wiki_pre_code_clean",
            "location": 98,
            "return": [],
            "arguments": {
                "pq_content": []
            }
        },
        "_wiki_link": {
            "name": "_wiki_link",
            "location": 113,
            "return": [],
            "arguments": {
                "content": []
            }
        },
        "_wiki_link_callback": {
            "name": "_wiki_link_callback",
            "location": 121,
            "return": [],
            "arguments": {
                "matchobj": []
            }
        },
        "_wiki_quote": {
            "name": "_wiki_quote",
            "location": 141,
            "return": [],
            "arguments": {
                "content": [],
                "for_link_cb": []
            }
        },
        "_wiki_quote_callback": {
            "name": "_wiki_quote_callback",
            "location": 153,
            "return": [],
            "arguments": {
                "m": [],
                "for_link_cb": []
            }
        },
        "table_of_contents": {
            "name": "table_of_contents",
            "location": 162,
            "return": [],
            "arguments": {
                "pq_content": []
            }
        },
        "_wiki_section": {
            "name": "_wiki_section",
            "location": 205,
            "return": [],
            "arguments": {
                "content": []
            }
        },
        "render_pq": {
            "name": "render_pq",
            "location": 217,
            "return": [],
            "arguments": {
                "content": [],
                "for_link_cb": [],
                "toc_separate": []
            }
        },
        "render": {
            "name": "render",
            "location": 249,
            "return": [],
            "arguments": {
                "content": [],
                "for_link_cb": []
            }
        },
        "_wiki_quote.quote_callback": {
            "name": "quote_callback",
            "location": 147,
            "return": [],
            "arguments": {
                "m": []
            }
        },
        "_test": {
            "name": "_test",
            "location": 265,
            "return": [],
            "arguments": {}
        }
    },
    "pygameweb-master/tests/conftest.py": {
        "app": {
            "name": "app",
            "location": 17,
            "return": [
                "str",
                "app.App",
                "type",
                "Config"
            ],
            "arguments": {
                "engine": [
                    "dict",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "session_factory": [
                    "dict",
                    "str",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "config": {
            "name": "config",
            "location": 28,
            "return": [
                "str",
                "Optional[dict]",
                "app.App",
                "app.config.MQConfig",
                "dict",
                "Config",
                "bool"
            ],
            "arguments": {}
        },
        "get_metadata": {
            "name": "get_metadata",
            "location": 45,
            "return": [
                "bytes",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {}
        },
        "get_metadata.load_models": {
            "name": "load_models",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "pygameweb-master/tests/functional/pygameweb/test_app.py": {
        "test_create_app": {
            "name": "test_create_app",
            "location": 3,
            "return": [
                ""
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "pygameweb-master/tests/functional/pygameweb/comment/test_comment.py": {
        "comment_client": {
            "name": "comment_client",
            "location": 8,
            "return": [],
            "arguments": {
                "app": [
                    "app.utils.models.ModelManager"
                ],
                "session": [
                    "int",
                    "str",
                    "bool",
                    "Optional[Dict]"
                ],
                "client": [
                    "int",
                    "str",
                    "bool",
                    "Optional[Dict]"
                ]
            }
        },
        "user": {
            "name": "user",
            "location": 19,
            "return": [
                "models.Course",
                "zam_repondeur.models.Dossier",
                "str",
                "metaswitch_tinder.database.models.User",
                "int",
                "abilian.core.models.subjects.User"
            ],
            "arguments": {
                "app": [
                    "utils.pluginmgr.Command",
                    "set",
                    "bool",
                    "Callable[[str, List], None]",
                    "str"
                ],
                "session": [
                    "asgard.models.user.User",
                    "asgard.models.accounAccount"
                ],
                "comment_client": [
                    "Callable"
                ]
            }
        },
        "moderator": {
            "name": "moderator",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "session": [
                    "app.models.User",
                    "http_quesuser.model.User",
                    "str"
                ],
                "user": [
                    "users.models.JustfixUser",
                    "zerver.models.Message",
                    "Type[T]",
                    "zerver.models.UserProfile",
                    "authentication.session.models.current_user.CurrentUser"
                ]
            }
        },
        "test_comment_load": {
            "name": "test_comment_load",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "session": []
            }
        },
        "test_recent_comments": {
            "name": "test_recent_comments",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "core.models.Recipe",
                    "core_lib.core.models.Event"
                ],
                "comment_client": [
                    "str"
                ]
            }
        },
        "test_comments_jquery_there": {
            "name": "test_comments_jquery_there",
            "location": 238,
            "return": [
                ""
            ],
            "arguments": {
                "comment_client": []
            }
        }
    },
    "pygameweb-master/tests/functional/pygameweb/dashboard/test_dashboard_views.py": {
        "dashboard_client": {
            "name": "dashboard_client",
            "location": 7,
            "return": [],
            "arguments": {
                "app": [
                    "float"
                ],
                "session": [
                    "int",
                    "str",
                    "bool",
                    "Optional[Dict]"
                ],
                "client": [
                    "int",
                    "str",
                    "bool",
                    "Optional[Dict]"
                ]
            }
        },
        "test_dashboard_view": {
            "name": "test_dashboard_view",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "app": [],
                "dashboard_client": [],
                "session": [],
                "tmpdir": [
                    "str"
                ]
            }
        }
    },
    "pygameweb-master/tests/functional/pygameweb/fixtures/test_user_fixtures.py": {
        "test_populate_db": {
            "name": "test_populate_db",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "projects.models.Project",
                    "dict",
                    "str"
                ],
                "session": [
                    "str",
                    "authentication.session.models.current_user.CurrentUser",
                    "asgard.models.user.User",
                    "asgard.models.accounAccount",
                    "core.models.Recipe"
                ]
            }
        },
        "test_populate_db_production": {
            "name": "test_populate_db_production",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "deeplearning.ml4pl.models.log_database.Database"
                ],
                "session": []
            }
        }
    },
    "pygameweb-master/tests/functional/pygameweb/news/test_news_views.py": {
        "news_client": {
            "name": "news_client",
            "location": 8,
            "return": [],
            "arguments": {
                "app": [
                    "int"
                ],
                "session": [
                    "int",
                    "str",
                    "bool",
                    "Optional[Dict]"
                ],
                "client": [
                    "int",
                    "str",
                    "bool",
                    "Optional[Dict]"
                ]
            }
        },
        "news": {
            "name": "news",
            "location": 19,
            "return": [
                "app.models.Article",
                "str"
            ],
            "arguments": {
                "session": [
                    "Type[User]",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "news_alert": {
            "name": "news_alert",
            "location": 41,
            "return": [
                "app.models.Article",
                "str"
            ],
            "arguments": {
                "session": [
                    "Type[User]",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "test_news_model": {
            "name": "test_news_model",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "news_client": [
                    "bool"
                ],
                "session": [
                    "bool"
                ],
                "news": [
                    "str",
                    "core.models.MyUser",
                    "slice",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "test_news_view": {
            "name": "test_news_view",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "news_client": [
                    "dict"
                ],
                "session": [
                    "bool"
                ],
                "news": [
                    "deeplearning.ml4pl.models.log_database.Database",
                    "str"
                ],
                "news_alert": [
                    "raiden.utils.PaymentNetworkID",
                    "dict"
                ]
            }
        },
        "test_news_feeds": {
            "name": "test_news_feeds",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "news_client": [],
                "session": [
                    "bool"
                ],
                "news": [
                    "deeplearning.ml4pl.models.log_database.Database"
                ],
                "feed_url": []
            }
        },
        "test_news_slug": {
            "name": "test_news_slug",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "news_client": [],
                "session": [
                    "bool"
                ],
                "news": [
                    "Dict[str, Any]"
                ]
            }
        },
        "a_user": {
            "name": "a_user",
            "location": 122,
            "return": [
                "zam_repondeur.models.Lecture",
                "bool",
                "set",
                "django.db.models.QuerySet",
                "user_models.User",
                "core.models.UserPreferences",
                "int",
                "app.models.user.User"
            ],
            "arguments": {
                "app": [
                    "bool",
                    "List[str]",
                    "int",
                    "List[Dict[str, Any]]",
                    "str"
                ],
                "session": [
                    "bytes",
                    "bool",
                    "Optional[str]",
                    "grouper.models.base.session.Session",
                    "Optional[Set[str]]"
                ],
                "news_client": [
                    "str"
                ],
                "name": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "cmk.utils.type_defs.HostName",
                    "Optional[str]"
                ],
                "email": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "List[str]",
                    "dict"
                ],
                "logged_in": [
                    "bool",
                    "List[str]",
                    "int",
                    "List[Dict[str, Any]]",
                    "str"
                ],
                "disabled": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "List[str]",
                    "dict"
                ],
                "active": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "user": {
            "name": "user",
            "location": 146,
            "return": [
                "str",
                "models.Telegram_Chat",
                "Optional[int]"
            ],
            "arguments": {
                "app": [],
                "session": [],
                "news_client": []
            }
        },
        "test_news_new": {
            "name": "test_news_new",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "news_client": [],
                "session": [
                    "core.models.Recipe"
                ],
                "user": [
                    "app.models.user.UserInDB",
                    "ultron8.api.models.user.UserInDB",
                    "bool"
                ]
            }
        }
    },
    "pygameweb-master/tests/functional/pygameweb/page/test_page_views.py": {
        "page_client": {
            "name": "page_client",
            "location": 8,
            "return": [],
            "arguments": {
                "app": [],
                "session": [
                    "int",
                    "str",
                    "bool",
                    "Optional[Dict]"
                ],
                "client": [
                    "int",
                    "str",
                    "bool",
                    "Optional[Dict]"
                ]
            }
        },
        "pages": {
            "name": "pages",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "session": [
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "test_page": {
            "name": "test_page",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "page_client": [
                    "dict"
                ],
                "session": [
                    "bool"
                ],
                "pages": [
                    "bool"
                ]
            }
        },
        "test_nav": {
            "name": "test_nav",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "pages": [
                    "bool",
                    "int",
                    "List[List[int]]"
                ],
                "session": [
                    "str"
                ]
            }
        }
    },
    "pygameweb-master/tests/functional/pygameweb/project/test_gh_releases.py": {
        "make_gh": {
            "name": "make_gh",
            "location": 18,
            "return": [
                "Dict[str, Dict[str, int]]",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "releases": [
                    "list",
                    "int"
                ]
            }
        },
        "make_pg": {
            "name": "make_pg",
            "location": 22,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "bool",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "releases": [
                    "dict",
                    "str"
                ]
            }
        },
        "test_releases_to_sync": {
            "name": "test_releases_to_sync",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_releases_to_sync_delete": {
            "name": "test_releases_to_sync_delete",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_releases_to_sync_update": {
            "name": "test_releases_to_sync_update",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_repo_from_url": {
            "name": "test_get_repo_from_url",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "project": {
            "name": "project",
            "location": 93,
            "return": [
                "int",
                "bool",
                "netCDF4.Group",
                "List[str]"
            ],
            "arguments": {
                "session": [
                    "dict",
                    "accounts.models.Account"
                ]
            }
        },
        "gh_release_atom": {
            "name": "gh_release_atom",
            "location": 151,
            "return": [
                "Optional[str]",
                "str",
                "bytes"
            ],
            "arguments": {}
        },
        "gh_release_api": {
            "name": "gh_release_api",
            "location": 218,
            "return": [
                "str",
                "Optional[int]",
                "Iterable[str]",
                "int",
                "MutableMapping[str, Any]"
            ],
            "arguments": {}
        },
        "test_sync_project": {
            "name": "test_sync_project",
            "location": 366,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "app.models.Game"
                ],
                "project": [
                    "Callable"
                ]
            }
        },
        "test_release_from_gh": {
            "name": "test_release_from_gh",
            "location": 378,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "Dict[str, Any]",
                    "core.models.Grouping"
                ],
                "project": [
                    "bob_emploi.frontend.api.user_pb2.User",
                    "bob_emploi.frontend.api.project_pb2.Project"
                ],
                "gh_release_atom": [
                    "Dict[str, Any]",
                    "core.models.Grouping"
                ],
                "gh_release_api": [
                    "Dict[str, Any]",
                    "core.models.Grouping"
                ]
            }
        },
        "Release.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "version": [
                    "int"
                ],
                "description": [
                    "int"
                ],
                "from_external": [
                    "int"
                ]
            }
        },
        "GRelease.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "title": [
                    "str",
                    "bool"
                ],
                "content": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "salon.models.Stylist",
                    "bytes"
                ]
            }
        }
    },
    "pygameweb-master/tests/functional/pygameweb/project/test_project_views.py": {
        "project_client": {
            "name": "project_client",
            "location": 8,
            "return": [
                "app.utils.models.ModelManager",
                "Callable"
            ],
            "arguments": {
                "app": [
                    "str",
                    "mock.MagicMock"
                ],
                "session": [
                    "str",
                    "bool",
                    "int",
                    "Optional[Dict]",
                    "List[int]"
                ],
                "client": [
                    "str",
                    "bool",
                    "int",
                    "Optional[Dict]",
                    "List[int]"
                ]
            }
        },
        "a_user": {
            "name": "a_user",
            "location": 23,
            "return": [
                "zam_repondeur.models.Lecture",
                "bool",
                "set",
                "django.db.models.QuerySet",
                "user_models.User",
                "core.models.UserPreferences",
                "int",
                "app.models.user.User"
            ],
            "arguments": {
                "app": [
                    "bool",
                    "int",
                    "str",
                    "Any"
                ],
                "session": [
                    "Optional[str]",
                    "grouper.models.base.session.Session",
                    "Callable",
                    "set",
                    "bool",
                    "List[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "project_client": [
                    "str",
                    "bool",
                    "dict",
                    "List[str]"
                ],
                "name": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "List[str]",
                    "int"
                ],
                "email": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "List[str]"
                ],
                "logged_in": [
                    "bool",
                    "int",
                    "str",
                    "Any"
                ],
                "disabled": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "List[str]"
                ],
                "active": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "user": {
            "name": "user",
            "location": 47,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "app": [
                    "str",
                    "pathlib.Path"
                ],
                "session": [
                    "str",
                    "pathlib.Path"
                ],
                "project_client": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "user_banned": {
            "name": "user_banned",
            "location": 57,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "app": [],
                "session": [],
                "project_client": []
            }
        },
        "project": {
            "name": "project",
            "location": 69,
            "return": [
                "int",
                "bool",
                "netCDF4.Group",
                "List[str]"
            ],
            "arguments": {
                "session": [
                    "str"
                ],
                "user": [
                    "zerver.models.UserProfile",
                    "Optional[Dict[str, str]]",
                    "str",
                    "zerver.models.PreregistrationUser",
                    "zerver.models.Recipient",
                    "zerver.models.Stream"
                ]
            }
        },
        "a_project": {
            "name": "a_project",
            "location": 120,
            "return": [
                "str",
                "bool",
                "salon.models.ServiceTemplateSet"
            ],
            "arguments": {
                "session": [
                    "str",
                    "List[Dict[str, Any]]",
                    "list",
                    "bool",
                    "dict",
                    "tuple"
                ],
                "title": [
                    "datetime.datetime",
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "release_description": [
                    "int",
                    "str",
                    "datetime.datetime",
                    "Optional[datetime.datetime]"
                ],
                "version": [
                    "int",
                    "str",
                    "datetime.datetime",
                    "Optional[datetime.datetime]"
                ],
                "user": [
                    "datetime.datetime",
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "project2": {
            "name": "project2",
            "location": 152,
            "return": [
                "int",
                "bool",
                "netCDF4.Group",
                "List[str]"
            ],
            "arguments": {
                "session": [
                    "Type[User]",
                    "dict",
                    "Type[T]"
                ],
                "project": [
                    "bool",
                    "Literal",
                    "List[str]",
                    "str",
                    "django.db.models.QuerySet"
                ],
                "user": [
                    "Optional[str]",
                    "Tuple[int]",
                    "Callable",
                    "str",
                    "Optional[Type[Any]]"
                ]
            }
        },
        "project3": {
            "name": "project3",
            "location": 171,
            "return": [
                "int",
                "bool",
                "netCDF4.Group",
                "List[str]"
            ],
            "arguments": {
                "session": [
                    "Union[zerver.models.UserProfile, zilencer.models.RemoteZulipServer]",
                    "Type[T]"
                ],
                "project": [
                    "bool",
                    "Literal",
                    "List[str]",
                    "str",
                    "django.db.models.QuerySet"
                ],
                "user_banned": [
                    "bool",
                    "Optional[str]",
                    "Tuple[int]",
                    "str",
                    "Union[eth.rlp.transactions.BaseTransaction, eth.utils.spoof.SpoofTransaction]",
                    "Optional[Type[Any]]"
                ]
            }
        },
        "test_project_hidden": {
            "name": "test_project_hidden",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "project_client": [
                    "path.Path",
                    "dict",
                    "str"
                ],
                "session": [
                    "paradigm.models.Base"
                ],
                "project": [
                    "app.utils.models.ModelManager"
                ],
                "project2": [
                    "pathlib.Path",
                    "str"
                ],
                "project3": [
                    "str",
                    "path.Path",
                    "dict",
                    "int"
                ]
            }
        },
        "test_project_index": {
            "name": "test_project_index",
            "location": 214,
            "return": [
                ""
            ],
            "arguments": {
                "project_client": [
                    "path.Path",
                    "dict",
                    "bool",
                    "core.models.Recipe",
                    "str"
                ],
                "session": [
                    "pathlib.Path"
                ],
                "user": [
                    "models.Category",
                    "models.Project"
                ],
                "project": [
                    "str",
                    "List[str]",
                    "List[snyk.Project]",
                    "Sequence[Path]",
                    "pathlib.Path"
                ],
                "project2": [
                    "pathlib.Path"
                ]
            }
        },
        "test_tags": {
            "name": "test_tags",
            "location": 263,
            "return": [
                ""
            ],
            "arguments": {
                "project_client": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "session": [
                    "pathlib.Path"
                ],
                "project": [
                    "core.models.Grouping",
                    "Callable",
                    "str"
                ],
                "project2": [
                    "core.models.Grouping",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_new_project_page": {
            "name": "test_new_project_page",
            "location": 290,
            "return": [
                ""
            ],
            "arguments": {
                "project_client": [
                    "path.Path",
                    "pathlib.Path"
                ],
                "user": [
                    "str",
                    "asgard.workers.models.scalable_app.ScalableApp"
                ]
            }
        },
        "test_add_new_project": {
            "name": "test_add_new_project",
            "location": 312,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "str",
                    "Callable",
                    "Dict[str, str]",
                    "pathlib.Path",
                    "dict"
                ],
                "project_client": [
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "Union[pathlib.Path, str]",
                    "dict"
                ],
                "session": [
                    "List[Dict[str, Any]]",
                    "tracim.models.data.Content",
                    "medtagger.database.models.Scan",
                    "Callable[[str, str], None]",
                    "Dict[str, Any]",
                    "str",
                    "Optional[Any]"
                ],
                "user": [
                    "pathlib.Path",
                    "str",
                    "Dict[str, cerulean.Path]",
                    "list"
                ]
            }
        },
        "test_add_new_project_without_image": {
            "name": "test_add_new_project_without_image",
            "location": 436,
            "return": [
                ""
            ],
            "arguments": {
                "project_client": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "dict"
                ],
                "session": [
                    "str",
                    "List[Dict[str, Any]]",
                    "app.models.Game",
                    "tracim.models.data.ContentRevisionRO",
                    "estimark.application.domain.models.Entity",
                    "dict"
                ],
                "user": [
                    "List[int]",
                    "str",
                    "bool"
                ]
            }
        },
        "test_new_project_comment": {
            "name": "test_new_project_comment",
            "location": 550,
            "return": [
                ""
            ],
            "arguments": {
                "project_client": [
                    "str",
                    "pathlib.Path",
                    "bool"
                ],
                "session": [
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]"
                ],
                "project": [
                    "str",
                    "Project",
                    "projects.project_models.Project",
                    "List[Project]",
                    "dbconfig.Project"
                ],
                "project2": [
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]"
                ],
                "user": [
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]"
                ]
            }
        },
        "test_feeds": {
            "name": "test_feeds",
            "location": 570,
            "return": [
                ""
            ],
            "arguments": {
                "project_client": [
                    "str",
                    "path.Path"
                ],
                "session": [
                    "pathlib.Path"
                ],
                "project": [
                    "pathlib.Path"
                ],
                "project2": [
                    "pathlib.Path"
                ],
                "feed_url": [
                    "str",
                    "path.Path"
                ]
            }
        }
    },
    "pygameweb-master/tests/functional/pygameweb/wiki/test_wiki_models.py": {
        "test_wiki_models_new_version": {
            "name": "test_wiki_models_new_version",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "session": []
            }
        }
    },
    "pygameweb-master/tests/functional/pygameweb/wiki/test_wiki_views.py": {
        "wiki_client": {
            "name": "wiki_client",
            "location": 8,
            "return": [],
            "arguments": {
                "app": [
                    "int"
                ],
                "session": [
                    "int",
                    "str",
                    "bool",
                    "Optional[Dict]"
                ],
                "client": [
                    "int",
                    "str",
                    "bool",
                    "Optional[Dict]"
                ]
            }
        },
        "user": {
            "name": "user",
            "location": 19,
            "return": [
                "models.Course",
                "zam_repondeur.models.Dossier",
                "str",
                "metaswitch_tinder.database.models.User",
                "int",
                "abilian.core.models.subjects.User"
            ],
            "arguments": {
                "app": [
                    "utils.pluginmgr.Command",
                    "set",
                    "bool",
                    "Callable[[str, List], None]",
                    "str"
                ],
                "session": [
                    "asgard.models.user.User",
                    "asgard.models.accounAccount"
                ],
                "wiki_client": [
                    "Callable"
                ]
            }
        },
        "member": {
            "name": "member",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "session": [
                    "app.models.User",
                    "http_quesuser.model.User",
                    "str"
                ],
                "user": [
                    "users.models.JustfixUser",
                    "zerver.models.Message",
                    "Type[T]",
                    "zerver.models.UserProfile",
                    "authentication.session.models.current_user.CurrentUser"
                ]
            }
        },
        "admin": {
            "name": "admin",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "session": [
                    "app.models.User",
                    "str",
                    "http_quesuser.model.User"
                ],
                "user": [
                    "users.models.JustfixUser",
                    "Type[T]",
                    "excars.models.user.User",
                    "zerver.models.Message",
                    "tracim.models.auth.User",
                    "bytes"
                ]
            }
        },
        "wiki_page_info": {
            "name": "wiki_page_info",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "session": [
                    "Type[User]",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "test_wiki_link": {
            "name": "test_wiki_link",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "wiki_client": [],
                "session": [
                    "bool"
                ],
                "wiki_page_info": []
            }
        },
        "test_wiki_recent": {
            "name": "test_wiki_recent",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "wiki_client": [],
                "session": [
                    "bool"
                ],
                "wiki_page_info": [
                    "Sequence[str]"
                ]
            }
        },
        "test_wiki_link_login": {
            "name": "test_wiki_link_login",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "wiki_client": [],
                "session": [
                    "bool"
                ],
                "wiki_page_info": [
                    "bool"
                ],
                "member": [
                    "bool"
                ]
            }
        },
        "test_wiki_locked": {
            "name": "test_wiki_locked",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "wiki_client": [],
                "session": [
                    "estimark.application.domain.models.Entity"
                ],
                "wiki_page_info": [],
                "user": [
                    "Callable"
                ]
            }
        },
        "test_wiki_locked_admin": {
            "name": "test_wiki_locked_admin",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "wiki_client": [],
                "session": [
                    "estimark.application.domain.models.Entity"
                ],
                "wiki_page_info": [],
                "user": [
                    "Callable"
                ],
                "admin": [
                    "Callable"
                ]
            }
        },
        "test_wiki_new_page": {
            "name": "test_wiki_new_page",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {
                "wiki_client": [
                    "dict"
                ],
                "session": [],
                "member": [],
                "user": []
            }
        },
        "test_wiki_index": {
            "name": "test_wiki_index",
            "location": 222,
            "return": [
                ""
            ],
            "arguments": {
                "wiki_client": [],
                "session": [
                    "Callable[[List, bool], None]",
                    "estimark.application.domain.models.Entity"
                ]
            }
        }
    },
    "pygameweb-master/tests/unit/pygameweb/user/test_rbl.py": {
        "test_rbl": {
            "name": "test_rbl",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pygameweb-master/tests/unit/pygameweb/wiki/test_wiki.py": {
        "test_render": {
            "name": "test_render",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_wiki_img": {
            "name": "test_wiki_img",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_wiki_href": {
            "name": "test_wiki_href",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_wiki_code": {
            "name": "test_wiki_code",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_wiki_code_pre": {
            "name": "test_wiki_code_pre",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_wiki_link": {
            "name": "test_wiki_link",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_wiki_section": {
            "name": "test_wiki_section",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_wiki_section_h3": {
            "name": "test_wiki_section_h3",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {}
        }
    }
}
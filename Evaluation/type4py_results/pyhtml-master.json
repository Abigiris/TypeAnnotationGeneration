{
    "pyhtml-master/pyhtml/main.py": {
        "attr": {
            "name": "attr",
            "location": 144,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "new": {
            "name": "new",
            "location": 151,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "doctype": [
                    "str",
                    "int"
                ],
                "spaces": [
                    "str",
                    "int"
                ]
            }
        },
        "PyHTML._close_tag": {
            "name": "_close_tag",
            "location": 29,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "elem": [
                    "str",
                    "Collection[str]",
                    "int",
                    "bool"
                ]
            }
        },
        "PyHTML._open_tag": {
            "name": "_open_tag",
            "location": 33,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "elem": [
                    "str",
                    "Dict[str, Any]",
                    "Iterable[str]",
                    "dict"
                ],
                "attrs": [
                    "str",
                    "Dict[str, Any]",
                    "Iterable[str]",
                    "dict"
                ]
            }
        },
        "PyHTML.attr": {
            "name": "attr",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "PyHTML.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "doctype": [
                    "str",
                    "bool"
                ],
                "spaces": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "PyHTML.__contains__": {
            "name": "__contains__",
            "location": 68,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "List[str]",
                    "Tuple[str, str]",
                    "object"
                ]
            }
        },
        "PyHTML.__eq__": {
            "name": "__eq__",
            "location": 71,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Tuple[float, float, float]",
                    "int",
                    "T"
                ]
            }
        },
        "PyHTML.__len__": {
            "name": "__len__",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyHTML.__repr__": {
            "name": "__repr__",
            "location": 77,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyHTML.__str__": {
            "name": "__str__",
            "location": 80,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyHTML.append": {
            "name": "append",
            "location": 83,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "PyHTML.indent": {
            "name": "indent",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyHTML.newline": {
            "name": "newline",
            "location": 103,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyHTML.vwrap": {
            "name": "vwrap",
            "location": 108,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "elem": [
                    "str",
                    "dict",
                    "Callable[[T], T]",
                    "T",
                    "List[str]"
                ],
                "attrs": [
                    "str",
                    "Optional[str]",
                    "Optional[Union[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "PyHTML.wrap": {
            "name": "wrap",
            "location": 120,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "self": [],
                "elem": [
                    "str",
                    "List[Tuple[float, str]]",
                    "tuple"
                ],
                "attrs": [
                    "str",
                    "Optional[str]",
                    "Optional[Union[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "PyHTML.manual_spacing": {
            "name": "manual_spacing",
            "location": 135,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyhtml-master/tests/conftest.py": {
        "attr": {
            "name": "attr",
            "location": 11,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "doctypes": {
            "name": "doctypes",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "read_file": {
            "name": "read_file",
            "location": 19,
            "return": [
                "pathlib.Path",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "pon": {
            "name": "pon",
            "location": 26,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "poff": {
            "name": "poff",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "pdoc": {
            "name": "pdoc",
            "location": 36,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "read_file._read": {
            "name": "_read",
            "location": 20,
            "return": [
                "str",
                "list",
                "Sequence[str]",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "file": [
                    "pathlib.Path",
                    "BinaryIO",
                    "List[str]",
                    "IO"
                ]
            }
        },
        "pdoc._new": {
            "name": "_new",
            "location": 37,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "doctype": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "pyhtml-master/tests/test_pyhtml.py": {
        "TestDunder.test_contains": {
            "name": "test_contains",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "poff": [
                    "str",
                    "float"
                ]
            }
        },
        "TestDunder.test_eq_repr_str": {
            "name": "test_eq_repr_str",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "poff": []
            }
        },
        "TestDunder.test_len": {
            "name": "test_len",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "poff": [
                    "int",
                    "float",
                    "Union[int, str]"
                ]
            }
        },
        "TestAttribute.test_empty_input": {
            "name": "test_empty_input",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "Callable",
                    "List[List[Any]]"
                ]
            }
        },
        "TestAttribute.test_good_input": {
            "name": "test_good_input",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str"
                ],
                "test_input": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        },
        "TestAttribute.test_bad_input": {
            "name": "test_bad_input",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "dict",
                    "str",
                    "Set[str]"
                ],
                "bad": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "dict",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "TestAppend.test_with_newline": {
            "name": "test_with_newline",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pon": [
                    "bool",
                    "str"
                ],
                "repeat": [
                    "str",
                    "float"
                ]
            }
        },
        "TestAppend.test_without_newline": {
            "name": "test_without_newline",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "poff": [
                    "bool",
                    "str"
                ],
                "repeat": [
                    "str",
                    "float"
                ]
            }
        },
        "TestAppend.test_non_string_type": {
            "name": "test_non_string_type",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "poff": [
                    "bool",
                    "Union[int, str]",
                    "int"
                ],
                "bad": [
                    "bool",
                    "Union[int, str]",
                    "int"
                ]
            }
        },
        "TestIndent.test_depth": {
            "name": "test_depth",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "poff": [
                    "str",
                    "float"
                ],
                "spaces": [
                    "str",
                    "float"
                ],
                "depth": [
                    "str",
                    "float"
                ]
            }
        },
        "TestNewline.test_depth_does_not_indent": {
            "name": "test_depth_does_not_indent",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "poff": [],
                "depth": []
            }
        },
        "TestDocType.test_doctype_declaration": {
            "name": "test_doctype_declaration",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "doctypes": [
                    "Dict[str, Any]",
                    "Callable",
                    "dict"
                ],
                "pdoc": [
                    "str"
                ]
            }
        },
        "TestDocType.test_unknown_doctype": {
            "name": "test_unknown_doctype",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pdoc": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "TestVoidWrap.test_without_attribute": {
            "name": "test_without_attribute",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "poff": [
                    "str",
                    "float"
                ]
            }
        },
        "TestVoidWrap.test_with_attribute": {
            "name": "test_with_attribute",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "bytes",
                    "Hashable",
                    "int"
                ],
                "poff": [
                    "bytes",
                    "Hashable",
                    "int"
                ]
            }
        },
        "TestVoidWrap.test_non_void_element": {
            "name": "test_non_void_element",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "poff": [
                    "dict",
                    "Type"
                ],
                "bad": [
                    "dict",
                    "Type"
                ]
            }
        },
        "TestVoidWrap.test_wrap_void_element": {
            "name": "test_wrap_void_element",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "poff": [
                    "str"
                ]
            }
        },
        "TestWrapAutoSpacingOff.test_single": {
            "name": "test_single",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "poff": [
                    "str",
                    "float"
                ]
            }
        },
        "TestWrapAutoSpacingOff.test_nested": {
            "name": "test_nested",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "poff": [
                    "str",
                    "float"
                ]
            }
        },
        "TestWrapAutoSpacingOff.test_double_nested": {
            "name": "test_double_nested",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "poff": [
                    "str",
                    "float"
                ]
            }
        },
        "TestWrapAutoSpacingOff.test_sibling": {
            "name": "test_sibling",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "poff": [
                    "int",
                    "str",
                    "Union[int, str]",
                    "list"
                ]
            }
        },
        "TestWrapAutoSpacingOff.test_nested_sibling": {
            "name": "test_nested_sibling",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "poff": [
                    "str"
                ]
            }
        },
        "TestWrapAutoSpacingOn.test_single": {
            "name": "test_single",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pon": [
                    "Callable"
                ],
                "read_file": [
                    "str"
                ]
            }
        },
        "TestWrapAutoSpacingOn.test_nested": {
            "name": "test_nested",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pon": [
                    "Callable"
                ],
                "read_file": [
                    "str"
                ]
            }
        },
        "TestWrapAutoSpacingOn.test_double_nested": {
            "name": "test_double_nested",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pon": [
                    "Callable"
                ],
                "read_file": [
                    "str"
                ]
            }
        },
        "TestWrapAutoSpacingOn.test_sibling": {
            "name": "test_sibling",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pon": [
                    "float",
                    "Dict[str, List[str]]"
                ],
                "read_file": [
                    "str"
                ]
            }
        },
        "TestWrapAutoSpacingOn.test_nested_sibling": {
            "name": "test_nested_sibling",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pon": [
                    "Sequence[Union[int, float]]",
                    "int",
                    "str"
                ],
                "read_file": [
                    "str"
                ]
            }
        },
        "TestWrapAutoSpacingMixed.test_nested_oneline": {
            "name": "test_nested_oneline",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pon": [
                    "bool"
                ],
                "read_file": [
                    "str"
                ]
            }
        },
        "TestWrapAutoSpacingMixed.test_nested_oneline_sibling": {
            "name": "test_nested_oneline_sibling",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pon": [
                    "Callable"
                ],
                "read_file": [
                    "str"
                ]
            }
        },
        "TestWrapAutoSpacingMixed.test_complex": {
            "name": "test_complex",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pon": [],
                "read_file": [
                    "str"
                ]
            }
        }
    },
    "pyhtml-master/tests/__init__.py": {}
}
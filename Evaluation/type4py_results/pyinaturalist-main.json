{
    "pyinaturalist-main/noxfile.py": {
        "test": {
            "name": "test",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "bytes"
                ]
            }
        },
        "clean": {
            "name": "clean",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "Optional[sqlalchemy.orm.session.Session]",
                    "list",
                    "Iterable"
                ]
            }
        },
        "coverage": {
            "name": "coverage",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "Callable",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "docs": {
            "name": "docs",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "Callable",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "livedocs": {
            "name": "livedocs",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "session": []
            }
        },
        "lint": {
            "name": "lint",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "Callable",
                    "List[str]",
                    "bool"
                ]
            }
        }
    },
    "pyinaturalist-main/docs/conf.py": {
        "setup": {
            "name": "setup",
            "location": 183,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "setup_external_files": {
            "name": "setup_external_files",
            "location": 200,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "make_symlink": {
            "name": "make_symlink",
            "location": 210,
            "return": [],
            "arguments": {
                "src": [],
                "dest": []
            }
        },
        "patch_automodapi": {
            "name": "patch_automodapi",
            "location": 216,
            "return": [],
            "arguments": {
                "app": []
            }
        }
    },
    "pyinaturalist-main/examples/observations_to_gpx.py": {
        "observations_to_gpx": {
            "name": "observations_to_gpx",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "observations": [
                    "List[str]",
                    "FrozenSet[str]",
                    "Tuple[str, bool]",
                    "str",
                    "bool"
                ],
                "output_file": [
                    "str",
                    "List[str]"
                ],
                "track": [
                    "str",
                    "TextIO",
                    "List[str]",
                    "int",
                    "bool"
                ]
            }
        },
        "observation_to_gpx_point": {
            "name": "observation_to_gpx_point",
            "location": 48,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "observation": [
                    "str",
                    "dict",
                    "Dict[str, object]"
                ],
                "track": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "pyinaturalist-main/examples/observations_to_tsp.py": {
        "get_observation_distance": {
            "name": "get_observation_distance",
            "location": 21,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "obs1": [
                    "str",
                    "bool"
                ],
                "obs2": [
                    "str",
                    "bool"
                ]
            }
        },
        "observations_to_tsp": {
            "name": "observations_to_tsp",
            "location": 28,
            "return": [
                "Optional[Any]",
                "bool",
                "str",
                "allennlp.models.Model",
                "Callable[..., None]",
                "Optional[int]"
            ],
            "arguments": {
                "observations": [
                    "List[bytes]",
                    "str",
                    "List[Optional[str]]",
                    "bytes"
                ],
                "output_file": [
                    "str"
                ]
            }
        }
    },
    "pyinaturalist-main/examples/observation_photo_metadata.py": {
        "get_photo_metadata": {
            "name": "get_photo_metadata",
            "location": 31,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "photo_url": [
                    "str",
                    "dict",
                    "Union[str, int]"
                ],
                "access_token": [
                    "str"
                ]
            }
        },
        "get_observation_photo_metadata": {
            "name": "get_observation_photo_metadata",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "observation_id": [
                    "str",
                    "int"
                ],
                "access_token": [
                    "str",
                    "int",
                    "dict",
                    "Optional[str]"
                ]
            }
        }
    },
    "pyinaturalist-main/examples/sample_data.py": {},
    "pyinaturalist-main/examples/__init__.py": {},
    "pyinaturalist-main/pyinat/__init__.py": {},
    "pyinaturalist-main/pyinaturalist/auth.py": {
        "get_access_token": {
            "name": "get_access_token",
            "location": 16,
            "return": [
                "str",
                "requests.models.Response",
                "Optional[str]",
                "requests.Session",
                "Optional[dict]",
                "requests.Response",
                "Dict[str, Any]"
            ],
            "arguments": {
                "username": [
                    "str",
                    "int",
                    "Sequence[int]",
                    "bool"
                ],
                "password": [
                    "str",
                    "int",
                    "Sequence[int]",
                    "bool"
                ],
                "app_id": [
                    "str",
                    "int",
                    "Sequence[int]",
                    "bool"
                ],
                "app_secret": [
                    "str",
                    "int",
                    "Sequence[int]",
                    "bool"
                ],
                "jwt": [
                    "str",
                    "Tuple[str]",
                    "List[Dict[str, Any]]",
                    "bool"
                ],
                "refresh": [
                    "str",
                    "int"
                ]
            }
        },
        "get_keyring_credentials": {
            "name": "get_keyring_credentials",
            "location": 107,
            "return": [
                "Optional[str]",
                "str",
                "Optional[List[str]]",
                "bool"
            ],
            "arguments": {}
        },
        "set_keyring_credentials": {
            "name": "set_keyring_credentials",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "app_id": [
                    "str"
                ],
                "app_secret": [
                    "str",
                    "Dict[str, List[str]]",
                    "Callable[[T], Any]",
                    "Union[Dict[str, Any], List[Any]]"
                ]
            }
        },
        "_get_jwt": {
            "name": "_get_jwt",
            "location": 146,
            "return": [
                "bool",
                "dict",
                "Callable[[], str]",
                "aiohttp.ClientSession",
                "Dict[str, Any]"
            ],
            "arguments": {
                "session": [
                    "str",
                    "dict",
                    "Optional[str]"
                ],
                "access_token": [
                    "str",
                    "dict",
                    "Optional[str]"
                ],
                "only_if_cached": [
                    "str",
                    "dict",
                    "Optional[str]"
                ]
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/client.py": {
        "iNatClient.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "creds": [
                    "Optional[str]",
                    "Optional[int]",
                    "Type[T]",
                    "bool",
                    "Exception"
                ],
                "default_params": [
                    "Optional[str]",
                    "Optional[int]",
                    "Type[T]",
                    "bool",
                    "Exception"
                ],
                "dry_run": [
                    "Optional[str]",
                    "Optional[int]",
                    "Type[T]",
                    "bool",
                    "Exception"
                ],
                "session": [
                    "bool",
                    "sqlalchemy.orm.session.Session",
                    "mwapi.Session",
                    "sqlalchemy.orm.Session",
                    "Callable[[], str]"
                ]
            }
        },
        "iNatClient.add_client_settings": {
            "name": "add_client_settings",
            "location": 121,
            "return": [
                "Dict[int, Dict[int, int]]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "request_function": [
                    "aiohttp.ClientSession",
                    "Optional[aiohttp.ClientSession]",
                    "jumeaux.models.Request",
                    "projects.models.Project"
                ],
                "kwargs": [],
                "auth": [
                    "bool",
                    "zerver.models.Client",
                    "List[Dict[str, Any]]",
                    "str",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "iNatClient.paginate": {
            "name": "paginate",
            "location": 143,
            "return": [
                "Dict[str, Any]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request_function": [
                    "str",
                    "zerver.models.UserProfile",
                    "Optional[str]",
                    "bool"
                ],
                "model": [
                    "str",
                    "models.UserAuth"
                ],
                "auth": [
                    "str",
                    "int"
                ],
                "cls": [
                    "str",
                    "models.UserAuth"
                ]
            }
        },
        "iNatClient.request": {
            "name": "request",
            "location": 163,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "str",
                "Dict[str, Union[str, Set]]"
            ],
            "arguments": {
                "self": [],
                "request_function": [
                    "str",
                    "boucanpy.db.models.user.User",
                    "zerver.models.UserProfile"
                ]
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/constants.py": {},
    "pyinaturalist-main/pyinaturalist/converters.py": {
        "convert_all_coordinates": {
            "name": "convert_all_coordinates",
            "location": 46,
            "return": [
                "List[str]",
                "str",
                "set",
                "List[Tuple[str, str]]",
                "dict"
            ],
            "arguments": {
                "results": [
                    "dict",
                    "float",
                    "Optional[Dict[str, Any]]",
                    "List[Dict]"
                ]
            }
        },
        "convert_all_place_coordinates": {
            "name": "convert_all_place_coordinates",
            "location": 58,
            "return": [
                "dict",
                "bool",
                "int"
            ],
            "arguments": {
                "response": [
                    "requests.models.Response",
                    "dict",
                    "requests.Response"
                ]
            }
        },
        "convert_all_timestamps": {
            "name": "convert_all_timestamps",
            "location": 67,
            "return": [
                "dict",
                "List[Dict[str, Any]]",
                "set"
            ],
            "arguments": {
                "results": [
                    "dict",
                    "datetime.date.time"
                ]
            }
        },
        "convert_observation_histogram": {
            "name": "convert_observation_histogram",
            "location": 74,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "response": [
                    "requests.Response",
                    "requests.models.Response"
                ]
            }
        },
        "convert_histogram": {
            "name": "convert_histogram",
            "location": 81,
            "return": [
                "List[str]",
                "Dict[str, int]",
                "Union[int, float, complex]",
                "dict",
                "str",
                "Set[int]"
            ],
            "arguments": {
                "result": [
                    "dict",
                    "Dict[str, float]",
                    "Tuple[Literal, Literal]",
                    "Dict[str, List[Callable]]",
                    "Dict[Any, str]"
                ],
                "interval": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "convert_csv_list": {
            "name": "convert_csv_list",
            "location": 93,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "obj": [
                    "Dict[str, Any]",
                    "int",
                    "str",
                    "List[object]"
                ]
            }
        },
        "convert_isoformat": {
            "name": "convert_isoformat",
            "location": 101,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "value": [
                    "str",
                    "recidiviz.common.constants.state.state_case_type.StateSupervisionCaseType"
                ]
            }
        },
        "convert_lat_long": {
            "name": "convert_lat_long",
            "location": 115,
            "return": [
                "Optional[str]",
                "bool",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "obj": [
                    "str"
                ]
            }
        },
        "convert_lat_long_dict": {
            "name": "convert_lat_long_dict",
            "location": 127,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]",
                "list",
                "str"
            ],
            "arguments": {
                "result": [
                    "dict",
                    "int",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Tuple[dict, dict]"
                ]
            }
        },
        "convert_lat_long_list": {
            "name": "convert_lat_long_list",
            "location": 135,
            "return": [
                "List[str]",
                "int",
                "dict",
                "bool"
            ],
            "arguments": {
                "result": [
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "list",
                    "bool"
                ]
            }
        },
        "convert_generic_timestamps": {
            "name": "convert_generic_timestamps",
            "location": 147,
            "return": [
                "bool",
                "str",
                "List[str]",
                "OrderedDict"
            ],
            "arguments": {
                "result": [
                    "str",
                    "dict",
                    "Dict[str, Iterable[Any]]",
                    "Union[type, Tuple[type, ...]]",
                    "Dict[str, Any]",
                    "Union[int, bytes]"
                ]
            }
        },
        "convert_observation_timestamps": {
            "name": "convert_observation_timestamps",
            "location": 167,
            "return": [
                "str",
                "List[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "result": [
                    "int",
                    "str"
                ]
            }
        },
        "safe_split": {
            "name": "safe_split",
            "location": 182,
            "return": [
                "str",
                "List[str]",
                "int",
                "list"
            ],
            "arguments": {
                "value": [
                    "str",
                    "list",
                    "List[str]",
                    "List[float]",
                    "bool",
                    "float"
                ],
                "delimiter": [
                    "str",
                    "list",
                    "List[str]",
                    "List[float]",
                    "bool",
                    "float"
                ]
            }
        },
        "strip_empty_values": {
            "name": "strip_empty_values",
            "location": 187,
            "return": [
                "dict",
                "Set[str]",
                "Dict[str, Any]",
                "Dict[int, Dict[int, Any]]",
                "Dict[str, str]",
                "Dict[str, List[Callable]]"
            ],
            "arguments": {
                "values": [
                    "list",
                    "str",
                    "List[str]",
                    "Iterable",
                    "\"PaginatedQuery\"",
                    "\"TopicQuery\""
                ]
            }
        },
        "ensure_file_obj": {
            "name": "ensure_file_obj",
            "location": 196,
            "return": [
                "str",
                "Optional['SparkSession']",
                "Optional[int]"
            ],
            "arguments": {
                "value": [
                    "str"
                ],
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session",
                    "Optional[int]",
                    "Optional[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "ensure_list": {
            "name": "ensure_list",
            "location": 214,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "dict",
                    "int"
                ],
                "convert_csv": [
                    "str",
                    "Union[str, int]"
                ],
                "delimiter": [
                    "str",
                    "dict"
                ]
            }
        },
        "format_dimensions": {
            "name": "format_dimensions",
            "location": 244,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "dimensions": [
                    "List[str]",
                    "Callable",
                    "dict",
                    "Iterable"
                ]
            }
        },
        "format_file_size": {
            "name": "format_file_size",
            "location": 254,
            "return": [
                "str"
            ],
            "arguments": {
                "n_bytes": [
                    "str",
                    "bool",
                    "int",
                    "datetime.timedelta"
                ]
            }
        },
        "format_license": {
            "name": "format_license",
            "location": 269,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "value": [
                    "dict",
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "list"
                ]
            }
        },
        "try_datetime": {
            "name": "try_datetime",
            "location": 278,
            "return": [
                "datetime.datetime",
                "str",
                "Union[str, int]",
                "Optional[float]"
            ],
            "arguments": {
                "timestamp": [
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "try_float": {
            "name": "try_float",
            "location": 295,
            "return": [
                "bool",
                "datetime.datetime",
                "Optional[float]",
                "Optional[datetime.date]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "try_float_pair": {
            "name": "try_float_pair",
            "location": 303,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "try_int": {
            "name": "try_int",
            "location": 313,
            "return": [
                "bool",
                "datetime.datetime",
                "Optional[float]",
                "Optional[datetime.date]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "try_int_or_float": {
            "name": "try_int_or_float",
            "location": 321,
            "return": [
                "str",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Optional[str]",
                    "Optional[Exception]"
                ]
            }
        },
        "format_file_size._format": {
            "name": "_format",
            "location": 258,
            "return": [
                "str",
                "Optional[str]",
                "Tuple[str, str]"
            ],
            "arguments": {
                "unit": [
                    "str",
                    "int",
                    "List[List[str]]",
                    "tuple"
                ]
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/exceptions.py": {},
    "pyinaturalist-main/pyinaturalist/formatters.py": {
        "enable_logging": {
            "name": "enable_logging",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "level": [
                    "str",
                    "telebotypes.Message",
                    "esm.models.ServiceInstance",
                    "Optional[str]"
                ],
                "external_level": [
                    "str",
                    "telebotypes.Message",
                    "esm.models.ServiceInstance"
                ]
            }
        },
        "pprint": {
            "name": "pprint",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "values": [
                    "bool"
                ]
            }
        },
        "detect_type": {
            "name": "detect_type",
            "location": 150,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "ensure_model_list": {
            "name": "ensure_model_list",
            "location": 159,
            "return": [
                "bool",
                "str",
                "float",
                "List[str]",
                "int"
            ],
            "arguments": {
                "values": [
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "format_table": {
            "name": "format_table",
            "location": 174,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "values": [
                    "Optional[dict]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "format_request": {
            "name": "format_request",
            "location": 204,
            "return": [
                "str",
                "Type[Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "request": [
                    "zerver.models.UserProfile",
                    "int",
                    "str"
                ],
                "dry_run": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "format_response": {
            "name": "format_response",
            "location": 212,
            "return": [
                "str",
                "int",
                "salon.models.Stylist"
            ],
            "arguments": {
                "response": [
                    "requests.Response",
                    "Dict[str, Any]"
                ]
            }
        },
        "_format_headers": {
            "name": "_format_headers",
            "location": 229,
            "return": [
                "str"
            ],
            "arguments": {
                "headers": [
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "_format_body": {
            "name": "_format_body",
            "location": 243,
            "return": [
                "bool",
                "dict",
                "Dict[str, Any]",
                "int",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "body": [
                    "dict",
                    "str",
                    "Optional[str]",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "format_table._str": {
            "name": "_str",
            "location": 191,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "bytes",
                    "datetime.date",
                    "str",
                    "Union[str, datetime.datetime]"
                ]
            }
        },
        "format_response._expires_str": {
            "name": "_expires_str",
            "location": 217,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "pyinaturalist-main/pyinaturalist/node_api.py": {
        "get_all_observations": {
            "name": "get_all_observations",
            "location": 17,
            "return": [
                "Optional[str]",
                "int",
                "bool"
            ],
            "arguments": {}
        }
    },
    "pyinaturalist-main/pyinaturalist/paginator.py": {
        "chunkify": {
            "name": "chunkify",
            "location": 324,
            "return": [
                "typing.Iterator[typing.List]"
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "Tuple[int, int]",
                    "List[int]",
                    "list"
                ],
                "max_size": [
                    "int",
                    "bool",
                    "float",
                    "Tuple[int, int]"
                ]
            }
        },
        "paginate_all": {
            "name": "paginate_all",
            "location": 331,
            "return": [
                "int",
                "List[str]"
            ],
            "arguments": {
                "request_function": [
                    "Dict[str, str]",
                    "int",
                    "Dict[str, Any]",
                    "Optional[Any]",
                    "bool"
                ]
            }
        },
        "Paginator.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request_function": [
                    "str",
                    "zerver.models.Message",
                    "Optional[str]"
                ],
                "model": [
                    "Optional[float]",
                    "float",
                    "models.FileOwner",
                    "Mapping[str, Any]",
                    "Optional[int]",
                    "Type[T]",
                    "bool"
                ]
            }
        },
        "Paginator.__iter__": {
            "name": "__iter__",
            "location": 102,
            "return": [
                "typing.Iterator[pyinaturalist.models.T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Paginator.all": {
            "name": "all",
            "location": 108,
            "return": [
                "list",
                "Tuple[List, List]",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Paginator.limit": {
            "name": "limit",
            "location": 112,
            "return": [
                "List[Dict]",
                "List[str]",
                "List[int]",
                "str",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "Paginator.one": {
            "name": "one",
            "location": 117,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[bool]",
                "Dict[str, Any]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Paginator.count": {
            "name": "count",
            "location": 123,
            "return": [
                "List[int]",
                "Dict[str, int]",
                "List[dict]",
                "magic.models.Deck"
            ],
            "arguments": {
                "self": []
            }
        },
        "Paginator.next_page": {
            "name": "next_page",
            "location": 137,
            "return": [
                "str",
                "Callable[[Any], bool]",
                "zam_repondeur.models.Lecture",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Paginator._next_page": {
            "name": "_next_page",
            "location": 141,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Paginator._check_exhausted": {
            "name": "_check_exhausted",
            "location": 168,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "page_results": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "Paginator._deduplicate": {
            "name": "_deduplicate",
            "location": 175,
            "return": [
                "Optional[Union[str, Any]]",
                "str",
                "list",
                "List[List[Any]]",
                "Optional[Union[str, Any, Any, Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "Optional[int]",
                    "List[Union[\"PipeChain\", str]]",
                    "dict",
                    "List[Dict]"
                ]
            }
        },
        "Paginator._update_next_page_params": {
            "name": "_update_next_page_params",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "page_results": [
                    "List[int]",
                    "str",
                    "Optional[str]",
                    "int",
                    "db.models.Name"
                ]
            }
        },
        "Paginator._estimate": {
            "name": "_estimate",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Paginator.__str__": {
            "name": "__str__",
            "location": 209,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IDPaginator.__init__": {
            "name": "__init__",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "IDPaginator._next_page": {
            "name": "_next_page",
            "location": 227,
            "return": [
                "bool",
                "str",
                "core_lib.core.models.Event",
                "float",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutocompletePaginator.__init__": {
            "name": "__init__",
            "location": 255,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AutocompletePaginator.all": {
            "name": "all",
            "location": 260,
            "return": [
                "List[List[int]]",
                "Tuple[List, List]",
                "list",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutocompletePaginator._update_next_page_params": {
            "name": "_update_next_page_params",
            "location": 264,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "page_results": [
                    "int",
                    "List[Tuple[int, int]]",
                    "bytes",
                    "bool",
                    "Tuple[int]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "JsonPaginator.__init__": {
            "name": "__init__",
            "location": 280,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request_function": [
                    "Tuple[List[str], Optional[Any]]",
                    "Optional[str]",
                    "Optional[Union[Any, Any]]",
                    "Optional[float]",
                    "Optional[Dict]",
                    "Dict[str, Any]",
                    "Optional[IO[bytes]]"
                ]
            }
        },
        "JsonPaginator.__iter__": {
            "name": "__iter__",
            "location": 288,
            "return": [
                "typing.Iterator[pyinaturalist.constants.ResponseResult]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonPaginator.all": {
            "name": "all",
            "location": 294,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonPaginator._deduplicate": {
            "name": "_deduplicate",
            "location": 301,
            "return": [
                "Optional[Union[str, Any]]",
                "str",
                "list",
                "List[List[Any]]",
                "Optional[Union[str, Any, Any, Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "results": [
                    "int",
                    "Optional[int]",
                    "bool",
                    "Iterable[\"Entity\"]",
                    "Iterable[Any]"
                ]
            }
        },
        "WrapperPaginator.__init__": {
            "name": "__init__",
            "location": 311,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "results": [
                    "int",
                    "List[List[int]]",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "WrapperPaginator.count": {
            "name": "count",
            "location": 316,
            "return": [
                "List[int]",
                "Dict[str, int]",
                "List[dict]",
                "magic.models.Deck"
            ],
            "arguments": {
                "self": []
            }
        },
        "WrapperPaginator.next_page": {
            "name": "next_page",
            "location": 319,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/request_params.py": {
        "preprocess_request_body": {
            "name": "preprocess_request_body",
            "location": 62,
            "return": [
                "Optional[str]",
                "dict",
                "str",
                "int",
                "Dict[str, Any]",
                "Optional[bool]",
                "bool"
            ],
            "arguments": {
                "body": [
                    "str",
                    "BaseException"
                ]
            }
        },
        "preprocess_request_params": {
            "name": "preprocess_request_params",
            "location": 74,
            "return": [
                "Dict[str, Any]",
                "dict",
                "List[Dict]",
                "bool"
            ],
            "arguments": {
                "params": [
                    "str",
                    "bytes",
                    "Dict[str, str]"
                ],
                "convert_lists": [
                    "bool",
                    "str",
                    "List[Dict]"
                ]
            }
        },
        "convert_bool_params": {
            "name": "convert_bool_params",
            "location": 92,
            "return": [
                "bytes",
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "params": [
                    "Dict[str, Any]",
                    "list",
                    "Union[Dict, Tuple]",
                    "dict",
                    "int"
                ]
            }
        },
        "convert_url_ids": {
            "name": "convert_url_ids",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "str",
                    "int"
                ],
                "ids": [
                    "int",
                    "str",
                    "bool",
                    "Optional[bool]",
                    "List[str]"
                ],
                "allow_str_ids": [
                    "int",
                    "str",
                    "bool",
                    "Optional[bool]",
                    "List[str]"
                ]
            }
        },
        "convert_datetime_params": {
            "name": "convert_datetime_params",
            "location": 108,
            "return": [
                "int",
                "str",
                "tuple"
            ],
            "arguments": {
                "params": [
                    "dict",
                    "Dict[str, float]",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "Type",
                    "Mapping"
                ]
            }
        },
        "convert_list_params": {
            "name": "convert_list_params",
            "location": 123,
            "return": [
                "\"Task\"",
                "bool",
                "int",
                "Optional[Set[str]]",
                "Dict[int, int]",
                "Type"
            ],
            "arguments": {
                "params": [
                    "Dict[str, Set[str]]",
                    "Iterable",
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "convert_observation_params": {
            "name": "convert_observation_params",
            "location": 130,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "params": [
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "convert_observation_field_params": {
            "name": "convert_observation_field_params",
            "location": 152,
            "return": [
                "float",
                "datetime.datetime",
                "int",
                "set"
            ],
            "arguments": {
                "params": [
                    "Dict[str, Any]"
                ]
            }
        },
        "convert_pagination_params": {
            "name": "convert_pagination_params",
            "location": 164,
            "return": [
                "str",
                "List[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "params": [
                    "bool",
                    "str",
                    "Optional[Dict]"
                ]
            }
        },
        "convert_rank_range": {
            "name": "convert_rank_range",
            "location": 174,
            "return": [
                "str",
                "int",
                "bytes",
                "List[str]"
            ],
            "arguments": {
                "params": [
                    "int",
                    "Optional[int]",
                    "Union[int, float]",
                    "str"
                ]
            }
        },
        "get_interval_ranges": {
            "name": "get_interval_ranges",
            "location": 191,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "set",
                "Dict[str, Any]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "start": [
                    "int",
                    "Tuple[int, int]"
                ],
                "end": [
                    "Optional[int]",
                    "str",
                    "Optional[str]"
                ],
                "interval": [
                    "int",
                    "Tuple[int, int]",
                    "Sequence[int]"
                ]
            }
        },
        "get_valid_kwargs": {
            "name": "get_valid_kwargs",
            "location": 219,
            "return": [
                "str",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "func": [
                    "list",
                    "str",
                    "deque",
                    "Set[str]",
                    "bool",
                    "OrderedDict"
                ],
                "kwargs": []
            }
        },
        "split_common_params": {
            "name": "split_common_params",
            "location": 225,
            "return": [
                "dict",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "params": [
                    "float",
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "validate_ids": {
            "name": "validate_ids",
            "location": 231,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "ids": [
                    "str",
                    "Sequence[int]",
                    "List[str]"
                ]
            }
        },
        "validate_multiple_choice_params": {
            "name": "validate_multiple_choice_params",
            "location": 244,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "params": [
                    "str",
                    "tuple",
                    "Optional[str]"
                ]
            }
        },
        "validate_multiple_choice_param": {
            "name": "validate_multiple_choice_param",
            "location": 270,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "params": [
                    "bytes",
                    "Optional[str]",
                    "str",
                    "IO[bytes]"
                ],
                "key": [
                    "bytes",
                    "Optional[str]",
                    "str",
                    "IO[bytes]"
                ],
                "choices": [
                    "bytes",
                    "Optional[str]",
                    "str",
                    "IO[bytes]"
                ]
            }
        },
        "_validate_multiple_choice_param": {
            "name": "_validate_multiple_choice_param",
            "location": 289,
            "return": [
                "str"
            ],
            "arguments": {
                "params": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Container[str]"
                ],
                "key": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Container[str]"
                ],
                "choices": [
                    "str",
                    "Optional[str]",
                    "Optional[Union[Any, str]]"
                ]
            }
        },
        "convert_rank_range._get_rank_index": {
            "name": "_get_rank_index",
            "location": 177,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "rank": [
                    "str",
                    "int"
                ]
            }
        },
        "_validate_multiple_choice_param.is_valid": {
            "name": "is_valid",
            "location": 299,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "Sequence[Tuple[str, str]]",
                    "List[str]",
                    "list",
                    "dict",
                    "Sequence[Tuple[float, Any]]"
                ],
                "choices": [
                    "float",
                    "int",
                    "str",
                    "T",
                    "List[float]"
                ]
            }
        },
        "_validate_multiple_choice_param.normalize": {
            "name": "normalize",
            "location": 306,
            "return": [
                "List[str]",
                "str",
                "int",
                "Optional[List[str]]",
                "Set[int]",
                "Set[str]"
            ],
            "arguments": {
                "value": [
                    "T",
                    "bytes",
                    "bool",
                    "float",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/rest_api.py": {
        "get_all_observation_fields": {
            "name": "get_all_observation_fields",
            "location": 16,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "bool",
                "List[str]",
                "tracim.models.auth.User"
            ],
            "arguments": {}
        },
        "add_photo_to_observation": {
            "name": "add_photo_to_observation",
            "location": 23,
            "return": [
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {}
        }
    },
    "pyinaturalist-main/pyinaturalist/session.py": {
        "delete": {
            "name": "delete",
            "location": 335,
            "return": [
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "session": [
                    "str",
                    "recidiviz.persistence.database.session.Session",
                    "grouper.models.base.session.Session",
                    "mwapi.Session"
                ]
            }
        },
        "get": {
            "name": "get",
            "location": 341,
            "return": [
                "Dict[str, Dict[str, Any]]",
                "Dict[str, Any]",
                "bool",
                "int",
                "Collection[Any]",
                "str",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Optional[str]"
                ],
                "session": [
                    "libkol.Session",
                    "dict",
                    "str"
                ]
            }
        },
        "post": {
            "name": "post",
            "location": 347,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Optional[Dict[str, Any]]",
                "Dict[str, int]",
                "Dict[str, Dict[str, Any]]",
                "Dict[str, Optional[Any]]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Optional[str]"
                ],
                "session": [
                    "str",
                    "dict",
                    "responses.Response"
                ]
            }
        },
        "put": {
            "name": "put",
            "location": 353,
            "return": [
                "dict",
                "int",
                "str",
                "Exception",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "session": [
                    "libkol.Session",
                    "dict",
                    "mwapi.Session",
                    "str",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "clear_cache": {
            "name": "clear_cache",
            "location": 359,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "env_to_bool": {
            "name": "env_to_bool",
            "location": 364,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "environment_variable": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "get_local_session": {
            "name": "get_local_session",
            "location": 372,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "get_refresh_params": {
            "name": "get_refresh_params",
            "location": 386,
            "return": [
                "bool"
            ],
            "arguments": {
                "endpoint": [
                    "str",
                    "bool"
                ]
            }
        },
        "is_dry_run_enabled": {
            "name": "is_dry_run_enabled",
            "location": 409,
            "return": [
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {
                "method": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[int]"
                ]
            }
        },
        "ClientSession.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "expire_after": [
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "cache_file": [
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "per_second": [
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "per_minute": [
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "per_day": [
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "burst": [
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "bucket_class": [
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "backoff_factor": [
                    "int",
                    "Optional[int]",
                    "str",
                    "bool"
                ],
                "max_retries": [
                    "int",
                    "str",
                    "bool"
                ],
                "timeout": [
                    "bool",
                    "float",
                    "Optional[bool]",
                    "int",
                    "str"
                ],
                "user_agent": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "ClientSession.prepare_inat_request": {
            "name": "prepare_inat_request",
            "location": 150,
            "return": [
                "dict",
                "Tuple[Dict, int]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "bytes",
                    "Optional[str]"
                ],
                "url": [
                    "str",
                    "int",
                    "arxiv.users.domain.Session",
                    "Optional[Dict[str, str]]"
                ],
                "access_token": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "float"
                ],
                "files": [
                    "str",
                    "Optional[dict]",
                    "Dict[str, Any]",
                    "Dict[str, object]",
                    "dict"
                ],
                "headers": [
                    "str",
                    "Dict[str, Any]",
                    "Callable[..., requests.Response]",
                    "Optional[str]",
                    "requests.Session"
                ],
                "ids": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[Exception]"
                ],
                "json": [
                    "str",
                    "Optional[int]",
                    "dict",
                    "Dict[str, object]",
                    "Optional[dict]"
                ],
                "params": [
                    "str",
                    "Dict[str, object]",
                    "Optional[dict]",
                    "Optional[int]",
                    "dict"
                ],
                "allow_str_ids": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[Exception]"
                ]
            }
        },
        "ClientSession.request": {
            "name": "request",
            "location": 190,
            "return": [
                "str",
                "bool",
                "purplship.core.utils.Element",
                "dict"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Dict[str, Any]"
                ],
                "url": [
                    "str",
                    "Dict[str, Any]"
                ],
                "headers": [
                    "str",
                    "Dict[str, Any]"
                ],
                "json": [
                    "str",
                    "Dict[str, Any]"
                ],
                "access_token": [
                    "str",
                    "Dict[str, Any]"
                ],
                "allow_redirects": [
                    "str",
                    "tuple"
                ],
                "allow_str_ids": [
                    "str",
                    "Dict[str, Any]"
                ],
                "dry_run": [
                    "str"
                ],
                "expire_after": [
                    "str",
                    "tuple"
                ],
                "files": [
                    "str",
                    "Dict[str, Any]"
                ],
                "ids": [
                    "str",
                    "Dict[str, Any]"
                ],
                "raise_for_status": [
                    "str",
                    "int",
                    "bool"
                ],
                "refresh": [
                    "str",
                    "tuple"
                ],
                "stream": [
                    "str",
                    "tuple"
                ],
                "timeout": [
                    "str",
                    "tuple"
                ],
                "verify": [
                    "str",
                    "tuple"
                ]
            }
        },
        "ClientSession.send": {
            "name": "send",
            "location": 264,
            "return": [
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "apistar.http.Request",
                    "fastapi.Request",
                    "starlette.requests.Request",
                    "aiohttp.web.Request"
                ],
                "expire_after": [
                    "apistar.http.Request",
                    "fastapi.Request",
                    "starlette.requests.Request",
                    "aiohttp.web.Request"
                ],
                "refresh": [
                    "aiohttp.web.Response",
                    "bytes",
                    "sqlalchemy.orm.Session",
                    "int"
                ],
                "retries": [
                    "int",
                    "Optional[Sequence[Any]]"
                ],
                "timeout": [
                    "starlette.requests.Request",
                    "fastapi.Request"
                ]
            }
        },
        "ClientSession._validate_json": {
            "name": "_validate_json",
            "location": 302,
            "return": [
                "werkzeug.Response",
                "str",
                "Optional[str]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Response",
                    "requests.Response",
                    "response.Response",
                    "requests.PreparedRequest",
                    "starlette.requests.Request"
                ],
                "response": [
                    "requests.Response",
                    "aiohttp.web.Response",
                    "Dict[str, Any]",
                    "dict",
                    "flask.Response"
                ],
                "retries": [
                    "aiohttp.web.Request",
                    "starlette.requests.Request",
                    "morepath.Request"
                ]
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/__init__.py": {},
    "pyinaturalist-main/pyinaturalist/controllers/base_controller.py": {
        "BaseController.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "float"
                ]
            }
        },
        "BaseController.from_ids": {
            "name": "from_ids",
            "location": 21,
            "return": [
                "pyinaturalist.paginator.Paginator"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/controllers/observations_controller.py": {
        "ObservationController.__call__": {
            "name": "__call__",
            "location": 41,
            "return": [
                "str",
                "Iterable[str]",
                "OrderedDict",
                "list",
                "dict"
            ],
            "arguments": {
                "self": [],
                "observation_id": [
                    "str",
                    "int",
                    "Dict[int, int]"
                ]
            }
        },
        "ObservationController.from_ids": {
            "name": "from_ids",
            "location": 45,
            "return": [
                "Callable[[], str]",
                "int",
                "Mapping[str, Any]",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObservationController.search": {
            "name": "search",
            "location": 54,
            "return": [
                "str",
                "bool",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObservationController.histogram": {
            "name": "histogram",
            "location": 64,
            "return": [
                "bool",
                "Dict[int, dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObservationController.identifiers": {
            "name": "identifiers",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObservationController.life_list": {
            "name": "life_list",
            "location": 73,
            "return": [
                "bool",
                "Optional[Any]",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "transfer.models.OrderID",
                    "int"
                ]
            }
        },
        "ObservationController.observers": {
            "name": "observers",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObservationController.popular_fields": {
            "name": "popular_fields",
            "location": 83,
            "return": [
                "str",
                "Dict[str, str]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObservationController.species_counts": {
            "name": "species_counts",
            "location": 88,
            "return": [
                "List[Dict[str, Any]]",
                "List[str]",
                "Optional[str]",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObservationController.taxon_summary": {
            "name": "taxon_summary",
            "location": 93,
            "return": [
                "List[Dict[str, Any]]",
                "List[str]",
                "Optional[str]",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "observation_id": [
                    "int",
                    "str",
                    "Union[str, int]",
                    "Optional[str]"
                ]
            }
        },
        "ObservationController.create": {
            "name": "create",
            "location": 101,
            "return": [
                "bool",
                "asgard.models.job.ScheduledJob",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObservationController.delete": {
            "name": "delete",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ObservationController.update": {
            "name": "update",
            "location": 120,
            "return": [
                "bool",
                "asgard.models.job.ScheduledJob",
                "Dict[str, Any]",
                "int",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObservationController.upload": {
            "name": "upload",
            "location": 126,
            "return": [
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/controllers/place_controller.py": {
        "PlaceController.__call__": {
            "name": "__call__",
            "location": 14,
            "return": [
                "str",
                "Iterable[str]",
                "OrderedDict",
                "list",
                "dict"
            ],
            "arguments": {
                "self": [],
                "place_id": [
                    "str",
                    "int",
                    "Dict[int, int]"
                ]
            }
        },
        "PlaceController.from_ids": {
            "name": "from_ids",
            "location": 18,
            "return": [
                "Callable[[], str]",
                "int",
                "Mapping[str, Any]",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlaceController.autocomplete": {
            "name": "autocomplete",
            "location": 27,
            "return": [
                "purplship.core.models.RateRequest",
                "purplship.core.models.TrackingRequest",
                "purplship.core.models.ShipmentRequest"
            ],
            "arguments": {
                "self": [],
                "q": [
                    "zerver.models.Realm",
                    "int"
                ]
            }
        },
        "PlaceController.nearby": {
            "name": "nearby",
            "location": 38,
            "return": [
                "models.cf_recommend_models.ICfRecommendationModel"
            ],
            "arguments": {
                "self": [],
                "nelat": [
                    "str",
                    "bool",
                    "int"
                ],
                "nelng": [
                    "str",
                    "bool",
                    "int"
                ],
                "swlat": [
                    "str",
                    "bool",
                    "int"
                ],
                "swlng": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/controllers/project_controller.py": {
        "ProjectController.__call__": {
            "name": "__call__",
            "location": 21,
            "return": [
                "str",
                "dict",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str",
                    "Iterable[str]",
                    "Iterable[int]"
                ]
            }
        },
        "ProjectController.from_ids": {
            "name": "from_ids",
            "location": 25,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectController.search": {
            "name": "search",
            "location": 34,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectController.add_observations": {
            "name": "add_observations",
            "location": 37,
            "return": [
                "bytes",
                "dict",
                "str",
                "Sequence",
                "Optional[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str",
                    "int"
                ]
            }
        },
        "ProjectController.update": {
            "name": "update",
            "location": 57,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str",
                    "Union[zerver.models.UserProfile, zilencer.models.RemoteZulipServer]",
                    "Set[int]",
                    "zerver.models.Realm",
                    "transfer.models.ShopID"
                ]
            }
        },
        "ProjectController.add_users": {
            "name": "add_users",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str",
                    "int",
                    "transfer.models.OrderID"
                ]
            }
        },
        "ProjectController.delete_users": {
            "name": "delete_users",
            "location": 67,
            "return": [
                "managers.models.Project",
                "str",
                "app.models.Game"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str",
                    "transfer.models.OrderID",
                    "int",
                    "transfer.models.ShopID"
                ]
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/controllers/taxon_controller.py": {
        "TaxonController.__call__": {
            "name": "__call__",
            "location": 15,
            "return": [
                "models.seat_group.SeatGroup",
                "ticketing.models.ticket_bundle.TicketBundle",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "taxon_id": [
                    "str",
                    "int",
                    "Dict[int, int]"
                ]
            }
        },
        "TaxonController.from_ids": {
            "name": "from_ids",
            "location": 19,
            "return": [
                "Callable[[], str]",
                "int",
                "Mapping[str, Any]",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaxonController.autocomplete": {
            "name": "autocomplete",
            "location": 35,
            "return": [
                "models.cf_recommend_models.ICfRecommendationModel"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaxonController.search": {
            "name": "search",
            "location": 39,
            "return": [
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/controllers/user_controller.py": {
        "UserController.__call__": {
            "name": "__call__",
            "location": 14,
            "return": [
                "dict",
                "models.seat_group.SeatGroup",
                "ticketing.models.ticket_bundle.TicketBundle",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "UserController.from_ids": {
            "name": "from_ids",
            "location": 18,
            "return": [
                "Optional[str]",
                "Dict[str, float]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserController.autocomplete": {
            "name": "autocomplete",
            "location": 36,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/controllers/__init__.py": {},
    "pyinaturalist-main/pyinaturalist/docs/docstrings.py": {
        "copy_annotations": {
            "name": "copy_annotations",
            "location": 89,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "target_function": [
                    "str",
                    "Sequence[str]",
                    "float",
                    "int",
                    "Dict[str, Any]",
                    "Callable"
                ],
                "template_functions": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Callable",
                    "Dict[str, List]"
                ],
                "include_return": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Callable",
                    "Dict[str, List]"
                ]
            }
        },
        "copy_docstrings": {
            "name": "copy_docstrings",
            "location": 106,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "target_function": [
                    "float",
                    "bool",
                    "list",
                    "int",
                    "Sequence[Any]"
                ],
                "template_functions": [
                    "Exception",
                    "str",
                    "Iterable[T]"
                ],
                "include_sections": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "dict",
                    "List[str]",
                    "str"
                ],
                "exclude_args": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "dict",
                    "List[str]",
                    "str"
                ]
            }
        },
        "ApiDocstring.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "docstring": [
                    "bytes",
                    "Union[str, IO]",
                    "str",
                    "IO[bytes]"
                ]
            }
        },
        "ApiDocstring.extend": {
            "name": "extend",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "docstring": [
                    "Callable[[T], List[T]]",
                    "str",
                    "Set[str]",
                    "Sequence[int]",
                    "bool"
                ],
                "include_sections": [
                    "int",
                    "dict",
                    "List[str]"
                ],
                "exclude_args": [
                    "List[str]",
                    "list",
                    "Dict[str, Any]"
                ]
            }
        },
        "ApiDocstring._exclude_args": {
            "name": "_exclude_args",
            "location": 48,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "args_section": [
                    "str",
                    "int",
                    "Container[str]"
                ],
                "exclude_args": [
                    "bool",
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ]
            }
        },
        "ApiDocstring._indent": {
            "name": "_indent",
            "location": 59,
            "return": [
                "str",
                "Dict[str, Any]",
                "Union[tuple, list]"
            ],
            "arguments": {
                "value": [
                    "str"
                ],
                "level": [
                    "float",
                    "int",
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "ApiDocstring._split_sections": {
            "name": "_split_sections",
            "location": 64,
            "return": [
                "int",
                "Dict[str, Any]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "docstring": [
                    "Callable[[T], bool]",
                    "str",
                    "List[Tuple]",
                    "bool"
                ]
            }
        },
        "ApiDocstring.__str__": {
            "name": "__str__",
            "location": 80,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiDocstring._exclude_args.is_excluded": {
            "name": "is_excluded",
            "location": 52,
            "return": [
                "bool",
                "Optional[Callable[[bool], None]]",
                "dict"
            ],
            "arguments": {
                "line": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/docs/emoji.py": {},
    "pyinaturalist-main/pyinaturalist/docs/model_docs.py": {
        "document_models": {
            "name": "document_models",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "dict",
                    "sphinx.application.Sphinx",
                    "cmk.base.config.HostConfig"
                ]
            }
        },
        "get_model_classes": {
            "name": "get_model_classes",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_model_doc": {
            "name": "get_model_doc",
            "location": 41,
            "return": [
                "str",
                "int",
                "List[int]"
            ],
            "arguments": {
                "cls": [
                    "Config",
                    "Type['BaseConfig']",
                    "dict",
                    "str",
                    "_vendor.traitlets.config.Config"
                ],
                "config": [
                    "Config",
                    "Type['BaseConfig']",
                    "dict",
                    "str",
                    "_vendor.traitlets.config.Config"
                ]
            }
        },
        "get_properties": {
            "name": "get_properties",
            "location": 65,
            "return": [
                "List[str]",
                "str",
                "Iterator[Tuple[str, Any, Any]]",
                "List[List[str]]",
                "List[int]",
                "list"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "list",
                    "str",
                    "Optional[Container[str]]"
                ]
            }
        },
        "_get_field_doc": {
            "name": "_get_field_doc",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "field": [
                    "Config",
                    "dict",
                    "Dict[str, Any]"
                ],
                "config": [
                    "dict",
                    "bool",
                    "Tuple[Type]"
                ]
            }
        },
        "_get_property_doc": {
            "name": "_get_property_doc",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "prop": [
                    "Config",
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ],
                "config": [
                    "cmk.base.config.HostConfig",
                    "cmk.base.config.ConfigCache",
                    "_pytesconfig.Config",
                    "core.common.Config",
                    "str"
                ]
            }
        },
        "_get_lazy_property_doc": {
            "name": "_get_lazy_property_doc",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {
                "prop": [
                    "bool",
                    "Dict[str, Any]",
                    "config.Config",
                    "app.config.MQConfig",
                    "Mapping"
                ],
                "config": [
                    "dict",
                    "bool",
                    "app.config.MQConfig",
                    "backup.config.Config",
                    "str",
                    "entity_embeddings.Config",
                    "cmk.base.config.HostConfig"
                ]
            }
        },
        "export_model_doc": {
            "name": "export_model_doc",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "model_name": [
                    "str"
                ],
                "doc_table": [
                    "str",
                    "Union[int, str]",
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/docs/signatures.py": {
        "copy_doc_signature": {
            "name": "copy_doc_signature",
            "location": 20,
            "return": [
                "bool",
                "str",
                "float"
            ],
            "arguments": {}
        },
        "document_common_args": {
            "name": "document_common_args",
            "location": 90,
            "return": [
                "Dict[str, Dict[str, int]]",
                "str",
                "list"
            ],
            "arguments": {
                "func": [
                    "str",
                    "Optional[Dict[str, object]]",
                    "Optional[Tuple[object, ...]]"
                ]
            }
        },
        "extend_init_signature": {
            "name": "extend_init_signature",
            "location": 98,
            "return": [
                "str",
                "int",
                "List[List[str]]",
                "tuple"
            ],
            "arguments": {}
        },
        "copy_signatures": {
            "name": "copy_signatures",
            "location": 117,
            "return": [
                "Optional[int]",
                "Dict[str, int]",
                "List[str]"
            ],
            "arguments": {
                "target_function": [
                    "str",
                    "Union[int, str]"
                ],
                "template_functions": [
                    "bool",
                    "int",
                    "Union[Type[Exception], Tuple[Any, ...]]",
                    "Callable"
                ],
                "exclude_args": [
                    "List[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "deduplicate_var_kwargs": {
            "name": "deduplicate_var_kwargs",
            "location": 152,
            "return": [
                "Callable[[T], bool]",
                "Iterable[T]"
            ],
            "arguments": {
                "params": [
                    "set",
                    "Dict[Hashable, Any]",
                    "dict",
                    "bool",
                    "Dict[str, float]"
                ]
            }
        },
        "_dry_run": {
            "name": "_dry_run",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "dry_run": [
                    "bool"
                ]
            }
        },
        "_session": {
            "name": "_session",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "Optional[int]",
                    "sqlalchemy.orm.session.Session",
                    "dict"
                ]
            }
        },
        "copy_doc_signature.wrapper": {
            "name": "wrapper",
            "location": 67,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "extend_init_signature.wrapper": {
            "name": "wrapper",
            "location": 103,
            "return": [
                "str",
                "int",
                "Exception",
                "Tuple[str, str]"
            ],
            "arguments": {
                "target_class": [
                    "str",
                    "Exception",
                    "ClassVar",
                    "Tuple[str, str, List[str]]"
                ]
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/docs/templates.py": {
        "_identification_params": {
            "name": "_identification_params",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "current_taxon": [
                    "bool",
                    "str"
                ],
                "own_observation": [
                    "bool",
                    "str"
                ],
                "is_change": [
                    "bool",
                    "str"
                ],
                "taxon_active": [
                    "bool",
                    "str"
                ],
                "observation_taxon_active": [
                    "bool",
                    "str"
                ],
                "id": [
                    "bool",
                    "str"
                ],
                "rank": [
                    "bool",
                    "str"
                ],
                "observation_rank": [
                    "bool",
                    "str"
                ],
                "user_id": [
                    "bool",
                    "str"
                ],
                "user_login": [
                    "bool",
                    "str"
                ],
                "current": [
                    "bool",
                    "str"
                ],
                "category": [
                    "bool",
                    "str"
                ],
                "place_id": [
                    "bool",
                    "str"
                ],
                "quality_grade": [
                    "bool",
                    "str"
                ],
                "taxon_id": [
                    "bool",
                    "str"
                ],
                "observation_taxon_id": [
                    "bool",
                    "str"
                ],
                "iconic_taxon_id": [
                    "bool",
                    "str"
                ],
                "observation_iconic_taxon_id": [
                    "bool",
                    "str"
                ],
                "lrank": [
                    "bool",
                    "str"
                ],
                "hrank": [
                    "bool",
                    "str"
                ],
                "observation_lrank": [
                    "bool",
                    "str"
                ],
                "observation_hrank": [
                    "bool",
                    "str"
                ],
                "without_taxon_id": [
                    "bool",
                    "str"
                ],
                "without_observation_taxon_id": [
                    "bool",
                    "str"
                ],
                "d1": [
                    "bool",
                    "str"
                ],
                "d2": [
                    "bool",
                    "str"
                ],
                "observation_created_d1": [
                    "bool",
                    "str"
                ],
                "observation_created_d2": [
                    "bool",
                    "str"
                ],
                "observed_d1": [
                    "bool",
                    "str"
                ],
                "observed_d2": [
                    "bool",
                    "str"
                ],
                "id_above": [
                    "bool",
                    "str"
                ],
                "id_below": [
                    "bool",
                    "str"
                ]
            }
        },
        "_message_params": {
            "name": "_message_params",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "page": [
                    "str",
                    "bool",
                    "List[int]",
                    "int"
                ],
                "box": [
                    "str",
                    "bool",
                    "List[int]",
                    "int"
                ],
                "q": [
                    "str",
                    "bool",
                    "List[int]",
                    "int"
                ],
                "user_id": [
                    "str",
                    "bool",
                    "List[int]",
                    "int"
                ],
                "threads": [
                    "str",
                    "bool",
                    "List[int]",
                    "int"
                ]
            }
        },
        "_message_id": {
            "name": "_message_id",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "message_id": [
                    "str",
                    "bool"
                ]
            }
        },
        "_observation_common": {
            "name": "_observation_common",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "q": [
                    "List[int]",
                    "int",
                    "List[bytes]",
                    "str",
                    "List[str]"
                ],
                "d1": [
                    "List[int]",
                    "int",
                    "List[bytes]",
                    "str",
                    "List[str]"
                ],
                "d2": [
                    "List[int]",
                    "int",
                    "List[bytes]",
                    "str",
                    "List[str]"
                ],
                "day": [
                    "List[int]",
                    "int",
                    "List[bytes]",
                    "str",
                    "List[str]"
                ],
                "month": [
                    "List[int]",
                    "int",
                    "List[bytes]",
                    "str",
                    "List[str]"
                ],
                "year": [
                    "List[int]",
                    "int",
                    "List[bytes]",
                    "str",
                    "List[str]"
                ],
                "license": [
                    "List[int]",
                    "int",
                    "List[bytes]",
                    "str",
                    "List[str]"
                ],
                "list_id": [
                    "List[int]",
                    "int",
                    "List[bytes]",
                    "str",
                    "List[str]"
                ],
                "photo_license": [
                    "List[int]",
                    "int",
                    "List[bytes]",
                    "str",
                    "List[str]"
                ],
                "out_of_range": [
                    "List[int]",
                    "int",
                    "List[bytes]",
                    "str",
                    "List[str]"
                ],
                "quality_grade": [
                    "List[int]",
                    "int",
                    "List[bytes]",
                    "str",
                    "List[str]"
                ],
                "id": [
                    "List[int]",
                    "int",
                    "List[bytes]",
                    "str",
                    "List[str]"
                ],
                "taxon_id": [
                    "List[int]",
                    "int",
                    "List[bytes]",
                    "str",
                    "List[str]"
                ],
                "taxon_name": [
                    "List[int]",
                    "int",
                    "List[bytes]",
                    "str",
                    "List[str]"
                ],
                "iconic_taxa": [
                    "List[int]",
                    "int",
                    "List[bytes]",
                    "str",
                    "List[str]"
                ],
                "updated_since": [
                    "List[int]",
                    "int",
                    "List[bytes]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "_observation_v1": {
            "name": "_observation_v1",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "acc": [
                    "bool",
                    "int"
                ],
                "captive": [
                    "bool",
                    "int"
                ],
                "endemic": [
                    "bool",
                    "int"
                ],
                "geo": [
                    "bool",
                    "int"
                ],
                "id_please": [
                    "bool",
                    "int"
                ],
                "identified": [
                    "bool",
                    "int"
                ],
                "introduced": [
                    "bool",
                    "int"
                ],
                "mappable": [
                    "bool",
                    "int"
                ],
                "native": [
                    "bool",
                    "int"
                ],
                "pcid": [
                    "bool",
                    "int"
                ],
                "photos": [
                    "bool",
                    "int"
                ],
                "popular": [
                    "bool",
                    "int"
                ],
                "sounds": [
                    "bool",
                    "int"
                ],
                "taxon_is_active": [
                    "bool",
                    "int"
                ],
                "threatened": [
                    "bool",
                    "int"
                ],
                "verifiable": [
                    "bool",
                    "int"
                ],
                "not_id": [
                    "bool",
                    "int"
                ],
                "sound_license": [
                    "bool",
                    "int"
                ],
                "ofv_datatype": [
                    "bool",
                    "int"
                ],
                "place_id": [
                    "bool",
                    "int"
                ],
                "project_id": [
                    "bool",
                    "int"
                ],
                "rank": [
                    "bool",
                    "int"
                ],
                "site_id": [
                    "bool",
                    "int"
                ],
                "without_taxon_id": [
                    "bool",
                    "int"
                ],
                "user_id": [
                    "bool",
                    "int"
                ],
                "user_login": [
                    "bool",
                    "int"
                ],
                "ident_user_id": [
                    "bool",
                    "int"
                ],
                "term_id": [
                    "bool",
                    "int"
                ],
                "term_value_id": [
                    "bool",
                    "int"
                ],
                "without_term_value_id": [
                    "bool",
                    "int"
                ],
                "acc_above": [
                    "bool",
                    "int"
                ],
                "acc_below": [
                    "bool",
                    "int"
                ],
                "acc_below_or_unknown": [
                    "bool",
                    "int"
                ],
                "created_d1": [
                    "bool",
                    "int"
                ],
                "created_d2": [
                    "bool",
                    "int"
                ],
                "created_on": [
                    "bool",
                    "int"
                ],
                "observed_on": [
                    "bool",
                    "int"
                ],
                "unobserved_by_user_id": [
                    "bool",
                    "int"
                ],
                "apply_project_rules_for": [
                    "bool",
                    "int"
                ],
                "cs": [
                    "bool",
                    "int"
                ],
                "csa": [
                    "bool",
                    "int"
                ],
                "csi": [
                    "bool",
                    "int"
                ],
                "geoprivacy": [
                    "bool",
                    "int"
                ],
                "taxon_geoprivacy": [
                    "bool",
                    "int"
                ],
                "max_rank": [
                    "bool",
                    "int"
                ],
                "min_rank": [
                    "bool",
                    "int"
                ],
                "hrank": [
                    "bool",
                    "int"
                ],
                "lrank": [
                    "bool",
                    "int"
                ],
                "id_above": [
                    "bool",
                    "int"
                ],
                "id_below": [
                    "bool",
                    "int"
                ],
                "identifications": [
                    "bool",
                    "int"
                ],
                "lat": [
                    "bool",
                    "int"
                ],
                "lng": [
                    "bool",
                    "int"
                ],
                "radius": [
                    "bool",
                    "int"
                ],
                "not_in_project": [
                    "bool",
                    "int"
                ],
                "not_matching_project_rules_for": [
                    "bool",
                    "int"
                ],
                "search_on": [
                    "bool",
                    "int"
                ],
                "viewer_id": [
                    "bool",
                    "int"
                ],
                "reviewed": [
                    "bool",
                    "int"
                ],
                "locale": [
                    "bool",
                    "int"
                ],
                "preferred_place_id": [
                    "bool",
                    "int"
                ],
                "ttl": [
                    "bool",
                    "int"
                ]
            }
        },
        "_observation_v0": {
            "name": "_observation_v0",
            "location": 314,
            "return": [
                ""
            ],
            "arguments": {
                "has": [
                    "bool",
                    "BinaryIO",
                    "Optional[int]",
                    "int",
                    "Optional[bytes]"
                ],
                "on": [
                    "bool",
                    "BinaryIO",
                    "Optional[int]",
                    "int",
                    "Optional[bytes]"
                ],
                "m1": [
                    "bool",
                    "BinaryIO",
                    "Optional[int]",
                    "int",
                    "Optional[bytes]"
                ],
                "m2": [
                    "bool",
                    "BinaryIO",
                    "Optional[int]",
                    "int",
                    "Optional[bytes]"
                ],
                "h1": [
                    "bool",
                    "BinaryIO",
                    "Optional[int]",
                    "int",
                    "Optional[bytes]"
                ],
                "h2": [
                    "bool",
                    "BinaryIO",
                    "Optional[int]",
                    "int",
                    "Optional[bytes]"
                ],
                "extra": [
                    "bool",
                    "BinaryIO",
                    "Optional[int]",
                    "int",
                    "Optional[bytes]"
                ],
                "response_format": [
                    "bool",
                    "BinaryIO",
                    "Optional[int]",
                    "int",
                    "Optional[bytes]"
                ]
            }
        },
        "_observation_histogram": {
            "name": "_observation_histogram",
            "location": 341,
            "return": [
                ""
            ],
            "arguments": {
                "date_field": [
                    "bool",
                    "str",
                    "T"
                ],
                "interval": [
                    "bool",
                    "str",
                    "T"
                ]
            }
        },
        "_ofvs": {
            "name": "_ofvs",
            "location": 351,
            "return": [
                ""
            ],
            "arguments": {
                "observation_id": [
                    "str",
                    "int",
                    "Optional[bool]",
                    "bool"
                ],
                "observation_field_id": [
                    "str",
                    "int",
                    "Optional[bool]",
                    "bool"
                ],
                "value": [
                    "str",
                    "int",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "_create_observation": {
            "name": "_create_observation",
            "location": 359,
            "return": [
                ""
            ],
            "arguments": {
                "species_guess": [
                    "int",
                    "str",
                    "MutableMapping"
                ],
                "taxon_id": [
                    "int",
                    "str",
                    "MutableMapping"
                ],
                "observed_on": [
                    "int",
                    "str",
                    "MutableMapping"
                ],
                "observed_on_string": [
                    "int",
                    "str",
                    "MutableMapping"
                ],
                "time_zone": [
                    "int",
                    "str",
                    "MutableMapping"
                ],
                "description": [
                    "int",
                    "str",
                    "MutableMapping"
                ],
                "tag_list": [
                    "int",
                    "str",
                    "MutableMapping"
                ],
                "place_guess": [
                    "int",
                    "str",
                    "MutableMapping"
                ],
                "latitude": [
                    "int",
                    "str",
                    "MutableMapping"
                ],
                "longitude": [
                    "int",
                    "str",
                    "MutableMapping"
                ],
                "map_scale": [
                    "int",
                    "str",
                    "MutableMapping"
                ],
                "positional_accuracy": [
                    "int",
                    "str",
                    "MutableMapping"
                ],
                "geoprivacy": [
                    "int",
                    "str",
                    "MutableMapping"
                ],
                "observation_fields": [
                    "int",
                    "str",
                    "MutableMapping"
                ],
                "observation_field_values_attributes": [
                    "int",
                    "str",
                    "MutableMapping"
                ],
                "flickr_photos": [
                    "int",
                    "str",
                    "MutableMapping"
                ],
                "picasa_photos": [
                    "int",
                    "str",
                    "MutableMapping"
                ],
                "facebook_photos": [
                    "int",
                    "str",
                    "MutableMapping"
                ],
                "local_photos": [
                    "int",
                    "str",
                    "MutableMapping"
                ],
                "photos": [
                    "int",
                    "str",
                    "MutableMapping"
                ],
                "sounds": [
                    "int",
                    "str",
                    "MutableMapping"
                ],
                "photo_ids": [
                    "int",
                    "str",
                    "MutableMapping"
                ]
            }
        },
        "_update_observation": {
            "name": "_update_observation",
            "location": 414,
            "return": [
                ""
            ],
            "arguments": {
                "ignore_photos": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "_get_posts": {
            "name": "_get_posts",
            "location": 427,
            "return": [
                ""
            ],
            "arguments": {
                "login": [
                    "str",
                    "Type[Any]",
                    "List[str]",
                    "MutableSet[str]"
                ],
                "project_id": [
                    "str",
                    "Type[Any]",
                    "List[str]",
                    "MutableSet[str]"
                ],
                "page": [
                    "str",
                    "Type[Any]",
                    "List[str]",
                    "MutableSet[str]"
                ],
                "per_page": [
                    "str",
                    "Type[Any]",
                    "List[str]",
                    "MutableSet[str]"
                ]
            }
        },
        "_projects_params": {
            "name": "_projects_params",
            "location": 441,
            "return": [
                ""
            ],
            "arguments": {
                "q": [
                    "bool",
                    "int",
                    "list",
                    "str",
                    "Optional[List[str]]",
                    "List[int]"
                ],
                "id": [
                    "bool",
                    "int",
                    "list",
                    "str",
                    "Optional[List[str]]",
                    "List[int]"
                ],
                "not_id": [
                    "bool",
                    "int",
                    "list",
                    "str",
                    "Optional[List[str]]",
                    "List[int]"
                ],
                "lat": [
                    "bool",
                    "int",
                    "list",
                    "str",
                    "Optional[List[str]]",
                    "List[int]"
                ],
                "lng": [
                    "bool",
                    "int",
                    "list",
                    "str",
                    "Optional[List[str]]",
                    "List[int]"
                ],
                "radius": [
                    "bool",
                    "int",
                    "list",
                    "str",
                    "Optional[List[str]]",
                    "List[int]"
                ],
                "featured": [
                    "bool",
                    "int",
                    "list",
                    "str",
                    "Optional[List[str]]",
                    "List[int]"
                ],
                "noteworthy": [
                    "bool",
                    "int",
                    "list",
                    "str",
                    "Optional[List[str]]",
                    "List[int]"
                ],
                "place_id": [
                    "bool",
                    "int",
                    "list",
                    "str",
                    "Optional[List[str]]",
                    "List[int]"
                ],
                "site_id": [
                    "bool",
                    "int",
                    "list",
                    "str",
                    "Optional[List[str]]",
                    "List[int]"
                ],
                "rule_details": [
                    "bool",
                    "int",
                    "list",
                    "str",
                    "Optional[List[str]]",
                    "List[int]"
                ],
                "type": [
                    "bool",
                    "int",
                    "list",
                    "str",
                    "Optional[List[str]]",
                    "List[int]"
                ],
                "member_id": [
                    "bool",
                    "int",
                    "list",
                    "str",
                    "Optional[List[str]]",
                    "List[int]"
                ],
                "has_params": [
                    "bool",
                    "int",
                    "list",
                    "str",
                    "Optional[List[str]]",
                    "List[int]"
                ],
                "has_posts": [
                    "bool",
                    "int",
                    "list",
                    "str",
                    "Optional[List[str]]",
                    "List[int]"
                ]
            }
        },
        "_project_observation_params": {
            "name": "_project_observation_params",
            "location": 482,
            "return": [
                ""
            ],
            "arguments": {
                "access_token": [
                    "str",
                    "bool"
                ],
                "project_id": [
                    "str",
                    "bool"
                ],
                "observation_id": [
                    "str",
                    "bool"
                ]
            }
        },
        "_project_update_params": {
            "name": "_project_update_params",
            "location": 490,
            "return": [
                ""
            ],
            "arguments": {
                "project_id": [
                    "bool",
                    "List[str]",
                    "str",
                    "int"
                ],
                "cover": [
                    "bool",
                    "List[str]",
                    "str",
                    "int"
                ],
                "description": [
                    "bool",
                    "List[str]",
                    "str",
                    "int"
                ],
                "icon": [
                    "bool",
                    "List[str]",
                    "str",
                    "int"
                ],
                "preferred_banner_color": [
                    "bool",
                    "List[str]",
                    "str",
                    "int"
                ],
                "prefers_banner_contain": [
                    "bool",
                    "List[str]",
                    "str",
                    "int"
                ],
                "prefers_hide_title": [
                    "bool",
                    "List[str]",
                    "str",
                    "int"
                ],
                "prefers_hide_umbrella_map_flags": [
                    "bool",
                    "List[str]",
                    "str",
                    "int"
                ],
                "prefers_rule_d1": [
                    "bool",
                    "List[str]",
                    "str",
                    "int"
                ],
                "prefers_rule_d2": [
                    "bool",
                    "List[str]",
                    "str",
                    "int"
                ],
                "prefers_rule_introduced": [
                    "bool",
                    "List[str]",
                    "str",
                    "int"
                ],
                "prefers_rule_members_only": [
                    "bool",
                    "List[str]",
                    "str",
                    "int"
                ],
                "prefers_rule_month": [
                    "bool",
                    "List[str]",
                    "str",
                    "int"
                ],
                "prefers_rule_native": [
                    "bool",
                    "List[str]",
                    "str",
                    "int"
                ],
                "prefers_rule_observed_on": [
                    "bool",
                    "List[str]",
                    "str",
                    "int"
                ],
                "prefers_rule_photos": [
                    "bool",
                    "List[str]",
                    "str",
                    "int"
                ],
                "prefers_rule_quality_grade": [
                    "bool",
                    "List[str]",
                    "str",
                    "int"
                ],
                "prefers_rule_sounds": [
                    "bool",
                    "List[str]",
                    "str",
                    "int"
                ],
                "prefers_rule_term_id": [
                    "bool",
                    "List[str]",
                    "str",
                    "int"
                ],
                "prefers_rule_term_value_id": [
                    "bool",
                    "List[str]",
                    "str",
                    "int"
                ],
                "prefers_user_trust": [
                    "bool",
                    "List[str]",
                    "str",
                    "int"
                ],
                "project_type": [
                    "bool",
                    "List[str]",
                    "str",
                    "int"
                ],
                "title": [
                    "bool",
                    "List[str]",
                    "str",
                    "int"
                ],
                "user_id": [
                    "bool",
                    "List[str]",
                    "str",
                    "int"
                ],
                "admin_attributes": [
                    "bool",
                    "List[str]",
                    "str",
                    "int"
                ],
                "project_observation_rules_attributes": [
                    "bool",
                    "List[str]",
                    "str",
                    "int"
                ]
            }
        },
        "_search_params": {
            "name": "_search_params",
            "location": 552,
            "return": [
                ""
            ],
            "arguments": {
                "q": [
                    "bool",
                    "List[dict]",
                    "Callable[[str], None]",
                    "Callable[..., None]"
                ],
                "sources": [
                    "bool",
                    "List[dict]",
                    "Callable[[str], None]",
                    "Callable[..., None]"
                ],
                "place_id": [
                    "bool",
                    "List[dict]",
                    "Callable[[str], None]",
                    "Callable[..., None]"
                ],
                "locale": [
                    "bool",
                    "List[dict]",
                    "Callable[[str], None]",
                    "Callable[..., None]"
                ],
                "preferred_place_id": [
                    "bool",
                    "List[dict]",
                    "Callable[[str], None]",
                    "Callable[..., None]"
                ]
            }
        },
        "_taxon_params": {
            "name": "_taxon_params",
            "location": 572,
            "return": [
                ""
            ],
            "arguments": {
                "q": [
                    "int",
                    "List[int]",
                    "bool",
                    "dict",
                    "float"
                ],
                "is_active": [
                    "int",
                    "List[int]",
                    "bool",
                    "dict",
                    "float"
                ],
                "taxon_id": [
                    "int",
                    "List[int]",
                    "bool",
                    "dict",
                    "float"
                ],
                "rank": [
                    "int",
                    "List[int]",
                    "bool",
                    "dict",
                    "float"
                ],
                "max_rank": [
                    "int",
                    "List[int]",
                    "bool",
                    "dict",
                    "float"
                ],
                "min_rank": [
                    "int",
                    "List[int]",
                    "bool",
                    "dict",
                    "float"
                ],
                "rank_level": [
                    "int",
                    "List[int]",
                    "bool",
                    "dict",
                    "float"
                ],
                "locale": [
                    "int",
                    "List[int]",
                    "bool",
                    "dict",
                    "float"
                ],
                "preferred_place_id": [
                    "int",
                    "List[int]",
                    "bool",
                    "dict",
                    "float"
                ],
                "all_names": [
                    "int",
                    "List[int]",
                    "bool",
                    "dict",
                    "float"
                ]
            }
        },
        "_taxon_id_params": {
            "name": "_taxon_id_params",
            "location": 599,
            "return": [
                ""
            ],
            "arguments": {
                "id_above": [
                    "str",
                    "int",
                    "float",
                    "List[Tuple[int, int]]"
                ],
                "id_below": [
                    "str",
                    "int",
                    "float",
                    "List[Tuple[int, int]]"
                ],
                "only_id": [
                    "str",
                    "int",
                    "float",
                    "List[Tuple[int, int]]"
                ],
                "parent_id": [
                    "str",
                    "int",
                    "float",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "_access_token": {
            "name": "_access_token",
            "location": 617,
            "return": [
                ""
            ],
            "arguments": {
                "access_token": [
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Iterable[str]",
                    "list",
                    "str"
                ]
            }
        },
        "_bounding_box": {
            "name": "_bounding_box",
            "location": 623,
            "return": [
                ""
            ],
            "arguments": {
                "nelat": [
                    "str",
                    "int",
                    "bool",
                    "float"
                ],
                "nelng": [
                    "str",
                    "int",
                    "bool",
                    "float"
                ],
                "swlat": [
                    "str",
                    "int",
                    "bool",
                    "float"
                ],
                "swlng": [
                    "str",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "_geojson_properties": {
            "name": "_geojson_properties",
            "location": 637,
            "return": [
                ""
            ],
            "arguments": {
                "properties": [
                    "Dict[str, Any]",
                    "dict",
                    "Iterable[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "_name": {
            "name": "_name",
            "location": 643,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "_only_id": {
            "name": "_only_id",
            "location": 649,
            "return": [
                ""
            ],
            "arguments": {
                "only_id": [
                    "str",
                    "bool"
                ]
            }
        },
        "_observation_id": {
            "name": "_observation_id",
            "location": 655,
            "return": [
                ""
            ],
            "arguments": {
                "observation_id": [
                    "str",
                    "bool"
                ]
            }
        },
        "_project_id": {
            "name": "_project_id",
            "location": 661,
            "return": [
                ""
            ],
            "arguments": {
                "observation_id": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "_pagination": {
            "name": "_pagination",
            "location": 667,
            "return": [
                ""
            ],
            "arguments": {
                "page": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "per_page": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "order": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "order_by": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "count_only": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "reverse": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_search_query": {
            "name": "_search_query",
            "location": 693,
            "return": [
                ""
            ],
            "arguments": {
                "q": [
                    "int",
                    "str",
                    "bool",
                    "Exception"
                ]
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/docs/__init__.py": {},
    "pyinaturalist-main/pyinaturalist/models/base.py": {
        "load_json": {
            "name": "load_json",
            "location": 200,
            "return": [
                "str",
                "Type[T]",
                "int"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Union[Dict, List, str]",
                    "Dict[str, Any]",
                    "type"
                ]
            }
        },
        "BaseModel.copy": {
            "name": "copy",
            "location": 37,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "models.Subtask",
                    "float",
                    "type"
                ],
                "obj": [
                    "dict",
                    "Tuple[List[Any], List[Any]]",
                    "str",
                    "bool",
                    "bytes",
                    "Optional[int]"
                ]
            }
        },
        "BaseModel.from_json": {
            "name": "from_json",
            "location": 46,
            "return": [
                "int",
                "Dict[str, Any]",
                "zerver.models.Realm",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "Set[str]",
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, str]]",
                    "dict"
                ],
                "value": [
                    "Dict[str, Any]",
                    "NamedTuple",
                    "Iterable[str]",
                    "dict"
                ]
            }
        },
        "BaseModel.from_json_file": {
            "name": "from_json_file",
            "location": 65,
            "return": [
                "Dict[str, str]",
                "bytes",
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[List[object]]",
                    "List[Union[int, float]]",
                    "List[str]",
                    "List[float]"
                ],
                "value": [
                    "str",
                    "List[List[object]]",
                    "List[Union[int, float]]",
                    "List[str]",
                    "List[float]"
                ]
            }
        },
        "BaseModel.from_json_list": {
            "name": "from_json_list",
            "location": 70,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "BaseModel._row": {
            "name": "_row",
            "location": 75,
            "return": [
                "pyinaturalist.constants.TableRow"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel._str_attrs": {
            "name": "_str_attrs",
            "location": 80,
            "return": [
                "typing.List[builtins.str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.to_dict": {
            "name": "to_dict",
            "location": 84,
            "return": [
                "dict",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "recurse": [
                    "str"
                ]
            }
        },
        "BaseModel.__rich_repr__": {
            "name": "__rich_repr__",
            "location": 99,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.__str__": {
            "name": "__str__",
            "location": 138,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModelCollection.copy": {
            "name": "copy",
            "location": 160,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Tuple[int, int]",
                "Union[List[str], str]",
                "Sequence['cirq.Qid']",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "Iterable[T]",
                    "T",
                    "dict"
                ],
                "obj": [
                    "Iterable[T]",
                    "T",
                    "dict"
                ]
            }
        },
        "BaseModelCollection.from_json": {
            "name": "from_json",
            "location": 165,
            "return": [
                "bytes",
                "dict",
                "Callable[[bytes], bytes]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "bool",
                    "List[int]",
                    "Callable",
                    "Union[Set[int], List[int], Dict[int, Any]]"
                ],
                "value": [
                    "dict",
                    "list",
                    "Optional[dict]",
                    "Union[bytes, str]"
                ]
            }
        },
        "BaseModelCollection.from_json_list": {
            "name": "from_json_list",
            "location": 173,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "list",
                    "Optional[Callable[[Any, Any], None]]"
                ],
                "value": [
                    "str",
                    "list",
                    "Optional[Callable[[Any, Any], None]]"
                ]
            }
        },
        "BaseModelCollection.id_map": {
            "name": "id_map",
            "location": 180,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModelCollection.deduplicate": {
            "name": "deduplicate",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModelCollection.get_count": {
            "name": "get_count",
            "location": 190,
            "return": [
                "Optional[str]",
                "int",
                "Dict[str, float]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "order.transfer.models.OrderNumberSequenceID",
                    "int",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "count_field": [
                    "str",
                    "order.transfer.models.OrderNumberSequenceID",
                    "int",
                    "Optional[float]",
                    "Optional[str]"
                ]
            }
        },
        "BaseModelCollection.__str__": {
            "name": "__str__",
            "location": 196,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModel.from_json.is_valid_attr": {
            "name": "is_valid_attr",
            "location": 58,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "Optional[float]"
            ],
            "arguments": {
                "k": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Set[str]"
                ]
            }
        },
        "BaseModel.to_dict.vs": {
            "name": "vs",
            "location": 87,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "_inst": [
                    "str",
                    "Optional[bool]",
                    "int",
                    "Sequence[Union[str, int]]",
                    "bool"
                ],
                "_key": [
                    "str",
                    "Optional[bool]",
                    "int",
                    "Sequence[Union[str, int]]",
                    "bool"
                ],
                "value": [
                    "str",
                    "Hashable",
                    "Sequence[str]",
                    "dict"
                ]
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/models/comment.py": {
        "Comment.truncated_body": {
            "name": "truncated_body",
            "location": 33,
            "return": [
                "str",
                "IO",
                "Mapping[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comment.username": {
            "name": "username",
            "location": 41,
            "return": [
                "bool",
                "set",
                "Mapping",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comment._row": {
            "name": "_row",
            "location": 45,
            "return": [
                "Dict[str, str]",
                "str",
                "Dict[str, float]",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comment._str_attrs": {
            "name": "_str_attrs",
            "location": 54,
            "return": [
                "Dict[str, float]",
                "Dict[str, str]",
                "Dict[str, Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/models/controlled_term.py": {
        "Annotation.values": {
            "name": "values",
            "location": 32,
            "return": [
                "str",
                "int",
                "dict",
                "Union[int, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Annotation._row": {
            "name": "_row",
            "location": 39,
            "return": [
                "Dict[str, str]",
                "Set[str]",
                "dict",
                "Dict[str, List[Callable]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Annotation._str_attrs": {
            "name": "_str_attrs",
            "location": 48,
            "return": [
                "str",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": []
            }
        },
        "ControlledTermValue._str_attrs": {
            "name": "_str_attrs",
            "location": 66,
            "return": [
                "int",
                "IO",
                "Dict[str, Any]",
                "bytes",
                "str",
                "Optional[Dict[str, Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ControlledTerm.value_labels": {
            "name": "value_labels",
            "location": 90,
            "return": [
                "List[int]",
                "str",
                "bool",
                "AbstractSet[Type[object]]",
                "dict",
                "List[Optional[str]]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ControlledTerm._row": {
            "name": "_row",
            "location": 95,
            "return": [
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ControlledTerm._str_attrs": {
            "name": "_str_attrs",
            "location": 103,
            "return": [
                "bool",
                "Optional[str]",
                "zerver.models.UserProfile",
                "Optional[zerver.models.UserProfile]",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "ControlledTermCount.from_json": {
            "name": "from_json",
            "location": 117,
            "return": [
                "zerver.models.Realm",
                "Dict[str, Any]",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]",
                "str",
                "salon.models.Stylist",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "value": [
                    "Optional[int]",
                    "int",
                    "Optional[str]",
                    "Union[str, dict]",
                    "Optional[Any]"
                ],
                "user_id": [
                    "bool",
                    "int",
                    "List[int]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "ControlledTermCount.term_label": {
            "name": "term_label",
            "location": 125,
            "return": [
                "str",
                "bool",
                "zerver.models.Recipient",
                "Callable",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ControlledTermCount.value_label": {
            "name": "value_label",
            "location": 129,
            "return": [
                "str",
                "int",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": []
            }
        },
        "ControlledTermCount._row": {
            "name": "_row",
            "location": 133,
            "return": [
                "Callable",
                "core.models.Grouping",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ControlledTermCount._str_attrs": {
            "name": "_str_attrs",
            "location": 141,
            "return": [
                "Dict[str, Any]",
                "str",
                "int",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/models/identification.py": {
        "Identification.taxon_name": {
            "name": "taxon_name",
            "location": 49,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Identification._row": {
            "name": "_row",
            "location": 60,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, Dict[str, str]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Identification._str_attrs": {
            "name": "_str_attrs",
            "location": 71,
            "return": [
                "Optional[str]",
                "Dict[str, str]",
                "dict",
                "Union[type, Tuple[type, ...]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/models/lazy_property.py": {
        "add_lazy_attrs": {
            "name": "add_lazy_attrs",
            "location": 113,
            "return": [
                "bool",
                "float",
                "zerver.models.Realm",
                "List[object]"
            ],
            "arguments": {
                "cls": [
                    "type",
                    "Type[T]",
                    "list",
                    "dict",
                    "Callable"
                ],
                "fields": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "get_lazy_properties": {
            "name": "get_lazy_properties",
            "location": 122,
            "return": [
                "dict",
                "Dict[int, Dict[int, Any]]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Callable",
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "make_attribute": {
            "name": "make_attribute",
            "location": 126,
            "return": [
                "bool",
                "Type",
                "Sequence[Any]",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "_is_model_object_or_list": {
            "name": "_is_model_object_or_list",
            "location": 132,
            "return": [
                "Dict[str, Any]",
                "str",
                "Tuple[bool, str]"
            ],
            "arguments": {
                "value": [
                    "Union[int, float]",
                    "type",
                    "Dict[type, Callable]",
                    "Optional[str]",
                    "Union[str, bytes]",
                    "str"
                ]
            }
        },
        "_returns_list": {
            "name": "_returns_list",
            "location": 139,
            "return": [
                "Type",
                "str"
            ],
            "arguments": {
                "func": [
                    "Optional[str]"
                ]
            }
        },
        "LazyProperty.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "converter": [
                    "TextIO",
                    "IO[Any]"
                ],
                "name": [
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "Optional[Sequence[str]]"
                ],
                "doc": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "type": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "LazyProperty.__get__": {
            "name": "__get__",
            "location": 78,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Optional[object]",
                    "dict",
                    "bool",
                    "Callable[..., T]"
                ],
                "cls": [
                    "type",
                    "Type",
                    "Callable",
                    "Optional[type]",
                    "Callable[[], None]"
                ]
            }
        },
        "LazyProperty.__set__": {
            "name": "__set__",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int"
                ],
                "raw_value": [
                    "str",
                    "int"
                ]
            }
        },
        "LazyProperty.__set_name__": {
            "name": "__set_name__",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "Type",
                    "Type['Signature']",
                    "str"
                ],
                "name": [
                    "str",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "LazyProperty.get_lazy_attr": {
            "name": "get_lazy_attr",
            "location": 108,
            "return": [
                "str",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/models/life_list.py": {
        "make_tree": {
            "name": "make_tree",
            "location": 83,
            "return": [
                "float",
                "Optional[bool]",
                "int"
            ],
            "arguments": {
                "taxa": [
                    "list",
                    "bool"
                ]
            }
        },
        "_sort_groupby": {
            "name": "_sort_groupby",
            "location": 109,
            "return": [
                "bool",
                "List[zerver.models.UserProfile]",
                "Dict[str, str]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "values": [
                    "dict",
                    "List[str]",
                    "\"VersionedAnalyzer\"",
                    "str"
                ],
                "key": [
                    "dict",
                    "List[str]",
                    "\"VersionedAnalyzer\"",
                    "str"
                ]
            }
        },
        "LifeListTaxon.indent_level": {
            "name": "indent_level",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LifeListTaxon._row": {
            "name": "_row",
            "location": 30,
            "return": [
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LifeListTaxon._str_attrs": {
            "name": "_str_attrs",
            "location": 39,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LifeList.from_json": {
            "name": "from_json",
            "location": 52,
            "return": [
                "float"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Optional[str]",
                    "List[dict]",
                    "dict",
                    "List[Dict]",
                    "float"
                ],
                "value": [
                    "int",
                    "str",
                    "transfer.models.CategoryID",
                    "authentication.session.models.current_user.CurrentUser"
                ],
                "user_id": [
                    "int",
                    "dict",
                    "Set[int]",
                    "transfer.models.SubjectID"
                ]
            }
        },
        "LifeList.get_count": {
            "name": "get_count",
            "location": 64,
            "return": [
                "str",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "taxon_id": [
                    "int",
                    "str",
                    "Dict[str, services.user.transfer.models.User]"
                ],
                "count_field": [
                    "int",
                    "str",
                    "Dict[str, services.user.transfer.models.User]"
                ]
            }
        },
        "LifeList.tree": {
            "name": "tree",
            "location": 72,
            "return": [
                "Type",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "make_tree.make_child_tree": {
            "name": "make_child_tree",
            "location": 95,
            "return": [
                "int"
            ],
            "arguments": {
                "node": [
                    "Sequence[object]"
                ],
                "taxon": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/models/message.py": {
        "Message.truncated_body": {
            "name": "truncated_body",
            "location": 27,
            "return": [
                "str",
                "IO",
                "Mapping[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message._row": {
            "name": "_row",
            "location": 35,
            "return": [
                "bool",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message._str_attrs": {
            "name": "_str_attrs",
            "location": 45,
            "return": [
                "int",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.__str__": {
            "name": "__str__",
            "location": 48,
            "return": [
                "str",
                "dict",
                "int",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/models/observation.py": {
        "Observation.__init__": {
            "name": "__init__",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Observation.from_id": {
            "name": "from_id",
            "location": 200,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "dict",
                    "str",
                    "Optional[int]",
                    "Dict[str, str]"
                ],
                "id": [
                    "str",
                    "int",
                    "Union[int, str]",
                    "Optional[str]"
                ]
            }
        },
        "Observation.photo_url": {
            "name": "photo_url",
            "location": 208,
            "return": [
                "Optional[int]",
                "bool",
                "str",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Observation.thumbnail_url": {
            "name": "thumbnail_url",
            "location": 215,
            "return": [
                "Optional[int]",
                "bool",
                "str",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Observation._row": {
            "name": "_row",
            "location": 222,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, Dict[str, str]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Observation._str_attrs": {
            "name": "_str_attrs",
            "location": 233,
            "return": [
                "str",
                "models.Station",
                "List[str]",
                "int",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Observations.identifiers": {
            "name": "identifiers",
            "location": 244,
            "return": [
                "bool",
                "float",
                "List[List[Any]]",
                "Optional[Union[str, Any]]",
                "List[Dict]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Observations.observers": {
            "name": "observers",
            "location": 250,
            "return": [
                "bool",
                "float",
                "List[List[Any]]",
                "Optional[Union[str, Any]]",
                "List[Dict]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Observations.taxa": {
            "name": "taxa",
            "location": 256,
            "return": [
                "List[Dict]",
                "str",
                "List[int]",
                "List[str]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Observations.thumbnail_urls": {
            "name": "thumbnail_urls",
            "location": 262,
            "return": [
                "bool",
                "List[int]",
                "Optional[dict]",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/models/observation_field.py": {
        "ObservationField._row": {
            "name": "_row",
            "location": 49,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObservationField._str_attrs": {
            "name": "_str_attrs",
            "location": 58,
            "return": [
                "Optional[str]",
                "Dict[str, str]",
                "dict",
                "Dict[str, float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObservationFieldValue.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ObservationFieldValue._row": {
            "name": "_row",
            "location": 96,
            "return": [
                "type",
                "bool",
                "dict",
                "Union[type, Tuple[type, ...]]",
                "str",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObservationFieldValue._str_attrs": {
            "name": "_str_attrs",
            "location": 105,
            "return": [
                "Optional[str]",
                "Union[type, Tuple[type, ...]]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/models/photo.py": {
        "Photo.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Photo.from_json": {
            "name": "from_json",
            "location": 62,
            "return": [
                "Iterable[str]",
                "str",
                "tuple"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "str",
                    "int",
                    "list",
                    "Type[object]",
                    "bool",
                    "bytes",
                    "dict",
                    "Dict[str, Any]"
                ],
                "value": [
                    "type",
                    "dict",
                    "list",
                    "Union[bytes, str]",
                    "bool"
                ]
            }
        },
        "Photo.ext": {
            "name": "ext",
            "location": 69,
            "return": [
                "str",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": []
            }
        },
        "Photo.dimensions_str": {
            "name": "dimensions_str",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Photo.has_cc_license": {
            "name": "has_cc_license",
            "location": 79,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Photo.info_url": {
            "name": "info_url",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Photo.large_url": {
            "name": "large_url",
            "location": 89,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Photo.medium_url": {
            "name": "medium_url",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Photo.mimetype": {
            "name": "mimetype",
            "location": 99,
            "return": [
                "str",
                "Tuple[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Photo.original_url": {
            "name": "original_url",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Photo.small_url": {
            "name": "small_url",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Photo.square_url": {
            "name": "square_url",
            "location": 114,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Photo.thumbnail_url": {
            "name": "thumbnail_url",
            "location": 119,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Photo.url_size": {
            "name": "url_size",
            "location": 123,
            "return": [
                "str",
                "recidiviz.ingesscrape.constants.ScrapeType"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "bytes",
                    "str",
                    "Union[str, int]"
                ]
            }
        },
        "Photo.open": {
            "name": "open",
            "location": 129,
            "return": [
                "bool",
                "str",
                "models.Dashboard",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "Union[int, float]",
                    "str",
                    "Tuple[int, int, int]"
                ]
            }
        },
        "Photo.show": {
            "name": "show",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "size": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "Photo._row": {
            "name": "_row",
            "location": 142,
            "return": [
                "dict",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Photo._str_attrs": {
            "name": "_str_attrs",
            "location": 151,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "IconPhoto.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "IconPhoto.from_iconic_taxon": {
            "name": "from_iconic_taxon",
            "location": 166,
            "return": [
                "str",
                "Optional[str]",
                "Callable[[str], T]",
                "Dict[str, Any]",
                "Mapping[str, str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable[[str], str]"
                ],
                "iconic_taxon_name": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "IconPhoto.icon_url": {
            "name": "icon_url",
            "location": 171,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IconPhoto.url_size": {
            "name": "url_size",
            "location": 175,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "Optional[bytes]",
                    "Collection",
                    "str",
                    "bytes"
                ]
            }
        },
        "IconPhoto._str_attrs": {
            "name": "_str_attrs",
            "location": 180,
            "return": [
                "str",
                "recidiviz.common.constants.state.state_incarceration_period.StateIncarcerationPeriodAdmissionReason",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/models/place.py": {
        "convert_optional_lat_long": {
            "name": "convert_optional_lat_long",
            "location": 17,
            "return": [
                "List[int]",
                "str"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "List[str]",
                    "int",
                    "bytes"
                ]
            }
        },
        "Place.from_json": {
            "name": "from_json",
            "location": 56,
            "return": [
                "int",
                "str",
                "Iterable[str]",
                "tuple"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Union[int, float, str]",
                    "Mapping[str, str]",
                    "dict",
                    "List[str]"
                ],
                "value": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "category": [
                    "str",
                    "dict",
                    "Mapping[str, str]",
                    "requests.models.Response",
                    "Tuple[int, int]",
                    "Mapping[str, Dict[str, Any]]"
                ]
            }
        },
        "Place.from_json_list": {
            "name": "from_json_list",
            "location": 61,
            "return": [
                "str",
                "complex",
                "bool",
                "int",
                "Tuple[int, str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "type",
                    "Sequence[type]",
                    "Union[dict, List[Any]]",
                    "dict"
                ],
                "value": [
                    "str",
                    "Sequence[str]",
                    "Union[dict, List[Any]]",
                    "bytes"
                ]
            }
        },
        "Place.ancestry": {
            "name": "ancestry",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "Iterable",
                    "int",
                    "float"
                ]
            }
        },
        "Place.url": {
            "name": "url",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Place._row": {
            "name": "_row",
            "location": 91,
            "return": [
                "bool",
                "dict",
                "Dict[str, str]",
                "str",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Place._str_attrs": {
            "name": "_str_attrs",
            "location": 102,
            "return": [
                "Optional[str]",
                "dict",
                "Callable",
                "bool",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/models/project.py": {
        "ProjectObservation._str_attrs": {
            "name": "_str_attrs",
            "location": 38,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectObservationField.from_json": {
            "name": "from_json",
            "location": 51,
            "return": [
                "str",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, str]",
                    "IO[bytes]",
                    "Optional[str]",
                    "Optional[Union[Any, str]]",
                    "Dict[str, Any]",
                    "type"
                ],
                "value": [
                    "Dict[str, Any]",
                    "Optional[dict]",
                    "str"
                ]
            }
        },
        "ProjectObservationField._str_attrs": {
            "name": "_str_attrs",
            "location": 60,
            "return": [
                "str",
                "Optional[str]",
                "list",
                "bokeh.models.ColumnDataSource",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectUser.from_json": {
            "name": "from_json",
            "location": 73,
            "return": [
                "bool",
                "amundsen_application.models.user.User",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Optional[str]",
                    "List[float]",
                    "List[str]"
                ],
                "value": [
                    "float",
                    "Dict[str, Any]",
                    "Tuple[Any, Any]",
                    "Optional[dict]"
                ]
            }
        },
        "ProjectUser._str_attrs": {
            "name": "_str_attrs",
            "location": 82,
            "return": [
                "str",
                "bool",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.obs_fields": {
            "name": "obs_fields",
            "location": 143,
            "return": [
                "str",
                "dict",
                "Tuple[int, int]",
                "Union[str, Sequence[str]]",
                "Optional[BaseException]",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.obs_rules": {
            "name": "obs_rules",
            "location": 147,
            "return": [
                "bool",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.url": {
            "name": "url",
            "location": 151,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project._row": {
            "name": "_row",
            "location": 156,
            "return": [
                "str",
                "Set[str]",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Dict[str, List[Callable]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project._str_attrs": {
            "name": "_str_attrs",
            "location": 165,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/models/search.py": {
        "SearchResult.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchResult.record_name": {
            "name": "record_name",
            "location": 29,
            "return": [
                "Type[BaseException]",
                "list",
                "Dict[str, str]",
                "recidiviz.common.constants.state.state_incarceration_period.StateIncarcerationPeriodAdmissionReason",
                "Optional[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchResult._row": {
            "name": "_row",
            "location": 35,
            "return": [
                "Dict[str, Any]",
                "str",
                "bool",
                "Type[T]",
                "dict",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchResult._str_attrs": {
            "name": "_str_attrs",
            "location": 44,
            "return": [
                "str",
                "Type",
                "list",
                "x509_pki.models.Certificate",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/models/taxon.py": {
        "_get_rank_name_idx": {
            "name": "_get_rank_name_idx",
            "location": 312,
            "return": [],
            "arguments": {
                "taxon": []
            }
        },
        "Taxon.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Taxon.from_sorted_json_list": {
            "name": "from_sorted_json_list",
            "location": 161,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "Taxon.child_ids": {
            "name": "child_ids",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Taxon.emoji": {
            "name": "emoji",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Taxon.full_name": {
            "name": "full_name",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Taxon.icon": {
            "name": "icon",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Taxon.icon_url": {
            "name": "icon_url",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Taxon.gbif_url": {
            "name": "gbif_url",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Taxon.parent": {
            "name": "parent",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Taxon.taxonomy": {
            "name": "taxonomy",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Taxon.url": {
            "name": "url",
            "location": 218,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Taxon.from_id": {
            "name": "from_id",
            "location": 224,
            "return": [],
            "arguments": {
                "cls": [],
                "id": []
            }
        },
        "Taxon.load_full_record": {
            "name": "load_full_record",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Taxon._row": {
            "name": "_row",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Taxon._str_attrs": {
            "name": "_str_attrs",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TaxonCount.from_json": {
            "name": "from_json",
            "location": 261,
            "return": [],
            "arguments": {
                "cls": [],
                "value": [],
                "user_id": []
            }
        },
        "TaxonCount._row": {
            "name": "_row",
            "location": 271,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TaxonCount._str_attrs": {
            "name": "_str_attrs",
            "location": 281,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/models/taxon_meta.py": {
        "IdWrapperMixin.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "IdWrapperMixin.place_id": {
            "name": "place_id",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "IdWrapperMixin.updater_id": {
            "name": "updater_id",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "IdWrapperMixin.user_id": {
            "name": "user_id",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "ConservationStatus._str_attrs": {
            "name": "_str_attrs",
            "location": 100,
            "return": [
                "str",
                "int",
                "dict",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EstablishmentMeans.establishment_means_label": {
            "name": "establishment_means_label",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str, bytes]"
                ]
            }
        },
        "EstablishmentMeans.__str__": {
            "name": "__str__",
            "location": 130,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListedTaxon.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ListedTaxon._row": {
            "name": "_row",
            "location": 186,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, Dict[str, str]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListedTaxon._str_attrs": {
            "name": "_str_attrs",
            "location": 198,
            "return": [
                "int",
                "zerver.models.Realm",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListedTaxon.__str__": {
            "name": "__str__",
            "location": 201,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaxonSummary._str_attrs": {
            "name": "_str_attrs",
            "location": 225,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/models/user.py": {
        "User.username": {
            "name": "username",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.display_name": {
            "name": "display_name",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.url": {
            "name": "url",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User._row": {
            "name": "_row",
            "location": 62,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User._str_attrs": {
            "name": "_str_attrs",
            "location": 72,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserCount.from_json": {
            "name": "from_json",
            "location": 87,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Dict[str, Dict[str, str]]",
                    "dict",
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "UserCount._row": {
            "name": "_row",
            "location": 99,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserCount.__str__": {
            "name": "__str__",
            "location": 107,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/models/__init__.py": {
        "field": {
            "name": "field",
            "location": 26,
            "return": [
                "str",
                "Iterable[str]",
                "Optional[str]",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "doc": [
                    "bool",
                    "float",
                    "int",
                    "List[app.models.Question]"
                ],
                "options": [
                    "bool",
                    "float",
                    "int",
                    "List[app.models.Question]"
                ],
                "metadata": [
                    "dict",
                    "str",
                    "List[str]",
                    "Dict[str, Iterable[Any]]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "is_in": {
            "name": "is_in",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "options": [
                    "List[django.db.models.query.QuerySet]"
                ]
            }
        },
        "coordinate_pair": {
            "name": "coordinate_pair",
            "location": 40,
            "return": [
                "Optional[str]",
                "bool",
                "List[str]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]"
            ],
            "arguments": {
                "doc": [
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "datetime_field": {
            "name": "datetime_field",
            "location": 50,
            "return": [
                "Optional[str]",
                "bool",
                "str",
                "Optional[float]",
                "tuple"
            ],
            "arguments": {}
        },
        "datetime_now_field": {
            "name": "datetime_now_field",
            "location": 55,
            "return": [
                "str",
                "Union[dict, list]",
                "Callable"
            ],
            "arguments": {}
        },
        "upper": {
            "name": "upper",
            "location": 60,
            "return": [
                "int",
                "bool",
                "float",
                "Tuple[str, str]"
            ],
            "arguments": {
                "value": [
                    "Union[str, bytes]",
                    "str",
                    "Optional[int]",
                    "Union[bool, str]",
                    "Optional[bool]",
                    "T",
                    "Optional[str]",
                    "Optional[dict]"
                ]
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/v0/observations.py": {
        "get_observations": {
            "name": "get_observations",
            "location": 27,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "create_observation": {
            "name": "create_observation",
            "location": 92,
            "return": [
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]",
                "bool",
                "Dict[str, str]",
                "bytes"
            ],
            "arguments": {}
        },
        "update_observation": {
            "name": "update_observation",
            "location": 149,
            "return": [
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]",
                "bool",
                "dict"
            ],
            "arguments": {
                "observation_id": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "upload_photos": {
            "name": "upload_photos",
            "location": 199,
            "return": [
                "bool",
                "int",
                "str",
                "List[object]",
                "Dict[str, str]"
            ],
            "arguments": {
                "observation_id": [
                    "str",
                    "int"
                ],
                "photos": [
                    "int",
                    "str",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "upload_sounds": {
            "name": "upload_sounds",
            "location": 251,
            "return": [
                "bool",
                "int",
                "str",
                "List[object]",
                "Dict[str, str]"
            ],
            "arguments": {
                "observation_id": [
                    "str",
                    "int"
                ],
                "sounds": [
                    "int",
                    "str",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "delete_observation": {
            "name": "delete_observation",
            "location": 303,
            "return": [
                ""
            ],
            "arguments": {
                "observation_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/v0/observation_fields.py": {
        "get_observation_fields": {
            "name": "get_observation_fields",
            "location": 11,
            "return": [
                "int",
                "str",
                "Optional[bool]",
                "Optional[List[Any]]"
            ],
            "arguments": {}
        },
        "put_observation_field_values": {
            "name": "put_observation_field_values",
            "location": 53,
            "return": [
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]",
                "bool",
                "str"
            ],
            "arguments": {
                "observation_id": [
                    "int",
                    "dict"
                ],
                "observation_field_id": [
                    "int",
                    "dict",
                    "bytes"
                ],
                "value": [
                    "int",
                    "dict"
                ]
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/v0/__init__.py": {},
    "pyinaturalist-main/pyinaturalist/v1/controlled_terms.py": {
        "get_controlled_terms": {
            "name": "get_controlled_terms",
            "location": 6,
            "return": [
                "int",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "taxon_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/v1/identifications.py": {
        "get_identifications_by_id": {
            "name": "get_identifications_by_id",
            "location": 10,
            "return": [
                "str",
                "int",
                "bool",
                "bytes"
            ],
            "arguments": {
                "identification_id": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "get_identifications": {
            "name": "get_identifications",
            "location": 38,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "pyinaturalist-main/pyinaturalist/v1/messages.py": {
        "get_message_by_id": {
            "name": "get_message_by_id",
            "location": 13,
            "return": [
                "str",
                "int",
                "bool",
                "bytes"
            ],
            "arguments": {
                "message_id": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "get_messages": {
            "name": "get_messages",
            "location": 40,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "get_unread_meassage_count": {
            "name": "get_unread_meassage_count",
            "location": 71,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        }
    },
    "pyinaturalist-main/pyinaturalist/v1/observations.py": {
        "get_observation": {
            "name": "get_observation",
            "location": 34,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "Optional[constants.ChannelList]",
                "bool"
            ],
            "arguments": {
                "observation_id": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "get_observation_histogram": {
            "name": "get_observation_histogram",
            "location": 68,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {}
        },
        "get_observations": {
            "name": "get_observations",
            "location": 120,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "get_observation_identifiers": {
            "name": "get_observation_identifiers",
            "location": 168,
            "return": [
                "int",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "get_observation_observers": {
            "name": "get_observation_observers",
            "location": 199,
            "return": [
                "int",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "get_observation_species_counts": {
            "name": "get_observation_species_counts",
            "location": 233,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "get_observation_popular_field_values": {
            "name": "get_observation_popular_field_values",
            "location": 265,
            "return": [
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]",
                "bytes",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "get_observation_taxonomy": {
            "name": "get_observation_taxonomy",
            "location": 292,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "str"
                ]
            }
        },
        "get_observation_taxon_summary": {
            "name": "get_observation_taxon_summary",
            "location": 318,
            "return": [
                "str",
                "bool",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {
                "observation_id": [
                    "str",
                    "int"
                ]
            }
        },
        "create_observation": {
            "name": "create_observation",
            "location": 346,
            "return": [
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]",
                "bool",
                "Dict[str, str]",
                "bytes"
            ],
            "arguments": {}
        },
        "update_observation": {
            "name": "update_observation",
            "location": 394,
            "return": [
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]",
                "bool",
                "dict"
            ],
            "arguments": {
                "observation_id": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "upload": {
            "name": "upload",
            "location": 438,
            "return": [
                "bool",
                "int",
                "str",
                "List[object]",
                "Dict[str, str]"
            ],
            "arguments": {
                "observation_id": [
                    "str",
                    "Tuple[str]",
                    "Dict[str, AsyncGenerator]"
                ],
                "photos": [
                    "int",
                    "List[int]",
                    "Sequence",
                    "List[str]"
                ],
                "sounds": [
                    "int",
                    "List[int]",
                    "Sequence",
                    "List[str]"
                ],
                "photo_ids": [
                    "int",
                    "List[int]",
                    "bool",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "delete_observation": {
            "name": "delete_observation",
            "location": 515,
            "return": [
                ""
            ],
            "arguments": {
                "observation_id": [
                    "str",
                    "Dict[str, object]",
                    "Optional[str]"
                ],
                "access_token": [
                    "str",
                    "Dict[str, object]",
                    "Optional[str]"
                ]
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/v1/observation_fields.py": {
        "set_observation_field": {
            "name": "set_observation_field",
            "location": 10,
            "return": [
                "int",
                "bool",
                "List[Tuple[str, str, int]]"
            ],
            "arguments": {
                "observation_id": [
                    "int",
                    "dict",
                    "bytes"
                ],
                "observation_field_id": [
                    "int",
                    "dict",
                    "bytes"
                ],
                "value": [
                    "int",
                    "dict",
                    "bytes"
                ]
            }
        },
        "delete_observation_field": {
            "name": "delete_observation_field",
            "location": 52,
            "return": [
                "int",
                "Dict[str, str]",
                "dict",
                "Dict[str, Any]",
                "Exception",
                "str",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "observation_field_value_id": [
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/v1/places.py": {
        "get_places_by_id": {
            "name": "get_places_by_id",
            "location": 11,
            "return": [
                "str",
                "int",
                "bool",
                "bytes"
            ],
            "arguments": {
                "place_id": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "get_places_nearby": {
            "name": "get_places_nearby",
            "location": 44,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "int",
                "dict"
            ],
            "arguments": {
                "nelat": [
                    "str",
                    "Optional[str]"
                ],
                "nelng": [
                    "str",
                    "Optional[str]"
                ],
                "swlat": [
                    "str",
                    "Optional[str]"
                ],
                "swlng": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "get_places_autocomplete": {
            "name": "get_places_autocomplete",
            "location": 87,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "q": [
                    "str",
                    "IO[str]",
                    "dict",
                    "bytes",
                    "IO",
                    "Mapping[str, Any]"
                ]
            }
        },
        "PlaceAutocompletePaginator.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PlaceAutocompletePaginator.__init__.reqeuest_function": {
            "name": "reqeuest_function",
            "location": 127,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "pyinaturalist-main/pyinaturalist/v1/posts.py": {
        "get_posts": {
            "name": "get_posts",
            "location": 9,
            "return": [
                "str",
                "Mapping[str, Any]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "pyinaturalist-main/pyinaturalist/v1/projects.py": {
        "get_projects": {
            "name": "get_projects",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "get_projects_by_id": {
            "name": "get_projects_by_id",
            "location": 67,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "project_id": [
                    "str",
                    "int",
                    "Optional[Any]",
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, str]"
                ],
                "rule_details": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "int"
                ],
                "force_refresh": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "add_project_observation": {
            "name": "add_project_observation",
            "location": 117,
            "return": [
                "int",
                "dict",
                "Dict[str, Union[str, int]]",
                "Dict[str, Dict[str, str]]",
                "Optional[Dict]"
            ],
            "arguments": {
                "project_id": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "observation_id": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "access_token": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "add_project_users": {
            "name": "add_project_users",
            "location": 149,
            "return": [
                "str",
                "Set[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "project_id": [
                    "str"
                ],
                "user_ids": [
                    "str"
                ]
            }
        },
        "delete_project_observation": {
            "name": "delete_project_observation",
            "location": 178,
            "return": [
                "bool",
                "AsyncGenerator",
                "Tuple[int, int]",
                "Callable",
                "str"
            ],
            "arguments": {
                "project_id": [
                    "Optional[int]",
                    "str",
                    "Optional[str]",
                    "int",
                    "List[int]"
                ],
                "observation_id": [
                    "Optional[int]",
                    "str",
                    "Optional[str]",
                    "int",
                    "List[int]"
                ],
                "access_token": [
                    "Optional[int]",
                    "str",
                    "Optional[str]",
                    "int",
                    "List[int]"
                ]
            }
        },
        "delete_project_users": {
            "name": "delete_project_users",
            "location": 209,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "project_id": [
                    "str",
                    "int"
                ],
                "user_ids": [
                    "str",
                    "int"
                ]
            }
        },
        "update_project": {
            "name": "update_project",
            "location": 238,
            "return": [
                "int",
                "dict",
                "Dict[str, Union[str, int]]",
                "Dict[str, Union[str, bool]]",
                "Dict[str, Any]",
                "bool",
                "Dict[str, Dict[str, str]]",
                "List[List[str]]"
            ],
            "arguments": {
                "project_id": [
                    "str",
                    "int",
                    "Mapping[str, Any]"
                ]
            }
        },
        "_get_project_rules": {
            "name": "_get_project_rules",
            "location": 283,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "project_id": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "_validate_removed_users": {
            "name": "_validate_removed_users",
            "location": 290,
            "return": [
                ""
            ],
            "arguments": {
                "project": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "user_ids": [
                    "list",
                    "Iterable[str]",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/v1/search.py": {
        "search": {
            "name": "search",
            "location": 9,
            "return": [
                "str",
                "IO",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "q": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/v1/taxa.py": {
        "get_taxa": {
            "name": "get_taxa",
            "location": 11,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "get_taxa_by_id": {
            "name": "get_taxa_by_id",
            "location": 45,
            "return": [
                "str",
                "int",
                "bool",
                "bytes"
            ],
            "arguments": {
                "taxon_id": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "get_taxa_autocomplete": {
            "name": "get_taxa_autocomplete",
            "location": 81,
            "return": [
                "int",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "get_taxa_map_layers": {
            "name": "get_taxa_map_layers",
            "location": 131,
            "return": [
                "int",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "taxon_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/v1/users.py": {
        "get_user_by_id": {
            "name": "get_user_by_id",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "get_users_autocomplete": {
            "name": "get_users_autocomplete",
            "location": 43,
            "return": [
                "Iterable[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "q": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "pyinaturalist-main/pyinaturalist/v1/__init__.py": {},
    "pyinaturalist-main/pyinaturalist/v2/__init__.py": {},
    "pyinaturalist-main/scripts/map_fips_codes.py": {
        "get_counties": {
            "name": "get_counties",
            "location": 36,
            "return": [
                "bool",
                "List[str]",
                "Dict[str, Tuple[str, str]]",
                "str"
            ],
            "arguments": {}
        },
        "load_search_results": {
            "name": "load_search_results",
            "location": 48,
            "return": [
                "Optional[bool]",
                "Optional[float]",
                "str",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "search_counties": {
            "name": "search_counties",
            "location": 55,
            "return": [
                "int",
                "dict",
                "Optional[str]",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "counties": [
                    "dict",
                    "str",
                    "List[int]",
                    "T"
                ],
                "fips_codes": [
                    "str",
                    "int",
                    "Optional[Dict]"
                ]
            }
        },
        "match_responses": {
            "name": "match_responses",
            "location": 82,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "responses": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "counties": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_matching_result": {
            "name": "get_matching_result",
            "location": 94,
            "return": [
                "Optional[int]",
                "str",
                "Optional[str]",
                "bool",
                "dict"
            ],
            "arguments": {
                "results": [
                    "Optional[int]",
                    "bool",
                    "int",
                    "List[str]",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "county": [
                    "bool",
                    "List[str]"
                ],
                "fips_code": [
                    "Optional[int]",
                    "bool",
                    "int",
                    "List[str]",
                    "Optional[bool]",
                    "Optional[str]"
                ]
            }
        },
        "is_match": {
            "name": "is_match",
            "location": 102,
            "return": [
                "bool",
                "str",
                "type",
                "Dict[str, str]"
            ],
            "arguments": {
                "result": [
                    "Dict[str, Any]",
                    "List[str]",
                    "int",
                    "dict",
                    "Dict[str, str]"
                ],
                "county": [
                    "Mapping[str, Any]",
                    "dict",
                    "Mapping",
                    "str"
                ]
            }
        },
        "normalize_name": {
            "name": "normalize_name",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "get_display_names": {
            "name": "get_display_names",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "county": [
                    "str",
                    "dict"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "search": {
            "name": "search",
            "location": 160,
            "return": [
                "bool",
                "Tuple[float, float]",
                "str"
            ],
            "arguments": {
                "search_str": [
                    "str",
                    "int",
                    "IO"
                ],
                "fips": [
                    "str"
                ],
                "counties": [
                    "str"
                ]
            }
        },
        "summarize_results": {
            "name": "summarize_results",
            "location": 168,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "results": [
                    "bool",
                    "dict",
                    "Dict[str, Any]"
                ],
                "fips": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "dict"
                ],
                "counties": [
                    "List[Dict[str, Any]]",
                    "Optional[str]",
                    "dict",
                    "int",
                    "bool"
                ]
            }
        },
        "summarize_responses": {
            "name": "summarize_responses",
            "location": 177,
            "return": [
                "bool",
                "Optional[Dict[str, Any]]",
                "List[str]"
            ],
            "arguments": {
                "responses": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, Union[str, Any]]",
                    "Dict[str, List[Any]]"
                ],
                "counties": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, Union[str, Any]]",
                    "Dict[str, List[Any]]"
                ]
            }
        },
        "count_unmatched": {
            "name": "count_unmatched",
            "location": 181,
            "return": [
                "bool",
                "int",
                "Optional[int]",
                "Optional[bool]",
                "float"
            ],
            "arguments": {
                "unmatched": [
                    "int",
                    "Callable",
                    "str"
                ],
                "counties": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "pyinaturalist-main/scripts/observation_crud_test.py": {
        "run_observation_crud_test": {
            "name": "run_observation_crud_test",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "create_test_obs": {
            "name": "create_test_obs",
            "location": 39,
            "return": [
                "list",
                "Optional[int]",
                "float"
            ],
            "arguments": {
                "client": []
            }
        },
        "update_test_obs": {
            "name": "update_test_obs",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "test_obs_id": [
                    "str"
                ]
            }
        },
        "delete_test_obs": {
            "name": "delete_test_obs",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "str",
                    "int"
                ],
                "test_obs_id": [
                    "str",
                    "Optional[bool]",
                    "int"
                ]
            }
        }
    },
    "pyinaturalist-main/scripts/parse_openapi_spec.py": {
        "download_spec": {
            "name": "download_spec",
            "location": 21,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "force": [
                    "str",
                    "bytes",
                    "dict",
                    "bool"
                ]
            }
        },
        "parse_spec": {
            "name": "parse_spec",
            "location": 43,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "get_enum_params": {
            "name": "get_enum_params",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "endpoints": [
                    "str",
                    "dict",
                    "Callable"
                ]
            }
        },
        "process_enum_params": {
            "name": "process_enum_params",
            "location": 62,
            "return": [
                "bool"
            ],
            "arguments": {
                "enum_params": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "process_enum_params.has_multiple_enums": {
            "name": "has_multiple_enums",
            "location": 69,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool"
                ],
                "options": [
                    "str",
                    "bool"
                ]
            }
        },
        "process_enum_params.get_all_enums": {
            "name": "get_all_enums",
            "location": 72,
            "return": [
                "List[str]",
                "int",
                "List[Dict[str, str]]",
                "str",
                "bool",
                "Dict[str, Tuple[str, str]]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "int"
                ]
            }
        }
    },
    "pyinaturalist-main/scripts/unique_response_keys.py": {
        "get_unique_keys": {
            "name": "get_unique_keys",
            "location": 34,
            "return": [
                "str",
                "bool",
                "dict",
                "Set[str]",
                "Union[Dict[str, Any], List[Any]]"
            ],
            "arguments": {
                "response_type": [
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "Optional[str]",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        }
    },
    "pyinaturalist-main/test/conftest.py": {
        "patch_session": {
            "name": "patch_session",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "Set[str]"
                ]
            }
        },
        "get_module_functions": {
            "name": "get_module_functions",
            "location": 68,
            "return": [
                "Mapping[str, Any]",
                "bool",
                "dict",
                "List[Tuple[str, str, str]]",
                "str",
                "Union[dict, str]",
                "int"
            ],
            "arguments": {
                "module": [
                    "str"
                ]
            }
        },
        "get_module_http_functions": {
            "name": "get_module_http_functions",
            "location": 77,
            "return": [
                "str",
                "Mapping[str, Any]",
                "bool",
                "Set[str]"
            ],
            "arguments": {
                "module": [
                    "str",
                    "type",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "get_mock_args_for_signature": {
            "name": "get_mock_args_for_signature",
            "location": 86,
            "return": [
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "func": [
                    "str"
                ]
            }
        },
        "sample_data_path": {
            "name": "sample_data_path",
            "location": 100,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "load_sample_data": {
            "name": "load_sample_data",
            "location": 104,
            "return": [
                "dict",
                "int",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "TestSession.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyinaturalist-main/test/sample_data.py": {
        "load_sample_data": {
            "name": "load_sample_data",
            "location": 11,
            "return": [
                "Callable[[Any], bool]",
                "List[Dict[str, Any]]",
                "float",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "load_all_sample_data": {
            "name": "load_all_sample_data",
            "location": 17,
            "return": [
                "dict",
                "IO[bytes]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "pyinaturalist-main/test/test_auth.py": {
        "test_get_access_token__oauth": {
            "name": "test_get_access_token__oauth",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": [
                    "str"
                ]
            }
        },
        "test_get_access_token__jwt": {
            "name": "test_get_access_token__jwt",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": [
                    "str"
                ]
            }
        },
        "test_get_access_token__cached_jwt": {
            "name": "test_get_access_token__cached_jwt",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": [
                    "str"
                ]
            }
        },
        "test_get_access_token__envars": {
            "name": "test_get_access_token__envars",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "mock_keyring_credentials": [],
                "requests_mock": []
            }
        },
        "test_get_access_token__mixed_args_and_envars": {
            "name": "test_get_access_token__mixed_args_and_envars",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_get_access_token__keyring": {
            "name": "test_get_access_token__keyring",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "mock_post": [],
                "mock_keyring_credentials": [],
                "requests_mock": []
            }
        },
        "test_get_access_token__missing_creds": {
            "name": "test_get_access_token__missing_creds",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "mock_get_jwt": [
                    "mock.Mock"
                ],
                "mock_keyring_credentials": [
                    "mock.Mock"
                ]
            }
        },
        "test_get_access_token__invalid_creds": {
            "name": "test_get_access_token__invalid_creds",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "mock_get_jwt": [
                    "mock.Mock"
                ],
                "requests_mock": [
                    "mock.Mock"
                ]
            }
        },
        "test_get_keyring_credentials": {
            "name": "test_get_keyring_credentials",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "get_password": [
                    "Optional[str]",
                    "str",
                    "Iterable[Tuple[str, int]]"
                ]
            }
        },
        "test_get_keyring_credentials__not_installed": {
            "name": "test_get_keyring_credentials__not_installed",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_keyring_credentials__no_backend": {
            "name": "test_get_keyring_credentials__no_backend",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "get_password": [
                    "str",
                    "Iterable[Tuple[str, int]]",
                    "bool"
                ]
            }
        },
        "test_set_keyring_credentials": {
            "name": "test_set_keyring_credentials",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "set_password": [
                    "str"
                ]
            }
        }
    },
    "pyinaturalist-main/test/test_client.py": {
        "request_function": {
            "name": "request_function",
            "location": 25,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "id": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "test_client_settings": {
            "name": "test_client_settings",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "client_settings": [
                    "str"
                ],
                "request_params": [],
                "expected_params": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "test_client_auth": {
            "name": "test_client_auth",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "get_access_token": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        }
    },
    "pyinaturalist-main/test/test_compat.py": {
        "test_v0_imports": {
            "name": "test_v0_imports",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "test_v1_imports": {
            "name": "test_v1_imports",
            "location": 20,
            "return": [],
            "arguments": {}
        }
    },
    "pyinaturalist-main/test/test_converters.py": {
        "test_convert_lat_long": {
            "name": "test_convert_lat_long",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "input": [],
                "expected_output": []
            }
        },
        "test_ensure_file_obj__obj": {
            "name": "test_ensure_file_obj__obj",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ensure_file_obj__path": {
            "name": "test_ensure_file_obj__path",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ensure_file_obj__url": {
            "name": "test_ensure_file_obj__url",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ensure_list": {
            "name": "test_ensure_list",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "input": [
                    "int",
                    "str"
                ],
                "expected_output": [
                    "int",
                    "str"
                ]
            }
        },
        "test_ensure_list__csv": {
            "name": "test_ensure_list__csv",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "input": [
                    "str"
                ],
                "delimiter": [
                    "str"
                ],
                "expected_output": [
                    "str"
                ]
            }
        },
        "test_format_histogram__datetime_keys": {
            "name": "test_format_histogram__datetime_keys",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_format_histogram__int_keys": {
            "name": "test_format_histogram__int_keys",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_convert_observation_timestamps": {
            "name": "test_convert_observation_timestamps",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "observed_on": [
                    "str",
                    "int"
                ],
                "created_at": [
                    "str",
                    "int"
                ],
                "expected_observed": [
                    "int",
                    "str",
                    "bool",
                    "dict"
                ],
                "expected_created": [
                    "int",
                    "str",
                    "Type[Exception]",
                    "bool"
                ]
            }
        },
        "test_format_dimensions": {
            "name": "test_format_dimensions",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "input": [
                    "str",
                    "List[int]",
                    "bool"
                ],
                "expected_output": [
                    "str",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "test_format_file_size": {
            "name": "test_format_file_size",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "n_bytes": [
                    "bytes",
                    "memoryview"
                ],
                "expected_size": [
                    "bytes",
                    "memoryview"
                ]
            }
        },
        "test_format_license": {
            "name": "test_format_license",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_safe_split": {
            "name": "test_safe_split",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {
                "input": [
                    "unittesmock.MagicMock"
                ],
                "expected_output": [
                    "unittesmock.MagicMock"
                ]
            }
        }
    },
    "pyinaturalist-main/test/test_formatters.py": {
        "get_variations": {
            "name": "get_variations",
            "location": 35,
            "return": [],
            "arguments": {
                "response_object": []
            }
        },
        "test_format_table": {
            "name": "test_format_table",
            "location": 42,
            "return": [],
            "arguments": {
                "response": []
            }
        },
        "test_format_table__unknown_type": {
            "name": "test_format_table__unknown_type",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "test_pprint": {
            "name": "test_pprint",
            "location": 69,
            "return": [],
            "arguments": {
                "response": []
            }
        },
        "test_pretty_print": {
            "name": "test_pretty_print",
            "location": 130,
            "return": [],
            "arguments": {}
        },
        "test_format_request": {
            "name": "test_format_request",
            "location": 148,
            "return": [],
            "arguments": {}
        },
        "test_format_response": {
            "name": "test_format_response",
            "location": 161,
            "return": [],
            "arguments": {}
        },
        "test_format_table._get_id": {
            "name": "_get_id",
            "location": 46,
            "return": [],
            "arguments": {
                "value": []
            }
        }
    },
    "pyinaturalist-main/test/test_models.py": {
        "test_from_json": {
            "name": "test_from_json",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "test_from_json_file": {
            "name": "test_from_json_file",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "test_from_json_list": {
            "name": "test_from_json_list",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "test_copy": {
            "name": "test_copy",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "test_deepcopy": {
            "name": "test_deepcopy",
            "location": 65,
            "return": [],
            "arguments": {}
        },
        "test_copy_collection": {
            "name": "test_copy_collection",
            "location": 73,
            "return": [],
            "arguments": {}
        },
        "test_deduplicate": {
            "name": "test_deduplicate",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "test_annotation__converters": {
            "name": "test_annotation__converters",
            "location": 92,
            "return": [],
            "arguments": {}
        },
        "test_annotation__empty": {
            "name": "test_annotation__empty",
            "location": 97,
            "return": [],
            "arguments": {}
        },
        "test_annotation__values": {
            "name": "test_annotation__values",
            "location": 103,
            "return": [],
            "arguments": {}
        },
        "test_annotation__str": {
            "name": "test_annotation__str",
            "location": 108,
            "return": [],
            "arguments": {}
        },
        "test_controlled_term__converters": {
            "name": "test_controlled_term__converters",
            "location": 113,
            "return": [],
            "arguments": {}
        },
        "test_controlled_term__empty": {
            "name": "test_controlled_term__empty",
            "location": 120,
            "return": [],
            "arguments": {}
        },
        "test_controlled_term__properties": {
            "name": "test_controlled_term__properties",
            "location": 126,
            "return": [],
            "arguments": {}
        },
        "test_controlled_term__str": {
            "name": "test_controlled_term__str",
            "location": 133,
            "return": [],
            "arguments": {}
        },
        "test_controlled_term__value": {
            "name": "test_controlled_term__value",
            "location": 141,
            "return": [],
            "arguments": {}
        },
        "test_comment__converters": {
            "name": "test_comment__converters",
            "location": 153,
            "return": [],
            "arguments": {}
        },
        "test_comment__empty": {
            "name": "test_comment__empty",
            "location": 158,
            "return": [],
            "arguments": {}
        },
        "test_comment__str": {
            "name": "test_comment__str",
            "location": 164,
            "return": [],
            "arguments": {}
        },
        "test_identification__converters": {
            "name": "test_identification__converters",
            "location": 176,
            "return": [],
            "arguments": {}
        },
        "test_identification__empty": {
            "name": "test_identification__empty",
            "location": 181,
            "return": [],
            "arguments": {}
        },
        "test_identification__str": {
            "name": "test_identification__str",
            "location": 188,
            "return": [],
            "arguments": {}
        },
        "test_life_list__converters": {
            "name": "test_life_list__converters",
            "location": 201,
            "return": [],
            "arguments": {}
        },
        "test_life_list__empty": {
            "name": "test_life_list__empty",
            "location": 208,
            "return": [],
            "arguments": {}
        },
        "test_life_list__get_count": {
            "name": "test_life_list__get_count",
            "location": 214,
            "return": [],
            "arguments": {}
        },
        "test_message__converters": {
            "name": "test_message__converters",
            "location": 226,
            "return": [],
            "arguments": {}
        },
        "test_message__empty": {
            "name": "test_message__empty",
            "location": 232,
            "return": [],
            "arguments": {}
        },
        "test_message__str": {
            "name": "test_message__str",
            "location": 239,
            "return": [],
            "arguments": {}
        },
        "test_observation__converters": {
            "name": "test_observation__converters",
            "location": 248,
            "return": [],
            "arguments": {}
        },
        "test_observation__empty": {
            "name": "test_observation__empty",
            "location": 264,
            "return": [],
            "arguments": {}
        },
        "test_observation__with_ofvs": {
            "name": "test_observation__with_ofvs",
            "location": 275,
            "return": [],
            "arguments": {}
        },
        "test_observation__project_observations": {
            "name": "test_observation__project_observations",
            "location": 283,
            "return": [],
            "arguments": {}
        },
        "test_observation__thumbnail_url": {
            "name": "test_observation__thumbnail_url",
            "location": 289,
            "return": [],
            "arguments": {}
        },
        "test_observations": {
            "name": "test_observations",
            "location": 296,
            "return": [],
            "arguments": {}
        },
        "test_observation_field__converters": {
            "name": "test_observation_field__converters",
            "location": 314,
            "return": [],
            "arguments": {}
        },
        "test_observation_field__empty": {
            "name": "test_observation_field__empty",
            "location": 320,
            "return": [],
            "arguments": {}
        },
        "test_observation_field__str": {
            "name": "test_observation_field__str",
            "location": 326,
            "return": [],
            "arguments": {}
        },
        "test_observation_field_value__converters": {
            "name": "test_observation_field_value__converters",
            "location": 334,
            "return": [],
            "arguments": {}
        },
        "test_observation_field_value__converter_error": {
            "name": "test_observation_field_value__converter_error",
            "location": 342,
            "return": [],
            "arguments": {}
        },
        "test_observation_field_value__taxon": {
            "name": "test_observation_field_value__taxon",
            "location": 347,
            "return": [],
            "arguments": {}
        },
        "test_observation_field_value__empty": {
            "name": "test_observation_field_value__empty",
            "location": 354,
            "return": [],
            "arguments": {}
        },
        "test_observation_field_value__str": {
            "name": "test_observation_field_value__str",
            "location": 360,
            "return": [],
            "arguments": {}
        },
        "test_photo__converters": {
            "name": "test_photo__converters",
            "location": 372,
            "return": [],
            "arguments": {}
        },
        "test_photo__empty": {
            "name": "test_photo__empty",
            "location": 380,
            "return": [],
            "arguments": {}
        },
        "test_photo__guess_url": {
            "name": "test_photo__guess_url",
            "location": 385,
            "return": [],
            "arguments": {}
        },
        "test_photo__properties": {
            "name": "test_photo__properties",
            "location": 392,
            "return": [],
            "arguments": {}
        },
        "test_photo__license": {
            "name": "test_photo__license",
            "location": 399,
            "return": [],
            "arguments": {}
        },
        "test_photo__urls": {
            "name": "test_photo__urls",
            "location": 412,
            "return": [],
            "arguments": {
                "size": []
            }
        },
        "test_photo__str": {
            "name": "test_photo__str",
            "location": 422,
            "return": [],
            "arguments": {}
        },
        "test_place__converters": {
            "name": "test_place__converters",
            "location": 434,
            "return": [],
            "arguments": {}
        },
        "test_place__empty": {
            "name": "test_place__empty",
            "location": 440,
            "return": [],
            "arguments": {}
        },
        "test_places__nearby": {
            "name": "test_places__nearby",
            "location": 447,
            "return": [],
            "arguments": {}
        },
        "test_project__empty": {
            "name": "test_project__empty",
            "location": 458,
            "return": [],
            "arguments": {}
        },
        "test_search__empty": {
            "name": "test_search__empty",
            "location": 472,
            "return": [],
            "arguments": {}
        },
        "test_search__place": {
            "name": "test_search__place",
            "location": 479,
            "return": [],
            "arguments": {}
        },
        "test_search__project": {
            "name": "test_search__project",
            "location": 485,
            "return": [],
            "arguments": {}
        },
        "test_search__taxon": {
            "name": "test_search__taxon",
            "location": 491,
            "return": [],
            "arguments": {}
        },
        "test_search__user": {
            "name": "test_search__user",
            "location": 497,
            "return": [],
            "arguments": {}
        },
        "test_taxon__converters": {
            "name": "test_taxon__converters",
            "location": 507,
            "return": [],
            "arguments": {}
        },
        "test_taxon__empty": {
            "name": "test_taxon__empty",
            "location": 512,
            "return": [],
            "arguments": {}
        },
        "test_taxon__str": {
            "name": "test_taxon__str",
            "location": 521,
            "return": [],
            "arguments": {}
        },
        "test_taxon__ancestors_children": {
            "name": "test_taxon__ancestors_children",
            "location": 535,
            "return": [],
            "arguments": {}
        },
        "test_taxon__ancestor_ids": {
            "name": "test_taxon__ancestor_ids",
            "location": 543,
            "return": [],
            "arguments": {}
        },
        "test_taxon__all_names": {
            "name": "test_taxon__all_names",
            "location": 548,
            "return": [],
            "arguments": {}
        },
        "test_taxon__autocomplete": {
            "name": "test_taxon__autocomplete",
            "location": 558,
            "return": [],
            "arguments": {}
        },
        "test_taxon__conservation_status": {
            "name": "test_taxon__conservation_status",
            "location": 563,
            "return": [],
            "arguments": {}
        },
        "test_taxon__conservation_status_aliases": {
            "name": "test_taxon__conservation_status_aliases",
            "location": 571,
            "return": [],
            "arguments": {}
        },
        "test_taxon__conservation_statuses": {
            "name": "test_taxon__conservation_statuses",
            "location": 581,
            "return": [],
            "arguments": {}
        },
        "test_taxon__establishment_means": {
            "name": "test_taxon__establishment_means",
            "location": 589,
            "return": [],
            "arguments": {}
        },
        "test_taxon__listed_taxa": {
            "name": "test_taxon__listed_taxa",
            "location": 596,
            "return": [],
            "arguments": {}
        },
        "test_taxon__properties": {
            "name": "test_taxon__properties",
            "location": 610,
            "return": [],
            "arguments": {}
        },
        "test_taxon_properties__partial": {
            "name": "test_taxon_properties__partial",
            "location": 617,
            "return": [],
            "arguments": {}
        },
        "test_taxon__emoji": {
            "name": "test_taxon__emoji",
            "location": 623,
            "return": [],
            "arguments": {
                "taxon_id": []
            }
        },
        "test_taxon__icon_url": {
            "name": "test_taxon__icon_url",
            "location": 629,
            "return": [],
            "arguments": {
                "taxon_name": []
            }
        },
        "test_taxon__no_default_photo": {
            "name": "test_taxon__no_default_photo",
            "location": 635,
            "return": [],
            "arguments": {
                "taxon_id": []
            }
        },
        "test_taxon__taxonomy": {
            "name": "test_taxon__taxonomy",
            "location": 644,
            "return": [],
            "arguments": {}
        },
        "test_taxon__update_from_full_record": {
            "name": "test_taxon__update_from_full_record",
            "location": 664,
            "return": [],
            "arguments": {}
        },
        "test_taxon_count__copy": {
            "name": "test_taxon_count__copy",
            "location": 668,
            "return": [],
            "arguments": {}
        },
        "test_taxon_counts__converters": {
            "name": "test_taxon_counts__converters",
            "location": 680,
            "return": [],
            "arguments": {}
        },
        "test_taxon_counts__empty": {
            "name": "test_taxon_counts__empty",
            "location": 687,
            "return": [],
            "arguments": {}
        },
        "test_user__converters": {
            "name": "test_user__converters",
            "location": 697,
            "return": [],
            "arguments": {}
        },
        "test_user__empty": {
            "name": "test_user__empty",
            "location": 702,
            "return": [],
            "arguments": {}
        },
        "test_user__partial": {
            "name": "test_user__partial",
            "location": 708,
            "return": [],
            "arguments": {}
        },
        "test_user__properties": {
            "name": "test_user__properties",
            "location": 714,
            "return": [],
            "arguments": {}
        },
        "test_user__str": {
            "name": "test_user__str",
            "location": 720,
            "return": [],
            "arguments": {}
        },
        "test_user_count__str": {
            "name": "test_user_count__str",
            "location": 725,
            "return": [],
            "arguments": {}
        },
        "test_user_counts__identifiers": {
            "name": "test_user_counts__identifiers",
            "location": 730,
            "return": [],
            "arguments": {}
        },
        "test_user_counts__observers": {
            "name": "test_user_counts__observers",
            "location": 737,
            "return": [],
            "arguments": {}
        },
        "test_user_counts__empty": {
            "name": "test_user_counts__empty",
            "location": 744,
            "return": [],
            "arguments": {}
        }
    },
    "pyinaturalist-main/test/test_paginator.py": {
        "test_iter": {
            "name": "test_iter",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_iter__with_limit": {
            "name": "test_iter__with_limit",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_count": {
            "name": "test_count",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_next_page__exhausted": {
            "name": "test_next_page__exhausted",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_str": {
            "name": "test_str",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_wrapper_paginator": {
            "name": "test_wrapper_paginator",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_str.get_observations": {
            "name": "get_observations",
            "location": 81,
            "return": [
                "str",
                "bool",
                "int",
                "Optional[str]",
                "List[Dict]"
            ],
            "arguments": {}
        }
    },
    "pyinaturalist-main/test/test_request_params.py": {
        "test_convert_bool_params": {
            "name": "test_convert_bool_params",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_convert_datetime_params": {
            "name": "test_convert_datetime_params",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "tzlocal": [
                    "bool",
                    "str"
                ],
                "param": [
                    "str"
                ],
                "value": [
                    "int",
                    "Optional[str]",
                    "Callable[[str], None]"
                ],
                "expected": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_convert_list_params": {
            "name": "test_convert_list_params",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_convert_observation_fields": {
            "name": "test_convert_observation_fields",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_convert_pagination_params": {
            "name": "test_convert_pagination_params",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_interval_ranges__day": {
            "name": "test_get_interval_ranges__day",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "start": [
                    "Optional[bool]"
                ],
                "end": [
                    "Optional[bool]"
                ],
                "interval": [
                    "Optional[bool]"
                ]
            }
        },
        "test_get_interval_ranges__month": {
            "name": "test_get_interval_ranges__month",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_interval_ranges__year": {
            "name": "test_get_interval_ranges__year",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_strip_empty_params": {
            "name": "test_strip_empty_params",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validate_ids": {
            "name": "test_validate_ids",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "str",
                    "int",
                    "bytes"
                ],
                "expected": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "test_validate_ids__invalid": {
            "name": "test_validate_ids__invalid",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_preprocess_request_params": {
            "name": "test_preprocess_request_params",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "mock_bool": [],
                "mock_datetime": [],
                "mock_list": [],
                "mock_strip": []
            }
        },
        "test_preprocess_request_body": {
            "name": "test_preprocess_request_body",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "mock_bool": [],
                "mock_list": [],
                "mock_datetime": [],
                "mock_strip": []
            }
        },
        "test_validate_multiple_choice_param": {
            "name": "test_validate_multiple_choice_param",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validate_multiple_choice_params": {
            "name": "test_validate_multiple_choice_params",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "params": []
            }
        },
        "test_validate_multiple_choice_params__normalization": {
            "name": "test_validate_multiple_choice_params__normalization",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "int",
                    "Callable",
                    "str",
                    "Dict[str, Any]"
                ],
                "expected_value": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_validate_multiple_choice_params.append_invalid_value": {
            "name": "append_invalid_value",
            "location": 228,
            "return": [
                "int",
                "bool",
                "Optional[int]",
                "List[str]"
            ],
            "arguments": {
                "value": [
                    "type",
                    "T",
                    "Sequence[Tuple[str, str]]",
                    "dict",
                    "int",
                    "Union[str, bytes]",
                    "Dict[str, Union[str, bool]]"
                ]
            }
        }
    },
    "pyinaturalist-main/test/test_session.py": {
        "test_http_methods": {
            "name": "test_http_methods",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "mock_send": [
                    "mock.Mock"
                ],
                "mock_format": [
                    "mock.Mock"
                ],
                "http_func": [
                    "str"
                ],
                "http_method": [
                    "bool",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "test_request_headers": {
            "name": "test_request_headers",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "mock_send": [],
                "mock_format": [
                    "str",
                    "List[str]",
                    "bool",
                    "Type[Any]"
                ]
            }
        },
        "test_request_dry_run": {
            "name": "test_request_dry_run",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "mock_send": [],
                "mock_getenv": [],
                "mock_format": [
                    "mock.Mock"
                ],
                "enabled_env": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Union[bool, None]"
                ],
                "write_only_env": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Union[bool, None]"
                ],
                "method": [],
                "expected_real_request": [
                    "mock.Mock"
                ]
            }
        },
        "test_request_dry_run_kwarg": {
            "name": "test_request_dry_run_kwarg",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "mock_request": []
            }
        },
        "test_request_dry_run_disabled": {
            "name": "test_request_dry_run_disabled",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_request_validate_json__retry_failure": {
            "name": "test_request_validate_json__retry_failure",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "mock_sleep": [],
                "requests_mock": []
            }
        },
        "test_request_validate_json__retry_success": {
            "name": "test_request_validate_json__retry_success",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": [
                    "str"
                ]
            }
        },
        "test_session__cache_file": {
            "name": "test_session__cache_file",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_session__custom_expiration": {
            "name": "test_session__custom_expiration",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_session__custom_retry": {
            "name": "test_session__custom_retry",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_session__send": {
            "name": "test_session__send",
            "location": 184,
            "return": [
                ""
            ],
            "arguments": {
                "mock_limiter": [
                    "mock.Mock"
                ],
                "mock_requests_send": []
            }
        },
        "test_session__send__cache_settings": {
            "name": "test_session__send__cache_settings",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {
                "mock_validate_json": [
                    "mock.Mock"
                ],
                "mock_cache_send": [
                    "mock.Mock"
                ]
            }
        },
        "test_get_local_session": {
            "name": "test_get_local_session",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_clear_cache": {
            "name": "test_clear_cache",
            "location": 213,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_refresh_params": {
            "name": "test_get_refresh_params",
            "location": 221,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pyinaturalist-main/test/__init__.py": {},
    "pyinaturalist-main/test/controllers/test_observation_controller.py": {
        "test_from_id": {
            "name": "test_from_id",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_from_id__not_found": {
            "name": "test_from_id__not_found",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_from_ids": {
            "name": "test_from_ids",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_from_ids__limit": {
            "name": "test_from_ids__limit",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_search": {
            "name": "test_search",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_histogram": {
            "name": "test_histogram",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_identifiers": {
            "name": "test_identifiers",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_observers": {
            "name": "test_observers",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_life_list": {
            "name": "test_life_list",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_popular_fields": {
            "name": "test_popular_fields",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_species_counts": {
            "name": "test_species_counts",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_taxon_summary__with_conservation_status": {
            "name": "test_taxon_summary__with_conservation_status",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_taxon_summary__with_listed_taxon": {
            "name": "test_taxon_summary__with_listed_taxon",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        }
    },
    "pyinaturalist-main/test/controllers/test_place_controller.py": {
        "test_from_id": {
            "name": "test_from_id",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_from_ids": {
            "name": "test_from_ids",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_autocomplete": {
            "name": "test_autocomplete",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_get_places_autocomplete__all_pages": {
            "name": "test_get_places_autocomplete__all_pages",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_nearby": {
            "name": "test_nearby",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        }
    },
    "pyinaturalist-main/test/controllers/test_project_controller.py": {
        "test_from_id": {
            "name": "test_from_id",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": [
                    "str"
                ]
            }
        },
        "test_from_ids": {
            "name": "test_from_ids",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": [
                    "str"
                ]
            }
        },
        "test_search": {
            "name": "test_search",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_search__with_obs_fields": {
            "name": "test_search__with_obs_fields",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_add_observation": {
            "name": "test_add_observation",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "get_access_token": [],
                "requests_mock": []
            }
        }
    },
    "pyinaturalist-main/test/controllers/test_taxon_controller.py": {
        "test_from_id": {
            "name": "test_from_id",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": [
                    "str"
                ]
            }
        },
        "test_from_ids": {
            "name": "test_from_ids",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": [
                    "str"
                ]
            }
        },
        "test_autocomplete": {
            "name": "test_autocomplete",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_search": {
            "name": "test_search",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        }
    },
    "pyinaturalist-main/test/controllers/test_user_controller.py": {
        "test_from_id": {
            "name": "test_from_id",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_from_ids": {
            "name": "test_from_ids",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_autocomplete": {
            "name": "test_autocomplete",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        }
    },
    "pyinaturalist-main/test/docs/test_docstrings.py": {
        "func_template": {
            "name": "func_template",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_copy_docstrings": {
            "name": "test_copy_docstrings",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_copy_docstrings__extend_args": {
            "name": "test_copy_docstrings__extend_args",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_copy_docstrings__without_returns": {
            "name": "test_copy_docstrings__without_returns",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_copy_docstrings.func": {
            "name": "func",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "test_copy_docstrings__extend_args.func": {
            "name": "func",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "test_copy_docstrings__without_returns.func": {
            "name": "func",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pyinaturalist-main/test/docs/test_signatures.py": {
        "test_document_request_params": {
            "name": "test_document_request_params",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "test_copy_signatures": {
            "name": "test_copy_signatures",
            "location": 8,
            "return": [],
            "arguments": {}
        }
    },
    "pyinaturalist-main/test/sample_data/get_identifications.py": {},
    "pyinaturalist-main/test/sample_data/get_observation.py": {},
    "pyinaturalist-main/test/sample_data/get_observations_node.py": {},
    "pyinaturalist-main/test/sample_data/get_observation_fields.py": {},
    "pyinaturalist-main/test/sample_data/get_observation_histogram_day.py": {},
    "pyinaturalist-main/test/sample_data/get_observation_histogram_hour.py": {},
    "pyinaturalist-main/test/sample_data/get_observation_histogram_month.py": {},
    "pyinaturalist-main/test/sample_data/get_observation_histogram_month_of_year.py": {},
    "pyinaturalist-main/test/sample_data/get_observation_histogram_week.py": {},
    "pyinaturalist-main/test/sample_data/get_observation_histogram_week_of_year.py": {},
    "pyinaturalist-main/test/sample_data/get_observation_popular_field_values.py": {},
    "pyinaturalist-main/test/sample_data/get_observation_species_counts.py": {},
    "pyinaturalist-main/test/sample_data/get_observation_taxon_summary.py": {},
    "pyinaturalist-main/test/sample_data/get_places_autocomplete.py": {},
    "pyinaturalist-main/test/sample_data/get_places_by_id.py": {},
    "pyinaturalist-main/test/sample_data/get_places_nearby.py": {},
    "pyinaturalist-main/test/sample_data/get_projects.py": {},
    "pyinaturalist-main/test/sample_data/get_projects_by_id.py": {},
    "pyinaturalist-main/test/sample_data/get_search.py": {},
    "pyinaturalist-main/test/sample_data/get_taxa.py": {},
    "pyinaturalist-main/test/sample_data/get_taxa_autocomplete.py": {},
    "pyinaturalist-main/test/sample_data/get_taxa_autocomplete_minified.py": {},
    "pyinaturalist-main/test/sample_data/get_taxa_by_id.py": {},
    "pyinaturalist-main/test/sample_data/get_users_autocomplete.py": {},
    "pyinaturalist-main/test/sample_data/get_user_by_id.py": {},
    "pyinaturalist-main/test/v0/test_observations_v0.py": {
        "get_observations_response": {
            "name": "get_observations_response",
            "location": 22,
            "return": [],
            "arguments": {
                "response_format": []
            }
        },
        "test_get_observations": {
            "name": "test_get_observations",
            "location": 28,
            "return": [],
            "arguments": {
                "response_format": [],
                "requests_mock": []
            }
        },
        "test_get_observations__invalid_format": {
            "name": "test_get_observations__invalid_format",
            "location": 56,
            "return": [],
            "arguments": {
                "response_format": []
            }
        },
        "test_create_observation": {
            "name": "test_create_observation",
            "location": 61,
            "return": [],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_create_observation__with_datetime": {
            "name": "test_create_observation__with_datetime",
            "location": 77,
            "return": [],
            "arguments": {
                "post": [],
                "requests_mock": []
            }
        },
        "test_create_observation__with_photos": {
            "name": "test_create_observation__with_photos",
            "location": 95,
            "return": [],
            "arguments": {
                "post": [],
                "mock_upload_photos": []
            }
        },
        "test_create_observation__with_sounds": {
            "name": "test_create_observation__with_sounds",
            "location": 105,
            "return": [],
            "arguments": {
                "post": [],
                "mock_upload_sounds": []
            }
        },
        "test_create_observation_fail": {
            "name": "test_create_observation_fail",
            "location": 113,
            "return": [],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_update_observation": {
            "name": "test_update_observation",
            "location": 133,
            "return": [],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_update_observation__with_photos": {
            "name": "test_update_observation__with_photos",
            "location": 154,
            "return": [],
            "arguments": {
                "put": [],
                "mock_upload_photos": []
            }
        },
        "test_update_observation__with_sounds": {
            "name": "test_update_observation__with_sounds",
            "location": 164,
            "return": [],
            "arguments": {
                "put": [],
                "mock_upload_sounds": []
            }
        },
        "test_update_nonexistent_observation": {
            "name": "test_update_nonexistent_observation",
            "location": 172,
            "return": [],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_update_observation_not_mine": {
            "name": "test_update_observation_not_mine",
            "location": 193,
            "return": [],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_upload_photos": {
            "name": "test_upload_photos",
            "location": 212,
            "return": [],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_upload_sounds": {
            "name": "test_upload_sounds",
            "location": 225,
            "return": [],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_delete_observation": {
            "name": "test_delete_observation",
            "location": 238,
            "return": [],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_delete_unexisting_observation": {
            "name": "test_delete_unexisting_observation",
            "location": 244,
            "return": [],
            "arguments": {
                "requests_mock": []
            }
        }
    },
    "pyinaturalist-main/test/v0/test_observation_fields_v0.py": {
        "test_get_observation_fields": {
            "name": "test_get_observation_fields",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_get_observation_fields__all_pages": {
            "name": "test_get_observation_fields__all_pages",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_put_observation_field_values": {
            "name": "test_put_observation_field_values",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        }
    },
    "pyinaturalist-main/test/v1/test_controlled_terms.py": {
        "test_get_controlled_terms": {
            "name": "test_get_controlled_terms",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_get_controlled_terms_for_taxon": {
            "name": "test_get_controlled_terms_for_taxon",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        }
    },
    "pyinaturalist-main/test/v1/test_identifications.py": {
        "test_get_identifications": {
            "name": "test_get_identifications",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_get_identifications_by_id": {
            "name": "test_get_identifications_by_id",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        }
    },
    "pyinaturalist-main/test/v1/test_messages.py": {
        "test_get_message_by_id": {
            "name": "test_get_message_by_id",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_get_messages": {
            "name": "test_get_messages",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_get_messages__threads": {
            "name": "test_get_messages__threads",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_get_unread_meassage_count": {
            "name": "test_get_unread_meassage_count",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_get_unread_meassage_count__invalid": {
            "name": "test_get_unread_meassage_count__invalid",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        }
    },
    "pyinaturalist-main/test/v1/test_node_api.py": {
        "test_get_user_by_id": {
            "name": "test_get_user_by_id",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": [
                    "str"
                ]
            }
        },
        "test_get_users_autocomplete": {
            "name": "test_get_users_autocomplete",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        }
    },
    "pyinaturalist-main/test/v1/test_observations.py": {
        "test_get_observation": {
            "name": "test_get_observation",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_get_observation_histogram": {
            "name": "test_get_observation_histogram",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_get_observations": {
            "name": "test_get_observations",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_get_observations__all_pages": {
            "name": "test_get_observations__all_pages",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_get_observation__non_existent": {
            "name": "test_get_observation__non_existent",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_get_observation_identifiers": {
            "name": "test_get_observation_identifiers",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_get_observation_observers": {
            "name": "test_get_observation_observers",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_get_observation_popular_field_values": {
            "name": "test_get_observation_popular_field_values",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_get_observation_species_counts": {
            "name": "test_get_observation_species_counts",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_get_observation_species_counts__all_pages": {
            "name": "test_get_observation_species_counts__all_pages",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_get_observation_species_counts__invalid_multiple_choice_params": {
            "name": "test_get_observation_species_counts__invalid_multiple_choice_params",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_observation_taxonomy": {
            "name": "test_get_observation_taxonomy",
            "location": 204,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_get_observation_taxon_summary__with_conservation_status": {
            "name": "test_get_observation_taxon_summary__with_conservation_status",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_get_observation_taxon_summary__with_listed_taxon": {
            "name": "test_get_observation_taxon_summary__with_listed_taxon",
            "location": 233,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_create_observation": {
            "name": "test_create_observation",
            "location": 248,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": [
                    "str"
                ]
            }
        },
        "test_create_observation__with_files": {
            "name": "test_create_observation__with_files",
            "location": 264,
            "return": [
                ""
            ],
            "arguments": {
                "mock_post": [],
                "mock_upload": []
            }
        },
        "test_update_observation": {
            "name": "test_update_observation",
            "location": 279,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_update_observation__with_photos": {
            "name": "test_update_observation__with_photos",
            "location": 297,
            "return": [
                ""
            ],
            "arguments": {
                "mock_put": [],
                "mock_upload": []
            }
        },
        "test_update_observation__with_photo_ids": {
            "name": "test_update_observation__with_photo_ids",
            "location": 310,
            "return": [
                ""
            ],
            "arguments": {
                "mock_put": [],
                "mock_get_observation": [
                    "mock.MagicMock"
                ]
            }
        },
        "test_update_observation__remove_existing_photos": {
            "name": "test_update_observation__remove_existing_photos",
            "location": 320,
            "return": [
                ""
            ],
            "arguments": {
                "mock_put": [
                    "mock.MagicMock"
                ]
            }
        },
        "test_upload": {
            "name": "test_upload",
            "location": 327,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_upload__with_photo_ids": {
            "name": "test_upload__with_photo_ids",
            "location": 350,
            "return": [
                ""
            ],
            "arguments": {
                "mock_update_observation": [
                    "mock.Mock"
                ]
            }
        },
        "test_delete_observation": {
            "name": "test_delete_observation",
            "location": 355,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": [
                    "mock.Mock"
                ]
            }
        }
    },
    "pyinaturalist-main/test/v1/test_observation_fields.py": {
        "test_set_observation_field": {
            "name": "test_set_observation_field",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_delete_observation_field": {
            "name": "test_delete_observation_field",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        }
    },
    "pyinaturalist-main/test/v1/test_places.py": {
        "test_get_places_by_id": {
            "name": "test_get_places_by_id",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_get_places_by_id__invalid_inputs": {
            "name": "test_get_places_by_id__invalid_inputs",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "place_id": [
                    "str",
                    "Set[int]",
                    "int",
                    "Optional[int]",
                    "Union[int,str]"
                ]
            }
        },
        "test_get_places_nearby": {
            "name": "test_get_places_nearby",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_get_places_autocomplete": {
            "name": "test_get_places_autocomplete",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_get_places_autocomplete__all_pages": {
            "name": "test_get_places_autocomplete__all_pages",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_get_places_autocomplete__single_page": {
            "name": "test_get_places_autocomplete__single_page",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        }
    },
    "pyinaturalist-main/test/v1/test_posts.py": {
        "test_get_posts_from_login": {
            "name": "test_get_posts_from_login",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_get_posts_from_project": {
            "name": "test_get_posts_from_project",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        }
    },
    "pyinaturalist-main/test/v1/test_projects.py": {
        "test_get_projects": {
            "name": "test_get_projects",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_get_projects_by_id": {
            "name": "test_get_projects_by_id",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_add_project_observation": {
            "name": "test_add_project_observation",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_add_project_users": {
            "name": "test_add_project_users",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "mock_put": [
                    "mock.Mock"
                ],
                "requests_mock": []
            }
        },
        "test_delete_project_observation": {
            "name": "test_delete_project_observation",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": [
                    "mock.Mock"
                ]
            }
        },
        "test_delete_project_users": {
            "name": "test_delete_project_users",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "mock_put": [],
                "requests_mock": []
            }
        },
        "test_update_project": {
            "name": "test_update_project",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "mock_put": [
                    "mock.MagicMock"
                ]
            }
        }
    },
    "pyinaturalist-main/test/v1/test_search.py": {
        "test_search": {
            "name": "test_search",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        }
    },
    "pyinaturalist-main/test/v1/test_taxa.py": {
        "test_get_taxa": {
            "name": "test_get_taxa",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_get_taxa_by_rank_range": {
            "name": "test_get_taxa_by_rank_range",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "mock_get": [],
                "params": [],
                "expected_ranks": []
            }
        },
        "test_get_taxa_by_id": {
            "name": "test_get_taxa_by_id",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_get_taxa_by_id__invalid_inputs": {
            "name": "test_get_taxa_by_id__invalid_inputs",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "taxon_id": [
                    "str",
                    "Set[int]",
                    "int",
                    "Optional[int]",
                    "Union[int,str]"
                ]
            }
        },
        "test_get_taxa_autocomplete": {
            "name": "test_get_taxa_autocomplete",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        },
        "test_get_taxa_map_layers": {
            "name": "test_get_taxa_map_layers",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        }
    },
    "pyinaturalist-main/test/v1/test_users.py": {
        "test_get_user_by_id": {
            "name": "test_get_user_by_id",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": [
                    "str"
                ]
            }
        },
        "test_get_users_autocomplete": {
            "name": "test_get_users_autocomplete",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "requests_mock": []
            }
        }
    }
}
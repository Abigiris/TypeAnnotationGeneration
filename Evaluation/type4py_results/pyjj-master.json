{
    "pyjj-master/setup.py": {
        "get_long_description": {
            "name": "get_long_description",
            "location": 6,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "pyjj-master/pyjj/config.py": {
        "handle_exception": {
            "name": "handle_exception",
            "location": 6,
            "return": [
                "float",
                "bool",
                "Callable[[None], bool]",
                "List[str]"
            ],
            "arguments": {
                "func": [
                    "Callable"
                ]
            }
        },
        "handle_exception.wrapper": {
            "name": "wrapper",
            "location": 10,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {}
        },
        "PyjjConfig.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PyjjConfig.parse": {
            "name": "parse",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PyjjConfig.update": {
            "name": "update",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyjj-master/pyjj/database.py": {
        "generate_create_sqls": {
            "name": "generate_create_sqls",
            "location": 8,
            "return": [
                "Optional[str]",
                "Optional[List[str]]",
                "str",
                "bool"
            ],
            "arguments": {
                "tbl_name": [
                    "str",
                    "Tuple[str]",
                    "dict"
                ],
                "columns": [
                    "dict",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "keys": [
                    "dict",
                    "str",
                    "List[int]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "handle_exception": {
            "name": "handle_exception",
            "location": 27,
            "return": [
                "float",
                "bool",
                "Callable[[None], bool]",
                "List[str]"
            ],
            "arguments": {
                "func": [
                    "Callable"
                ]
            }
        },
        "handle_exception.wrapper": {
            "name": "wrapper",
            "location": 31,
            "return": [
                "datetime.datetime",
                "int",
                "str",
                "float"
            ],
            "arguments": {}
        },
        "Database.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "division": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "Database.add_url": {
            "name": "add_url",
            "location": 59,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool",
                    "dict"
                ],
                "tags": [
                    "str",
                    "bool",
                    "int",
                    "type",
                    "Optional[str]"
                ]
            }
        },
        "Database.list_urls": {
            "name": "list_urls",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "bool",
                    "List['LabelTag']",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Database.edit_url": {
            "name": "edit_url",
            "location": 110,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Optional[str]"
                ],
                "url": [
                    "bool",
                    "str",
                    "int",
                    "Optional[List[str]]"
                ]
            }
        },
        "Database.get_url": {
            "name": "get_url",
            "location": 127,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Database.remove_url": {
            "name": "remove_url",
            "location": 141,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "Database.list_tags": {
            "name": "list_tags",
            "location": 152,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.add_tags": {
            "name": "add_tags",
            "location": 162,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url_id": [
                    "str",
                    "int",
                    "Iterable[str]"
                ],
                "tags": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Database.check_tag": {
            "name": "check_tag",
            "location": 189,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "List[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "Database.remove_url_tag": {
            "name": "remove_url_tag",
            "location": 205,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url_id": [
                    "str",
                    "int",
                    "bool",
                    "Optional[Exception]"
                ],
                "tag": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Database.get_random_url": {
            "name": "get_random_url",
            "location": 224,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "Dict[str, str]",
                    "bool",
                    "List[Tuple[str, int]]",
                    "Optional[str]"
                ]
            }
        },
        "Database.cursor": {
            "name": "cursor",
            "location": 235,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.close": {
            "name": "close",
            "location": 240,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.setup": {
            "name": "setup",
            "location": 245,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyjj-master/pyjj/messages.py": {
        "msg": {
            "name": "msg",
            "location": 11,
            "return": [
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "status": [
                    "Sequence[Tuple[str, int]]",
                    "Tuple[int, int]",
                    "List[dict]",
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "message": [
                    "str",
                    "int"
                ]
            }
        },
        "header": {
            "name": "header",
            "location": 22,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "title": [
                    "str",
                    "int",
                    "bool"
                ],
                "message": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "content": {
            "name": "content",
            "location": 32,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "message": [
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "division": {
            "name": "division",
            "location": 41,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "division": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "pyjj-master/pyjj/utils.py": {
        "reformat_url": {
            "name": "reformat_url",
            "location": 5,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "validate_url": {
            "name": "validate_url",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "str",
                    "List[str]",
                    "Optional[Container[str]]"
                ]
            }
        }
    },
    "pyjj-master/pyjj/__init__.py": {
        "pyjj": {
            "name": "pyjj",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "dict",
                    "Dict[str, Any]",
                    "pyramid.config.Configurator"
                ]
            }
        },
        "use": {
            "name": "use",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, bool]"
                ],
                "division": [
                    "dict",
                    "Dict[str, bool]"
                ]
            }
        },
        "list": {
            "name": "list",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "str",
                    "List[str]",
                    "cmk.utils.type_defs.CheckPluginName",
                    "Optional[str]"
                ],
                "tag": [
                    "str",
                    "List[str]",
                    "cmk.utils.type_defs.CheckPluginName",
                    "Optional[str]"
                ]
            }
        },
        "add": {
            "name": "add",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "str",
                    "dict",
                    "bool"
                ],
                "tags": [
                    "str",
                    "bool",
                    "dict",
                    "Type[config.Config]"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "edit": {
            "name": "edit",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "str",
                    "int",
                    "dict",
                    "Awaitable"
                ],
                "id": [
                    "str",
                    "int",
                    "dict",
                    "Awaitable"
                ],
                "url": [
                    "str",
                    "List[str]",
                    "bytes",
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "remove": {
            "name": "remove",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "str",
                    "Mapping[str, Any]",
                    "dict",
                    "Mapping[str, str]",
                    "int"
                ],
                "id": [
                    "str",
                    "Mapping[str, Any]",
                    "dict",
                    "Mapping[str, str]",
                    "int"
                ],
                "tag": [
                    "str",
                    "Union[str, dict]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "eureka": {
            "name": "eureka",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "str",
                    "dict",
                    "int",
                    "List[str]"
                ],
                "tag": [
                    "str",
                    "dict",
                    "int",
                    "List[str]"
                ]
            }
        },
        "tags": {
            "name": "tags",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "pyjj-master/tests/test_config.py": {
        "test_handle_exception_decorator": {
            "name": "test_handle_exception_decorator",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "capsys": [
                    "int",
                    "Callable",
                    "Tuple[float, float, float, float, float]",
                    "float"
                ]
            }
        },
        "test_parse_config": {
            "name": "test_parse_config",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "tmp_path": [
                    "str"
                ],
                "capsys": [
                    "dict"
                ]
            }
        },
        "test_update_config": {
            "name": "test_update_config",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "tmp_path": [
                    "str"
                ],
                "capsys": []
            }
        },
        "test_handle_exception_decorator.dummy_os": {
            "name": "dummy_os",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_handle_exception_decorator.dummy_val": {
            "name": "dummy_val",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        }
    }
}
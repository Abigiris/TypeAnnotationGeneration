{
    "pymfe-master/setup.py": {},
    "pymfe-master/docs/source/conf.py": {},
    "pymfe-master/docs/source/pages/run.py": {
        "meta_features_description": {
            "name": "meta_features_description",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pymfe-master/docs/sphinxext/github_link.py": {
        "_get_git_revision": {
            "name": "_get_git_revision",
            "location": 13,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {}
        },
        "_linkcode_resolve": {
            "name": "_linkcode_resolve",
            "location": 22,
            "return": [
                "Type"
            ],
            "arguments": {
                "domain": [
                    "List[Tuple[int, int]]",
                    "bool",
                    "str",
                    "int"
                ],
                "info": [
                    "str",
                    "dict",
                    "Mapping[str, Dict[str, Any]]",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ],
                "package": [
                    "str",
                    "dict",
                    "int",
                    "List[str]"
                ],
                "url_fmt": [
                    "List[str]",
                    "str",
                    "int",
                    "Sequence[bytes]"
                ],
                "revision": [
                    "Optional[str]",
                    "List[str]",
                    "Type[str]",
                    "Union[str, None]",
                    "str",
                    "Optional[Sequence[str]]"
                ]
            }
        },
        "make_linkcode_resolve": {
            "name": "make_linkcode_resolve",
            "location": 73,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "package": [
                    "str",
                    "bool",
                    "Sequence",
                    "Set[str]",
                    "int"
                ],
                "url_fmt": [
                    "str",
                    "bool",
                    "Sequence",
                    "Set[str]",
                    "int"
                ]
            }
        }
    },
    "pymfe-master/examples/01_introductory_examples/plot_extract_from_model.py": {},
    "pymfe-master/examples/01_introductory_examples/plot_groups.py": {},
    "pymfe-master/examples/01_introductory_examples/plot_pymfe_default.py": {},
    "pymfe-master/examples/01_introductory_examples/plot_pymfe_specific.py": {},
    "pymfe-master/examples/01_introductory_examples/plot_summary.py": {},
    "pymfe-master/examples/01_introductory_examples/plot_unsupervised_meta_features.py": {},
    "pymfe-master/examples/02_advanced_examples/plot_confidence_interval.py": {},
    "pymfe-master/examples/02_advanced_examples/plot_custom_arguments.py": {},
    "pymfe-master/examples/03_miscellaneous_examples/plot_default_value_for_attr_conc.py": {},
    "pymfe-master/examples/03_miscellaneous_examples/plot_large_number_metafeatures.py": {},
    "pymfe-master/examples/03_miscellaneous_examples/plot_listing_metafeatures_groups.py": {},
    "pymfe-master/examples/03_miscellaneous_examples/plot_metafeature_description.py": {},
    "pymfe-master/examples/03_miscellaneous_examples/plot_parse_metafeatures.py": {},
    "pymfe-master/examples/03_miscellaneous_examples/plot_using_pandas_csv_arff.py": {},
    "pymfe-master/examples/04_dev_examples/plot_dev.py": {
        "MFEBoilerplate.precompute_basic_precomp_method": {
            "name": "precompute_basic_precomp_method",
            "location": 262,
            "return": [
                "int",
                "List[int]",
                "Sequence[float]",
                "Optional[bytearray]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[int]",
                    "bool",
                    "str",
                    "Dict[int, str]"
                ],
                "y": [
                    "Optional[numpy.ndarray]",
                    "Optional[int]",
                    "Optional[List[float]]",
                    "Optional[List[str]]",
                    "Optional[T]",
                    "Optional[AnyStr]"
                ],
                "argument_bar": [
                    "Optional[int]",
                    "Optional[object]",
                    "bool"
                ]
            }
        },
        "MFEBoilerplate.precompute_more_info": {
            "name": "precompute_more_info",
            "location": 398,
            "return": [
                "Iterable[Any]",
                "bool",
                "str",
                "int",
                "Dict[str, bool]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Callable",
                    "Type[T]",
                    "str",
                    "Callable[[None], None]",
                    "Type"
                ],
                "argument_bar": [
                    "Optional[bool]",
                    "Optional[int]",
                    "Optional[T]",
                    "bytes"
                ]
            }
        },
        "MFEBoilerplate.precompute_random_values": {
            "name": "precompute_random_values",
            "location": 487,
            "return": [
                "int",
                "str",
                "Tuple[int, int]",
                "numpy.ndarray",
                "Tuple[str, int]"
            ],
            "arguments": {
                "cls": [
                    "Callable[[], Any]",
                    "Dict[str, Any]",
                    "list",
                    "bool",
                    "int"
                ],
                "random_state": [
                    "int",
                    "str",
                    "Callable[[str], int]",
                    "Union[List[str], List[Any]]"
                ]
            }
        },
        "MFEBoilerplate.ft_metafeature_name": {
            "name": "ft_metafeature_name",
            "location": 541,
            "return": [
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "cls": [
                    "Mapping[str, Any]",
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "X": [
                    "numpy.ndarray",
                    "float",
                    "str"
                ],
                "y": [
                    "numpy.ndarray",
                    "float",
                    "str"
                ],
                "random_state": [
                    "Optional[int]"
                ],
                "opt_arg_bar": [
                    "str",
                    "int",
                    "float"
                ],
                "opt_arg_baz": [
                    "Dict[str, Any]",
                    "Optional[numpy.ndarray]",
                    "bool"
                ]
            }
        },
        "MFEBoilerplate.ft_fitted_data_arguments": {
            "name": "ft_fitted_data_arguments",
            "location": 676,
            "return": [
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Type[Exception]",
                    "Sequence",
                    "str",
                    "Callable",
                    "float"
                ],
                "X": [
                    "numpy.ndarray",
                    "int",
                    "bool",
                    "Tuple[int, int]"
                ],
                "N": [
                    "numpy.ndarray",
                    "int",
                    "bool",
                    "Tuple[int, int]"
                ],
                "C": [
                    "numpy.ndarray",
                    "int",
                    "bool",
                    "Tuple[int, int]"
                ],
                "y": [
                    "numpy.ndarray",
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "MFEBoilerplate.ft_using_precomputed_values": {
            "name": "ft_using_precomputed_values",
            "location": 730,
            "return": [
                "bool",
                "List[str]",
                "Match"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "y": [
                    "float",
                    "int",
                    "Optional[int]"
                ],
                "y_unique": [
                    "int",
                    "Optional[str]",
                    "Optional[numpy.array]",
                    "Optional[int]",
                    "numpy.array"
                ]
            }
        },
        "MFEBoilerplate.ft_about_return_values": {
            "name": "ft_about_return_values",
            "location": 814,
            "return": [
                "int",
                "Iterator",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "set",
                    "Type[T]",
                    "type"
                ],
                "y": [
                    "numpy.ndarray",
                    "str",
                    "int",
                    "List[int]",
                    "Union[int, float]",
                    "float",
                    "Tuple[float, float]",
                    "dict"
                ]
            }
        },
        "MFEBoilerplate._protected_methods": {
            "name": "_protected_methods",
            "location": 880,
            "return": [
                "Dict[str, int]",
                "bool",
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Type[object]",
                    "List[dict]",
                    "int"
                ],
                "arg_foo": [
                    "float",
                    "str",
                    "int",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "MFEBoilerplate.non_protected_methods_without_any_prefixes": {
            "name": "non_protected_methods_without_any_prefixes",
            "location": 931,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ]
            }
        },
        "MFEBoilerplate.postprocess_groupName1_groupName2": {
            "name": "postprocess_groupName1_groupName2",
            "location": 942,
            "return": [
                "type",
                "Tuple[Optional[str], Optional[str]]"
            ],
            "arguments": {
                "cls": [
                    "Tuple[str]",
                    "Sequence[int]",
                    "FrozenSet[str]",
                    "Union[bool, Iterable[str]]",
                    "bool"
                ],
                "mtf_names": [
                    "List[str]",
                    "int",
                    "str",
                    "bool"
                ],
                "mtf_vals": [
                    "List[float]",
                    "int",
                    "float",
                    "Callable[[], None]",
                    "numpy.ndarray",
                    "Callable"
                ],
                "mtf_time": [
                    "List[float]",
                    "float"
                ],
                "class_indexes": [
                    "Tuple[str]",
                    "Sequence[int]",
                    "FrozenSet[str]",
                    "Union[bool, Iterable[str]]",
                    "bool"
                ],
                "groups": [
                    "Tuple[str]",
                    "Sequence[int]",
                    "FrozenSet[str]",
                    "Union[bool, Iterable[str]]",
                    "bool"
                ],
                "inserted_group_dep": [
                    "Tuple[str]",
                    "Sequence[int]",
                    "FrozenSet[str]",
                    "Union[bool, Iterable[str]]",
                    "bool"
                ]
            }
        },
        "MFEBoilerplate._protected_methods.inner_functions": {
            "name": "inner_functions",
            "location": 909,
            "return": [
                "bool",
                "Tuple[float, float, float]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "numpy.ndarray",
                    "T"
                ],
                "lamb": [
                    "float",
                    "numpy.ndarray",
                    "T"
                ]
            }
        }
    },
    "pymfe-master/pymfe/clustering.py": {
        "MFEClustering.precompute_clustering_class": {
            "name": "precompute_clustering_class",
            "location": 60,
            "return": [],
            "arguments": {
                "cls": [],
                "y": []
            }
        },
        "MFEClustering.precompute_group_distances": {
            "name": "precompute_group_distances",
            "location": 105,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "dist_metric": [],
                "classes": []
            }
        },
        "MFEClustering.precompute_nearest_neighbors": {
            "name": "precompute_nearest_neighbors",
            "location": 218,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "n_neighbors": [],
                "dist_metric": []
            }
        },
        "MFEClustering.precompute_class_representatives": {
            "name": "precompute_class_representatives",
            "location": 279,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "representative": [],
                "classes": []
            }
        },
        "MFEClustering._calc_normalized_intercls_dist": {
            "name": "_calc_normalized_intercls_dist",
            "location": 356,
            "return": [],
            "arguments": {
                "cls": [],
                "group_inst_a": [],
                "group_inst_b": [],
                "dist_metric": []
            }
        },
        "MFEClustering._calc_pwise_norm_intercls_dist": {
            "name": "_calc_pwise_norm_intercls_dist",
            "location": 374,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "dist_metric": [],
                "classes": [],
                "cls_inds": []
            }
        },
        "MFEClustering._calc_intracls_dists": {
            "name": "_calc_intracls_dists",
            "location": 403,
            "return": [],
            "arguments": {
                "cls": [],
                "instances": [],
                "dist_metric": [],
                "get_max_dist": []
            }
        },
        "MFEClustering._calc_all_intracls_dists": {
            "name": "_calc_all_intracls_dists",
            "location": 422,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "dist_metric": [],
                "get_max_dist": [],
                "cls_inds": [],
                "classes": []
            }
        },
        "MFEClustering._get_nearest_neighbors": {
            "name": "_get_nearest_neighbors",
            "location": 453,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "n_neighbors": [],
                "dist_metric": []
            }
        },
        "MFEClustering._get_class_representatives": {
            "name": "_get_class_representatives",
            "location": 471,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "representative": [],
                "cls_inds": [],
                "classes": []
            }
        },
        "MFEClustering.ft_vdu": {
            "name": "ft_vdu",
            "location": 542,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "dist_metric": [],
                "cls_inds": [],
                "classes": [],
                "intracls_dists": [],
                "pairwise_norm_intercls_dist": []
            }
        },
        "MFEClustering.ft_vdb": {
            "name": "ft_vdb",
            "location": 627,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": []
            }
        },
        "MFEClustering.ft_int": {
            "name": "ft_int",
            "location": 651,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "dist_metric": [],
                "cls_inds": [],
                "classes": [],
                "pairwise_norm_intercls_dist": []
            }
        },
        "MFEClustering.ft_sil": {
            "name": "ft_sil",
            "location": 731,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "dist_metric": [],
                "sample_frac": [],
                "random_state": []
            }
        },
        "MFEClustering.ft_pb": {
            "name": "ft_pb",
            "location": 794,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "dist_metric": []
            }
        },
        "MFEClustering.ft_ch": {
            "name": "ft_ch",
            "location": 845,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": []
            }
        },
        "MFEClustering.ft_nre": {
            "name": "ft_nre",
            "location": 872,
            "return": [],
            "arguments": {
                "cls": [],
                "y": [],
                "class_freqs": []
            }
        },
        "MFEClustering.ft_sc": {
            "name": "ft_sc",
            "location": 909,
            "return": [],
            "arguments": {
                "cls": [],
                "y": [],
                "size": [],
                "normalize": [],
                "class_freqs": []
            }
        }
    },
    "pymfe-master/pymfe/complexity.py": {
        "MFEComplexity.precompute_complexity": {
            "name": "precompute_complexity",
            "location": 64,
            "return": [],
            "arguments": {
                "cls": [],
                "y": []
            }
        },
        "MFEComplexity.precompute_pca_tx": {
            "name": "precompute_pca_tx",
            "location": 114,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "tx_n_components": [],
                "random_state": []
            }
        },
        "MFEComplexity.precompute_complexity_svm": {
            "name": "precompute_complexity_svm",
            "location": 170,
            "return": [],
            "arguments": {
                "cls": [],
                "y": [],
                "max_iter": [],
                "random_state": []
            }
        },
        "MFEComplexity.precompute_norm_dist_mat": {
            "name": "precompute_norm_dist_mat",
            "location": 230,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "metric": [],
                "p": []
            }
        },
        "MFEComplexity.precompute_nearest_enemy": {
            "name": "precompute_nearest_enemy",
            "location": 304,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "metric": [],
                "p": []
            }
        },
        "MFEComplexity.precompute_adjacency_graph": {
            "name": "precompute_adjacency_graph",
            "location": 391,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "metric": [],
                "p": [],
                "n_jobs": []
            }
        },
        "MFEComplexity._calc_norm_dist_mat": {
            "name": "_calc_norm_dist_mat",
            "location": 450,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "metric": [],
                "p": [],
                "N_scaled": [],
                "normalize": []
            }
        },
        "MFEComplexity._build_adjacency_graph": {
            "name": "_build_adjacency_graph",
            "location": 498,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "metric": [],
                "p": [],
                "radius_frac": [],
                "n_jobs": [],
                "cls_inds": [],
                "N_scaled": [],
                "norm_dist_mat": []
            }
        },
        "MFEComplexity._calc_ovo_comb": {
            "name": "_calc_ovo_comb",
            "location": 552,
            "return": [],
            "arguments": {
                "classes": []
            }
        },
        "MFEComplexity._calc_maxmax": {
            "name": "_calc_maxmax",
            "location": 562,
            "return": [],
            "arguments": {
                "N_cls_1": [],
                "N_cls_2": []
            }
        },
        "MFEComplexity._calc_minmin": {
            "name": "_calc_minmin",
            "location": 578,
            "return": [],
            "arguments": {
                "N_cls_1": [],
                "N_cls_2": []
            }
        },
        "MFEComplexity._calc_minmax": {
            "name": "_calc_minmax",
            "location": 594,
            "return": [],
            "arguments": {
                "N_cls_1": [],
                "N_cls_2": []
            }
        },
        "MFEComplexity._calc_maxmin": {
            "name": "_calc_maxmin",
            "location": 611,
            "return": [],
            "arguments": {
                "N_cls_1": [],
                "N_cls_2": []
            }
        },
        "MFEComplexity._calc_overlap": {
            "name": "_calc_overlap",
            "location": 628,
            "return": [],
            "arguments": {
                "N": [],
                "minmax": [],
                "maxmin": []
            }
        },
        "MFEComplexity._interpolate": {
            "name": "_interpolate",
            "location": 646,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "cls_inds": [],
                "random_state": []
            }
        },
        "MFEComplexity._calc_nearest_enemies": {
            "name": "_calc_nearest_enemies",
            "location": 687,
            "return": [],
            "arguments": {
                "cls": [],
                "norm_dist_mat": [],
                "cls_inds": []
            }
        },
        "MFEComplexity._scale_N": {
            "name": "_scale_N",
            "location": 715,
            "return": [],
            "arguments": {
                "N": []
            }
        },
        "MFEComplexity.ft_f1": {
            "name": "ft_f1",
            "location": 729,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "cls_inds": [],
                "class_freqs": []
            }
        },
        "MFEComplexity.ft_f1v": {
            "name": "ft_f1v",
            "location": 813,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "ovo_comb": [],
                "cls_inds": [],
                "class_freqs": []
            }
        },
        "MFEComplexity.ft_f2": {
            "name": "ft_f2",
            "location": 917,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "ovo_comb": [],
                "cls_inds": []
            }
        },
        "MFEComplexity.ft_f3": {
            "name": "ft_f3",
            "location": 993,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "ovo_comb": [],
                "cls_inds": [],
                "class_freqs": []
            }
        },
        "MFEComplexity.ft_f4": {
            "name": "ft_f4",
            "location": 1072,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "ovo_comb": [],
                "cls_inds": [],
                "class_freqs": []
            }
        },
        "MFEComplexity.ft_l1": {
            "name": "ft_l1",
            "location": 1181,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "ovo_comb": [],
                "cls_inds": [],
                "class_freqs": [],
                "svc_pipeline": [],
                "max_iter": [],
                "random_state": []
            }
        },
        "MFEComplexity.ft_l2": {
            "name": "ft_l2",
            "location": 1306,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "ovo_comb": [],
                "cls_inds": [],
                "svc_pipeline": [],
                "max_iter": [],
                "random_state": []
            }
        },
        "MFEComplexity.ft_l3": {
            "name": "ft_l3",
            "location": 1413,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "ovo_comb": [],
                "cls_inds": [],
                "svc_pipeline": [],
                "max_iter": [],
                "random_state": []
            }
        },
        "MFEComplexity.ft_n1": {
            "name": "ft_n1",
            "location": 1540,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "metric": [],
                "p": [],
                "N_scaled": [],
                "norm_dist_mat": []
            }
        },
        "MFEComplexity.ft_n2": {
            "name": "ft_n2",
            "location": 1632,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "metric": [],
                "p": [],
                "class_freqs": [],
                "cls_inds": [],
                "N_scaled": [],
                "norm_dist_mat": []
            }
        },
        "MFEComplexity.ft_n3": {
            "name": "ft_n3",
            "location": 1750,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "metric": [],
                "p": [],
                "N_scaled": [],
                "norm_dist_mat": []
            }
        },
        "MFEComplexity.ft_n4": {
            "name": "ft_n4",
            "location": 1828,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "metric": [],
                "p": [],
                "n_neighbors": [],
                "random_state": [],
                "cls_inds": [],
                "N_scaled": [],
                "norm_dist_mat": [],
                "orig_dist_mat_min": [],
                "orig_dist_mat_ptp": []
            }
        },
        "MFEComplexity.ft_c1": {
            "name": "ft_c1",
            "location": 1964,
            "return": [],
            "arguments": {
                "cls": [],
                "y": [],
                "class_freqs": []
            }
        },
        "MFEComplexity.ft_c2": {
            "name": "ft_c2",
            "location": 2003,
            "return": [],
            "arguments": {
                "cls": [],
                "y": [],
                "class_freqs": []
            }
        },
        "MFEComplexity.ft_t1": {
            "name": "ft_t1",
            "location": 2044,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "metric": [],
                "p": [],
                "cls_inds": [],
                "N_scaled": [],
                "norm_dist_mat": [],
                "orig_dist_mat_min": [],
                "orig_dist_mat_ptp": []
            }
        },
        "MFEComplexity.ft_t2": {
            "name": "ft_t2",
            "location": 2259,
            "return": [],
            "arguments": {
                "cls": [],
                "N": []
            }
        },
        "MFEComplexity.ft_t3": {
            "name": "ft_t3",
            "location": 2292,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "num_attr_pca": [],
                "random_state": []
            }
        },
        "MFEComplexity.ft_t4": {
            "name": "ft_t4",
            "location": 2342,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "num_attr_pca": [],
                "random_state": []
            }
        },
        "MFEComplexity.ft_lsc": {
            "name": "ft_lsc",
            "location": 2394,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "metric": [],
                "p": [],
                "cls_inds": [],
                "N_scaled": [],
                "norm_dist_mat": [],
                "nearest_enemy_dist": []
            }
        },
        "MFEComplexity.ft_density": {
            "name": "ft_density",
            "location": 2497,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "metric": [],
                "p": [],
                "radius_frac": [],
                "n_jobs": [],
                "cls_inds": [],
                "norm_dist_mat": [],
                "adj_graph": []
            }
        },
        "MFEComplexity.ft_cls_coef": {
            "name": "ft_cls_coef",
            "location": 2590,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "metric": [],
                "p": [],
                "radius_frac": [],
                "n_jobs": [],
                "cls_inds": [],
                "norm_dist_mat": [],
                "adj_graph": []
            }
        },
        "MFEComplexity.ft_hubs": {
            "name": "ft_hubs",
            "location": 2682,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "metric": [],
                "p": [],
                "radius_frac": [],
                "n_jobs": [],
                "cls_inds": [],
                "norm_dist_mat": [],
                "adj_graph": []
            }
        },
        "MFEComplexity.ft_t1._calc_hyperspheres_radius": {
            "name": "_calc_hyperspheres_radius",
            "location": 2132,
            "return": [],
            "arguments": {
                "nearest_enemy_ind": [],
                "nearest_enemy_dist": []
            }
        },
        "MFEComplexity.ft_t1._is_hypersphere_in": {
            "name": "_is_hypersphere_in",
            "location": 2172,
            "return": [],
            "arguments": {
                "center_a": [],
                "center_b": [],
                "radius_a": [],
                "radius_b": []
            }
        },
        "MFEComplexity.ft_t1._agglomerate_hyperspheres": {
            "name": "_agglomerate_hyperspheres",
            "location": 2187,
            "return": [],
            "arguments": {
                "centers": [],
                "radius": []
            }
        },
        "MFEComplexity.ft_t1._calc_hyperspheres_radius._recurse_radius_calc": {
            "name": "_recurse_radius_calc",
            "location": 2137,
            "return": [],
            "arguments": {
                "ind_inst": []
            }
        }
    },
    "pymfe-master/pymfe/concept.py": {
        "MFEConcept.precompute_concept_dist": {
            "name": "precompute_concept_dist",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "int",
                    "Type[Exception]",
                    "Sequence",
                    "str",
                    "Callable",
                    "float"
                ],
                "N": [
                    "int",
                    "Optional[numpy.ndarray]",
                    "Optional[int]",
                    "bool",
                    "numpy.ndarray",
                    "float"
                ],
                "concept_dist_metric": [
                    "bool",
                    "str",
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "MFEConcept.ft_conceptvar": {
            "name": "ft_conceptvar",
            "location": 100,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "numpy.ndarray",
                    "Union[int, float]",
                    "Optional[numpy.ndarray]",
                    "str",
                    "int"
                ],
                "N": [
                    "int",
                    "str",
                    "Type[object]",
                    "List[int]",
                    "Iterable[T]"
                ],
                "y": [
                    "int",
                    "List['cirq.Qid']",
                    "bool"
                ],
                "conceptvar_alpha": [
                    "int",
                    "float",
                    "T"
                ],
                "concept_dist_metric": [
                    "numpy.ndarray",
                    "Union[int, float]",
                    "Optional[numpy.ndarray]",
                    "str",
                    "int"
                ],
                "concept_minimum": [
                    "int",
                    "float",
                    "T"
                ],
                "concept_distances": [
                    "numpy.ndarray",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[dict]",
                    "Optional[float]",
                    "Optional[numpy.ndarray]",
                    "bool"
                ]
            }
        },
        "MFEConcept.ft_wg_dist": {
            "name": "ft_wg_dist",
            "location": 175,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "numpy.ndarray",
                    "Union[int, float]",
                    "Optional[numpy.ndarray]",
                    "str",
                    "int"
                ],
                "N": [
                    "int",
                    "str",
                    "Type[object]",
                    "List[int]",
                    "Iterable[T]"
                ],
                "wg_dist_alpha": [
                    "int",
                    "float",
                    "T"
                ],
                "concept_dist_metric": [
                    "numpy.ndarray",
                    "Union[int, float]",
                    "Optional[numpy.ndarray]",
                    "str",
                    "int"
                ],
                "concept_minimum": [
                    "int",
                    "float",
                    "T"
                ],
                "concept_distances": [
                    "numpy.ndarray",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[dict]",
                    "Optional[float]",
                    "Optional[numpy.ndarray]",
                    "bool"
                ]
            }
        },
        "MFEConcept.ft_impconceptvar": {
            "name": "ft_impconceptvar",
            "location": 240,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "numpy.ndarray",
                    "Union[int, float]",
                    "Optional[numpy.ndarray]",
                    "str",
                    "int"
                ],
                "N": [
                    "numpy.ndarray",
                    "Union[int, float]",
                    "Optional[numpy.ndarray]",
                    "str",
                    "int"
                ],
                "y": [
                    "int",
                    "List['cirq.Qid']",
                    "bool"
                ],
                "impconceptvar_alpha": [
                    "int",
                    "float",
                    "T"
                ],
                "concept_dist_metric": [
                    "numpy.ndarray",
                    "Union[int, float]",
                    "Optional[numpy.ndarray]",
                    "str",
                    "int"
                ],
                "concept_distances": [
                    "numpy.ndarray",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[dict]",
                    "Optional[float]",
                    "Optional[numpy.ndarray]",
                    "bool"
                ]
            }
        },
        "MFEConcept.ft_cohesiveness": {
            "name": "ft_cohesiveness",
            "location": 306,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "numpy.ndarray",
                    "Union[int, float]",
                    "Optional[numpy.ndarray]",
                    "str",
                    "int"
                ],
                "N": [
                    "numpy.ndarray",
                    "Union[int, float]",
                    "Optional[numpy.ndarray]",
                    "str",
                    "int"
                ],
                "cohesiveness_alpha": [
                    "int",
                    "float",
                    "T"
                ],
                "concept_dist_metric": [
                    "numpy.ndarray",
                    "Union[int, float]",
                    "Optional[numpy.ndarray]",
                    "str",
                    "int"
                ],
                "concept_distances": [
                    "numpy.ndarray",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[dict]",
                    "Optional[float]",
                    "Optional[numpy.ndarray]",
                    "bool"
                ]
            }
        }
    },
    "pymfe-master/pymfe/general.py": {
        "MFEGeneral.precompute_general_class": {
            "name": "precompute_general_class",
            "location": 53,
            "return": [],
            "arguments": {
                "cls": [],
                "y": []
            }
        },
        "MFEGeneral.ft_attr_to_inst": {
            "name": "ft_attr_to_inst",
            "location": 88,
            "return": [],
            "arguments": {
                "cls": [],
                "X": []
            }
        },
        "MFEGeneral.ft_cat_to_num": {
            "name": "ft_cat_to_num",
            "location": 113,
            "return": [],
            "arguments": {
                "cls": [],
                "X": [],
                "cat_cols": []
            }
        },
        "MFEGeneral.ft_freq_class": {
            "name": "ft_freq_class",
            "location": 153,
            "return": [],
            "arguments": {
                "cls": [],
                "y": [],
                "class_freqs": []
            }
        },
        "MFEGeneral.ft_inst_to_attr": {
            "name": "ft_inst_to_attr",
            "location": 187,
            "return": [],
            "arguments": {
                "cls": [],
                "X": []
            }
        },
        "MFEGeneral.ft_nr_attr": {
            "name": "ft_nr_attr",
            "location": 212,
            "return": [],
            "arguments": {
                "cls": [],
                "X": []
            }
        },
        "MFEGeneral.ft_nr_bin": {
            "name": "ft_nr_bin",
            "location": 234,
            "return": [],
            "arguments": {
                "cls": [],
                "X": []
            }
        },
        "MFEGeneral.ft_nr_cat": {
            "name": "ft_nr_cat",
            "location": 263,
            "return": [],
            "arguments": {
                "cls": [],
                "cat_cols": []
            }
        },
        "MFEGeneral.ft_nr_class": {
            "name": "ft_nr_class",
            "location": 287,
            "return": [],
            "arguments": {
                "cls": [],
                "y": [],
                "classes": []
            }
        },
        "MFEGeneral.ft_nr_inst": {
            "name": "ft_nr_inst",
            "location": 318,
            "return": [],
            "arguments": {
                "cls": [],
                "X": []
            }
        },
        "MFEGeneral.ft_nr_num": {
            "name": "ft_nr_num",
            "location": 340,
            "return": [],
            "arguments": {
                "cls": [],
                "X": [],
                "cat_cols": []
            }
        },
        "MFEGeneral.ft_num_to_cat": {
            "name": "ft_num_to_cat",
            "location": 367,
            "return": [],
            "arguments": {
                "cls": [],
                "X": [],
                "cat_cols": []
            }
        }
    },
    "pymfe-master/pymfe/info_theory.py": {
        "MFEInfoTheory.precompute_class_freq": {
            "name": "precompute_class_freq",
            "location": 57,
            "return": [],
            "arguments": {
                "cls": [],
                "y": []
            }
        },
        "MFEInfoTheory.precompute_entropy": {
            "name": "precompute_entropy",
            "location": 90,
            "return": [],
            "arguments": {
                "cls": [],
                "y": [],
                "C": [],
                "class_freqs": []
            }
        },
        "MFEInfoTheory._calc_entropy": {
            "name": "_calc_entropy",
            "location": 158,
            "return": [],
            "arguments": {
                "cls": [],
                "values": [],
                "value_freqs": []
            }
        },
        "MFEInfoTheory._calc_joint_ent": {
            "name": "_calc_joint_ent",
            "location": 183,
            "return": [],
            "arguments": {
                "cls": [],
                "vec_x": [],
                "vec_y": [],
                "epsilon": []
            }
        },
        "MFEInfoTheory._calc_conc": {
            "name": "_calc_conc",
            "location": 198,
            "return": [],
            "arguments": {
                "cls": [],
                "vec_x": [],
                "vec_y": [],
                "epsilon": []
            }
        },
        "MFEInfoTheory.ft_attr_conc": {
            "name": "ft_attr_conc",
            "location": 216,
            "return": [],
            "arguments": {
                "cls": [],
                "C": [],
                "max_attr_num": [],
                "random_state": []
            }
        },
        "MFEInfoTheory.ft_attr_ent": {
            "name": "ft_attr_ent",
            "location": 277,
            "return": [],
            "arguments": {
                "cls": [],
                "C": [],
                "attr_ent": []
            }
        },
        "MFEInfoTheory.ft_class_conc": {
            "name": "ft_class_conc",
            "location": 316,
            "return": [],
            "arguments": {
                "cls": [],
                "C": [],
                "y": []
            }
        },
        "MFEInfoTheory.ft_class_ent": {
            "name": "ft_class_ent",
            "location": 344,
            "return": [],
            "arguments": {
                "cls": [],
                "y": [],
                "class_ent": [],
                "class_freqs": []
            }
        },
        "MFEInfoTheory.ft_eq_num_attr": {
            "name": "ft_eq_num_attr",
            "location": 392,
            "return": [],
            "arguments": {
                "cls": [],
                "C": [],
                "y": [],
                "class_ent": [],
                "class_freqs": [],
                "mut_inf": []
            }
        },
        "MFEInfoTheory.ft_joint_ent": {
            "name": "ft_joint_ent",
            "location": 457,
            "return": [],
            "arguments": {
                "cls": [],
                "C": [],
                "y": [],
                "joint_ent": []
            }
        },
        "MFEInfoTheory.ft_mut_inf": {
            "name": "ft_mut_inf",
            "location": 511,
            "return": [],
            "arguments": {
                "cls": [],
                "C": [],
                "y": [],
                "mut_inf": [],
                "attr_ent": [],
                "class_ent": [],
                "joint_ent": [],
                "class_freqs": []
            }
        },
        "MFEInfoTheory.ft_ns_ratio": {
            "name": "ft_ns_ratio",
            "location": 591,
            "return": [],
            "arguments": {
                "cls": [],
                "C": [],
                "y": [],
                "attr_ent": [],
                "mut_inf": []
            }
        }
    },
    "pymfe-master/pymfe/itemset.py": {
        "MFEItemset.precompute_binary_matrix": {
            "name": "precompute_binary_matrix",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "complex",
                    "bytes",
                    "bool",
                    "int",
                    "Optional[int]"
                ],
                "C": [
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "MFEItemset._array_to_binary": {
            "name": "_array_to_binary",
            "location": 85,
            "return": [
                "List[int]",
                "numpy.ndarray",
                "Iterable[str]",
                "int"
            ],
            "arguments": {
                "array": [
                    "numpy.ndarray",
                    "OrderedDict"
                ]
            }
        },
        "MFEItemset._matrix_to_binary": {
            "name": "_matrix_to_binary",
            "location": 94,
            "return": [
                "Dict[str, int]",
                "Iterable[str]",
                "int",
                "dict",
                "numpy.ndarray"
            ],
            "arguments": {
                "cls": [
                    "numpy.array",
                    "numpy.ndarray",
                    "str",
                    "set"
                ],
                "C": [
                    "numpy.array",
                    "numpy.ndarray",
                    "str",
                    "set"
                ]
            }
        },
        "MFEItemset.ft_two_itemset": {
            "name": "ft_two_itemset",
            "location": 99,
            "return": [
                "str",
                "bool",
                "int",
                "MutableMapping[str, Any]",
                "bytes",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "type",
                    "int",
                    "bool",
                    "Type[T]"
                ],
                "C": [
                    "int",
                    "T",
                    "bool"
                ],
                "itemset_binary_matrix": [
                    "Optional[numpy.ndarray]",
                    "Optional[Any]",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "MFEItemset.ft_one_itemset": {
            "name": "ft_one_itemset",
            "location": 151,
            "return": [
                "str",
                "bool",
                "int",
                "MutableMapping[str, Any]",
                "bytes",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "type",
                    "int",
                    "bool",
                    "Type[T]"
                ],
                "C": [
                    "Dict[str, Any]",
                    "int",
                    "str"
                ],
                "itemset_binary_matrix": [
                    "Optional[numpy.ndarray]",
                    "Optional[Any]",
                    "Optional[int]",
                    "int"
                ]
            }
        }
    },
    "pymfe-master/pymfe/landmarking.py": {
        "MFELandmarking.precompute_landmarking_sample": {
            "name": "precompute_landmarking_sample",
            "location": 57,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "lm_sample_frac": [],
                "random_state": []
            }
        },
        "MFELandmarking.precompute_landmarking_kfolds": {
            "name": "precompute_landmarking_kfolds",
            "location": 105,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "num_cv_folds": [],
                "shuffle_cv_folds": [],
                "random_state": [],
                "lm_sample_frac": []
            }
        },
        "MFELandmarking._get_sample_inds": {
            "name": "_get_sample_inds",
            "location": 198,
            "return": [],
            "arguments": {
                "cls": [],
                "num_inst": [],
                "lm_sample_frac": [],
                "random_state": []
            }
        },
        "MFELandmarking._sample_data": {
            "name": "_sample_data",
            "location": 215,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "lm_sample_frac": [],
                "random_state": [],
                "sample_inds": []
            }
        },
        "MFELandmarking._rank_feat_importance": {
            "name": "_rank_feat_importance",
            "location": 239,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "lm_sample_frac": [],
                "sample_inds": [],
                "random_state": []
            }
        },
        "MFELandmarking.ft_best_node": {
            "name": "ft_best_node",
            "location": 293,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "score": [],
                "skf": [],
                "num_cv_folds": [],
                "shuffle_cv_folds": [],
                "lm_sample_frac": [],
                "sample_inds": [],
                "random_state": []
            }
        },
        "MFELandmarking.ft_random_node": {
            "name": "ft_random_node",
            "location": 397,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "score": [],
                "skf": [],
                "num_cv_folds": [],
                "shuffle_cv_folds": [],
                "lm_sample_frac": [],
                "sample_inds": [],
                "random_state": []
            }
        },
        "MFELandmarking.ft_worst_node": {
            "name": "ft_worst_node",
            "location": 504,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "score": [],
                "skf": [],
                "num_cv_folds": [],
                "shuffle_cv_folds": [],
                "lm_sample_frac": [],
                "sample_inds": [],
                "random_state": [],
                "cv_folds_imp_rank": []
            }
        },
        "MFELandmarking.ft_linear_discr": {
            "name": "ft_linear_discr",
            "location": 625,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "score": [],
                "skf": [],
                "num_cv_folds": [],
                "shuffle_cv_folds": [],
                "lm_sample_frac": [],
                "sample_inds": [],
                "random_state": []
            }
        },
        "MFELandmarking.ft_naive_bayes": {
            "name": "ft_naive_bayes",
            "location": 727,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "score": [],
                "skf": [],
                "num_cv_folds": [],
                "shuffle_cv_folds": [],
                "lm_sample_frac": [],
                "sample_inds": [],
                "random_state": []
            }
        },
        "MFELandmarking.ft_one_nn": {
            "name": "ft_one_nn",
            "location": 829,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "score": [],
                "skf": [],
                "num_cv_folds": [],
                "shuffle_cv_folds": [],
                "lm_sample_frac": [],
                "sample_inds": [],
                "random_state": []
            }
        },
        "MFELandmarking.ft_elite_nn": {
            "name": "ft_elite_nn",
            "location": 933,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "score": [],
                "skf": [],
                "num_cv_folds": [],
                "shuffle_cv_folds": [],
                "lm_sample_frac": [],
                "sample_inds": [],
                "random_state": [],
                "cv_folds_imp_rank": []
            }
        }
    },
    "pymfe-master/pymfe/mfe.py": {
        "MFE.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "groups": [
                    "Dict[str, object]",
                    "Optional[int]",
                    "numpy.array",
                    "bool"
                ],
                "features": [
                    "bool",
                    "str"
                ],
                "summary": [
                    "int",
                    "bool",
                    "numpy.array",
                    "Iterator[numpy.ndarray]",
                    "float"
                ],
                "measure_time": [
                    "int",
                    "Optional[int]",
                    "pandas.DataFrame",
                    "float",
                    "bool"
                ],
                "wildcard": [
                    "Dict[str, object]",
                    "Optional[int]",
                    "numpy.ndarray",
                    "bool"
                ],
                "score": [
                    "str",
                    "bool"
                ],
                "num_cv_folds": [
                    "int",
                    "Optional[int]"
                ],
                "shuffle_cv_folds": [
                    "int",
                    "bool",
                    "numpy.array",
                    "Iterator[numpy.ndarray]",
                    "float"
                ],
                "lm_sample_frac": [
                    "float",
                    "int",
                    "Tuple[int, int]",
                    "Union[float, numpy.ndarray]",
                    "Optional[Union[int, float]]"
                ],
                "hypparam_model_dt": [
                    "Optional[float]",
                    "numpy.ndarray",
                    "pandas.DataFrame",
                    "List[str]",
                    "bool"
                ],
                "suppress_warnings": [
                    "int",
                    "bool"
                ],
                "random_state": [
                    "int",
                    "Optional[int]",
                    "float",
                    "Optional[float]"
                ]
            }
        },
        "MFE._call_summary_methods": {
            "name": "_call_summary_methods",
            "location": 355,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "feature_values": [
                    "complex",
                    "bool",
                    "Union[Callable, str]"
                ],
                "feature_name": [
                    "str",
                    "bool"
                ],
                "verbose": [
                    "str",
                    "Sequence[str]",
                    "bytes",
                    "T",
                    "Pattern[str]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "suppress_warnings": [
                    "str",
                    "Sequence[MutableMapping]",
                    "list",
                    "Type[Any]"
                ]
            }
        },
        "MFE._call_feature_methods": {
            "name": "_call_feature_methods",
            "location": 492,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "verbose": [
                    "Optional[str]",
                    "pandas.DataFrame"
                ],
                "suppress_warnings": [
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "MFE._fill_col_ind_by_type": {
            "name": "_fill_col_ind_by_type",
            "location": 617,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cat_cols": [
                    "str",
                    "Optional[Dict]",
                    "list",
                    "Optional[str]",
                    "bool",
                    "Tuple[str, int]",
                    "Optional[int]"
                ],
                "check_bool": [
                    "bool",
                    "str",
                    "List[int]",
                    "int",
                    "Dict[str, str]",
                    "Optional[bool]"
                ]
            }
        },
        "MFE._timeopt_type_is_avg": {
            "name": "_timeopt_type_is_avg",
            "location": 689,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MFE._timeopt_include_summary": {
            "name": "_timeopt_include_summary",
            "location": 695,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MFE._combine_time": {
            "name": "_combine_time",
            "location": 701,
            "return": [
                "int",
                "Optional[bool]",
                "Iterable[Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "time_ft": [
                    "float",
                    "List[float]",
                    "list"
                ],
                "times_sm": [
                    "List[float]",
                    "float",
                    "int",
                    "numpy.ndarray",
                    "str",
                    "list"
                ]
            }
        },
        "MFE._set_data_categoric": {
            "name": "_set_data_categoric",
            "location": 740,
            "return": [
                "Dict[str, List[int]]",
                "dict",
                "bytes",
                "str",
                "Optional[float]",
                "IO[bytes]"
            ],
            "arguments": {
                "self": [],
                "transform_num": [
                    "int",
                    "str",
                    "Optional[float]",
                    "Optional[int]"
                ],
                "num_bins": [
                    "int",
                    "str",
                    "Optional[float]",
                    "Optional[int]"
                ]
            }
        },
        "MFE._set_data_numeric": {
            "name": "_set_data_numeric",
            "location": 801,
            "return": [
                "str",
                "Callable",
                "dict",
                "List[Dict]",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "transform_cat": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Callable[[], int]"
                ],
                "rescale": [
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "rescale_args": [
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "MFE.fit": {
            "name": "fit",
            "location": 904,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "Optional[int]",
                    "int",
                    "Sequence"
                ],
                "y": [
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray"
                ],
                "transform_num": [
                    "bool",
                    "int",
                    "Mapping[str, Any]",
                    "str"
                ],
                "transform_cat": [
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "pandas.DataFrame"
                ],
                "rescale": [
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "Optional[bool]",
                    "int",
                    "numpy.ndarray"
                ],
                "rescale_args": [
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "pandas.DataFrame"
                ],
                "cat_cols": [
                    "int",
                    "Tuple[numpy.ndarray, numpy.ndarray, float]",
                    "numpy.ndarray",
                    "float",
                    "tuple",
                    "Tuple[pandas.DataFrame, pandas.DataFrame]",
                    "bool"
                ],
                "check_bool": [
                    "int",
                    "Tuple[numpy.ndarray, numpy.ndarray, float]",
                    "numpy.ndarray",
                    "float",
                    "tuple",
                    "Tuple[pandas.DataFrame, pandas.DataFrame]",
                    "bool"
                ],
                "precomp_groups": [
                    "int",
                    "bool",
                    "Dict[str, object]",
                    "Union[int, None]",
                    "float"
                ],
                "wildcard": [
                    "int",
                    "bool",
                    "Dict[str, object]",
                    "Union[int, None]",
                    "float"
                ],
                "suppress_warnings": [
                    "int",
                    "bool",
                    "Dict[str, object]",
                    "Union[int, None]",
                    "float"
                ],
                "verbose": [
                    "int",
                    "bool",
                    "Dict[str, object]",
                    "Union[int, None]",
                    "float"
                ]
            }
        },
        "MFE.extract": {
            "name": "extract",
            "location": 1179,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": [],
                "verbose": [
                    "bool",
                    "Optional[int]"
                ],
                "enable_parallel": [
                    "bool",
                    "Optional[int]"
                ],
                "suppress_warnings": [
                    "bool",
                    "Optional[int]"
                ],
                "out_type": [
                    "bool",
                    "int",
                    "numpy.array",
                    "str"
                ]
            }
        },
        "MFE.extract_metafeature_names": {
            "name": "extract_metafeature_names",
            "location": 1399,
            "return": [
                "type",
                "Dict[str, str]",
                "List[Callable]",
                "list",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "supervised": [
                    "Dict[str, Any]",
                    "bool",
                    "Iterable[Tuple[int, Any]]"
                ]
            }
        },
        "MFE.extract_with_confidence": {
            "name": "extract_with_confidence",
            "location": 1523,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "sample_num": [
                    "bool",
                    "str"
                ],
                "confidence": [
                    "bool",
                    "str"
                ],
                "arguments_fit": [
                    "bool",
                    "str"
                ],
                "arguments_extract": [
                    "bool",
                    "str"
                ],
                "verbose": [
                    "bool",
                    "str"
                ]
            }
        },
        "MFE.extract_from_model": {
            "name": "extract_from_model",
            "location": 1680,
            "return": [
                "List[str]",
                "Tuple[Sequence]",
                "Dict[str, int]",
                "Mapping[str, object]",
                "str"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "dict",
                    "Mapping[str, int]",
                    "Callable",
                    "type"
                ],
                "arguments_fit": [
                    "Optional[Dict[str, Any]]",
                    "int",
                    "float",
                    "Sequence[str]"
                ],
                "arguments_extract": [
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "verbose": [
                    "int",
                    "Exception",
                    "type",
                    "float",
                    "Optional[Exception]",
                    "Type[BaseException]"
                ]
            }
        },
        "MFE.valid_groups": {
            "name": "valid_groups",
            "location": 1816,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Type[T]",
                    "str",
                    "Callable[[None], None]"
                ]
            }
        },
        "MFE.valid_summary": {
            "name": "valid_summary",
            "location": 1829,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Type[T]",
                    "str",
                    "Callable[[None], None]"
                ]
            }
        },
        "MFE._check_groups_type": {
            "name": "_check_groups_type",
            "location": 1842,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "cls": [
                    "Type[Any]",
                    "Type[T]",
                    "type",
                    "Callable"
                ],
                "groups": [
                    "Optional[Union[str, Any]]",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray"
                ]
            }
        },
        "MFE._filter_groups": {
            "name": "_filter_groups",
            "location": 1854,
            "return": [
                "bool",
                "Optional[Any]"
            ],
            "arguments": {
                "cls": [
                    "Iterable",
                    "Type",
                    "dict",
                    "Type[T]",
                    "T",
                    "str"
                ],
                "groups": [
                    "Set[str]",
                    "Dict[str, Any]",
                    "dict",
                    "bool"
                ]
            }
        },
        "MFE.valid_metafeatures": {
            "name": "valid_metafeatures",
            "location": 1862,
            "return": [
                "bool",
                "str",
                "tuple",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Type[T]",
                    "str",
                    "Callable[[None], None]"
                ],
                "groups": [
                    "Optional[Union[str, Any]]",
                    "Type[T]",
                    "str",
                    "bool"
                ]
            }
        },
        "MFE.parse_by_group": {
            "name": "parse_by_group",
            "location": 1907,
            "return": [
                "bool",
                "float",
                "pandas.DataFrame",
                "int"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Mapping[str, float]",
                    "Callable",
                    "Optional[Callable]"
                ],
                "groups": [
                    "Union[Sequence[str], str]",
                    "Tuple[Sequence]",
                    "int",
                    "Dict[str, Dict[str, Any]]",
                    "str",
                    "Union[str, Callable]"
                ],
                "extracted_results": [
                    "Tuple[Sequence]",
                    "Union[Sequence[str], str]",
                    "int",
                    "Dict[str, Dict[str, Any]]",
                    "Optional[Any]"
                ]
            }
        },
        "MFE._parse_description": {
            "name": "_parse_description",
            "location": 1956,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "docstring": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ],
                "include_references": [
                    "bool",
                    "Callable",
                    "dict",
                    "str"
                ]
            }
        },
        "MFE.metafeature_description": {
            "name": "metafeature_description",
            "location": 1999,
            "return": [
                "Optional[bool]",
                "Optional[int]",
                "Optional[float]",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "bool"
                ],
                "groups": [
                    "Optional[Union[str, Any]]",
                    "Optional[str]",
                    "bool",
                    "Callable",
                    "Optional[float]"
                ],
                "sort_by_group": [
                    "bool",
                    "int",
                    "Tuple[str]"
                ],
                "sort_by_mtf": [
                    "bool",
                    "int",
                    "Tuple[str]"
                ],
                "print_table": [
                    "bool",
                    "Optional[int]"
                ],
                "include_references": [
                    "bool",
                    "str",
                    "Optional[float]",
                    "pandas.DataFrame",
                    "Dict[str, Dict]",
                    "int"
                ]
            }
        }
    },
    "pymfe-master/pymfe/model_based.py": {
        "MFEModelBased.precompute_model_based_class": {
            "name": "precompute_model_based_class",
            "location": 55,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "dt_model": [],
                "random_state": [],
                "hypparam_model_dt": []
            }
        },
        "MFEModelBased._get_leaf_node_array": {
            "name": "_get_leaf_node_array",
            "location": 153,
            "return": [],
            "arguments": {
                "dt_model": []
            }
        },
        "MFEModelBased._get_nonleaf_node_array": {
            "name": "_get_nonleaf_node_array",
            "location": 160,
            "return": [],
            "arguments": {
                "dt_model": []
            }
        },
        "MFEModelBased._fit_dt_model": {
            "name": "_fit_dt_model",
            "location": 167,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "random_state": []
            }
        },
        "MFEModelBased.extract_table": {
            "name": "extract_table",
            "location": 181,
            "return": [],
            "arguments": {
                "cls": [],
                "dt_model": [],
                "leaf_nodes": []
            }
        },
        "MFEModelBased._calc_dt_node_depths": {
            "name": "_calc_dt_node_depths",
            "location": 230,
            "return": [],
            "arguments": {
                "cls": [],
                "dt_model": []
            }
        },
        "MFEModelBased.ft_leaves": {
            "name": "ft_leaves",
            "location": 264,
            "return": [],
            "arguments": {
                "cls": [],
                "dt_model": []
            }
        },
        "MFEModelBased.ft_tree_depth": {
            "name": "ft_tree_depth",
            "location": 288,
            "return": [],
            "arguments": {
                "cls": [],
                "dt_model": [],
                "dt_node_depths": []
            }
        },
        "MFEModelBased.ft_leaves_branch": {
            "name": "ft_leaves_branch",
            "location": 323,
            "return": [],
            "arguments": {
                "cls": [],
                "dt_model": [],
                "leaf_nodes": [],
                "dt_node_depths": []
            }
        },
        "MFEModelBased.ft_leaves_corrob": {
            "name": "ft_leaves_corrob",
            "location": 369,
            "return": [],
            "arguments": {
                "cls": [],
                "dt_model": [],
                "leaf_nodes": [],
                "dt_info_table": []
            }
        },
        "MFEModelBased.ft_tree_shape": {
            "name": "ft_tree_shape",
            "location": 420,
            "return": [],
            "arguments": {
                "cls": [],
                "dt_model": [],
                "tree_shape": [],
                "leaf_nodes": [],
                "dt_node_depths": []
            }
        },
        "MFEModelBased.ft_leaves_homo": {
            "name": "ft_leaves_homo",
            "location": 475,
            "return": [],
            "arguments": {
                "cls": [],
                "dt_model": [],
                "tree_shape": [],
                "leaf_nodes": [],
                "dt_node_depths": []
            }
        },
        "MFEModelBased.ft_leaves_per_class": {
            "name": "ft_leaves_per_class",
            "location": 535,
            "return": [],
            "arguments": {
                "cls": [],
                "dt_model": [],
                "dt_info_table": []
            }
        },
        "MFEModelBased.ft_nodes": {
            "name": "ft_nodes",
            "location": 579,
            "return": [],
            "arguments": {
                "cls": [],
                "dt_model": []
            }
        },
        "MFEModelBased.ft_nodes_per_attr": {
            "name": "ft_nodes_per_attr",
            "location": 603,
            "return": [],
            "arguments": {
                "cls": [],
                "dt_model": []
            }
        },
        "MFEModelBased.ft_nodes_per_inst": {
            "name": "ft_nodes_per_inst",
            "location": 629,
            "return": [],
            "arguments": {
                "cls": [],
                "dt_model": []
            }
        },
        "MFEModelBased.ft_nodes_per_level": {
            "name": "ft_nodes_per_level",
            "location": 657,
            "return": [],
            "arguments": {
                "cls": [],
                "dt_model": [],
                "dt_node_depths": [],
                "non_leaf_nodes": []
            }
        },
        "MFEModelBased.ft_nodes_repeated": {
            "name": "ft_nodes_repeated",
            "location": 704,
            "return": [],
            "arguments": {
                "cls": [],
                "dt_model": [],
                "dt_info_table": [],
                "non_leaf_nodes": []
            }
        },
        "MFEModelBased.ft_var_importance": {
            "name": "ft_var_importance",
            "location": 753,
            "return": [],
            "arguments": {
                "cls": [],
                "dt_model": []
            }
        },
        "MFEModelBased.ft_tree_imbalance": {
            "name": "ft_tree_imbalance",
            "location": 781,
            "return": [],
            "arguments": {
                "cls": [],
                "dt_model": [],
                "leaf_nodes": [],
                "dt_node_depths": []
            }
        },
        "MFEModelBased._calc_dt_node_depths.node_depth": {
            "name": "node_depth",
            "location": 246,
            "return": [],
            "arguments": {
                "node_ind": [],
                "cur_depth": []
            }
        }
    },
    "pymfe-master/pymfe/relative.py": {
        "MFERelativeLandmarking.postprocess_landmarking_relative": {
            "name": "postprocess_landmarking_relative",
            "location": 56,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "List[float]",
                    "Sequence[int]",
                    "Optional[List[str]]",
                    "bool",
                    "int",
                    "Optional[Sequence[Any]]"
                ],
                "mtf_names": [
                    "List[str]",
                    "List[float]",
                    "Sequence[int]",
                    "Optional[List[str]]",
                    "bool",
                    "int",
                    "Optional[Sequence[Any]]"
                ],
                "mtf_vals": [
                    "List[str]",
                    "List[float]",
                    "Sequence[int]",
                    "Optional[List[str]]",
                    "bool",
                    "int",
                    "Optional[Sequence[Any]]"
                ],
                "mtf_time": [
                    "List[float]",
                    "bool",
                    "List[str]",
                    "int"
                ],
                "class_indexes": [
                    "List[str]",
                    "List[float]",
                    "Sequence[int]",
                    "Optional[List[str]]",
                    "bool",
                    "int",
                    "Optional[Sequence[Any]]"
                ],
                "groups": [
                    "bool",
                    "float",
                    "str"
                ],
                "inserted_group_dep": [
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "MFERelativeLandmarking.group_mtf_by_summary": {
            "name": "group_mtf_by_summary",
            "location": 159,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "Optional[bool]"
                ],
                "mtf_names": [
                    "List[str]",
                    "str",
                    "Optional[str]"
                ],
                "mtf_vals": [
                    "List[float]",
                    "str",
                    "list",
                    "bool"
                ],
                "class_indexes": [
                    "Sequence[int]",
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "MFERelativeLandmarking._flatten_dictionaries": {
            "name": "_flatten_dictionaries",
            "location": 198,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "mtf_by_summ": [
                    "Dict[str, List[float]]",
                    "str",
                    "memoryview",
                    "List[dict]",
                    "Tuple[int, int, bytearray]",
                    "Type[T]",
                    "bool"
                ],
                "mtf_orig_indexes": [
                    "Type",
                    "float",
                    "type"
                ]
            }
        }
    },
    "pymfe-master/pymfe/scoring.py": {
        "accuracy": {
            "name": "accuracy",
            "location": 6,
            "return": [
                "str",
                "bytearray",
                "numpy.ndarray",
                "float",
                "bool"
            ],
            "arguments": {
                "y_true": [
                    "numpy.ndarray",
                    "Iterable[bytes]",
                    "Exception"
                ],
                "y_pred": [
                    "numpy.ndarray",
                    "Iterable[bytes]",
                    "Exception"
                ]
            }
        },
        "balanced_accuracy": {
            "name": "balanced_accuracy",
            "location": 11,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "y_true": [
                    "numpy.ndarray",
                    "\"Step\"",
                    "str",
                    "bool"
                ],
                "y_pred": [
                    "numpy.ndarray",
                    "\"Step\"",
                    "str",
                    "bool"
                ]
            }
        },
        "f1": {
            "name": "f1",
            "location": 16,
            "return": [
                "numpy.ndarray",
                "List[dict]",
                "str",
                "int"
            ],
            "arguments": {
                "y_true": [
                    "numpy.ndarray",
                    "bool",
                    "list",
                    "int"
                ],
                "y_pred": [
                    "numpy.ndarray",
                    "bool",
                    "list",
                    "int"
                ]
            }
        },
        "kappa": {
            "name": "kappa",
            "location": 21,
            "return": [
                "builtins.float"
            ],
            "arguments": {
                "y_true": [
                    "numpy.ndarray",
                    "str",
                    "bool",
                    "List[str]",
                    "Callable[[], Coroutine]"
                ],
                "y_pred": [
                    "numpy.ndarray",
                    "str",
                    "bool",
                    "List[str]",
                    "Callable[[], Coroutine]"
                ]
            }
        },
        "auc": {
            "name": "auc",
            "location": 26,
            "return": [
                "builtins.float"
            ],
            "arguments": {
                "y_true": [
                    "numpy.ndarray",
                    "str",
                    "bool",
                    "List[str]",
                    "Callable[[], Coroutine]"
                ],
                "y_pred": [
                    "numpy.ndarray",
                    "str",
                    "bool",
                    "List[str]",
                    "Callable[[], Coroutine]"
                ]
            }
        }
    },
    "pymfe-master/pymfe/statistical.py": {
        "MFEStatistical.precompute_statistical_class": {
            "name": "precompute_statistical_class",
            "location": 61,
            "return": [],
            "arguments": {
                "cls": [],
                "y": []
            }
        },
        "MFEStatistical.precompute_can_cors": {
            "name": "precompute_can_cors",
            "location": 96,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": []
            }
        },
        "MFEStatistical.precompute_statistical_cor_cov": {
            "name": "precompute_statistical_cor_cov",
            "location": 142,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "ddof": []
            }
        },
        "MFEStatistical._can_cor_to_eigval": {
            "name": "_can_cor_to_eigval",
            "location": 192,
            "return": [],
            "arguments": {
                "can_cors": []
            }
        },
        "MFEStatistical._calc_can_cors": {
            "name": "_calc_can_cors",
            "location": 211,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "max_iter": []
            }
        },
        "MFEStatistical.ft_can_cor": {
            "name": "ft_can_cor",
            "location": 266,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "can_cors": []
            }
        },
        "MFEStatistical.ft_gravity": {
            "name": "ft_gravity",
            "location": 306,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "norm_ord": [],
                "classes": [],
                "class_freqs": [],
                "cls_inds": []
            }
        },
        "MFEStatistical.ft_cor": {
            "name": "ft_cor",
            "location": 411,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "abs_corr_mat": []
            }
        },
        "MFEStatistical.ft_cov": {
            "name": "ft_cov",
            "location": 454,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "ddof": [],
                "cov_mat": []
            }
        },
        "MFEStatistical.ft_nr_disc": {
            "name": "ft_nr_disc",
            "location": 502,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "can_cors": []
            }
        },
        "MFEStatistical.ft_eigenvalues": {
            "name": "ft_eigenvalues",
            "location": 548,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "ddof": [],
                "cov_mat": []
            }
        },
        "MFEStatistical.ft_g_mean": {
            "name": "ft_g_mean",
            "location": 585,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "allow_zeros": [],
                "epsilon": []
            }
        },
        "MFEStatistical.ft_h_mean": {
            "name": "ft_h_mean",
            "location": 638,
            "return": [],
            "arguments": {
                "cls": [],
                "N": []
            }
        },
        "MFEStatistical.ft_iq_range": {
            "name": "ft_iq_range",
            "location": 660,
            "return": [],
            "arguments": {
                "cls": [],
                "N": []
            }
        },
        "MFEStatistical.ft_kurtosis": {
            "name": "ft_kurtosis",
            "location": 682,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "method": [],
                "bias": []
            }
        },
        "MFEStatistical.ft_mad": {
            "name": "ft_mad",
            "location": 742,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "factor": []
            }
        },
        "MFEStatistical.ft_max": {
            "name": "ft_max",
            "location": 772,
            "return": [],
            "arguments": {
                "cls": [],
                "N": []
            }
        },
        "MFEStatistical.ft_mean": {
            "name": "ft_mean",
            "location": 795,
            "return": [],
            "arguments": {
                "cls": [],
                "N": []
            }
        },
        "MFEStatistical.ft_median": {
            "name": "ft_median",
            "location": 818,
            "return": [],
            "arguments": {
                "cls": [],
                "N": []
            }
        },
        "MFEStatistical.ft_min": {
            "name": "ft_min",
            "location": 841,
            "return": [],
            "arguments": {
                "cls": [],
                "N": []
            }
        },
        "MFEStatistical.ft_nr_cor_attr": {
            "name": "ft_nr_cor_attr",
            "location": 864,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "threshold": [],
                "normalize": [],
                "abs_corr_mat": []
            }
        },
        "MFEStatistical.ft_nr_norm": {
            "name": "ft_nr_norm",
            "location": 919,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "method": [],
                "threshold": [],
                "failure": [],
                "max_samples": []
            }
        },
        "MFEStatistical.ft_nr_outliers": {
            "name": "ft_nr_outliers",
            "location": 1069,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "whis": []
            }
        },
        "MFEStatistical.ft_range": {
            "name": "ft_range",
            "location": 1115,
            "return": [],
            "arguments": {
                "cls": [],
                "N": []
            }
        },
        "MFEStatistical.ft_sd": {
            "name": "ft_sd",
            "location": 1137,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "ddof": []
            }
        },
        "MFEStatistical.ft_sd_ratio": {
            "name": "ft_sd_ratio",
            "location": 1163,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "ddof": [],
                "classes": [],
                "class_freqs": []
            }
        },
        "MFEStatistical.ft_skewness": {
            "name": "ft_skewness",
            "location": 1311,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "method": [],
                "bias": []
            }
        },
        "MFEStatistical.ft_sparsity": {
            "name": "ft_sparsity",
            "location": 1369,
            "return": [],
            "arguments": {
                "cls": [],
                "X": [],
                "normalize": []
            }
        },
        "MFEStatistical.ft_t_mean": {
            "name": "ft_t_mean",
            "location": 1412,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "pcut": []
            }
        },
        "MFEStatistical.ft_var": {
            "name": "ft_var",
            "location": 1440,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "ddof": []
            }
        },
        "MFEStatistical.ft_w_lambda": {
            "name": "ft_w_lambda",
            "location": 1466,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "can_cor_eigvals": [],
                "can_cors": []
            }
        },
        "MFEStatistical.ft_p_trace": {
            "name": "ft_p_trace",
            "location": 1542,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "can_cors": []
            }
        },
        "MFEStatistical.ft_lh_trace": {
            "name": "ft_lh_trace",
            "location": 1586,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "can_cor_eigvals": [],
                "can_cors": []
            }
        },
        "MFEStatistical.ft_roy_root": {
            "name": "ft_roy_root",
            "location": 1662,
            "return": [],
            "arguments": {
                "cls": [],
                "N": [],
                "y": [],
                "criterion": [],
                "can_cors": [],
                "can_cor_eigvals": []
            }
        },
        "MFEStatistical.ft_sd_ratio.calc_sample_cov_mat": {
            "name": "calc_sample_cov_mat",
            "location": 1222,
            "return": [],
            "arguments": {
                "N": [],
                "y": [],
                "ddof": []
            }
        },
        "MFEStatistical.ft_sd_ratio.calc_pooled_cov_mat": {
            "name": "calc_pooled_cov_mat",
            "location": 1233,
            "return": [],
            "arguments": {
                "sample_cov_matrices": [],
                "vec_weight": [],
                "num_inst": [],
                "num_classes": []
            }
        },
        "MFEStatistical.ft_sd_ratio.calc_gamma_factor": {
            "name": "calc_gamma_factor",
            "location": 1249,
            "return": [],
            "arguments": {
                "num_col": [],
                "num_classes": [],
                "num_inst": []
            }
        },
        "MFEStatistical.ft_sd_ratio.calc_m_factor": {
            "name": "calc_m_factor",
            "location": 1257,
            "return": [],
            "arguments": {
                "sample_cov_matrices": [],
                "pooled_cov_mat": [],
                "num_inst": [],
                "num_classes": [],
                "gamma": [],
                "vec_weight": []
            }
        }
    },
    "pymfe-master/pymfe/_bootstrap.py": {
        "BootstrapExtractor.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "extractor": [
                    "int",
                    "Dict[str, Any]",
                    "float",
                    "bytes"
                ],
                "sample_num": [
                    "int",
                    "Dict[str, Any]",
                    "float",
                    "bytes"
                ],
                "confidence": [
                    "int",
                    "List[float]",
                    "Union[str, int]",
                    "float"
                ],
                "arguments_fit": [
                    "bool",
                    "list",
                    "int"
                ],
                "arguments_extract": [
                    "bool",
                    "list",
                    "int"
                ],
                "verbose": [
                    "int",
                    "Dict[str, Any]",
                    "float",
                    "bytes"
                ],
                "random_state": [
                    "int",
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "BootstrapExtractor._extract_with_bootstrap": {
            "name": "_extract_with_bootstrap",
            "location": 90,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "mtf_num": [
                    "int",
                    "List[List[int]]",
                    "float"
                ]
            }
        },
        "BootstrapExtractor.fit": {
            "name": "fit",
            "location": 134,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "float"
                ],
                "y": [
                    "numpy.ndarray"
                ]
            }
        },
        "BootstrapExtractor.calc_conf_intervals": {
            "name": "calc_conf_intervals",
            "location": 177,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "bootstrap_vals": [
                    "float",
                    "int",
                    "pandas.DataFrame"
                ]
            }
        },
        "BootstrapExtractor.extract_with_confidence": {
            "name": "extract_with_confidence",
            "location": 208,
            "return": [
                "str",
                "Type",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymfe-master/pymfe/_dev.py": {
        "MFEBoilerplate.precompute_basic_precomp_method": {
            "name": "precompute_basic_precomp_method",
            "location": 262,
            "return": [
                "int",
                "List[int]",
                "Sequence[float]",
                "Optional[bytearray]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[int]",
                    "bool",
                    "str",
                    "Dict[int, str]"
                ],
                "y": [
                    "Optional[numpy.ndarray]",
                    "Optional[int]",
                    "Optional[List[float]]",
                    "Optional[List[str]]",
                    "Optional[T]",
                    "Optional[AnyStr]"
                ],
                "argument_bar": [
                    "Optional[int]",
                    "Optional[object]",
                    "bool"
                ]
            }
        },
        "MFEBoilerplate.precompute_more_info": {
            "name": "precompute_more_info",
            "location": 400,
            "return": [
                "Iterable[Any]",
                "bool",
                "str",
                "int",
                "Dict[str, bool]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Callable",
                    "Type[T]",
                    "str",
                    "Callable[[None], None]",
                    "Type"
                ],
                "argument_bar": [
                    "Optional[bool]",
                    "Optional[int]",
                    "Optional[T]",
                    "bytes"
                ]
            }
        },
        "MFEBoilerplate.precompute_random_values": {
            "name": "precompute_random_values",
            "location": 490,
            "return": [
                "int",
                "str",
                "Tuple[int, int]",
                "numpy.ndarray",
                "Tuple[str, int]"
            ],
            "arguments": {
                "cls": [
                    "Callable[[], Any]",
                    "Dict[str, Any]",
                    "list",
                    "bool",
                    "int"
                ],
                "random_state": [
                    "int",
                    "str",
                    "Callable[[str], int]",
                    "Union[List[str], List[Any]]"
                ]
            }
        },
        "MFEBoilerplate.ft_metafeature_name": {
            "name": "ft_metafeature_name",
            "location": 544,
            "return": [
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "cls": [
                    "Mapping[str, Any]",
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "X": [
                    "numpy.ndarray",
                    "float",
                    "str"
                ],
                "y": [
                    "numpy.ndarray",
                    "float",
                    "str"
                ],
                "random_state": [
                    "Optional[int]"
                ],
                "opt_arg_bar": [
                    "str",
                    "int",
                    "float"
                ],
                "opt_arg_baz": [
                    "Dict[str, Any]",
                    "Optional[numpy.ndarray]",
                    "bool"
                ]
            }
        },
        "MFEBoilerplate.ft_fitted_data_arguments": {
            "name": "ft_fitted_data_arguments",
            "location": 679,
            "return": [
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Type[Exception]",
                    "Sequence",
                    "str",
                    "Callable",
                    "float"
                ],
                "X": [
                    "numpy.ndarray",
                    "int",
                    "bool",
                    "Tuple[int, int]"
                ],
                "N": [
                    "numpy.ndarray",
                    "int",
                    "bool",
                    "Tuple[int, int]"
                ],
                "C": [
                    "numpy.ndarray",
                    "int",
                    "bool",
                    "Tuple[int, int]"
                ],
                "y": [
                    "numpy.ndarray",
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "MFEBoilerplate.ft_using_precomputed_values": {
            "name": "ft_using_precomputed_values",
            "location": 734,
            "return": [
                "bool",
                "List[str]",
                "Match"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "y": [
                    "float",
                    "int",
                    "Optional[int]"
                ],
                "y_unique": [
                    "int",
                    "Optional[str]",
                    "Optional[numpy.array]",
                    "Optional[int]",
                    "numpy.array"
                ]
            }
        },
        "MFEBoilerplate.ft_about_return_values": {
            "name": "ft_about_return_values",
            "location": 819,
            "return": [
                "numpy.ndarray",
                "float",
                "str",
                "int",
                "bytearray",
                "Dict[str, int]"
            ],
            "arguments": {
                "cls": [
                    "set",
                    "Type[T]",
                    "type"
                ],
                "y": [
                    "numpy.ndarray",
                    "str",
                    "int",
                    "List[int]",
                    "Union[int, float]",
                    "float",
                    "Tuple[float, float]",
                    "dict"
                ]
            }
        },
        "MFEBoilerplate._protected_methods": {
            "name": "_protected_methods",
            "location": 887,
            "return": [
                "Dict[str, int]",
                "bool",
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Type[object]",
                    "List[dict]",
                    "int"
                ],
                "arg_foo": [
                    "float",
                    "str",
                    "int",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "MFEBoilerplate.non_protected_methods_without_any_prefixes": {
            "name": "non_protected_methods_without_any_prefixes",
            "location": 938,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ]
            }
        },
        "MFEBoilerplate.postprocess_groupName1_groupName2": {
            "name": "postprocess_groupName1_groupName2",
            "location": 950,
            "return": [
                "type",
                "Tuple[Optional[str], Optional[str]]"
            ],
            "arguments": {
                "cls": [
                    "Tuple[str]",
                    "Sequence[int]",
                    "FrozenSet[str]",
                    "Union[bool, Iterable[str]]",
                    "bool"
                ],
                "mtf_names": [
                    "List[str]",
                    "int",
                    "str",
                    "bool"
                ],
                "mtf_vals": [
                    "List[float]",
                    "int",
                    "float",
                    "Callable[[], None]",
                    "numpy.ndarray",
                    "Callable"
                ],
                "mtf_time": [
                    "List[float]",
                    "float"
                ],
                "class_indexes": [
                    "Tuple[str]",
                    "Sequence[int]",
                    "FrozenSet[str]",
                    "Union[bool, Iterable[str]]",
                    "bool"
                ],
                "groups": [
                    "Tuple[str]",
                    "Sequence[int]",
                    "FrozenSet[str]",
                    "Union[bool, Iterable[str]]",
                    "bool"
                ],
                "inserted_group_dep": [
                    "Tuple[str]",
                    "Sequence[int]",
                    "FrozenSet[str]",
                    "Union[bool, Iterable[str]]",
                    "bool"
                ]
            }
        },
        "MFEBoilerplate._protected_methods.inner_functions": {
            "name": "inner_functions",
            "location": 916,
            "return": [
                "bool",
                "Tuple[float, float, float]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "numpy.ndarray",
                    "T"
                ],
                "lamb": [
                    "float",
                    "numpy.ndarray",
                    "T"
                ]
            }
        }
    },
    "pymfe-master/pymfe/_internal.py": {
        "_check_values_in_group": {
            "name": "_check_values_in_group",
            "location": 251,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Iterable[Hashable]"
                ],
                "valid_group": [
                    "List[str]",
                    "str",
                    "[str]",
                    "Set[str]"
                ],
                "wildcard": [
                    "str",
                    "Union[int, str]",
                    "List[str]"
                ]
            }
        },
        "get_prefixed_mtds_from_class": {
            "name": "get_prefixed_mtds_from_class",
            "location": 310,
            "return": [
                "str",
                "List[Tuple[str, str]]",
                "int",
                "List[str]",
                "list"
            ],
            "arguments": {
                "class_obj": [
                    "Callable",
                    "list",
                    "Type[T]",
                    "numpy.random.RandomState",
                    "str"
                ],
                "prefix": [
                    "str",
                    "Callable"
                ],
                "only_name": [
                    "str",
                    "bool",
                    "Callable",
                    "int"
                ],
                "prefix_removal": [
                    "str",
                    "bool",
                    "Callable",
                    "int"
                ]
            }
        },
        "_get_all_prefixed_mtds": {
            "name": "_get_all_prefixed_mtds",
            "location": 366,
            "return": [
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "prefix": [
                    "bool",
                    "Optional[Literal[\"only_clustered\", \"include_clustered\"]]"
                ],
                "groups": [
                    "\"Task\"",
                    "Dict[int, Dict[str, str]]",
                    "Optional[numpy.ndarray]",
                    "bool",
                    "numpy.ndarray",
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "update_groups_by": [
                    "bool",
                    "str",
                    "int"
                ],
                "prefix_removal": [
                    "bool",
                    "Optional[Literal[\"only_clustered\", \"include_clustered\"]]"
                ],
                "custom_class_": [
                    "bool",
                    "float"
                ]
            }
        },
        "_preprocess_iterable_arg": {
            "name": "_preprocess_iterable_arg",
            "location": 463,
            "return": [
                "List[str]",
                "str",
                "int"
            ],
            "arguments": {
                "values": [
                    "dict",
                    "str",
                    "Sequence[str]",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Match"
                ]
            }
        },
        "_extract_mtd_args": {
            "name": "_extract_mtd_args",
            "location": 485,
            "return": [
                "int"
            ],
            "arguments": {
                "ft_mtd_callable": [
                    "float",
                    "int"
                ]
            }
        },
        "summarize": {
            "name": "summarize",
            "location": 520,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "features": [
                    "int",
                    "float",
                    "Dict[str, Any]",
                    "Optional[List[str]]"
                ],
                "callable_sum": [
                    "int",
                    "float",
                    "Dict[str, Any]",
                    "Optional[List[str]]"
                ],
                "callable_args": [
                    "Sequence[Callable]",
                    "Optional[float]",
                    "float",
                    "Optional[Callable]",
                    "Optional[tuple]",
                    "Optional[str]"
                ]
            }
        },
        "array_is_returned": {
            "name": "array_is_returned",
            "location": 561,
            "return": [
                "str"
            ],
            "arguments": {
                "mtd_callable": [
                    "dict",
                    "Dict[str, Any]",
                    "Optional[type]",
                    "type"
                ]
            }
        },
        "get_feat_value": {
            "name": "get_feat_value",
            "location": 567,
            "return": [
                "int",
                "str",
                "bytes",
                "Type",
                "set"
            ],
            "arguments": {
                "mtd_name": [
                    "str",
                    "int"
                ],
                "mtd_args": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ],
                "mtd_callable": [
                    "str",
                    "float",
                    "Tuple[int, int]",
                    "Tuple[float, float]"
                ],
                "suppress_warnings": [
                    "Literal",
                    "bool",
                    "Optional[str]",
                    "str",
                    "Sequence[str]",
                    "list"
                ]
            }
        },
        "build_mtd_kwargs": {
            "name": "build_mtd_kwargs",
            "location": 623,
            "return": [
                "str",
                "Set[str]",
                "Callable"
            ],
            "arguments": {
                "mtd_name": [
                    "str",
                    "int",
                    "bool"
                ],
                "mtd_args": [
                    "bool",
                    "Optional[List[\"custom_index\"]]",
                    "str",
                    "Union[int, float]"
                ],
                "mtd_mandatory": [
                    "float",
                    "bool",
                    "Optional[dict]",
                    "int"
                ],
                "inner_custom_args": [
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[List[str]]",
                    "str",
                    "bool"
                ],
                "user_custom_args": [
                    "Optional[str]",
                    "Optional[Dict[Any, Any]]"
                ],
                "precomp_args": [
                    "Optional[bool]",
                    "Optional[str]",
                    "bool",
                    "Optional[List[str]]",
                    "str"
                ],
                "suppress_warnings": [
                    "bool",
                    "int"
                ]
            }
        },
        "check_summary_warnings": {
            "name": "check_summary_warnings",
            "location": 710,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int",
                    "Iterable[str]",
                    "Optional[Iterable]"
                ],
                "name_feature": [
                    "str",
                    "List[str]"
                ],
                "name_summary": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "convert_alias": {
            "name": "convert_alias",
            "location": 738,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "groups_alias": [
                    "bool",
                    "int",
                    "List[dict]"
                ],
                "values": [
                    "str",
                    "int",
                    "List[str]",
                    "bool",
                    "Callable"
                ]
            }
        },
        "process_generic_set": {
            "name": "process_generic_set",
            "location": 761,
            "return": [
                "bool"
            ],
            "arguments": {
                "values": [
                    "bool",
                    "Optional[Union[int, float]]",
                    "Callable",
                    "str",
                    "Optional[str]",
                    "FrozenSet[str]"
                ],
                "group_name": [
                    "str",
                    "Optional[str]",
                    "Tuple[int, int]",
                    "int"
                ],
                "wildcard": [
                    "str",
                    "float"
                ],
                "groups_alias": [
                    "str",
                    "bool",
                    "Optional[Any]"
                ],
                "allow_none": [
                    "bool",
                    "Optional[List[Any]]",
                    "int",
                    "str",
                    "Optional[dict]"
                ],
                "allow_empty": [
                    "bool",
                    "Optional[List[Any]]",
                    "int",
                    "str",
                    "Optional[dict]"
                ]
            }
        },
        "solve_group_dependencies": {
            "name": "solve_group_dependencies",
            "location": 877,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "groups": [
                    "str",
                    "bytes",
                    "dict"
                ]
            }
        },
        "process_generic_option": {
            "name": "process_generic_option",
            "location": 904,
            "return": [
                "int",
                "str",
                "List[int]",
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "dict"
            ],
            "arguments": {
                "value": [
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]",
                    "Optional[Iterable[str]]"
                ],
                "group_name": [
                    "float",
                    "str",
                    "bool",
                    "int"
                ],
                "allow_none": [
                    "Optional[str]",
                    "Sequence[str]",
                    "Optional[int]"
                ],
                "allow_empty": [
                    "Optional[str]",
                    "Sequence[str]",
                    "Optional[int]"
                ]
            }
        },
        "process_summary": {
            "name": "process_summary",
            "location": 960,
            "return": [
                "numpy.ndarray",
                "str",
                "Callable"
            ],
            "arguments": {
                "summary": [
                    "str",
                    "int",
                    "Dict[str, List[str]]",
                    "List[Dict[str, Any]]",
                    "Dict[str, int]",
                    "OrderedDict"
                ],
                "wildcard": [
                    "str",
                    "int",
                    "Dict[str, List[str]]",
                    "List[Dict[str, Any]]",
                    "Dict[str, int]",
                    "OrderedDict"
                ]
            }
        },
        "process_features": {
            "name": "process_features",
            "location": 1034,
            "return": [
                "str",
                "int",
                "numpy.dtype"
            ],
            "arguments": {
                "features": [
                    "float",
                    "bool",
                    "int",
                    "str"
                ],
                "groups": [
                    "Optional[List[Any]]",
                    "bool",
                    "Hashable",
                    "str",
                    "Optional[int]"
                ],
                "wildcard": [
                    "float",
                    "bool",
                    "int",
                    "str"
                ],
                "suppress_warnings": [
                    "bool"
                ],
                "custom_class_": [
                    "str",
                    "dict",
                    "Optional[dict]",
                    "float",
                    "Union[int, float]"
                ]
            }
        },
        "_patch_precomp_groups": {
            "name": "_patch_precomp_groups",
            "location": 1151,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "precomp_groups": [
                    "Dict[str, Any]",
                    "Iterable[Type]",
                    "int",
                    "OrderedDict"
                ],
                "groups": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "process_precomp_groups": {
            "name": "process_precomp_groups",
            "location": 1168,
            "return": [
                "list",
                "List[T]",
                "List[float]",
                "int"
            ],
            "arguments": {
                "precomp_groups": [
                    "bool",
                    "Optional[numpy.array]",
                    "List[str]",
                    "Optional[Dict]"
                ],
                "groups": [
                    "Optional[numpy.ndarray]",
                    "Optional[Union[Any, Any]]",
                    "bool",
                    "Hashable"
                ],
                "wildcard": [
                    "float",
                    "bool",
                    "str",
                    "Union[float, Tuple[float, float]]"
                ],
                "suppress_warnings": [
                    "bool",
                    "Dict[str, Any]",
                    "float"
                ],
                "verbose": [
                    "numpy.array",
                    "int",
                    "bool",
                    "Optional[numpy.array]",
                    "Dict[str, Any]"
                ],
                "custom_class_": []
            }
        },
        "check_data": {
            "name": "check_data",
            "location": 1337,
            "return": [
                "numpy.ndarray",
                "str",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "X": [
                    "dict",
                    "list"
                ],
                "y": [
                    "Optional[SupportsFloat]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[bool, Any]]",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "isnumeric": {
            "name": "isnumeric",
            "location": 1401,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "str",
                    "T",
                    "list",
                    "int",
                    "Sequence[numpy.ndarray]"
                ],
                "check_subtype": [
                    "str",
                    "bool",
                    "T",
                    "Iterable",
                    "Iterator[Any]"
                ]
            }
        },
        "remove_prefix": {
            "name": "remove_prefix",
            "location": 1437,
            "return": [
                "int",
                "bool",
                "Optional[str]",
                "list"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Optional[str]"
                ],
                "prefix": [
                    "str",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "timeit": {
            "name": "timeit",
            "location": 1457,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "bool"
                ]
            }
        },
        "transform_cat_gray": {
            "name": "transform_cat_gray",
            "location": 1480,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "data_categoric": [
                    "int",
                    "bytes",
                    "numpy.ndarray",
                    "dict"
                ]
            }
        },
        "transform_cat_onehot": {
            "name": "transform_cat_onehot",
            "location": 1518,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "data_categoric": [
                    "int",
                    "str"
                ],
                "use_all_columns": [
                    "int",
                    "str",
                    "float",
                    "Optional[str]"
                ]
            }
        },
        "_equal_freq_discretization": {
            "name": "_equal_freq_discretization",
            "location": 1551,
            "return": [
                "Iterable[str]",
                "dict",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "data": [
                    "int",
                    "str"
                ],
                "num_bins": [
                    "int",
                    "str"
                ],
                "tol": [
                    "List[str]",
                    "Dict[str, Any]",
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "transform_num": {
            "name": "transform_num",
            "location": 1575,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "data_numeric": [
                    "int",
                    "bool"
                ],
                "num_bins": [
                    "Optional[int]",
                    "int",
                    "str"
                ]
            }
        },
        "rescale_data": {
            "name": "rescale_data",
            "location": 1628,
            "return": [
                "bool",
                "int",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "data": [
                    "int",
                    "bytes"
                ],
                "option": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "bytes"
                ],
                "args": []
            }
        },
        "check_score": {
            "name": "check_score",
            "location": 1671,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "Optional[int]",
                "Set[str]"
            ],
            "arguments": {
                "score": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "groups": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "check_group_dependencies": {
            "name": "check_group_dependencies",
            "location": 1721,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "groups": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "select_results_by_classes": {
            "name": "select_results_by_classes",
            "location": 1736,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "mtf_names": [
                    "str",
                    "Dict[str, Any]"
                ],
                "class_names": [
                    "Dict[str, str]",
                    "str",
                    "dict"
                ],
                "include_dependencies": [
                    "str"
                ]
            }
        },
        "post_processing": {
            "name": "post_processing",
            "location": 1777,
            "return": [
                "None"
            ],
            "arguments": {
                "results": [
                    "bool",
                    "str",
                    "List[str]",
                    "int",
                    "dict",
                    "Optional[float]"
                ],
                "groups": [
                    "bool",
                    "Optional[Any]",
                    "Optional[str]",
                    "List[str]"
                ],
                "suppress_warnings": [
                    "bool",
                    "str",
                    "Type[T]",
                    "Dict[str, str]"
                ],
                "custom_class_": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "List[str]"
                ]
            }
        }
    },
    "pymfe-master/pymfe/_summary.py": {
        "_remove_nan": {
            "name": "_remove_nan",
            "location": 20,
            "return": [
                "str",
                "int",
                "dict",
                "tuple"
            ],
            "arguments": {
                "values": [
                    "int",
                    "float",
                    "T",
                    "bool",
                    "dict",
                    "list",
                    "str"
                ]
            }
        },
        "sum_histogram": {
            "name": "sum_histogram",
            "location": 26,
            "return": [
                "int",
                "Optional[int]",
                "List[int]",
                "str"
            ],
            "arguments": {
                "values": [
                    "str",
                    "bool",
                    "int",
                    "Iterable[object]"
                ],
                "bins": [
                    "int",
                    "ByteString",
                    "Optional[str]"
                ],
                "normalize": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "sum_quantiles": {
            "name": "sum_quantiles",
            "location": 62,
            "return": [
                "int",
                "str",
                "List[int]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "values": [
                    "str",
                    "int",
                    "float"
                ],
                "package": [
                    "str"
                ],
                "numpy_interpolation": [
                    "Optional[float]",
                    "str",
                    "int",
                    "numpy.ndarray"
                ],
                "scipy_alphap": [
                    "str",
                    "int",
                    "float"
                ],
                "scipy_betap": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "sum_nanquantiles": {
            "name": "sum_nanquantiles",
            "location": 128,
            "return": [
                "int",
                "str",
                "List[int]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "values": [
                    "bool",
                    "float",
                    "int",
                    "Iterable[object]"
                ],
                "numpy_interpolation": [
                    "str",
                    "bool",
                    "complex",
                    "float",
                    "SupportsBytes",
                    "Sequence[str]"
                ]
            }
        },
        "sum_skewness": {
            "name": "sum_skewness",
            "location": 146,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "values": [
                    "int",
                    "List[str]",
                    "bool",
                    "Set[str]",
                    "bytes",
                    "bytearray",
                    "List[int]"
                ],
                "method": [
                    "str",
                    "numpy.ndarray",
                    "dict",
                    "Iterable[str]",
                    "list"
                ],
                "bias": [
                    "float",
                    "Dict[str, List]",
                    "tuple",
                    "int",
                    "T",
                    "dict"
                ]
            }
        },
        "sum_kurtosis": {
            "name": "sum_kurtosis",
            "location": 209,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "values": [
                    "int",
                    "List[str]",
                    "bool",
                    "Set[str]",
                    "bytes",
                    "bytearray",
                    "List[int]"
                ],
                "method": [
                    "str",
                    "numpy.ndarray",
                    "dict",
                    "Iterable[str]",
                    "list"
                ],
                "bias": [
                    "float",
                    "Dict[str, List]",
                    "tuple",
                    "int",
                    "T",
                    "dict"
                ]
            }
        },
        "sum_nanstd": {
            "name": "sum_nanstd",
            "location": 273,
            "return": [
                "Optional[int]",
                "int",
                "float",
                "List[int]",
                "str"
            ],
            "arguments": {
                "values": [
                    "float",
                    "str",
                    "list",
                    "Union[int, str]"
                ],
                "ddof": [
                    "float",
                    "str",
                    "list",
                    "Union[int, str]"
                ]
            }
        },
        "sum_std": {
            "name": "sum_std",
            "location": 281,
            "return": [
                "Optional[int]",
                "int",
                "float",
                "List[int]",
                "str"
            ],
            "arguments": {
                "values": [
                    "float",
                    "str",
                    "list",
                    "Union[int, str]"
                ],
                "ddof": [
                    "float",
                    "str",
                    "list",
                    "Union[int, str]"
                ]
            }
        },
        "sum_nanvar": {
            "name": "sum_nanvar",
            "location": 289,
            "return": [
                "Optional[int]",
                "int",
                "float",
                "List[int]",
                "str"
            ],
            "arguments": {
                "values": [
                    "float",
                    "str",
                    "list",
                    "Union[int, str]"
                ],
                "ddof": [
                    "float",
                    "str",
                    "list",
                    "Union[int, str]"
                ]
            }
        },
        "sum_var": {
            "name": "sum_var",
            "location": 297,
            "return": [
                "str",
                "int",
                "Iterable[numpy.dtype]",
                "Generator",
                "dict"
            ],
            "arguments": {
                "values": [
                    "float",
                    "list",
                    "str"
                ],
                "ddof": [
                    "float",
                    "list",
                    "str"
                ]
            }
        },
        "sum_nancount": {
            "name": "sum_nancount",
            "location": 305,
            "return": [
                "str",
                "Iterable[numpy.dtype]",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "values": [
                    "List[str]",
                    "int",
                    "list",
                    "List[Union[int, float]]",
                    "str",
                    "Set[str]",
                    "List[float]"
                ]
            }
        },
        "sum_naniq_range": {
            "name": "sum_naniq_range",
            "location": 310,
            "return": [
                "int",
                "Optional[int]",
                "List[int]",
                "tuple",
                "str"
            ],
            "arguments": {
                "values": [
                    "str",
                    "float",
                    "int",
                    "bool",
                    "numpy.ndarray"
                ]
            }
        },
        "sum_nanptp": {
            "name": "sum_nanptp",
            "location": 315,
            "return": [
                "Optional[int]",
                "int",
                "List[int]",
                "float",
                "Optional[bool]"
            ],
            "arguments": {
                "values": [
                    "str",
                    "int",
                    "Callable",
                    "bool",
                    "numpy.ndarray",
                    "float"
                ]
            }
        },
        "sum_nanhistogram": {
            "name": "sum_nanhistogram",
            "location": 320,
            "return": [
                "float",
                "str",
                "Generator",
                "dict",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "values": [
                    "float",
                    "bool",
                    "str",
                    "list",
                    "Sequence[float]"
                ],
                "bins": [
                    "str",
                    "bool",
                    "T",
                    "Optional[str]",
                    "Optional[Any]",
                    "Callable",
                    "Iterator[Any]",
                    "type"
                ],
                "normalize": [
                    "str",
                    "bool",
                    "T",
                    "Optional[str]",
                    "Optional[Any]",
                    "Callable",
                    "Iterator[Any]",
                    "type"
                ]
            }
        },
        "sum_nankurtosis": {
            "name": "sum_nankurtosis",
            "location": 332,
            "return": [
                "float",
                "str",
                "Generator",
                "dict",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "values": [
                    "numpy.ndarray",
                    "float",
                    "list"
                ],
                "method": [
                    "Optional[Dict]",
                    "dict",
                    "Type[Any]",
                    "Union[bytes, str]"
                ],
                "bias": [
                    "Optional[Dict]",
                    "dict",
                    "Type[Any]",
                    "Union[bytes, str]"
                ]
            }
        },
        "sum_nanskewness": {
            "name": "sum_nanskewness",
            "location": 344,
            "return": [
                "float",
                "str",
                "Generator",
                "dict",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "values": [
                    "numpy.ndarray",
                    "float",
                    "list"
                ],
                "method": [
                    "Optional[Dict]",
                    "dict",
                    "Type[Any]",
                    "Union[bytes, str]"
                ],
                "bias": [
                    "Optional[Dict]",
                    "dict",
                    "Type[Any]",
                    "Union[bytes, str]"
                ]
            }
        },
        "_apply_power_func": {
            "name": "_apply_power_func",
            "location": 356,
            "return": [
                "Iterable[T]",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "values": [
                    "int",
                    "type",
                    "float",
                    "Callable"
                ],
                "p_func": [
                    "str",
                    "Dict[str, Any]",
                    "Optional['ModelOrDc']",
                    "list",
                    "int",
                    "Tuple[int]"
                ],
                "p": [
                    "int",
                    "\"PerceptionSemanticAlignment\""
                ]
            }
        },
        "sum_powersum": {
            "name": "sum_powersum",
            "location": 381,
            "return": [
                "str",
                "Generator",
                "float",
                "dict",
                "Optional[int]"
            ],
            "arguments": {
                "values": [
                    "int",
                    "Iterable[T]",
                    "numpy.ndarray",
                    "str"
                ],
                "p": [
                    "int",
                    "Iterable[T]",
                    "numpy.ndarray",
                    "str"
                ]
            }
        },
        "sum_nanpowersum": {
            "name": "sum_nanpowersum",
            "location": 398,
            "return": [
                "Dict[str, int]",
                "int",
                "dict",
                "str"
            ],
            "arguments": {
                "values": [
                    "int",
                    "Union[int, str]",
                    "Optional[int]",
                    "bytes",
                    "str"
                ],
                "p": [
                    "int",
                    "Union[int, str]",
                    "Optional[int]",
                    "bytes",
                    "str"
                ]
            }
        },
        "sum_pnorm": {
            "name": "sum_pnorm",
            "location": 406,
            "return": [
                "str",
                "Generator",
                "float",
                "dict",
                "Optional[int]"
            ],
            "arguments": {
                "values": [
                    "int",
                    "numpy.ndarray",
                    "str",
                    "float",
                    "bool"
                ],
                "p": [
                    "int",
                    "numpy.ndarray",
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "sum_nanpnorm": {
            "name": "sum_nanpnorm",
            "location": 423,
            "return": [
                "Dict[str, int]",
                "int",
                "dict",
                "str"
            ],
            "arguments": {
                "values": [
                    "int",
                    "Union[int, str]",
                    "Optional[int]",
                    "bytes",
                    "str"
                ],
                "p": [
                    "int",
                    "Union[int, str]",
                    "Optional[int]",
                    "bytes",
                    "str"
                ]
            }
        },
        "sum_sum": {
            "name": "sum_sum",
            "location": 431,
            "return": [
                "Optional[int]",
                "int",
                "float",
                "List[int]",
                "str"
            ],
            "arguments": {
                "values": [
                    "float",
                    "str",
                    "Union[int, str]",
                    "int"
                ]
            }
        },
        "sum_nansum": {
            "name": "sum_nansum",
            "location": 439,
            "return": [
                "int",
                "Optional[int]",
                "List[int]",
                "str"
            ],
            "arguments": {
                "values": [
                    "str",
                    "bool",
                    "T",
                    "int"
                ]
            }
        },
        "sum_powersum.ps_func": {
            "name": "ps_func",
            "location": 387,
            "return": [],
            "arguments": {
                "arr": [],
                "p": []
            }
        },
        "sum_pnorm.pn_func": {
            "name": "pn_func",
            "location": 412,
            "return": [],
            "arguments": {
                "arr": [],
                "p": []
            }
        }
    },
    "pymfe-master/pymfe/_utils.py": {
        "calc_cls_inds": {
            "name": "calc_cls_inds",
            "location": 7,
            "return": [
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "y": [
                    "dict",
                    "bytes",
                    "str",
                    "Dict[str, Any]"
                ],
                "classes": [
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "pymfe-master/pymfe/_version.py": {},
    "pymfe-master/pymfe/__init__.py": {},
    "pymfe-master/tests/test_architecture.py": {
        "summary_exception": {
            "name": "summary_exception",
            "location": 15,
            "return": [
                "str",
                "int",
                "dict",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "values": [
                    "numpy.ndarray",
                    "int",
                    "List[str]",
                    "Dict[str, Any]",
                    "str"
                ],
                "raise_exception": [
                    "bool",
                    "Optional[Any]",
                    "Iterable[Any]",
                    "str",
                    "Optional[Union[int, str]]",
                    "Iterable[numpy.ndarray]"
                ]
            }
        },
        "summary_memory_error": {
            "name": "summary_memory_error",
            "location": 25,
            "return": [
                "int",
                "str",
                "tuple",
                "List[int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "values": [
                    "numpy.ndarray",
                    "str",
                    "List[float]",
                    "bytes",
                    "float",
                    "int",
                    "T"
                ],
                "raise_mem_err": [
                    "bool",
                    "str",
                    "KT",
                    "int"
                ]
            }
        },
        "MFETestClass.postprocess_return_none": {
            "name": "postprocess_return_none",
            "location": 39,
            "return": [
                "str",
                "Optional[Callable[[bool], None]]",
                "type"
            ],
            "arguments": {
                "cls": [
                    "Callable[..., T]",
                    "Type[T]",
                    "numpy.ndarray",
                    "bool"
                ]
            }
        },
        "MFETestClass.postprocess_return_new_feature": {
            "name": "postprocess_return_new_feature",
            "location": 44,
            "return": [
                "str",
                "dict",
                "list",
                "Union[int, None]",
                "Iterable",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "Set[Tuple[str, Any]]",
                    "int",
                    "Optional[int]",
                    "Exception"
                ],
                "number_of_lists": [
                    "int",
                    "List[int]",
                    "str"
                ]
            }
        },
        "MFETestClass.postprocess_raise_exception": {
            "name": "postprocess_raise_exception",
            "location": 51,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "raise_exception": [
                    "bool",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "MFETestClass.postprocess_memory_error": {
            "name": "postprocess_memory_error",
            "location": 61,
            "return": [
                "tuple",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str"
                ],
                "raise_mem_err": [
                    "bool",
                    "str"
                ]
            }
        },
        "MFETestClass.precompute_return_empty": {
            "name": "precompute_return_empty",
            "location": 69,
            "return": [
                "int",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Type[Any]",
                    "List[dict]",
                    "Iterable",
                    "Type[T]",
                    "T",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "MFETestClass.precompute_return_something": {
            "name": "precompute_return_something",
            "location": 76,
            "return": [
                "int",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Type[Any]",
                    "List[dict]",
                    "Iterable",
                    "Type[T]",
                    "T",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "MFETestClass.precompute_raise_exception": {
            "name": "precompute_raise_exception",
            "location": 88,
            "return": [
                "float",
                "Iterable[T]",
                "Callable[[T], bool]",
                "cmk.utils.type_defs.EventRule"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "raise_exception": [
                    "bool",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "MFETestClass.precompute_memory_error": {
            "name": "precompute_memory_error",
            "location": 100,
            "return": [
                "str",
                "Sequence"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str"
                ],
                "raise_mem_err": [
                    "bool",
                    "str"
                ]
            }
        },
        "MFETestClass.ft_valid_number": {
            "name": "ft_valid_number",
            "location": 112,
            "return": [
                "int",
                "str",
                "Dict[str, str]",
                "bytes",
                "Sequence[Tuple[float, float]]"
            ],
            "arguments": {
                "cls": [
                    "numpy.ndarray",
                    "Callable",
                    "Iterable[T]",
                    "str"
                ],
                "X": [
                    "numpy.ndarray",
                    "Callable",
                    "Iterable[T]",
                    "str"
                ],
                "y": [
                    "numpy.ndarray",
                    "Callable",
                    "Iterable[T]",
                    "str"
                ]
            }
        },
        "MFETestClass.ft_valid_array": {
            "name": "ft_valid_array",
            "location": 117,
            "return": [
                "int",
                "str",
                "Dict[str, str]",
                "bytes",
                "Sequence[Tuple[float, float]]"
            ],
            "arguments": {
                "cls": [
                    "numpy.ndarray",
                    "Callable",
                    "Iterable[T]",
                    "str"
                ],
                "X": [
                    "numpy.ndarray",
                    "Callable",
                    "Iterable[T]",
                    "str"
                ],
                "y": [
                    "numpy.ndarray",
                    "Callable",
                    "Iterable[T]",
                    "str"
                ]
            }
        },
        "MFETestClass.ft_raise_exception": {
            "name": "ft_raise_exception",
            "location": 122,
            "return": [
                "float",
                "Iterable[T]",
                "Callable[[T], bool]",
                "cmk.utils.type_defs.EventRule"
            ],
            "arguments": {
                "cls": [
                    "numpy.ndarray",
                    "bool",
                    "List[Tuple]"
                ],
                "X": [
                    "numpy.ndarray",
                    "bool",
                    "List[Tuple]"
                ],
                "y": [
                    "numpy.ndarray",
                    "bool",
                    "List[Tuple]"
                ],
                "raise_exception": [
                    "numpy.ndarray",
                    "bool",
                    "List[Tuple]"
                ]
            }
        },
        "MFETestClass.ft_memory_error": {
            "name": "ft_memory_error",
            "location": 132,
            "return": [
                "tuple",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str"
                ],
                "raise_mem_err": [
                    "bool",
                    "str"
                ]
            }
        },
        "TestArchitecture.test_summary_valid1": {
            "name": "test_summary_valid1",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchitecture.test_summary_valid2": {
            "name": "test_summary_valid2",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchitecture.test_summary_invalid1": {
            "name": "test_summary_invalid1",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchitecture.test_summary_invalid2": {
            "name": "test_summary_invalid2",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchitecture.test_postprocessing_valid": {
            "name": "test_postprocessing_valid",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchitecture.test_preprocessing_valid": {
            "name": "test_preprocessing_valid",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchitecture.test_feature_detection": {
            "name": "test_feature_detection",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchitecture.test_get_groups": {
            "name": "test_get_groups",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchitecture.test_metafeature_description": {
            "name": "test_metafeature_description",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchitecture.test_metafeature_description_exceptions": {
            "name": "test_metafeature_description_exceptions",
            "location": 234,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchitecture.test_default_alias_groups": {
            "name": "test_default_alias_groups",
            "location": 245,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchitecture.test_extract_metafeature_names_supervised": {
            "name": "test_extract_metafeature_names_supervised",
            "location": 291,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "groups": [
                    "List[Dict[str, Any]]"
                ],
                "summary": [
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "TestArchitecture.test_extract_metafeature_names_unsupervised_01": {
            "name": "test_extract_metafeature_names_unsupervised_01",
            "location": 331,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "groups": [
                    "List[Dict[str, Any]]"
                ],
                "summary": [
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "TestArchitecture.test_extract_metafeature_names_unsupervised_02": {
            "name": "test_extract_metafeature_names_unsupervised_02",
            "location": 355,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "groups": [
                    "List[Dict[str, Any]]"
                ],
                "summary": [
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "TestArchitecture.test_parse_valid_metafeatures": {
            "name": "test_parse_valid_metafeatures",
            "location": 386,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "groups": []
            }
        },
        "TestArchitecture.test_no_cat_transformation": {
            "name": "test_no_cat_transformation",
            "location": 403,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchitecture.test_gray_encoding_missing_value": {
            "name": "test_gray_encoding_missing_value",
            "location": 409,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchitecture.test_one_hot_encoding_01": {
            "name": "test_one_hot_encoding_01",
            "location": 421,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchitecture.test_one_hot_encoding_02": {
            "name": "test_one_hot_encoding_02",
            "location": 430,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchitecture.test_one_hot_encoding_03": {
            "name": "test_one_hot_encoding_03",
            "location": 439,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchitecture.test_one_hot_encoding_04": {
            "name": "test_one_hot_encoding_04",
            "location": 448,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchitecture.test_extract_with_confidence": {
            "name": "test_extract_with_confidence",
            "location": 459,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "confidence": [
                    "int"
                ]
            }
        },
        "TestArchitecture.test_extract_with_confidence_invalid1": {
            "name": "test_extract_with_confidence_invalid1",
            "location": 484,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchitecture.test_extract_with_confidence_invalid2": {
            "name": "test_extract_with_confidence_invalid2",
            "location": 488,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchitecture.test_extract_with_confidence_invalid3": {
            "name": "test_extract_with_confidence_invalid3",
            "location": 496,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchitecture.test_extract_with_confidence_time": {
            "name": "test_extract_with_confidence_time",
            "location": 504,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchitecture.test_extract_with_confidence_multiple_conf_level": {
            "name": "test_extract_with_confidence_multiple_conf_level",
            "location": 522,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchitecture.test_extract_with_confidence_random_state1": {
            "name": "test_extract_with_confidence_random_state1",
            "location": 535,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchitecture.test_extract_with_confidence_random_state2": {
            "name": "test_extract_with_confidence_random_state2",
            "location": 554,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchitecture.test_extract_with_confidence_random_state3": {
            "name": "test_extract_with_confidence_random_state3",
            "location": 573,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchitecture.test_extract_from_model": {
            "name": "test_extract_from_model",
            "location": 594,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchitecture.test_extract_from_model_invalid1": {
            "name": "test_extract_from_model_invalid1",
            "location": 611,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchitecture.test_extract_from_model_invalid2": {
            "name": "test_extract_from_model_invalid2",
            "location": 619,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchitecture.test_extract_from_model_invalid3": {
            "name": "test_extract_from_model_invalid3",
            "location": 629,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchitecture.test_extract_from_model_invalid4": {
            "name": "test_extract_from_model_invalid4",
            "location": 635,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchitectureWarnings.test_feature_warning1": {
            "name": "test_feature_warning1",
            "location": 645,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchitectureWarnings.test_feature_warning2": {
            "name": "test_feature_warning2",
            "location": 669,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchitectureWarnings.test_mem_err_precompute": {
            "name": "test_mem_err_precompute",
            "location": 693,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchitectureWarnings.test_mem_err_postprocess": {
            "name": "test_mem_err_postprocess",
            "location": 702,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchitectureWarnings.test_postprocessing_invalid1": {
            "name": "test_postprocessing_invalid1",
            "location": 714,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchitectureWarnings.test_postprocessing_invalid2": {
            "name": "test_postprocessing_invalid2",
            "location": 726,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArchitectureWarnings.test_preprocessing_invalid": {
            "name": "test_preprocessing_invalid",
            "location": 738,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymfe-master/tests/test_clustering.py": {
        "TestClustering.test_ft_methods_clustering": {
            "name": "test_ft_methods_clustering",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dt_id": [
                    "str"
                ],
                "ft_name": [
                    "int",
                    "Mapping[str, str]",
                    "str",
                    "numpy.dtype",
                    "Type",
                    "List[float]"
                ],
                "exp_value": [
                    "str",
                    "int"
                ],
                "precompute": [
                    "str",
                    "Union[str, List]",
                    "bool"
                ]
            }
        },
        "TestClustering.test_silhouette_subsampling": {
            "name": "test_silhouette_subsampling",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "precompute": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "TestClustering.test_precompute_nearest_neighbors": {
            "name": "test_precompute_nearest_neighbors",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestClustering.test_errors_get_class_representatives": {
            "name": "test_errors_get_class_representatives",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestClustering.test_integration_clustering": {
            "name": "test_integration_clustering",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dt_id": [
                    "str"
                ],
                "exp_value": [
                    "int",
                    "str",
                    "float"
                ],
                "precompute": [
                    "str",
                    "Iterable[int]"
                ]
            }
        }
    },
    "pymfe-master/tests/test_complexity.py": {
        "TestComplexity.test_ft_methods_complexity": {
            "name": "test_ft_methods_complexity",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dt_id": [
                    "str"
                ],
                "ft_name": [
                    "str"
                ],
                "exp_value": [
                    "str",
                    "int",
                    "raiden.utils.PaymentID",
                    "raiden.utils.Address"
                ],
                "precompute": [
                    "str",
                    "Union[str, List]",
                    "bool"
                ]
            }
        },
        "TestComplexity.test_overlapping_area": {
            "name": "test_overlapping_area",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "num_inst_1": [
                    "int",
                    "Union[str, int, float]"
                ],
                "num_inst_2": [
                    "int",
                    "Union[str, int, float]"
                ],
                "expected_val": [
                    "float",
                    "List[float]",
                    "int"
                ]
            }
        },
        "TestComplexity.test_empty_minmin": {
            "name": "test_empty_minmin",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComplexity.test_empty_maxmax": {
            "name": "test_empty_maxmax",
            "location": 223,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComplexity.test_t1_arguments": {
            "name": "test_t1_arguments",
            "location": 237,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "orig_dist_mat_min": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "jsonlog.tests.capture.Capture"
                ],
                "orig_dist_mat_ptp": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "jsonlog.tests.capture.Capture"
                ]
            }
        }
    },
    "pymfe-master/tests/test_concept.py": {
        "TestConcept.test_ft_methods_complexity": {
            "name": "test_ft_methods_complexity",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dt_id": [
                    "str"
                ],
                "ft_name": [
                    "str"
                ],
                "exp_value": [
                    "int",
                    "raiden.utils.PaymentID",
                    "raiden.utils.Address"
                ],
                "precompute": [
                    "str",
                    "Union[str, List]",
                    "bool"
                ]
            }
        },
        "TestConcept.test_integration_concept": {
            "name": "test_integration_concept",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dt_id": [
                    "str"
                ],
                "exp_value": [
                    "int",
                    "str",
                    "float"
                ],
                "precompute": [
                    "str",
                    "Iterable[int]"
                ]
            }
        }
    },
    "pymfe-master/tests/test_errors_warnings.py": {
        "TestErrorsWarnings.test_error_empty_data_1": {
            "name": "test_error_empty_data_1",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestErrorsWarnings.test_error_sample_size": {
            "name": "test_error_sample_size",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestErrorsWarnings.test_error_empty_data_2": {
            "name": "test_error_empty_data_2",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestErrorsWarnings.test_error_empty_data_3": {
            "name": "test_error_empty_data_3",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestErrorsWarnings.test_error_data_wrong_shape": {
            "name": "test_error_data_wrong_shape",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestErrorsWarnings.test_error_invalid_groups_1": {
            "name": "test_error_invalid_groups_1",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "group_name": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TestErrorsWarnings.test_error_invalid_groups_2": {
            "name": "test_error_invalid_groups_2",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "group_name": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TestErrorsWarnings.test_error_random_state": {
            "name": "test_error_random_state",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestErrorsWarnings.test_error_folds": {
            "name": "test_error_folds",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestErrorsWarnings.test_error_cat_cols_1": {
            "name": "test_error_cat_cols_1",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestErrorsWarnings.test_error_cat_cols_2": {
            "name": "test_error_cat_cols_2",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestErrorsWarnings.test_error_invalid_timeopt": {
            "name": "test_error_invalid_timeopt",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestErrorsWarnings.test_error_process_generic_option_1": {
            "name": "test_error_process_generic_option_1",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]",
                    "cmk.utils.type_defs.SectionName"
                ],
                "group_name": [
                    "str",
                    "Optional[str]",
                    "cmk.utils.type_defs.SectionName"
                ],
                "allow_none": [
                    "str",
                    "Optional[str]",
                    "cmk.utils.type_defs.SectionName"
                ],
                "allow_empty": [
                    "str",
                    "Optional[str]",
                    "cmk.utils.type_defs.SectionName"
                ]
            }
        },
        "TestErrorsWarnings.test_error_process_generic_option_2": {
            "name": "test_error_process_generic_option_2",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestErrorsWarnings.test_error_process_generic_option_3": {
            "name": "test_error_process_generic_option_3",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestErrorsWarnings.test_error_process_generic_set_1": {
            "name": "test_error_process_generic_set_1",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "values": [
                    "str",
                    "Union[str, int]"
                ],
                "group_name": [
                    "str",
                    "Union[str, int]"
                ],
                "allow_none": [
                    "str",
                    "Union[str, int]"
                ],
                "allow_empty": [
                    "str",
                    "Union[str, int]"
                ]
            }
        },
        "TestErrorsWarnings.test_error_process_generic_set_2": {
            "name": "test_error_process_generic_set_2",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestErrorsWarnings.test_error_unknown_summary": {
            "name": "test_error_unknown_summary",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "summary": [
                    "tests.conftesWorker",
                    "Type"
                ]
            }
        },
        "TestErrorsWarnings.test_error_invalid_features": {
            "name": "test_error_invalid_features",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "features": [
                    "tests.conftesWorker",
                    "Type"
                ]
            }
        },
        "TestErrorsWarnings.test_error_invalid_score": {
            "name": "test_error_invalid_score",
            "location": 201,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "score": [
                    "tests.conftesWorker",
                    "Type"
                ]
            }
        },
        "TestErrorsWarnings.test_error_invalid_rescale_1": {
            "name": "test_error_invalid_rescale_1",
            "location": 213,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rescale": [
                    "numpy.ndarray",
                    "numpy.array",
                    "int",
                    "List[numpy.ndarray]"
                ]
            }
        },
        "TestErrorsWarnings.test_error_invalid_rescale_2": {
            "name": "test_error_invalid_rescale_2",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestErrorsWarnings.test_warning_invalid_features": {
            "name": "test_warning_invalid_features",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "features": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "Iterable[Tuple[int, int]]",
                    "List[str]"
                ],
                "groups": [
                    "bool",
                    "tests.basilisp.helpers.CompileFn",
                    "Iterable[Tuple[int, int]]",
                    "List[str]"
                ]
            }
        },
        "TestErrorsWarnings.test_warning_invalid_precomp": {
            "name": "test_warning_invalid_precomp",
            "location": 249,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "groups": [
                    "str",
                    "bool",
                    "int"
                ],
                "precomp_groups": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "TestErrorsWarnings.test_warning_invalid_argument": {
            "name": "test_warning_invalid_argument",
            "location": 256,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestErrorsWarnings.test_error_rescale_data": {
            "name": "test_error_rescale_data",
            "location": 262,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestErrorsWarnings.test_error_transform_num": {
            "name": "test_error_transform_num",
            "location": 267,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestErrorsWarnings.test_isnumeric_check": {
            "name": "test_isnumeric_check",
            "location": 275,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestErrorsWarnings.test_error_check_data": {
            "name": "test_error_check_data",
            "location": 278,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestErrorsWarnings.test_errors__fill_col_ind_by_type": {
            "name": "test_errors__fill_col_ind_by_type",
            "location": 283,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestErrorsWarnings.test_error__set_data_categoric": {
            "name": "test_error__set_data_categoric",
            "location": 307,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestErrorsWarnings.test_error__set_data_numeric": {
            "name": "test_error__set_data_numeric",
            "location": 317,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestErrorsWarnings.test_invalid_cat_transf": {
            "name": "test_invalid_cat_transf",
            "location": 327,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestErrorsWarnings.test_extract_with_confidence_without_data": {
            "name": "test_extract_with_confidence_without_data",
            "location": 333,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestErrorsWarnings.test_bootstrap_extractor_extract_with_confidence_without_data": {
            "name": "test_bootstrap_extractor_extract_with_confidence_without_data",
            "location": 338,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymfe-master/tests/test_general.py": {
        "TestGeneral.test_ft_methods_general": {
            "name": "test_ft_methods_general",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dt_id": [
                    "str"
                ],
                "ft_name": [
                    "int",
                    "Mapping[str, str]",
                    "str",
                    "numpy.dtype",
                    "Type",
                    "List[float]"
                ],
                "exp_value": [
                    "str",
                    "int"
                ],
                "precompute": [
                    "str",
                    "Union[str, List]",
                    "bool"
                ]
            }
        },
        "TestGeneral.test_integration_general": {
            "name": "test_integration_general",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dt_id": [
                    "str"
                ],
                "exp_value": [
                    "int",
                    "str",
                    "float"
                ],
                "precompute": [
                    "str",
                    "Iterable[int]"
                ]
            }
        }
    },
    "pymfe-master/tests/test_infotheo.py": {
        "TestInfoTheo.test_ft_methods_infotheo": {
            "name": "test_ft_methods_infotheo",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dt_id": [
                    "str"
                ],
                "ft_name": [
                    "int",
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "exp_value": [
                    "int",
                    "raiden.utils.PaymentID",
                    "raiden.utils.Address",
                    "str"
                ],
                "precompute": [
                    "str",
                    "Union[str, List]",
                    "bool"
                ]
            }
        },
        "TestInfoTheo.test_integration_infotheo": {
            "name": "test_integration_infotheo",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dt_id": [
                    "str"
                ],
                "exp_value": [
                    "str",
                    "float",
                    "Optional[str]",
                    "bool",
                    "int"
                ],
                "precompute": [
                    "str",
                    "Iterable[int]"
                ]
            }
        },
        "TestInfoTheo.test_threshold_attr_conc": {
            "name": "test_threshold_attr_conc",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymfe-master/tests/test_itemset.py": {
        "TestItemset.test_ft_methods_itemset": {
            "name": "test_ft_methods_itemset",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dt_id": [
                    "str"
                ],
                "ft_name": [
                    "str"
                ],
                "exp_value": [
                    "int",
                    "raiden.utils.PaymentID",
                    "raiden.utils.Address"
                ],
                "precompute": [
                    "str",
                    "Union[str, List]",
                    "bool"
                ]
            }
        },
        "TestItemset.test_itemset_using_author_dataset": {
            "name": "test_itemset_using_author_dataset",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestItemset.test_integration_itemset": {
            "name": "test_integration_itemset",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dt_id": [
                    "str"
                ],
                "exp_value": [
                    "int",
                    "str",
                    "float"
                ],
                "precompute": [
                    "str",
                    "Iterable[int]"
                ]
            }
        }
    },
    "pymfe-master/tests/test_landmarking.py": {
        "TestLandmarking.test_ft_methods_landmarking": {
            "name": "test_ft_methods_landmarking",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dt_id": [
                    "str"
                ],
                "ft_name": [
                    "str"
                ],
                "exp_value": [
                    "str",
                    "int",
                    "raiden.utils.PaymentID",
                    "raiden.utils.Address"
                ],
                "precompute": [
                    "str",
                    "Union[str, List]",
                    "bool"
                ],
                "lm_sample_frac": [
                    "str"
                ]
            }
        },
        "TestLandmarking.test_integration_landmarking": {
            "name": "test_integration_landmarking",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dt_id": [
                    "str"
                ],
                "exp_value": [
                    "str",
                    "Tuple[int, int]",
                    "int",
                    "List[str]",
                    "float"
                ],
                "precompute": [
                    "str",
                    "Iterable[int]"
                ],
                "lm_sample_frac": [
                    "Dict[Any, str]",
                    "List[str]",
                    "raiden_contracts.tests.test_channel_update_transfer.test_update_invalid_balance_proof_arguments.balance_proof",
                    "myia.utils.misc.Named"
                ]
            }
        }
    },
    "pymfe-master/tests/test_model_based.py": {
        "TestModelBased.test_ft_methods_model_based_01": {
            "name": "test_ft_methods_model_based_01",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dt_id": [
                    "str"
                ],
                "ft_name": [
                    "str"
                ],
                "exp_value": [
                    "int",
                    "str"
                ],
                "precompute": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestModelBased.test_ft_methods_model_based_02": {
            "name": "test_ft_methods_model_based_02",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dt_id": [
                    "str"
                ],
                "ft_name": [
                    "str"
                ],
                "exp_value": [
                    "int",
                    "str"
                ],
                "precompute": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestModelBased.test_integration_model_based": {
            "name": "test_integration_model_based",
            "location": 355,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dt_id": [
                    "str"
                ],
                "exp_value": [
                    "int",
                    "bool",
                    "str",
                    "List[str]",
                    "Callable",
                    "bytes"
                ],
                "precompute": [
                    "str"
                ]
            }
        }
    },
    "pymfe-master/tests/test_output.py": {
        "TestOutput.test_output_lengths_1": {
            "name": "test_output_lengths_1",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutput.test_output_lengths_2": {
            "name": "test_output_lengths_2",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dt_id": [
                    "str"
                ],
                "measure_time": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "TestOutput.test_output_lengths_3": {
            "name": "test_output_lengths_3",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutput.test_output_lengths_4": {
            "name": "test_output_lengths_4",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dt_id": [
                    "str"
                ],
                "measure_time": [
                    "Optional[int]",
                    "str",
                    "int"
                ]
            }
        },
        "TestOutput.test_verbosity_2": {
            "name": "test_verbosity_2",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "capsys": [
                    "int",
                    "Sequence[int]",
                    "str",
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "TestOutput.test_verbosity_3": {
            "name": "test_verbosity_3",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "verbosity": [
                    "float"
                ],
                "msg_expected": [
                    "int",
                    "str",
                    "List[numpy.array]",
                    "List[int]",
                    "Union[str, float]",
                    "raiden.tests.integration.fixtures.raiden_network.RestartNode",
                    "bool"
                ],
                "capsys": [
                    "int",
                    "Sequence[int]",
                    "list",
                    "bool"
                ]
            }
        },
        "TestOutput.test_verbosity_with_confidence": {
            "name": "test_verbosity_with_confidence",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "verbosity": [
                    "int",
                    "float"
                ],
                "msg_expected": [
                    "int",
                    "str",
                    "List[numpy.array]",
                    "List[int]",
                    "Union[str, float]",
                    "raiden.tests.integration.fixtures.raiden_network.RestartNode",
                    "bool"
                ],
                "capsys": [
                    "int",
                    "Sequence[int]",
                    "list",
                    "bool"
                ]
            }
        },
        "TestOutput.test_verbosity_from_model": {
            "name": "test_verbosity_from_model",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "verbosity": [
                    "int"
                ],
                "msg_expected": [
                    "str"
                ],
                "capsys": [
                    "bool",
                    "List[str]"
                ]
            }
        },
        "TestOutput.test_extract_output_default": {
            "name": "test_extract_output_default",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutput.test_extract_output_default_unsupervised": {
            "name": "test_extract_output_default_unsupervised",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutput.test_extract_output_tuple": {
            "name": "test_extract_output_tuple",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutput.test_extract_output_dictionary": {
            "name": "test_extract_output_dictionary",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutput.test_extract_with_time_output_dictionary": {
            "name": "test_extract_with_time_output_dictionary",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutput.test_extract_output_dictionary_unsupervised": {
            "name": "test_extract_output_dictionary_unsupervised",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutput.test_extract_with_confidence_output_dictionary": {
            "name": "test_extract_with_confidence_output_dictionary",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutput.test_extract_with_time_and_with_confidence_output_dictionary": {
            "name": "test_extract_with_time_and_with_confidence_output_dictionary",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutput.test_extract_with_confidence_output_dictionary_unsupervised": {
            "name": "test_extract_with_confidence_output_dictionary_unsupervised",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutput.test_extract_output_pandas_dataframe": {
            "name": "test_extract_output_pandas_dataframe",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutput.test_extract_output_pandas_dataframe_unsupervised": {
            "name": "test_extract_output_pandas_dataframe_unsupervised",
            "location": 225,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutput.test_extract_with_time_output_pandas_dataframe": {
            "name": "test_extract_with_time_output_pandas_dataframe",
            "location": 235,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutput.test_extract_with_time_output_pandas_dataframe_unsupervised": {
            "name": "test_extract_with_time_output_pandas_dataframe_unsupervised",
            "location": 247,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutput.test_invalid_output_type": {
            "name": "test_invalid_output_type",
            "location": 257,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutput.test_invalid_output_type_unsupervised": {
            "name": "test_invalid_output_type_unsupervised",
            "location": 263,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutput.test_invalid_output_type_with_confidence": {
            "name": "test_invalid_output_type_with_confidence",
            "location": 269,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOutput.test_invalid_output_type_with_confidence_unsupervised": {
            "name": "test_invalid_output_type_with_confidence_unsupervised",
            "location": 277,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymfe-master/tests/test_relative_landmarking.py": {
        "TestRelativeLandmarking.test_ft_method_relative": {
            "name": "test_ft_method_relative",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dt_id": [
                    "str"
                ],
                "summary": [
                    "str"
                ],
                "precompute": [
                    "str",
                    "Tuple[str, str]",
                    "List[str]",
                    "Iterable[int]"
                ],
                "lm_sample_frac": [
                    "str"
                ],
                "exp_value": [
                    "int",
                    "str",
                    "Dict[Tuple[str, str], int]"
                ]
            }
        },
        "TestRelativeLandmarking.test_relative_correctness": {
            "name": "test_relative_correctness",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "summary": [
                    "str",
                    "Dict[Any, str]",
                    "List[float]"
                ],
                "dt_id": [
                    "str"
                ]
            }
        }
    },
    "pymfe-master/tests/test_scaling.py": {
        "TestDataScaling.test_output_lengths_2": {
            "name": "test_output_lengths_2",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dt_id": [
                    "str"
                ],
                "scaler": [
                    "int",
                    "List[int]",
                    "str"
                ],
                "exp_mean": [
                    "str",
                    "Optional[int]",
                    "int",
                    "raiden.utils.TokenAmount",
                    "float",
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "raiden.utils.TokenAddress"
                ],
                "exp_var": [
                    "str",
                    "Optional[int]",
                    "int",
                    "raiden.utils.TokenAmount",
                    "float",
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "raiden.utils.TokenAddress"
                ],
                "exp_min": [
                    "str",
                    "Optional[int]",
                    "int",
                    "raiden.utils.TokenAmount",
                    "float",
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "raiden.utils.TokenAddress"
                ],
                "exp_max": [
                    "str",
                    "Optional[int]",
                    "int",
                    "raiden.utils.TokenAmount",
                    "float",
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "raiden.utils.TokenAddress"
                ]
            }
        },
        "TestDataScaling.test_scaling_error_1": {
            "name": "test_scaling_error_1",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDataScaling.test_scaling_error_2": {
            "name": "test_scaling_error_2",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pymfe-master/tests/test_scoring.py": {
        "test_accuracy": {
            "name": "test_accuracy",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_balanced_accuracy": {
            "name": "test_balanced_accuracy",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_f1": {
            "name": "test_f1",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pymfe-master/tests/test_statistical.py": {
        "TestStatistical.test_ft_methods_statistical": {
            "name": "test_ft_methods_statistical",
            "location": 202,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dt_id": [
                    "str"
                ],
                "ft_name": [
                    "int",
                    "Mapping[str, str]",
                    "str",
                    "numpy.dtype",
                    "Type",
                    "List[float]"
                ],
                "exp_value": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]",
                    "float"
                ],
                "precompute": [
                    "str",
                    "Union[str, List]",
                    "bool"
                ]
            }
        },
        "TestStatistical.test_normality_tests": {
            "name": "test_normality_tests",
            "location": 252,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dt_id": [
                    "str",
                    "List[str]"
                ],
                "exp_value": [
                    "str",
                    "mode.utils.types.trees.NodeT",
                    "float",
                    "list",
                    "int"
                ],
                "precompute": [
                    "str",
                    "Tuple[str, str]",
                    "List[str]"
                ],
                "test": [
                    "str",
                    "int",
                    "dict"
                ],
                "failure": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "TestStatistical.test_error_normality_tests": {
            "name": "test_error_normality_tests",
            "location": 277,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test": [
                    "tests.hints.RightFolderCall"
                ],
                "failure": [
                    "tests.hints.RightFolderCall"
                ]
            }
        },
        "TestStatistical.test_none_cancor": {
            "name": "test_none_cancor",
            "location": 284,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStatistical.test_roy_largest_root": {
            "name": "test_roy_largest_root",
            "location": 327,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dt_id": [
                    "str"
                ],
                "exp_value": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "precompute": [
                    "str"
                ],
                "criterion": [
                    "str",
                    "bytes",
                    "tests._TestServerFactory",
                    "int"
                ]
            }
        },
        "TestStatistical.test_roy_largest_root_invalid_criteria": {
            "name": "test_roy_largest_root_invalid_criteria",
            "location": 340,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "criterion": [
                    "tests.basilisp.helpers.CompileFn"
                ]
            }
        },
        "TestStatistical.test_integration_statistical": {
            "name": "test_integration_statistical",
            "location": 492,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dt_id": [
                    "str"
                ],
                "exp_value": [
                    "str",
                    "float",
                    "Optional[str]",
                    "bool",
                    "int"
                ],
                "precompute": [
                    "str",
                    "Iterable[int]"
                ]
            }
        }
    },
    "pymfe-master/tests/test_summary.py": {
        "test_get_summary": {
            "name": "test_get_summary",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sum_histogram": {
            "name": "test_sum_histogram",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sum_quantiles": {
            "name": "test_sum_quantiles",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sum_skewness": {
            "name": "test_sum_skewness",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sum_kurtosis": {
            "name": "test_sum_kurtosis",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ddof": {
            "name": "test_ddof",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_nansummary": {
            "name": "test_nansummary",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "summary_func": [
                    "bool",
                    "int"
                ]
            }
        },
        "test_nancount": {
            "name": "test_nancount",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_powersum_scalar": {
            "name": "test_powersum_scalar",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "p": [
                    "Union[int, float]",
                    "Mapping[str, Any]",
                    "str",
                    "numpy.ndarray"
                ]
            }
        },
        "test_nanpowersum_scalar": {
            "name": "test_nanpowersum_scalar",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "p": [
                    "Union[int, float]",
                    "numpy.ndarray",
                    "Mapping[str, Any]",
                    "str"
                ]
            }
        },
        "test_powersum_array": {
            "name": "test_powersum_array",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "p": [
                    "Union[int, float]",
                    "List[numpy.ndarray]",
                    "Sequence[Union[int, float]]",
                    "numpy.ndarray"
                ]
            }
        },
        "test_nanpowersum_array": {
            "name": "test_nanpowersum_array",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "p": [
                    "Union[int, float]",
                    "Sequence[Union[int, float]]",
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "test_pnorm_scalar": {
            "name": "test_pnorm_scalar",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "p": [
                    "Union[int, float]",
                    "Mapping[str, Any]",
                    "str",
                    "numpy.ndarray"
                ]
            }
        },
        "test_nanpnorm_scalar": {
            "name": "test_nanpnorm_scalar",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {
                "p": [
                    "Union[int, float]",
                    "numpy.ndarray",
                    "Mapping[str, Any]",
                    "Sequence[Union[int, float]]"
                ]
            }
        },
        "test_pnorm_array": {
            "name": "test_pnorm_array",
            "location": 223,
            "return": [
                ""
            ],
            "arguments": {
                "p": [
                    "int",
                    "Sequence[Union[int, float]]",
                    "float"
                ]
            }
        },
        "test_nanpnorm_array": {
            "name": "test_nanpnorm_array",
            "location": 235,
            "return": [
                ""
            ],
            "arguments": {
                "p": [
                    "Union[int, float]",
                    "Sequence[Union[int, float]]",
                    "Mapping[str, Any]",
                    "numpy.ndarray"
                ]
            }
        },
        "test_sum_sum": {
            "name": "test_sum_sum",
            "location": 249,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sum_nansum": {
            "name": "test_sum_nansum",
            "location": 254,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_summary_empty_slice": {
            "name": "test_summary_empty_slice",
            "location": 298,
            "return": [
                ""
            ],
            "arguments": {
                "summary": [
                    "str"
                ],
                "sum_args": [
                    "Optional[Tuple[float, float]]"
                ],
                "exp_len": [
                    "int",
                    "str"
                ]
            }
        },
        "test_summary_all_nan": {
            "name": "test_summary_all_nan",
            "location": 354,
            "return": [
                ""
            ],
            "arguments": {
                "summary": [
                    "bool"
                ],
                "sum_args": [
                    "Optional[Tuple[float, float]]",
                    "str",
                    "Optional[\"Game\"]"
                ],
                "exp_len": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "pymfe-master/tests/test_system_testing.py": {
        "TestSystem.test_system_testing": {
            "name": "test_system_testing",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dt_id": [
                    "str"
                ],
                "precompute": [
                    "str"
                ],
                "supervised": [
                    "str"
                ]
            }
        },
        "TestSystem.test_system_testing.extract_mtf_by_group": {
            "name": "extract_mtf_by_group",
            "location": 47,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "set",
                "str"
            ],
            "arguments": {}
        },
        "TestSystem.test_system_testing.extract_all_mtf": {
            "name": "extract_all_mtf",
            "location": 75,
            "return": [
                "str",
                "Dict[str, Any]",
                "set"
            ],
            "arguments": {}
        }
    },
    "pymfe-master/tests/utils.py": {
        "load_xy": {
            "name": "load_xy",
            "location": 24,
            "return": [
                "str",
                "Optional[str]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "dt_id": [
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "raise_memory_error": {
            "name": "raise_memory_error",
            "location": 37,
            "return": [
                "float"
            ],
            "arguments": {
                "size": [
                    "Union[int, float]",
                    "bytes",
                    "float",
                    "str",
                    "type",
                    "Tuple[int, int]",
                    "list"
                ]
            }
        }
    },
    "pymfe-master/tests/__init__.py": {}
}
{
    "pymonads-master/setup.py": {},
    "pymonads-master/pymonads/applicative.py": {
        "lift_a_1": {
            "name": "lift_a_1",
            "location": 40,
            "return": [
                "Optional[int]",
                "str",
                "trezor.utils.Writer",
                "Dict[str, int]",
                "List[int]",
                "int"
            ],
            "arguments": {
                "func": [
                    "Callable[[T], bool]",
                    "float",
                    "Callable"
                ],
                "fa": [
                    "Callable[[T], bool]",
                    "float",
                    "Callable"
                ]
            }
        },
        "lift_a_2": {
            "name": "lift_a_2",
            "location": 44,
            "return": [
                "Optional[int]",
                "str",
                "trezor.utils.Writer",
                "Dict[str, int]",
                "List[int]",
                "int"
            ],
            "arguments": {
                "func": [
                    "Callable[[T], bool]",
                    "float",
                    "Callable"
                ],
                "fa": [
                    "Callable[[T], bool]",
                    "float",
                    "Callable"
                ],
                "fb": [
                    "Callable[[T], bool]",
                    "float",
                    "Callable"
                ]
            }
        },
        "lift_a_3": {
            "name": "lift_a_3",
            "location": 49,
            "return": [
                "int",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "str",
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "List[str]"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "bool"
                ],
                "fa": [
                    "Callable",
                    "bool"
                ],
                "fb": [
                    "Callable",
                    "bool"
                ],
                "fc": [
                    "Callable",
                    "bool"
                ]
            }
        },
        "pure": {
            "name": "pure",
            "location": 52,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "applicative_class": [
                    "int",
                    "float",
                    "Optional[Dict]",
                    "Optional[List[str]]",
                    "Optional[AbstractSet]"
                ],
                "value": [
                    "int",
                    "float",
                    "Optional[Dict]",
                    "Optional[List[str]]",
                    "Optional[AbstractSet]"
                ]
            }
        },
        "Applicative.pure": {
            "name": "pure",
            "location": 24,
            "return": [
                "Applicative[A]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "T",
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "value": [
                    "dict",
                    "T",
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Applicative.amap": {
            "name": "amap",
            "location": 28,
            "return": [
                "Applicative[B]"
            ],
            "arguments": {
                "self": [],
                "fab": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Applicative.sequence_right": {
            "name": "sequence_right",
            "location": 31,
            "return": [
                "str",
                "float",
                "Tuple[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "fb": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Applicative.sequence_left": {
            "name": "sequence_left",
            "location": 34,
            "return": [
                "str",
                "float",
                "Tuple[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "fb": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "pymonads-master/pymonads/either.py": {
        "either": {
            "name": "either",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "left_func": [
                    "Callable[..., bool]",
                    "Optional[int]",
                    "int"
                ],
                "right_func": [
                    "Callable[..., bool]",
                    "Optional[int]",
                    "int"
                ],
                "either_": [
                    "str",
                    "bool",
                    "Callable[[T], None]",
                    "Union[int, str]",
                    "int",
                    "type",
                    "Dict[str, Any]"
                ]
            }
        },
        "lefts": {
            "name": "lefts",
            "location": 71,
            "return": [
                "int",
                "List[Dict[str, str]]",
                "list",
                "Sequence[Any]",
                "List[str]",
                "Dict[str, Any]",
                "Tuple[int, int]",
                "Set[str]",
                "Optional[Sequence[str]]"
            ],
            "arguments": {
                "eithers": [
                    "str",
                    "int",
                    "Tuple[float, float, float]"
                ]
            }
        },
        "rights": {
            "name": "rights",
            "location": 75,
            "return": [
                "int",
                "List[Dict[str, str]]",
                "list",
                "Sequence[Any]",
                "List[str]",
                "Dict[str, Any]",
                "Tuple[int, int]",
                "Set[str]",
                "Optional[Sequence[str]]"
            ],
            "arguments": {
                "eithers": [
                    "str",
                    "int",
                    "Tuple[float, float, float]"
                ]
            }
        },
        "from_left": {
            "name": "from_left",
            "location": 79,
            "return": [
                "Dict[str, int]",
                "int",
                "Dict[str, Any]",
                "dict",
                "List[str]",
                "str"
            ],
            "arguments": {
                "default": [
                    "str",
                    "float",
                    "Callable[[object], Any]",
                    "Dict[str, Any]",
                    "Optional[int]"
                ],
                "either_": [
                    "str",
                    "float",
                    "Callable[[object], Any]",
                    "Dict[str, Any]",
                    "Optional[int]"
                ]
            }
        },
        "from_right": {
            "name": "from_right",
            "location": 84,
            "return": [
                "Dict[str, int]",
                "int",
                "Dict[str, Any]",
                "dict",
                "List[str]",
                "str"
            ],
            "arguments": {
                "default": [
                    "str",
                    "float",
                    "Callable[[object], Any]",
                    "Dict[str, Any]",
                    "Optional[int]"
                ],
                "either_": [
                    "str",
                    "float",
                    "Callable[[object], Any]",
                    "Dict[str, Any]",
                    "Optional[int]"
                ]
            }
        },
        "partition_eithers": {
            "name": "partition_eithers",
            "location": 89,
            "return": [
                "bool",
                "str",
                "List[List[str]]"
            ],
            "arguments": {
                "eithers": [
                    "List[str]",
                    "[[]]",
                    "str",
                    "Tuple[FrozenSet[int]]",
                    "int"
                ]
            }
        },
        "_Either.pure": {
            "name": "pure",
            "location": 18,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "T",
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "value": [
                    "T",
                    "str",
                    "bytes",
                    "float",
                    "Callable[[object], Any]",
                    "type"
                ]
            }
        },
        "_Either.is_left": {
            "name": "is_left",
            "location": 21,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Either.is_right": {
            "name": "is_right",
            "location": 24,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Left.fmap": {
            "name": "fmap",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "Left.amap": {
            "name": "amap",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "fab": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Left.flat_map": {
            "name": "flat_map",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "Right.fmap": {
            "name": "fmap",
            "location": 47,
            "return": [
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "T"
                ]
            }
        },
        "Right.amap": {
            "name": "amap",
            "location": 51,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": [],
                "fab": [
                    "dict",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Right.flat_map": {
            "name": "flat_map",
            "location": 55,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "Mapping[str, Dict[str, Any]]",
                    "int"
                ]
            }
        }
    },
    "pymonads-master/pymonads/functor.py": {
        "Functor.__repr__": {
            "name": "__repr__",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Functor.fmap": {
            "name": "fmap",
            "location": 37,
            "return": [
                "Functor[B]"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "Functor.map_replace": {
            "name": "map_replace",
            "location": 40,
            "return": [
                "int",
                "str",
                "List[int]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "bool",
                    "Union[int, float]"
                ]
            }
        }
    },
    "pymonads-master/pymonads/maybe.py": {
        "maybe": {
            "name": "maybe",
            "location": 76,
            "return": [
                "str",
                "Type",
                "int",
                "List[str]",
                "float",
                "mode.utils.types.graphs._T"
            ],
            "arguments": {
                "default": [
                    "Callable"
                ],
                "func": [
                    "Callable"
                ],
                "maybe_": [
                    "Callable"
                ]
            }
        },
        "from_just": {
            "name": "from_just",
            "location": 85,
            "return": [
                "int",
                "str",
                "Dict[Tuple[str, str], Tuple[float, float]]"
            ],
            "arguments": {
                "maybe_": [
                    "dict",
                    "List[str]"
                ]
            }
        },
        "from_maybe": {
            "name": "from_maybe",
            "location": 92,
            "return": [
                "Dict[str, int]",
                "int",
                "Dict[str, Any]",
                "dict",
                "List[str]",
                "str"
            ],
            "arguments": {
                "default": [
                    "Dict[str, Any]"
                ],
                "maybe_": [
                    "Dict[str, Any]"
                ]
            }
        },
        "list_to_maybe": {
            "name": "list_to_maybe",
            "location": 101,
            "return": [
                "int",
                "str",
                "Union[int, float]"
            ],
            "arguments": {
                "elems": [
                    "str",
                    "float",
                    "Optional[List[str]]",
                    "bool"
                ]
            }
        },
        "maybe_to_list": {
            "name": "maybe_to_list",
            "location": 109,
            "return": [
                "Dict[str, str]",
                "int",
                "List[str]",
                "bytes",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "maybe_": [
                    "List[int]",
                    "str",
                    "int"
                ]
            }
        },
        "cat_maybes": {
            "name": "cat_maybes",
            "location": 116,
            "return": [
                "list",
                "str",
                "int",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "maybes": [
                    "str",
                    "float"
                ]
            }
        },
        "map_maybe": {
            "name": "map_maybe",
            "location": 119,
            "return": [
                "typing.Iterable[B]"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "bool"
                ],
                "elems": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "_Maybe.pure": {
            "name": "pure",
            "location": 22,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "T",
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "value": [
                    "float",
                    "Callable[[Any], T]",
                    "bool",
                    "T"
                ]
            }
        },
        "_Maybe.is_just": {
            "name": "is_just",
            "location": 25,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Maybe.is_nothing": {
            "name": "is_nothing",
            "location": 28,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Nothing.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Nothing.__repr__": {
            "name": "__repr__",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Nothing.value": {
            "name": "value",
            "location": 42,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Nothing.fmap": {
            "name": "fmap",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "Nothing.amap": {
            "name": "amap",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "fab": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Nothing.flat_map": {
            "name": "flat_map",
            "location": 53,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "Just.fmap": {
            "name": "fmap",
            "location": 61,
            "return": [
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable[[], Any]",
                    "Callable"
                ]
            }
        },
        "Just.amap": {
            "name": "amap",
            "location": 64,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": [],
                "fab": [
                    "dict",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Just.flat_map": {
            "name": "flat_map",
            "location": 68,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "Mapping[str, Dict[str, Any]]",
                    "int"
                ]
            }
        }
    },
    "pymonads-master/pymonads/monad.py": {
        "Monad.pure": {
            "name": "pure",
            "location": 18,
            "return": [
                "Monad[A]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "T",
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "value": [
                    "dict",
                    "T",
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Monad.flat_map": {
            "name": "flat_map",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "Monad.__or__": {
            "name": "__or__",
            "location": 25,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "Callable[[T], bool]",
                    "float"
                ]
            }
        },
        "Monad.__rshift__": {
            "name": "__rshift__",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "mb": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Monad.map": {
            "name": "map",
            "location": 33,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "Monad.map.a_to_mb": {
            "name": "a_to_mb",
            "location": 35,
            "return": [
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "int",
                "List[str]",
                "utils.Node",
                "str"
            ],
            "arguments": {
                "some_a": [
                    "Pattern"
                ]
            }
        }
    },
    "pymonads-master/pymonads/utils.py": {
        "curry": {
            "name": "curry",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "identity": {
            "name": "identity",
            "location": 24,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "apply": {
            "name": "apply",
            "location": 29,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., Awaitable[Any]]"
                ]
            }
        },
        "const": {
            "name": "const",
            "location": 34,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ],
                "_": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "compose": {
            "name": "compose",
            "location": 40,
            "return": [
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "f": [
                    "Callable",
                    "Callable[..., None]"
                ],
                "g": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "flip": {
            "name": "flip",
            "location": 45,
            "return": [
                "int",
                "Type",
                "Dict[str, Any]",
                "List[str]",
                "float",
                "str"
            ],
            "arguments": {
                "func": [
                    "int",
                    "Optional[float]",
                    "str"
                ],
                "a": [
                    "int",
                    "Optional[float]",
                    "str"
                ],
                "b": [
                    "int",
                    "Optional[float]",
                    "str"
                ]
            }
        },
        "partition": {
            "name": "partition",
            "location": 50,
            "return": [
                "int",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "pred": [
                    "str",
                    "Union[int, float]",
                    "callable",
                    "bool"
                ],
                "iterable": [
                    "float",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "curry.curried": {
            "name": "curried",
            "location": 16,
            "return": [
                "bool",
                "float",
                "Dict[str, Any]",
                "Callable[..., None]",
                "str"
            ],
            "arguments": {}
        }
    },
    "pymonads-master/pymonads/__init__.py": {},
    "pymonads-master/tests/applicative_laws.py": {
        "applicative_preserves_identity_morphism": {
            "name": "applicative_preserves_identity_morphism",
            "location": 16,
            "return": [
                "MutableSequence[utils.CWLObjectType]",
                "Sequence[Any]",
                "bool"
            ],
            "arguments": {
                "ap": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "applicative_preserves_function_application": {
            "name": "applicative_preserves_function_application",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "ap_class": [],
                "f": [],
                "x": []
            }
        },
        "applicative_is_interchangeable": {
            "name": "applicative_is_interchangeable",
            "location": 22,
            "return": [
                "str",
                "Match[str]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "ap": [
                    "T",
                    "Iterable[List[T]]",
                    "int"
                ],
                "x": [
                    "T",
                    "Iterable[List[T]]",
                    "int"
                ]
            }
        },
        "applicative_preserves_composition": {
            "name": "applicative_preserves_composition",
            "location": 25,
            "return": [
                "utils.Node",
                "str",
                "float"
            ],
            "arguments": {
                "ap_a": [
                    "str",
                    "List[int]"
                ],
                "ap_b": [
                    "str",
                    "List[int]"
                ],
                "ap_c": [
                    "str",
                    "List[int]"
                ]
            }
        }
    },
    "pymonads-master/tests/functor_laws.py": {
        "functor_preserves_identity_morphisms": {
            "name": "functor_preserves_identity_morphisms",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "functor": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "functor_preserves_composition_of_morphisms": {
            "name": "functor_preserves_composition_of_morphisms",
            "location": 17,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "functor": [
                    "callable",
                    "list",
                    "Dict[str, Any]",
                    "int"
                ],
                "f": [
                    "callable",
                    "list",
                    "Dict[str, Any]",
                    "int"
                ],
                "g": [
                    "callable",
                    "list",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        }
    },
    "pymonads-master/tests/monad_laws.py": {
        "monad_respects_left_identity": {
            "name": "monad_respects_left_identity",
            "location": 14,
            "return": [
                "float",
                "Optional[int]",
                "str",
                "dict",
                "Generator",
                "int"
            ],
            "arguments": {
                "monad": [
                    "pymonads.monad.Monad[A]",
                    "Dict[str, Any]",
                    "\"Vector\""
                ],
                "value": [
                    "pymonads.monad.Monad[A]",
                    "Dict[str, Any]",
                    "\"Vector\""
                ],
                "func": [
                    "pymonads.monad.Monad[A]",
                    "Dict[str, Any]",
                    "\"Vector\""
                ]
            }
        },
        "monad_respects_right_identity": {
            "name": "monad_respects_right_identity",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "monad": [
                    "pymonads.monad.Monad[A]",
                    "int",
                    "str"
                ],
                "value": [
                    "float",
                    "str",
                    "List[Dict[str, Any]]",
                    "bool",
                    "list",
                    "int"
                ],
                "func": [
                    "float",
                    "str",
                    "List[Dict[str, Any]]",
                    "bool",
                    "list",
                    "int"
                ]
            }
        },
        "monad_respects_associativity": {
            "name": "monad_respects_associativity",
            "location": 20,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "monad": [
                    "pymonads.monad.Monad[A]",
                    "Callable[[A], pymonads.monad.Monad[B]]",
                    "callable",
                    "list",
                    "Iterable[T]",
                    "int"
                ],
                "f": [
                    "pymonads.monad.Monad[A]",
                    "Callable[[A], pymonads.monad.Monad[B]]",
                    "callable",
                    "list",
                    "Iterable[T]",
                    "int"
                ],
                "g": [
                    "pymonads.monad.Monad[A]",
                    "Callable[[A], pymonads.monad.Monad[B]]",
                    "callable",
                    "list",
                    "Iterable[T]",
                    "int"
                ]
            }
        }
    },
    "pymonads-master/tests/test_either.py": {
        "eithers": {
            "name": "eithers",
            "location": 15,
            "return": [
                "str",
                "IO[str]",
                "Tuple[str, str]",
                "int"
            ],
            "arguments": {}
        },
        "eithers_applicative": {
            "name": "eithers_applicative",
            "location": 19,
            "return": [
                "str",
                "Union[List, str]",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "test_either_preserves_identity_morhpisms": {
            "name": "test_either_preserves_identity_morhpisms",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "either": [
                    "str",
                    "float"
                ]
            }
        },
        "test_either_preserves_composition_of_morphisms": {
            "name": "test_either_preserves_composition_of_morphisms",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "either": [
                    "str",
                    "float"
                ]
            }
        },
        "test_either_obeys_identity_law": {
            "name": "test_either_obeys_identity_law",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "either": [
                    "str",
                    "float"
                ]
            }
        },
        "test_either_is_homomorphic": {
            "name": "test_either_is_homomorphic",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "Sequence[str]",
                    "int",
                    "Iterable[str]",
                    "bool",
                    "Optional[Exception]"
                ]
            }
        },
        "test_either_obeys_interchangeability": {
            "name": "test_either_obeys_interchangeability",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "either": [
                    "str",
                    "bool",
                    "float",
                    "int",
                    "List[str]"
                ],
                "x": [
                    "str",
                    "bool",
                    "float",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_either_obeys_left_identity": {
            "name": "test_either_obeys_left_identity",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "either": [
                    "str",
                    "float",
                    "List[float]"
                ],
                "x": [
                    "str",
                    "float",
                    "List[float]"
                ]
            }
        },
        "test_either_obeys_right_identity": {
            "name": "test_either_obeys_right_identity",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "either": [
                    "str",
                    "float",
                    "List[float]"
                ],
                "x": [
                    "str",
                    "float",
                    "List[float]"
                ]
            }
        },
        "test_either_associativity": {
            "name": "test_either_associativity",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "either": [
                    "bool"
                ]
            }
        },
        "test_flat_map_left_does_nothing": {
            "name": "test_flat_map_left_does_nothing",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_flat_map_on_right_applies_func": {
            "name": "test_flat_map_on_right_applies_func",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pymonads-master/tests/test_maybe.py": {
        "maybes": {
            "name": "maybes",
            "location": 15,
            "return": [
                "str",
                "IO[str]",
                "Tuple[str, str]",
                "int"
            ],
            "arguments": {}
        },
        "maybes_applicative": {
            "name": "maybes_applicative",
            "location": 19,
            "return": [
                "str",
                "Union[List, str]",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "test_maybe_preserves_identity_morhpisms": {
            "name": "test_maybe_preserves_identity_morhpisms",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "maybe": [
                    "str",
                    "float"
                ]
            }
        },
        "test_maybe_preserves_composition_of_morphisms": {
            "name": "test_maybe_preserves_composition_of_morphisms",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "maybe": [
                    "str",
                    "float"
                ]
            }
        },
        "test_maybe_obeys_identity_law": {
            "name": "test_maybe_obeys_identity_law",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "maybe": [
                    "str",
                    "float"
                ]
            }
        },
        "test_maybe_is_homomorphic": {
            "name": "test_maybe_is_homomorphic",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "x": [
                    "Optional[\"Cell\"]",
                    "Iterable[str]",
                    "str",
                    "Union[bytes, bytearray]"
                ]
            }
        },
        "test_maybe_obeys_interchangeability": {
            "name": "test_maybe_obeys_interchangeability",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "maybe": [
                    "str",
                    "bool",
                    "float",
                    "int",
                    "List[str]"
                ],
                "x": [
                    "str",
                    "bool",
                    "float",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_maybe_obeys_left_identity": {
            "name": "test_maybe_obeys_left_identity",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "maybe": [
                    "str",
                    "float",
                    "List[float]"
                ],
                "x": [
                    "str",
                    "float",
                    "List[float]"
                ]
            }
        },
        "test_maybe_obeys_Just_identity": {
            "name": "test_maybe_obeys_Just_identity",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "maybe": [
                    "str",
                    "float",
                    "List[float]"
                ],
                "x": [
                    "str",
                    "float",
                    "List[float]"
                ]
            }
        },
        "test_maybe_associativity": {
            "name": "test_maybe_associativity",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "maybe": [
                    "bool"
                ]
            }
        }
    },
    "pymonads-master/tests/__init__.py": {}
}
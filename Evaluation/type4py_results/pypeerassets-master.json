{
    "pypeerassets-master/setup.py": {},
    "pypeerassets-master/examples/once_issue_mode_example.py": {
        "wait_for_confirmation": {
            "name": "wait_for_confirmation",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "provider": [
                    "int",
                    "str"
                ],
                "transaction_id": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "pypeerassets-master/pypeerassets/card_parsers.py": {
        "none_parser": {
            "name": "none_parser",
            "location": 6,
            "return": [
                "str",
                "Optional[str]",
                "Optional[List[str]]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "cards": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ]
            }
        },
        "custom_parser": {
            "name": "custom_parser",
            "location": 15,
            "return": [],
            "arguments": {
                "cards": [
                    "str",
                    "Optional[Callable[[Dict], Any]]"
                ],
                "parser": [
                    "str",
                    "Optional[Callable[[Dict], Any]]"
                ]
            }
        },
        "once_parser": {
            "name": "once_parser",
            "location": 26,
            "return": [
                "List[str]",
                "Optional[dict]",
                "Set[str]"
            ],
            "arguments": {
                "cards": [
                    "Callable",
                    "dict",
                    "bool"
                ]
            }
        },
        "multi_parser": {
            "name": "multi_parser",
            "location": 39,
            "return": [
                "str",
                "int",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cards": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "mono_parser": {
            "name": "mono_parser",
            "location": 45,
            "return": [
                "str",
                "int",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cards": [
                    "str",
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "unflushable_parser": {
            "name": "unflushable_parser",
            "location": 64,
            "return": [
                "List[str]",
                "Optional[dict]",
                "Set[str]"
            ],
            "arguments": {
                "cards": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "pypeerassets-master/pypeerassets/exceptions.py": {},
    "pypeerassets-master/pypeerassets/kutil.py": {
        "Kutil.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "network": [
                    "bytes",
                    "Union[bytes, str]"
                ],
                "privkey": [
                    "str",
                    "Optional[str]",
                    "bytearray",
                    "bytes"
                ],
                "from_string": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "bool",
                    "Optional[Dict[str, str]]",
                    "Optional[bytes]"
                ],
                "from_wif": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "bytes"
                ]
            }
        },
        "Kutil.address": {
            "name": "address",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Kutil.wif": {
            "name": "wif",
            "location": 59,
            "return": [
                "int",
                "bool",
                "str",
                "Callable[[Dict], Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Kutil.sign_transaction": {
            "name": "sign_transaction",
            "location": 64,
            "return": [
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "txins": [
                    "bytes",
                    "int",
                    "Union[str, int]",
                    "str",
                    "list"
                ],
                "tx": [
                    "bytes",
                    "int",
                    "Union[str, int]",
                    "str",
                    "list"
                ]
            }
        }
    },
    "pypeerassets-master/pypeerassets/networks.py": {
        "net_query": {
            "name": "net_query",
            "location": 100,
            "return": [
                "int",
                "float",
                "str",
                "List[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "PeercoinTxOut.get_dust_threshold": {
            "name": "get_dust_threshold",
            "location": 12,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "size_to_relay_fee": [
                    "bool",
                    "List[int]",
                    "str",
                    "Mapping[str, str]",
                    "int",
                    "Optional[int]"
                ]
            }
        }
    },
    "pypeerassets-master/pypeerassets/paproto_pb2.py": {},
    "pypeerassets-master/pypeerassets/pautils.py": {
        "load_p2th_privkey_into_local_node": {
            "name": "load_p2th_privkey_into_local_node",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "provider": [
                    "bool",
                    "List[str]"
                ],
                "prod": [
                    "bool",
                    "str",
                    "list",
                    "IO[str]"
                ]
            }
        },
        "find_tx_sender": {
            "name": "find_tx_sender",
            "location": 48,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "provider": [
                    "int",
                    "set",
                    "str"
                ],
                "raw_tx": [
                    "List[int]",
                    "str",
                    "int",
                    "Callable[[], str]"
                ]
            }
        },
        "find_deck_spawns": {
            "name": "find_deck_spawns",
            "location": 57,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "provider": [
                    "int",
                    "bool"
                ],
                "prod": [
                    "List[str]",
                    "bool",
                    "List[object]",
                    "Sized",
                    "Optional[List]",
                    "str"
                ]
            }
        },
        "deck_parser": {
            "name": "deck_parser",
            "location": 81,
            "return": [
                "Optional[str]",
                "dict",
                "Optional[Type[Exception]]",
                "Optional[float]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "args": [],
                "prod": [
                    "str",
                    "int"
                ]
            }
        },
        "tx_serialization_order": {
            "name": "tx_serialization_order",
            "location": 119,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "provider": [
                    "str",
                    "int",
                    "pypeerassets.provider.Provider"
                ],
                "blockhash": [
                    "str",
                    "int",
                    "pypeerassets.provider.Provider"
                ],
                "txid": [
                    "str",
                    "int",
                    "pypeerassets.provider.Provider"
                ]
            }
        },
        "read_tx_opreturn": {
            "name": "read_tx_opreturn",
            "location": 125,
            "return": [
                "dict",
                "Dict[str, str]",
                "Dict[str, List[Any]]",
                "List[Dict[str, Any]]",
                "List[str]"
            ],
            "arguments": {
                "vout": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "deck_issue_mode": {
            "name": "deck_issue_mode",
            "location": 144,
            "return": [
                "int",
                "p2p.protocol._DecodedMsgType"
            ],
            "arguments": {
                "proto": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "issue_mode_to_enum": {
            "name": "issue_mode_to_enum",
            "location": 158,
            "return": [
                "bool",
                "int",
                "Union['AbstractSetIntStr', 'MappingIntStrAny']"
            ],
            "arguments": {
                "deck": [
                    "bytes",
                    "str"
                ],
                "issue_mode": [
                    "list",
                    "Optional[int]",
                    "Optional[str]",
                    "List[Tuple[bool, str]]"
                ]
            }
        },
        "parse_deckspawn_metainfo": {
            "name": "parse_deckspawn_metainfo",
            "location": 175,
            "return": [
                "int",
                "dict",
                "List[str]",
                "Optional[int]"
            ],
            "arguments": {
                "protobuf": [
                    "bytes",
                    "dict",
                    "str",
                    "Dict[str, float]",
                    "bool"
                ],
                "version": [
                    "int",
                    "bytes",
                    "Callable"
                ]
            }
        },
        "validate_deckspawn_p2th": {
            "name": "validate_deckspawn_p2th",
            "location": 199,
            "return": [
                "bool"
            ],
            "arguments": {
                "provider": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "rawtx": [
                    "str",
                    "dict"
                ],
                "p2th": [
                    "str",
                    "float",
                    "Tuple[str]",
                    "Optional[int]",
                    "pypeerassets.protocol.Deck"
                ]
            }
        },
        "load_deck_p2th_into_local_node": {
            "name": "load_deck_p2th_into_local_node",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "provider": [],
                "deck": [
                    "bool",
                    "str"
                ]
            }
        },
        "validate_card_transfer_p2th": {
            "name": "validate_card_transfer_p2th",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "deck": [
                    "pypeerassets.protocol.Deck",
                    "Tuple[str]",
                    "str",
                    "int"
                ],
                "vout": [
                    "str",
                    "dict"
                ]
            }
        },
        "parse_card_transfer_metainfo": {
            "name": "parse_card_transfer_metainfo",
            "location": 245,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "protobuf": [
                    "bytes",
                    "dict",
                    "str",
                    "Dict[str, List[Any]]"
                ],
                "deck_version": [
                    "int",
                    "tuple",
                    "str",
                    "Optional[Set[str]]",
                    "bool"
                ]
            }
        },
        "card_postprocess": {
            "name": "card_postprocess",
            "location": 265,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "card": [
                    "int",
                    "str"
                ],
                "vout": [
                    "list",
                    "str",
                    "List[str]",
                    "int",
                    "dict"
                ]
            }
        },
        "card_bundle_parser": {
            "name": "card_bundle_parser",
            "location": 286,
            "return": [
                "Dict[str, Union[str, Any]]",
                "int",
                "Dict[str, Any]",
                "bool",
                "Iterable[Mapping[str, Any]]"
            ],
            "arguments": {
                "bundle": [
                    "Optional[str]",
                    "int",
                    "str"
                ],
                "debug": [
                    "str",
                    "bool",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "amount_to_exponent": {
            "name": "amount_to_exponent",
            "location": 339,
            "return": [
                "int",
                "List[int]",
                "tuple",
                "bool"
            ],
            "arguments": {
                "amount": [
                    "int",
                    "float",
                    "str"
                ],
                "number_of_decimals": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "exponent_to_amount": {
            "name": "exponent_to_amount",
            "location": 345,
            "return": [
                "DefaultDict[int, List[Any]]",
                "int",
                "bytes",
                "bool",
                "OrderedDict"
            ],
            "arguments": {
                "exponent": [
                    "int",
                    "str",
                    "Dict[str, Any]"
                ],
                "number_of_decimals": [
                    "int",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "pypeerassets-master/pypeerassets/pavoteproto_pb2.py": {},
    "pypeerassets-master/pypeerassets/pa_constants.py": {
        "param_query": {
            "name": "param_query",
            "location": 33,
            "return": [
                "int",
                "float",
                "str",
                "List[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "type",
                    "List[Dict[str, Any]]"
                ]
            }
        }
    },
    "pypeerassets-master/pypeerassets/protocol.py": {
        "validate_card_issue_modes": {
            "name": "validate_card_issue_modes",
            "location": 365,
            "return": [
                "List[List[str]]",
                "str"
            ],
            "arguments": {
                "issue_mode": [
                    "int",
                    "List[Type]",
                    "str"
                ],
                "cards": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "Deck.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[Sequence[Any]]",
                    "Optional[Dict[str, str]]"
                ],
                "number_of_decimals": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "str",
                    "Callable"
                ],
                "issue_mode": [
                    "bool",
                    "int"
                ],
                "network": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "str",
                    "Callable"
                ],
                "production": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "str",
                    "Callable"
                ],
                "version": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "str",
                    "Callable"
                ],
                "asset_specific_data": [
                    "str",
                    "Any",
                    "Dict[str, list]",
                    "bool"
                ],
                "issuer": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "str",
                    "Callable"
                ],
                "issue_time": [
                    "int",
                    "Optional[float]",
                    "float",
                    "Optional[int]",
                    "str"
                ],
                "id": [
                    "str",
                    "Optional[str]",
                    "Sequence[Any]"
                ],
                "tx_confirmations": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "str",
                    "Callable"
                ]
            }
        },
        "Deck.p2th_address": {
            "name": "p2th_address",
            "location": 89,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deck.p2th_wif": {
            "name": "p2th_wif",
            "location": 99,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deck.metainfo_to_protobuf": {
            "name": "metainfo_to_protobuf",
            "location": 109,
            "return": [
                "str",
                "Dict[str, Any]",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deck.metainfo_to_dict": {
            "name": "metainfo_to_dict",
            "location": 132,
            "return": [
                "Dict[str, Any]",
                "List[str]",
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deck.to_json": {
            "name": "to_json",
            "location": 147,
            "return": [
                "Dict[str, bool]",
                "bool",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deck.from_json": {
            "name": "from_json",
            "location": 155,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable"
                ],
                "json": [
                    "str",
                    "Callable"
                ]
            }
        },
        "Deck.__str__": {
            "name": "__str__",
            "location": 165,
            "return": [
                "bool",
                "List[Tuple[str, str]]",
                "Set[str]",
                "int",
                "List[str]",
                "List[\"Node\"]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CardBundle.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "deck": [
                    "int",
                    "bool",
                    "float"
                ],
                "sender": [
                    "int",
                    "bool",
                    "float"
                ],
                "txid": [
                    "int",
                    "bool",
                    "float"
                ],
                "blockhash": [
                    "int",
                    "bool",
                    "float"
                ],
                "blocknum": [
                    "int",
                    "bool",
                    "float"
                ],
                "blockseq": [
                    "int",
                    "bool",
                    "float"
                ],
                "timestamp": [
                    "int",
                    "bool",
                    "float"
                ],
                "tx_confirmations": [
                    "int",
                    "bool",
                    "float"
                ],
                "vouts": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "CardBundle.to_json": {
            "name": "to_json",
            "location": 210,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "dict",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CardTransfer.__init__": {
            "name": "__init__",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "deck": [
                    "int",
                    "Optional[Union[float, str]]",
                    "Optional[Sequence[Any]]",
                    "Optional[str]"
                ],
                "receiver": [
                    "int",
                    "List[int]",
                    "bool",
                    "List[float]",
                    "list",
                    "Sequence[int]"
                ],
                "amount": [
                    "int",
                    "Optional[int]",
                    "List[int]",
                    "dict",
                    "Sequence"
                ],
                "version": [
                    "float",
                    "bytes",
                    "Optional[dict]",
                    "bool"
                ],
                "blockhash": [
                    "float",
                    "bytes",
                    "Optional[dict]",
                    "bool"
                ],
                "txid": [
                    "float",
                    "bytes",
                    "Optional[dict]",
                    "bool"
                ],
                "sender": [
                    "float",
                    "bytes",
                    "Optional[dict]",
                    "bool"
                ],
                "asset_specific_data": [
                    "int",
                    "List[str]",
                    "bool",
                    "str"
                ],
                "number_of_decimals": [
                    "float",
                    "bytes",
                    "Optional[dict]",
                    "bool"
                ],
                "blockseq": [
                    "float",
                    "bytes",
                    "Optional[dict]",
                    "bool"
                ],
                "cardseq": [
                    "float",
                    "bytes",
                    "Optional[dict]",
                    "bool"
                ],
                "blocknum": [
                    "float",
                    "bytes",
                    "Optional[dict]",
                    "bool"
                ],
                "timestamp": [
                    "float",
                    "bytes",
                    "Optional[dict]",
                    "bool"
                ],
                "tx_confirmations": [
                    "float",
                    "bytes",
                    "Optional[dict]",
                    "bool"
                ],
                "type": [
                    "bool",
                    "str",
                    "type"
                ]
            }
        },
        "CardTransfer.metainfo_to_protobuf": {
            "name": "metainfo_to_protobuf",
            "location": 309,
            "return": [
                "str",
                "Dict[str, Any]",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CardTransfer.metainfo_to_dict": {
            "name": "metainfo_to_dict",
            "location": 331,
            "return": [
                "Dict[str, Any]",
                "List[str]",
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "CardTransfer.to_json": {
            "name": "to_json",
            "location": 345,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "dict",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CardTransfer.from_json": {
            "name": "from_json",
            "location": 351,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable"
                ],
                "json": [
                    "str",
                    "Callable"
                ]
            }
        },
        "CardTransfer.__str__": {
            "name": "__str__",
            "location": 356,
            "return": [
                "bool",
                "List[Tuple[str, str]]",
                "Set[str]",
                "int",
                "List[str]",
                "List[\"Node\"]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeckState.__init__": {
            "name": "__init__",
            "location": 394,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cards": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DeckState._process": {
            "name": "_process",
            "location": 407,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "card": [
                    "Callable",
                    "dict",
                    "bytes",
                    "Optional[List[int]]",
                    "str"
                ],
                "ctype": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DeckState._append_balance": {
            "name": "_append_balance",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "Optional[\"Money\"]"
                ],
                "receiver": [
                    "int",
                    "Optional[\"Money\"]"
                ]
            }
        },
        "DeckState._sort_cards": {
            "name": "_sort_cards",
            "location": 439,
            "return": [
                "int",
                "Mapping[str, object]",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "cards": [
                    "Generator",
                    "dict",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "DeckState.calc_state": {
            "name": "calc_state",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pypeerassets-master/pypeerassets/transactions.py": {
        "calculate_tx_fee": {
            "name": "calculate_tx_fee",
            "location": 214,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tx_size": [
                    "int",
                    "bool",
                    "Tuple[int, int]",
                    "Tuple[int, int, int]"
                ]
            }
        },
        "nulldata_script": {
            "name": "nulldata_script",
            "location": 228,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "Union[str, bytes]",
                    "List[int]"
                ]
            }
        },
        "p2pkh_script": {
            "name": "p2pkh_script",
            "location": 235,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "network": [
                    "List[str]",
                    "bool"
                ],
                "address": [
                    "str"
                ]
            }
        },
        "p2sh_p2pkh_script": {
            "name": "p2sh_p2pkh_script",
            "location": 246,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "network": [
                    "List[str]",
                    "bool"
                ],
                "address": [
                    "str"
                ]
            }
        },
        "tx_output": {
            "name": "tx_output",
            "location": 259,
            "return": [
                "str"
            ],
            "arguments": {
                "network": [
                    "bool",
                    "Optional[str]"
                ],
                "value": [
                    "int"
                ],
                "n": [
                    "int"
                ],
                "script": [
                    "int"
                ]
            }
        },
        "make_raw_transaction": {
            "name": "make_raw_transaction",
            "location": 270,
            "return": [
                "str",
                "bool",
                "IO",
                "apistar.types.UMIMessage",
                "Dict[str, str]"
            ],
            "arguments": {
                "network": [
                    "bool",
                    "str"
                ],
                "inputs": [
                    "int",
                    "List[str]",
                    "Callable",
                    "bool",
                    "float",
                    "str"
                ],
                "outputs": [
                    "int",
                    "List[str]",
                    "Callable",
                    "bool",
                    "float",
                    "str"
                ],
                "locktime": [
                    "int",
                    "List[str]",
                    "Callable",
                    "bool",
                    "float",
                    "str"
                ],
                "timestamp": [
                    "str",
                    "List[str]",
                    "type",
                    "Optional[Dict]",
                    "bool",
                    "int"
                ],
                "version": [
                    "int",
                    "List[str]",
                    "Callable",
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "find_parent_outputs": {
            "name": "find_parent_outputs",
            "location": 301,
            "return": [
                "str",
                "dict",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "provider": [
                    "dict",
                    "IO[str]",
                    "Callable",
                    "bool"
                ],
                "utxo": [
                    "dict",
                    "Optional[str]",
                    "SendCh[trio.abc.Stream]",
                    "bytes"
                ]
            }
        },
        "sign_transaction": {
            "name": "sign_transaction",
            "location": 311,
            "return": [
                "str",
                "bool",
                "lib.Path"
            ],
            "arguments": {
                "provider": [
                    "str",
                    "bytes",
                    "Callable[[str], Any]",
                    "dict",
                    "int",
                    "Callable"
                ],
                "unsigned": [
                    "str",
                    "bytes"
                ],
                "key": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "Transaction.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "bool",
                    "int",
                    "Set[str]",
                    "str"
                ],
                "ins": [
                    "Tuple[int, int, int, int]",
                    "Tuple[int, int, int]",
                    "Callable[[int], bool]",
                    "Optional[set]",
                    "Optional[float]",
                    "float",
                    "int"
                ],
                "outs": [
                    "Tuple[int, int, int, int]",
                    "Tuple[int, int, int]",
                    "Callable[[int], bool]",
                    "Optional[set]",
                    "Optional[float]",
                    "float",
                    "int"
                ],
                "locktime": [
                    "bool",
                    "int",
                    "Set[str]",
                    "str"
                ],
                "txid": [
                    "int",
                    "bool",
                    "List[str]",
                    "str",
                    "List[int]"
                ],
                "network": [
                    "bool",
                    "int",
                    "Set[str]",
                    "str"
                ],
                "timestamp": [
                    "bool",
                    "int",
                    "Set[str]",
                    "str"
                ]
            }
        },
        "Transaction.unhexlify": {
            "name": "unhexlify",
            "location": 59,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "string": [
                    "str"
                ],
                "network": [
                    "str"
                ]
            }
        },
        "Transaction.deserialize": {
            "name": "deserialize",
            "location": 63,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]"
                ],
                "string": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "network": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Transaction.from_json": {
            "name": "from_json",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict"
                ],
                "tx_json": [
                    "str",
                    "dict"
                ],
                "network": [
                    "str",
                    "dict"
                ]
            }
        },
        "Transaction.to_json": {
            "name": "to_json",
            "location": 84,
            "return": [
                "Dict[str, int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transaction.serialize": {
            "name": "serialize",
            "location": 99,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transaction.to_mutable": {
            "name": "to_mutable",
            "location": 116,
            "return": [
                "bytes",
                "Callable[[bytes], bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transaction.__str__": {
            "name": "__str__",
            "location": 126,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MutableTransaction.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "Optional[float]",
                    "Exception",
                    "bool"
                ],
                "ins": [
                    "SupportsFloat",
                    "dict",
                    "bool",
                    "float",
                    "Optional[int]"
                ],
                "outs": [
                    "Optional[float]",
                    "SupportsFloat",
                    "dict",
                    "int",
                    "bool",
                    "Sequence[int]"
                ],
                "locktime": [
                    "Optional[float]",
                    "Exception",
                    "bool"
                ],
                "network": [
                    "Optional[float]",
                    "Exception",
                    "bool"
                ],
                "timestamp": [
                    "Optional[float]",
                    "Exception",
                    "bool"
                ]
            }
        },
        "MutableTransaction.to_immutable": {
            "name": "to_immutable",
            "location": 162,
            "return": [
                "bool",
                "Callable[[], bool]",
                "Optional[str]",
                "Optional[bool]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransactionParser._timestamp": {
            "name": "_timestamp",
            "location": 175,
            "return": [
                "str",
                "bytes",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransactionParser._txout": {
            "name": "_txout",
            "location": 179,
            "return": [
                "Dict['cirq.Qid', float]",
                "List[Tuple[str, str]]",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "Collection[\"Issue\"]",
                    "tuple"
                ]
            }
        },
        "TransactionParser.get_next_tx": {
            "name": "get_next_tx",
            "location": 184,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "mutable": [
                    "Callable[..., Awaitable]",
                    "str"
                ]
            }
        }
    },
    "pypeerassets-master/pypeerassets/voting.py": {
        "deck_vote_tag": {
            "name": "deck_vote_tag",
            "location": 14,
            "return": [
                "str",
                "Set[str]",
                "List[str]"
            ],
            "arguments": {
                "deck": [
                    "Optional[bool]",
                    "Optional[List[str]]"
                ]
            }
        },
        "parse_vote_info": {
            "name": "parse_vote_info",
            "location": 101,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "protobuf": [
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "Callable",
                    "str",
                    "list"
                ]
            }
        },
        "vote_init": {
            "name": "vote_init",
            "location": 121,
            "return": [
                "bytes",
                "str",
                "bool"
            ],
            "arguments": {
                "vote": [
                    "str",
                    "Callable[[str], None]"
                ],
                "inputs": [
                    "str",
                    "Optional[dict]",
                    "int"
                ],
                "change_address": [
                    "str",
                    "Optional[dict]",
                    "int"
                ]
            }
        },
        "find_vote_inits": {
            "name": "find_vote_inits",
            "location": 143,
            "return": [
                "typing.Iterable[Vote]"
            ],
            "arguments": {
                "provider": [
                    "Callable[[dict], None]",
                    "str"
                ],
                "deck": [
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "vote_cast": {
            "name": "vote_cast",
            "location": 160,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "vote": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "choice_index": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "inputs": [
                    "int"
                ],
                "change_address": [
                    "int"
                ]
            }
        },
        "find_vote_casts": {
            "name": "find_vote_casts",
            "location": 207,
            "return": [
                "typing.Iterable[VoteCast]"
            ],
            "arguments": {
                "provider": [
                    "int"
                ],
                "vote": [
                    "str",
                    "bool"
                ],
                "choice_index": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "Vote.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "int",
                    "bool",
                    "Optional[int]",
                    "str"
                ],
                "description": [
                    "int",
                    "bool",
                    "Optional[int]",
                    "str"
                ],
                "count_mode": [
                    "int",
                    "str",
                    "float"
                ],
                "start_block": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "end_block": [
                    "int",
                    "float"
                ],
                "deck": [
                    "int",
                    "bool",
                    "Optional[int]",
                    "str"
                ],
                "choices": [
                    "int",
                    "bool",
                    "Optional[int]",
                    "str"
                ],
                "vote_metainfo": [
                    "int",
                    "bool",
                    "Optional[int]",
                    "str"
                ],
                "vote_id": [
                    "int",
                    "str"
                ],
                "sender": [
                    "int",
                    "bool",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "Vote.to_protobuf": {
            "name": "to_protobuf",
            "location": 44,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vote.to_dict": {
            "name": "to_dict",
            "location": 68,
            "return": [
                "bool",
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vote.vote_choice_address": {
            "name": "vote_choice_address",
            "location": 82,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VoteCast.__init__": {
            "name": "__init__",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vote": [
                    "int",
                    "bool",
                    "float"
                ],
                "sender": [
                    "int",
                    "bool",
                    "float"
                ],
                "blocknum": [
                    "int",
                    "bool",
                    "float"
                ],
                "confirmations": [
                    "int",
                    "bool",
                    "float"
                ],
                "timestamp": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "VoteCast.is_valid": {
            "name": "is_valid",
            "location": 194,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pypeerassets-master/pypeerassets/__init__.py": {},
    "pypeerassets-master/pypeerassets/__main__.py": {
        "find_all_valid_decks": {
            "name": "find_all_valid_decks",
            "location": 35,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "provider": [
                    "str",
                    "bool",
                    "float",
                    "Dict[str, Union[str, int, bool]]"
                ],
                "deck_version": [
                    "int",
                    "bool",
                    "str",
                    "List[str]"
                ],
                "prod": [
                    "bool",
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "find_deck": {
            "name": "find_deck",
            "location": 68,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "provider": [
                    "str",
                    "Dict[str, Union[str, int, bool]]",
                    "bool",
                    "Dict[str, int]",
                    "ClassVar",
                    "Optional[str]",
                    "int"
                ],
                "key": [
                    "str",
                    "Union[str, bytes]",
                    "Dict[str, Sequence[str]]",
                    "Dict[str, Sequence[Any]]",
                    "int",
                    "bool"
                ],
                "version": [
                    "int",
                    "bool",
                    "str"
                ],
                "prod": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "deck_spawn": {
            "name": "deck_spawn",
            "location": 83,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "provider": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "deck": [
                    "int",
                    "Set[int]",
                    "str"
                ],
                "inputs": [
                    "str",
                    "float"
                ],
                "change_address": [
                    "int",
                    "bool",
                    "Union[int, float]"
                ],
                "locktime": [
                    "int",
                    "list",
                    "List[str]"
                ]
            }
        },
        "deck_transfer": {
            "name": "deck_transfer",
            "location": 128,
            "return": [
                "pypeerassets.transactions.Transaction"
            ],
            "arguments": {
                "provider": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "deck": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "inputs": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "change_address": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "card_bundler": {
            "name": "card_bundler",
            "location": 138,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "provider": [
                    "int",
                    "Callable",
                    "str"
                ],
                "deck": [
                    "int",
                    "Callable",
                    "str"
                ],
                "tx": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "find_card_bundles": {
            "name": "find_card_bundles",
            "location": 156,
            "return": [
                "str",
                "int",
                "Dict[str, Dict]"
            ],
            "arguments": {
                "provider": [
                    "Union[int, str]",
                    "Optional[List[int]]",
                    "float"
                ],
                "deck": [
                    "bool",
                    "int",
                    "Optional[int]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "get_card_bundles": {
            "name": "get_card_bundles",
            "location": 188,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "provider": [
                    "str",
                    "Callable",
                    "Dict[str, Any]"
                ],
                "deck": [
                    "str",
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_card_transfer": {
            "name": "get_card_transfer",
            "location": 199,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "provider": [
                    "pypeerassets.protocol.Deck",
                    "Optional[str]",
                    "List[str]",
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "deck": [
                    "pypeerassets.protocol.Deck",
                    "Optional[str]",
                    "List[str]",
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "txid": [
                    "pypeerassets.protocol.Deck",
                    "Optional[str]",
                    "List[str]",
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "debug": [
                    "bool",
                    "str",
                    "int",
                    "Union[bool, str]"
                ]
            }
        },
        "find_all_valid_cards": {
            "name": "find_all_valid_cards",
            "location": 211,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "provider": [
                    "TextIO",
                    "str",
                    "int",
                    "bool"
                ],
                "deck": [
                    "str"
                ]
            }
        },
        "card_transfer": {
            "name": "card_transfer",
            "location": 222,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "provider": [
                    "Exception",
                    "Optional[str]"
                ],
                "card": [
                    "Optional[int]"
                ],
                "inputs": [
                    "str",
                    "float"
                ],
                "change_address": [
                    "str",
                    "bytes",
                    "Callable[[T], None]"
                ],
                "locktime": [
                    "int",
                    "list"
                ]
            }
        }
    },
    "pypeerassets-master/pypeerassets/provider/blockbook.py": {
        "Blockbook.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "network": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Blockbook.api_fetch": {
            "name": "api_fetch",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "Dict[str, Any]",
                    "Tuple[bytes, bytes, bytes]"
                ]
            }
        },
        "Blockbook.getdifficulty": {
            "name": "getdifficulty",
            "location": 47,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blockbook.getblockcount": {
            "name": "getblockcount",
            "location": 52,
            "return": [
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blockbook.getblockhash": {
            "name": "getblockhash",
            "location": 57,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "List[int]",
                    "str",
                    "Optional[Any]",
                    "int",
                    "Union[int, List[int]]"
                ]
            }
        },
        "Blockbook.getblock": {
            "name": "getblock",
            "location": 62,
            "return": [
                "Dict[str, Any]",
                "str",
                "Dict[str, int]",
                "Dict[str, str]",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": [],
                "hash": [
                    "Union[Dict, Tuple]",
                    "T"
                ]
            }
        },
        "Blockbook.getrawtransaction": {
            "name": "getrawtransaction",
            "location": 67,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "txid": [
                    "Tuple['cirq.Qid']",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "str"
                ],
                "decrypt": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Blockbook.getaddress": {
            "name": "getaddress",
            "location": 75,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "Dict[str, float]",
                    "float",
                    "List[float]",
                    "str",
                    "Optional[Tuple[str, ...]]",
                    "dict"
                ]
            }
        },
        "Blockbook.listunspent": {
            "name": "listunspent",
            "location": 80,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "Dict[str, float]",
                    "float",
                    "List[float]",
                    "str",
                    "Optional[Tuple[str, ...]]",
                    "dict"
                ]
            }
        },
        "Blockbook.select_inputs": {
            "name": "select_inputs",
            "location": 88,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "Tuple[int]",
                    "int",
                    "bool",
                    "List[int]"
                ],
                "amount": [
                    "int",
                    "float",
                    "apps.common.coininfo.CoinInfo"
                ]
            }
        },
        "Blockbook.getbalance": {
            "name": "getbalance",
            "location": 110,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "Union[float, int]",
                    "Union[float, Tuple[float, float]]",
                    "float",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "Blockbook.getreceivedbyaddress": {
            "name": "getreceivedbyaddress",
            "location": 118,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "Union[float, int]",
                    "Union[float, Tuple[float, float]]",
                    "float",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "Blockbook.listtransactions": {
            "name": "listtransactions",
            "location": 122,
            "return": [
                "Set[str]",
                "Dict[int, int]",
                "Optional[dict]",
                "List[str]",
                "list"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "float",
                    "int",
                    "List[float]"
                ]
            }
        }
    },
    "pypeerassets-master/pypeerassets/provider/common.py": {
        "Provider._netname": {
            "name": "_netname",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "Provider.network": {
            "name": "network",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Provider.pa_parameters": {
            "name": "pa_parameters",
            "location": 41,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[str, Set[str]]",
                "OrderedDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Provider.network_properties": {
            "name": "network_properties",
            "location": 47,
            "return": [
                "str",
                "OrderedDict",
                "list",
                "\"PaginatedQuery\"",
                "\"TopicQuery\""
            ],
            "arguments": {
                "self": []
            }
        },
        "Provider.is_testnet": {
            "name": "is_testnet",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Provider.sendrawtransaction": {
            "name": "sendrawtransaction",
            "location": 62,
            "return": [
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "float",
                    "type"
                ],
                "rawtxn": [
                    "str",
                    "Optional[Callable]"
                ]
            }
        },
        "Provider.getblockhash": {
            "name": "getblockhash",
            "location": 74,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": [],
                "blocknum": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Provider.getblockcount": {
            "name": "getblockcount",
            "location": 79,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Provider.getblock": {
            "name": "getblock",
            "location": 84,
            "return": [
                "builtins.dict"
            ],
            "arguments": {
                "self": [],
                "hash": [
                    "bytes",
                    "Callable",
                    "bool",
                    "str"
                ]
            }
        },
        "Provider.getdifficulty": {
            "name": "getdifficulty",
            "location": 89,
            "return": [
                "builtins.dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Provider.getbalance": {
            "name": "getbalance",
            "location": 93,
            "return": [
                "decimal.Decimal"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Provider.getreceivedbyaddress": {
            "name": "getreceivedbyaddress",
            "location": 97,
            "return": [
                "decimal.Decimal"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Provider.listunspent": {
            "name": "listunspent",
            "location": 101,
            "return": [
                "builtins.list"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Provider.select_inputs": {
            "name": "select_inputs",
            "location": 105,
            "return": [
                "builtins.dict"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "int",
                    "bool",
                    "float",
                    "str",
                    "Sequence[str]"
                ],
                "amount": [
                    "int",
                    "bool",
                    "float",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "Provider.getrawtransaction": {
            "name": "getrawtransaction",
            "location": 109,
            "return": [
                "builtins.dict"
            ],
            "arguments": {
                "self": [],
                "txid": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "decrypt": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Provider.listtransactions": {
            "name": "listtransactions",
            "location": 113,
            "return": [
                "builtins.list"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Provider.validateaddress": {
            "name": "validateaddress",
            "location": 116,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "int",
                    "List[str]",
                    "SendCh[trio.abc.Stream]",
                    "str"
                ]
            }
        }
    },
    "pypeerassets-master/pypeerassets/provider/cryptoid.py": {
        "Cryptoid.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "network": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Cryptoid.format_name": {
            "name": "format_name",
            "location": 33,
            "return": [
                "str",
                "IO",
                "complex",
                "int"
            ],
            "arguments": {
                "net": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Cryptoid.get_url": {
            "name": "get_url",
            "location": 44,
            "return": [
                "str",
                "Tuple[str, str]",
                "List[Tuple[str, str, int]]"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "Cryptoid.api_req": {
            "name": "api_req",
            "location": 54,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Optional[int]",
                    "Hashable"
                ]
            }
        },
        "Cryptoid.getblockcount": {
            "name": "getblockcount",
            "location": 59,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cryptoid.getblock": {
            "name": "getblock",
            "location": 63,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "blockhash": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "Cryptoid.getblockhash": {
            "name": "getblockhash",
            "location": 72,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "blocknum": [
                    "int",
                    "str",
                    "dict",
                    "Union[int, str]"
                ]
            }
        },
        "Cryptoid.getdifficulty": {
            "name": "getdifficulty",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cryptoid.getbalance": {
            "name": "getbalance",
            "location": 83,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Cryptoid.getreceivedbyaddress": {
            "name": "getreceivedbyaddress",
            "location": 88,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Cryptoid.listunspent": {
            "name": "listunspent",
            "location": 93,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Cryptoid.select_inputs": {
            "name": "select_inputs",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "bool",
                    "str",
                    "dict"
                ],
                "amount": [
                    "int",
                    "float",
                    "apps.common.coininfo.CoinInfo"
                ]
            }
        },
        "Cryptoid.getrawtransaction": {
            "name": "getrawtransaction",
            "location": 121,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "txid": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "decrypt": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Cryptoid.listtransactions": {
            "name": "listtransactions",
            "location": 133,
            "return": [
                "list",
                "List[Dict[str, Any]]",
                "frozenset",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        }
    },
    "pypeerassets-master/pypeerassets/provider/explorer.py": {
        "Explorer.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "network": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Explorer.api_fetch": {
            "name": "api_fetch",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "Dict[str, Any]",
                    "Tuple[bytes, bytes, bytes]"
                ]
            }
        },
        "Explorer.ext_fetch": {
            "name": "ext_fetch",
            "location": 43,
            "return": [
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "Explorer.getdifficulty": {
            "name": "getdifficulty",
            "location": 58,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Explorer.getconnectioncount": {
            "name": "getconnectioncount",
            "location": 63,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Explorer.getblockcount": {
            "name": "getblockcount",
            "location": 68,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Explorer.getblockhash": {
            "name": "getblockhash",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "List[int]",
                    "str",
                    "Optional[Any]",
                    "int",
                    "Union[int, List[int]]"
                ]
            }
        },
        "Explorer.getblock": {
            "name": "getblock",
            "location": 78,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "hash": [
                    "Union[Dict, Tuple]",
                    "T"
                ]
            }
        },
        "Explorer.getrawtransaction": {
            "name": "getrawtransaction",
            "location": 83,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "txid": [
                    "Tuple['cirq.Qid']",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "str"
                ],
                "decrypt": [
                    "Tuple['cirq.Qid']",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "Explorer.getnetworkghps": {
            "name": "getnetworkghps",
            "location": 91,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Explorer.getmoneysupply": {
            "name": "getmoneysupply",
            "location": 96,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Explorer.getdistribution": {
            "name": "getdistribution",
            "location": 101,
            "return": [
                "Dict[str, Any]",
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Explorer.getaddress": {
            "name": "getaddress",
            "location": 106,
            "return": [
                "Dict[str, Any]",
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "Dict[str, float]",
                    "float",
                    "List[float]",
                    "str",
                    "Optional[Tuple[str, ...]]",
                    "dict"
                ]
            }
        },
        "Explorer.listunspent": {
            "name": "listunspent",
            "location": 111,
            "return": [
                "Dict[str, Any]",
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "Dict[str, float]",
                    "float",
                    "List[float]",
                    "str",
                    "Optional[Tuple[str, ...]]",
                    "dict"
                ]
            }
        },
        "Explorer.select_inputs": {
            "name": "select_inputs",
            "location": 119,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "Tuple[int]",
                    "int",
                    "bool",
                    "List[int]"
                ],
                "amount": [
                    "int",
                    "float",
                    "apps.common.coininfo.CoinInfo"
                ]
            }
        },
        "Explorer.txinfo": {
            "name": "txinfo",
            "location": 141,
            "return": [
                "Dict[str, Any]",
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": [],
                "txid": [
                    "Dict[str, float]",
                    "float",
                    "List[float]",
                    "str",
                    "Optional[Tuple[str, ...]]",
                    "dict"
                ]
            }
        },
        "Explorer.getbalance": {
            "name": "getbalance",
            "location": 146,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "Union[float, int]",
                    "Union[float, Tuple[float, float]]",
                    "float",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "Explorer.getreceivedbyaddress": {
            "name": "getreceivedbyaddress",
            "location": 154,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "Union[float, int]",
                    "Union[float, Tuple[float, float]]",
                    "float",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "Explorer.listtransactions": {
            "name": "listtransactions",
            "location": 158,
            "return": [
                "List[str]",
                "Set[str]",
                "Optional[dict]",
                "list",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "float",
                    "int",
                    "List[float]"
                ]
            }
        }
    },
    "pypeerassets-master/pypeerassets/provider/rpcnode.py": {
        "RpcNode.select_inputs": {
            "name": "select_inputs",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "bool",
                    "str",
                    "dict"
                ],
                "amount": [
                    "int",
                    "float",
                    "apps.common.coininfo.CoinInfo"
                ]
            }
        },
        "RpcNode.is_testnet": {
            "name": "is_testnet",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RpcNode.network": {
            "name": "network",
            "location": 59,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RpcNode.listunspent": {
            "name": "listunspent",
            "location": 67,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "int",
                    "Callable",
                    "str"
                ],
                "minconf": [
                    "str",
                    "List[str]",
                    "int",
                    "slice",
                    "bool"
                ],
                "maxconf": [
                    "str",
                    "List[str]",
                    "int",
                    "slice",
                    "bool"
                ]
            }
        }
    },
    "pypeerassets-master/pypeerassets/provider/__init__.py": {},
    "pypeerassets-master/test/test_kutil.py": {
        "test_key_generation": {
            "name": "test_key_generation",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_key_generation_from_seed": {
            "name": "test_key_generation_from_seed",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_address_generation": {
            "name": "test_address_generation",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_mainnet_wif_import": {
            "name": "test_mainnet_wif_import",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_wif_export": {
            "name": "test_wif_export",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sign_transaction": {
            "name": "test_sign_transaction",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pypeerassets-master/test/test_networks.py": {
        "test_net_query": {
            "name": "test_net_query",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pypeerassets-master/test/test_pautils.py": {
        "test_load_p2th_privkeys_into_local_node": {
            "name": "test_load_p2th_privkeys_into_local_node",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_find_tx_sender": {
            "name": "test_find_tx_sender",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "prov": []
            }
        },
        "test_find_deck_spawns": {
            "name": "test_find_deck_spawns",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "prov": []
            }
        },
        "test_tx_serialization_order": {
            "name": "test_tx_serialization_order",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "prov": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_read_tx_opreturn": {
            "name": "test_read_tx_opreturn",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "generate_dummy_deck": {
            "name": "generate_dummy_deck",
            "location": 88,
            "return": [
                "str",
                "p2p.protocol.Command",
                "Type",
                "int"
            ],
            "arguments": {}
        },
        "test_deck_issue_mode": {
            "name": "test_deck_issue_mode",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_issue_mode_to_enum": {
            "name": "test_issue_mode_to_enum",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_deckspawn_metainfo": {
            "name": "test_parse_deckspawn_metainfo",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validate_deckspawn_p2th": {
            "name": "test_validate_deckspawn_p2th",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_load_deck_p2th_into_local_node": {
            "name": "test_load_deck_p2th_into_local_node",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validate_card_transfer_p2th": {
            "name": "test_validate_card_transfer_p2th",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_card_transfer_metainfo": {
            "name": "test_parse_card_transfer_metainfo",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_card_postprocess": {
            "name": "test_card_postprocess",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_amount_to_exponent": {
            "name": "test_amount_to_exponent",
            "location": 234,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_exponent_to_amount": {
            "name": "test_exponent_to_amount",
            "location": 240,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pypeerassets-master/test/test_pa_constants.py": {
        "test_param_query": {
            "name": "test_param_query",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pypeerassets-master/test/test_peerassets.py": {
        "test_find_deck": {
            "name": "test_find_deck",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "prov": [
                    "Tuple[int, int]"
                ]
            }
        },
        "test_find_card_bundles": {
            "name": "test_find_card_bundles",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_card_bundles": {
            "name": "test_get_card_bundles",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "prov": [
                    "bool",
                    "str",
                    "Dict[str, float]"
                ]
            }
        },
        "test_get_card_transfer": {
            "name": "test_get_card_transfer",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_find_all_valid_cards": {
            "name": "test_find_all_valid_cards",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "prov": []
            }
        },
        "test_deck_spawn": {
            "name": "test_deck_spawn",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_card_transfer": {
            "name": "test_card_transfer",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pypeerassets-master/test/test_protocol.py": {
        "test_deck_object": {
            "name": "test_deck_object",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_oversize_deck_object": {
            "name": "test_oversize_deck_object",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_card_transfer_object": {
            "name": "test_card_transfer_object",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_oversize_card_object": {
            "name": "test_oversize_card_object",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_card_types_issue": {
            "name": "test_card_types_issue",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_card_types_invalid": {
            "name": "test_card_types_invalid",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_card_types_transfer": {
            "name": "test_card_types_transfer",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_issue_mode_combos": {
            "name": "test_issue_mode_combos",
            "location": 213,
            "return": [
                ""
            ],
            "arguments": {
                "combo": [
                    "int"
                ]
            }
        },
        "few_random_cards": {
            "name": "few_random_cards",
            "location": 227,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "deck": [
                    "int",
                    "Union[float, List[float]]",
                    "float",
                    "Optional[int]"
                ],
                "n": [
                    "int",
                    "Union[float, List[float]]",
                    "float",
                    "Optional[int]"
                ],
                "card_type": [
                    "str",
                    "bool",
                    "float"
                ],
                "amount": [
                    "int",
                    "str",
                    "Union[float, List[float]]",
                    "float"
                ]
            }
        },
        "test_validate_multi_card_issue_mode": {
            "name": "test_validate_multi_card_issue_mode",
            "location": 262,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validate_once_card_issue_mode": {
            "name": "test_validate_once_card_issue_mode",
            "location": 279,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validate_none_card_issue_mode": {
            "name": "test_validate_none_card_issue_mode",
            "location": 296,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validate_unflushable_card_issue_mode": {
            "name": "test_validate_unflushable_card_issue_mode",
            "location": 313,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validate_mono_card_issue_mode": {
            "name": "test_validate_mono_card_issue_mode",
            "location": 331,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validate_singlet_card_issue_mode": {
            "name": "test_validate_singlet_card_issue_mode",
            "location": 349,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validate_subscription_card_issue_mode": {
            "name": "test_validate_subscription_card_issue_mode",
            "location": 367,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validate_3combo_card_issue_mode": {
            "name": "test_validate_3combo_card_issue_mode",
            "location": 385,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validate_10combo_card_issue_mode": {
            "name": "test_validate_10combo_card_issue_mode",
            "location": 403,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validate_6combo_card_issue_mode": {
            "name": "test_validate_6combo_card_issue_mode",
            "location": 422,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validate_28combo_card_issue_mode": {
            "name": "test_validate_28combo_card_issue_mode",
            "location": 441,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validate_13combo_card_issue_mode": {
            "name": "test_validate_13combo_card_issue_mode",
            "location": 462,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validate_wild_two_way_combos": {
            "name": "test_validate_wild_two_way_combos",
            "location": 487,
            "return": [
                ""
            ],
            "arguments": {
                "combo": []
            }
        },
        "test_validate_wild_three_way_combos": {
            "name": "test_validate_wild_three_way_combos",
            "location": 509,
            "return": [
                ""
            ],
            "arguments": {
                "combo": [
                    "str"
                ]
            }
        },
        "test_deck_state": {
            "name": "test_deck_state",
            "location": 527,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pypeerassets-master/test/test_provider.py": {
        "test_validateaddress_peercoin": {
            "name": "test_validateaddress_peercoin",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "provider_cls": [
                    "bytes",
                    "str",
                    "Hashable",
                    "bool"
                ]
            }
        },
        "test_validateaddress_peercoin_testnet": {
            "name": "test_validateaddress_peercoin_testnet",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "provider_cls": [
                    "bytes",
                    "str",
                    "Hashable",
                    "bool"
                ]
            }
        }
    },
    "pypeerassets-master/test/test_provider_cryptoid.py": {
        "test_cryptoid_is_testnet": {
            "name": "test_cryptoid_is_testnet",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_crypotid_network": {
            "name": "test_crypotid_network",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cryptoid_getblockcount": {
            "name": "test_cryptoid_getblockcount",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cryptoid_getblock": {
            "name": "test_cryptoid_getblock",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cryptoid_get_block_hash": {
            "name": "test_cryptoid_get_block_hash",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cryptoid_getdifficulty": {
            "name": "test_cryptoid_getdifficulty",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cryptoid_getbalance": {
            "name": "test_cryptoid_getbalance",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cryptoid_getreceivedbyaddress": {
            "name": "test_cryptoid_getreceivedbyaddress",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cryptoid_listunspent": {
            "name": "test_cryptoid_listunspent",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cryptoid_getrawtransaction": {
            "name": "test_cryptoid_getrawtransaction",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cryptoid_listtransactions": {
            "name": "test_cryptoid_listtransactions",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cryptoid_select_inputs": {
            "name": "test_cryptoid_select_inputs",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pypeerassets-master/test/test_provider_explorer.py": {
        "test_explorer_is_testnet": {
            "name": "test_explorer_is_testnet",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_explorer_network": {
            "name": "test_explorer_network",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_explorer_getblockcount": {
            "name": "test_explorer_getblockcount",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_explorer_getblock": {
            "name": "test_explorer_getblock",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_explorer_get_block_hash": {
            "name": "test_explorer_get_block_hash",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_explorer_getdifficulty": {
            "name": "test_explorer_getdifficulty",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_explorer_getbalance": {
            "name": "test_explorer_getbalance",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_explorer_getreceivedbyaddress": {
            "name": "test_explorer_getreceivedbyaddress",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_explorer_listunspent": {
            "name": "test_explorer_listunspent",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_explorer_getrawtransaction": {
            "name": "test_explorer_getrawtransaction",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "decrypt": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_explorer_listtransactions": {
            "name": "test_explorer_listtransactions",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_explorer_select_inputs": {
            "name": "test_explorer_select_inputs",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pypeerassets-master/test/test_transactions.py": {
        "test_peercoin_address_success": {
            "name": "test_peercoin_address_success",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_peercoin_address_failure": {
            "name": "test_peercoin_address_failure",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_peercoin_tx_unhexilify": {
            "name": "test_peercoin_tx_unhexilify",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_calculate_transaction_fee": {
            "name": "test_calculate_transaction_fee",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "tx_size": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "test_tx_output": {
            "name": "test_tx_output",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "network": [
                    "bool",
                    "float",
                    "str",
                    "Union[int, float]"
                ]
            }
        },
        "test_nulldata_script": {
            "name": "test_nulldata_script",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_p2pkh_script": {
            "name": "test_p2pkh_script",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_make_raw_transaction": {
            "name": "test_make_raw_transaction",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sign_transaction": {
            "name": "test_sign_transaction",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pypeerassets-master/test/__init__.py": {}
}
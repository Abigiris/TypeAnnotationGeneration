{
    "pyramid_openapi3-master/setup.py": {
        "VerifyVersionCommand.run": {
            "name": "run",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyramid_openapi3-master/examples/singlefile/app.py": {
        "hello": {
            "name": "hello",
            "location": 42,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]",
                "bytes",
                "Tuple[str, Optional[int]]",
                "dict"
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "app": {
            "name": "app",
            "location": 49,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[dict]",
                "dict",
                "config.Config"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "type"
                ]
            }
        },
        "FunctionalTests.setUp": {
            "name": "setUp",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionalTests.test_nothing_on_root": {
            "name": "test_nothing_on_root",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionalTests.test_api_explorer_on_docs": {
            "name": "test_api_explorer_on_docs",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionalTests.test_hello": {
            "name": "test_hello",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionalTests.test_undefined_response": {
            "name": "test_undefined_response",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionalTests.test_name_missing": {
            "name": "test_name_missing",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FunctionalTests.test_name_too_short": {
            "name": "test_name_too_short",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyramid_openapi3-master/examples/splitfile/app.py": {
        "get": {
            "name": "get",
            "location": 40,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "request": [
                    "aiohttp.web.Request",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "post": {
            "name": "post",
            "location": 46,
            "return": [
                "bool",
                "Optional[int]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "request": [
                    "aiohttp.web.Request",
                    "dict",
                    "pyramid.requesRequest"
                ]
            }
        },
        "app": {
            "name": "app",
            "location": 53,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[dict]",
                "dict",
                "config.Config"
            ],
            "arguments": {}
        },
        "Item.__json__": {
            "name": "__json__",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "pyramid.requesRequest",
                    "bool"
                ]
            }
        }
    },
    "pyramid_openapi3-master/examples/splitfile/tests.py": {
        "TestHappyPath.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHappyPath.test_list_todos": {
            "name": "test_list_todos",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHappyPath.test_add_todo": {
            "name": "test_add_todo",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBadRequests.test_empty_POST": {
            "name": "test_empty_POST",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBadRequests.test_title_too_long": {
            "name": "test_title_too_long",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBadResponses.test_bad_items": {
            "name": "test_bad_items",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyramid_openapi3-master/examples/todoapp/app.py": {
        "get": {
            "name": "get",
            "location": 40,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "request": [
                    "aiohttp.web.Request",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "post": {
            "name": "post",
            "location": 46,
            "return": [
                "bool",
                "Optional[int]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "request": [
                    "aiohttp.web.Request",
                    "dict",
                    "pyramid.requesRequest"
                ]
            }
        },
        "app": {
            "name": "app",
            "location": 53,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[dict]",
                "dict",
                "config.Config"
            ],
            "arguments": {}
        },
        "Item.__json__": {
            "name": "__json__",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "pyramid.requesRequest",
                    "bool"
                ]
            }
        }
    },
    "pyramid_openapi3-master/examples/todoapp/tests.py": {
        "TestHappyPath.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHappyPath.test_list_todos": {
            "name": "test_list_todos",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHappyPath.test_add_todo": {
            "name": "test_add_todo",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBadRequests.test_empty_POST": {
            "name": "test_empty_POST",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBadRequests.test_title_too_long": {
            "name": "test_title_too_long",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBadResponses.test_bad_items": {
            "name": "test_bad_items",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyramid_openapi3-master/pyramid_openapi3/exceptions.py": {
        "extract_errors": {
            "name": "extract_errors",
            "location": 57,
            "return": [
                "typing.Iterator[typing.Dict[builtins.str, builtins.str]]"
            ],
            "arguments": {
                "request": [
                    "pyramid.requesRequest",
                    "bytes",
                    "requests.Request"
                ],
                "errors": [
                    "bool",
                    "starlette.requests.Request"
                ]
            }
        },
        "RequestValidationError.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestValidationError.__str__": {
            "name": "__str__",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseValidationError.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseValidationError.__str__": {
            "name": "__str__",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InvalidCustomFormatterValue.__str__": {
            "name": "__str__",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MissingEndpointsError.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "missing": [
                    "str"
                ]
            }
        }
    },
    "pyramid_openapi3-master/pyramid_openapi3/tween.py": {
        "response_tween_factory": {
            "name": "response_tween_factory",
            "location": 13,
            "return": [
                "Optional[str]",
                "str",
                "bytes"
            ],
            "arguments": {
                "handler": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "int",
                    "T"
                ],
                "registry": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "int",
                    "T"
                ]
            }
        },
        "response_tween_factory.excview_tween": {
            "name": "excview_tween",
            "location": 26,
            "return": [
                "float",
                "Optional[str]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "request": [
                    "pyramid.requesRequest",
                    "aiohttp.web.Request"
                ]
            }
        }
    },
    "pyramid_openapi3-master/pyramid_openapi3/wrappers.py": {
        "PyramidOpenAPIRequestFactory.create": {
            "name": "create",
            "location": 14,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str"
                ],
                "request": [
                    "pyramid.requesRequest",
                    "aiohttp.web.Request"
                ]
            }
        },
        "PyramidOpenAPIResponseFactory.create": {
            "name": "create",
            "location": 51,
            "return": [
                "Dict[str, Any]",
                "int",
                "jumeaux.models.Request",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Callable",
                    "bool"
                ],
                "response": [
                    "pyramid.response.Response",
                    "requests.Response",
                    "bool",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        }
    },
    "pyramid_openapi3-master/pyramid_openapi3/__init__.py": {
        "includeme": {
            "name": "includeme",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "pyramid.config.Configurator",
                    "dict",
                    "config.Config"
                ]
            }
        },
        "openapi_validated": {
            "name": "openapi_validated",
            "location": 67,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "request": [
                    "pyramid.requesRequest",
                    "aiohttp.web.Request"
                ]
            }
        },
        "openapi_view": {
            "name": "openapi_view",
            "location": 99,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "view": [
                    "Dict[str, Any]"
                ],
                "info": [
                    "Dict[str, Any]"
                ]
            }
        },
        "add_explorer_view": {
            "name": "add_explorer_view",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "pyramid.config.Configurator",
                    "str",
                    "Optional[Callable[[Dict], Any]]",
                    "bool",
                    "List[str]"
                ],
                "route": [
                    "str",
                    "List[pathlib.Path]"
                ],
                "route_name": [
                    "str",
                    "List[pathlib.Path]"
                ],
                "template": [
                    "str",
                    "List[pathlib.Path]"
                ],
                "ui_version": [
                    "str",
                    "List[pathlib.Path]"
                ],
                "permission": [
                    "str",
                    "List[pathlib.Path]"
                ],
                "apiname": [
                    "pyramid.config.Configurator",
                    "str",
                    "Optional[Callable[[Dict], Any]]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "add_formatter": {
            "name": "add_formatter",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Optional[str]",
                    "bool",
                    "List[str]",
                    "str"
                ],
                "name": [
                    "str",
                    "Callable",
                    "Set[str]"
                ],
                "func": [
                    "str",
                    "Callable",
                    "Set[str]"
                ]
            }
        },
        "add_deserializer": {
            "name": "add_deserializer",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Optional[str]",
                    "bool",
                    "List[str]",
                    "str"
                ],
                "name": [
                    "str",
                    "Callable",
                    "Set[str]"
                ],
                "func": [
                    "str",
                    "Callable",
                    "Set[str]"
                ]
            }
        },
        "add_spec_view": {
            "name": "add_spec_view",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "pyramid.config.Configurator",
                    "abilian.web.views.registry.Registry",
                    "app.models.Game"
                ],
                "filepath": [
                    "bool",
                    "trinity.config.ChainConfig",
                    "T",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "route": [
                    "bool",
                    "trinity.config.ChainConfig",
                    "T",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "route_name": [
                    "bool",
                    "trinity.config.ChainConfig",
                    "T",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "permission": [
                    "bool",
                    "trinity.config.ChainConfig",
                    "T",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "apiname": [
                    "pyramid.config.Configurator",
                    "abilian.web.views.registry.Registry",
                    "app.models.Game"
                ]
            }
        },
        "add_spec_view_directory": {
            "name": "add_spec_view_directory",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "pyramid.config.Configurator",
                    "abilian.web.views.registry.Registry",
                    "app.models.Game"
                ],
                "filepath": [
                    "bool",
                    "trinity.config.ChainConfig",
                    "T",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "route": [
                    "bool",
                    "trinity.config.ChainConfig",
                    "T",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "route_name": [
                    "bool",
                    "trinity.config.ChainConfig",
                    "T",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "permission": [
                    "bool",
                    "trinity.config.ChainConfig",
                    "T",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "apiname": [
                    "pyramid.config.Configurator",
                    "abilian.web.views.registry.Registry",
                    "app.models.Game"
                ]
            }
        },
        "register_routes": {
            "name": "register_routes",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "str",
                    "Union[list, str]",
                    "Optional[str]"
                ],
                "route_name_ext": [
                    "str",
                    "bool"
                ],
                "root_factory_ext": [
                    "str",
                    "bool"
                ],
                "apiname": [
                    "str",
                    "bool"
                ]
            }
        },
        "openapi_validation_error": {
            "name": "openapi_validation_error",
            "location": 345,
            "return": [
                "core.models.User",
                "Dict[int, dict]",
                "asgard.models.user.User",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "context": [
                    "aiohttp.web.Request",
                    "flask.Request",
                    "starlette.requests.Request"
                ],
                "request": [
                    "aiohttp.web.Request"
                ]
            }
        },
        "check_all_routes": {
            "name": "check_all_routes",
            "location": 371,
            "return": [
                "Iterator[Dict[str, str]]",
                "app.models.Article",
                "Union[tuple, list]",
                "set"
            ],
            "arguments": {
                "event": [
                    "nose2.events.Event"
                ]
            }
        },
        "_get_server_prefixes": {
            "name": "_get_server_prefixes",
            "location": 426,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "spec": [
                    "str",
                    "bool",
                    "pricemonitor.config.Coin"
                ]
            }
        },
        "add_explorer_view.register": {
            "name": "register",
            "location": 148,
            "return": [],
            "arguments": {}
        },
        "add_spec_view.register": {
            "name": "register",
            "location": 204,
            "return": [],
            "arguments": {}
        },
        "add_spec_view_directory.register": {
            "name": "register",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "register_routes.action": {
            "name": "action",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "openapi_view.wrapper_view": {
            "name": "wrapper_view",
            "location": 111,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "context": [
                    "str",
                    "Dict[str, Any]",
                    "pyramid.requesRequest"
                ],
                "request": [
                    "pyramid.requesRequest",
                    "aiohttp.web.Request"
                ]
            }
        },
        "add_explorer_view.register.explorer_view": {
            "name": "explorer_view",
            "location": 151,
            "return": [
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {
                "request": [
                    "grouper.models.user.User",
                    "int",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "add_spec_view.register.spec_view": {
            "name": "spec_view",
            "location": 219,
            "return": [
                "str",
                "zerver.models.Message"
            ],
            "arguments": {
                "request": [
                    "pyramid.requesRequest",
                    "aiohttp.web.Request",
                    "str"
                ]
            }
        },
        "check_all_routes.remove_prefixes": {
            "name": "remove_prefixes",
            "location": 398,
            "return": [
                "path.Path",
                "str",
                "pathlib.Path",
                "Union[str, pathlib.Path]"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "Union[List, str]",
                    "Union[str, pathlib.Path]",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "pyramid_openapi3-master/pyramid_openapi3/tests/test_add_deserializer.py": {
        "test_add_deserializer": {
            "name": "test_add_deserializer",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyramid_openapi3-master/pyramid_openapi3/tests/test_add_formatter.py": {
        "test_add_formatter": {
            "name": "test_add_formatter",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyramid_openapi3-master/pyramid_openapi3/tests/test_app_construction.py": {
        "foo_view": {
            "name": "foo_view",
            "location": 72,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "request": [
                    "aiohttp.web.Request",
                    "pyramid.requesRequest",
                    "bool"
                ]
            }
        },
        "bar_view": {
            "name": "bar_view",
            "location": 77,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "request": [
                    "aiohttp.web.Request",
                    "pyramid.requesRequest",
                    "bool"
                ]
            }
        },
        "document": {
            "name": "document",
            "location": 83,
            "return": [
                "typing.Generator[typing.IO, None, None]"
            ],
            "arguments": {}
        },
        "directory_document": {
            "name": "directory_document",
            "location": 93,
            "return": [
                "typing.Generator[builtins.str, None, None]"
            ],
            "arguments": {}
        },
        "simple_config": {
            "name": "simple_config",
            "location": 107,
            "return": [
                "pyramid.config.Configurator"
            ],
            "arguments": {}
        },
        "simple_app_config": {
            "name": "simple_app_config",
            "location": 116,
            "return": [
                "typing.Generator[pyramid.config.Configurator, None, None]"
            ],
            "arguments": {
                "simple_config": [
                    "dict",
                    "pyramid.config.Configurator",
                    "str",
                    "config.RunningConfig",
                    "solo.Configurator"
                ],
                "document": [
                    "dict",
                    "pyramid.config.Configurator",
                    "str",
                    "config.RunningConfig",
                    "solo.Configurator"
                ]
            }
        },
        "split_file_app_config": {
            "name": "split_file_app_config",
            "location": 127,
            "return": [
                "typing.Generator[pyramid.config.Configurator, None, None]"
            ],
            "arguments": {
                "simple_config": [
                    "str",
                    "bool",
                    "dict",
                    "Dict[str, Any]"
                ],
                "directory_document": [
                    "str",
                    "bool",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "app_config": {
            "name": "app_config",
            "location": 143,
            "return": [
                "Optional[bytes]",
                "str",
                "int"
            ],
            "arguments": {
                "request": [
                    "starlette.requests.Request",
                    "Request",
                    "pyramid.requesRequest",
                    "Set[str]",
                    "fastapi.Request"
                ]
            }
        },
        "test_all_routes": {
            "name": "test_all_routes",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "app_config": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_prefixed_routes": {
            "name": "test_prefixed_routes",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "app_config": []
            }
        },
        "test_pyramid_prefixed_context_routes": {
            "name": "test_pyramid_prefixed_context_routes",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "app_config": [
                    "bool"
                ]
            }
        },
        "test_missing_routes": {
            "name": "test_missing_routes",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "app_config": [
                    "dict"
                ]
            }
        },
        "test_disable_endpoint_validation": {
            "name": "test_disable_endpoint_validation",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "app_config": [
                    "backup.config.Config"
                ],
                "caplog": [
                    "logging.Logger"
                ]
            }
        },
        "test_unconfigured_app": {
            "name": "test_unconfigured_app",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_config": [],
                "caplog": [
                    "logging.Logger"
                ]
            }
        },
        "test_routes_setting_generation": {
            "name": "test_routes_setting_generation",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {
                "app_config": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "pyramid_openapi3-master/pyramid_openapi3/tests/test_extract_errors.py": {
        "app": {
            "name": "app",
            "location": 18,
            "return": [],
            "arguments": {
                "spec": [],
                "view": [],
                "route": []
            }
        },
        "BadRequestsTests.foo": {
            "name": "foo",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "BadRequestsTests._testapp": {
            "name": "_testapp",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "view": [],
                "endpoints": [],
                "route": []
            }
        },
        "BadRequestsTests.test_missing_query_parameter": {
            "name": "test_missing_query_parameter",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BadRequestsTests.test_invalid_query_parameter": {
            "name": "test_invalid_query_parameter",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BadRequestsTests.test_invalid_path_parameter": {
            "name": "test_invalid_path_parameter",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BadRequestsTests.test_invalid_path_parameter_regex": {
            "name": "test_invalid_path_parameter_regex",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BadRequestsTests.test_invalid_path_parameter_uuid": {
            "name": "test_invalid_path_parameter_uuid",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BadRequestsTests.test_missing_header_parameter": {
            "name": "test_missing_header_parameter",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BadRequestsTests.test_missing_cookie_parameter": {
            "name": "test_missing_cookie_parameter",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BadRequestsTests.test_missing_POST_parameter": {
            "name": "test_missing_POST_parameter",
            "location": 251,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BadRequestsTests.test_missing_type_POST_parameter": {
            "name": "test_missing_type_POST_parameter",
            "location": 286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BadRequestsTests.test_invalid_length_POST_parameter": {
            "name": "test_invalid_length_POST_parameter",
            "location": 321,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BadRequestsTests.test_multiple_errors": {
            "name": "test_multiple_errors",
            "location": 355,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BadRequestsTests.test_bad_JWT_token": {
            "name": "test_bad_JWT_token",
            "location": 413,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BadRequestsTests.test_lists": {
            "name": "test_lists",
            "location": 441,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BadResponsesTests._testapp": {
            "name": "_testapp",
            "location": 509,
            "return": [],
            "arguments": {
                "self": [],
                "view": []
            }
        },
        "BadResponsesTests.test_foo": {
            "name": "test_foo",
            "location": 519,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BadResponsesTests.test_invalid_response_code": {
            "name": "test_invalid_response_code",
            "location": 529,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BadResponsesTests.test_invalid_response_schema": {
            "name": "test_invalid_response_schema",
            "location": 551,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomFormattersTests.hello": {
            "name": "hello",
            "location": 570,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "request": []
            }
        },
        "CustomFormattersTests._testapp": {
            "name": "_testapp",
            "location": 622,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomFormattersTests.test_say_hello": {
            "name": "test_say_hello",
            "location": 642,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomFormattersTests.test_name_taken": {
            "name": "test_name_taken",
            "location": 647,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomFormattersTests.test_invalid_name": {
            "name": "test_invalid_name",
            "location": 658,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomDeserializerTests.hello": {
            "name": "hello",
            "location": 682,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "request": []
            }
        },
        "CustomDeserializerTests.reverse": {
            "name": "reverse",
            "location": 689,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "CustomDeserializerTests._testapp": {
            "name": "_testapp",
            "location": 723,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomDeserializerTests.test_say_hello": {
            "name": "test_say_hello",
            "location": 745,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BadResponsesTests.test_foo.foo": {
            "name": "foo",
            "location": 522,
            "return": [],
            "arguments": {}
        },
        "BadResponsesTests.test_invalid_response_code.foo": {
            "name": "foo",
            "location": 532,
            "return": [],
            "arguments": {}
        },
        "BadResponsesTests.test_invalid_response_schema.foo": {
            "name": "foo",
            "location": 555,
            "return": [],
            "arguments": {}
        },
        "CustomFormattersTests.UniqueName.validate": {
            "name": "validate",
            "location": 575,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        }
    },
    "pyramid_openapi3-master/pyramid_openapi3/tests/test_path_parameters.py": {
        "_foo_view": {
            "name": "_foo_view",
            "location": 15,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "context": [
                    "aiohttp.web.Request",
                    "bool",
                    "str"
                ],
                "request": [
                    "pyramid.requesRequest"
                ]
            }
        },
        "test_path_parameter_validation": {
            "name": "test_path_parameter_validation",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_FooResource.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "pyramid.requesRequest",
                    "scrapy.http.Request",
                    "str"
                ]
            }
        }
    },
    "pyramid_openapi3-master/pyramid_openapi3/tests/test_permissions.py": {
        "get_default_context": {
            "name": "get_default_context",
            "location": 26,
            "return": [
                "Callable",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "request": [
                    "Dict[str, Any]"
                ]
            }
        },
        "simple_config": {
            "name": "simple_config",
            "location": 32,
            "return": [
                "pyramid.config.Configurator"
            ],
            "arguments": {}
        },
        "test_permission_for_specs": {
            "name": "test_permission_for_specs",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_config": [
                    "dict",
                    "str"
                ],
                "route": [
                    "dict",
                    "str"
                ],
                "permission": [
                    "dict",
                    "str"
                ],
                "status": [
                    "str"
                ]
            }
        },
        "test_permission_for_spec_directories": {
            "name": "test_permission_for_spec_directories",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "simple_config": [
                    "str"
                ],
                "route": [
                    "str"
                ],
                "permission": [
                    "str"
                ],
                "status": [
                    "str"
                ]
            }
        }
    },
    "pyramid_openapi3-master/pyramid_openapi3/tests/test_routes.py": {
        "dummy_factory": {
            "name": "dummy_factory",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "request": [
                    "aiohttp.web.Request",
                    "pyramid.requesRequest",
                    "bool"
                ]
            }
        },
        "test_register_routes_simple": {
            "name": "test_register_routes_simple",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_register_routes_with_factory": {
            "name": "test_register_routes_with_factory",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyramid_openapi3-master/pyramid_openapi3/tests/test_validation.py": {
        "DummyStartResponse.__call__": {
            "name": "__call__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "Dict[str, Any]",
                    "str",
                    "bool"
                ],
                "headerlist": [
                    "Dict[str, Any]",
                    "str",
                    "bool"
                ]
            }
        },
        "RequestValidationBase.setUp": {
            "name": "setUp",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestValidationBase.tearDown": {
            "name": "tearDown",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestValidationBase._add_view": {
            "name": "_add_view",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view_func": [
                    "bool",
                    "Dict[str, Any]",
                    "MutableMapping",
                    "Dict[str, Dict[str, Any]]",
                    "dict",
                    "Callable"
                ],
                "openapi": [
                    "str"
                ]
            }
        },
        "RequestValidationBase._get_view": {
            "name": "_get_view",
            "location": 80,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestValidationBase._get_request": {
            "name": "_get_request",
            "location": 88,
            "return": [
                "int",
                "List[Dict[str, Any]]",
                "Optional[Tuple[int, int]]"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "bytes",
                    "str",
                    "pyramid.config.Configurator",
                    "Dict[str, Any]",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "TestRequestValidation.test_view_raises_valid_http_exception": {
            "name": "test_view_raises_valid_http_exception",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequestValidation.test_view_valid_request_response": {
            "name": "test_view_valid_request_response",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequestValidation.test_request_validation_error": {
            "name": "test_request_validation_error",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequestValidation.test_response_validation_error": {
            "name": "test_response_validation_error",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequestValidation.test_nonapi_view": {
            "name": "test_nonapi_view",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequestValidation.test_request_validation_disabled": {
            "name": "test_request_validation_disabled",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequestValidation.test_response_validation_disabled": {
            "name": "test_response_validation_disabled",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestImproperAPISpecValidation.test_request_validation_error_causes_response_validation_error": {
            "name": "test_request_validation_error_causes_response_validation_error",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequestValidation.test_view_raises_valid_http_exception.view_func": {
            "name": "view_func",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pyramid_openapi3-master/pyramid_openapi3/tests/test_views.py": {
        "test_add_spec_view": {
            "name": "test_add_spec_view",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_spec_view_already_defined": {
            "name": "test_add_spec_view_already_defined",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_spec_view_directory": {
            "name": "test_add_spec_view_directory",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_spec_view_directory_already_defined": {
            "name": "test_add_spec_view_directory_already_defined",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_spec_view_directory_invalid_route": {
            "name": "test_add_spec_view_directory_invalid_route",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_explorer_view": {
            "name": "test_add_explorer_view",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_multiple_explorer_views": {
            "name": "test_add_multiple_explorer_views",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_multiple_explorer_views_using_directory": {
            "name": "test_add_multiple_explorer_views_using_directory",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_explorer_view_missing_spec": {
            "name": "test_explorer_view_missing_spec",
            "location": 404,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_openapi_view": {
            "name": "test_openapi_view",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_multiple_openapi_views": {
            "name": "test_multiple_openapi_views",
            "location": 462,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_path_parameters": {
            "name": "test_path_parameters",
            "location": 529,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_header_parameters": {
            "name": "test_header_parameters",
            "location": 588,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cookie_parameters": {
            "name": "test_cookie_parameters",
            "location": 648,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "DummyStartResponse.__call__": {
            "name": "__call__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "Dict[str, Any]",
                    "str",
                    "bool"
                ],
                "headerlist": [
                    "Dict[str, Any]",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "pyramid_openapi3-master/pyramid_openapi3/tests/test_wrappers.py": {
        "test_mapped_values_request": {
            "name": "test_mapped_values_request",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_relative_app_request": {
            "name": "test_relative_app_request",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_form_data_request": {
            "name": "test_form_data_request",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_no_matched_route": {
            "name": "test_no_matched_route",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mapped_values_response": {
            "name": "test_mapped_values_response",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pyramid_openapi3-master/pyramid_openapi3/tests/__init__.py": {}
}
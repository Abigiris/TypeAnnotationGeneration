{
    "pyshgp-master/setup.py": {
        "read": {
            "name": "read",
            "location": 9,
            "return": [
                "str",
                "Tuple[str]",
                "List[int]",
                "Optional[str]"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "pyshgp-master/deploy/save_instruction_docs.py": {
        "_generate_instruction_rst": {
            "name": "_generate_instruction_rst",
            "location": 21,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "instr": [
                    "Type",
                    "str",
                    "int",
                    "bytes",
                    "Dict[str, Set[str]]"
                ]
            }
        }
    },
    "pyshgp-master/docs_source/source/conf.py": {
        "monkeypatch": {
            "name": "monkeypatch",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "add_source_parser": {
            "name": "add_source_parser",
            "location": 22,
            "return": [
                "Union[str, None]",
                "Dict[str, Any]",
                "dict",
                "Optional[int]"
            ],
            "arguments": {
                "_old_add_source_parser": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Callable"
                ],
                "self": [
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "Callable"
                ]
            }
        },
        "monkeypatch.decorator": {
            "name": "decorator",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "f": [
                    "Callable",
                    "bool",
                    "Dict[str, Any]",
                    "T"
                ]
            }
        }
    },
    "pyshgp-master/examples/integer_regression.py": {
        "target_function": {
            "name": "target_function",
            "location": 12,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "a": [
                    "int"
                ],
                "b": [
                    "int"
                ]
            }
        }
    },
    "pyshgp-master/examples/iris.py": {},
    "pyshgp-master/examples/leaky_relu.py": {
        "target_function": {
            "name": "target_function",
            "location": 27,
            "return": [
                "float",
                "Type[BaseException]",
                "bool"
            ],
            "arguments": {
                "x": [
                    "float",
                    "str"
                ]
            }
        }
    },
    "pyshgp-master/examples/odd.py": {},
    "pyshgp-master/examples/point_distance.py": {
        "to_point": {
            "name": "to_point",
            "location": 36,
            "return": [
                "numpy.ndarray",
                "float",
                "Dict[str, numpy.ndarray]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "thing": [
                    "int",
                    "float"
                ]
            }
        },
        "point_distance": {
            "name": "point_distance",
            "location": 43,
            "return": [
                "float",
                "numpy.ndarray"
            ],
            "arguments": {
                "p1": [
                    "float",
                    "pygame.math.Vector2",
                    "int"
                ],
                "p2": [
                    "float",
                    "pygame.math.Vector2",
                    "int"
                ]
            }
        },
        "point_from_floats": {
            "name": "point_from_floats",
            "location": 51,
            "return": [
                "str",
                "Dict[str, numpy.ndarray]",
                "Union[str, Dict]"
            ],
            "arguments": {
                "f1": [
                    "Callable[[int], float]",
                    "List[int]",
                    "IO[str]",
                    "str"
                ],
                "f2": [
                    "Callable[[int], float]",
                    "List[int]",
                    "IO[str]",
                    "str"
                ]
            }
        },
        "Point.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "numpy.ndarray",
                    "int"
                ],
                "y": [
                    "int",
                    "Tuple[int, int]",
                    "bool",
                    "str"
                ]
            }
        },
        "Point.__eq__": {
            "name": "__eq__",
            "location": 27,
            "return": [
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float"
                ]
            }
        },
        "Point.__repr__": {
            "name": "__repr__",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PointType.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PointType.coerce": {
            "name": "coerce",
            "location": 78,
            "return": [
                "int",
                "Optional[int]",
                "str",
                "float",
                "List[int]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "Union[int, str]",
                    "Optional[Union[int, float]]",
                    "str"
                ]
            }
        }
    },
    "pyshgp-master/examples/rectangle_area.py": {
        "to_rect": {
            "name": "to_rect",
            "location": 44,
            "return": [
                "numpy.ndarray",
                "float",
                "Dict[str, numpy.ndarray]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "thing": [
                    "int",
                    "float"
                ]
            }
        },
        "area_difference": {
            "name": "area_difference",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "r1": [
                    "int",
                    "numpy.ndarray",
                    "numpy.random.RandomState"
                ],
                "r2": [
                    "int",
                    "numpy.ndarray",
                    "numpy.random.RandomState"
                ]
            }
        },
        "rectangle_from_floats": {
            "name": "rectangle_from_floats",
            "location": 67,
            "return": [
                "int",
                "Dict[int, int]",
                "str"
            ],
            "arguments": {
                "i1": [
                    "int",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "FrozenSet[Any]"
                ],
                "i2": [
                    "int",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "FrozenSet[Any]"
                ]
            }
        },
        "Rectangle.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "height": [
                    "int",
                    "float",
                    "tuple",
                    "List[List[int]]"
                ],
                "width": [
                    "int",
                    "float",
                    "tuple",
                    "List[List[int]]"
                ]
            }
        },
        "Rectangle.__eq__": {
            "name": "__eq__",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "float",
                    "str",
                    "Union[int, float]"
                ]
            }
        },
        "Rectangle.__repr__": {
            "name": "__repr__",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RectangleType.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RectangleType.coerce": {
            "name": "coerce",
            "location": 111,
            "return": [
                "int",
                "Optional[int]",
                "str",
                "float",
                "List[int]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "Union[int, str]",
                    "Optional[Union[int, float]]",
                    "str"
                ]
            }
        }
    },
    "pyshgp-master/examples/string_demo.py": {
        "target_function": {
            "name": "target_function",
            "location": 25,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "s": [
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "pyshgp-master/examples/string_demo_annealing.py": {
        "target_function": {
            "name": "target_function",
            "location": 25,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "s": [
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "pyshgp-master/examples/triple.py": {
        "target_function": {
            "name": "target_function",
            "location": 21,
            "return": [
                "int",
                "numpy.ndarray",
                "str"
            ],
            "arguments": {
                "i": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "pyshgp-master/examples/__init__.py": {},
    "pyshgp-master/examples/software_synthesis/mirror_image.py": {
        "target_function": {
            "name": "target_function",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "v1": [
                    "str",
                    "Callable",
                    "bool",
                    "Iterable[str]",
                    "int"
                ],
                "v2": [
                    "str",
                    "Callable",
                    "bool",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "random_vector": {
            "name": "random_vector",
            "location": 15,
            "return": [
                "str",
                "numpy.ndarray",
                "float"
            ],
            "arguments": {}
        },
        "mirror_vectors": {
            "name": "mirror_vectors",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "equal_vectors": {
            "name": "equal_vectors",
            "location": 25,
            "return": [
                "bool",
                "List[mypy.types.Type]",
                "Type",
                "Union[List, Dict]"
            ],
            "arguments": {}
        },
        "random_vectors": {
            "name": "random_vectors",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "pyshgp-master/examples/software_synthesis/replace_space_with_newline.py": {
        "target_function": {
            "name": "target_function",
            "location": 21,
            "return": [
                "List[str]",
                "str",
                "List[mypy.types.Type]",
                "Set[str]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "synthetic_input": {
            "name": "synthetic_input",
            "location": 32,
            "return": [
                "str",
                "float"
            ],
            "arguments": {}
        },
        "random_char": {
            "name": "random_char",
            "location": 92,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {}
        }
    },
    "pyshgp-master/pyshgp/tap.py": {
        "tap": {
            "name": "tap",
            "location": 367,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "set_verbosity": {
            "name": "set_verbosity",
            "location": 388,
            "return": [],
            "arguments": {
                "level": []
            }
        },
        "Tap.pre": {
            "name": "pre",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "args": [],
                "kwargs": []
            }
        },
        "Tap.post": {
            "name": "post",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "args": [],
                "kwargs": [],
                "returned": []
            }
        },
        "Tap.do": {
            "name": "do",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "LogFileTap.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "root": []
            }
        },
        "LogFileTap.dir": {
            "name": "dir",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "LogFileTap.path": {
            "name": "path",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "filename": []
            }
        },
        "LogFileTap.log": {
            "name": "log",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "filename": [],
                "line": []
            }
        },
        "CsvTap.__init__": {
            "name": "__init__",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "root": [],
                "column_names": []
            }
        },
        "CsvTap.log": {
            "name": "log",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "filename": [],
                "row": []
            }
        },
        "JsonLinesTap.__init__": {
            "name": "__init__",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "root": []
            }
        },
        "JsonLinesTap.log": {
            "name": "log",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "filename": [],
                "row": []
            }
        },
        "StdOutRun.__init__": {
            "name": "__init__",
            "location": 207,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StdOutRun.pre": {
            "name": "pre",
            "location": 215,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "args": [],
                "kwargs": [],
                "obj": []
            }
        },
        "StdOutRun.post": {
            "name": "post",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "args": [],
                "kwargs": [],
                "returned": [],
                "obj": []
            }
        },
        "StdOutSearchStepTap.__init__": {
            "name": "__init__",
            "location": 260,
            "return": [],
            "arguments": {
                "self": [],
                "every_n_steps": []
            }
        },
        "StdOutSearchStepTap.pre": {
            "name": "pre",
            "location": 263,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "args": [],
                "kwargs": [],
                "obj": []
            }
        },
        "StdOutSimplification.pre": {
            "name": "pre",
            "location": 288,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "args": [],
                "kwargs": [],
                "obj": []
            }
        },
        "StdOutSimplification.post": {
            "name": "post",
            "location": 296,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "args": [],
                "kwargs": [],
                "returned": [],
                "obj": []
            }
        },
        "StdOutSimplificationStep.post": {
            "name": "post",
            "location": 308,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "args": [],
                "kwargs": [],
                "returned": [],
                "obj": []
            }
        },
        "TapManager.register": {
            "name": "register",
            "location": 338,
            "return": [],
            "arguments": {
                "id": [],
                "tap": []
            }
        },
        "TapManager.unregister": {
            "name": "unregister",
            "location": 343,
            "return": [],
            "arguments": {
                "id": []
            }
        },
        "TapManager.get": {
            "name": "get",
            "location": 349,
            "return": [],
            "arguments": {
                "id": []
            }
        },
        "TapManager.do": {
            "name": "do",
            "location": 356,
            "return": [],
            "arguments": {
                "id": []
            }
        },
        "tap.tapped": {
            "name": "tapped",
            "location": 376,
            "return": [],
            "arguments": {}
        }
    },
    "pyshgp-master/pyshgp/utils.py": {
        "instantiate_using": {
            "name": "instantiate_using",
            "location": 11,
            "return": [
                "str",
                "bool",
                "Dict[str, List[str]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type[Any]",
                    "Union[str, List[str]]",
                    "Optional[bytes]",
                    "Dict[str, Any]"
                ],
                "args": []
            }
        },
        "list_rindex": {
            "name": "list_rindex",
            "location": 21,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "lst": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "el": [
                    "str",
                    "int"
                ]
            }
        },
        "DiscreteProbDistrib.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DiscreteProbDistrib._normalize": {
            "name": "_normalize",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DiscreteProbDistrib.add": {
            "name": "add",
            "location": 43,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "el": [
                    "float",
                    "int"
                ],
                "p": [
                    "os.stat_result",
                    "numpy.ndarray",
                    "int",
                    "Optional[Union[int, Any]]"
                ]
            }
        },
        "DiscreteProbDistrib.size": {
            "name": "size",
            "location": 51,
            "return": [
                "Union[str, IO]",
                "Dict[str, Any]",
                "IO[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiscreteProbDistrib.sample": {
            "name": "sample",
            "location": 55,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiscreteProbDistrib.sample_n": {
            "name": "sample_n",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ],
                "replace": [
                    "int",
                    "str"
                ]
            }
        },
        "Saveable.save": {
            "name": "save",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Saveable.load": {
            "name": "load",
            "location": 88,
            "return": [
                "str",
                "Callable",
                "Callable[[KT, VT], bool]",
                "dict",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "Copyable.copy": {
            "name": "copy",
            "location": 97,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "deep": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "pyshgp-master/pyshgp/validation.py": {
        "check_1d": {
            "name": "check_1d",
            "location": 10,
            "return": [
                "float",
                "bool",
                "int"
            ],
            "arguments": {
                "seq": [
                    "float",
                    "bool",
                    "int"
                ]
            }
        },
        "check_2d": {
            "name": "check_2d",
            "location": 28,
            "return": [
                "bool",
                "dict",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Union[Mapping, str]",
                    "bytes"
                ]
            }
        },
        "check_column_types": {
            "name": "check_column_types",
            "location": 39,
            "return": [
                "Set[str]",
                "List[int]"
            ],
            "arguments": {
                "seq": [
                    "pandas.DataFrame",
                    "list",
                    "dict"
                ],
                "certainty_proportion": [
                    "float",
                    "Sequence[int]",
                    "numpy.ndarray"
                ]
            }
        },
        "check_num_columns": {
            "name": "check_num_columns",
            "location": 58,
            "return": [
                "bytes",
                "bool",
                "str"
            ],
            "arguments": {
                "data": [
                    "str",
                    "pandas.DataFrame",
                    "Type[T]",
                    "dict",
                    "int",
                    "List[str]"
                ],
                "certainty_proportion": [
                    "float",
                    "bytes",
                    "str",
                    "Dict[str, str]",
                    "Mapping[str, Union[int, slice]]",
                    "int",
                    "Union[bytes, bytearray]"
                ]
            }
        },
        "check_X_y": {
            "name": "check_X_y",
            "location": 73,
            "return": [
                "int",
                "List[int]"
            ],
            "arguments": {
                "X": [
                    "int",
                    "Union[int, float, str]",
                    "Union[str, float]"
                ],
                "y": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "check_is_fitted": {
            "name": "check_is_fitted",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "estimator": [
                    "int",
                    "str"
                ],
                "attribute": [
                    "int",
                    "str"
                ]
            }
        },
        "PushError.no_type": {
            "name": "no_type",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "thing": [
                    "str"
                ]
            }
        },
        "PushError.failed_coerce": {
            "name": "failed_coerce",
            "location": 111,
            "return": [
                "bool",
                "str",
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "BaseException",
                    "Type[BaseException]",
                    "Exception"
                ],
                "thing": [
                    "BaseException",
                    "Type[BaseException]",
                    "Exception"
                ],
                "push_type": [
                    "BaseException",
                    "Type[BaseException]",
                    "Exception"
                ]
            }
        },
        "PushError.empty_character": {
            "name": "empty_character",
            "location": 120,
            "return": [
                "str",
                "List[int]",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "PushError.long_character": {
            "name": "long_character",
            "location": 125,
            "return": [
                "str",
                "List[int]",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "pyshgp-master/pyshgp/__init__.py": {},
    "pyshgp-master/pyshgp/gp/estimators.py": {
        "PushEstimator.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "spawner": [
                    "bool",
                    "str",
                    "Optional[dict]",
                    "float",
                    "List['cirq.Circuit']"
                ],
                "search": [
                    "str",
                    "bool",
                    "Union[int, str]",
                    "List[str]"
                ],
                "selector": [
                    "bool",
                    "str",
                    "Optional[dict]",
                    "float",
                    "List['cirq.Circuit']"
                ],
                "variation_strategy": [
                    "bool",
                    "str",
                    "Optional[dict]",
                    "float",
                    "List['cirq.Circuit']"
                ],
                "population_size": [
                    "str",
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "max_generations": [
                    "int",
                    "str",
                    "Optional[int]",
                    "float"
                ],
                "initial_genome_size": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "simplification_steps": [
                    "bool",
                    "str",
                    "Optional[dict]",
                    "float",
                    "List['cirq.Circuit']"
                ],
                "last_str_from_stdout": [
                    "str"
                ],
                "interpreter": [
                    "bool",
                    "str",
                    "Optional[dict]",
                    "float",
                    "List['cirq.Circuit']"
                ],
                "parallelism": [
                    "bool",
                    "str",
                    "Optional[dict]",
                    "float",
                    "List['cirq.Circuit']"
                ],
                "push_config": [
                    "bool",
                    "str",
                    "List[\"DictDataLoader\"]"
                ],
                "verbose": [
                    "bool"
                ]
            }
        },
        "PushEstimator._build_search_algo": {
            "name": "_build_search_algo",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PushEstimator.fit": {
            "name": "fit",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "X": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "PushEstimator.predict": {
            "name": "predict",
            "location": 161,
            "return": [
                "int",
                "tuple",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "X": []
            }
        },
        "PushEstimator.score": {
            "name": "score",
            "location": 182,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "X": [
                    "float"
                ],
                "y": [
                    "float"
                ]
            }
        },
        "PushEstimator.save": {
            "name": "save",
            "location": 200,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "PushEstimator.load": {
            "name": "load",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "dict",
                    "bytes",
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "pyshgp-master/pyshgp/gp/evaluation.py": {
        "damerau_levenshtein_distance": {
            "name": "damerau_levenshtein_distance",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "a": [
                    "int",
                    "str",
                    "Iterable[T]"
                ],
                "b": [
                    "str",
                    "bool",
                    "List[Tuple[int, str]]"
                ]
            }
        },
        "Evaluator.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "interpreter": [
                    "int",
                    "bool",
                    "float"
                ],
                "penalty": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Evaluator.default_error_function": {
            "name": "default_error_function",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "actuals": [
                    "numpy.array",
                    "str"
                ],
                "expecteds": [
                    "numpy.array",
                    "str"
                ]
            }
        },
        "Evaluator.evaluate": {
            "name": "evaluate",
            "location": 126,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "program": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DatasetEvaluator.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "X": [
                    "float",
                    "numpy.ndarray",
                    "int"
                ],
                "y": [
                    "str",
                    "int",
                    "bool"
                ],
                "interpreter": [
                    "str",
                    "int",
                    "Union[Sequence[Any], Tuple[float, float]]",
                    "bool",
                    "Dict[str, str]",
                    "List[Tuple[Any, Any]]"
                ],
                "penalty": [
                    "str",
                    "int",
                    "Union[Sequence[Any], Tuple[float, float]]",
                    "bool",
                    "Dict[str, str]",
                    "List[Tuple[Any, Any]]"
                ]
            }
        },
        "DatasetEvaluator.evaluate": {
            "name": "evaluate",
            "location": 173,
            "return": [
                "Callable",
                "pandas.DataFrame",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "program": [
                    "Type[numpy.number]",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "FunctionEvaluator.__init__": {
            "name": "__init__",
            "location": 200,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "error_function": [
                    "int",
                    "bool",
                    "str",
                    "Type"
                ]
            }
        },
        "FunctionEvaluator.evaluate": {
            "name": "evaluate",
            "location": 221,
            "return": [
                "int",
                "List[Dict[str, Any]]",
                "Exception",
                "str",
                "Tuple[str, str]",
                "Optional[BaseException]",
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "program": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "pyshgp-master/pyshgp/gp/genome.py": {
        "_has_opener": {
            "name": "_has_opener",
            "location": 41,
            "return": [],
            "arguments": {
                "seq": []
            }
        },
        "genome_to_code": {
            "name": "genome_to_code",
            "location": 61,
            "return": [],
            "arguments": {
                "genome": []
            }
        },
        "Opener.dec": {
            "name": "dec",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GeneSpawner.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "n_inputs": [],
                "instruction_set": [],
                "literals": [],
                "erc_generators": [],
                "distribution": []
            }
        },
        "GeneSpawner.random_input": {
            "name": "random_input",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GeneSpawner.random_instruction": {
            "name": "random_instruction",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GeneSpawner.random_literal": {
            "name": "random_literal",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GeneSpawner.random_erc": {
            "name": "random_erc",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GeneSpawner.random_gene": {
            "name": "random_gene",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GeneSpawner.spawn_genome": {
            "name": "spawn_genome",
            "location": 243,
            "return": [],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "GenomeSimplifier.__init__": {
            "name": "__init__",
            "location": 297,
            "return": [],
            "arguments": {
                "self": [],
                "evaluator": [],
                "program_signature": []
            }
        },
        "GenomeSimplifier._remove_rand_genes": {
            "name": "_remove_rand_genes",
            "location": 303,
            "return": [],
            "arguments": {
                "self": [],
                "genome": []
            }
        },
        "GenomeSimplifier._errors_of_genome": {
            "name": "_errors_of_genome",
            "location": 313,
            "return": [],
            "arguments": {
                "self": [],
                "genome": []
            }
        },
        "GenomeSimplifier._step": {
            "name": "_step",
            "location": 319,
            "return": [],
            "arguments": {
                "self": [],
                "genome": [],
                "errors_to_beat": []
            }
        },
        "GenomeSimplifier.simplify": {
            "name": "simplify",
            "location": 327,
            "return": [],
            "arguments": {
                "self": [],
                "genome": [],
                "original_errors": [],
                "steps": []
            }
        }
    },
    "pyshgp-master/pyshgp/gp/individual.py": {
        "Individual.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "genome": [
                    "int",
                    "list"
                ],
                "signature": [
                    "int",
                    "list"
                ]
            }
        },
        "Individual.program": {
            "name": "program",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Individual.error_vector": {
            "name": "error_vector",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "error_vector": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Optional[str]]",
                    "Exception",
                    "Callable[[str], bool]",
                    "List[str]"
                ]
            }
        },
        "Individual.total_error": {
            "name": "total_error",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "str",
                    "KT",
                    "int"
                ]
            }
        },
        "Individual.error_vector_bytes": {
            "name": "error_vector_bytes",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "bytes",
                    "List[dict]"
                ]
            }
        },
        "Individual.__lt__": {
            "name": "__lt__",
            "location": 89,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "MutableMapping[str, Any]"
                ]
            }
        },
        "Individual.__eq__": {
            "name": "__eq__",
            "location": 92,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        }
    },
    "pyshgp-master/pyshgp/gp/population.py": {
        "_eval_indiv": {
            "name": "_eval_indiv",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "indiv": [
                    "int",
                    "Callable",
                    "str"
                ],
                "evalr": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Population.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "individuals": [
                    "list",
                    "str",
                    "Optional[str]",
                    "Iterable[T]",
                    "T",
                    "Optional[Sequence[Any]]"
                ]
            }
        },
        "Population.__len__": {
            "name": "__len__",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Population.__getitem__": {
            "name": "__getitem__",
            "location": 35,
            "return": [
                "bool",
                "Dict[str, str]",
                "list",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "int",
                    "str",
                    "MutableMapping[Any, Any]",
                    "float"
                ]
            }
        },
        "Population.add": {
            "name": "add",
            "location": 40,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "individual": [
                    "str",
                    "Optional[int]",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Population.best": {
            "name": "best",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Population.best_n": {
            "name": "best_n",
            "location": 52,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "Population.p_evaluate": {
            "name": "p_evaluate",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "evaluator_proxy": [
                    "int",
                    "Callable",
                    "str"
                ],
                "pool": [
                    "int",
                    "bool"
                ]
            }
        },
        "Population.evaluate": {
            "name": "evaluate",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "evaluator": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Population.all_error_vectors": {
            "name": "all_error_vectors",
            "location": 72,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Population.all_total_errors": {
            "name": "all_total_errors",
            "location": 76,
            "return": [
                "Optional[str]",
                "str",
                "Literal"
            ],
            "arguments": {
                "self": []
            }
        },
        "Population.median_error": {
            "name": "median_error",
            "location": 80,
            "return": [
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Population.error_diversity": {
            "name": "error_diversity",
            "location": 84,
            "return": [
                "str",
                "int",
                "List[int]",
                "tuple",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Population.genome_diversity": {
            "name": "genome_diversity",
            "location": 88,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Population.program_diversity": {
            "name": "program_diversity",
            "location": 93,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Population.mean_genome_length": {
            "name": "mean_genome_length",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyshgp-master/pyshgp/gp/search.py": {
        "_spawn_individual": {
            "name": "_spawn_individual",
            "location": 147,
            "return": [],
            "arguments": {
                "spawner": [],
                "genome_size": [],
                "program_signature": []
            }
        },
        "get_search_algo": {
            "name": "get_search_algo",
            "location": 349,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "ParallelContext.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "spawner": [],
                "evaluator": [],
                "n_proc": []
            }
        },
        "ParallelContext.close": {
            "name": "close",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchConfiguration.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "signature": [],
                "evaluator": [],
                "spawner": [],
                "selection": [],
                "variation": [],
                "population_size": [],
                "max_generations": [],
                "error_threshold": [],
                "initial_genome_size": [],
                "simplification_steps": [],
                "parallelism": []
            }
        },
        "SearchConfiguration.get_selector": {
            "name": "get_selector",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchConfiguration.get_variation_op": {
            "name": "get_variation_op",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchConfiguration.tear_down": {
            "name": "tear_down",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchAlgorithm.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "SearchAlgorithm.init_population": {
            "name": "init_population",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchAlgorithm.step": {
            "name": "step",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchAlgorithm._full_step": {
            "name": "_full_step",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchAlgorithm.is_solved": {
            "name": "is_solved",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SearchAlgorithm.run": {
            "name": "run",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GeneticAlgorithm.__init__": {
            "name": "__init__",
            "location": 261,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "GeneticAlgorithm._make_child": {
            "name": "_make_child",
            "location": 264,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GeneticAlgorithm.step": {
            "name": "step",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimulatedAnnealing.__init__": {
            "name": "__init__",
            "location": 299,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "SimulatedAnnealing._get_temp": {
            "name": "_get_temp",
            "location": 305,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimulatedAnnealing._acceptance": {
            "name": "_acceptance",
            "location": 309,
            "return": [],
            "arguments": {
                "self": [],
                "next_error": []
            }
        },
        "SimulatedAnnealing.step": {
            "name": "step",
            "location": 318,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyshgp-master/pyshgp/gp/selection.py": {
        "median_absolute_deviation": {
            "name": "median_absolute_deviation",
            "location": 170,
            "return": [
                "bool",
                "trezor.utils.Writer",
                "str"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "T",
                    "float"
                ]
            }
        },
        "one_individual_per_error_vector": {
            "name": "one_individual_per_error_vector",
            "location": 199,
            "return": [
                "int",
                "Sequence",
                "str"
            ],
            "arguments": {
                "population": [
                    "str",
                    "Union[int, slice]",
                    "float",
                    "set"
                ]
            }
        },
        "get_selector": {
            "name": "get_selector",
            "location": 336,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Selector.select_one": {
            "name": "select_one",
            "location": 20,
            "return": [
                "pyshgp.gp.individual.Individual"
            ],
            "arguments": {
                "self": [],
                "population": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Selector.select": {
            "name": "select",
            "location": 38,
            "return": [
                "typing.Sequence[pyshgp.gp.individual.Individual]"
            ],
            "arguments": {
                "self": [],
                "population": [
                    "int",
                    "pyshgp.gp.population.Population",
                    "list",
                    "bool"
                ],
                "n": [
                    "int",
                    "pyshgp.gp.population.Population",
                    "list",
                    "bool"
                ]
            }
        },
        "SimpleMultiSelectorMixin.select": {
            "name": "select",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "population": [
                    "int",
                    "float",
                    "List[float]",
                    "pyshgp.gp.population.Population",
                    "bool"
                ],
                "n": [
                    "int",
                    "bool",
                    "Iterable[T]",
                    "pyshgp.gp.population.Population"
                ]
            }
        },
        "FitnessProportionate.select_one": {
            "name": "select_one",
            "location": 89,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "population": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "FitnessProportionate.select": {
            "name": "select",
            "location": 106,
            "return": [
                "bool",
                "int",
                "Tuple[int, int]",
                "tuple",
                "List[str]",
                "Union[List[str], str]"
            ],
            "arguments": {
                "self": [],
                "population": [
                    "int",
                    "FrozenSet[int]",
                    "str",
                    "Tuple[int, int, int]"
                ],
                "n": [
                    "int",
                    "float",
                    "pyshgp.gp.population.Population",
                    "List[numpy.array]"
                ]
            }
        },
        "Tournament.__init__": {
            "name": "__init__",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tournament_size": [
                    "int",
                    "bool"
                ]
            }
        },
        "Tournament.select_one": {
            "name": "select_one",
            "location": 152,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "population": [
                    "str",
                    "bytes",
                    "int",
                    "bytearray"
                ]
            }
        },
        "CaseStream.__init__": {
            "name": "__init__",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_cases": [
                    "int"
                ]
            }
        },
        "CaseStream.__iter__": {
            "name": "__iter__",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Lexicase.__init__": {
            "name": "__init__",
            "location": 230,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "epsilon": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Lexicase._epsilon_from_mad": {
            "name": "_epsilon_from_mad",
            "location": 234,
            "return": [
                "int",
                "utils.diskstaSection"
            ],
            "arguments": {
                "error_matrix": [
                    "numpy.ndarray",
                    "str",
                    "bool"
                ]
            }
        },
        "Lexicase._select_with_stream": {
            "name": "_select_with_stream",
            "location": 237,
            "return": [
                "str",
                "Optional[str]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "population": [
                    "bool",
                    "dict"
                ],
                "cases": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Lexicase.select_one": {
            "name": "select_one",
            "location": 260,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "population": [
                    "List[int]",
                    "List[str]",
                    "src.models.Population",
                    "numpy.ndarray",
                    "list",
                    "int",
                    "Sequence[T]"
                ]
            }
        },
        "Lexicase.select": {
            "name": "select",
            "location": 277,
            "return": [
                "str",
                "bool",
                "List[float]",
                "float",
                "Union[int, float]"
            ],
            "arguments": {
                "self": [],
                "population": [
                    "int",
                    "bool",
                    "Iterable[T]",
                    "pyshgp.gp.population.Population"
                ],
                "n": [
                    "int",
                    "bool",
                    "Iterable[T]",
                    "pyshgp.gp.population.Population"
                ]
            }
        },
        "Elite.select_one": {
            "name": "select_one",
            "location": 299,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "population": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Elite.select": {
            "name": "select",
            "location": 316,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "population": [
                    "int",
                    "pyshgp.gp.population.Population",
                    "float",
                    "List[numpy.array]"
                ],
                "n": [
                    "int",
                    "pyshgp.gp.population.Population",
                    "float",
                    "List[numpy.array]"
                ]
            }
        }
    },
    "pyshgp-master/pyshgp/gp/variation.py": {
        "_gaussian_noise_factor": {
            "name": "_gaussian_noise_factor",
            "location": 134,
            "return": [],
            "arguments": {}
        },
        "get_variation_operator": {
            "name": "get_variation_operator",
            "location": 452,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "VariationOperator.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "num_parents": []
            }
        },
        "VariationOperator.checknum_parents": {
            "name": "checknum_parents",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "parents": []
            }
        },
        "VariationOperator.produce": {
            "name": "produce",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "parents": [],
                "spawner": []
            }
        },
        "VariationStrategy.add": {
            "name": "add",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "op": [],
                "p": []
            }
        },
        "VariationPipeline.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "operators": []
            }
        },
        "VariationPipeline.produce": {
            "name": "produce",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "parents": [],
                "spawner": []
            }
        },
        "LiteralMutation.__init__": {
            "name": "__init__",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "push_type": [],
                "rate": []
            }
        },
        "LiteralMutation._mutate_literal": {
            "name": "_mutate_literal",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "literal": []
            }
        },
        "LiteralMutation.produce": {
            "name": "produce",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "parents": [],
                "spawner": []
            }
        },
        "DeletionMutation.__init__": {
            "name": "__init__",
            "location": 230,
            "return": [],
            "arguments": {
                "self": [],
                "deletion_rate": []
            }
        },
        "DeletionMutation.produce": {
            "name": "produce",
            "location": 235,
            "return": [],
            "arguments": {
                "self": [],
                "parents": [],
                "spawner": []
            }
        },
        "AdditionMutation.__init__": {
            "name": "__init__",
            "location": 276,
            "return": [],
            "arguments": {
                "self": [],
                "addition_rate": []
            }
        },
        "AdditionMutation.produce": {
            "name": "produce",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "parents": [],
                "spawner": []
            }
        },
        "Alternation.__init__": {
            "name": "__init__",
            "location": 330,
            "return": [],
            "arguments": {
                "self": [],
                "alternation_rate": [],
                "alignment_deviation": []
            }
        },
        "Alternation.produce": {
            "name": "produce",
            "location": 336,
            "return": [],
            "arguments": {
                "self": [],
                "parents": [],
                "spawner": []
            }
        },
        "Genesis.__init__": {
            "name": "__init__",
            "location": 402,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Genesis.produce": {
            "name": "produce",
            "location": 407,
            "return": [],
            "arguments": {
                "self": [],
                "parents": [],
                "spawner": []
            }
        },
        "Cloning.__init__": {
            "name": "__init__",
            "location": 433,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cloning.produce": {
            "name": "produce",
            "location": 437,
            "return": [],
            "arguments": {
                "self": [],
                "parents": [],
                "spawner": []
            }
        }
    },
    "pyshgp-master/pyshgp/gp/__init__.py": {},
    "pyshgp-master/pyshgp/push/atoms.py": {
        "Atom.pretty_str": {
            "name": "pretty_str",
            "location": 32,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Closer.pretty_str": {
            "name": "pretty_str",
            "location": 40,
            "return": [
                "float",
                "Tuple[int, int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Literal.pretty_str": {
            "name": "pretty_str",
            "location": 64,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstructionMeta.pretty_str": {
            "name": "pretty_str",
            "location": 92,
            "return": [
                "str",
                "type",
                "types.ModuleType"
            ],
            "arguments": {
                "self": []
            }
        },
        "Input.pretty_str": {
            "name": "pretty_str",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeBlock.size": {
            "name": "size",
            "location": 119,
            "return": [
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": [],
                "depth": [
                    "int",
                    "float"
                ]
            }
        },
        "CodeBlock.depth": {
            "name": "depth",
            "location": 123,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeBlock.code_at_point": {
            "name": "code_at_point",
            "location": 135,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "ndx": [
                    "float"
                ]
            }
        },
        "CodeBlock.with_code_inserted_at_point": {
            "name": "with_code_inserted_at_point",
            "location": 151,
            "return": [
                "str",
                "float",
                "Tuple[str, int]"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str"
                ],
                "index": [
                    "str",
                    "int"
                ]
            }
        },
        "CodeBlock._attempt_code_insert": {
            "name": "_attempt_code_insert",
            "location": 158,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "int",
                    "Mapping[str, str]",
                    "str",
                    "Callable"
                ],
                "index": [
                    "int",
                    "str"
                ]
            }
        },
        "CodeBlock.pretty_str": {
            "name": "pretty_str",
            "location": 174,
            "return": [
                "str",
                "Optional[str]",
                "FrozenSet[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyshgp-master/pyshgp/push/config.py": {
        "constrain_collection": {
            "name": "constrain_collection",
            "location": 45,
            "return": [
                "str",
                "Dict[str, Dict[str, Any]]",
                "bool",
                "Mapping[str, str]"
            ],
            "arguments": {
                "config": [
                    "Sequence",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "str"
                ],
                "coll": [
                    "Sequence",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "constrain_number": {
            "name": "constrain_number",
            "location": 52,
            "return": [
                "str",
                "bool",
                "Mapping[str, Any]",
                "dict",
                "Dict[str, Any]",
                "Dict[str, List[str]]"
            ],
            "arguments": {
                "config": [
                    "bool",
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "n": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "pyshgp-master/pyshgp/push/instruction.py": {
        "_check_is_seq": {
            "name": "_check_is_seq",
            "location": 86,
            "return": [],
            "arguments": {
                "x": [],
                "source": []
            }
        },
        "Instruction.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "code_blocks": [],
                "docstring": []
            }
        },
        "Instruction.evaluate": {
            "name": "evaluate",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "push_state": [],
                "push_config": []
            }
        },
        "Instruction.required_stacks": {
            "name": "required_stacks",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Instruction.meta": {
            "name": "meta",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Instruction.__eq__": {
            "name": "__eq__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Instruction.__hash__": {
            "name": "__hash__",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Instruction.__repr__": {
            "name": "__repr__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimpleInstruction.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "f": [],
                "input_stacks": [],
                "output_stacks": [],
                "code_blocks": [],
                "docstring": []
            }
        },
        "SimpleInstruction.evaluate": {
            "name": "evaluate",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "push_state": [],
                "push_config": []
            }
        },
        "SimpleInstruction.required_stacks": {
            "name": "required_stacks",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StateToStateInstruction.__init__": {
            "name": "__init__",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "f": [],
                "stacks_used": [],
                "code_blocks": [],
                "docstring": []
            }
        },
        "StateToStateInstruction.evaluate": {
            "name": "evaluate",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "push_state": [],
                "push_config": []
            }
        },
        "StateToStateInstruction.required_stacks": {
            "name": "required_stacks",
            "location": 228,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TakesStateInstruction.__init__": {
            "name": "__init__",
            "location": 265,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "f": [],
                "output_stacks": [],
                "other_stacks": [],
                "code_blocks": [],
                "docstring": []
            }
        },
        "TakesStateInstruction.evaluate": {
            "name": "evaluate",
            "location": 277,
            "return": [],
            "arguments": {
                "self": [],
                "push_state": [],
                "push_config": []
            }
        },
        "TakesStateInstruction.required_stacks": {
            "name": "required_stacks",
            "location": 308,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProducesManyOfTypeInstruction.__init__": {
            "name": "__init__",
            "location": 348,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "f": [],
                "input_stacks": [],
                "output_stack": [],
                "code_blocks": [],
                "docstring": []
            }
        },
        "ProducesManyOfTypeInstruction.evaluate": {
            "name": "evaluate",
            "location": 360,
            "return": [],
            "arguments": {
                "self": [],
                "push_state": [],
                "push_config": []
            }
        },
        "ProducesManyOfTypeInstruction.required_stacks": {
            "name": "required_stacks",
            "location": 396,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pyshgp-master/pyshgp/push/instruction_set.py": {
        "InstructionSet.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type_library": [
                    "str",
                    "int"
                ],
                "register_core": [
                    "str",
                    "int"
                ],
                "strip_docstrings": [
                    "str",
                    "int"
                ]
            }
        },
        "InstructionSet.set_type_library": {
            "name": "set_type_library",
            "location": 45,
            "return": [
                "str",
                "Dict[str, Any]",
                "Container[str]",
                "int",
                "bool",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": [],
                "type_library": [
                    "List[str]",
                    "int"
                ]
            }
        },
        "InstructionSet.register": {
            "name": "register",
            "location": 62,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "instr": [
                    "str",
                    "bool"
                ]
            }
        },
        "InstructionSet.register_list": {
            "name": "register_list",
            "location": 82,
            "return": [
                "List[int]",
                "List[str]",
                "bytes",
                "bool",
                "str",
                "Sequence[int]"
            ],
            "arguments": {
                "self": [],
                "instrs": [
                    "int",
                    "Optional[int]",
                    "list",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "InstructionSet.register_core_by_stack": {
            "name": "register_core_by_stack",
            "location": 100,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "include_stacks": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "InstructionSet.register_core_by_name": {
            "name": "register_core_by_name",
            "location": 124,
            "return": [
                "Iterator",
                "Dict[str, Any]",
                "str",
                "int",
                "Container[str]"
            ],
            "arguments": {
                "self": [],
                "name_pattern": [
                    "str"
                ]
            }
        },
        "InstructionSet.register_core": {
            "name": "register_core",
            "location": 144,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstructionSet.unregister": {
            "name": "unregister",
            "location": 156,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "instruction_name": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "InstructionSet.required_stacks": {
            "name": "required_stacks",
            "location": 173,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyshgp-master/pyshgp/push/interpreter.py": {
        "PushInterpreter.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "instruction_set": [
                    "Set[str]",
                    "bool"
                ],
                "reset_on_run": [
                    "int",
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "PushInterpreter._validate": {
            "name": "_validate",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PushInterpreter._evaluate_instruction": {
            "name": "_evaluate_instruction",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "instruction": [
                    "dict",
                    "config.ConfigFile",
                    "str"
                ],
                "config": [
                    "dict",
                    "config.ConfigFile",
                    "str"
                ]
            }
        },
        "PushInterpreter.untyped_to_typed": {
            "name": "untyped_to_typed",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PushInterpreter.evaluate_atom": {
            "name": "evaluate_atom",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "atom": [
                    "dict",
                    "cmk.base.config.HostConfig"
                ],
                "config": [
                    "Dict[str, Any]"
                ]
            }
        },
        "PushInterpreter.run": {
            "name": "run",
            "location": 127,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "program": [
                    "tuple",
                    "Optional[bool]",
                    "Callable",
                    "dict",
                    "Type[BaseException]"
                ],
                "inputs": [
                    "str",
                    "int",
                    "bool",
                    "list"
                ],
                "print_trace": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "pyshgp-master/pyshgp/push/program.py": {
        "Program.pretty_str": {
            "name": "pretty_str",
            "location": 49,
            "return": [
                "str",
                "List[Dict]",
                "Callable",
                "bool",
                "int",
                "float",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyshgp-master/pyshgp/push/stack.py": {
        "PushStack.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "push_type": [
                    "str",
                    "Type[BaseException]",
                    "int",
                    "Callable",
                    "tuple",
                    "Optional[Type[BaseException]]"
                ],
                "push_config": [
                    "int",
                    "str",
                    "bool",
                    "Hashable",
                    "Callable"
                ]
            }
        },
        "PushStack.is_empty": {
            "name": "is_empty",
            "location": 40,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PushStack._coerce": {
            "name": "_coerce",
            "location": 44,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "T",
                    "Mapping",
                    "int"
                ]
            }
        },
        "PushStack.push": {
            "name": "push",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str, bytes]"
                ]
            }
        },
        "PushStack.pop": {
            "name": "pop",
            "location": 76,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "PushStack.nth": {
            "name": "nth",
            "location": 94,
            "return": [
                "str",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "List[int]",
                    "list",
                    "bool",
                    "List[float]",
                    "str",
                    "int"
                ]
            }
        },
        "PushStack.take": {
            "name": "take",
            "location": 117,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "PushStack.top": {
            "name": "top",
            "location": 137,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PushStack.insert": {
            "name": "insert",
            "location": 150,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "list",
                    "str",
                    "List[Union[int, Any]]",
                    "List[float]"
                ],
                "value": [
                    "tuple",
                    "List[str]",
                    "str",
                    "bytes",
                    "float",
                    "int",
                    "Set[str]"
                ]
            }
        },
        "PushStack.set_nth": {
            "name": "set_nth",
            "location": 165,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "bool"
                ],
                "value": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "Tuple[int]",
                    "Tuple[int, int, int]"
                ]
            }
        },
        "PushStack.flush": {
            "name": "flush",
            "location": 180,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PushStack.__repr__": {
            "name": "__repr__",
            "location": 185,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PushStack.__eq__": {
            "name": "__eq__",
            "location": 189,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "set",
                    "bool"
                ]
            }
        }
    },
    "pyshgp-master/pyshgp/push/state.py": {
        "PushState.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type_library": [
                    "Optional[Dict]",
                    "List[Dict[str, object]]",
                    "str",
                    "bool",
                    "Type[T]"
                ],
                "push_config": [
                    "str",
                    "Optional[Callable]",
                    "dict"
                ]
            }
        },
        "PushState.__eq__": {
            "name": "__eq__",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any"
                ]
            }
        },
        "PushState.from_dict": {
            "name": "from_dict",
            "location": 40,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "bool",
                    "type"
                ],
                "d": [
                    "str",
                    "dict",
                    "Dict[str, Dict[str, Any]]",
                    "Callable",
                    "Exception"
                ],
                "type_library": [
                    "Type",
                    "bool",
                    "type"
                ],
                "push_config": [
                    "Type",
                    "bool",
                    "type"
                ]
            }
        },
        "PushState.load_code": {
            "name": "load_code",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "program": [
                    "int",
                    "str"
                ]
            }
        },
        "PushState.load_inputs": {
            "name": "load_inputs",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "int",
                    "dict"
                ]
            }
        },
        "PushState.observe_stacks": {
            "name": "observe_stacks",
            "location": 94,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "types": [
                    "pyshgp.push.type_library.PushTypeLibrary",
                    "Iterable[Type]",
                    "Sequence[str]",
                    "Type",
                    "str"
                ]
            }
        },
        "PushState.pop_from_stacks": {
            "name": "pop_from_stacks",
            "location": 119,
            "return": [
                "Optional[int]",
                "bool",
                "str",
                "float",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "types": [
                    "Sequence[str]",
                    "str",
                    "Optional[Any]",
                    "List[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "PushState.push_to_stacks": {
            "name": "push_to_stacks",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "values": [
                    "list",
                    "str",
                    "List[str]",
                    "List[int]",
                    "List[float]"
                ],
                "types": [
                    "str",
                    "Tuple[type]"
                ]
            }
        },
        "PushState.size": {
            "name": "size",
            "location": 143,
            "return": [
                "List[int]",
                "List[str]",
                "list",
                "Tuple[int, int]",
                "str",
                "bool",
                "Optional[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PushState.pretty_print": {
            "name": "pretty_print",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyshgp-master/pyshgp/push/types.py": {
        "make_vector_type": {
            "name": "make_vector_type",
            "location": 149,
            "return": [
                "int",
                "str",
                "Type"
            ],
            "arguments": {
                "scalar_type": [
                    "Type",
                    "Union[str, 'Type']"
                ]
            }
        },
        "Char.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "char": [
                    "str",
                    "int",
                    "Container[str]"
                ]
            }
        },
        "Char.__eq__": {
            "name": "__eq__",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str"
                ]
            }
        },
        "PushType.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, str]"
                ],
                "python_types": [
                    "int",
                    "Tuple[int, int]"
                ],
                "is_collection": [
                    "bool",
                    "Set[str]",
                    "str",
                    "int",
                    "float"
                ],
                "is_numeric": [
                    "bool",
                    "Set[str]",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "PushType.is_instance": {
            "name": "is_instance",
            "location": 66,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "numpy.ndarray",
                    "Tuple[str, List[Any]]",
                    "Union[str, List[str]]",
                    "int",
                    "float",
                    "Dict[str, Any]"
                ]
            }
        },
        "PushType.coerce": {
            "name": "coerce",
            "location": 69,
            "return": [
                "str",
                "Literal"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "int",
                    "list"
                ]
            }
        },
        "PushType.__eq__": {
            "name": "__eq__",
            "location": 72,
            "return": [
                "str",
                "Type"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T"
                ]
            }
        },
        "PushType.__hash__": {
            "name": "__hash__",
            "location": 75,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PushBoolType.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PushIntType.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PushFloatType.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PushCharType.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PushStrType.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PushVectorType.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "p_vec_type": [
                    "str",
                    "bool"
                ]
            }
        },
        "PushVectorType.coerce": {
            "name": "coerce",
            "location": 115,
            "return": [
                "bool",
                "Type"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[None, str, bytes]",
                    "numpy.ndarray",
                    "Union[int, float]"
                ]
            }
        }
    },
    "pyshgp-master/pyshgp/push/type_library.py": {
        "infer_literal": {
            "name": "infer_literal",
            "location": 205,
            "return": [
                "Optional[mypy.types.Type]",
                "Type",
                "bool",
                "type"
            ],
            "arguments": {
                "val": [
                    "bool",
                    "Optional[mypy.types.Type]",
                    "list"
                ],
                "type_library": [
                    "bool",
                    "Optional[mypy.types.Type]",
                    "list"
                ]
            }
        },
        "PushTypeLibrary.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "register_core": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "PushTypeLibrary.register": {
            "name": "register",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "push_type": [
                    "Type[BaseException]",
                    "list",
                    "Optional[mypy.types.Type]",
                    "Container[\"Taxon\"]",
                    "str"
                ],
                "_force": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "Sequence[Optional[str]]"
                ]
            }
        },
        "PushTypeLibrary.create_and_register": {
            "name": "create_and_register",
            "location": 61,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "type",
                    "Type"
                ],
                "python_types": [
                    "str",
                    "type",
                    "Type"
                ],
                "is_collection": [
                    "str",
                    "type",
                    "Type"
                ],
                "is_numeric": [
                    "str",
                    "type",
                    "Type"
                ],
                "force": [
                    "str",
                    "bool"
                ]
            }
        },
        "PushTypeLibrary.unregister": {
            "name": "unregister",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "push_type_name": [
                    "str"
                ]
            }
        },
        "PushTypeLibrary.register_list": {
            "name": "register_list",
            "location": 117,
            "return": [
                "List[int]",
                "List[str]",
                "bytes",
                "bool",
                "str",
                "Sequence[int]"
            ],
            "arguments": {
                "self": [],
                "list_of_push_types": [
                    "List[str]",
                    "bool",
                    "Callable",
                    "type",
                    "str"
                ]
            }
        },
        "PushTypeLibrary.register_core": {
            "name": "register_core",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PushTypeLibrary.supported_stacks": {
            "name": "supported_stacks",
            "location": 147,
            "return": [
                "str",
                "Dict[str, str]",
                "Sequence[str]",
                "Dict[str, Any]",
                "OrderedDict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PushTypeLibrary.push_type_of": {
            "name": "push_type_of",
            "location": 158,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "self": [],
                "thing": [
                    "bool",
                    "Tuple[str]",
                    "Optional[bool]",
                    "Mapping"
                ],
                "error_on_not_found": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "PushTypeLibrary.push_type_for_type": {
            "name": "push_type_for_type",
            "location": 181,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "type",
                    "bool",
                    "int",
                    "Dict[str, Any]",
                    "str"
                ],
                "error_on_not_found": [
                    "bool",
                    "Callable[[int], None]",
                    "str"
                ]
            }
        }
    },
    "pyshgp-master/pyshgp/push/__init__.py": {},
    "pyshgp-master/pyshgp/push/instructions/code.py": {
        "_is_code_block": {
            "name": "_is_code_block",
            "location": 16,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "_is_singular": {
            "name": "_is_singular",
            "location": 20,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "_code_length": {
            "name": "_code_length",
            "location": 24,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "_code_first": {
            "name": "_code_first",
            "location": 30,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "_code_last": {
            "name": "_code_last",
            "location": 36,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "_code_rest": {
            "name": "_code_rest",
            "location": 42,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "_code_but_last": {
            "name": "_code_but_last",
            "location": 48,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "_wrap_code_block": {
            "name": "_wrap_code_block",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "_code_combine": {
            "name": "_code_combine",
            "location": 58,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "_code_do_then_pop": {
            "name": "_code_do_then_pop",
            "location": 69,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "_code_do_range": {
            "name": "_code_do_range",
            "location": 78,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "_exec_do_range": {
            "name": "_exec_do_range",
            "location": 104,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "_code_do_count": {
            "name": "_code_do_count",
            "location": 129,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "_exec_do_count": {
            "name": "_exec_do_count",
            "location": 146,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "_code_do_times": {
            "name": "_code_do_times",
            "location": 162,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "_exec_do_times": {
            "name": "_exec_do_times",
            "location": 182,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "_exec_while": {
            "name": "_exec_while",
            "location": 201,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "_exec_do_while": {
            "name": "_exec_do_while",
            "location": 216,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "_code_map": {
            "name": "_code_map",
            "location": 225,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "_if": {
            "name": "_if",
            "location": 239,
            "return": [],
            "arguments": {
                "b": [],
                "_then": [],
                "_else": []
            }
        },
        "_code_when": {
            "name": "_code_when",
            "location": 243,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "_exec_when": {
            "name": "_exec_when",
            "location": 252,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "_code_member": {
            "name": "_code_member",
            "location": 260,
            "return": [],
            "arguments": {
                "code": [],
                "item": []
            }
        },
        "_code_nth": {
            "name": "_code_nth",
            "location": 266,
            "return": [],
            "arguments": {
                "code": [],
                "ndx": []
            }
        },
        "_make_empty_code_block": {
            "name": "_make_empty_code_block",
            "location": 275,
            "return": [],
            "arguments": {}
        },
        "_is_empty_code_block": {
            "name": "_is_empty_code_block",
            "location": 279,
            "return": [],
            "arguments": {
                "code": []
            }
        },
        "_code_size": {
            "name": "_code_size",
            "location": 283,
            "return": [],
            "arguments": {
                "code": []
            }
        },
        "_code_extract": {
            "name": "_code_extract",
            "location": 289,
            "return": [],
            "arguments": {
                "code": [],
                "ndx": []
            }
        },
        "_code_insert": {
            "name": "_code_insert",
            "location": 298,
            "return": [],
            "arguments": {
                "code1": [],
                "code2": [],
                "ndx": []
            }
        },
        "_code_first_position": {
            "name": "_code_first_position",
            "location": 307,
            "return": [],
            "arguments": {
                "code1": [],
                "code2": []
            }
        },
        "_code_reverse": {
            "name": "_code_reverse",
            "location": 318,
            "return": [],
            "arguments": {
                "code": []
            }
        },
        "instructions": {
            "name": "instructions",
            "location": 324,
            "return": [],
            "arguments": {
                "type_library": []
            }
        }
    },
    "pyshgp-master/pyshgp/push/instructions/common.py": {
        "_revert": {
            "name": "_revert",
            "location": 21,
            "return": [
                "bool",
                "dict",
                "Iterable[str]",
                "List[List[str]]",
                "as3.scanner.Token",
                "str"
            ],
            "arguments": {}
        },
        "_wrap_tuple": {
            "name": "_wrap_tuple",
            "location": 25,
            "return": [
                "mypy.types.Type",
                "types.Resolver",
                "bool",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "_noop": {
            "name": "_noop",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "_dup": {
            "name": "_dup",
            "location": 33,
            "return": [
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "_dup_times": {
            "name": "_dup_times",
            "location": 37,
            "return": [
                "mypy.types.Type",
                "str"
            ],
            "arguments": {
                "times": [
                    "int",
                    "str",
                    "List[str]",
                    "tuple",
                    "Tuple[int, int, int]"
                ],
                "item": [
                    "int",
                    "str",
                    "Iterable[Tuple[Any, Any]]"
                ]
            }
        },
        "_swap": {
            "name": "_swap",
            "location": 54,
            "return": [
                "float",
                "Tuple[Any, Any, Any]",
                "bytearray",
                "int",
                "str"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ],
                "b": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "_rot": {
            "name": "_rot",
            "location": 58,
            "return": [
                "bytes",
                "bool",
                "bytearray",
                "int",
                "float"
            ],
            "arguments": {
                "a": [
                    "str",
                    "Iterable",
                    "float",
                    "int",
                    "Iterable[str]",
                    "Sequence[T]"
                ],
                "b": [
                    "str",
                    "Iterable",
                    "float",
                    "int",
                    "Iterable[str]",
                    "Sequence[T]"
                ],
                "c": [
                    "str",
                    "Iterable",
                    "float",
                    "int",
                    "Iterable[str]",
                    "Sequence[T]"
                ]
            }
        },
        "_eq": {
            "name": "_eq",
            "location": 62,
            "return": [
                "float",
                "Tuple[Any, Any, Any]",
                "bytearray",
                "int",
                "str"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ],
                "b": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "_flush": {
            "name": "_flush",
            "location": 66,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "int"
            ],
            "arguments": {
                "state": [
                    "str",
                    "cmk.utils.type_defs.SectionName",
                    "Optional[qutebrowser.utils.urlmatch.UrlPattern]",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "type_name": [
                    "str",
                    "cmk.utils.type_defs.SectionName",
                    "Optional[qutebrowser.utils.urlmatch.UrlPattern]",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "_stack_depth": {
            "name": "_stack_depth",
            "location": 71,
            "return": [
                "str",
                "Type",
                "int"
            ],
            "arguments": {
                "state": [
                    "str"
                ],
                "type_name": [
                    "str"
                ]
            }
        },
        "_yank": {
            "name": "_yank",
            "location": 75,
            "return": [
                "List[str]",
                "int",
                "dict",
                "str",
                "bool"
            ],
            "arguments": {
                "state": [
                    "str",
                    "Set[str]",
                    "bool"
                ],
                "type_name": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "_yank_dup": {
            "name": "_yank_dup",
            "location": 87,
            "return": [
                "List[str]",
                "int",
                "dict",
                "str",
                "bool"
            ],
            "arguments": {
                "state": [
                    "str",
                    "Set[str]",
                    "bool"
                ],
                "type_name": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "_shove": {
            "name": "_shove",
            "location": 99,
            "return": [
                "List[str]",
                "int",
                "dict",
                "str",
                "bool"
            ],
            "arguments": {
                "state": [
                    "str",
                    "Set[str]",
                    "bool"
                ],
                "type_name": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "_shove_dup": {
            "name": "_shove_dup",
            "location": 111,
            "return": [
                "List[str]",
                "int",
                "dict",
                "str",
                "bool"
            ],
            "arguments": {
                "state": [
                    "str",
                    "Set[str]",
                    "bool"
                ],
                "type_name": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "_is_empty": {
            "name": "_is_empty",
            "location": 123,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "state": [
                    "str",
                    "Optional[str]",
                    "Optional[qutebrowser.utils.urlmatch.UrlPattern]"
                ],
                "type_name": [
                    "str",
                    "Optional[str]",
                    "Optional[qutebrowser.utils.urlmatch.UrlPattern]"
                ]
            }
        },
        "_make_code": {
            "name": "_make_code",
            "location": 127,
            "return": [
                "int",
                "bool",
                "Optional[Any]",
                "str"
            ],
            "arguments": {
                "x": [
                    "Set[str]",
                    "bool",
                    "type",
                    "str"
                ],
                "push_type": [
                    "type",
                    "str",
                    "Type[Any]",
                    "pyspark.sql.types.DataType"
                ]
            }
        },
        "instructions": {
            "name": "instructions",
            "location": 134,
            "return": [
                "int",
                "slice",
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "type_library": [
                    "Union[str, List[str]]",
                    "Type[BaseException]",
                    "List[mypy.types.Type]",
                    "bool",
                    "mypy.types.Type",
                    "Callable[[T], T]"
                ]
            }
        }
    },
    "pyshgp-master/pyshgp/push/instructions/io.py": {
        "_wrap": {
            "name": "_wrap",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "_wrap_and_newline": {
            "name": "_wrap_and_newline",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "instructions": {
            "name": "instructions",
            "location": 16,
            "return": [
                "int",
                "slice",
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "type_library": [
                    "pyshgp.push.type_library.PushTypeLibrary",
                    "str",
                    "BaseException",
                    "Exception",
                    "Type[BaseException]",
                    "type",
                    "Type"
                ]
            }
        }
    },
    "pyshgp-master/pyshgp/push/instructions/logical.py": {
        "_and": {
            "name": "_and",
            "location": 9,
            "return": [
                "str",
                "list",
                "List[T]",
                "List[float]"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ],
                "b": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "_or": {
            "name": "_or",
            "location": 13,
            "return": [
                "str",
                "list",
                "List[T]",
                "List[float]"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ],
                "b": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "_not": {
            "name": "_not",
            "location": 17,
            "return": [
                "str",
                "float",
                "Tuple[str]",
                "int"
            ],
            "arguments": {
                "a": [
                    "List[T]",
                    "int",
                    "List[int]"
                ]
            }
        },
        "_xor": {
            "name": "_xor",
            "location": 21,
            "return": [
                "str",
                "Callable",
                "bytearray"
            ],
            "arguments": {
                "a": [
                    "bool",
                    "str",
                    "Iterable"
                ],
                "b": [
                    "bool",
                    "str",
                    "Iterable"
                ]
            }
        },
        "_invert_first_then_and": {
            "name": "_invert_first_then_and",
            "location": 25,
            "return": [
                "bytearray",
                "bytes",
                "str",
                "List[dict]",
                "float"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ],
                "b": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "_invert_second_then_and": {
            "name": "_invert_second_then_and",
            "location": 29,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ],
                "b": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "_bool_from_int": {
            "name": "_bool_from_int",
            "location": 33,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "i": [
                    "int",
                    "Iterator",
                    "bool"
                ]
            }
        },
        "_bool_from_float": {
            "name": "_bool_from_float",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "f": [
                    "float",
                    "List[Dict]"
                ]
            }
        },
        "instructions": {
            "name": "instructions",
            "location": 41,
            "return": [
                "int",
                "slice",
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "type_library": [
                    "pyshgp.push.type_library.PushTypeLibrary",
                    "Iterable[Type]",
                    "Sequence[str]",
                    "Type",
                    "str"
                ]
            }
        }
    },
    "pyshgp-master/pyshgp/push/instructions/numeric.py": {
        "_add": {
            "name": "_add",
            "location": 9,
            "return": [
                "bool",
                "dict",
                "int",
                "bytes"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ],
                "b": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "_sub": {
            "name": "_sub",
            "location": 13,
            "return": [
                "bool",
                "dict",
                "bytes",
                "int"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ],
                "b": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "_mult": {
            "name": "_mult",
            "location": 17,
            "return": [
                "bool",
                "dict",
                "bytes",
                "int"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ],
                "b": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "_p_div": {
            "name": "_p_div",
            "location": 21,
            "return": [
                "int",
                "str",
                "List[List[int]]"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ],
                "b": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "_p_mod": {
            "name": "_p_mod",
            "location": 27,
            "return": [
                "int",
                "str",
                "List[List[int]]"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ],
                "b": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "_min": {
            "name": "_min",
            "location": 33,
            "return": [
                "int",
                "bytes",
                "bytearray",
                "str"
            ],
            "arguments": {
                "a": [
                    "str",
                    "Iterable",
                    "Iterable[str]",
                    "Sequence[T]",
                    "bool"
                ],
                "b": [
                    "str",
                    "Iterable",
                    "Iterable[str]",
                    "Sequence[T]",
                    "bool"
                ]
            }
        },
        "_max": {
            "name": "_max",
            "location": 37,
            "return": [
                "int",
                "bytes",
                "bytearray",
                "str"
            ],
            "arguments": {
                "a": [
                    "str",
                    "Iterable",
                    "Iterable[str]",
                    "Sequence[T]",
                    "bool"
                ],
                "b": [
                    "str",
                    "Iterable",
                    "Iterable[str]",
                    "Sequence[T]",
                    "bool"
                ]
            }
        },
        "_inc": {
            "name": "_inc",
            "location": 41,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "_dec": {
            "name": "_dec",
            "location": 45,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "_lt": {
            "name": "_lt",
            "location": 49,
            "return": [
                "bool",
                "dict",
                "bytes",
                "int"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ],
                "b": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "_gt": {
            "name": "_gt",
            "location": 53,
            "return": [
                "bool",
                "dict",
                "bytes",
                "int"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ],
                "b": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "_lte": {
            "name": "_lte",
            "location": 57,
            "return": [
                "bool",
                "dict",
                "bytes",
                "int"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ],
                "b": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "_gte": {
            "name": "_gte",
            "location": 61,
            "return": [
                "bool",
                "dict",
                "bytes",
                "int"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ],
                "b": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "_sin": {
            "name": "_sin",
            "location": 65,
            "return": [
                "bool",
                "utils.Node"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "_cos": {
            "name": "_cos",
            "location": 69,
            "return": [
                "bool",
                "utils.Node"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "_tan": {
            "name": "_tan",
            "location": 73,
            "return": [
                "bool",
                "utils.Node"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "_to_int": {
            "name": "_to_int",
            "location": 77,
            "return": [
                "str",
                "utils.Node",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "_to_float": {
            "name": "_to_float",
            "location": 81,
            "return": [
                "str",
                "utils.Node",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "instructions": {
            "name": "instructions",
            "location": 85,
            "return": [
                "int",
                "slice",
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "type_library": [
                    "pyshgp.push.type_library.PushTypeLibrary",
                    "Iterable[Type]",
                    "Sequence[str]",
                    "Type",
                    "str"
                ]
            }
        }
    },
    "pyshgp-master/pyshgp/push/instructions/text.py": {
        "_concat": {
            "name": "_concat",
            "location": 8,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "_first_char": {
            "name": "_first_char",
            "location": 12,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "_last_char": {
            "name": "_last_char",
            "location": 18,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "_nth_char": {
            "name": "_nth_char",
            "location": 24,
            "return": [],
            "arguments": {
                "s": [],
                "ndx": []
            }
        },
        "_contains": {
            "name": "_contains",
            "location": 30,
            "return": [],
            "arguments": {
                "s": [],
                "x": []
            }
        },
        "_p_index": {
            "name": "_p_index",
            "location": 34,
            "return": [],
            "arguments": {
                "s": [],
                "substr": []
            }
        },
        "_head": {
            "name": "_head",
            "location": 41,
            "return": [],
            "arguments": {
                "s": [],
                "i": []
            }
        },
        "_tail": {
            "name": "_tail",
            "location": 47,
            "return": [],
            "arguments": {
                "s": [],
                "i": []
            }
        },
        "_rest": {
            "name": "_rest",
            "location": 53,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "_but_last": {
            "name": "_but_last",
            "location": 59,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "_drop": {
            "name": "_drop",
            "location": 65,
            "return": [],
            "arguments": {
                "s": [],
                "i": []
            }
        },
        "_but_last_n": {
            "name": "_but_last_n",
            "location": 71,
            "return": [],
            "arguments": {
                "s": [],
                "i": []
            }
        },
        "_split_on": {
            "name": "_split_on",
            "location": 77,
            "return": [],
            "arguments": {
                "s": [],
                "x": []
            }
        },
        "_replace_n": {
            "name": "_replace_n",
            "location": 83,
            "return": [],
            "arguments": {
                "s": [],
                "old": [],
                "new": [],
                "n": []
            }
        },
        "_replace_all": {
            "name": "_replace_all",
            "location": 87,
            "return": [],
            "arguments": {
                "s": [],
                "old": [],
                "new": []
            }
        },
        "_remove_n": {
            "name": "_remove_n",
            "location": 91,
            "return": [],
            "arguments": {
                "s": [],
                "x": [],
                "n": []
            }
        },
        "_remove_all": {
            "name": "_remove_all",
            "location": 95,
            "return": [],
            "arguments": {
                "s": [],
                "x": []
            }
        },
        "_len": {
            "name": "_len",
            "location": 99,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "_reverse": {
            "name": "_reverse",
            "location": 103,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "_make_empty": {
            "name": "_make_empty",
            "location": 107,
            "return": [],
            "arguments": {}
        },
        "_is_empty": {
            "name": "_is_empty",
            "location": 111,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "_occurrences_of": {
            "name": "_occurrences_of",
            "location": 115,
            "return": [],
            "arguments": {
                "s": [],
                "x": []
            }
        },
        "_remove_nth": {
            "name": "_remove_nth",
            "location": 119,
            "return": [],
            "arguments": {
                "s": [],
                "ndx": []
            }
        },
        "_set_nth": {
            "name": "_set_nth",
            "location": 123,
            "return": [],
            "arguments": {
                "s": [],
                "c": [],
                "ndx": []
            }
        },
        "_insert": {
            "name": "_insert",
            "location": 127,
            "return": [],
            "arguments": {
                "s": [],
                "x": [],
                "ndx": []
            }
        },
        "_strip_whitespace": {
            "name": "_strip_whitespace",
            "location": 131,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "_is_whitespace": {
            "name": "_is_whitespace",
            "location": 138,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "_is_letter": {
            "name": "_is_letter",
            "location": 142,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "_is_digit": {
            "name": "_is_digit",
            "location": 146,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "_str_from_thing": {
            "name": "_str_from_thing",
            "location": 150,
            "return": [],
            "arguments": {
                "thing": []
            }
        },
        "_char_from_bool": {
            "name": "_char_from_bool",
            "location": 154,
            "return": [],
            "arguments": {
                "b": []
            }
        },
        "_char_from_ascii": {
            "name": "_char_from_ascii",
            "location": 160,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "_char_from_float": {
            "name": "_char_from_float",
            "location": 164,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "_all_chars": {
            "name": "_all_chars",
            "location": 168,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "instructions": {
            "name": "instructions",
            "location": 172,
            "return": [],
            "arguments": {
                "type_library": []
            }
        }
    },
    "pyshgp-master/pyshgp/push/instructions/vector.py": {
        "concat": {
            "name": "concat",
            "location": 18,
            "return": [],
            "arguments": {
                "v1": [],
                "v2": []
            }
        },
        "conj": {
            "name": "conj",
            "location": 22,
            "return": [],
            "arguments": {
                "v1": [],
                "el": []
            }
        },
        "take": {
            "name": "take",
            "location": 26,
            "return": [],
            "arguments": {
                "v1": [],
                "n": []
            }
        },
        "subvec": {
            "name": "subvec",
            "location": 30,
            "return": [],
            "arguments": {
                "v1": [],
                "start": [],
                "end": []
            }
        },
        "first": {
            "name": "first",
            "location": 37,
            "return": [],
            "arguments": {
                "v1": []
            }
        },
        "last": {
            "name": "last",
            "location": 43,
            "return": [],
            "arguments": {
                "v1": []
            }
        },
        "nth": {
            "name": "nth",
            "location": 49,
            "return": [],
            "arguments": {
                "v1": [],
                "idx": []
            }
        },
        "rest": {
            "name": "rest",
            "location": 55,
            "return": [],
            "arguments": {
                "v1": []
            }
        },
        "but_last": {
            "name": "but_last",
            "location": 59,
            "return": [],
            "arguments": {
                "v1": []
            }
        },
        "length": {
            "name": "length",
            "location": 63,
            "return": [],
            "arguments": {
                "v1": []
            }
        },
        "reverse": {
            "name": "reverse",
            "location": 67,
            "return": [],
            "arguments": {
                "v1": []
            }
        },
        "push_all": {
            "name": "push_all",
            "location": 71,
            "return": [],
            "arguments": {
                "v1": []
            }
        },
        "empty_vector": {
            "name": "empty_vector",
            "location": 75,
            "return": [],
            "arguments": {
                "v1": []
            }
        },
        "contains": {
            "name": "contains",
            "location": 79,
            "return": [],
            "arguments": {
                "v1": [],
                "el": []
            }
        },
        "index_of": {
            "name": "index_of",
            "location": 83,
            "return": [],
            "arguments": {
                "v1": [],
                "el": []
            }
        },
        "occurrences_of": {
            "name": "occurrences_of",
            "location": 90,
            "return": [],
            "arguments": {
                "v1": [],
                "el": []
            }
        },
        "set_nth": {
            "name": "set_nth",
            "location": 94,
            "return": [],
            "arguments": {
                "v1": [],
                "idx": [],
                "el": []
            }
        },
        "replace": {
            "name": "replace",
            "location": 100,
            "return": [],
            "arguments": {
                "v1": [],
                "old": [],
                "new": []
            }
        },
        "replace_first": {
            "name": "replace_first",
            "location": 104,
            "return": [],
            "arguments": {
                "v1": [],
                "old": [],
                "new": []
            }
        },
        "remove": {
            "name": "remove",
            "location": 112,
            "return": [],
            "arguments": {
                "v1": [],
                "el": []
            }
        },
        "iterate": {
            "name": "iterate",
            "location": 116,
            "return": [],
            "arguments": {
                "state": []
            }
        },
        "instructions": {
            "name": "instructions",
            "location": 137,
            "return": [],
            "arguments": {
                "type_library": []
            }
        }
    },
    "pyshgp-master/pyshgp/push/instructions/__init__.py": {
        "_supported": {
            "name": "_supported",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "instructions": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "supported_stacks": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "generic_instructions": {
            "name": "generic_instructions",
            "location": 18,
            "return": [
                "Union[int, slice]",
                "Sequence[str]",
                "Callable",
                "int",
                "List[Tuple[float, str]]",
                "bool"
            ],
            "arguments": {
                "type_library": [
                    "pyshgp.push.type_library.PushTypeLibrary",
                    "str",
                    "bool"
                ]
            }
        },
        "core_instructions": {
            "name": "core_instructions",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "type_library": []
            }
        }
    },
    "pyshgp-master/tests/conftest.py": {
        "push_config": {
            "name": "push_config",
            "location": 20,
            "return": [
                "dict",
                "Dict[str, Any]",
                "app.config.MQConfig",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "core_type_lib": {
            "name": "core_type_lib",
            "location": 25,
            "return": [
                "mypy.types.Type",
                "Optional[str]",
                "str"
            ],
            "arguments": {}
        },
        "instr_set": {
            "name": "instr_set",
            "location": 30,
            "return": [
                "Sequence",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "atoms": {
            "name": "atoms",
            "location": 35,
            "return": [
                "BaseException",
                "mypy.types.Type",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "instr_set": [
                    "int"
                ]
            }
        },
        "state": {
            "name": "state",
            "location": 48,
            "return": [
                "bool",
                "Tuple[str]",
                "str",
                "int"
            ],
            "arguments": {
                "push_config": [
                    "config.RunningConfig",
                    "sphinx.config.Config",
                    "dict",
                    "cmk.base.config.HostConfig"
                ]
            }
        },
        "interpreter": {
            "name": "interpreter",
            "location": 53,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "simple_genome": {
            "name": "simple_genome",
            "location": 58,
            "return": [
                "Optional[int]",
                "float",
                "str",
                "carbonize.types.Km"
            ],
            "arguments": {
                "atoms": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "simple_program_signature": {
            "name": "simple_program_signature",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "push_config": [
                    "trinity.config.ChainConfig"
                ]
            }
        },
        "simple_program": {
            "name": "simple_program",
            "location": 68,
            "return": [
                "str",
                "Tuple[Set[str], Set[str]]",
                "tuple"
            ],
            "arguments": {
                "simple_genome": [
                    "str",
                    "bytes",
                    "List[str]",
                    "Set[Tuple[str, str]]",
                    "Optional[str]"
                ],
                "simple_program_signature": [
                    "str",
                    "bytes",
                    "List[str]",
                    "Set[Tuple[str, str]]",
                    "Optional[str]"
                ]
            }
        },
        "simple_individual": {
            "name": "simple_individual",
            "location": 73,
            "return": [
                "int",
                "List[dict]",
                "str"
            ],
            "arguments": {
                "simple_genome": [
                    "int",
                    "bool",
                    "Optional[List[str]]"
                ],
                "simple_program_signature": [
                    "int",
                    "bool",
                    "Optional[List[str]]"
                ]
            }
        },
        "simple_gene_spawner": {
            "name": "simple_gene_spawner",
            "location": 78,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "instr_set": [
                    "list",
                    "Union[str, List[str]]",
                    "Mapping[starfish.types.Axes, Union[int, slice]]",
                    "List[str]",
                    "List[Tuple[str, int]]"
                ]
            }
        },
        "point_cls": {
            "name": "point_cls",
            "location": 110,
            "return": [
                "mypy.types.Type",
                "tuple",
                "Tuple[str, str, str]"
            ],
            "arguments": {}
        },
        "point_type": {
            "name": "point_type",
            "location": 115,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {}
        },
        "point_distance": {
            "name": "point_distance",
            "location": 119,
            "return": [
                "float"
            ],
            "arguments": {
                "p1": [
                    "float",
                    "pygame.math.Vector2",
                    "int"
                ],
                "p2": [
                    "float",
                    "pygame.math.Vector2",
                    "int"
                ]
            }
        },
        "point_from_floats": {
            "name": "point_from_floats",
            "location": 125,
            "return": [
                "str",
                "Union[str, Dict]"
            ],
            "arguments": {
                "f1": [
                    "Callable[[int], float]",
                    "List[int]",
                    "IO[str]",
                    "str"
                ],
                "f2": [
                    "Callable[[int], float]",
                    "List[int]",
                    "IO[str]",
                    "str"
                ]
            }
        },
        "point_instructions": {
            "name": "point_instructions",
            "location": 130,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "point_type_library": {
            "name": "point_type_library",
            "location": 138,
            "return": [
                "mypy.types.Type",
                "Optional[str]"
            ],
            "arguments": {
                "point_type": [
                    "str",
                    "bool",
                    "types.TracebackType",
                    "mypy.types.FunctionLike",
                    "BaseException"
                ]
            }
        },
        "point_instr_set": {
            "name": "point_instr_set",
            "location": 147,
            "return": [
                "bool",
                "Union[str, Dict]",
                "Optional[mypy.types.Type]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "point_type_library": [
                    "Type"
                ],
                "point_instructions": [
                    "Type"
                ]
            }
        },
        "Point.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ],
                "y": [
                    "int",
                    "Tuple[int, int]",
                    "bool",
                    "str"
                ]
            }
        },
        "Point.__eq__": {
            "name": "__eq__",
            "location": 93,
            "return": [
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float"
                ]
            }
        },
        "PointType.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PointType.coerce": {
            "name": "coerce",
            "location": 105,
            "return": [
                "int",
                "Optional[int]",
                "str",
                "float",
                "List[int]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "Union[int, str]",
                    "Optional[Union[int, float]]",
                    "str"
                ]
            }
        }
    },
    "pyshgp-master/tests/support.py": {
        "_deserialize_atoms": {
            "name": "_deserialize_atoms",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "lst": [
                    "str"
                ],
                "instr_set": []
            }
        },
        "load_code": {
            "name": "load_code",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Set[str]",
                    "int"
                ],
                "interpreter": [
                    "str",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "get_program": {
            "name": "get_program",
            "location": 42,
            "return": [
                "Union[str, List[str]]",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict",
                    "Union[str, int]"
                ],
                "sig": [
                    "pyshgp.push.program.Program.Signature",
                    "str",
                    "bytes",
                    "int"
                ],
                "interpreter": [
                    "str",
                    "dict",
                    "Union[str, int]"
                ]
            }
        },
        "load_genome": {
            "name": "load_genome",
            "location": 47,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Set[str]",
                    "int"
                ],
                "interpreter": [
                    "str",
                    "List[str]",
                    "dict"
                ]
            }
        }
    },
    "pyshgp-master/tests/test_utils.py": {
        "test_instantiate_using_exact": {
            "name": "test_instantiate_using_exact",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_instantiate_using_extra": {
            "name": "test_instantiate_using_extra",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_instantiate_using_insufficient": {
            "name": "test_instantiate_using_insufficient",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_instantiate_using_optional": {
            "name": "test_instantiate_using_optional",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Pair.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "b": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "ThisMaybeThat.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "this": [
                    "float",
                    "int"
                ],
                "that": [
                    "float",
                    "int"
                ]
            }
        }
    },
    "pyshgp-master/tests/test_validation.py": {
        "test_check_1d_on_1d": {
            "name": "test_check_1d_on_1d",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_check_1d_on_dirty_1d": {
            "name": "test_check_1d_on_dirty_1d",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_check_1d_on_2d": {
            "name": "test_check_1d_on_2d",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_check_2d_on_1d": {
            "name": "test_check_2d_on_1d",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_check_2d_on_2d": {
            "name": "test_check_2d_on_2d",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_check_2d_on_3d": {
            "name": "test_check_2d_on_3d",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_check_column_types": {
            "name": "test_check_column_types",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_check_num_columns_a": {
            "name": "test_check_num_columns_a",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_check_num_columns_b": {
            "name": "test_check_num_columns_b",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pyshgp-master/tests/__init__.py": {},
    "pyshgp-master/tests/gp/test_estimator.py": {
        "simple_test_spawner": {
            "name": "simple_test_spawner",
            "location": 20,
            "return": [
                "int",
                "str",
                "Dict[str, int]"
            ],
            "arguments": {}
        },
        "run_ga_on_odd_test": {
            "name": "run_ga_on_odd_test",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "spawner": [
                    "float",
                    "int",
                    "str"
                ],
                "parallelism": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "test_ga": {
            "name": "test_ga",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "simple_test_spawner": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "point_distance": {
            "name": "point_distance",
            "location": 62,
            "return": [
                "float",
                "numpy.ndarray"
            ],
            "arguments": {
                "p1": [
                    "float",
                    "pygame.math.Vector2",
                    "int"
                ],
                "p2": [
                    "float",
                    "pygame.math.Vector2",
                    "int"
                ]
            }
        },
        "test_estimator_with_custom_types": {
            "name": "test_estimator_with_custom_types",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "point_cls": [
                    "str",
                    "int"
                ],
                "point_instr_set": [
                    "str",
                    "Iterable[Union[Any, int]]",
                    "Optional[float]",
                    "Optional[str]",
                    "numpy.ndarray"
                ]
            }
        },
        "test_estimator_with_pandas": {
            "name": "test_estimator_with_pandas",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "simple_test_spawner": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "pyshgp-master/tests/gp/test_evaluation.py": {
        "test_levenshtein_distance_str": {
            "name": "test_levenshtein_distance_str",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_levenshtein_distance_seq": {
            "name": "test_levenshtein_distance_seq",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestDatasetEvaluator.test_default_error_function": {
            "name": "test_default_error_function",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDatasetEvaluator.test_dataset_evaluate_simple": {
            "name": "test_dataset_evaluate_simple",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "simple_program": [
                    "bool"
                ]
            }
        },
        "TestDatasetEvaluator.test_data_evaluator_simple_pandas": {
            "name": "test_data_evaluator_simple_pandas",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "simple_program": [
                    "Union[List, Dict]"
                ]
            }
        },
        "TestFunctionEvaluator.test_function_evaluate": {
            "name": "test_function_evaluate",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "simple_program": []
            }
        }
    },
    "pyshgp-master/tests/gp/test_genome.py": {
        "test_opener": {
            "name": "test_opener",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test__has_opener": {
            "name": "test__has_opener",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestGenome.test_genome_bad_init": {
            "name": "test_genome_bad_init",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "atoms": []
            }
        },
        "TestGenome.test_missing_close_genome_to_codeblock": {
            "name": "test_missing_close_genome_to_codeblock",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "atoms": []
            }
        },
        "TestGenome.test_extra_close_genome_to_codeblock": {
            "name": "test_extra_close_genome_to_codeblock",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "atoms": []
            }
        },
        "TestGenome.test_empty_genome_to_codeblock": {
            "name": "test_empty_genome_to_codeblock",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGeneSpawner.test_random_instruction": {
            "name": "test_random_instruction",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "simple_gene_spawner": []
            }
        },
        "TestGeneSpawner.test_random_literal": {
            "name": "test_random_literal",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "simple_gene_spawner": []
            }
        },
        "TestGeneSpawner.test_random_erc": {
            "name": "test_random_erc",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "simple_gene_spawner": []
            }
        },
        "TestGeneSpawner.test_random_gene": {
            "name": "test_random_gene",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "simple_gene_spawner": []
            }
        },
        "TestGeneSpawner.test_spawn_genome": {
            "name": "test_spawn_genome",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "simple_gene_spawner": [
                    "str",
                    "float"
                ]
            }
        },
        "TestGeneSpawner.test_spawn_var_length_genome": {
            "name": "test_spawn_var_length_genome",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "simple_gene_spawner": []
            }
        },
        "TestGenomeSimplifier.test_simplify_no_change": {
            "name": "test_simplify_no_change",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "simple_individual": []
            }
        },
        "TestGenomeSimplifier.test_simplify": {
            "name": "test_simplify",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "simple_individual": [
                    "str",
                    "float"
                ],
                "atoms": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "pyshgp-master/tests/gp/test_individual.py": {
        "simple_genome": {
            "name": "simple_genome",
            "location": 10,
            "return": [
                "bool",
                "Optional[int]",
                "int",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "atoms": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "unevaluated_individual": {
            "name": "unevaluated_individual",
            "location": 15,
            "return": [
                "int",
                "List[dict]",
                "str"
            ],
            "arguments": {
                "simple_genome": [
                    "int",
                    "bool",
                    "Optional[List[str]]",
                    "numpy.array"
                ],
                "simple_program_signature": [
                    "int",
                    "bool",
                    "Optional[List[str]]",
                    "numpy.array"
                ]
            }
        },
        "TestIndividual.test_get_program": {
            "name": "test_get_program",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "unevaluated_individual": [
                    "bool",
                    "str",
                    "Dict[str, float]",
                    "Iterable[numpy.dtype]"
                ]
            }
        },
        "TestIndividual.test_set_error_vector": {
            "name": "test_set_error_vector",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "unevaluated_individual": [
                    "str"
                ]
            }
        },
        "TestIndividual.test_set_error_vector_w_inf": {
            "name": "test_set_error_vector_w_inf",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "unevaluated_individual": []
            }
        },
        "TestIndividual.test_set_total_error": {
            "name": "test_set_total_error",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "unevaluated_individual": []
            }
        }
    },
    "pyshgp-master/tests/gp/test_population.py": {
        "simple_individuals": {
            "name": "simple_individuals",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "atoms": [
                    "str",
                    "dict",
                    "bool"
                ],
                "push_config": [
                    "str",
                    "int"
                ]
            }
        },
        "unevaluated_pop": {
            "name": "unevaluated_pop",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "simple_individuals": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "partially_evaluated_pop": {
            "name": "partially_evaluated_pop",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "simple_individuals": [
                    "numpy.ndarray",
                    "list",
                    "float"
                ]
            }
        },
        "evaluated_pop": {
            "name": "evaluated_pop",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "simple_individuals": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestPopulation.test_unevaluated_population_len": {
            "name": "test_unevaluated_population_len",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "unevaluated_pop": [
                    "str",
                    "float"
                ]
            }
        },
        "TestPopulation.test_evaluated_population_len": {
            "name": "test_evaluated_population_len",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "evaluated_pop": [
                    "str",
                    "float"
                ]
            }
        },
        "TestPopulation.test_partially_evaluated_population_len": {
            "name": "test_partially_evaluated_population_len",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "partially_evaluated_pop": [
                    "str",
                    "float"
                ]
            }
        },
        "TestPopulation.test_empty_population_len": {
            "name": "test_empty_population_len",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPopulation.test_partially_evaluated_population_nth": {
            "name": "test_partially_evaluated_population_nth",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "partially_evaluated_pop": [
                    "numpy.ndarray"
                ]
            }
        },
        "TestPopulation.test_add_unevaluated": {
            "name": "test_add_unevaluated",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "partially_evaluated_pop": [
                    "Sequence[str]",
                    "List[Tuple[float, float]]",
                    "str"
                ],
                "simple_program_signature": [
                    "str",
                    "Sequence[Sequence[str]]",
                    "Sequence",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestPopulation.test_add_evaluated": {
            "name": "test_add_evaluated",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "partially_evaluated_pop": [
                    "str",
                    "Iterable[str]",
                    "float",
                    "Iterable[T]"
                ],
                "simple_program_signature": [
                    "int",
                    "str"
                ]
            }
        },
        "TestPopulation.test_best": {
            "name": "test_best",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "partially_evaluated_pop": [
                    "str"
                ],
                "simple_program_signature": [
                    "Callable[[str], bool]",
                    "bool"
                ]
            }
        },
        "TestPopulation.test_best_n": {
            "name": "test_best_n",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "partially_evaluated_pop": [
                    "Iterable[Any]",
                    "str"
                ]
            }
        },
        "TestPopulation.test_evaluated_population": {
            "name": "test_evaluated_population",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "unevaluated_pop": []
            }
        },
        "TestPopulation.test__all_error_vectors": {
            "name": "test__all_error_vectors",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "partially_evaluated_pop": [
                    "int",
                    "BaseException"
                ]
            }
        },
        "TestPopulation.test__all_total_errors": {
            "name": "test__all_total_errors",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "partially_evaluated_pop": [
                    "int"
                ]
            }
        },
        "TestPopulation.test_median_error": {
            "name": "test_median_error",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "partially_evaluated_pop": [
                    "Type"
                ]
            }
        },
        "TestPopulation.test_median_error_empty_pop": {
            "name": "test_median_error_empty_pop",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPopulation.test_error_diversity": {
            "name": "test_error_diversity",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "partially_evaluated_pop": [
                    "Type"
                ]
            }
        },
        "TestPopulation.test_genome_diversity": {
            "name": "test_genome_diversity",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "partially_evaluated_pop": [
                    "str",
                    "float"
                ]
            }
        },
        "TestPopulation.test_genome_diversity_empty_pop": {
            "name": "test_genome_diversity_empty_pop",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyshgp-master/tests/gp/test_search.py": {
        "empty_evaluator": {
            "name": "empty_evaluator",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "TestSearchConfiguration.test_create_config_strs": {
            "name": "test_create_config_strs",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "empty_evaluator": [
                    "blurr.core.evaluation.EvaluationContext"
                ],
                "simple_gene_spawner": [
                    "blurr.core.evaluation.EvaluationContext"
                ],
                "simple_program_signature": [
                    "blurr.core.evaluation.EvaluationContext"
                ]
            }
        }
    },
    "pyshgp-master/tests/gp/test_selection.py": {
        "population": {
            "name": "population",
            "location": 12,
            "return": [
                "float",
                "str",
                "List[List[int]]",
                "bool",
                "List[dict]"
            ],
            "arguments": {
                "atoms": [
                    "Dict[str, Any]",
                    "int",
                    "bool"
                ],
                "push_config": [
                    "str",
                    "int"
                ]
            }
        },
        "test_fitness_proportionate": {
            "name": "test_fitness_proportionate",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "population": [
                    "int",
                    "str",
                    "numpy.ndarray"
                ]
            }
        },
        "test_tournament": {
            "name": "test_tournament",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "population": [
                    "Mapping[str, Any]",
                    "str"
                ]
            }
        },
        "test_lexicase": {
            "name": "test_lexicase",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "population": [
                    "Mapping[str, Any]",
                    "str"
                ]
            }
        },
        "test_epsilon_lexicase": {
            "name": "test_epsilon_lexicase",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "population": [
                    "Mapping[str, Any]",
                    "str"
                ]
            }
        },
        "test_elite": {
            "name": "test_elite",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "population": [
                    "str",
                    "Mapping[str, Any]",
                    "bool"
                ]
            }
        }
    },
    "pyshgp-master/tests/gp/test_translate_validation.py": {
        "check_translation": {
            "name": "check_translation",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "program_name": [
                    "str"
                ],
                "interpreter": [
                    "str"
                ]
            }
        },
        "check_unary_fn_translation": {
            "name": "check_unary_fn_translation",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "program_name": [
                    "str",
                    "type",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "test_genome_relu_1": {
            "name": "test_genome_relu_1",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_genome_relu_2": {
            "name": "test_genome_relu_2",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_genome_fibonacci": {
            "name": "test_genome_fibonacci",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_genome_rswn": {
            "name": "test_genome_rswn",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_genome_point_dist": {
            "name": "test_genome_point_dist",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "point_instr_set": [
                    "cli_ui.tests.MessageRecorder",
                    "str"
                ]
            }
        }
    },
    "pyshgp-master/tests/gp/__init__.py": {},
    "pyshgp-master/tests/push/instruction_test_specs.py": {},
    "pyshgp-master/tests/push/test_atoms.py": {
        "TestCodeBlock.test_with_code_inserted_at_point": {
            "name": "test_with_code_inserted_at_point",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyshgp-master/tests/push/test_core_instructions.py": {
        "test_instructions": {
            "name": "test_instructions",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "core_type_lib": [
                    "str"
                ],
                "push_config": [
                    "str"
                ]
            }
        },
        "test_inputs": {
            "name": "test_inputs",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "core_type_lib": [
                    "Optional[Dict]",
                    "str"
                ],
                "push_config": [
                    "Optional[Dict]",
                    "str"
                ]
            }
        }
    },
    "pyshgp-master/tests/push/test_instruction_set.py": {
        "all_core_instructions": {
            "name": "all_core_instructions",
            "location": 9,
            "return": [
                "int",
                "List[str]",
                "Coroutine"
            ],
            "arguments": {
                "core_type_lib": [
                    "str",
                    "Optional[str]",
                    "pyshgp.push.interpreter.PushInterpreter",
                    "int",
                    "List[str]"
                ]
            }
        },
        "TestInstructionSet.test_register": {
            "name": "test_register",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "instr_set": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestInstructionSet.test_register_list": {
            "name": "test_register_list",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "instr_set": [
                    "str",
                    "list",
                    "bool"
                ]
            }
        },
        "TestInstructionSet.test_register_core_by_stack": {
            "name": "test_register_core_by_stack",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstructionSet.test_register_core_by_stack_with_exclude": {
            "name": "test_register_core_by_stack_with_exclude",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "core_type_lib": [
                    "Type[Any]"
                ]
            }
        },
        "TestInstructionSet.test_register_core_by_name": {
            "name": "test_register_core_by_name",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInstructionSet.test_register_core": {
            "name": "test_register_core",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "all_core_instructions": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestInstructionSet.test_unregister": {
            "name": "test_unregister",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "instr_set": [
                    "str",
                    "Tuple[int, str]",
                    "Set[T]",
                    "Sequence[Sequence[Any]]",
                    "AbstractSet[T]"
                ]
            }
        },
        "TestInstructionSet.test_required_stacks": {
            "name": "test_required_stacks",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "instr_set": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        }
    },
    "pyshgp-master/tests/push/test_program.py": {
        "TestPrettyString.test_relu_1": {
            "name": "test_relu_1",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "push_config": [
                    "int"
                ],
                "interpreter": [
                    "IO[str]"
                ]
            }
        },
        "TestPrettyString.test_relu_2": {
            "name": "test_relu_2",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "push_config": [
                    "int"
                ],
                "interpreter": [
                    "IO[str]"
                ]
            }
        },
        "TestPrettyString.test_fibonacci": {
            "name": "test_fibonacci",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "push_config": [
                    "int"
                ],
                "interpreter": [
                    "IO[str]"
                ]
            }
        },
        "TestPrettyString.test_replace_space_with_newline": {
            "name": "test_replace_space_with_newline",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "push_config": [
                    "int"
                ],
                "interpreter": [
                    "IO[str]"
                ]
            }
        },
        "TestPrettyString.test_point_distance": {
            "name": "test_point_distance",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "push_config": [
                    "int"
                ],
                "point_instr_set": [
                    "pyshgp.push.instruction_seInstructionSet"
                ]
            }
        },
        "TestPrettyString.test_infinite_growth": {
            "name": "test_infinite_growth",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "push_config": [
                    "int"
                ],
                "interpreter": [
                    "IO[str]"
                ]
            }
        }
    },
    "pyshgp-master/tests/push/test_push_validation.py": {
        "check_program": {
            "name": "check_program",
            "location": 9,
            "return": [
                "Callable"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Dict[str, str]",
                    "int"
                ],
                "inputs": [
                    "list",
                    "str",
                    "bool",
                    "dict"
                ],
                "outputs": [
                    "list",
                    "str",
                    "bool",
                    "dict"
                ],
                "sig": [
                    "str",
                    "Dict[str, str]",
                    "int"
                ],
                "iset": [
                    "pyshgp.push.instruction_seInstructionSet",
                    "str",
                    "int",
                    "Optional[str]",
                    "Dict[int, bool]",
                    "bool"
                ]
            }
        },
        "test_program_relu_1": {
            "name": "test_program_relu_1",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "push_config": [],
                "instr_set": [
                    "pyshgp.push.instruction_seInstructionSet",
                    "Callable[[Any, Any], Any]",
                    "int"
                ]
            }
        },
        "test_program_relu_2": {
            "name": "test_program_relu_2",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "push_config": [],
                "instr_set": [
                    "pyshgp.push.instruction_seInstructionSet",
                    "Callable[[Any, Any], Any]",
                    "int"
                ]
            }
        },
        "test_program_fibonacci": {
            "name": "test_program_fibonacci",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "push_config": [],
                "instr_set": [
                    "Callable"
                ]
            }
        },
        "test_program_rswn": {
            "name": "test_program_rswn",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "push_config": [],
                "instr_set": [
                    "Callable"
                ]
            }
        },
        "test_program_point_dist": {
            "name": "test_program_point_dist",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "push_config": [
                    "int"
                ],
                "point_instr_set": [
                    "pyshgp.push.instruction_seInstructionSet",
                    "backup.config.Config",
                    "Optional[List[str]]"
                ]
            }
        },
        "test_interpreter_constraints": {
            "name": "test_interpreter_constraints",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "push_config": [
                    "Callable"
                ],
                "instr_set": [
                    "pyshgp.push.instruction_seInstructionSet",
                    "tests.conftesWorker",
                    "str"
                ]
            }
        }
    },
    "pyshgp-master/tests/push/test_stack.py": {
        "int_stack": {
            "name": "int_stack",
            "location": 10,
            "return": [
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "atoms": [
                    "Dict[str, Any]",
                    "int",
                    "bool"
                ],
                "push_config": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "str_stack": {
            "name": "str_stack",
            "location": 15,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "Callable",
                "str"
            ],
            "arguments": {
                "atoms": [
                    "bool",
                    "Dict[str, Any]",
                    "int"
                ],
                "push_config": [
                    "str",
                    "raiden.utils.Address"
                ]
            }
        },
        "TestPushStack.test_push": {
            "name": "test_push",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "int_stack": [
                    "pyshgp.push.stack.PushStack",
                    "str",
                    "int"
                ]
            }
        },
        "TestPushStack.test_push_wrong_type": {
            "name": "test_push_wrong_type",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "int_stack": [
                    "pyshgp.push.stack.PushStack",
                    "str",
                    "int"
                ]
            }
        },
        "TestPushStack.test_nth": {
            "name": "test_nth",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "int_stack": [
                    "str",
                    "float"
                ]
            }
        },
        "TestPushStack.test_nth_oob": {
            "name": "test_nth_oob",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "int_stack": [
                    "pyshgp.push.stack.PushStack",
                    "str"
                ]
            }
        },
        "TestPushStack.test_top": {
            "name": "test_top",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "int_stack": [
                    "str",
                    "float"
                ]
            }
        },
        "TestPushStack.test_top_of_empty": {
            "name": "test_top_of_empty",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "int_stack": [
                    "pyshgp.push.stack.PushStack",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestPushStack.test_insert": {
            "name": "test_insert",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "str_stack": [
                    "pyshgp.push.stack.PushStack",
                    "float",
                    "bytes",
                    "str"
                ]
            }
        },
        "TestPushStack.test_insert_oob": {
            "name": "test_insert_oob",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "str_stack": [
                    "pyshgp.push.stack.PushStack",
                    "float",
                    "bytes",
                    "str"
                ]
            }
        },
        "TestPushStack.test_set_nth": {
            "name": "test_set_nth",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "str_stack": [
                    "pyshgp.push.stack.PushStack",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "TestPushStack.test_set_nth_oob": {
            "name": "test_set_nth_oob",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "str_stack": [
                    "pyshgp.push.stack.PushStack",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestPushStack.test_flush": {
            "name": "test_flush",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "int_stack": [
                    "pyshgp.push.stack.PushStack",
                    "Callable"
                ]
            }
        },
        "TestPushStack.test_large_str": {
            "name": "test_large_str",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "str_stack": [
                    "pyshgp.push.stack.PushStack",
                    "str",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "pyshgp-master/tests/push/test_state.py": {
        "TestPushState.test_size": {
            "name": "test_size",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state": [
                    "List[int]",
                    "Tuple[int]"
                ]
            }
        },
        "TestPushState.test_from_dict": {
            "name": "test_from_dict",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "atoms": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "Optional[Any]"
                ],
                "core_type_lib": [
                    "Callable[[Any, Any], Any]",
                    "cmk.utils.type_defs.HostName"
                ],
                "push_config": [
                    "Callable[[Any, Any], Any]",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "TestPushState.test_load_program": {
            "name": "test_load_program",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state": [
                    "int",
                    "str",
                    "IO[str]",
                    "List[bytes]",
                    "dict"
                ],
                "atoms": [
                    "Callable",
                    "Dict[\"core.Edge\", \"state.State\"]"
                ]
            }
        },
        "TestPushState.test_observe_stacks": {
            "name": "test_observe_stacks",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "raiden.utils.TokenAmount"
                ]
            }
        },
        "TestPushState.test_observe_stacks_empty": {
            "name": "test_observe_stacks_empty",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "raiden.utils.TokenAmount"
                ]
            }
        },
        "TestPushState.test_observe_stacks_stdout": {
            "name": "test_observe_stacks_stdout",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "raiden.utils.TokenAmount"
                ]
            }
        },
        "TestPushState.test_pop_values": {
            "name": "test_pop_values",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state": [
                    "state.State"
                ]
            }
        },
        "TestPushState.test_pop_values_empty": {
            "name": "test_pop_values_empty",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "raiden.utils.TokenAmount"
                ]
            }
        },
        "TestPushState.test_push_values": {
            "name": "test_push_values",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Dict[Hashable, Iterable[Hashable]]",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.Address"
                ]
            }
        }
    },
    "pyshgp-master/tests/push/test_types.py": {
        "TestPushType.test_is_instance": {
            "name": "test_is_instance",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPushType.test_default_coerce": {
            "name": "test_default_coerce",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPushType.test_custom_coerce": {
            "name": "test_custom_coerce",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "point_cls": [
                    "str",
                    "utils.types.Vec3D",
                    "types.ModuleType"
                ],
                "point_type": [
                    "str",
                    "utils.types.Vec3D",
                    "types.ModuleType"
                ]
            }
        },
        "TestChar.test_empty_char": {
            "name": "test_empty_char",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChar.test_long_char": {
            "name": "test_long_char",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyshgp-master/tests/push/test_type_library.py": {
        "test_infer_literal": {
            "name": "test_infer_literal",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestPushTypeLibrary.test_register": {
            "name": "test_register",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPushTypeLibrary.test_create_and_register": {
            "name": "test_create_and_register",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPushTypeLibrary.test_register_duplicates": {
            "name": "test_register_duplicates",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPushTypeLibrary.test_register_reserved": {
            "name": "test_register_reserved",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPushTypeLibrary.test_unregister": {
            "name": "test_unregister",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPushTypeLibrary.test_unregister_reserved": {
            "name": "test_unregister_reserved",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPushTypeLibrary.test_register_core": {
            "name": "test_register_core",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPushTypeLibrary.test_supported_stacks": {
            "name": "test_supported_stacks",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPushTypeLibrary.test_push_type_of": {
            "name": "test_push_type_of",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPushTypeLibrary.test_push_type_for_type": {
            "name": "test_push_type_for_type",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pyshgp-master/tests/push/__init__.py": {}
}
{
    "pytest-workflow-master/setup.py": {},
    "pytest-workflow-master/docs/conf.py": {},
    "pytest-workflow-master/src/pytest_workflow/content_tests.py": {
        "check_content": {
            "name": "check_content",
            "location": 35,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "strings": [
                    "list",
                    "Iterable[Tuple[Any, Any]]",
                    "List[T]"
                ],
                "text_lines": [
                    "Iterable[str]",
                    "int",
                    "bool",
                    "List[Dict]"
                ]
            }
        },
        "check_regex_content": {
            "name": "check_regex_content",
            "location": 67,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "patterns": [
                    "str",
                    "dict"
                ],
                "text_lines": [
                    "Iterable[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "ContentTestCollector.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "parent": [
                    "str",
                    "Optional[str]"
                ],
                "filepath": [
                    "str",
                    "pathlib.Path",
                    "int"
                ],
                "content_test": [
                    "str",
                    "Callable",
                    "Optional[Iterable]"
                ],
                "workflow": [
                    "Optional[str]",
                    "bool",
                    "Iterable[str]",
                    "Sequence",
                    "str"
                ],
                "content_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ContentTestCollector.find_strings": {
            "name": "find_strings",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentTestCollector.collect": {
            "name": "collect",
            "location": 160,
            "return": [
                "bool",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentTestItem.__init__": {
            "name": "__init__",
            "location": 214,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "string": [
                    "str",
                    "Optional[str]",
                    "int",
                    "List[str]"
                ],
                "should_contain": [
                    "Optional[str]",
                    "bool",
                    "Sequence"
                ],
                "regex": [
                    "Optional[str]",
                    "bool",
                    "Sequence"
                ],
                "content_name": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Union[Optional[str], Literal[Literal]]",
                    "bool"
                ]
            }
        },
        "ContentTestItem.runtest": {
            "name": "runtest",
            "location": 237,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ContentTestItem.repr_failure": {
            "name": "repr_failure",
            "location": 255,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "excinfo": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "style": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "pytest-workflow-master/src/pytest_workflow/file_tests.py": {
        "FileTestCollector.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "Optional[str]",
                    "Tuple[type]",
                    "Dict[str, Any]"
                ],
                "filetest": [
                    "str",
                    "pathlib.Path",
                    "List[str]",
                    "Optional[Dict]"
                ],
                "workflow": [
                    "Set[str]",
                    "int",
                    "Optional[Mapping]",
                    "Type['AbstractIntegrationConversation']",
                    "bool",
                    "str",
                    "Optional[List[Any]]"
                ]
            }
        },
        "FileTestCollector.collect": {
            "name": "collect",
            "location": 46,
            "return": [
                "bool",
                "List[str]",
                "allennlp.common.util.JsonDict",
                "Union[int, float, complex]",
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileExists.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "Optional[str]",
                    "Tuple[type]",
                    "Dict[str, Any]"
                ],
                "filepath": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "should_exist": [
                    "Set[str]",
                    "int",
                    "Optional[Mapping]",
                    "Type['AbstractIntegrationConversation']",
                    "bool",
                    "str",
                    "Optional[List[Any]]"
                ],
                "workflow": [
                    "Set[str]",
                    "int",
                    "Optional[Mapping]",
                    "Type['AbstractIntegrationConversation']",
                    "bool",
                    "str",
                    "Optional[List[Any]]"
                ]
            }
        },
        "FileExists.runtest": {
            "name": "runtest",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FileExists.repr_failure": {
            "name": "repr_failure",
            "location": 107,
            "return": [
                "str",
                "Optional[int]",
                "List[str]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "excinfo": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "style": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "FileMd5.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "Optional[str]",
                    "Tuple[type]",
                    "Dict[str, Any]"
                ],
                "filepath": [
                    "Set[str]",
                    "int",
                    "Optional[Mapping]",
                    "Type['AbstractIntegrationConversation']",
                    "bool",
                    "str",
                    "Optional[List[Any]]"
                ],
                "md5sum": [
                    "str",
                    "int",
                    "Optional[int]",
                    "bool"
                ],
                "workflow": [
                    "Set[str]",
                    "int",
                    "Optional[Mapping]",
                    "Type['AbstractIntegrationConversation']",
                    "bool",
                    "str",
                    "Optional[List[Any]]"
                ]
            }
        },
        "FileMd5.runtest": {
            "name": "runtest",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FileMd5.repr_failure": {
            "name": "repr_failure",
            "location": 140,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "excinfo": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "style": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "pytest-workflow-master/src/pytest_workflow/plugin.py": {
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "_pytesconfig.argparsing.Parser",
                    "argparse.ArgumentParser",
                    "Parser"
                ]
            }
        },
        "__pytest_workflow_cli": {
            "name": "__pytest_workflow_cli",
            "location": 103,
            "return": [
                "argparse._SubParsersAction",
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "pytest_collect_file": {
            "name": "pytest_collect_file",
            "location": 117,
            "return": [
                "str",
                "pathlib.Path",
                "List[str]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[str]",
                    "pathlib.Path"
                ],
                "parent": [
                    "str",
                    "norfs.fs.base.Path",
                    "Optional[str]",
                    "IO[Any]"
                ]
            }
        },
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "dict",
                    "_pytesconfig.Config",
                    "revlibs.connections.config.Config",
                    "pyramid.config.Configurator",
                    "tracim.config.CFG",
                    "Dict[str, Any]"
                ]
            }
        },
        "pytest_collection": {
            "name": "pytest_collection",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "get_workflow_names_from_workflow_marker": {
            "name": "get_workflow_names_from_workflow_marker",
            "location": 198,
            "return": [
                "List[Tuple[str, str, str]]",
                "str",
                "List[Optional[str]]",
                "MutableMapping[str, int]",
                "bool",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "marker": [
                    "Dict[int, Dict[int, Any]]",
                    "Dict[str, Union[str, bool]]",
                    "bool",
                    "Dict[str, str]",
                    "Dict[str, float]",
                    "denite.util.Candidates",
                    "Dict[int, str]",
                    "Mapping[int, str]",
                    "str"
                ]
            }
        },
        "pytest_generate_tests": {
            "name": "pytest_generate_tests",
            "location": 207,
            "return": [
                "str"
            ],
            "arguments": {
                "metafunc": [
                    "dict",
                    "str"
                ]
            }
        },
        "pytest_collection_modifyitems": {
            "name": "pytest_collection_modifyitems",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "_pytesconfig.Config",
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "Union[str, dict]",
                    "config.ConfigStorage"
                ],
                "items": [
                    "list",
                    "argparse.Namespace",
                    "dict",
                    "square.dtypes.Config",
                    "str"
                ]
            }
        },
        "pytest_runtestloop": {
            "name": "pytest_runtestloop",
            "location": 263,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "bool",
                    "str"
                ]
            }
        },
        "pytest_collectstart": {
            "name": "pytest_collectstart",
            "location": 270,
            "return": [
                ""
            ],
            "arguments": {
                "collector": [
                    "int",
                    "type",
                    "bytes"
                ]
            }
        },
        "pytest_sessionfinish": {
            "name": "pytest_sessionfinish",
            "location": 287,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "session": [
                    "str",
                    "pathlib.Path",
                    "Union[io.TextIO, str, pathlib.Path]",
                    "dict",
                    "Optional[str]"
                ],
                "exitstatus": [
                    "int",
                    "str"
                ]
            }
        },
        "YamlFile.collect": {
            "name": "collect",
            "location": 330,
            "return": [
                "Optional[str]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkflowTestsCollector.__init__": {
            "name": "__init__",
            "location": 350,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "workflow_test": [
                    "str",
                    "Type",
                    "bool",
                    "Optional[List[str]]",
                    "int"
                ],
                "parent": [
                    "int"
                ]
            }
        },
        "WorkflowTestsCollector.queue_workflow": {
            "name": "queue_workflow",
            "location": 357,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkflowTestsCollector.collect": {
            "name": "collect",
            "location": 417,
            "return": [
                "bool",
                "List[str]",
                "allennlp.common.util.JsonDict",
                "Union[int, float, complex]",
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExitCodeTest.__init__": {
            "name": "__init__",
            "location": 472,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str"
                ],
                "desired_exit_code": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ],
                "workflow": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "Sequence",
                    "Optional[int]"
                ]
            }
        },
        "ExitCodeTest.runtest": {
            "name": "runtest",
            "location": 480,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ExitCodeTest.repr_failure": {
            "name": "repr_failure",
            "location": 484,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "excinfo": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "style": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "__pytest_workflow_cli.ArgParser.addoption": {
            "name": "addoption",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pytest-workflow-master/src/pytest_workflow/schema.py": {
        "workflow_tests_from_schema": {
            "name": "workflow_tests_from_schema",
            "location": 34,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "schema": [
                    "Tuple[float, float, float]"
                ]
            }
        },
        "validate_schema": {
            "name": "validate_schema",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "instance": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "validate_schema.test_contains_concordance": {
            "name": "test_contains_concordance",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "dictionary": [
                    "str",
                    "Optional[Mapping[str, Any]]"
                ],
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "ContentTest.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contains": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "must_not_contain": [
                    "str",
                    "List[str]"
                ],
                "contains_regex": [
                    "str",
                    "List[str]"
                ],
                "must_not_contain_regex": [
                    "str"
                ]
            }
        },
        "FileTest.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Union[str, pathlib.Path]",
                    "Optional[pathlib.Path]",
                    "pathlib.Path",
                    "str",
                    "_compaUnion[_compapathlib.Path, str]"
                ],
                "md5sum": [
                    "bool",
                    "pathlib.Path",
                    "List[str]",
                    "str",
                    "dict"
                ],
                "should_exist": [
                    "bool",
                    "pathlib.Path",
                    "List[str]",
                    "str",
                    "dict"
                ],
                "contains": [
                    "Optional[List[str]]",
                    "str"
                ],
                "must_not_contain": [
                    "Optional[List[str]]",
                    "str"
                ],
                "contains_regex": [
                    "Optional[List[str]]",
                    "str"
                ],
                "must_not_contain_regex": [
                    "Optional[List[str]]",
                    "str"
                ]
            }
        },
        "WorkflowTest.__init__": {
            "name": "__init__",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[Sequence[Any]]",
                    "Optional[str]",
                    "int"
                ],
                "command": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "Mapping[str, Any]"
                ],
                "tags": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ],
                "exit_code": [
                    "int",
                    "bytes",
                    "Optional[str]",
                    "float",
                    "List[str]"
                ],
                "stdout": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "Mapping[str, Any]"
                ],
                "stderr": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "Mapping[str, Any]"
                ],
                "files": [
                    "bool",
                    "int",
                    "str",
                    "Optional[Set[str]]"
                ]
            }
        },
        "WorkflowTest.from_schema": {
            "name": "from_schema",
            "location": 179,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "cdp.util.T_JSON_DICT"
                ],
                "schema": [
                    "Dict[str, Any]",
                    "dict",
                    "cdp.util.T_JSON_DICT"
                ]
            }
        }
    },
    "pytest-workflow-master/src/pytest_workflow/util.py": {
        "replace_whitespace": {
            "name": "replace_whitespace",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str",
                    "Union[Dict[str, Any], List[Any]]",
                    "Union[Mapping[str, Any], str, None]"
                ],
                "replace_with": [
                    "str",
                    "Union[Dict[str, Any], List[Any]]",
                    "Union[Mapping[str, Any], str, None]"
                ]
            }
        },
        "is_in_dir": {
            "name": "is_in_dir",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "child": [
                    "str",
                    "Callable",
                    "Optional[str]"
                ],
                "parent": [
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "Dict[str, List]"
                ],
                "strict": [
                    "str"
                ]
            }
        },
        "_run_command": {
            "name": "_run_command",
            "location": 51,
            "return": [
                "str",
                "int",
                "Set[str]",
                "Mapping[str, int]",
                "bool",
                "\"Parameter\""
            ],
            "arguments": {}
        },
        "git_root": {
            "name": "git_root",
            "location": 61,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path",
                    "Iterable[str]",
                    "List[int]",
                    "os.PathLike",
                    "pathlib.PurePath"
                ]
            }
        },
        "git_ls_files": {
            "name": "git_ls_files",
            "location": 67,
            "return": [
                "str",
                "List[pathlib.Path]"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "_duplicate_tree": {
            "name": "_duplicate_tree",
            "location": 75,
            "return": [
                "typing.Iterator[typing.Tuple[builtins.str, builtins.str, builtins.bool]]"
            ],
            "arguments": {
                "src": [
                    "str"
                ],
                "dest": [
                    "str",
                    "Union[str, bytes]"
                ]
            }
        },
        "_duplicate_git_tree": {
            "name": "_duplicate_git_tree",
            "location": 92,
            "return": [
                "typing.Iterator[typing.Tuple[builtins.str, builtins.str, builtins.bool]]"
            ],
            "arguments": {
                "src": [
                    "str",
                    "pathlib.Path"
                ],
                "dest": [
                    "str"
                ]
            }
        },
        "duplicate_tree": {
            "name": "duplicate_tree",
            "location": 128,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "src": [
                    "pathlib.Path",
                    "str",
                    "dict"
                ],
                "dest": [
                    "str",
                    "BinaryIO",
                    "Optional[str]"
                ],
                "symlink": [
                    "List[str]"
                ],
                "git_aware": [
                    "str",
                    "TextIO",
                    "int"
                ]
            }
        },
        "link_tree": {
            "name": "link_tree",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "src": [
                    "str"
                ],
                "dest": [
                    "str"
                ]
            }
        },
        "file_md5sum": {
            "name": "file_md5sum",
            "location": 176,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "bool",
                    "int",
                    "path.Path"
                ],
                "block_size": [
                    "pathlib.Path",
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "float",
                    "Optional[int]",
                    "bytes"
                ]
            }
        }
    },
    "pytest-workflow-master/src/pytest_workflow/workflow.py": {
        "Workflow.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "bool",
                    "Set[str]",
                    "Dict[str, 'LabwareDefinition']",
                    "Callable[[str], str]",
                    "Optional[str]"
                ],
                "cwd": [
                    "str",
                    "path.Path",
                    "Optional[str]",
                    "Optional[pathlib.Path]",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Workflow.start": {
            "name": "start",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Workflow.run": {
            "name": "run",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Workflow.wait": {
            "name": "wait",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "timeout_secs": [
                    "Optional[float]",
                    "Optional[int]",
                    "Optional[bool]",
                    "int",
                    "bool"
                ],
                "wait_interval_secs": [
                    "float",
                    "str",
                    "Optional[int]",
                    "Union[int, float]"
                ]
            }
        },
        "Workflow.stdout": {
            "name": "stdout",
            "location": 141,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Workflow.stderr": {
            "name": "stderr",
            "location": 147,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Workflow.exit_code": {
            "name": "exit_code",
            "location": 153,
            "return": [
                "str",
                "IO[Any]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkflowQueue.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkflowQueue.put": {
            "name": "put",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict",
                    "T",
                    "Dict[str, Any]"
                ],
                "block": [
                    "T",
                    "type",
                    "float"
                ],
                "timeout": [
                    "T",
                    "type",
                    "float"
                ]
            }
        },
        "WorkflowQueue.process": {
            "name": "process",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "number_of_threads": [
                    "int",
                    "str",
                    "Union[str, List[str]]",
                    "List[float]"
                ]
            }
        },
        "WorkflowQueue.worker": {
            "name": "worker",
            "location": 200,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pytest-workflow-master/src/pytest_workflow/__init__.py": {},
    "pytest-workflow-master/tests/conftest.py": {},
    "pytest-workflow-master/tests/test_content_functions.py": {
        "test_check_content_succeeding": {
            "name": "test_check_content_succeeding",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "contains_strings": [
                    "str",
                    "dict",
                    "list",
                    "Sequence[str]"
                ],
                "does_not_contain_strings": [
                    "str",
                    "dict",
                    "list",
                    "Sequence[str]"
                ]
            }
        },
        "test_check_regex_content_succeeding": {
            "name": "test_check_regex_content_succeeding",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "contains_regex": [
                    "List[str]",
                    "str"
                ],
                "does_not_contain_regex": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "test_multiple_finds_one_line": {
            "name": "test_multiple_finds_one_line",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pytest-workflow-master/tests/test_fail_messages.py": {
        "test_messages": {
            "name": "test_messages",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "test": [
                    "str"
                ],
                "message": [
                    "str"
                ],
                "testdir": []
            }
        }
    },
    "pytest-workflow-master/tests/test_miscellaneous_crashes.py": {
        "test_same_name_different_files": {
            "name": "test_same_name_different_files",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "testdir": []
            }
        }
    },
    "pytest-workflow-master/tests/test_multithreading.py": {
        "test_multithreaded": {
            "name": "test_multithreaded",
            "location": 39,
            "return": [],
            "arguments": {
                "threads": [],
                "testdir": []
            }
        }
    },
    "pytest-workflow-master/tests/test_schema.py": {
        "test_validate_schema": {
            "name": "test_validate_schema",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "yaml_path": [
                    "pathlib.Path"
                ]
            }
        },
        "test_workflowtest": {
            "name": "test_workflowtest",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_workflowtest_regex": {
            "name": "test_workflowtest_regex",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validate_schema_conflicting_keys": {
            "name": "test_validate_schema_conflicting_keys",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validate_schema_colliding_names": {
            "name": "test_validate_schema_colliding_names",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_no_empty_command": {
            "name": "test_no_empty_command",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_no_empty_name": {
            "name": "test_no_empty_name",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_validate_schema_contains_conflict": {
            "name": "test_validate_schema_contains_conflict",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "instance": [
                    "str",
                    "float"
                ]
            }
        },
        "test_workflow_tests_from_schema": {
            "name": "test_workflow_tests_from_schema",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_workflow_test_defaults": {
            "name": "test_workflow_test_defaults",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_filetest_defaults": {
            "name": "test_filetest_defaults",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_contenttest_with_contains": {
            "name": "test_contenttest_with_contains",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_contenttest_with_regex": {
            "name": "test_contenttest_with_regex",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_filetest_with_contains": {
            "name": "test_filetest_with_contains",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_filetest_with_regex": {
            "name": "test_filetest_with_regex",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pytest-workflow-master/tests/test_success_messages.py": {
        "succeeding_tests_output": {
            "name": "succeeding_tests_output",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir_factory": [
                    "str",
                    "int",
                    "pathlib.Path",
                    "dict"
                ]
            }
        },
        "test_message_in_result": {
            "name": "test_message_in_result",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "message": [
                    "str",
                    "bool",
                    "int"
                ],
                "succeeding_tests_output": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "test_message_success_no_errors_or_fails": {
            "name": "test_message_success_no_errors_or_fails",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "succeeding_tests_output": [
                    "List[str]"
                ]
            }
        },
        "test_message_directory_kept_no_errors_or_fails": {
            "name": "test_message_directory_kept_no_errors_or_fails",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "testdir": [
                    "Dict[str, Sequence[str]]"
                ]
            }
        }
    },
    "pytest-workflow-master/tests/test_tags.py": {
        "test_name_tag_with_space": {
            "name": "test_name_tag_with_space",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "testdir": [
                    "str",
                    "IO[bytes]"
                ]
            }
        },
        "test_name_tag": {
            "name": "test_name_tag",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "testdir": [
                    "str",
                    "IO[bytes]"
                ]
            }
        },
        "test_category_tag": {
            "name": "test_category_tag",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "testdir": [
                    "str"
                ]
            }
        },
        "test_category_tag2": {
            "name": "test_category_tag2",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "testdir": [
                    "str"
                ]
            }
        }
    },
    "pytest-workflow-master/tests/test_temp_directory.py": {
        "test_directory_kept": {
            "name": "test_directory_kept",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "testdir": [
                    "path.Path"
                ]
            }
        },
        "test_directory_not_kept": {
            "name": "test_directory_not_kept",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "testdir": [
                    "path.Path",
                    "pathlib.Path"
                ]
            }
        },
        "test_basetemp_correct": {
            "name": "test_basetemp_correct",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "testdir": [
                    "path.Path",
                    "pathlib.Path"
                ]
            }
        },
        "test_basetemp_can_be_used_twice": {
            "name": "test_basetemp_can_be_used_twice",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "testdir": []
            }
        },
        "test_basetemp_will_be_created": {
            "name": "test_basetemp_will_be_created",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "testdir": [
                    "path.Path"
                ]
            }
        },
        "test_basetemp_can_not_be_in_rootdir": {
            "name": "test_basetemp_can_not_be_in_rootdir",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "testdir": []
            }
        },
        "test_directory_kept_on_fail": {
            "name": "test_directory_kept_on_fail",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "testdir": [
                    "path.Path",
                    "pathlib.Path"
                ]
            }
        },
        "test_directory_not_kept_on_succes": {
            "name": "test_directory_not_kept_on_succes",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "testdir": [
                    "path.Path",
                    "pathlib.Path"
                ]
            }
        },
        "test_directory_of_symlinks": {
            "name": "test_directory_of_symlinks",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "testdir": []
            }
        },
        "test_directory_unremovable_message": {
            "name": "test_directory_unremovable_message",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "testdir": [
                    "path.Path",
                    "str",
                    "pathlib.Path"
                ]
            }
        }
    },
    "pytest-workflow-master/tests/test_threading_errors.py": {
        "test_shlex_error": {
            "name": "test_shlex_error",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "testdir": [
                    "str"
                ]
            }
        }
    },
    "pytest-workflow-master/tests/test_utils.py": {
        "test_replace_whitespace": {
            "name": "test_replace_whitespace",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "result": [
                    "str"
                ]
            }
        },
        "test_is_in_dir": {
            "name": "test_is_in_dir",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "child": [
                    "str",
                    "bool",
                    "Union[str, pathlib.Path]"
                ],
                "parent": [
                    "str",
                    "bool",
                    "Union[str, pathlib.Path]"
                ],
                "in_dir": [
                    "str",
                    "bool",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "test_link_tree": {
            "name": "test_link_tree",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_link_tree_warning": {
            "name": "test_link_tree_warning",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "git_dir": {
            "name": "git_dir",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_duplicate_git_tree": {
            "name": "test_duplicate_git_tree",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "git_dir": [
                    "pathlib.Path"
                ]
            }
        },
        "test_duplicate": {
            "name": "test_duplicate",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "git_dir": [
                    "pathlib.Path"
                ]
            }
        },
        "test_duplicate_notadirerror": {
            "name": "test_duplicate_notadirerror",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_git_root": {
            "name": "test_git_root",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "git_dir": [
                    "path.Path",
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "test_file_md5sum": {
            "name": "test_file_md5sum",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "hash_file": [
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]"
                ]
            }
        }
    },
    "pytest-workflow-master/tests/test_warnings.py": {
        "test_no_warnings": {
            "name": "test_no_warnings",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "testdir": [
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "test_git_warning": {
            "name": "test_git_warning",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "testdir": []
            }
        }
    },
    "pytest-workflow-master/tests/test_workflow.py": {
        "test_stdout": {
            "name": "test_stdout",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_exit_code": {
            "name": "test_exit_code",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_stderr": {
            "name": "test_stderr",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_wait_timeout_workflow_not_started": {
            "name": "test_wait_timeout_workflow_not_started",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_wait_timeout_workflow_started": {
            "name": "test_wait_timeout_workflow_started",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_start_lock": {
            "name": "test_start_lock",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_long_log": {
            "name": "test_long_log",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_empty_command": {
            "name": "test_empty_command",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_workflow_name": {
            "name": "test_workflow_name",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_workflow_name_inferred": {
            "name": "test_workflow_name_inferred",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pytest-workflow-master/tests/test_workflow_dependent_tests.py": {
        "test_not_skipped": {
            "name": "test_not_skipped",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "test": [
                    "List[str]",
                    "str"
                ],
                "testdir": []
            }
        },
        "test_name_use_is_deprecated": {
            "name": "test_name_use_is_deprecated",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "testdir": [
                    "Exception"
                ]
            }
        },
        "test_skipped": {
            "name": "test_skipped",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "test": [
                    "List[str]",
                    "str"
                ],
                "testdir": []
            }
        },
        "test_workflow_dir_arg": {
            "name": "test_workflow_dir_arg",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "test": [
                    "List[str]",
                    "str"
                ],
                "testdir": [
                    "str"
                ]
            }
        },
        "test_workflow_dir_arg_skipped": {
            "name": "test_workflow_dir_arg_skipped",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "test": [
                    "List[str]",
                    "str"
                ],
                "testdir": [
                    "str"
                ]
            }
        },
        "test_mark_not_unknown": {
            "name": "test_mark_not_unknown",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "test": [
                    "List[str]",
                    "str"
                ],
                "testdir": []
            }
        },
        "test_workflow_not_exist_dir_arg": {
            "name": "test_workflow_not_exist_dir_arg",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "testdir": []
            }
        },
        "test_fixture_unmarked_test": {
            "name": "test_fixture_unmarked_test",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "testdir": []
            }
        },
        "test_mark_wrong_key_with_fixture": {
            "name": "test_mark_wrong_key_with_fixture",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "testdir": []
            }
        },
        "test_fixture_usable_for_file_tests": {
            "name": "test_fixture_usable_for_file_tests",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "testdir": []
            }
        },
        "test_same_custom_test_multiple_times": {
            "name": "test_same_custom_test_multiple_times",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {
                "testdir": [
                    "Dict[str, Sequence[str]]",
                    "bool"
                ]
            }
        },
        "test_same_custom_test_multiple_times_one_error": {
            "name": "test_same_custom_test_multiple_times_one_error",
            "location": 266,
            "return": [
                ""
            ],
            "arguments": {
                "testdir": [
                    "Dict[str, Sequence[str]]",
                    "bool"
                ]
            }
        },
        "test_custom_tests_properly_skipped": {
            "name": "test_custom_tests_properly_skipped",
            "location": 275,
            "return": [
                ""
            ],
            "arguments": {
                "testdir": [
                    "Dict[str, Sequence[str]]",
                    "bool"
                ]
            }
        }
    },
    "pytest-workflow-master/tests/test_workflow_queue.py": {
        "test_workflow_queue_put": {
            "name": "test_workflow_queue_put",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_workflow_queue_put_faulty": {
            "name": "test_workflow_queue_put_faulty",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_workflow_queue_process_empty": {
            "name": "test_workflow_queue_process_empty",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "generate_sleep_workflows": {
            "name": "generate_sleep_workflows",
            "location": 44,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "number": [
                    "int",
                    "float",
                    "Optional[float]"
                ],
                "sleep_time": [
                    "int",
                    "float",
                    "Optional[float]"
                ]
            }
        },
        "test_workflow_queue": {
            "name": "test_workflow_queue",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "workflow_number": [
                    "float",
                    "int",
                    "Iterable[Any]"
                ],
                "sleep_time": [
                    "int",
                    "float",
                    "Optional[int]"
                ],
                "threads": []
            }
        }
    },
    "pytest-workflow-master/tests/__init__.py": {},
    "pytest-workflow-master/tests/functional/test_functional.py": {
        "test_cromwell": {
            "name": "test_cromwell",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "testdir": []
            }
        },
        "test_miniwdl": {
            "name": "test_miniwdl",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "testdir": []
            }
        },
        "test_snakemake": {
            "name": "test_snakemake",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "testdir": [
                    "pathlib.Path"
                ]
            }
        }
    }
}
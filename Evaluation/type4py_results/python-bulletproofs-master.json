{
    "python-bulletproofs-master/src/main.py": {},
    "python-bulletproofs-master/src/__init__.py": {},
    "python-bulletproofs-master/src/innerproduct/inner_product_prover.py": {
        "NIProver.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "g": [
                    "bool",
                    "str",
                    "bytes",
                    "List[str]"
                ],
                "h": [
                    "bool",
                    "str",
                    "bytes",
                    "List[str]"
                ],
                "u": [
                    "bool",
                    "float",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[float]"
                ],
                "P": [
                    "bool",
                    "float",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[float]"
                ],
                "c": [
                    "bool",
                    "float",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[float]"
                ],
                "a": [
                    "bool",
                    "List[int]",
                    "Sequence[Sequence[float]]",
                    "Callable",
                    "str"
                ],
                "b": [
                    "List[str]",
                    "bool",
                    "List[bytes]",
                    "Optional[str]",
                    "bytes",
                    "str"
                ],
                "group": [
                    "bool",
                    "float",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[float]"
                ],
                "seed": [
                    "bool",
                    "float",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[float]"
                ]
            }
        },
        "NIProver.prove": {
            "name": "prove",
            "location": 25,
            "return": [
                "str",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "utils.Node",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FastNIProver2.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "g": [
                    "bool",
                    "int",
                    "str",
                    "List[float]",
                    "List[str]"
                ],
                "h": [
                    "bool",
                    "int",
                    "str",
                    "List[float]",
                    "List[str]"
                ],
                "u": [
                    "bool",
                    "bytes",
                    "float",
                    "int",
                    "Union[float, Sequence[float]]"
                ],
                "P": [
                    "bool",
                    "bytes",
                    "float",
                    "int",
                    "Union[float, Sequence[float]]"
                ],
                "a": [
                    "List[int]",
                    "int",
                    "float"
                ],
                "b": [
                    "List[str]",
                    "bool",
                    "Optional[str]",
                    "List[bytes]",
                    "int"
                ],
                "group": [
                    "bool",
                    "bytes",
                    "float",
                    "int",
                    "Union[float, Sequence[float]]"
                ],
                "transcript": [
                    "bool",
                    "int",
                    "List[Tuple[int, int]]",
                    "Union[int, float]"
                ]
            }
        },
        "FastNIProver2.prove": {
            "name": "prove",
            "location": 70,
            "return": [
                "float",
                "utils.Node",
                "trezor.utils.Writer",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-bulletproofs-master/src/innerproduct/inner_product_verifier.py": {
        "Proof1.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "u_new": [
                    "int",
                    "List[str]",
                    "slice",
                    "Optional[List[str]]",
                    "Union[float, Sequence[float]]",
                    "bool",
                    "str"
                ],
                "P_new": [
                    "int",
                    "Optional[int]",
                    "bool"
                ],
                "proof2": [
                    "int",
                    "List[str]",
                    "slice",
                    "Optional[List[str]]",
                    "Union[float, Sequence[float]]",
                    "bool",
                    "str"
                ],
                "transcript": [
                    "int",
                    "List[str]",
                    "slice",
                    "Optional[List[str]]",
                    "Union[float, Sequence[float]]",
                    "bool",
                    "str"
                ]
            }
        },
        "Verifier1.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "g": [
                    "int",
                    "Callable"
                ],
                "h": [
                    "int",
                    "Callable"
                ],
                "u": [
                    "int",
                    "Callable"
                ],
                "P": [
                    "int",
                    "Callable"
                ],
                "c": [
                    "int",
                    "Callable"
                ],
                "proof1": [
                    "int",
                    "Callable"
                ]
            }
        },
        "Verifier1.assertThat": {
            "name": "assertThat",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "bool",
                    "Optional[bool]",
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "Verifier1.verify_transcript": {
            "name": "verify_transcript",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Verifier1.verify": {
            "name": "verify",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Proof2.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "Tuple[int, int]",
                    "bool"
                ],
                "b": [
                    "int",
                    "str",
                    "Optional[List[str]]"
                ],
                "xs": [
                    "int",
                    "str",
                    "Optional[List[str]]"
                ],
                "Ls": [
                    "int",
                    "str",
                    "Optional[List[str]]"
                ],
                "Rs": [
                    "float",
                    "int",
                    "Tuple[float, float]"
                ],
                "transcript": [
                    "int",
                    "str",
                    "Optional[List[str]]"
                ],
                "start_transcript": [
                    "float",
                    "int",
                    "Tuple[int, int]",
                    "Optional[int]"
                ]
            }
        },
        "Verifier2.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "g": [
                    "int",
                    "bool",
                    "float"
                ],
                "h": [
                    "int",
                    "bool",
                    "float"
                ],
                "u": [
                    "int",
                    "bool",
                    "float"
                ],
                "P": [
                    "int",
                    "bool",
                    "float"
                ],
                "proof": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Verifier2.assertThat": {
            "name": "assertThat",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "bool",
                    "Optional[bool]",
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "Verifier2.get_ss": {
            "name": "get_ss",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "xs": [
                    "Set[Optional[str]]",
                    "List[str]"
                ]
            }
        },
        "Verifier2.verify_transcript": {
            "name": "verify_transcript",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Verifier2.verify": {
            "name": "verify",
            "location": 127,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-bulletproofs-master/src/innerproduct/__init__.py": {},
    "python-bulletproofs-master/src/pippenger/group.py": {
        "Group.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "unit": [
                    "int",
                    "bool",
                    "float"
                ],
                "order": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Group.mult": {
            "name": "mult",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ],
                "y": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "Group.square": {
            "name": "square",
            "location": 15,
            "return": [
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "int"
                ]
            }
        },
        "MultIntModP.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "p": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "order": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "MultIntModP.mult": {
            "name": "mult",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ],
                "y": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "EC.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "curve": [
                    "str"
                ]
            }
        },
        "EC.mult": {
            "name": "mult",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ],
                "y": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ]
            }
        }
    },
    "python-bulletproofs-master/src/pippenger/modp.py": {
        "ModP.reset": {
            "name": "reset",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "int"
                ]
            }
        },
        "ModP.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ],
                "p": [
                    "float",
                    "int"
                ]
            }
        },
        "ModP.__add__": {
            "name": "__add__",
            "location": 12,
            "return": [
                "int",
                "List[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "y": [
                    "Dict[str, Tuple[int, int]]",
                    "int"
                ]
            }
        },
        "ModP.__mul__": {
            "name": "__mul__",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "y": [
                    "Dict[str, Tuple[int, int]]",
                    "int"
                ]
            }
        },
        "ModP.__sub__": {
            "name": "__sub__",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "y": [
                    "Dict[str, Tuple[int, int]]",
                    "int"
                ]
            }
        },
        "ModP.__pow__": {
            "name": "__pow__",
            "location": 31,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "ModP.__neg__": {
            "name": "__neg__",
            "location": 43,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModP.__eq__": {
            "name": "__eq__",
            "location": 46,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "y": [
                    "str",
                    "int",
                    "Union[int, float]"
                ]
            }
        },
        "ModP.__str__": {
            "name": "__str__",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModP.__repr__": {
            "name": "__repr__",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-bulletproofs-master/src/pippenger/pippenger.py": {
        "subset_of": {
            "name": "subset_of",
            "location": 5,
            "return": [
                "bool"
            ],
            "arguments": {
                "l": [
                    "list",
                    "int",
                    "List[int]"
                ]
            }
        },
        "Pippenger.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "group": [
                    "str",
                    "Callable",
                    "Tuple[str]",
                    "dict"
                ]
            }
        },
        "Pippenger._pow2powof2": {
            "name": "_pow2powof2",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "g": [
                    "int",
                    "Callable",
                    "str"
                ],
                "j": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Pippenger.multiexp": {
            "name": "multiexp",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "gs": [
                    "list",
                    "List[int]",
                    "str",
                    "type",
                    "List[Tuple[str, int]]"
                ],
                "es": [
                    "int",
                    "List[float]",
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "Pippenger._multiexp_bin": {
            "name": "_multiexp_bin",
            "location": 63,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "gs": [
                    "float",
                    "Iterable[T]",
                    "Tuple['cirq.Qid']"
                ],
                "es": [
                    "int",
                    "str",
                    "list",
                    "List[int]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "Pippenger._multiexp_bin.set_sub": {
            "name": "set_sub",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "sub": [
                    "str",
                    "Optional[Tuple[int, int]]",
                    "Optional[int]",
                    "float",
                    "Optional[Mapping[int, complex]]"
                ]
            }
        }
    },
    "python-bulletproofs-master/src/pippenger/__init__.py": {},
    "python-bulletproofs-master/src/rangeproofs/rangeproof_aggreg_prover.py": {
        "AggregNIRangeProver.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "vs": [
                    "dict",
                    "int",
                    "Iterable[T_co]",
                    "Union[int, float]",
                    "Sequence[str]",
                    "str"
                ],
                "n": [
                    "int",
                    "float",
                    "list"
                ],
                "g": [
                    "int",
                    "float",
                    "list"
                ],
                "h": [
                    "int",
                    "float",
                    "list"
                ],
                "gs": [
                    "int",
                    "float",
                    "list"
                ],
                "hs": [
                    "int",
                    "float",
                    "list"
                ],
                "gammas": [
                    "int",
                    "float",
                    "list"
                ],
                "u": [
                    "int",
                    "float",
                    "list"
                ],
                "group": [
                    "int",
                    "float",
                    "list"
                ],
                "seed": [
                    "int",
                    "float",
                    "list"
                ]
            }
        },
        "AggregNIRangeProver.prove": {
            "name": "prove",
            "location": 36,
            "return": [
                "int",
                "Optional[int]",
                "List[int]",
                "utils.Node",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "AggregNIRangeProver._get_polynomial_coeffs": {
            "name": "_get_polynomial_coeffs",
            "location": 117,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "aL": [
                    "Hashable",
                    "raiden.utils.Any",
                    "int"
                ],
                "aR": [
                    "Hashable",
                    "raiden.utils.Any",
                    "int"
                ],
                "sL": [
                    "Hashable",
                    "raiden.utils.Any",
                    "int"
                ],
                "sR": [
                    "Hashable",
                    "raiden.utils.Any",
                    "int"
                ],
                "y": [
                    "Hashable",
                    "raiden.utils.Any",
                    "int"
                ],
                "z": [
                    "Hashable",
                    "raiden.utils.Any",
                    "int"
                ]
            }
        },
        "AggregNIRangeProver._final_compute": {
            "name": "_final_compute",
            "location": 132,
            "return": [
                "int",
                "Optional[int]",
                "List[int]",
                "utils.Node",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "aL": [
                    "int",
                    "float",
                    "str",
                    "list"
                ],
                "aR": [
                    "int"
                ],
                "sL": [
                    "int",
                    "float",
                    "str",
                    "list"
                ],
                "sR": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "z": [
                    "int"
                ],
                "x": [
                    "int"
                ],
                "tau1": [
                    "raiden.utils.Any",
                    "Tuple[int, int]"
                ],
                "tau2": [
                    "raiden.utils.Any",
                    "Tuple[int, int]"
                ],
                "alpha": [
                    "int",
                    "List[\"Outcome\"]"
                ],
                "rho": [
                    "int",
                    "List[\"Outcome\"]"
                ]
            }
        }
    },
    "python-bulletproofs-master/src/rangeproofs/rangeproof_aggreg_verifier.py": {
        "Proof.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "taux": [
                    "int",
                    "bool",
                    "tuple"
                ],
                "mu": [
                    "int",
                    "bool",
                    "tuple"
                ],
                "t_hat": [
                    "int",
                    "bool",
                    "tuple"
                ],
                "T1": [
                    "int",
                    "bool",
                    "Sequence",
                    "str"
                ],
                "T2": [
                    "int",
                    "bool",
                    "Sequence",
                    "str"
                ],
                "A": [
                    "int",
                    "bool",
                    "Sequence",
                    "str"
                ],
                "S": [
                    "int",
                    "bool",
                    "Sequence",
                    "str"
                ],
                "innerProof": [
                    "int",
                    "bool",
                    "tuple"
                ],
                "transcript": [
                    "int",
                    "bool",
                    "tuple"
                ]
            }
        },
        "AggregRangeVerifier.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "Vs": [
                    "int",
                    "tuple",
                    "Union[str, float]",
                    "bool"
                ],
                "g": [
                    "int",
                    "tuple",
                    "Union[str, float]",
                    "bool"
                ],
                "h": [
                    "int",
                    "tuple",
                    "Union[str, float]",
                    "bool"
                ],
                "gs": [
                    "int",
                    "tuple",
                    "Union[str, float]",
                    "bool"
                ],
                "hs": [
                    "int",
                    "tuple",
                    "Union[str, float]",
                    "bool"
                ],
                "u": [
                    "int",
                    "tuple",
                    "Union[str, float]",
                    "bool"
                ],
                "proof": [
                    "int",
                    "tuple",
                    "Union[str, float]",
                    "bool"
                ]
            }
        },
        "AggregRangeVerifier.assertThat": {
            "name": "assertThat",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "bool",
                    "Optional[bool]",
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "AggregRangeVerifier.verify_transcript": {
            "name": "verify_transcript",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AggregRangeVerifier.verify": {
            "name": "verify",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AggregRangeVerifier._getP": {
            "name": "_getP",
            "location": 96,
            "return": [
                "str",
                "bool",
                "cmk.utils.type_defs.Ruleset"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int",
                    "list"
                ],
                "y": [
                    "float",
                    "int",
                    "list"
                ],
                "z": [
                    "float",
                    "int",
                    "list"
                ],
                "A": [
                    "float",
                    "int",
                    "list"
                ],
                "S": [
                    "float",
                    "int",
                    "list"
                ],
                "gs": [
                    "float",
                    "int",
                    "list"
                ],
                "hsp": [
                    "float",
                    "int",
                    "list"
                ],
                "n": [
                    "float",
                    "int",
                    "list"
                ],
                "m": [
                    "float",
                    "int",
                    "list"
                ]
            }
        }
    },
    "python-bulletproofs-master/src/rangeproofs/rangeproof_prover.py": {
        "NIRangeProver.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "v": [
                    "int",
                    "float",
                    "list"
                ],
                "n": [
                    "int",
                    "float",
                    "list"
                ],
                "g": [
                    "int",
                    "float",
                    "list"
                ],
                "h": [
                    "int",
                    "float",
                    "list"
                ],
                "gs": [
                    "int",
                    "float",
                    "list"
                ],
                "hs": [
                    "int",
                    "float",
                    "list"
                ],
                "gamma": [
                    "int",
                    "float",
                    "list"
                ],
                "u": [
                    "int",
                    "float",
                    "list"
                ],
                "group": [
                    "int",
                    "float",
                    "list"
                ],
                "seed": [
                    "int",
                    "float",
                    "list"
                ]
            }
        },
        "NIRangeProver.prove": {
            "name": "prove",
            "location": 35,
            "return": [
                "int",
                "Optional[int]",
                "List[int]",
                "utils.Node",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "NIRangeProver._get_polynomial_coeffs": {
            "name": "_get_polynomial_coeffs",
            "location": 93,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "aL": [
                    "Hashable",
                    "int",
                    "raiden.utils.Any",
                    "Optional[Iterable[int]]",
                    "Tuple[float, float]",
                    "float"
                ],
                "aR": [
                    "Hashable",
                    "int",
                    "raiden.utils.Any",
                    "Optional[Iterable[int]]",
                    "Tuple[float, float]",
                    "float"
                ],
                "sL": [
                    "Hashable",
                    "int",
                    "raiden.utils.Any",
                    "Optional[Iterable[int]]",
                    "Tuple[float, float]",
                    "float"
                ],
                "sR": [
                    "Hashable",
                    "int",
                    "raiden.utils.Any",
                    "Optional[Iterable[int]]",
                    "Tuple[float, float]",
                    "float"
                ],
                "y": [
                    "Hashable",
                    "int",
                    "raiden.utils.Any",
                    "Optional[Iterable[int]]",
                    "Tuple[float, float]",
                    "float"
                ],
                "z": [
                    "Hashable",
                    "int",
                    "raiden.utils.Any",
                    "Optional[Iterable[int]]",
                    "Tuple[float, float]",
                    "float"
                ]
            }
        },
        "NIRangeProver._final_compute": {
            "name": "_final_compute",
            "location": 103,
            "return": [
                "int",
                "Optional[int]",
                "List[int]",
                "utils.Node",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "aL": [
                    "int",
                    "str"
                ],
                "aR": [
                    "int"
                ],
                "sL": [
                    "int",
                    "str"
                ],
                "sR": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "z": [
                    "int",
                    "float"
                ],
                "x": [
                    "int",
                    "float"
                ],
                "tau1": [
                    "Union[int, float]",
                    "raiden.utils.Any",
                    "int"
                ],
                "tau2": [
                    "Union[int, float]",
                    "raiden.utils.Any",
                    "int"
                ],
                "alpha": [
                    "int",
                    "List[\"Outcome\"]"
                ],
                "rho": [
                    "int",
                    "List[\"Outcome\"]"
                ]
            }
        }
    },
    "python-bulletproofs-master/src/rangeproofs/rangeproof_verifier.py": {
        "Proof.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "taux": [
                    "int",
                    "bool",
                    "tuple"
                ],
                "mu": [
                    "int",
                    "bool",
                    "tuple"
                ],
                "t_hat": [
                    "int",
                    "bool",
                    "tuple"
                ],
                "T1": [
                    "int",
                    "bool",
                    "Sequence",
                    "str"
                ],
                "T2": [
                    "int",
                    "bool",
                    "Sequence",
                    "str"
                ],
                "A": [
                    "int",
                    "bool",
                    "Sequence",
                    "str"
                ],
                "S": [
                    "int",
                    "bool",
                    "Sequence",
                    "str"
                ],
                "innerProof": [
                    "int",
                    "bool",
                    "tuple"
                ],
                "transcript": [
                    "int",
                    "bool",
                    "tuple"
                ]
            }
        },
        "RangeVerifier.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "V": [
                    "int",
                    "tuple",
                    "Union[str, float]",
                    "bool"
                ],
                "g": [
                    "int",
                    "tuple",
                    "Union[str, float]",
                    "bool"
                ],
                "h": [
                    "int",
                    "tuple",
                    "Union[str, float]",
                    "bool"
                ],
                "gs": [
                    "int",
                    "tuple",
                    "Union[str, float]",
                    "bool"
                ],
                "hs": [
                    "int",
                    "tuple",
                    "Union[str, float]",
                    "bool"
                ],
                "u": [
                    "int",
                    "tuple",
                    "Union[str, float]",
                    "bool"
                ],
                "proof": [
                    "int",
                    "tuple",
                    "Union[str, float]",
                    "bool"
                ]
            }
        },
        "RangeVerifier.assertThat": {
            "name": "assertThat",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "bool",
                    "Optional[bool]",
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "RangeVerifier.verify_transcript": {
            "name": "verify_transcript",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeVerifier.verify": {
            "name": "verify",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeVerifier._getP": {
            "name": "_getP",
            "location": 88,
            "return": [
                "str",
                "bool",
                "cmk.utils.type_defs.Ruleset"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "Tuple[float, float, float, float]",
                    "int"
                ],
                "y": [
                    "float",
                    "Tuple[float, float, float, float]",
                    "int"
                ],
                "z": [
                    "float",
                    "Tuple[float, float, float, float]",
                    "int"
                ],
                "A": [
                    "float",
                    "Tuple[float, float, float, float]",
                    "int"
                ],
                "S": [
                    "float",
                    "Tuple[float, float, float, float]",
                    "int"
                ],
                "gs": [
                    "float",
                    "Tuple[float, float, float, float]",
                    "int"
                ],
                "hsp": [
                    "float",
                    "Tuple[float, float, float, float]",
                    "int"
                ],
                "n": [
                    "float",
                    "Tuple[float, float, float, float]",
                    "int"
                ]
            }
        }
    },
    "python-bulletproofs-master/src/rangeproofs/__init__.py": {},
    "python-bulletproofs-master/src/tests/test_aggreg_rangeproofs.py": {
        "AggregRangeProofTest.test_different_seeds": {
            "name": "test_different_seeds",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AggregRangeProofTest.test_different_n_and_vs": {
            "name": "test_different_n_and_vs",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AggregRangeProofTest.test_different_m": {
            "name": "test_different_m",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AggregRangeProofTest.test_prover_cheating_false_vs": {
            "name": "test_prover_cheating_false_vs",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AggregRangeProofTest.test_prover_cheating_false_commitment": {
            "name": "test_prover_cheating_false_commitment",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-bulletproofs-master/src/tests/test_innerprod.py": {
        "Protocol2Test.test_protocol_2": {
            "name": "test_protocol_2",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Protocol2Test.test_prover_cheating_false_P_protocol2": {
            "name": "test_prover_cheating_false_P_protocol2",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Protocol2Test.test_prover_cheating_false_a_protocol2": {
            "name": "test_prover_cheating_false_a_protocol2",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Protocol2Test.test_prover_cheating_false_b_protocol2": {
            "name": "test_prover_cheating_false_b_protocol2",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Protocol2Test.test_prover_cheating_false_u_protocol2": {
            "name": "test_prover_cheating_false_u_protocol2",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InnerProductArgumentTest.test_different_seeds": {
            "name": "test_different_seeds",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InnerProductArgumentTest.test_different_N": {
            "name": "test_different_N",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InnerProductArgumentTest.test_prover_cheating_false_c": {
            "name": "test_prover_cheating_false_c",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InnerProductArgumentTest.test_prover_cheating_false_P": {
            "name": "test_prover_cheating_false_P",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InnerProductArgumentTest.test_prover_cheating_false_a": {
            "name": "test_prover_cheating_false_a",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InnerProductArgumentTest.test_prover_cheating_false_b": {
            "name": "test_prover_cheating_false_b",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InnerProductArgumentTest.test_prover_cheating_false_u": {
            "name": "test_prover_cheating_false_u",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InnerProductArgumentTest.test_prover_cheating_false_transcript1": {
            "name": "test_prover_cheating_false_transcript1",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InnerProductArgumentTest.test_prover_cheating_false_transcript2": {
            "name": "test_prover_cheating_false_transcript2",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-bulletproofs-master/src/tests/test_rangeproofs.py": {
        "RangeProofTest.test_different_seeds": {
            "name": "test_different_seeds",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeProofTest.test_different_n_and_v": {
            "name": "test_different_n_and_v",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeProofTest.test_prover_cheating_false_v": {
            "name": "test_prover_cheating_false_v",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeProofTest.test_prover_cheating_false_commitment": {
            "name": "test_prover_cheating_false_commitment",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RangeProofTest.test_prover_cheating_false_transcript1": {
            "name": "test_prover_cheating_false_transcript1",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-bulletproofs-master/src/tests/test_utils.py": {
        "HashTest.test_mod_hash": {
            "name": "test_mod_hash",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HashTest.test_elliptic_hash": {
            "name": "test_elliptic_hash",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConversionTest.test_point_to_bytes": {
            "name": "test_point_to_bytes",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConversionTest.test_point_to_b64": {
            "name": "test_point_to_b64",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-bulletproofs-master/src/tests/__init__.py": {},
    "python-bulletproofs-master/src/utils/commitments.py": {
        "commitment": {
            "name": "commitment",
            "location": 5,
            "return": [
                "int",
                "Optional[int]",
                "List[int]"
            ],
            "arguments": {
                "g": [
                    "int",
                    "bool",
                    "Sequence[int]",
                    "List[List[float]]"
                ],
                "h": [
                    "int",
                    "bool",
                    "Sequence[int]",
                    "List[List[float]]"
                ],
                "x": [
                    "int",
                    "bool",
                    "Sequence[int]",
                    "List[List[float]]"
                ],
                "r": [
                    "int",
                    "bool",
                    "Sequence[int]",
                    "List[List[float]]"
                ]
            }
        },
        "vector_commitment": {
            "name": "vector_commitment",
            "location": 9,
            "return": [
                "Iterable[str]",
                "bool",
                "IO[str]"
            ],
            "arguments": {
                "g": [
                    "str",
                    "int",
                    "List[Dict]"
                ],
                "h": [
                    "str",
                    "int",
                    "List[Dict]"
                ],
                "a": [
                    "str",
                    "int",
                    "List[Dict]"
                ],
                "b": [
                    "str",
                    "int",
                    "List[Dict]"
                ]
            }
        },
        "_mult": {
            "name": "_mult",
            "location": 16,
            "return": [
                "str",
                "bytes",
                "fastecdsa.poinPoint"
            ],
            "arguments": {
                "a": [
                    "int",
                    "fastecdsa.poinPoint",
                    "float"
                ],
                "g": [
                    "fastecdsa.poinPoint",
                    "int",
                    "float"
                ]
            }
        },
        "_inv": {
            "name": "_inv",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "g": [
                    "fastecdsa.poinPoint",
                    "List[geometry.Point]",
                    "int",
                    "str"
                ]
            }
        }
    },
    "python-bulletproofs-master/src/utils/elliptic_curve_hash.py": {
        "elliptic_hash": {
            "name": "elliptic_hash",
            "location": 7,
            "return": [
                "str",
                "Optional[int]",
                "bytes",
                "float"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "int"
                ],
                "CURVE": [
                    "fastecdsa.curve.Curve",
                    "allennlp.common.util.JsonDict",
                    "float"
                ]
            }
        }
    },
    "python-bulletproofs-master/src/utils/transcript.py": {
        "Transcript.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "seed": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Transcript.add_point": {
            "name": "add_point",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "g": [
                    "str",
                    "int"
                ]
            }
        },
        "Transcript.add_list_points": {
            "name": "add_list_points",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "gs": [
                    "bool",
                    "bytes",
                    "str"
                ]
            }
        },
        "Transcript.add_number": {
            "name": "add_number",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ]
            }
        },
        "Transcript.get_modp": {
            "name": "get_modp",
            "location": 31,
            "return": [
                "str",
                "Tuple[str, int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "python-bulletproofs-master/src/utils/utils.py": {
        "egcd": {
            "name": "egcd",
            "location": 15,
            "return": [
                "int",
                "Union[bytes, bytearray]",
                "bytes"
            ],
            "arguments": {
                "a": [
                    "int",
                    "List[int]",
                    "float"
                ],
                "b": [
                    "int",
                    "List[int]",
                    "float"
                ]
            }
        },
        "mod_hash": {
            "name": "mod_hash",
            "location": 84,
            "return": [
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "Optional[str]"
                ],
                "p": [
                    "int",
                    "str",
                    "Type[BaseException]",
                    "Tuple[int, int, int]",
                    "Tuple[int, int]"
                ],
                "non_zero": [
                    "bool",
                    "int",
                    "str",
                    "Tuple[str, str, str]",
                    "Optional[str]"
                ]
            }
        },
        "point_to_bytes": {
            "name": "point_to_bytes",
            "location": 100,
            "return": [
                "str",
                "bool",
                "bytes",
                "Union[bytes, bytearray]",
                "bytearray"
            ],
            "arguments": {
                "g": [
                    "fastecdsa.poinPoint",
                    "bytes"
                ]
            }
        },
        "point_to_b64": {
            "name": "point_to_b64",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "g": [
                    "fastecdsa.poinPoint",
                    "int",
                    "str"
                ]
            }
        },
        "b64_to_point": {
            "name": "b64_to_point",
            "location": 114,
            "return": [
                "str",
                "Optional[str]",
                "dict",
                "static_frame.core.util.DtypeSpecifier"
            ],
            "arguments": {
                "s": [
                    "bytes",
                    "str",
                    "BaseException"
                ]
            }
        },
        "bytes_to_point": {
            "name": "bytes_to_point",
            "location": 119,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "b": [
                    "bytes",
                    "int"
                ]
            }
        },
        "inner_product": {
            "name": "inner_product",
            "location": 134,
            "return": [
                "int",
                "tuple",
                "str",
                "Union[List[str], str]"
            ],
            "arguments": {
                "a": [
                    "str",
                    "int"
                ],
                "b": [
                    "str",
                    "int"
                ]
            }
        },
        "ModP.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ],
                "p": [
                    "float",
                    "int"
                ]
            }
        },
        "ModP.__add__": {
            "name": "__add__",
            "location": 31,
            "return": [
                "int",
                "List[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "y": [
                    "Dict[str, Tuple[int, int]]",
                    "int"
                ]
            }
        },
        "ModP.__radd__": {
            "name": "__radd__",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "y": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ModP.__mul__": {
            "name": "__mul__",
            "location": 40,
            "return": [
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "ModP.__sub__": {
            "name": "__sub__",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "y": [
                    "Dict[str, Tuple[int, int]]",
                    "fastecdsa.poinPoint",
                    "float"
                ]
            }
        },
        "ModP.__rsub__": {
            "name": "__rsub__",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "y": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ModP.__pow__": {
            "name": "__pow__",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "ModP.__mod__": {
            "name": "__mod__",
            "location": 60,
            "return": [
                "List[int]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "ModP.__neg__": {
            "name": "__neg__",
            "location": 63,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModP.inv": {
            "name": "inv",
            "location": 66,
            "return": [
                "str",
                "Tuple[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModP.__eq__": {
            "name": "__eq__",
            "location": 74,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "y": [
                    "int",
                    "Dict[str, Tuple[int, int]]",
                    "str",
                    "List[float]",
                    "denite.util.UserContext",
                    "Union[int, float]"
                ]
            }
        },
        "ModP.__str__": {
            "name": "__str__",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModP.__repr__": {
            "name": "__repr__",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-bulletproofs-master/src/utils/__init__.py": {}
}
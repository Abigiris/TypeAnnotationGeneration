{
    "python-fmrest-master/setup.py": {},
    "python-fmrest-master/fmrest/cloudserver.py": {
        "CloudServer.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "int",
                    "Optional[List[Any]]"
                ],
                "user": [
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "int",
                    "Optional[List[Any]]"
                ],
                "password": [
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "int",
                    "Optional[List[Any]]"
                ],
                "database": [
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "int",
                    "Optional[List[Any]]"
                ],
                "layout": [
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "int",
                    "Optional[List[Any]]"
                ],
                "cognito_userpool_id": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Awaitable",
                    "Dict[str, str]"
                ],
                "cognito_client_id": [
                    "str",
                    "int",
                    "bool",
                    "Mapping[Any, str]"
                ],
                "data_sources": [
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "int",
                    "Optional[List[Any]]"
                ],
                "verify_ssl": [
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "int",
                    "Optional[List[Any]]"
                ],
                "type_conversion": [
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "int",
                    "Optional[List[Any]]"
                ],
                "auto_relogin": [
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "int",
                    "Optional[List[Any]]"
                ],
                "proxies": [
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "int",
                    "Optional[List[Any]]"
                ],
                "cognito_proxies": [
                    "str",
                    "bool"
                ],
                "api_version": [
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "int",
                    "Optional[List[Any]]"
                ]
            }
        },
        "CloudServer._get_cognito_token": {
            "name": "_get_cognito_token",
            "location": 121,
            "return": [
                "str",
                "Optional[Dict[str, Any]]",
                "bool",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudServer._get_bearer_token": {
            "name": "_get_bearer_token",
            "location": 137,
            "return": [
                "Optional[str]",
                "str",
                "Optional[bool]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudServer._update_token_header": {
            "name": "_update_token_header",
            "location": 146,
            "return": [
                "str",
                "List[dict]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudServer.login": {
            "name": "login",
            "location": 157,
            "return": [
                "bool",
                "dict",
                "Iterable[str]",
                "List[List[str]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-fmrest-master/fmrest/const.py": {},
    "python-fmrest-master/fmrest/exceptions.py": {
        "RequestException.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "original_exception": [
                    "str",
                    "Exception"
                ],
                "request_args": [
                    "str",
                    "TextIO"
                ],
                "request_kwargs": [
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        },
        "ResponseException.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "original_exception": [
                    "Exception",
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ],
                "response": [
                    "str",
                    "int",
                    "float",
                    "bytes",
                    "bool"
                ]
            }
        },
        "FileMakerError.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error_code": [
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "error_message": [
                    "str",
                    "Optional[int]",
                    "int"
                ]
            }
        }
    },
    "python-fmrest-master/fmrest/foundset.py": {
        "Foundset.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "records": [
                    "str",
                    "bytes",
                    "int"
                ],
                "info": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "Foundset.__iter__": {
            "name": "__iter__",
            "location": 38,
            "return": [
                "IO"
            ],
            "arguments": {
                "self": []
            }
        },
        "Foundset.__getitem__": {
            "name": "__getitem__",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "Set[str]"
                ]
            }
        },
        "Foundset.__repr__": {
            "name": "__repr__",
            "location": 68,
            "return": [
                "str",
                "Iterable[int]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Foundset.is_complete": {
            "name": "is_complete",
            "location": 74,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Foundset.info": {
            "name": "info",
            "location": 79,
            "return": [
                "str",
                "OrderedDict",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Foundset.to_df": {
            "name": "to_df",
            "location": 83,
            "return": [
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-fmrest-master/fmrest/record.py": {
        "Record.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "dict",
                    "str",
                    "MutableMapping",
                    "Iterable",
                    "Optional[Iterable]",
                    "bool",
                    "\"VersionedAnalyzer\""
                ],
                "values": [
                    "str",
                    "List[str]",
                    "bytes"
                ],
                "in_portal": [
                    "Optional[float]",
                    "float",
                    "str",
                    "bool"
                ],
                "type_conversion": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Optional[list]"
                ]
            }
        },
        "Record.__repr__": {
            "name": "__repr__",
            "location": 52,
            "return": [
                "str",
                "dict",
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Record.__getitem__": {
            "name": "__getitem__",
            "location": 59,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[str, Iterable[str]]"
                ]
            }
        },
        "Record.__getattr__": {
            "name": "__getattr__",
            "location": 70,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "Record.__setitem__": {
            "name": "__setitem__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[bytes]",
                    "Optional[str]"
                ],
                "value": [
                    "str",
                    "Optional[bytes]",
                    "T"
                ]
            }
        },
        "Record.__setattr__": {
            "name": "__setattr__",
            "location": 107,
            "return": [
                "str",
                "Optional[bool]",
                "float",
                "Optional[float]",
                "dict",
                "List[AnyStr]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        },
        "Record.modifications": {
            "name": "modifications",
            "location": 116,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Record.is_dirty": {
            "name": "is_dirty",
            "location": 124,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Record.record_id": {
            "name": "record_id",
            "location": 129,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Record.modification_id": {
            "name": "modification_id",
            "location": 138,
            "return": [
                "Sequence[Callable]",
                "Optional[Iterable]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Record.keys": {
            "name": "keys",
            "location": 146,
            "return": [
                "str",
                "List[str]",
                "bytes",
                "bool",
                "raiden.utils.List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Record.values": {
            "name": "values",
            "location": 150,
            "return": [
                "str",
                "int",
                "Type[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Record.to_dict": {
            "name": "to_dict",
            "location": 154,
            "return": [
                "str",
                "Dict[str, Any]",
                "list",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "ignore_portals": [
                    "bool",
                    "int",
                    "str",
                    "List[int]"
                ],
                "ignore_internal_ids": [
                    "bool",
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "Record.pop": {
            "name": "pop",
            "location": 168,
            "return": [
                "int",
                "bool",
                "Optional[float]",
                "str",
                "Dict[Tuple[str, str], Tuple[float, float]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "int"
                ],
                "default": [
                    "str",
                    "Optional[int]",
                    "Optional[Any]"
                ]
            }
        }
    },
    "python-fmrest-master/fmrest/server.py": {
        "Server.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool"
                ],
                "user": [
                    "str",
                    "bool"
                ],
                "password": [
                    "str",
                    "bool"
                ],
                "database": [
                    "str",
                    "bool"
                ],
                "layout": [
                    "str",
                    "bool"
                ],
                "data_sources": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "Optional[Union[Any, str]]",
                    "Optional[List[str]]"
                ],
                "verify_ssl": [
                    "str",
                    "bool"
                ],
                "type_conversion": [
                    "Mapping",
                    "List[Dict[str, object]]",
                    "Optional[str]"
                ],
                "auto_relogin": [
                    "str",
                    "bool"
                ],
                "proxies": [
                    "str",
                    "bool"
                ],
                "api_version": [
                    "str",
                    "bool"
                ]
            }
        },
        "Server.__enter__": {
            "name": "__enter__",
            "location": 129,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server.__exit__": {
            "name": "__exit__",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_traceback": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "Server.__repr__": {
            "name": "__repr__",
            "location": 135,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server._get_api_path": {
            "name": "_get_api_path",
            "location": 140,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "Server._with_auto_relogin": {
            "name": "_with_auto_relogin",
            "location": 154,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "Server.login": {
            "name": "login",
            "location": 172,
            "return": [
                "bool",
                "dict",
                "Iterable[str]",
                "List[List[str]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server.logout": {
            "name": "logout",
            "location": 189,
            "return": [
                "str",
                "list",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server.create": {
            "name": "create",
            "location": 205,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "Server.create_record": {
            "name": "create_record",
            "location": 211,
            "return": [
                "bool",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "self": [],
                "field_data": [
                    "dict"
                ],
                "portals": [
                    "bytes",
                    "int",
                    "str",
                    "List[str]",
                    "dict",
                    "Sequence"
                ],
                "scripts": [
                    "List[bytes]",
                    "bool"
                ]
            }
        },
        "Server.edit": {
            "name": "edit",
            "location": 248,
            "return": [
                "str",
                "Optional[int]",
                "Callable",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "int",
                    "bytes"
                ],
                "validate_mod_id": [
                    "Union['KspNativeControl', int]",
                    "set"
                ]
            }
        },
        "Server.edit_record": {
            "name": "edit_record",
            "location": 254,
            "return": [
                "str",
                "list",
                "dict"
            ],
            "arguments": {
                "self": [],
                "record_id": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "field_data": [
                    "dict",
                    "Union[str, List[str]]",
                    "Optional[bool]"
                ],
                "mod_id": [
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "portals": [
                    "str",
                    "int",
                    "bytes"
                ],
                "scripts": [
                    "int",
                    "str",
                    "list",
                    "Optional[Sequence[str]]",
                    "Optional[str]"
                ]
            }
        },
        "Server.delete": {
            "name": "delete",
            "location": 302,
            "return": [
                "str",
                "Union[str, int]"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "Server.delete_record": {
            "name": "delete_record",
            "location": 312,
            "return": [
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "record_id": [
                    "str"
                ],
                "scripts": [
                    "str",
                    "Optional[int]",
                    "list",
                    "int",
                    "List[str]",
                    "Dict[str, T]"
                ]
            }
        },
        "Server.get_record": {
            "name": "get_record",
            "location": 334,
            "return": [
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "record_id": [
                    "str",
                    "int",
                    "Union[Literal, str]"
                ],
                "portals": [
                    "str",
                    "int",
                    "BinaryIO",
                    "List[str]",
                    "List[bytes]",
                    "bool"
                ],
                "scripts": [
                    "int",
                    "str"
                ],
                "layout": [
                    "int",
                    "Set[str]"
                ]
            }
        },
        "Server.perform_script": {
            "name": "perform_script",
            "location": 376,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "param": [
                    "str"
                ]
            }
        },
        "Server.upload_container": {
            "name": "upload_container",
            "location": 400,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "record_id": [
                    "str"
                ],
                "field_name": [
                    "str",
                    "Sequence[Union[str, Any]]",
                    "Optional[str]",
                    "List[str]"
                ],
                "file_": [
                    "str"
                ]
            }
        },
        "Server.get_records": {
            "name": "get_records",
            "location": 421,
            "return": [
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "str",
                    "bool"
                ],
                "limit": [
                    "str",
                    "bool"
                ],
                "sort": [
                    "str",
                    "Optional[str]",
                    "Callable[[str], T]",
                    "Dict[str, Any]"
                ],
                "portals": [
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "MutableMapping[str, Any]",
                    "dict"
                ],
                "scripts": [
                    "Optional[str]",
                    "bool",
                    "int",
                    "AsyncGenerator"
                ],
                "layout": [
                    "str",
                    "bool"
                ]
            }
        },
        "Server.find": {
            "name": "find",
            "location": 473,
            "return": [
                "List[Dict[str, Any]]",
                "int",
                "Optional[bytes]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "int"
                ],
                "sort": [
                    "str",
                    "int"
                ],
                "offset": [
                    "str",
                    "int"
                ],
                "limit": [
                    "str",
                    "int"
                ],
                "portals": [
                    "dict",
                    "bool",
                    "List[List[str]]",
                    "str",
                    "Optional[Type[Any]]",
                    "List[str]"
                ],
                "scripts": [
                    "dict",
                    "bool",
                    "List[List[str]]",
                    "str",
                    "Optional[Type[Any]]",
                    "List[str]"
                ],
                "layout": [
                    "str",
                    "int"
                ]
            }
        },
        "Server.fetch_file": {
            "name": "fetch_file",
            "location": 543,
            "return": [
                "str",
                "cmk.utils.type_defs.CheckPluginName.Str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "file_url": [
                    "\"request_response\"",
                    "str",
                    "List[int]",
                    "\"Machine\""
                ],
                "stream": [
                    "str"
                ]
            }
        },
        "Server.set_globals": {
            "name": "set_globals",
            "location": 580,
            "return": [
                "Mapping[str, Any]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "globals_": [
                    "str",
                    "raiden.utils.Any"
                ]
            }
        },
        "Server.last_error": {
            "name": "last_error",
            "location": 602,
            "return": [
                "str",
                "List[str]",
                "Optional[Set[str]]",
                "Tuple[dict, int]",
                "Tuple[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server.last_script_result": {
            "name": "last_script_result",
            "location": 617,
            "return": [
                "list",
                "set",
                "bool",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server.get_product_info": {
            "name": "get_product_info",
            "location": 632,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server.get_databases": {
            "name": "get_databases",
            "location": 645,
            "return": [
                "str",
                "Optional[Dict[str, Any]]",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server.get_layouts": {
            "name": "get_layouts",
            "location": 672,
            "return": [
                "str",
                "Optional[Dict[str, Any]]",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server.get_scripts": {
            "name": "get_scripts",
            "location": 686,
            "return": [
                "str",
                "Optional[Dict[str, Any]]",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server.get_layout": {
            "name": "get_layout",
            "location": 700,
            "return": [
                "str",
                "Optional[Dict[str, Any]]",
                "Optional[Mapping[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server._call_filemaker": {
            "name": "_call_filemaker",
            "location": 713,
            "return": [
                "List[str]",
                "\"Flow\"",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "dict",
                    "bytes",
                    "Dict[str, Any]",
                    "int"
                ],
                "path": [
                    "str"
                ],
                "data": [
                    "dict",
                    "str",
                    "Tuple[str, int]",
                    "Dict[str, Any]",
                    "requests.models.Response",
                    "bytes"
                ],
                "params": [
                    "dict",
                    "bytes",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "Server._update_script_result": {
            "name": "_update_script_result",
            "location": 771,
            "return": [
                "bool",
                "int",
                "str",
                "Dict[str, int]",
                "Type[Exception]"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Dict[str, Any]",
                    "requests.Response"
                ]
            }
        },
        "Server._update_token_header": {
            "name": "_update_token_header",
            "location": 790,
            "return": [
                "str",
                "List[dict]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server._set_content_type": {
            "name": "_set_content_type",
            "location": 798,
            "return": [
                "str",
                "Dict[str, str]",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "str",
                    "Optional[str]",
                    "Iterable[Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "Server._process_foundset_response": {
            "name": "_process_foundset_response",
            "location": 816,
            "return": [
                "typing.Iterator[record.Record]"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "str"
                ]
            }
        },
        "Server._with_auto_relogin.wrapper": {
            "name": "wrapper",
            "location": 156,
            "return": [
                "str",
                "int",
                "bytes",
                "Dict[str, Any]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-fmrest-master/fmrest/utils.py": {
        "request": {
            "name": "request",
            "location": 8,
            "return": [
                "dict",
                "int",
                "Optional[Dict[str, Any]]",
                "Dict[str, str]",
                "Dict[str, Dict[str, str]]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "build_portal_params": {
            "name": "build_portal_params",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "portals": [
                    "bool",
                    "int",
                    "datetime.datetime",
                    "dict"
                ],
                "names_as_string": [
                    "bool",
                    "str",
                    "List[Tuple[str, Any]]"
                ]
            }
        },
        "build_script_params": {
            "name": "build_script_params",
            "location": 63,
            "return": [
                "dict",
                "Dict[str, float]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "scripts": [
                    "dict",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "cache_generator": {
            "name": "cache_generator",
            "location": 94,
            "return": [
                "typing.Iterator"
            ],
            "arguments": {
                "iterator": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "cache": [
                    "list",
                    "dict",
                    "bytes",
                    "List[str]",
                    "float",
                    "bytearray"
                ]
            }
        },
        "filename_from_url": {
            "name": "filename_from_url",
            "location": 113,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "convert_string_type": {
            "name": "convert_string_type",
            "location": 125,
            "return": [
                "int"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Optional[Any]"
                ]
            }
        },
        "PlaceholderDict.__missing__": {
            "name": "__missing__",
            "location": 176,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "python-fmrest-master/fmrest/__init__.py": {},
    "python-fmrest-master/tests/__init__.py": {},
    "python-fmrest-master/tests/integration/test_server.py": {
        "ServerTestCase.setUp": {
            "name": "setUp",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServerTestCase.test_login": {
            "name": "test_login",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServerTestCase.test_login_data_sources": {
            "name": "test_login_data_sources",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServerTestCase.test_logout": {
            "name": "test_logout",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServerTestCase.test_create_get_delete_record": {
            "name": "test_create_get_delete_record",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServerTestCase.test_create_record_from_record_instance": {
            "name": "test_create_record_from_record_instance",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServerTestCase.test_info": {
            "name": "test_info",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServerTestCase.test_get_records": {
            "name": "test_get_records",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServerTestCase.test_find": {
            "name": "test_find",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServerTestCase.test_edit_record": {
            "name": "test_edit_record",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServerTestCase.test_perform_script_single": {
            "name": "test_perform_script_single",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServerTestCase.test_perform_script_single_with_error": {
            "name": "test_perform_script_single_with_error",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServerTestCase.test_perform_scripts_with_find": {
            "name": "test_perform_scripts_with_find",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServerTestCase.test_perform_script_find_with_error": {
            "name": "test_perform_script_find_with_error",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServerTestCase.test_delete_record_instance": {
            "name": "test_delete_record_instance",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServerTestCase.test_duplicate_by_get_create": {
            "name": "test_duplicate_by_get_create",
            "location": 207,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServerTestCase.test_set_globals_to_access_related_values": {
            "name": "test_set_globals_to_access_related_values",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServerTestCase.test_get_record": {
            "name": "test_get_record",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServerTestCase.test_upload_container": {
            "name": "test_upload_container",
            "location": 256,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServerTestCase.test_auto_relogin_off": {
            "name": "test_auto_relogin_off",
            "location": 267,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServerTestCase.test_auto_relogin_on": {
            "name": "test_auto_relogin_on",
            "location": 281,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServerTestCase.test_auto_relogin_on_and_fail": {
            "name": "test_auto_relogin_on_and_fail",
            "location": 299,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ServerTestCase.test_auto_relogin_on_and_fail_in_original": {
            "name": "test_auto_relogin_on_and_fail_in_original",
            "location": 317,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "python-fmrest-master/tests/integration/__init__.py": {},
    "python-fmrest-master/tests/unit/test_cloudserver.py": {
        "_mock_authenticate_user": {
            "name": "_mock_authenticate_user",
            "location": 16,
            "return": [
                "dict",
                "Callable",
                "str"
            ],
            "arguments": {
                "_": [
                    "str",
                    "bool",
                    "int",
                    "Optional[Dict]",
                    "List[int]"
                ],
                "client": [
                    "str",
                    "bool",
                    "int",
                    "Optional[Dict]",
                    "List[int]"
                ]
            }
        },
        "_mock_verify_tokens": {
            "name": "_mock_verify_tokens",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [
                    "str",
                    "Optional[str]"
                ],
                "token": [
                    "str",
                    "Optional[str]"
                ],
                "id_name": [
                    "str",
                    "Optional[str]"
                ],
                "token_use": [
                    "Optional[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "CloudServerTestCase.setUp": {
            "name": "setUp",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudServerTestCase.test_login": {
            "name": "test_login",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "CloudServerTestCase.test_last_error": {
            "name": "test_last_error",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "CloudServerTestCase.test_bad_json_response": {
            "name": "test_bad_json_response",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "CloudServerTestCase.test_non_ssl_handling": {
            "name": "test_non_ssl_handling",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-fmrest-master/tests/unit/test_foundset.py": {
        "FoundsetTestCase.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FoundsetTestCase.test_index_access": {
            "name": "test_index_access",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FoundsetTestCase.test_list_builduing": {
            "name": "test_list_builduing",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FoundsetTestCase.test_info": {
            "name": "test_info",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FoundsetTestCase.test_empty_info": {
            "name": "test_empty_info",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-fmrest-master/tests/unit/test_record.py": {
        "RecordTestCase.setUp": {
            "name": "setUp",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecordTestCase.test_key_value_mismatch_handling": {
            "name": "test_key_value_mismatch_handling",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecordTestCase.test_key_access": {
            "name": "test_key_access",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecordTestCase.test_dirty_record_flagging": {
            "name": "test_dirty_record_flagging",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecordTestCase.test_key_error_on_invalid_keys": {
            "name": "test_key_error_on_invalid_keys",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecordTestCase.test_setting_class_slots": {
            "name": "test_setting_class_slots",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecordTestCase.test_modification_tracking": {
            "name": "test_modification_tracking",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecordTestCase.test_setting_portal_data_error": {
            "name": "test_setting_portal_data_error",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecordTestCase.test_dict_conversion": {
            "name": "test_dict_conversion",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecordTestCase.test_pop_values": {
            "name": "test_pop_values",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-fmrest-master/tests/unit/test_server.py": {
        "ServerTestCase.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerTestCase.test_last_error": {
            "name": "test_last_error",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "ServerTestCase.test_bad_json_response": {
            "name": "test_bad_json_response",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "ServerTestCase.test_non_ssl_handling": {
            "name": "test_non_ssl_handling",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-fmrest-master/tests/unit/test_utils.py": {
        "UtilsTestCase.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_portal_params": {
            "name": "test_portal_params",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_build_script_params": {
            "name": "test_build_script_params",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_build_script_params_partial": {
            "name": "test_build_script_params_partial",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_string_to_time_conversion": {
            "name": "test_string_to_time_conversion",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_string_to_datetime_conversion": {
            "name": "test_string_to_datetime_conversion",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_string_to_number_conversion": {
            "name": "test_string_to_number_conversion",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilsTestCase.test_filename_from_url": {
            "name": "test_filename_from_url",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python-fmrest-master/tests/unit/__init__.py": {}
}
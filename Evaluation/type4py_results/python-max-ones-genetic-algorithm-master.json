{
    "python-max-ones-genetic-algorithm-master/app.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "python-max-ones-genetic-algorithm-master/src/analysis.py": {
        "total_fitness": {
            "name": "total_fitness",
            "location": 21,
            "return": [
                "str",
                "int",
                "tuple",
                "List[str]",
                "list",
                "Union[List[str], str]",
                "float"
            ],
            "arguments": {
                "pop": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "avg_fitness": {
            "name": "avg_fitness",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "pop": [
                    "List[int]",
                    "List[str]",
                    "src.models.Population",
                    "list",
                    "int",
                    "Sequence[T]"
                ]
            }
        },
        "max_fitness": {
            "name": "max_fitness",
            "location": 29,
            "return": [
                "str",
                "int",
                "tuple",
                "List[str]",
                "list",
                "Union[List[str], str]",
                "float"
            ],
            "arguments": {
                "pop": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "gens_to_population": {
            "name": "gens_to_population",
            "location": 38,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "generations": [
                    "List[src.models.Population]",
                    "AbstractSet[str]",
                    "str",
                    "Tuple[float, float]",
                    "int",
                    "float"
                ]
            }
        },
        "gens_to_max_fitness": {
            "name": "gens_to_max_fitness",
            "location": 42,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "generations": [
                    "List[src.models.Population]",
                    "int"
                ]
            }
        },
        "gens_to_avg_fitness": {
            "name": "gens_to_avg_fitness",
            "location": 46,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "generations": [
                    "List[src.models.Population]",
                    "AbstractSet[str]",
                    "str",
                    "Tuple[float, float]",
                    "int",
                    "float"
                ]
            }
        },
        "gens_to_complete_analysis": {
            "name": "gens_to_complete_analysis",
            "location": 50,
            "return": [
                "int",
                "slice",
                "str",
                "Optional[int]",
                "float"
            ],
            "arguments": {
                "generations": [
                    "List[src.models.Population]",
                    "int",
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "float"
                ]
            }
        },
        "aggregate": {
            "name": "aggregate",
            "location": 68,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "generations": [
                    "int",
                    "bool"
                ]
            }
        },
        "write_analysis": {
            "name": "write_analysis",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "generations": [
                    "Dict[str, Any]",
                    "settings.Config",
                    "_vendor.traitlets.config.Config",
                    "Dict[str, str]",
                    "Type['BaseConfig']"
                ],
                "config": [
                    "Dict[str, Any]",
                    "settings.Config",
                    "_vendor.traitlets.config.Config",
                    "Dict[str, str]",
                    "Type['BaseConfig']"
                ],
                "path": [
                    "str",
                    "Callable[[str], None]"
                ]
            }
        },
        "_generate_file_name": {
            "name": "_generate_file_name",
            "location": 113,
            "return": [
                "str"
            ],
            "arguments": {
                "dir_path": [
                    "List[str]",
                    "str",
                    "Dict[str, str]"
                ],
                "prefix": [
                    "List[str]",
                    "str",
                    "Dict[str, str]"
                ],
                "extension": [
                    "List[str]",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "generate_run_file_name": {
            "name": "generate_run_file_name",
            "location": 119,
            "return": [
                "str",
                "Optional[IO[str]]",
                "Set[str]",
                "List[str]",
                "Dict[str, Any]",
                "docker.models.containers.Container"
            ],
            "arguments": {
                "dir_path": [
                    "str"
                ]
            }
        },
        "graph": {
            "name": "graph",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "generations": [
                    "str",
                    "Tuple[int, int]",
                    "Iterable[str]"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "generate_graph_file_name": {
            "name": "generate_graph_file_name",
            "location": 145,
            "return": [
                "docker.models.containers.Container",
                "str",
                "Optional[IO[str]]"
            ],
            "arguments": {
                "dir_path": [
                    "str"
                ]
            }
        }
    },
    "python-max-ones-genetic-algorithm-master/src/config.py": {
        "read": {
            "name": "read",
            "location": 16,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "python-max-ones-genetic-algorithm-master/src/models.py": {
        "normalize_bitchar": {
            "name": "normalize_bitchar",
            "location": 12,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str",
                "Optional[int]",
                "set"
            ],
            "arguments": {
                "c": [
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "normalize_individualstr": {
            "name": "normalize_individualstr",
            "location": 16,
            "return": [
                "list",
                "Tuple[int]",
                "List['GridQubit']",
                "List[Dict[str, Any]]",
                "frozenset",
                "str",
                "Optional[dict]"
            ],
            "arguments": {
                "ind": [
                    "List[int]",
                    "List[Dict]",
                    "int",
                    "bytes"
                ]
            }
        },
        "normalize_populationstr": {
            "name": "normalize_populationstr",
            "location": 20,
            "return": [
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "ps": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "stringify_bit": {
            "name": "stringify_bit",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "bit": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "stringify_individual": {
            "name": "stringify_individual",
            "location": 28,
            "return": [
                "tuple",
                "List[int]",
                "list",
                "List[T]",
                "List[float]"
            ],
            "arguments": {
                "ind": [
                    "bytes"
                ]
            }
        },
        "stringify_population": {
            "name": "stringify_population",
            "location": 32,
            "return": [
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "pop": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "python-max-ones-genetic-algorithm-master/src/operators.py": {
        "gen_individual": {
            "name": "gen_individual",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "num_genes": [
                    "Optional[str]",
                    "Callable",
                    "Optional[float]",
                    "Optional[List[int]]",
                    "int"
                ]
            }
        },
        "gen_population": {
            "name": "gen_population",
            "location": 16,
            "return": [
                "bool",
                "str",
                "list",
                "dict"
            ],
            "arguments": {}
        },
        "fitness": {
            "name": "fitness",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "ind": [
                    "List[int]",
                    "list",
                    "bool",
                    "List[float]",
                    "str",
                    "int"
                ]
            }
        },
        "mutate": {
            "name": "mutate",
            "location": 34,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "ind": [
                    "float",
                    "random.Random",
                    "str",
                    "List[int]"
                ]
            }
        },
        "crossover": {
            "name": "crossover",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "ind1": [
                    "Sequence[T]",
                    "List[str]",
                    "src.models.Population",
                    "List[int]",
                    "list",
                    "int"
                ],
                "ind2": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "compete": {
            "name": "compete",
            "location": 60,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "inds": [
                    "str"
                ]
            }
        },
        "tournament": {
            "name": "tournament",
            "location": 66,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str",
                "List[django.db.models.query.QuerySet]"
            ],
            "arguments": {
                "pop": [
                    "int",
                    "List[int]",
                    "Sequence[T]",
                    "Optional[T]",
                    "str"
                ]
            }
        }
    },
    "python-max-ones-genetic-algorithm-master/src/pipeline.py": {
        "generation": {
            "name": "generation",
            "location": 11,
            "return": [
                "int",
                "str",
                "list",
                "List[T]",
                "List[float]"
            ],
            "arguments": {
                "pop": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "run_ga": {
            "name": "run_ga",
            "location": 28,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {}
        }
    },
    "python-max-ones-genetic-algorithm-master/src/__init__.py": {}
}
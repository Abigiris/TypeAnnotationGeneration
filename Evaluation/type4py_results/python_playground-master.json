{
    "python_playground-master/caesar_cipher.py": {
        "encode_number": {
            "name": "encode_number",
            "location": 13,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "shift": [
                    "int"
                ]
            }
        },
        "decode_number": {
            "name": "decode_number",
            "location": 16,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "shift": [
                    "int"
                ]
            }
        },
        "letter_from_number": {
            "name": "letter_from_number",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "n": [
                    "int",
                    "str"
                ]
            }
        },
        "number_from_letter": {
            "name": "number_from_letter",
            "location": 24,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "l": [
                    "list",
                    "float",
                    "str",
                    "bytearray"
                ]
            }
        },
        "encode_letter": {
            "name": "encode_letter",
            "location": 27,
            "return": [
                "dict",
                "bool",
                "bytes",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "l": [
                    "str",
                    "Tuple[int, int]",
                    "int"
                ],
                "shift": [
                    "str",
                    "Tuple[int, int]",
                    "int"
                ]
            }
        },
        "decode_letter": {
            "name": "decode_letter",
            "location": 32,
            "return": [
                "dict",
                "bool",
                "bytes",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "l": [
                    "Sized",
                    "int",
                    "float",
                    "Callable[..., bool]",
                    "str"
                ],
                "shift": [
                    "Sized",
                    "int",
                    "float",
                    "Callable[..., bool]",
                    "str"
                ]
            }
        },
        "encode_message": {
            "name": "encode_message",
            "location": 39,
            "return": [
                "Optional[int]",
                "Dict[str, int]",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "m": [
                    "T",
                    "Callable[[T, T], bool]"
                ],
                "shift": [
                    "T",
                    "Callable[[T, T], bool]"
                ]
            }
        },
        "decode_message": {
            "name": "decode_message",
            "location": 42,
            "return": [
                "Optional[int]",
                "Dict[str, int]",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "m": [],
                "shift": []
            }
        },
        "test_caesar_cipher": {
            "name": "test_caesar_cipher",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "cipher_shift": [
                    "str"
                ]
            }
        }
    },
    "python_playground-master/example_attr.py": {
        "SomeClass.hard_math": {
            "name": "hard_math",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "another_number": []
            }
        }
    },
    "python_playground-master/example_matplotlib.py": {},
    "python_playground-master/example_toolz.py": {
        "stem": {
            "name": "stem",
            "location": 15,
            "return": [],
            "arguments": {
                "word": []
            }
        },
        "add": {
            "name": "add",
            "location": 39,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "echo": []
            }
        },
        "inc": {
            "name": "inc",
            "location": 65,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "program": {
            "name": "program",
            "location": 101,
            "return": [],
            "arguments": {}
        },
        "Log.append": {
            "name": "append",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        }
    },
    "python_playground-master/integrate.py": {
        "linear": {
            "name": "linear",
            "location": 7,
            "return": [
                "int",
                "List[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "Union[int, bool]",
                    "str"
                ],
                "m": [
                    "int",
                    "float",
                    "Union[int, bool]",
                    "str"
                ],
                "c": [
                    "int",
                    "float",
                    "Union[int, bool]",
                    "str"
                ]
            }
        },
        "index": {
            "name": "index",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "val": [
                    "int",
                    "Callable",
                    "str"
                ],
                "arr": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "python_playground-master/jupyter.py": {},
    "python_playground-master/dataframe/dataframe_dataclass.py": {
        "test_expected_behaviour_dataclass_to_dataframe": {
            "name": "test_expected_behaviour_dataclass_to_dataframe",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_expected_behaviour_dataframe_to_dataclass": {
            "name": "test_expected_behaviour_dataframe_to_dataclass",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_dataclass_equal": {
            "name": "test_dataclass_equal",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_dataclass_to_dataframe": {
            "name": "test_dataclass_to_dataframe",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_dataframe_to_dataclass": {
            "name": "test_dataframe_to_dataclass",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "python_playground-master/dataframe/dataframe_example.py": {},
    "python_playground-master/dataframe/dataframe_inherit.py": {
        "StudentsDF._constructor": {
            "name": "_constructor",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_playground-master/functional/python_cookbook_compose.py": {
        "sqrt": {
            "name": "sqrt",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "sin": {
            "name": "sin",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "compose": {
            "name": "compose",
            "location": 93,
            "return": [
                "int",
                "str",
                "Dict[str, int]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "sqrt_logged": {
            "name": "sqrt_logged",
            "location": 45,
            "return": [
                "int",
                "List[\"ElementHandle\"]",
                "Tuple[float, float, float]",
                "bool"
            ],
            "arguments": {
                "x": [
                    "float",
                    "List[str]",
                    "int",
                    "str"
                ],
                "log": [
                    "float",
                    "List[str]",
                    "int",
                    "str"
                ]
            }
        },
        "sin_logged": {
            "name": "sin_logged",
            "location": 49,
            "return": [
                "int",
                "List[\"ElementHandle\"]",
                "Tuple[float, float, float]",
                "bool"
            ],
            "arguments": {
                "x": [
                    "float",
                    "List[str]",
                    "int",
                    "str"
                ],
                "log": [
                    "float",
                    "List[str]",
                    "int",
                    "str"
                ]
            }
        },
        "mcompose": {
            "name": "mcompose",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "f": [
                    "bool",
                    "int",
                    "str"
                ],
                "g": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "double": {
            "name": "double",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "inc": {
            "name": "inc",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "dec": {
            "name": "dec",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "compose.fg": {
            "name": "fg",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "mcompose.fg": {
            "name": "fg",
            "location": 57,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "python_playground-master/functional/stevenflott_conditional_expressions.py": {
        "fact": {
            "name": "fact",
            "location": 33,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "max": {
            "name": "max",
            "location": 49,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "semifact": {
            "name": "semifact",
            "location": 71,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "python_playground-master/functional/toolz_pipe.py": {
        "write": {
            "name": "write",
            "location": 72,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "show": {
            "name": "show",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "file": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "File.write": {
            "name": "write",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "File.show": {
            "name": "show",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_playground-master/functional/algebraic_data_type/adt_period.py": {
        "duration_period": {
            "name": "duration_period",
            "location": 22,
            "return": [],
            "arguments": {
                "start_date": [],
                "duration": []
            }
        },
        "date_period": {
            "name": "date_period",
            "location": 25,
            "return": [],
            "arguments": {
                "end_date": [],
                "start_date": []
            }
        },
        "print_period": {
            "name": "print_period",
            "location": 33,
            "return": [],
            "arguments": {
                "period": []
            }
        },
        "calc_period": {
            "name": "calc_period",
            "location": 43,
            "return": [],
            "arguments": {
                "period": []
            }
        }
    },
    "python_playground-master/functional/algebraic_data_type/adt_shape_fsharp.py": {
        "circle": {
            "name": "circle",
            "location": 29,
            "return": [],
            "arguments": {
                "radius": []
            }
        },
        "rectangle": {
            "name": "rectangle",
            "location": 32,
            "return": [],
            "arguments": {
                "width": [],
                "length": []
            }
        },
        "polygon": {
            "name": "polygon",
            "location": 35,
            "return": [],
            "arguments": {
                "list_of_points": []
            }
        },
        "point": {
            "name": "point",
            "location": 38,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "print_shape": {
            "name": "print_shape",
            "location": 57,
            "return": [],
            "arguments": {
                "shape": []
            }
        }
    },
    "python_playground-master/functional/algebraic_data_type/adt_tree.py": {},
    "python_playground-master/functional/algebraic_data_type/attrs_period.py": {
        "print_period.Duration": {
            "name": "Duration",
            "location": 72,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "print_period.Date": {
            "name": "Date",
            "location": 75,
            "return": [],
            "arguments": {
                "p": []
            }
        }
    },
    "python_playground-master/functional/algebraic_data_type/designing_for_errors.py": {
        "unhandled_type": {
            "name": "unhandled_type",
            "location": 73,
            "return": [
                "int",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "x": [
                    "type",
                    "List[str]",
                    "Union[int, float]",
                    "Callable"
                ]
            }
        },
        "error_message": {
            "name": "error_message",
            "location": 81,
            "return": [
                "str",
                "Hashable"
            ],
            "arguments": {
                "err": [
                    "Callable",
                    "Dict[str, Any]",
                    "dict",
                    "bool",
                    "Tuple[Type]"
                ],
                "default_handler": [
                    "Callable",
                    "Dict[str, Any]",
                    "dict",
                    "bool",
                    "Tuple[Type]"
                ]
            }
        }
    },
    "python_playground-master/functional/algebraic_data_type/designing_for_errors_adt.py": {
        "error_message": {
            "name": "error_message",
            "location": 55,
            "return": [
                "str",
                "bool",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "err": [
                    "str",
                    "dict"
                ]
            }
        },
        "result_message": {
            "name": "result_message",
            "location": 79,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "result": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "result_bind": {
            "name": "result_bind",
            "location": 93,
            "return": [
                "bool"
            ],
            "arguments": {
                "result": [
                    "int",
                    "str",
                    "Sequence[Any]",
                    "Callable[[None], bool]",
                    "List[str]",
                    "dict"
                ],
                "func": [
                    "int",
                    "str",
                    "Sequence[Any]",
                    "Callable[[None], bool]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "result_map": {
            "name": "result_map",
            "location": 106,
            "return": [
                "Result"
            ],
            "arguments": {
                "result": [
                    "int",
                    "str",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "result_return": {
            "name": "result_return",
            "location": 112,
            "return": [
                "type",
                "bool"
            ],
            "arguments": {
                "x": [
                    "Union[int, float]",
                    "Tuple[int, int]",
                    "\"Span\"",
                    "\"NoopSpan\""
                ]
            }
        },
        "result_apply": {
            "name": "result_apply",
            "location": 117,
            "return": [
                "Result"
            ],
            "arguments": {
                "fresult": [
                    "int",
                    "Optional[Mapping[str, Any]]",
                    "str",
                    "bool",
                    "Tuple[int, str]",
                    "BaseException"
                ],
                "xresult": [
                    "int",
                    "Optional[Mapping[str, Any]]",
                    "str",
                    "bool",
                    "Tuple[int, str]",
                    "BaseException"
                ]
            }
        },
        "input_name_not_blank": {
            "name": "input_name_not_blank",
            "location": 150,
            "return": [
                "str",
                "type",
                "List[str]"
            ],
            "arguments": {
                "input": [
                    "Type[T]",
                    "Optional[Callable]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "input_email_not_blank": {
            "name": "input_email_not_blank",
            "location": 158,
            "return": [
                "str"
            ],
            "arguments": {
                "input": [
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "result_pipe": {
            "name": "result_pipe",
            "location": 198,
            "return": [
                "bool",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "data": [
                    "Dict[str, object]",
                    "bool"
                ]
            }
        },
        "input_validation": {
            "name": "input_validation",
            "location": 203,
            "return": [
                "int",
                "str",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {
                "input": [
                    "str"
                ]
            }
        }
    },
    "python_playground-master/functional/algebraic_data_type/sumtype_convert.py": {
        "test_convert": {
            "name": "test_convert",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "convert.Int": {
            "name": "Int",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "i": [
                    "int",
                    "slice",
                    "T",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "convert.String": {
            "name": "String",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "List[str]",
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "python_playground-master/functional/algebraic_data_type/sumtype_example.py": {
        "get_number.MyConstructor": {
            "name": "MyConstructor",
            "location": 56,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "get_number.AnotherConstructor": {
            "name": "AnotherConstructor",
            "location": 57,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "get_number.ThirdConstructor": {
            "name": "ThirdConstructor",
            "location": 58,
            "return": [],
            "arguments": {
                "one": [],
                "two": []
            }
        },
        "get_num.NamedNum": {
            "name": "NamedNum",
            "location": 82,
            "return": [],
            "arguments": {
                "_": [],
                "num": []
            }
        },
        "get_num.AnonymousNum": {
            "name": "AnonymousNum",
            "location": 83,
            "return": [],
            "arguments": {
                "num": []
            }
        }
    },
    "python_playground-master/functional/algebraic_data_type/sumtype_period.py": {
        "print_period.DurationPeriod": {
            "name": "DurationPeriod",
            "location": 28,
            "return": [],
            "arguments": {
                "start_date": [],
                "duration": []
            }
        },
        "print_period.DatePeriod": {
            "name": "DatePeriod",
            "location": 31,
            "return": [],
            "arguments": {
                "start_date": [],
                "end_date": []
            }
        },
        "match_impl.Sumtype": {
            "name": "Sumtype",
            "location": 75,
            "return": [],
            "arguments": {
                "sum_type": []
            }
        },
        "match_impl.Attrtype": {
            "name": "Attrtype",
            "location": 76,
            "return": [],
            "arguments": {
                "attr_type": []
            }
        }
    },
    "python_playground-master/functional/algebraic_data_type/sumtype_transform.py": {
        "test_transform": {
            "name": "test_transform",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_convert": {
            "name": "test_convert",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "transform.Int_To_String": {
            "name": "Int_To_String",
            "location": 23,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "i": [
                    "str",
                    "int"
                ],
                "s": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "transform.String_To_Int": {
            "name": "String_To_Int",
            "location": 25,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ],
                "i": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "convert.Int": {
            "name": "Int",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "i": [
                    "int",
                    "slice",
                    "T",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "convert.String": {
            "name": "String",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "List[str]",
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "python_playground-master/functional/monad/code_happens.py": {},
    "python_playground-master/functional/monad/hacker_news_monad.py": {
        "fmap": {
            "name": "fmap",
            "location": 91,
            "return": [],
            "arguments": {
                "program": [],
                "f": []
            }
        },
        "program": {
            "name": "program",
            "location": 111,
            "return": [],
            "arguments": {
                "initial_state": []
            }
        },
        "stringLength": {
            "name": "stringLength",
            "location": 121,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "bind": {
            "name": "bind",
            "location": 147,
            "return": [],
            "arguments": {
                "program": [],
                "callback": []
            }
        },
        "function": {
            "name": "function",
            "location": 155,
            "return": [],
            "arguments": {
                "initialState": []
            }
        },
        "fmap.function": {
            "name": "function",
            "location": 93,
            "return": [],
            "arguments": {
                "initialState": []
            }
        },
        "bind.function": {
            "name": "function",
            "location": 148,
            "return": [],
            "arguments": {
                "initialState": []
            }
        }
    },
    "python_playground-master/functional/monad/hacker_news_none_monad.py": {
        "get_user": {
            "name": "get_user",
            "location": 48,
            "return": [],
            "arguments": {
                "id": []
            }
        },
        "send_message1": {
            "name": "send_message1",
            "location": 55,
            "return": [],
            "arguments": {
                "user": [],
                "message": []
            }
        },
        "log": {
            "name": "log",
            "location": 58,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "main1": {
            "name": "main1",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "test_main1": {
            "name": "test_main1",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "main2": {
            "name": "main2",
            "location": 75,
            "return": [],
            "arguments": {}
        },
        "test_main2": {
            "name": "test_main2",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "send_message2": {
            "name": "send_message2",
            "location": 91,
            "return": [],
            "arguments": {
                "user": [],
                "msg": []
            }
        },
        "main3": {
            "name": "main3",
            "location": 100,
            "return": [],
            "arguments": {}
        },
        "test_main3": {
            "name": "test_main3",
            "location": 109,
            "return": [],
            "arguments": {}
        },
        "main4": {
            "name": "main4",
            "location": 132,
            "return": [],
            "arguments": {
                "user_id": []
            }
        },
        "test_main4_unknown_user": {
            "name": "test_main4_unknown_user",
            "location": 138,
            "return": [],
            "arguments": {}
        },
        "test_main4_user1": {
            "name": "test_main4_user1",
            "location": 143,
            "return": [],
            "arguments": {}
        },
        "send_message_curry": {
            "name": "send_message_curry",
            "location": 159,
            "return": [],
            "arguments": {
                "user": [],
                "msg": [],
                "email": []
            }
        },
        "test_main5": {
            "name": "test_main5",
            "location": 167,
            "return": [],
            "arguments": {}
        },
        "Email.__repr__": {
            "name": "__repr__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Email.send": {
            "name": "send",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NoneMonad.bind": {
            "name": "bind",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        }
    },
    "python_playground-master/functional/monad/monads_in_15mins.py": {},
    "python_playground-master/functional/monad/monads_part1_design_pattern.py": {
        "divide100": {
            "name": "divide100",
            "location": 14,
            "return": [],
            "arguments": {
                "divisor": []
            }
        },
        "sqrt": {
            "name": "sqrt",
            "location": 98,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "composable_divide100": {
            "name": "composable_divide100",
            "location": 45,
            "return": [],
            "arguments": {
                "divisor": []
            }
        },
        "composable_sqrt": {
            "name": "composable_sqrt",
            "location": 51,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "bind": {
            "name": "bind",
            "location": 171,
            "return": [],
            "arguments": {
                "x": [],
                "f": []
            }
        },
        "unit": {
            "name": "unit",
            "location": 188,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "u": {
            "name": "u",
            "location": 152,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "v": {
            "name": "v",
            "location": 155,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "verbose_u": {
            "name": "verbose_u",
            "location": 161,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "verbose_v": {
            "name": "verbose_v",
            "location": 164,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "python_playground-master/functional/monad/monads_part2_impure_computations.py": {
        "unit": {
            "name": "unit",
            "location": 49,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "bind": {
            "name": "bind",
            "location": 52,
            "return": [],
            "arguments": {
                "x": [],
                "f": []
            }
        },
        "_input": {
            "name": "_input",
            "location": 59,
            "return": [],
            "arguments": {
                "prompt": []
            }
        },
        "output": {
            "name": "output",
            "location": 62,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "execute": {
            "name": "execute",
            "location": 66,
            "return": [],
            "arguments": {
                "computation": []
            }
        },
        "test_output": {
            "name": "test_output",
            "location": 77,
            "return": [],
            "arguments": {}
        },
        "test_repeat_input": {
            "name": "test_repeat_input",
            "location": 92,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_respond_input": {
            "name": "test_respond_input",
            "location": 105,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_repeat_respond_input": {
            "name": "test_repeat_respond_input",
            "location": 125,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_sequence_respond_input": {
            "name": "test_sequence_respond_input",
            "location": 150,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_respond12_input": {
            "name": "test_respond12_input",
            "location": 173,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "Computation.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "data": []
            }
        },
        "Computation.__repr__": {
            "name": "__repr__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_respond_input.respond": {
            "name": "respond",
            "location": 108,
            "return": [],
            "arguments": {
                "input": []
            }
        },
        "test_repeat_respond_input.main_wrapper": {
            "name": "main_wrapper",
            "location": 128,
            "return": [],
            "arguments": {
                "dummy": []
            }
        },
        "test_repeat_respond_input.respond": {
            "name": "respond",
            "location": 131,
            "return": [],
            "arguments": {
                "input": []
            }
        },
        "test_sequence_respond_input.sequence": {
            "name": "sequence",
            "location": 153,
            "return": [],
            "arguments": {
                "u": [],
                "v": []
            }
        },
        "test_sequence_respond_input.respond": {
            "name": "respond",
            "location": 156,
            "return": [],
            "arguments": {
                "input": []
            }
        },
        "test_respond12_input.respond2": {
            "name": "respond2",
            "location": 176,
            "return": [],
            "arguments": {
                "input1": []
            }
        },
        "test_respond12_input.respond1": {
            "name": "respond1",
            "location": 179,
            "return": [],
            "arguments": {
                "input1": []
            }
        }
    },
    "python_playground-master/functional/monad/monoids_to_monads.py": {},
    "python_playground-master/functional/monad/unpythonic_monad.py": {
        "get_address": {
            "name": "get_address",
            "location": 26,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[List[str]]",
                "str"
            ],
            "arguments": {
                "company": [
                    "int",
                    "dict",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_street": {
            "name": "get_street",
            "location": 29,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[List[str]]",
                "str"
            ],
            "arguments": {
                "address": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_street_from_company": {
            "name": "get_street_from_company",
            "location": 32,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "company": [
                    "int",
                    "Dict[str, Any]",
                    "float"
                ]
            }
        },
        "test_perhaps": {
            "name": "test_perhaps",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "validated_data": {
            "name": "validated_data",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Optional[bytes]"
                ],
                "errors": [
                    "str",
                    "Optional[bytes]"
                ]
            }
        },
        "bind_validated_data": {
            "name": "bind_validated_data",
            "location": 72,
            "return": [
                "dict",
                "bool",
                "Tuple[str]",
                "int"
            ],
            "arguments": {
                "vd": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "float"
                ],
                "fn": [
                    "List[object]",
                    "bool",
                    "List[Tuple[float, str]]",
                    "set",
                    "Dict[str, List[Any]]"
                ]
            }
        },
        "validate_name": {
            "name": "validate_name",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "data": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "clean_phone": {
            "name": "clean_phone",
            "location": 89,
            "return": [
                "str",
                "dict",
                "List[float]",
                "bool",
                "float"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "List[Tuple]",
                    "str",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "validate": {
            "name": "validate",
            "location": 98,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "str",
                    "Dict[str, float]"
                ]
            }
        },
        "test_validated_data": {
            "name": "test_validated_data",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Perhaps.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "Perhaps.bind": {
            "name": "bind",
            "location": 16,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "DefaultDict[int, List[Any]]",
                    "OrderedDict",
                    "str",
                    "int"
                ]
            }
        },
        "Perhaps.get_value": {
            "name": "get_value",
            "location": 21,
            "return": [
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "python_playground-master/functional/monad/valued_lessons.py": {},
    "python_playground-master/functional/pattern/alan_patternmatching.py": {
        "test_oftype": {
            "name": "test_oftype",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "match1": {
            "name": "match1",
            "location": 36,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "canFight1": {
            "name": "canFight1",
            "location": 41,
            "return": [],
            "arguments": {
                "robot": []
            }
        },
        "match2": {
            "name": "match2",
            "location": 57,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "canFight2": {
            "name": "canFight2",
            "location": 62,
            "return": [],
            "arguments": {
                "robot": []
            }
        },
        "match3": {
            "name": "match3",
            "location": 75,
            "return": [],
            "arguments": {}
        },
        "canFight3": {
            "name": "canFight3",
            "location": 91,
            "return": [],
            "arguments": {
                "robot": []
            }
        },
        "test_can_fight3": {
            "name": "test_can_fight3",
            "location": 104,
            "return": [],
            "arguments": {}
        },
        "bind": {
            "name": "bind",
            "location": 126,
            "return": [],
            "arguments": {
                "data": [],
                "fn": []
            }
        },
        "canFight5": {
            "name": "canFight5",
            "location": 149,
            "return": [],
            "arguments": {
                "robot": []
            }
        },
        "match": {
            "name": "match",
            "location": 299,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "conditions": []
            }
        },
        "pattern": {
            "name": "pattern",
            "location": 226,
            "return": [],
            "arguments": {}
        },
        "Pattern5.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pattern5.match": {
            "name": "match",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pattern5.of_type": {
            "name": "of_type",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "type": []
            }
        },
        "Pattern5.default": {
            "name": "default",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pattern6.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "pattern": []
            }
        },
        "Pattern6.match": {
            "name": "match",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "conditions": []
            }
        },
        "Pattern7.__init__": {
            "name": "__init__",
            "location": 254,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pattern7.match": {
            "name": "match",
            "location": 257,
            "return": [],
            "arguments": {
                "self": [],
                "conditions": []
            }
        }
    },
    "python_playground-master/functional/pattern/chadselph_patternmatching.py": {
        "Any.__eq__": {
            "name": "__eq__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "_other": []
            }
        },
        "OfType.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OfType.__eq__": {
            "name": "__eq__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "OfType.__hash__": {
            "name": "__hash__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Where.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "predicate": []
            }
        },
        "Where.__eq__": {
            "name": "__eq__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "WhereNot.__eq__": {
            "name": "__eq__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PatternMatcher.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PatternMatcher.find_match": {
            "name": "find_match",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "PatternMatcher.__call__": {
            "name": "__call__",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "my_func": {
            "name": "my_func",
            "location": 124,
            "return": [],
            "arguments": {
                "test": []
            }
        },
        "psum": {
            "name": "psum",
            "location": 136,
            "return": [],
            "arguments": {
                "l": []
            }
        },
        "count_letters": {
            "name": "count_letters",
            "location": 150,
            "return": [],
            "arguments": {
                "x": [],
                "xs": []
            }
        },
        "PatternMatcher.find_match.wrapper": {
            "name": "wrapper",
            "location": 87,
            "return": [],
            "arguments": {}
        }
    },
    "python_playground-master/functional/pattern/metaprog_beyond_decency.py": {
        "Whatever.__add__": {
            "name": "__add__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "y": []
            }
        },
        "Whatever.__mul__": {
            "name": "__mul__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "y": []
            }
        },
        "Whatever.__getattr__": {
            "name": "__getattr__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "y": []
            }
        },
        "Select.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "choices": []
            }
        },
        "TextInput.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "coerce": []
            }
        },
        "TextArea.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "Checkbox.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "label": []
            }
        }
    },
    "python_playground-master/functional/pattern/pattern_matched.py": {
        "getColor": {
            "name": "getColor",
            "location": 97,
            "return": [],
            "arguments": {
                "legs": []
            }
        },
        "getNewColor": {
            "name": "getNewColor",
            "location": 128,
            "return": [],
            "arguments": {
                "legs": []
            }
        },
        "canFight": {
            "name": "canFight",
            "location": 186,
            "return": [],
            "arguments": {
                "robot": []
            }
        },
        "Maybe.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "value_or_none": []
            }
        },
        "Maybe.getOrElse": {
            "name": "getOrElse",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "Coordinate.__new__": {
            "name": "__new__",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "z": []
            }
        }
    },
    "python_playground-master/functional/pattern/__init__.py": {},
    "python_playground-master/functional/type_classes/direction_class.py": {},
    "python_playground-master/functional/type_classes/reverse_direction_generic.py": {
        "reverse_direction": {
            "name": "reverse_direction",
            "location": 47,
            "return": [],
            "arguments": {
                "reverse": []
            }
        }
    },
    "python_playground-master/functional/type_classes/reverse_direction_protocol.py": {
        "reverse_all": {
            "name": "reverse_all",
            "location": 61,
            "return": [],
            "arguments": {
                "items": []
            }
        },
        "Reversible.reverse": {
            "name": "reverse",
            "location": 43,
            "return": [],
            "arguments": {
                "item": []
            }
        },
        "ReverseDirection.reverse": {
            "name": "reverse",
            "location": 48,
            "return": [],
            "arguments": {
                "direction": []
            }
        }
    }
}
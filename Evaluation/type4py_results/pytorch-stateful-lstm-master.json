{
    "pytorch-stateful-lstm-master/setup.py": {
        "load_requirements": {
            "name": "load_requirements",
            "location": 11,
            "return": [
                "bool",
                "list",
                "List[str]",
                "List[Tuple[str, Any]]",
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "pytorch-stateful-lstm-master/benchmark/tasks.py": {
        "uni_sl_lstm": {
            "name": "uni_sl_lstm",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "c": [
                    "str",
                    "bool",
                    "numpy.ndarray"
                ],
                "input": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "torch.BoolTensor",
                    "Tuple[int, int]",
                    "numpy.random.RandomState"
                ],
                "hidden": [
                    "int",
                    "Tuple[int, int]",
                    "numpy.random.RandomState",
                    "Union[Tuple[int, int], int]",
                    "Optional[int]",
                    "float"
                ],
                "cell": [
                    "int",
                    "Tuple[int, int]",
                    "numpy.random.RandomState",
                    "Union[Tuple[int, int], int]",
                    "Optional[int]",
                    "float"
                ],
                "batch": [
                    "int",
                    "Union[int, slice]"
                ],
                "timestep": [
                    "int",
                    "bool",
                    "float"
                ],
                "repeat": [
                    "int",
                    "List[float]",
                    "str",
                    "bytearray",
                    "List[str]",
                    "List[Tuple[int, int]]",
                    "List[int]"
                ],
                "cuda": [
                    "Callable",
                    "List[int]",
                    "Union[int, str]"
                ],
                "output": [
                    "str",
                    "List[str]",
                    "bytes",
                    "allennlp.modules.token_embedders.Embedding"
                ]
            }
        },
        "allennlp_lstm_cell": {
            "name": "allennlp_lstm_cell",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "c": [
                    "str",
                    "bool",
                    "numpy.ndarray"
                ],
                "input": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "torch.BoolTensor",
                    "Tuple[int, int]",
                    "numpy.random.RandomState"
                ],
                "hidden": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "Optional[int]",
                    "float",
                    "Tuple[int, int]",
                    "numpy.random.RandomState"
                ],
                "cell": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "Optional[int]",
                    "float",
                    "Tuple[int, int]",
                    "numpy.random.RandomState"
                ],
                "batch": [
                    "int",
                    "Union[int, slice]"
                ],
                "timestep": [
                    "int",
                    "bool",
                    "float"
                ],
                "repeat": [
                    "int",
                    "List[float]",
                    "str",
                    "bytearray",
                    "List[str]",
                    "List[Tuple[int, int]]",
                    "List[int]"
                ],
                "cuda": [
                    "Callable",
                    "int"
                ],
                "output": [
                    "str",
                    "List[str]",
                    "bytes",
                    "allennlp.modules.token_embedders.Embedding"
                ]
            }
        },
        "uni_lstm": {
            "name": "uni_lstm",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "c": [
                    "int",
                    "str"
                ],
                "num_layers": [
                    "int",
                    "Union[numpy.ndarray, numpy.void]"
                ],
                "input": [
                    "int",
                    "bool",
                    "str"
                ],
                "hidden": [
                    "int",
                    "bool",
                    "str"
                ],
                "cell": [
                    "int",
                    "bool",
                    "str"
                ],
                "batch": [
                    "int",
                    "str",
                    "numpy.ndarray"
                ],
                "timestep": [
                    "int",
                    "Union[int, slice]",
                    "str",
                    "numpy.ndarray"
                ],
                "repeat": [
                    "int",
                    "Sized",
                    "list",
                    "List[int]",
                    "bool"
                ],
                "cuda": [
                    "float",
                    "Sequence[Sequence[Any]]",
                    "int",
                    "List[str]",
                    "List[numpy.ndarray]",
                    "Optional[str]"
                ],
                "output": [
                    "str",
                    "bytes",
                    "Union[str, int]",
                    "int"
                ]
            }
        },
        "allennlp_seq2seq": {
            "name": "allennlp_seq2seq",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "c": [
                    "int",
                    "str"
                ],
                "num_layers": [
                    "int",
                    "bool",
                    "Sized"
                ],
                "input": [
                    "int"
                ],
                "hidden": [
                    "int"
                ],
                "cell": [
                    "int"
                ],
                "batch": [
                    "int",
                    "str",
                    "numpy.ndarray"
                ],
                "timestep": [
                    "int",
                    "Union[int, slice]",
                    "str",
                    "numpy.ndarray"
                ],
                "repeat": [
                    "int",
                    "Sized",
                    "list",
                    "List[int]",
                    "bool"
                ],
                "cuda": [
                    "numpy.ndarray",
                    "bool"
                ],
                "output": [
                    "str",
                    "bytes",
                    "Union[str, int]",
                    "int"
                ]
            }
        },
        "plot": {
            "name": "plot",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {
                "c": [
                    "bool",
                    "int",
                    "List[str]",
                    "Tuple[float, float]"
                ],
                "prefix": [
                    "bool",
                    "List[dict]",
                    "str",
                    "Mapping[str, Any]",
                    "Union[List[str], str]",
                    "List[Dict[str, Any]]",
                    "Dict[str, torch.Tensor]",
                    "Optional[int]"
                ],
                "keywords": [
                    "int",
                    "numpy.array",
                    "float",
                    "bool",
                    "bytes",
                    "Union[Tuple, torch.Size]"
                ],
                "output": [
                    "int",
                    "numpy.array",
                    "float",
                    "bool",
                    "bytes",
                    "Union[Tuple, torch.Size]"
                ]
            }
        }
    },
    "pytorch-stateful-lstm-master/docs/conf.py": {},
    "pytorch-stateful-lstm-master/pytorch_stateful_lstm/unidirectional_lstm.py": {
        "block_orthogonal_recursive": {
            "name": "block_orthogonal_recursive",
            "location": 12,
            "return": [
                "int",
                "Iterator[Tuple[str, str]]"
            ],
            "arguments": {
                "sizes": [
                    "int",
                    "torch.LongTensor",
                    "float",
                    "Tuple[int, int]"
                ],
                "split_sizes": [
                    "int",
                    "torch.LongTensor",
                    "float",
                    "Tuple[int, int]"
                ],
                "gain": [
                    "int",
                    "bool",
                    "str",
                    "Optional[int]",
                    "float",
                    "Sequence[int]"
                ],
                "dim": [
                    "int",
                    "List[str]"
                ],
                "tensor": [
                    "int",
                    "Optional[int]",
                    "List[str]",
                    "Collection[int]"
                ]
            }
        },
        "block_orthogonal": {
            "name": "block_orthogonal",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "tensor": [
                    "bool",
                    "str",
                    "int",
                    "Tuple[int, int]",
                    "torch.Tensor",
                    "List[float]"
                ],
                "split_sizes": [
                    "int"
                ],
                "gain": [
                    "int",
                    "bool",
                    "Tuple[int, int]",
                    "str",
                    "List[int]"
                ]
            }
        },
        "get_dropout_mask": {
            "name": "get_dropout_mask",
            "location": 56,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "dropout_probability": [
                    "int",
                    "Sequence[int]",
                    "Callable[[], torch.nn.Module]",
                    "str",
                    "float",
                    "List[float]",
                    "bool"
                ],
                "tensor_for_masking": [
                    "int",
                    "str",
                    "bool",
                    "tuple"
                ]
            }
        },
        "PyUnidirectionalSingleLayerLstm.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "int",
                    "torch.LongTensor",
                    "Union[Tuple[int, int], int]",
                    "bool"
                ],
                "hidden_size": [
                    "int",
                    "torch.LongTensor",
                    "Union[Tuple[int, int], int]",
                    "bool"
                ],
                "cell_size": [
                    "int",
                    "torch.LongTensor",
                    "Union[Tuple[int, int], int]",
                    "bool"
                ],
                "go_forward": [
                    "int",
                    "str",
                    "bool",
                    "List[int]"
                ],
                "truncated_bptt": [
                    "int",
                    "str",
                    "bool",
                    "List[int]"
                ],
                "cell_clip": [
                    "int",
                    "str",
                    "bool",
                    "List[int]"
                ],
                "proj_clip": [
                    "int",
                    "str",
                    "bool",
                    "List[int]"
                ],
                "recurrent_dropout_type": [
                    "bool",
                    "int",
                    "List[str]",
                    "tuple",
                    "str"
                ],
                "recurrent_dropout_probability": [
                    "int",
                    "str",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "PyUnidirectionalSingleLayerLstm.forward": {
            "name": "forward",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Optional[int]",
                    "List[T]"
                ],
                "batch_sizes": [
                    "int",
                    "float",
                    "str",
                    "torch.Tensor"
                ],
                "initial_state": [
                    "torch.Tensor",
                    "int"
                ]
            }
        },
        "PyUnidirectionalLstm.__init__": {
            "name": "__init__",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_layers": [
                    "int",
                    "Optional[int]"
                ],
                "input_size": [
                    "int",
                    "List[float]",
                    "List[str]",
                    "Union[Tuple[int, int], int]"
                ],
                "hidden_size": [
                    "int",
                    "Dict[str, torch.LongTensor]",
                    "Union[Tuple[int, int], int]",
                    "bool"
                ],
                "cell_size": [
                    "int",
                    "Dict[str, torch.LongTensor]",
                    "Union[Tuple[int, int], int]",
                    "bool"
                ],
                "go_forward": [
                    "bool",
                    "str",
                    "FrozenSet[str]",
                    "Optional[List[str]]"
                ],
                "truncated_bptt": [
                    "int",
                    "float",
                    "bool"
                ],
                "cell_clip": [
                    "int",
                    "float",
                    "bool"
                ],
                "proj_clip": [
                    "int",
                    "float",
                    "bool"
                ],
                "recurrent_dropout_type": [
                    "int",
                    "float",
                    "bool"
                ],
                "recurrent_dropout_probability": [
                    "int",
                    "float",
                    "bool"
                ],
                "use_skip_connections": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "PyUnidirectionalLstm.forward": {
            "name": "forward",
            "location": 325,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "torch.Tensor",
                    "List[Dict]",
                    "Optional[str]"
                ],
                "batch_sizes": [
                    "torch.Tensor",
                    "float"
                ],
                "initial_state": [
                    "torch.Tensor",
                    "int"
                ]
            }
        }
    },
    "pytorch-stateful-lstm-master/pytorch_stateful_lstm/__init__.py": {},
    "pytorch-stateful-lstm-master/tests/test_stateful_unidirectional_lstm.py": {
        "test_stateful_unidirectional_lstm": {
            "name": "test_stateful_unidirectional_lstm",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_permutate_states": {
            "name": "test_permutate_states",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pytorch-stateful-lstm-master/tests/test_unidirectional_lstm.py": {
        "test_unidirectional_single_layer_lstm": {
            "name": "test_unidirectional_single_layer_lstm",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_unidirectional_single_layer_lstm_initial_state": {
            "name": "test_unidirectional_single_layer_lstm_initial_state",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_unidirectional_single_layer_lstm_with_allennlp": {
            "name": "test_unidirectional_single_layer_lstm_with_allennlp",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_unidirectional_single_layer_lstm_variational_dropout": {
            "name": "test_unidirectional_single_layer_lstm_variational_dropout",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_unidirectional_single_layer_lstm_dropconnect": {
            "name": "test_unidirectional_single_layer_lstm_dropconnect",
            "location": 226,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_unidirectional_lstm": {
            "name": "test_unidirectional_lstm",
            "location": 277,
            "return": [
                ""
            ],
            "arguments": {}
        }
    }
}
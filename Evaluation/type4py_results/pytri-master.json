{
    "pytri-master/setup.py": {},
    "pytri-master/pytri/layers.py": {
        "Layer.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.get_bounding_box": {
            "name": "get_bounding_box",
            "location": 56,
            "return": [
                "typing.Tuple[Coord3, Coord3]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.get_preferred_camera_view": {
            "name": "get_preferred_camera_view",
            "location": 63,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.group": {
            "name": "group",
            "location": 70,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.affine": {
            "name": "affine",
            "location": 82,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.set_affine": {
            "name": "set_affine",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "Tuple[int, int]",
                    "str",
                    "list",
                    "List[str]"
                ]
            }
        },
        "Layer.rotate": {
            "name": "rotate",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "numpy.ndarray",
                    "int",
                    "float"
                ],
                "y": [
                    "numpy.ndarray",
                    "int",
                    "float"
                ],
                "z": [
                    "numpy.ndarray",
                    "int",
                    "float"
                ],
                "order": [
                    "numpy.ndarray",
                    "int",
                    "float"
                ]
            }
        },
        "Layer.translate": {
            "name": "translate",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "numpy.ndarray",
                    "float"
                ],
                "y": [
                    "int",
                    "numpy.ndarray",
                    "float"
                ],
                "z": [
                    "int",
                    "numpy.ndarray",
                    "float"
                ]
            }
        },
        "Layer.on_click": {
            "name": "on_click",
            "location": 119,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "picker": [
                    "str",
                    "BaseException",
                    "float",
                    "bool",
                    "int"
                ]
            }
        },
        "Layer._on_click": {
            "name": "_on_click",
            "location": 134,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "picker": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "AxesLayer.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "AxesLayer.get_bounding_box": {
            "name": "get_bounding_box",
            "location": 158,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AxesLayer.get_preferred_camera_view": {
            "name": "get_preferred_camera_view",
            "location": 160,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinateLayer.__init__": {
            "name": "__init__",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinateLayer._calc_coord_metrics": {
            "name": "_calc_coord_metrics",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinateLayer.get_bounding_box": {
            "name": "get_bounding_box",
            "location": 178,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoordinateLayer.get_preferred_camera_view": {
            "name": "get_preferred_camera_view",
            "location": 182,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinesLayer.__init__": {
            "name": "__init__",
            "location": 201,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "str",
                    "Optional[int]",
                    "Union[int, str, None]",
                    "Optional[str]"
                ],
                "colors": [
                    "int",
                    "Iterable[Any]",
                    "Optional[int]",
                    "list",
                    "Optional[List[Any]]",
                    "List[Optional['Cell']]"
                ],
                "width": [
                    "int",
                    "List[int]",
                    "str",
                    "bool"
                ]
            }
        },
        "ScatterLayer.__init__": {
            "name": "__init__",
            "location": 262,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphLayer.__init__": {
            "name": "__init__",
            "location": 343,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "int",
                    "Union[int, float]",
                    "Optional[int]",
                    "bool",
                    "float"
                ],
                "pos_attribute": [
                    "int",
                    "Optional[str]",
                    "Optional[float]",
                    "bool",
                    "Optional[Callable]"
                ],
                "pos": [
                    "bool",
                    "int",
                    "Tuple[numpy.dtype]",
                    "Optional[int]"
                ],
                "node_size": [
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "edge_width": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "NeuronMorphologyLayer.__init__": {
            "name": "__init__",
            "location": 388,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "swc": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "ImshowLayer.__init__": {
            "name": "__init__",
            "location": 420,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "image": [
                    "int",
                    "list",
                    "str"
                ],
                "center_pos": [
                    "List[int]",
                    "int",
                    "List[float]",
                    "bool",
                    "List[List[int]]",
                    "str"
                ],
                "rotation": [
                    "str",
                    "List[int]",
                    "int",
                    "Sized",
                    "List[float]",
                    "List[List[int]]",
                    "numpy.ndarray"
                ],
                "width": [
                    "numpy.ndarray",
                    "int",
                    "bool",
                    "float"
                ],
                "height": [
                    "numpy.ndarray",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ImshowLayer.get_bounding_box": {
            "name": "get_bounding_box",
            "location": 466,
            "return": [
                "bool",
                "int",
                "List[bytes]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImshowLayer.get_preferred_camera_view": {
            "name": "get_preferred_camera_view",
            "location": 470,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GridLayer.__init__": {
            "name": "__init__",
            "location": 486,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "plane": [
                    "int",
                    "float",
                    "Optional[int]",
                    "bool"
                ],
                "radius": [
                    "int",
                    "float",
                    "Optional[numpy.ndarray]",
                    "Optional[int]"
                ],
                "grid_size": [
                    "int",
                    "float",
                    "Optional[numpy.ndarray]",
                    "Optional[int]"
                ],
                "color": [
                    "int",
                    "bool",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "MeshLayer.__init__": {
            "name": "__init__",
            "location": 541,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mesh": [
                    "float",
                    "Exception",
                    "str"
                ],
                "obj": [
                    "Optional[float]",
                    "Optional[int]",
                    "mode.utils.Deque[float]"
                ],
                "normalize": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ],
                "color": [
                    "int",
                    "raiden.utils.Locksroot"
                ],
                "alpha": [
                    "int",
                    "List[int]",
                    "List[List[T]]"
                ],
                "transform": [
                    "int",
                    "Optional[int]",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "pytri-master/pytri/utils.py": {
        "_circle_mask": {
            "name": "_circle_mask",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "h": [
                    "str",
                    "Union[Callable, str]",
                    "Dict[str, float]",
                    "Dict[str, Any]",
                    "int"
                ],
                "w": [
                    "str",
                    "Union[Callable, str]",
                    "Dict[str, float]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "_normalize_shift": {
            "name": "_normalize_shift",
            "location": 41,
            "return": [
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "float",
                    "int",
                    "numpy.array"
                ]
            }
        }
    },
    "pytri-master/pytri/__init__.py": {
        "Figure.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "figsize": [
                    "int",
                    "bool",
                    "numpy.ndarray",
                    "List[float]",
                    "Optional[int]"
                ],
                "background": [
                    "int",
                    "Callable",
                    "Dict[str, Any]"
                ],
                "register_default": [
                    "bool",
                    "Optional[List[str]]",
                    "Optional[float]",
                    "Dict[str, str]",
                    "Dict[str, Dict[str, Any]]",
                    "list"
                ]
            }
        },
        "Figure._new_id": {
            "name": "_new_id",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "Figure._layer_decorator": {
            "name": "_layer_decorator",
            "location": 97,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "Figure.register_layer": {
            "name": "register_layer",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "dict",
                    "Type['AbstractIntegrationConversation']",
                    "Optional[str]"
                ],
                "layername": [
                    "Optional[int]",
                    "Optional[str]",
                    "type",
                    "Type['AbstractIntegrationConversation']",
                    "Type[Any]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Figure._add_layer": {
            "name": "_add_layer",
            "location": 112,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "layer": [
                    "str",
                    "bool"
                ]
            }
        },
        "Figure.recenter_camera": {
            "name": "recenter_camera",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[uuid.UUID]",
                    "Optional[numpy.ndarray]"
                ]
            }
        },
        "Figure.remove": {
            "name": "remove",
            "location": 148,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "layer": [
                    "numpy.ndarray",
                    "str",
                    "int",
                    "Sequence[str]",
                    "Iterable[str]",
                    "Set[str]"
                ]
            }
        },
        "Figure.clear": {
            "name": "clear",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Figure._interact_callback": {
            "name": "_interact_callback",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "change": [
                    "List[List[str]]",
                    "str",
                    "list"
                ]
            }
        },
        "Figure.show": {
            "name": "show",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Figure._layer_decorator.fn": {
            "name": "fn",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    }
}
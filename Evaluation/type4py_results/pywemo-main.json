{
    "pywemo-main/pywemo/color.py": {
        "get_profiles": {
            "name": "get_profiles",
            "location": 34,
            "return": [
                "bool",
                "Optional[str]",
                "int",
                "Dict[str, Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "model": [
                    "int",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "is_same_side": {
            "name": "is_same_side",
            "location": 42,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "p1": [
                    "float"
                ],
                "p2": [
                    "float"
                ],
                "a": [
                    "int",
                    "float"
                ],
                "b": [
                    "float"
                ]
            }
        },
        "closest_point": {
            "name": "closest_point",
            "location": 53,
            "return": [
                "int",
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "p": [
                    "bytes",
                    "Sequence[T]",
                    "Sequence[str]"
                ],
                "a": [
                    "int",
                    "List[int]"
                ],
                "b": [
                    "bytes",
                    "Sequence[T]",
                    "Sequence[str]"
                ]
            }
        },
        "limit_to_gamut": {
            "name": "limit_to_gamut",
            "location": 64,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "xy": [
                    "List[int]",
                    "int"
                ],
                "gamut": [
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        }
    },
    "pywemo-main/pywemo/discovery.py": {
        "_call_once_per_uuid": {
            "name": "_call_once_per_uuid",
            "location": 37,
            "return": [],
            "arguments": {
                "uuid": [
                    "bool",
                    "bytes",
                    "dict"
                ],
                "method": [
                    "Callable",
                    "Callable[..., None]",
                    "bool",
                    "Dict[str, Any]",
                    "dict",
                    "T"
                ]
            }
        },
        "discover_devices": {
            "name": "discover_devices",
            "location": 47,
            "return": [
                "List[str]",
                "str",
                "List[dict]",
                "list"
            ],
            "arguments": {
                "debug": [
                    "str",
                    "int",
                    "List[Dict]",
                    "dict"
                ]
            }
        },
        "device_from_description": {
            "name": "device_from_description",
            "location": 56,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[float]",
                "Optional[bool]"
            ],
            "arguments": {
                "description_url": [
                    "str",
                    "dict",
                    "List[str]"
                ],
                "mac": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "List[str]"
                ],
                "debug": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "device_from_uuid_and_location": {
            "name": "device_from_uuid_and_location",
            "location": 81,
            "return": [
                "Optional[str]",
                "list",
                "type",
                "bool"
            ],
            "arguments": {
                "uuid": [
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "location": [
                    "str",
                    "bool",
                    "int",
                    "float"
                ],
                "debug": [
                    "str"
                ]
            }
        },
        "hostname_lookup": {
            "name": "hostname_lookup",
            "location": 156,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "hostname": [
                    "Dict[str, str]",
                    "float",
                    "List[int]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "setup_url_for_address": {
            "name": "setup_url_for_address",
            "location": 175,
            "return": [
                "Optional[int]",
                "Optional[float]",
                "str",
                "Optional[str]",
                "Optional[Any]"
            ],
            "arguments": {
                "host": [
                    "str",
                    "int",
                    "bool"
                ],
                "port": [
                    "int",
                    "str",
                    "dict"
                ]
            }
        }
    },
    "pywemo-main/pywemo/exceptions.py": {
        "SOAPFault.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Optional[str]",
                    "Optional[List[int]]",
                    "int"
                ],
                "fault_element": [
                    "bool",
                    "dict",
                    "Optional[int]"
                ]
            }
        }
    },
    "pywemo-main/pywemo/ssdp.py": {
        "build_ssdp_request": {
            "name": "build_ssdp_request",
            "location": 295,
            "return": [],
            "arguments": {
                "ssdp_st": [],
                "ssdp_mx": []
            }
        },
        "scan": {
            "name": "scan",
            "location": 310,
            "return": [],
            "arguments": {
                "st": [],
                "timeout": [],
                "max_entries": [],
                "match_udn": []
            }
        },
        "SSDP.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SSDP.scan": {
            "name": "scan",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SSDP.all": {
            "name": "all",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SSDP.find_by_st": {
            "name": "find_by_st",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "st": []
            }
        },
        "SSDP.find_by_device_description": {
            "name": "find_by_device_description",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "values": []
            }
        },
        "SSDP.update": {
            "name": "update",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "force_update": []
            }
        },
        "SSDP.remove_expired": {
            "name": "remove_expired",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UPNPEntry.__init__": {
            "name": "__init__",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "values": []
            }
        },
        "UPNPEntry.created": {
            "name": "created",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UPNPEntry.expires": {
            "name": "expires",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UPNPEntry.is_expired": {
            "name": "is_expired",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UPNPEntry.st": {
            "name": "st",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UPNPEntry.location": {
            "name": "location",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UPNPEntry.usn": {
            "name": "usn",
            "location": 202,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UPNPEntry.udn": {
            "name": "udn",
            "location": 207,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UPNPEntry.description": {
            "name": "description",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UPNPEntry.match_device_description": {
            "name": "match_device_description",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "values": []
            }
        },
        "UPNPEntry.from_response": {
            "name": "from_response",
            "location": 265,
            "return": [],
            "arguments": {
                "cls": [],
                "response": []
            }
        },
        "UPNPEntry._key": {
            "name": "_key",
            "location": 275,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UPNPEntry.__eq__": {
            "name": "__eq__",
            "location": 279,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "UPNPEntry.__hash__": {
            "name": "__hash__",
            "location": 283,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UPNPEntry.__repr__": {
            "name": "__repr__",
            "location": 287,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscoveryResponder.__init__": {
            "name": "__init__",
            "location": 404,
            "return": [],
            "arguments": {
                "self": [],
                "callback_port": []
            }
        },
        "DiscoveryResponder.send_notify": {
            "name": "send_notify",
            "location": 416,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscoveryResponder.respond_to_discovery": {
            "name": "respond_to_discovery",
            "location": 432,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscoveryResponder.start": {
            "name": "start",
            "location": 497,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscoveryResponder.stop": {
            "name": "stop",
            "location": 507,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "pywemo-main/pywemo/subscribe.py": {
        "_start_server": {
            "name": "_start_server",
            "location": 247,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "port": [
                    "int",
                    "str"
                ]
            }
        },
        "_cancel_events": {
            "name": "_cancel_events",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "scheduler": [
                    "List[dict]",
                    "int",
                    "str",
                    "bool",
                    "Callable"
                ],
                "subscriptions": [
                    "deoplete.util.UserContext",
                    "bool",
                    "float"
                ]
            }
        },
        "Subscription.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "str",
                    "int",
                    "float",
                    "Optional[Callable[[Any], None]]"
                ],
                "callback_port": [
                    "bool",
                    "float",
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "service_name": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Subscription.__repr__": {
            "name": "__repr__",
            "location": 110,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Subscription.maintain": {
            "name": "maintain",
            "location": 114,
            "return": [
                "Optional[Exception]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Subscription._subscribe": {
            "name": "_subscribe",
            "location": 152,
            "return": [
                "List[str]",
                "int",
                "Dict[str, str]",
                "bytes",
                "Dict[str, Any]",
                "robot_server.service.json_api.resource_links.ResourceLinks",
                "Optional[Mapping[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Subscription._unsubscribe": {
            "name": "_unsubscribe",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Subscription._update_subscription": {
            "name": "_update_subscription",
            "location": 191,
            "return": [
                "bytes",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "django.http.HttpRequest",
                    "apistar.http.Headers",
                    "dict",
                    "eth.abc.BlockHeaderAPI"
                ]
            }
        },
        "Subscription._reset_subscription": {
            "name": "_reset_subscription",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Subscription.url": {
            "name": "url",
            "location": 218,
            "return": [
                "str",
                "IO",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Subscription.path": {
            "name": "path",
            "location": 223,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Subscription.is_subscribed": {
            "name": "is_subscribed",
            "location": 228,
            "return": [
                "bool",
                "Callable[[], str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestHandler.do_NOTIFY": {
            "name": "do_NOTIFY",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestHandler.do_GET": {
            "name": "do_GET",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestHandler.do_POST": {
            "name": "do_POST",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestHandler.do_SUBSCRIBE": {
            "name": "do_SUBSCRIBE",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestHandler._send_response": {
            "name": "_send_response",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "Callable[[], bool]",
                    "List[\"libkol.Item\"]"
                ],
                "body": [
                    "str"
                ]
            }
        },
        "RequestHandler._get_xml_from_http_body": {
            "name": "_get_xml_from_http_body",
            "location": 408,
            "return": [
                "dict",
                "Dict[str, Any]",
                "str",
                "IO"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestHandler.log_message": {
            "name": "log_message",
            "location": 417,
            "return": [
                "Generator[Tuple[int, Any], None, None]",
                "Iterator[Dict[str, Any]]",
                "Generator",
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "format": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "SubscriptionRegistry.__init__": {
            "name": "__init__",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requested_port": [
                    "int",
                    "Callable[..., None]",
                    "apistar.http.Headers",
                    "Optional[str]",
                    "apistar.http.Request",
                    "requests.Response",
                    "mitmproxy.http.HTTPFlow",
                    "bool"
                ]
            }
        },
        "SubscriptionRegistry.port": {
            "name": "port",
            "location": 459,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubscriptionRegistry.register": {
            "name": "register",
            "location": 464,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "str",
                    "int"
                ]
            }
        },
        "SubscriptionRegistry.unregister": {
            "name": "unregister",
            "location": 482,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "str",
                    "logging.Logger",
                    "bool"
                ]
            }
        },
        "SubscriptionRegistry._resubscribe": {
            "name": "_resubscribe",
            "location": 501,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subscription": [
                    "str",
                    "int",
                    "float"
                ],
                "retry": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "SubscriptionRegistry._schedule": {
            "name": "_schedule",
            "location": 522,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "delay": [
                    "int",
                    "list"
                ],
                "subscription": [
                    "int"
                ]
            }
        },
        "SubscriptionRegistry.event": {
            "name": "event",
            "location": 544,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "str",
                    "List[openapi_core.exceptions.OpenAPIError]",
                    "Optional[str]"
                ],
                "type_": [
                    "str"
                ],
                "value": [
                    "str"
                ],
                "path": [
                    "str",
                    "List[Exception]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "SubscriptionRegistry.on": {
            "name": "on",
            "location": 572,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "dict",
                    "str",
                    "Type",
                    "Sequence[Any]",
                    "Union[str, List[str]]"
                ],
                "type_filter": [
                    "dict",
                    "str",
                    "Type",
                    "Sequence[Any]",
                    "Union[str, List[str]]"
                ],
                "callback": [
                    "dict",
                    "str",
                    "Type",
                    "Sequence[Any]",
                    "Union[str, List[str]]"
                ]
            }
        },
        "SubscriptionRegistry.is_subscribed": {
            "name": "is_subscribed",
            "location": 578,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "bool",
                    "int"
                ]
            }
        },
        "SubscriptionRegistry.start": {
            "name": "start",
            "location": 596,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubscriptionRegistry.stop": {
            "name": "stop",
            "location": 615,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubscriptionRegistry.join": {
            "name": "join",
            "location": 632,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubscriptionRegistry._run_http_server": {
            "name": "_run_http_server",
            "location": 638,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubscriptionRegistry._run_event_loop": {
            "name": "_run_event_loop",
            "location": 646,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubscriptionRegistry.__init__.sleep": {
            "name": "sleep",
            "location": 448,
            "return": [],
            "arguments": {
                "secs": []
            }
        }
    },
    "pywemo-main/pywemo/util.py": {
        "etree_to_dict": {
            "name": "etree_to_dict",
            "location": 17,
            "return": [],
            "arguments": {
                "tree": []
            }
        },
        "interface_addresses": {
            "name": "interface_addresses",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "get_callback_address": {
            "name": "get_callback_address",
            "location": 73,
            "return": [],
            "arguments": {
                "host": [],
                "port": []
            }
        },
        "signal_strength_to_dbm": {
            "name": "signal_strength_to_dbm",
            "location": 89,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "MetaInfo.from_meta_info": {
            "name": "from_meta_info",
            "location": 131,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "ExtMetaInfo.from_ext_meta_info": {
            "name": "from_ext_meta_info",
            "location": 156,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        }
    },
    "pywemo-main/pywemo/__init__.py": {},
    "pywemo-main/pywemo/ouimeaux_device/bridge.py": {
        "limit": {
            "name": "limit",
            "location": 37,
            "return": [
                "int",
                "Optional[int]",
                "List[int]",
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "float",
                    "int",
                    "Tuple[Hashable]"
                ],
                "min_val": [
                    "str",
                    "float",
                    "int",
                    "Tuple[Hashable]"
                ],
                "max_val": [
                    "str",
                    "float",
                    "int",
                    "Tuple[Hashable]"
                ]
            }
        },
        "Bridge.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bridge.__repr__": {
            "name": "__repr__",
            "location": 55,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bridge._required_services": {
            "name": "_required_services",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bridge.bridge_update": {
            "name": "bridge_update",
            "location": 73,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "force_update": [
                    "Optional[bool]",
                    "dict",
                    "int",
                    "Optional[int]",
                    "Optional[\"Response\"]"
                ]
            }
        },
        "Bridge.get_state": {
            "name": "get_state",
            "location": 111,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "force_update": [
                    "bool",
                    "Optional[bool]",
                    "Optional[Tuple[int, int]]",
                    "Dict[str, kedro.io.core.AbstractDataSet]",
                    "List[Tuple[bytes, bytes]]"
                ]
            }
        },
        "Bridge.subscription_update": {
            "name": "subscription_update",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "_type": [
                    "str",
                    "Union[str, 'Type']",
                    "Hashable"
                ],
                "_param": [
                    "Callable",
                    "str"
                ]
            }
        },
        "Bridge.bridge_getdevicestatus": {
            "name": "bridge_getdevicestatus",
            "location": 133,
            "return": [
                "Optional[int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "deviceid": [
                    "Optional[str]",
                    "dict",
                    "bytearray",
                    "int",
                    "List[str]"
                ]
            }
        },
        "Bridge.bridge_setdevicestatus": {
            "name": "bridge_setdevicestatus",
            "location": 145,
            "return": [
                "Sequence[int]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "isgroup": [
                    "Optional[str]",
                    "str",
                    "Callable"
                ],
                "deviceid": [
                    "str",
                    "int",
                    "set",
                    "Dict[str, object]",
                    "List[str]"
                ],
                "capids": [
                    "str",
                    "bool",
                    "list",
                    "Optional[str]"
                ],
                "values": [
                    "str",
                    "list",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "LinkedDevice.__init__": {
            "name": "__init__",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bridge": [
                    "bool",
                    "str",
                    "Tuple[str, str]",
                    "Dict[str, Any]",
                    "int"
                ],
                "info": [
                    "bob_emploi.frontend.api.user_pb2.User",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "LinkedDevice.get_state": {
            "name": "get_state",
            "location": 201,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "force_update": [
                    "list",
                    "List[str]",
                    "List[Dict]",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "LinkedDevice.update_state": {
            "name": "update_state",
            "location": 207,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "Callable",
                    "str",
                    "Optional[SupportsFloat]",
                    "Optional[int]",
                    "Union[List[str], List[Any]]",
                    "Optional[List[Any]]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "LinkedDevice.subscription_update": {
            "name": "subscription_update",
            "location": 247,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "state_event": []
            }
        },
        "LinkedDevice._setdevicestatus": {
            "name": "_setdevicestatus",
            "location": 276,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedDevice.turn_on": {
            "name": "turn_on",
            "location": 294,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "bool",
                    "str",
                    "Callable",
                    "Union[str, Tuple[str, str]]"
                ],
                "transition": [
                    "bool",
                    "str",
                    "Callable",
                    "Union[str, Tuple[str, str]]"
                ],
                "force_update": [
                    "bool",
                    "str",
                    "Callable",
                    "Union[str, Tuple[str, str]]"
                ]
            }
        },
        "LinkedDevice.turn_off": {
            "name": "turn_off",
            "location": 303,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "LinkedDevice.toggle": {
            "name": "toggle",
            "location": 307,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedDevice.device_type": {
            "name": "device_type",
            "location": 312,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedDevice.__repr__": {
            "name": "__repr__",
            "location": 316,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Light.__init__": {
            "name": "__init__",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bridge": [
                    "bool",
                    "str"
                ],
                "info": [
                    "List[str]",
                    "Exception",
                    "annotations.Handler",
                    "Collection[str]",
                    "bool"
                ]
            }
        },
        "Light._queuedevicestatus": {
            "name": "_queuedevicestatus",
            "location": 339,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "queue": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Light.update_state": {
            "name": "update_state",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str",
                    "int"
                ]
            }
        },
        "Light.turn_on": {
            "name": "turn_on",
            "location": 370,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "Optional[dict]",
                    "Optional[float]",
                    "Optional[Sequence[Any]]",
                    "Union[int, str, None]"
                ],
                "transition": [
                    "int",
                    "Union[int, str]",
                    "float"
                ],
                "force_update": [
                    "int"
                ]
            }
        },
        "Light.turn_off": {
            "name": "turn_off",
            "location": 407,
            "return": [
                "Dict[str, int]",
                "str",
                "Optional[int]",
                "Optional[bool]",
                "Generator"
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "Light.set_temperature": {
            "name": "set_temperature",
            "location": 419,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "kelvin": [
                    "int",
                    "float",
                    "bool",
                    "str"
                ],
                "mireds": [
                    "Optional[List[str]]",
                    "Optional[float]",
                    "Union[str, int]",
                    "Optional[int]"
                ],
                "transition": [
                    "str",
                    "int",
                    "Union[bytes, str, SupportsInt]",
                    "Iterable[Any]"
                ],
                "delay": [
                    "str",
                    "float"
                ]
            }
        },
        "Light.set_color": {
            "name": "set_color",
            "location": 435,
            "return": [
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "colorxy": [
                    "int",
                    "List[int]",
                    "float",
                    "str"
                ],
                "transition": [
                    "str",
                    "int",
                    "Union[bytes, str, SupportsInt]",
                    "Iterable[Any]"
                ],
                "delay": [
                    "int",
                    "float",
                    "List[str]",
                    "dict",
                    "Tuple[float, float]"
                ]
            }
        },
        "Light.start_ramp": {
            "name": "start_ramp",
            "location": 447,
            "return": [
                "int",
                "Tuple[str, str]",
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "ramp_up": [
                    "Callable",
                    "bool",
                    "float",
                    "int",
                    "Callable[[], None]",
                    "str"
                ],
                "rate": [
                    "int",
                    "float"
                ]
            }
        },
        "Light.stop_ramp": {
            "name": "stop_ramp",
            "location": 453,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.__init__": {
            "name": "__init__",
            "location": 461,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bridge": [
                    "bool",
                    "str"
                ],
                "info": [
                    "Dict[str, str]",
                    "kedro.io.DataCatalog",
                    "Exception",
                    "Dict[str, Any]",
                    "str",
                    "bool"
                ]
            }
        },
        "Group.update_state": {
            "name": "update_state",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "pywemo-main/pywemo/ouimeaux_device/coffeemaker.py": {
        "CoffeeMakerMode._missing_": {
            "name": "_missing_",
            "location": 32,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "int"
                ],
                "value": [
                    "dict",
                    "T",
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "CoffeeMaker.mode": {
            "name": "mode",
            "location": 55,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoffeeMaker.mode_string": {
            "name": "mode_string",
            "location": 60,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoffeeMaker.get_state": {
            "name": "get_state",
            "location": 64,
            "return": [
                "str",
                "bool",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "force_update": [
                    "bool",
                    "str"
                ]
            }
        },
        "CoffeeMaker.set_state": {
            "name": "set_state",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "pywemo-main/pywemo/ouimeaux_device/crockpot.py": {
        "CrockPotMode._missing_": {
            "name": "_missing_",
            "location": 27,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "int"
                ],
                "value": [
                    "dict",
                    "T",
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "CrockPot.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CrockPot._required_services": {
            "name": "_required_services",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CrockPot.update_attributes": {
            "name": "update_attributes",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CrockPot.subscription_update": {
            "name": "subscription_update",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "_type": [
                    "str",
                    "bool"
                ],
                "_params": [
                    "str",
                    "Union[str, List[str]]",
                    "Type",
                    "Type[Any]"
                ]
            }
        },
        "CrockPot.mode": {
            "name": "mode",
            "location": 89,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CrockPot.mode_string": {
            "name": "mode_string",
            "location": 94,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CrockPot.remaining_time": {
            "name": "remaining_time",
            "location": 99,
            "return": [
                "str",
                "Tuple[bool, bool, bool]",
                "bool",
                "Optional[List[Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CrockPot.cooked_time": {
            "name": "cooked_time",
            "location": 104,
            "return": [
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CrockPot.get_state": {
            "name": "get_state",
            "location": 108,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "force_update": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Dict]"
                ]
            }
        },
        "CrockPot.set_state": {
            "name": "set_state",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "str"
                ]
            }
        },
        "CrockPot.update_settings": {
            "name": "update_settings",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str",
                    "int"
                ],
                "time": [
                    "int",
                    "List[int]",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "pywemo-main/pywemo/ouimeaux_device/dimmer.py": {
        "Dimmer._required_services": {
            "name": "_required_services",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dimmer.get_brightness": {
            "name": "get_brightness",
            "location": 22,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "force_update": [
                    "Mapping",
                    "int",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "Dimmer.set_brightness": {
            "name": "set_brightness",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "brightness": [
                    "int",
                    "bytes",
                    "float",
                    "Tuple[int]"
                ]
            }
        },
        "Dimmer.get_state": {
            "name": "get_state",
            "location": 50,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "force_update": [
                    "List[Tuple[bytes, bytes]]",
                    "bool",
                    "Iterable[\"Entity\"]",
                    "Dict[int, int]",
                    "Optional[bool]",
                    "Optional[Tuple[int, int]]"
                ]
            }
        },
        "Dimmer.subscription_update": {
            "name": "subscription_update",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "_type": [
                    "str",
                    "Optional[str]",
                    "Type['Payload']"
                ],
                "_param": [
                    "Type",
                    "str"
                ]
            }
        }
    },
    "pywemo-main/pywemo/ouimeaux_device/humidifier.py": {
        "FanMode._missing_": {
            "name": "_missing_",
            "location": 27,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "int"
                ],
                "value": [
                    "dict",
                    "T",
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "DesiredHumidity._missing_": {
            "name": "_missing_",
            "location": 53,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "int"
                ],
                "value": [
                    "dict",
                    "T",
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Humidifier.fan_mode": {
            "name": "fan_mode",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Humidifier.fan_mode_string": {
            "name": "fan_mode_string",
            "location": 95,
            "return": [
                "List[str]",
                "tuple",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Humidifier.desired_humidity": {
            "name": "desired_humidity",
            "location": 103,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Humidifier.desired_humidity_percent": {
            "name": "desired_humidity_percent",
            "location": 110,
            "return": [
                "int",
                "Iterable[str]",
                "IO[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Humidifier.current_humidity_percent": {
            "name": "current_humidity_percent",
            "location": 115,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Humidifier.water_level": {
            "name": "water_level",
            "location": 120,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Humidifier.water_level_string": {
            "name": "water_level_string",
            "location": 129,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Humidifier.filter_life_percent": {
            "name": "filter_life_percent",
            "location": 134,
            "return": [
                "bool",
                "float",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Humidifier.filter_expired": {
            "name": "filter_expired",
            "location": 140,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Humidifier.get_state": {
            "name": "get_state",
            "location": 144,
            "return": [
                "str",
                "bool",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "force_update": [
                    "Dict[int, int]",
                    "int",
                    "dict"
                ]
            }
        },
        "Humidifier.set_state": {
            "name": "set_state",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Optional[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "Humidifier.set_fan_mode": {
            "name": "set_fan_mode",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fan_mode": [
                    "str"
                ]
            }
        },
        "Humidifier.set_humidity": {
            "name": "set_humidity",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "desired_humidity": [
                    "str",
                    "bytearray"
                ]
            }
        },
        "Humidifier.set_fan_mode_and_humidity": {
            "name": "set_fan_mode_and_humidity",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fan_mode": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "desired_humidity": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Humidifier.reset_filter_life": {
            "name": "reset_filter_life",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pywemo-main/pywemo/ouimeaux_device/insight.py": {
        "StandbyState._missing_": {
            "name": "_missing_",
            "location": 26,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "int"
                ],
                "value": [
                    "dict",
                    "T",
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Insight.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Insight._required_services": {
            "name": "_required_services",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Insight.update_insight_params": {
            "name": "update_insight_params",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Insight.subscription_update": {
            "name": "subscription_update",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "_type": [
                    "bool",
                    "str",
                    "Type[Any]",
                    "Sequence[Any]",
                    "Dict[str, Any]",
                    "Type"
                ],
                "_params": [
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "Insight.parse_insight_params": {
            "name": "parse_insight_params",
            "location": 94,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "params": [
                    "str"
                ]
            }
        },
        "Insight.get_state": {
            "name": "get_state",
            "location": 122,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "force_update": [
                    "Optional[Tuple[int, int]]",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Insight.set_state": {
            "name": "set_state",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "T"
                ]
            }
        },
        "Insight.today_kwh": {
            "name": "today_kwh",
            "location": 135,
            "return": [
                "str",
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Insight.total_kwh": {
            "name": "total_kwh",
            "location": 140,
            "return": [
                "str",
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Insight.current_power": {
            "name": "current_power",
            "location": 145,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Insight.current_power_watts": {
            "name": "current_power_watts",
            "location": 150,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Insight.wifi_power": {
            "name": "wifi_power",
            "location": 155,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Insight.threshold_power": {
            "name": "threshold_power",
            "location": 160,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Insight.threshold_power_watts": {
            "name": "threshold_power_watts",
            "location": 168,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Insight.today_on_time": {
            "name": "today_on_time",
            "location": 173,
            "return": [
                "float",
                "str",
                "int",
                "Union[str, int, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Insight.today_standby_time": {
            "name": "today_standby_time",
            "location": 178,
            "return": [
                "float",
                "str",
                "int",
                "Union[str, int, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Insight.total_on_time": {
            "name": "total_on_time",
            "location": 189,
            "return": [
                "float",
                "str",
                "int",
                "Union[str, int, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Insight.on_for": {
            "name": "on_for",
            "location": 194,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Insight.last_change": {
            "name": "last_change",
            "location": 199,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Insight.standby_state": {
            "name": "standby_state",
            "location": 204,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Insight.get_standby_state": {
            "name": "get_standby_state",
            "location": 209,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pywemo-main/pywemo/ouimeaux_device/lightswitch.py": {},
    "pywemo-main/pywemo/ouimeaux_device/maker.py": {
        "Maker.maker_params": {
            "name": "maker_params",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maker._required_services": {
            "name": "_required_services",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maker.update_maker_params": {
            "name": "update_maker_params",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maker.set_state": {
            "name": "set_state",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "int",
                    "float"
                ]
            }
        },
        "Maker.switch_state": {
            "name": "switch_state",
            "location": 53,
            "return": [
                "int",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maker.sensor_state": {
            "name": "sensor_state",
            "location": 58,
            "return": [
                "int",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maker.switch_mode": {
            "name": "switch_mode",
            "location": 63,
            "return": [
                "str",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maker.has_sensor": {
            "name": "has_sensor",
            "location": 68,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pywemo-main/pywemo/ouimeaux_device/motion.py": {},
    "pywemo-main/pywemo/ouimeaux_device/outdoor_plug.py": {},
    "pywemo-main/pywemo/ouimeaux_device/switch.py": {
        "Switch._required_services": {
            "name": "_required_services",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Switch.set_state": {
            "name": "set_state",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "int",
                    "float",
                    "Tuple[int]"
                ]
            }
        },
        "Switch.off": {
            "name": "off",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Switch.on": {
            "name": "on",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Switch.toggle": {
            "name": "toggle",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pywemo-main/pywemo/ouimeaux_device/__init__.py": {
        "probe_wemo": {
            "name": "probe_wemo",
            "location": 41,
            "return": [
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "host": [
                    "float",
                    "int",
                    "str"
                ],
                "ports": [
                    "int",
                    "bool",
                    "str",
                    "Iterable[Any]"
                ],
                "probe_timeout": [
                    "int",
                    "Optional[int]"
                ],
                "match_udn": [
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "probe_device": {
            "name": "probe_device",
            "location": 92,
            "return": [
                "str",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "device": [
                    "int",
                    "str",
                    "Mapping[str, str]",
                    "Optional[int]"
                ]
            }
        },
        "Device.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "int"
                ],
                "mac": [
                    "Optional[requests.sessions.Session]",
                    "bool",
                    "Dict[str, Iterable[Any]]",
                    "Optional[List[str]]"
                ]
            }
        },
        "Device._required_services": {
            "name": "_required_services",
            "location": 138,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device._reconnect_with_device_by_discovery": {
            "name": "_reconnect_with_device_by_discovery",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device._reconnect_with_device_by_probing": {
            "name": "_reconnect_with_device_by_probing",
            "location": 164,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.reconnect_with_device": {
            "name": "reconnect_with_device",
            "location": 176,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.parse_basic_state": {
            "name": "parse_basic_state",
            "location": 189,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "params": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Device.update_binary_state": {
            "name": "update_binary_state",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.subscription_update": {
            "name": "subscription_update",
            "location": 202,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "_type": [
                    "str",
                    "bool"
                ],
                "_params": [
                    "str",
                    "werkzeug.exceptions.BadRequest",
                    "werkzeug.exceptions.Forbidden",
                    "werkzeug.exceptions.NotFound"
                ]
            }
        },
        "Device.get_state": {
            "name": "get_state",
            "location": 219,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "force_update": [
                    "Dict[str, Optional[str]]",
                    "Optional[str]",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "Device.get_service": {
            "name": "get_service",
            "location": 233,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Tuple[str, str]",
                    "dict"
                ]
            }
        },
        "Device.list_services": {
            "name": "list_services",
            "location": 240,
            "return": [
                "List[str]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.explain": {
            "name": "explain",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.reset": {
            "name": "reset",
            "location": 259,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "dict",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "List['PlotInfo']"
                ],
                "wifi": [
                    "str",
                    "List['PlotInfo']"
                ]
            }
        },
        "Device.factory_reset": {
            "name": "factory_reset",
            "location": 320,
            "return": [
                "bool",
                "Dict[str, Any]",
                "tuple",
                "Dict[int, dict]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.encrypt_aes128": {
            "name": "encrypt_aes128",
            "location": 325,
            "return": [
                "str",
                "bool",
                "tuple"
            ],
            "arguments": {
                "password": [
                    "str",
                    "Dict[str, Union[int, Any, bool]]",
                    "Union[int, float]",
                    "int",
                    "List[str]"
                ],
                "wemo_metadata": [
                    "bool"
                ],
                "is_rtos": [
                    "Optional[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "Device.setup": {
            "name": "setup",
            "location": 414,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device._setup": {
            "name": "_setup",
            "location": 477,
            "return": [
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "ssid": [
                    "str"
                ],
                "password": [
                    "int",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "timeout": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Dict[str, str]",
                    "int"
                ],
                "connection_attempts": [
                    "str"
                ],
                "status_delay": [
                    "str",
                    "Optional[int]",
                    "int",
                    "bool"
                ]
            }
        },
        "Device.supports_long_press": {
            "name": "supports_long_press",
            "location": 673,
            "return": [
                "str",
                "Pattern",
                "int",
                "OrderedDict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[int]",
                    "bool",
                    "Type",
                    "complex",
                    "bytes"
                ]
            }
        },
        "Device.host": {
            "name": "host",
            "location": 678,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.port": {
            "name": "port",
            "location": 683,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.serialnumber": {
            "name": "serialnumber",
            "location": 688,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.device_type": {
            "name": "device_type",
            "location": 698,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.__repr__": {
            "name": "__repr__",
            "location": 702,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pywemo-main/pywemo/ouimeaux_device/api/attributes.py": {
        "_is_int_or_float": {
            "name": "_is_int_or_float",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "AttributeDevice.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttributeDevice._required_services": {
            "name": "_required_services",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttributeDevice._update_attributes_dict": {
            "name": "_update_attributes_dict",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "xml_blob": [
                    "Union[str, Dict]",
                    "str"
                ]
            }
        },
        "AttributeDevice.update_attributes": {
            "name": "update_attributes",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttributeDevice.subscription_update": {
            "name": "subscription_update",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "_type": [
                    "List[str]",
                    "list",
                    "int",
                    "Optional[Type]",
                    "str"
                ],
                "_params": [
                    "int",
                    "dict",
                    "Dict[str, Any]",
                    "Type",
                    "bytes"
                ]
            }
        },
        "AttributeDevice.get_state": {
            "name": "get_state",
            "location": 82,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "force_update": [
                    "Dict[str, Optional[str]]",
                    "Optional[str]",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "AttributeDevice._set_attributes": {
            "name": "_set_attributes",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pywemo-main/pywemo/ouimeaux_device/api/db_orm.py": {
        "DatabaseRow.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseRow.__setattr__": {
            "name": "__setattr__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "int",
                    "Dict[str, str]"
                ],
                "value": [
                    "str",
                    "bool",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "DatabaseRow.__repr__": {
            "name": "__repr__",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseRow.__eq__": {
            "name": "__eq__",
            "location": 44,
            "return": [
                "Dict[str, Any]",
                "Tuple[str, str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "DatabaseRow.modified": {
            "name": "modified",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseRow.from_sqlite_row": {
            "name": "from_sqlite_row",
            "location": 54,
            "return": [
                "str",
                "Set[str]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "dict",
                    "int",
                    "str",
                    "float"
                ],
                "row": []
            }
        },
        "DatabaseRow.select_all": {
            "name": "select_all",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "dict",
                    "Dict[str, Any]"
                ],
                "cursor": [
                    "str",
                    "dict"
                ]
            }
        },
        "DatabaseRow.create_sqlite_table_from_row_schema": {
            "name": "create_sqlite_table_from_row_schema",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "bool",
                    "dict",
                    "Dict[str, str]"
                ],
                "cursor": [
                    "Dict[str, Any]",
                    "List[int]",
                    "list",
                    "int"
                ]
            }
        },
        "DatabaseRow.primary_key_name": {
            "name": "primary_key_name",
            "location": 87,
            "return": [
                "str",
                "Optional[str]",
                "List[str]",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseRow.primary_key_value": {
            "name": "primary_key_value",
            "location": 94,
            "return": [
                "str",
                "BaseException",
                "Exception",
                "Type[BaseException]",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseRow.update_db": {
            "name": "update_db",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cursor": [
                    "str",
                    "List[Dict[str, Any]]",
                    "Callable[[T], bool]",
                    "dict"
                ]
            }
        },
        "DatabaseRow.remove_from_db": {
            "name": "remove_from_db",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cursor": [
                    "dict",
                    "List[str]"
                ]
            }
        },
        "SQLType.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type_constructor": []
            }
        },
        "SQLType.__call__": {
            "name": "__call__",
            "location": 170,
            "return": [
                "bool",
                "Type"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "SQLType.sql_type": {
            "name": "sql_type",
            "location": 175,
            "return": [
                "str",
                "dict",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrimaryKey.__init__": {
            "name": "__init__",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PrimaryKey.sql_type": {
            "name": "sql_type",
            "location": 191,
            "return": [
                "str",
                "list",
                "T",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pywemo-main/pywemo/ouimeaux_device/api/long_press.py": {
        "ensure_long_press_rule_exists": {
            "name": "ensure_long_press_rule_exists",
            "location": 36,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "rules_db": [
                    "str",
                    "Mapping[str, Any]",
                    "Optional[str]"
                ],
                "device_name": [
                    "str",
                    "Callable",
                    "Dict[str, Dict[str, Any]]",
                    "dict"
                ],
                "device_udn": [
                    "float",
                    "str",
                    "int",
                    "Optional[Dict]"
                ]
            }
        },
        "LongPressMixin._required_services": {
            "name": "_required_services",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LongPressMixin.list_long_press_udns": {
            "name": "list_long_press_udns",
            "location": 102,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LongPressMixin.add_long_press_udns": {
            "name": "add_long_press_udns",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device_udns": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "LongPressMixin.remove_long_press_udns": {
            "name": "remove_long_press_udns",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device_udns": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "LongPressMixin.get_long_press_action": {
            "name": "get_long_press_action",
            "location": 135,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LongPressMixin.set_long_press_action": {
            "name": "set_long_press_action",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "float",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "LongPressMixin.ensure_long_press_virtual_device": {
            "name": "ensure_long_press_virtual_device",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LongPressMixin.remove_long_press_virtual_device": {
            "name": "remove_long_press_virtual_device",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pywemo-main/pywemo/ouimeaux_device/api/rules_db.py": {
        "rules_db_from_device": {
            "name": "rules_db_from_device",
            "location": 354,
            "return": [
                "RulesDb"
            ],
            "arguments": {
                "device": [
                    "Dict[str, Any]"
                ]
            }
        },
        "_unpack_db": {
            "name": "_unpack_db",
            "location": 421,
            "return": [
                "str",
                "Dict[str, str]",
                "List[str]"
            ],
            "arguments": {
                "content": [
                    "bytes",
                    "str"
                ],
                "db_file": [
                    "str",
                    "io.BytesIO"
                ]
            }
        },
        "_pack_db": {
            "name": "_pack_db",
            "location": 433,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "db_file": [
                    "str"
                ],
                "inner_file_name": [
                    "str"
                ]
            }
        },
        "_index_by_primary_key": {
            "name": "_index_by_primary_key",
            "location": 443,
            "return": [
                "str",
                "dict",
                "int",
                "Dict[str, Any]",
                "Dict[str, Tuple[int, int]]",
                "Dict[str, Callable[[], Any]]",
                "bool"
            ],
            "arguments": {
                "rows": [
                    "Iterable[Dict]",
                    "List[dict]"
                ]
            }
        },
        "_create_empty_db": {
            "name": "_create_empty_db",
            "location": 455,
            "return": [
                "Optional[int]",
                "Callable",
                "Sequence[str]",
                "bytes"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ]
            }
        },
        "RulesDb.__init__": {
            "name": "__init__",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sql_db": [
                    "bool",
                    "dict",
                    "Optional[str]"
                ],
                "default_udn": [
                    "bool",
                    "dict",
                    "Optional[str]"
                ],
                "device_name": [
                    "bool",
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, object]",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "RulesDb.db": {
            "name": "db",
            "location": 186,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "RulesDb.cursor": {
            "name": "cursor",
            "location": 190,
            "return": [
                "str",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RulesDb.rules": {
            "name": "rules",
            "location": 195,
            "return": [
                "tuple",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RulesDb.add_rule": {
            "name": "add_rule",
            "location": 199,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "bool",
                    "str"
                ]
            }
        },
        "RulesDb.remove_rule": {
            "name": "remove_rule",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "SupportsInt",
                    "int"
                ]
            }
        },
        "RulesDb.rule_devices": {
            "name": "rule_devices",
            "location": 215,
            "return": [
                "tuple",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RulesDb.add_rule_devices": {
            "name": "add_rule_devices",
            "location": 219,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "rule_devices": [
                    "List[List[int]]",
                    "bool",
                    "Optional[float]",
                    "dict"
                ]
            }
        },
        "RulesDb.remove_rule_devices": {
            "name": "remove_rule_devices",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rule_devices": [
                    "Callable"
                ]
            }
        },
        "RulesDb.target_devices": {
            "name": "target_devices",
            "location": 233,
            "return": [
                "tuple",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RulesDb.add_target_devices": {
            "name": "add_target_devices",
            "location": 237,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "target_devices": [
                    "str"
                ]
            }
        },
        "RulesDb.remove_target_devices": {
            "name": "remove_target_devices",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target_devices": [
                    "int",
                    "str"
                ]
            }
        },
        "RulesDb.update_if_modified": {
            "name": "update_if_modified",
            "location": 252,
            "return": [
                "float",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RulesDb.rules_for_device": {
            "name": "rules_for_device",
            "location": 272,
            "return": [
                "str",
                "Type[T]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RulesDb.get_target_devices_for_rule": {
            "name": "get_target_devices_for_rule",
            "location": 292,
            "return": [
                "int",
                "List[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "int",
                    "Union[str, int]"
                ]
            }
        },
        "RulesDb.add_target_device_to_rule": {
            "name": "add_target_device_to_rule",
            "location": 302,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "bytes",
                    "int"
                ],
                "device_id": [
                    "str",
                    "int",
                    "bytearray",
                    "Optional[bool]",
                    "Optional[int]"
                ]
            }
        },
        "RulesDb.remove_target_device_from_rule": {
            "name": "remove_target_device_from_rule",
            "location": 325,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "int",
                    "Union[str, List[str]]",
                    "str",
                    "Optional[int]"
                ],
                "device_id": [
                    "str",
                    "int",
                    "Union[str, List[str]]",
                    "itsim.types.Address"
                ]
            }
        },
        "RulesDb.clear_all": {
            "name": "clear_all",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RulesDb.update_if_modified.update": {
            "name": "update",
            "location": 260,
            "return": [
                ""
            ],
            "arguments": {
                "rows": [
                    "List[str]",
                    "list",
                    "bool",
                    "List[Dict]",
                    "Iterable[str]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "pywemo-main/pywemo/ouimeaux_device/api/service.py": {
        "Session.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Optional[str]",
                    "int",
                    "Tuple[int, int]",
                    "bool",
                    "Dict[str, str]"
                ],
                "retries": [
                    "Optional[int]",
                    "Optional[Union[str, Any]]",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "timeout": [
                    "Optional[Union[str, Any]]",
                    "Optional[int]",
                    "Optional[bool]",
                    "Optional[str]",
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "Session.request": {
            "name": "request",
            "location": 91,
            "return": [
                "dict",
                "Optional[str]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Dict[str, str]"
                ],
                "url": [
                    "str"
                ],
                "retries": [
                    "Optional[Union[str, Any]]",
                    "Optional[int]",
                    "Optional[str]",
                    "bool",
                    "Optional[bool]",
                    "int"
                ],
                "timeout": [
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[int]",
                    "int",
                    "Optional[List[str]]"
                ]
            }
        },
        "Session.get": {
            "name": "get",
            "location": 136,
            "return": [
                "int",
                "bytes",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Session.post": {
            "name": "post",
            "location": 140,
            "return": [
                "dict",
                "Exception",
                "Optional[Dict[str, Any]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "Session.urljoin": {
            "name": "urljoin",
            "location": 144,
            "return": [
                "str",
                "List[int]",
                "Tuple[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Session.url": {
            "name": "url",
            "location": 154,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "Session.port": {
            "name": "port",
            "location": 163,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Session.host": {
            "name": "host",
            "location": 168,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Action.__init__": {
            "name": "__init__",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "service": [
                    "Dict[str, Any]",
                    "dict",
                    "Type[T]",
                    "str"
                ],
                "action_config": []
            }
        },
        "Action.__call__": {
            "name": "__call__",
            "location": 209,
            "return": [
                "Dict[str, Any]",
                "bool",
                "\"GraphTuple\""
            ],
            "arguments": {
                "self": []
            }
        },
        "Action.__repr__": {
            "name": "__repr__",
            "location": 269,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.__init__": {
            "name": "__init__",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "dict",
                    "Dict[str, bool]",
                    "str",
                    "Optional[str]"
                ],
                "service": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Service.controlURL": {
            "name": "controlURL",
            "location": 299,
            "return": [
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.eventSubURL": {
            "name": "eventSubURL",
            "location": 304,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.serviceType": {
            "name": "serviceType",
            "location": 309,
            "return": [
                "str",
                "bool",
                "int",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Service.__repr__": {
            "name": "__repr__",
            "location": 313,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequiredServicesMixin._required_services": {
            "name": "_required_services",
            "location": 330,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequiredServicesMixin._check_required_services": {
            "name": "_check_required_services",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "services": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "pywemo-main/pywemo/ouimeaux_device/api/wemo_services.py": {},
    "pywemo-main/pywemo/ouimeaux_device/api/xsd_types.py": {
        "quote_xml": {
            "name": "quote_xml",
            "location": 25,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "xml": [
                    "str",
                    "TextIO",
                    "IO",
                    "bool"
                ]
            }
        },
        "_get_element_text": {
            "name": "_get_element_text",
            "location": 201,
            "return": [
                "str",
                "bool",
                "bytes",
                "Optional[str]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "parent_element": [
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]",
                    "bool",
                    "Optional[Set[str]]"
                ],
                "element_name": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[str, Any]]"
                ],
                "default_value": [
                    "bool",
                    "Optional[str]",
                    "Optional[Any]"
                ]
            }
        },
        "ArgumentType.from_argument": {
            "name": "from_argument",
            "location": 38,
            "return": [
                "str",
                "Dict[str, Any]",
                "T",
                "int"
            ],
            "arguments": {
                "cls": [
                    "Mapping[str, Any]",
                    "type",
                    "dict"
                ],
                "argument": [
                    "Mapping[str, Any]",
                    "type",
                    "dict"
                ]
            }
        },
        "ActionProperties.from_action": {
            "name": "from_action",
            "location": 56,
            "return": [
                "str",
                "Dict[str, Any]",
                "T",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "type",
                    "Dict[str, Any]",
                    "MutableMapping"
                ],
                "action": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "ServiceDescription.from_xml": {
            "name": "from_xml",
            "location": 79,
            "return": [
                "Mapping[str, Any]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "cls": [
                    "Sequence[str]",
                    "str"
                ],
                "service_xml_content": [
                    "str",
                    "xml.etree.Element",
                    "Callable"
                ]
            }
        },
        "ServiceProperties.from_service": {
            "name": "from_service",
            "location": 111,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "Mapping[str, Any]",
                    "dict"
                ],
                "service": [
                    "Mapping[str, Any]",
                    "dict"
                ]
            }
        },
        "DeviceDescription.dict_from_xml": {
            "name": "dict_from_xml",
            "location": 141,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[str, str]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "setup_xml_content": [
                    "str",
                    "TextIO",
                    "Dict[str, Any]",
                    "ValueError"
                ]
            }
        },
        "DeviceDescription.from_xml": {
            "name": "from_xml",
            "location": 192,
            "return": [
                "Dict[str, Any]",
                "Dict[int, Dict[int, Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "int",
                    "str"
                ],
                "setup_xml_content": [
                    "bytes",
                    "int",
                    "str"
                ]
            }
        },
        "DeviceDescription.__hash__": {
            "name": "__hash__",
            "location": 196,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pywemo-main/pywemo/ouimeaux_device/api/__init__.py": {},
    "pywemo-main/pywemo/ouimeaux_device/api/xsd/device.py": {
        "parsexml_": {
            "name": "parsexml_",
            "location": 46,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "infile": [
                    "str"
                ],
                "parser": [
                    "str"
                ]
            }
        },
        "parsexmlstring_": {
            "name": "parsexmlstring_",
            "location": 63,
            "return": [
                "str",
                "Iterable[str]",
                "Dict[str, Any]",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "instring": [
                    "str",
                    "Optional[str]"
                ],
                "parser": [
                    "str"
                ]
            }
        },
        "showIndent": {
            "name": "showIndent",
            "location": 706,
            "return": [
                ""
            ],
            "arguments": {
                "outfile": [
                    "int",
                    "Callable",
                    "str"
                ],
                "level": [
                    "int",
                    "Callable",
                    "str"
                ],
                "pretty_print": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "quote_xml": {
            "name": "quote_xml",
            "location": 712,
            "return": [
                "str"
            ],
            "arguments": {
                "inStr": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "quote_xml_aux": {
            "name": "quote_xml_aux",
            "location": 730,
            "return": [
                "str"
            ],
            "arguments": {
                "inStr": [
                    "str",
                    "int",
                    "Union[str, int]",
                    "type",
                    "Optional[float]"
                ]
            }
        },
        "quote_attrib": {
            "name": "quote_attrib",
            "location": 737,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "inStr": [
                    "str",
                    "List[str]",
                    "Hashable"
                ]
            }
        },
        "quote_python": {
            "name": "quote_python",
            "location": 752,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "inStr": [
                    "str",
                    "Optional[str]",
                    "Optional[Any]"
                ]
            }
        },
        "get_all_text_": {
            "name": "get_all_text_",
            "location": 768,
            "return": [
                "str"
            ],
            "arguments": {
                "node": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Set[str]]"
                ]
            }
        },
        "find_attr_value_": {
            "name": "find_attr_value_",
            "location": 779,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "attr_name": [
                    "str"
                ],
                "node": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "encode_str_2_3": {
            "name": "encode_str_2_3",
            "location": 793,
            "return": [
                "float",
                "Tuple[int, int]",
                "str",
                "int"
            ],
            "arguments": {
                "instr": [
                    "str",
                    "bool",
                    "int",
                    "float",
                    "IO[str]"
                ]
            }
        },
        "raise_parse_error": {
            "name": "raise_parse_error",
            "location": 801,
            "return": [
                ""
            ],
            "arguments": {
                "node": [],
                "msg": [
                    "Sequence[object]"
                ]
            }
        },
        "_cast": {
            "name": "_cast",
            "location": 956,
            "return": [
                "int",
                "bool",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "typ": [
                    "list",
                    "Optional[int]",
                    "Optional[object]",
                    "float"
                ],
                "value": [
                    "list",
                    "Optional[int]",
                    "Optional[object]",
                    "float"
                ]
            }
        },
        "usage": {
            "name": "usage",
            "location": 2242,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "get_root_tag": {
            "name": "get_root_tag",
            "location": 2247,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "node": [
                    "str",
                    "List[str]",
                    "int",
                    "Tuple[type]"
                ]
            }
        },
        "get_required_ns_prefix_defs": {
            "name": "get_required_ns_prefix_defs",
            "location": 2255,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "rootNode": [
                    "int"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 2272,
            "return": [
                "Optional[datetime.datetime]",
                "str"
            ],
            "arguments": {
                "inFileName": [
                    "str"
                ],
                "silence": [
                    "bool",
                    "Iterable[str]",
                    "str",
                    "Optional[Any]"
                ],
                "print_warnings": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "parseEtree": {
            "name": "parseEtree",
            "location": 2304,
            "return": [
                "bool",
                "str",
                "List[int]"
            ],
            "arguments": {
                "inFileName": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "int"
                ],
                "silence": [
                    "bool",
                    "Optional[List[Any]]",
                    "List[str]"
                ],
                "print_warnings": [
                    "str",
                    "int",
                    "Any",
                    "Dict[int, str]",
                    "List[Dict[str, Any]]",
                    "bytes"
                ],
                "mapping": [
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "nsmap": [
                    "Optional[str]",
                    "str",
                    "Sequence[Sequence[Any]]",
                    "Union[str, int]"
                ]
            }
        },
        "parseString": {
            "name": "parseString",
            "location": 2341,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "inString": [
                    "str"
                ],
                "silence": [
                    "str",
                    "Iterable[Tuple[int, int]]",
                    "Optional[str]"
                ],
                "print_warnings": [
                    "str",
                    "list",
                    "int",
                    "bytes"
                ]
            }
        },
        "parseLiteral": {
            "name": "parseLiteral",
            "location": 2376,
            "return": [
                "Optional[datetime.datetime]",
                "List[Dict[str, str]]"
            ],
            "arguments": {
                "inFileName": [
                    "str"
                ],
                "silence": [
                    "bool",
                    "Iterable[str]",
                    "Optional[Any]",
                    "str",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]"
                ],
                "print_warnings": [
                    "int",
                    "str",
                    "List[str]",
                    "list"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 2407,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "MixedContainer.__init__": {
            "name": "__init__",
            "location": 823,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "category": [
                    "int",
                    "Callable",
                    "bool",
                    "str"
                ],
                "content_type": [
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "value": [
                    "str",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "MixedContainer.getCategory": {
            "name": "getCategory",
            "location": 828,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixedContainer.getContenttype": {
            "name": "getContenttype",
            "location": 830,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "content_type": [
                    "List[str]",
                    "Optional[str]",
                    "List[Tuple[str, str]]",
                    "int",
                    "list"
                ]
            }
        },
        "MixedContainer.getValue": {
            "name": "getValue",
            "location": 832,
            "return": [
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixedContainer.getName": {
            "name": "getName",
            "location": 834,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixedContainer.export": {
            "name": "export",
            "location": 836,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "str",
                    "Union[str, int]",
                    "Optional[str]",
                    "int",
                    "dict",
                    "MutableMapping[str, Any]"
                ],
                "level": [
                    "str",
                    "dict",
                    "Optional[Callable]",
                    "Optional[Any]",
                    "list"
                ],
                "name": [
                    "str",
                    "dict",
                    "Optional[Callable]",
                    "Optional[Any]",
                    "list"
                ],
                "namespace": [
                    "str",
                    "Optional[Callable]",
                    "Optional[Any]",
                    "Optional[str]",
                    "bool",
                    "bytes"
                ],
                "pretty_print": [
                    "str",
                    "Optional[Callable]",
                    "Optional[Any]",
                    "Optional[str]",
                    "bool",
                    "bytes"
                ]
            }
        },
        "MixedContainer.exportSimple": {
            "name": "exportSimple",
            "location": 848,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "str",
                    "dict"
                ],
                "level": [
                    "str",
                    "bool",
                    "List[Union[int, Any]]",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "dict"
                ]
            }
        },
        "MixedContainer.to_etree": {
            "name": "to_etree",
            "location": 868,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Optional",
                    "bool",
                    "Optional[Mapping]",
                    "Set[int]"
                ],
                "mapping_": [
                    "bool",
                    "dict",
                    "xml.etree.ElementTree.Element",
                    "Sequence[T]",
                    "tuple"
                ],
                "nsmap_": [
                    "bool",
                    "dict",
                    "xml.etree.ElementTree.Element",
                    "Sequence[T]",
                    "tuple"
                ]
            }
        },
        "MixedContainer.to_etree_simple": {
            "name": "to_etree_simple",
            "location": 888,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "mapping_": [
                    "bool",
                    "str",
                    "List[Dict[str, Any]]",
                    "Type[T]"
                ],
                "nsmap_": [
                    "bool",
                    "str",
                    "List[Dict[str, Any]]",
                    "Type[T]"
                ]
            }
        },
        "MixedContainer.exportLiteral": {
            "name": "exportLiteral",
            "location": 902,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "str",
                    "dict",
                    "Callable"
                ],
                "level": [
                    "bool",
                    "int",
                    "float",
                    "dict"
                ],
                "name": [
                    "Mapping[str, str]",
                    "Dict[str, Any]",
                    "int",
                    "bool"
                ]
            }
        },
        "MemberSpec_.__init__": {
            "name": "__init__",
            "location": 926,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, str]"
                ],
                "data_type": [
                    "int",
                    "Dict[str, str]",
                    "str",
                    "Tuple[int, int]"
                ],
                "container": [
                    "Optional[str]",
                    "int",
                    "str",
                    "bool"
                ],
                "optional": [
                    "Optional[str]",
                    "int",
                    "str",
                    "bool"
                ],
                "child_attrs": [
                    "Optional[str]",
                    "int",
                    "str",
                    "bool"
                ],
                "choice": [
                    "Optional[str]",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "MemberSpec_.set_name": {
            "name": "set_name",
            "location": 934,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "bool",
                    "str"
                ]
            }
        },
        "MemberSpec_.get_name": {
            "name": "get_name",
            "location": 935,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberSpec_.set_data_type": {
            "name": "set_data_type",
            "location": 936,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data_type": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Iterable[Dict]",
                    "float",
                    "Optional[bool]"
                ]
            }
        },
        "MemberSpec_.get_data_type_chain": {
            "name": "get_data_type_chain",
            "location": 937,
            "return": [
                "Optional[str]",
                "Tuple[str, str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberSpec_.get_data_type": {
            "name": "get_data_type",
            "location": 938,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberSpec_.set_container": {
            "name": "set_container",
            "location": 946,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "container": [
                    "Optional[str]",
                    "List[Type]",
                    "List[str]"
                ]
            }
        },
        "MemberSpec_.get_container": {
            "name": "get_container",
            "location": 947,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MemberSpec_.set_child_attrs": {
            "name": "set_child_attrs",
            "location": 948,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "child_attrs": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "MemberSpec_.get_child_attrs": {
            "name": "get_child_attrs",
            "location": 949,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberSpec_.set_choice": {
            "name": "set_choice",
            "location": 950,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "choice": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "MemberSpec_.get_choice": {
            "name": "get_choice",
            "location": 951,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberSpec_.set_optional": {
            "name": "set_optional",
            "location": 952,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "optional": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "MemberSpec_.get_optional": {
            "name": "get_optional",
            "location": 953,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "root.__init__": {
            "name": "__init__",
            "location": 970,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "specVersion": [
                    "bool",
                    "int",
                    "str",
                    "float",
                    "List['cirq.Circuit']"
                ],
                "URLBase": [
                    "str"
                ],
                "device": [
                    "bool",
                    "int",
                    "str",
                    "float",
                    "List['cirq.Circuit']"
                ],
                "gds_collector_": [
                    "bool",
                    "int",
                    "str",
                    "float",
                    "List['cirq.Circuit']"
                ]
            }
        },
        "root.factory": {
            "name": "factory",
            "location": 983,
            "return": [
                "bool",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {}
        },
        "root.get_ns_prefix_": {
            "name": "get_ns_prefix_",
            "location": 994,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "root.set_ns_prefix_": {
            "name": "set_ns_prefix_",
            "location": 996,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ns_prefix": [
                    "bool",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "root.get_specVersion": {
            "name": "get_specVersion",
            "location": 998,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "root.set_specVersion": {
            "name": "set_specVersion",
            "location": 1000,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "specVersion": [
                    "int",
                    "str",
                    "bool",
                    "Sequence[Dict[str, str]]"
                ]
            }
        },
        "root.get_URLBase": {
            "name": "get_URLBase",
            "location": 1002,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "root.set_URLBase": {
            "name": "set_URLBase",
            "location": 1004,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "URLBase": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "root.get_device": {
            "name": "get_device",
            "location": 1006,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "root.set_device": {
            "name": "set_device",
            "location": 1008,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "device": [
                    "bool",
                    "float"
                ]
            }
        },
        "root.get_anyAttributes_": {
            "name": "get_anyAttributes_",
            "location": 1010,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "root.set_anyAttributes_": {
            "name": "set_anyAttributes_",
            "location": 1011,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "anyAttributes_": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "root.hasContent_": {
            "name": "hasContent_",
            "location": 1012,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "root.export": {
            "name": "export",
            "location": 1021,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "str",
                    "Union[int, float]",
                    "Optional[List[Any]]"
                ],
                "level": [
                    "bool",
                    "int",
                    "str"
                ],
                "namespaceprefix_": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "namespacedef_": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "name_": [
                    "dict",
                    "Dict[str, str]",
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]"
                ],
                "pretty_print": [
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "root.exportAttributes": {
            "name": "exportAttributes",
            "location": 1044,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "str",
                    "Optional[List[Any]]",
                    "bytes",
                    "Exception",
                    "Optional[str]"
                ],
                "level": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "already_processed": [
                    "str",
                    "bool"
                ],
                "namespaceprefix_": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "name_": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "root.exportChildren": {
            "name": "exportChildren",
            "location": 1077,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "bool",
                    "float",
                    "str"
                ],
                "level": [
                    "bool",
                    "float",
                    "Hashable",
                    "int",
                    "str"
                ],
                "namespaceprefix_": [
                    "Tuple[float, float]",
                    "Type",
                    "Optional[Dict[str, Any]]",
                    "\"Point\"",
                    "Callable"
                ],
                "namespacedef_": [
                    "bool",
                    "float",
                    "str"
                ],
                "name_": [
                    "bool",
                    "float",
                    "str"
                ],
                "fromsubclass_": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Callable"
                ],
                "pretty_print": [
                    "bool",
                    "float",
                    "Hashable",
                    "int",
                    "str"
                ]
            }
        },
        "root.build": {
            "name": "build",
            "location": 1092,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "gds_collector_": [
                    "str"
                ]
            }
        },
        "root.buildAttributes": {
            "name": "buildAttributes",
            "location": 1103,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "attrs": [
                    "Set[str]",
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "already_processed": []
            }
        },
        "root.buildChildren": {
            "name": "buildChildren",
            "location": 1108,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "child_": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "node": [
                    "str",
                    "Iterable[Hashable]",
                    "dict"
                ],
                "nodeName_": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "fromsubclass_": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "gds_collector_": [
                    "str",
                    "Callable"
                ]
            }
        },
        "SpecVersionType.__init__": {
            "name": "__init__",
            "location": 1132,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "major": [
                    "Callable",
                    "str",
                    "bool",
                    "Iterable[str]",
                    "int"
                ],
                "minor": [
                    "Callable",
                    "str",
                    "bool",
                    "Iterable[str]",
                    "int"
                ],
                "gds_collector_": [
                    "Callable",
                    "str",
                    "bool",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "SpecVersionType.factory": {
            "name": "factory",
            "location": 1142,
            "return": [
                "Type",
                "str"
            ],
            "arguments": {}
        },
        "SpecVersionType.get_ns_prefix_": {
            "name": "get_ns_prefix_",
            "location": 1153,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecVersionType.set_ns_prefix_": {
            "name": "set_ns_prefix_",
            "location": 1155,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ns_prefix": [
                    "bool",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "SpecVersionType.get_major": {
            "name": "get_major",
            "location": 1157,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecVersionType.set_major": {
            "name": "set_major",
            "location": 1159,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "major": [
                    "bool",
                    "float"
                ]
            }
        },
        "SpecVersionType.get_minor": {
            "name": "get_minor",
            "location": 1161,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecVersionType.set_minor": {
            "name": "set_minor",
            "location": 1163,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "minor": [
                    "bool",
                    "float"
                ]
            }
        },
        "SpecVersionType.hasContent_": {
            "name": "hasContent_",
            "location": 1165,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecVersionType.export": {
            "name": "export",
            "location": 1173,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "str",
                    "Union[int, float]",
                    "Optional[List[Any]]"
                ],
                "level": [
                    "bool",
                    "int",
                    "str"
                ],
                "namespaceprefix_": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "namespacedef_": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "name_": [
                    "dict",
                    "Dict[str, str]",
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]"
                ],
                "pretty_print": [
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "SpecVersionType.exportAttributes": {
            "name": "exportAttributes",
            "location": 1196,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "level": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "already_processed": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "namespaceprefix_": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "name_": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "SpecVersionType.exportChildren": {
            "name": "exportChildren",
            "location": 1198,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "str"
                ],
                "level": [
                    "str",
                    "int",
                    "datetime.datetime"
                ],
                "namespaceprefix_": [
                    "str",
                    "int"
                ],
                "namespacedef_": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Callable"
                ],
                "name_": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Callable"
                ],
                "fromsubclass_": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Callable"
                ],
                "pretty_print": [
                    "str",
                    "int",
                    "datetime.datetime"
                ]
            }
        },
        "SpecVersionType.build": {
            "name": "build",
            "location": 1211,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "gds_collector_": [
                    "str"
                ]
            }
        },
        "SpecVersionType.buildAttributes": {
            "name": "buildAttributes",
            "location": 1222,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "attrs": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "already_processed": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ]
            }
        },
        "SpecVersionType.buildChildren": {
            "name": "buildChildren",
            "location": 1224,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "child_": [
                    "str",
                    "dict"
                ],
                "node": [
                    "str",
                    "int",
                    "List[int]"
                ],
                "nodeName_": [
                    "str"
                ],
                "fromsubclass_": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "gds_collector_": [
                    "str",
                    "Type[T]",
                    "type"
                ]
            }
        },
        "DeviceType.__init__": {
            "name": "__init__",
            "location": 1244,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "deviceType": [
                    "str",
                    "int",
                    "Optional[str]",
                    "List[str]",
                    "List[Tuple]"
                ],
                "friendlyName": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "manufacturer": [
                    "Optional[List[str]]",
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "Sequence"
                ],
                "manufacturerURL": [
                    "str",
                    "int",
                    "bool",
                    "List[str]"
                ],
                "modelDescription": [
                    "Optional[List[str]]",
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "Sequence"
                ],
                "modelName": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "modelNumber": [
                    "Optional[List[str]]",
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "Sequence"
                ],
                "modelURL": [
                    "str",
                    "int",
                    "bool",
                    "List[str]"
                ],
                "serialNumber": [
                    "Optional[List[str]]",
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "Sequence"
                ],
                "UDN": [
                    "Optional[List[str]]",
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "Sequence"
                ],
                "macAddress": [
                    "str",
                    "Optional[str]",
                    "Optional[Set[int]]"
                ],
                "UPC": [
                    "Optional[List[str]]",
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "Sequence"
                ],
                "iconList": [
                    "List[str]",
                    "str",
                    "Optional[List[str]]",
                    "Callable",
                    "Sequence[str]",
                    "list"
                ],
                "serviceList": [
                    "List[str]",
                    "str",
                    "Optional[List[str]]",
                    "Callable",
                    "Sequence[str]",
                    "list"
                ],
                "deviceList": [
                    "List[str]",
                    "str",
                    "Optional[List[str]]",
                    "Callable",
                    "Sequence[str]",
                    "list"
                ],
                "presentationURL": [
                    "str",
                    "int",
                    "bool",
                    "List[str]"
                ],
                "anytypeobjs_": [
                    "Optional[int]",
                    "bool",
                    "Optional[str]",
                    "Callable",
                    "Optional[bool]"
                ],
                "gds_collector_": [
                    "Optional[List[str]]",
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "Sequence"
                ]
            }
        },
        "DeviceType.factory": {
            "name": "factory",
            "location": 1286,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "DeviceType.get_ns_prefix_": {
            "name": "get_ns_prefix_",
            "location": 1297,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.set_ns_prefix_": {
            "name": "set_ns_prefix_",
            "location": 1299,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ns_prefix": [
                    "bool",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "DeviceType.get_deviceType": {
            "name": "get_deviceType",
            "location": 1301,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.set_deviceType": {
            "name": "set_deviceType",
            "location": 1303,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "deviceType": [
                    "str",
                    "int",
                    "Type"
                ]
            }
        },
        "DeviceType.get_friendlyName": {
            "name": "get_friendlyName",
            "location": 1305,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.set_friendlyName": {
            "name": "set_friendlyName",
            "location": 1307,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "friendlyName": [
                    "Optional[str]",
                    "str",
                    "int"
                ]
            }
        },
        "DeviceType.get_manufacturer": {
            "name": "get_manufacturer",
            "location": 1309,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.set_manufacturer": {
            "name": "set_manufacturer",
            "location": 1311,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "manufacturer": [
                    "bool",
                    "float"
                ]
            }
        },
        "DeviceType.get_manufacturerURL": {
            "name": "get_manufacturerURL",
            "location": 1313,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.set_manufacturerURL": {
            "name": "set_manufacturerURL",
            "location": 1315,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "manufacturerURL": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "DeviceType.get_modelDescription": {
            "name": "get_modelDescription",
            "location": 1317,
            "return": [
                "str",
                "IO",
                "Union[int, float, complex]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.set_modelDescription": {
            "name": "set_modelDescription",
            "location": 1319,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "modelDescription": [
                    "dict",
                    "bool",
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "DeviceType.get_modelName": {
            "name": "get_modelName",
            "location": 1321,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.set_modelName": {
            "name": "set_modelName",
            "location": 1323,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "modelName": [
                    "Optional[str]",
                    "str",
                    "int"
                ]
            }
        },
        "DeviceType.get_modelNumber": {
            "name": "get_modelNumber",
            "location": 1325,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.set_modelNumber": {
            "name": "set_modelNumber",
            "location": 1327,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "modelNumber": [
                    "Union['Contributor', 'Coverage']",
                    "Optional[float]"
                ]
            }
        },
        "DeviceType.get_modelURL": {
            "name": "get_modelURL",
            "location": 1329,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.set_modelURL": {
            "name": "set_modelURL",
            "location": 1331,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "modelURL": [
                    "str"
                ]
            }
        },
        "DeviceType.get_serialNumber": {
            "name": "get_serialNumber",
            "location": 1333,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.set_serialNumber": {
            "name": "set_serialNumber",
            "location": 1335,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "serialNumber": [
                    "bool",
                    "float"
                ]
            }
        },
        "DeviceType.get_UDN": {
            "name": "get_UDN",
            "location": 1337,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.set_UDN": {
            "name": "set_UDN",
            "location": 1339,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "UDN": [
                    "bool",
                    "float"
                ]
            }
        },
        "DeviceType.get_macAddress": {
            "name": "get_macAddress",
            "location": 1341,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.set_macAddress": {
            "name": "set_macAddress",
            "location": 1343,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "macAddress": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "DeviceType.get_UPC": {
            "name": "get_UPC",
            "location": 1345,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.set_UPC": {
            "name": "set_UPC",
            "location": 1347,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "UPC": [
                    "bool",
                    "float"
                ]
            }
        },
        "DeviceType.get_iconList": {
            "name": "get_iconList",
            "location": 1349,
            "return": [
                "str",
                "List[Dict]",
                "List[int]",
                "List[str]",
                "List[List[Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.set_iconList": {
            "name": "set_iconList",
            "location": 1351,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "iconList": [
                    "str",
                    "Optional[List[Any]]",
                    "int",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "DeviceType.get_serviceList": {
            "name": "get_serviceList",
            "location": 1353,
            "return": [
                "str",
                "List[Dict]",
                "List[int]",
                "List[str]",
                "List[List[Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.set_serviceList": {
            "name": "set_serviceList",
            "location": 1355,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "serviceList": [
                    "str",
                    "Optional[List[Any]]",
                    "int",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "DeviceType.get_deviceList": {
            "name": "get_deviceList",
            "location": 1357,
            "return": [
                "str",
                "List[Dict]",
                "List[int]",
                "List[str]",
                "List[List[Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.set_deviceList": {
            "name": "set_deviceList",
            "location": 1359,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "deviceList": [
                    "str",
                    "Optional[List[Any]]",
                    "int",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "DeviceType.get_presentationURL": {
            "name": "get_presentationURL",
            "location": 1361,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.set_presentationURL": {
            "name": "set_presentationURL",
            "location": 1363,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "presentationURL": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "DeviceType.get_anytypeobjs_": {
            "name": "get_anytypeobjs_",
            "location": 1365,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.set_anytypeobjs_": {
            "name": "set_anytypeobjs_",
            "location": 1366,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "anytypeobjs_": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "DeviceType.add_anytypeobjs_": {
            "name": "add_anytypeobjs_",
            "location": 1367,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T",
                    "float",
                    "Union[str, int]",
                    "Tuple[str, int]",
                    "bool",
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "DeviceType.insert_anytypeobjs_": {
            "name": "insert_anytypeobjs_",
            "location": 1368,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "index": [
                    "Optional[BaseException]",
                    "Callable[[str, object], None]",
                    "Iterable[float]",
                    "bool"
                ],
                "value": [
                    "Optional[BaseException]",
                    "Callable[[str, object], None]",
                    "Iterable[float]",
                    "bool"
                ]
            }
        },
        "DeviceType.hasContent_": {
            "name": "hasContent_",
            "location": 1369,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceType.export": {
            "name": "export",
            "location": 1392,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "str",
                    "Union[int, float]",
                    "Optional[List[Any]]"
                ],
                "level": [
                    "bool",
                    "int",
                    "str"
                ],
                "namespaceprefix_": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "namespacedef_": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "name_": [
                    "dict",
                    "Dict[str, str]",
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]"
                ],
                "pretty_print": [
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "DeviceType.exportAttributes": {
            "name": "exportAttributes",
            "location": 1415,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "level": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "already_processed": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "namespaceprefix_": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "name_": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "DeviceType.exportChildren": {
            "name": "exportChildren",
            "location": 1417,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "str",
                    "Optional[str]",
                    "Iterator"
                ],
                "level": [
                    "str",
                    "int"
                ],
                "namespaceprefix_": [
                    "str"
                ],
                "namespacedef_": [
                    "List[Type]",
                    "dict",
                    "List[dict]",
                    "str"
                ],
                "name_": [
                    "List[Type]",
                    "dict",
                    "List[dict]",
                    "str"
                ],
                "fromsubclass_": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Callable"
                ],
                "pretty_print": [
                    "str",
                    "int"
                ]
            }
        },
        "DeviceType.build": {
            "name": "build",
            "location": 1488,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "gds_collector_": [
                    "str"
                ]
            }
        },
        "DeviceType.buildAttributes": {
            "name": "buildAttributes",
            "location": 1499,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "attrs": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "already_processed": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ]
            }
        },
        "DeviceType.buildChildren": {
            "name": "buildChildren",
            "location": 1501,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "child_": [
                    "str"
                ],
                "node": [
                    "str",
                    "Type[T]",
                    "Iterable[Hashable]",
                    "Type",
                    "type",
                    "bool"
                ],
                "nodeName_": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "fromsubclass_": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "gds_collector_": [
                    "str"
                ]
            }
        },
        "IconListType.__init__": {
            "name": "__init__",
            "location": 1605,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "icon": [
                    "Optional[float]",
                    "Optional[str]",
                    "int"
                ],
                "gds_collector_": [
                    "Callable",
                    "str",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "int"
                ]
            }
        },
        "IconListType.factory": {
            "name": "factory",
            "location": 1616,
            "return": [
                "Type",
                "str"
            ],
            "arguments": {}
        },
        "IconListType.get_ns_prefix_": {
            "name": "get_ns_prefix_",
            "location": 1627,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IconListType.set_ns_prefix_": {
            "name": "set_ns_prefix_",
            "location": 1629,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ns_prefix": [
                    "bool",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "IconListType.get_icon": {
            "name": "get_icon",
            "location": 1631,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IconListType.set_icon": {
            "name": "set_icon",
            "location": 1633,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "icon": [
                    "bool",
                    "float"
                ]
            }
        },
        "IconListType.add_icon": {
            "name": "add_icon",
            "location": 1635,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict[str, Any]",
                    "List[float]",
                    "List[str]",
                    "int",
                    "Dict[str, bool]",
                    "List[List[Any]]"
                ]
            }
        },
        "IconListType.insert_icon_at": {
            "name": "insert_icon_at",
            "location": 1637,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "list",
                    "str",
                    "tuple",
                    "float"
                ],
                "value": [
                    "int",
                    "list",
                    "str",
                    "tuple",
                    "float"
                ]
            }
        },
        "IconListType.replace_icon_at": {
            "name": "replace_icon_at",
            "location": 1639,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "list",
                    "float",
                    "List[str]"
                ],
                "value": [
                    "int",
                    "list",
                    "float",
                    "List[str]"
                ]
            }
        },
        "IconListType.hasContent_": {
            "name": "hasContent_",
            "location": 1641,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IconListType.export": {
            "name": "export",
            "location": 1648,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "str",
                    "Union[int, float]",
                    "Optional[List[Any]]"
                ],
                "level": [
                    "bool",
                    "int",
                    "str"
                ],
                "namespaceprefix_": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "namespacedef_": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "name_": [
                    "dict",
                    "Dict[str, str]",
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]"
                ],
                "pretty_print": [
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "IconListType.exportAttributes": {
            "name": "exportAttributes",
            "location": 1671,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "level": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "already_processed": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "namespaceprefix_": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "name_": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "IconListType.exportChildren": {
            "name": "exportChildren",
            "location": 1673,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "bool",
                    "Callable",
                    "str",
                    "Union[str, int]",
                    "Union[int, float]"
                ],
                "level": [
                    "bool",
                    "Callable",
                    "str",
                    "Union[str, int]",
                    "Union[int, float]"
                ],
                "namespaceprefix_": [
                    "bool",
                    "Optional[Any]",
                    "str"
                ],
                "namespacedef_": [
                    "bool",
                    "Callable",
                    "str",
                    "Union[str, int]",
                    "Union[int, float]"
                ],
                "name_": [
                    "bool",
                    "Callable",
                    "str",
                    "Union[str, int]",
                    "Union[int, float]"
                ],
                "fromsubclass_": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Callable"
                ],
                "pretty_print": [
                    "bool",
                    "Callable",
                    "str",
                    "Union[str, int]",
                    "Union[int, float]"
                ]
            }
        },
        "IconListType.build": {
            "name": "build",
            "location": 1681,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "gds_collector_": [
                    "str"
                ]
            }
        },
        "IconListType.buildAttributes": {
            "name": "buildAttributes",
            "location": 1692,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "attrs": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "already_processed": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ]
            }
        },
        "IconListType.buildChildren": {
            "name": "buildChildren",
            "location": 1694,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "child_": [
                    "str",
                    "Dict[str, Any]"
                ],
                "node": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "nodeName_": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "fromsubclass_": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "gds_collector_": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "ServiceListType.__init__": {
            "name": "__init__",
            "location": 1707,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "service": [
                    "Optional[float]",
                    "Any",
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "gds_collector_": [
                    "Callable",
                    "str",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "int"
                ]
            }
        },
        "ServiceListType.factory": {
            "name": "factory",
            "location": 1718,
            "return": [
                "Type",
                "str"
            ],
            "arguments": {}
        },
        "ServiceListType.get_ns_prefix_": {
            "name": "get_ns_prefix_",
            "location": 1729,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceListType.set_ns_prefix_": {
            "name": "set_ns_prefix_",
            "location": 1731,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ns_prefix": [
                    "bool",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "ServiceListType.get_service": {
            "name": "get_service",
            "location": 1733,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceListType.set_service": {
            "name": "set_service",
            "location": 1735,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "service": [
                    "bool",
                    "float"
                ]
            }
        },
        "ServiceListType.add_service": {
            "name": "add_service",
            "location": 1737,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict[str, Any]",
                    "List[float]",
                    "List[str]",
                    "int",
                    "Dict[str, bool]",
                    "List[List[Any]]"
                ]
            }
        },
        "ServiceListType.insert_service_at": {
            "name": "insert_service_at",
            "location": 1739,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "list",
                    "str",
                    "tuple",
                    "float"
                ],
                "value": [
                    "int",
                    "list",
                    "str",
                    "tuple",
                    "float"
                ]
            }
        },
        "ServiceListType.replace_service_at": {
            "name": "replace_service_at",
            "location": 1741,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "list",
                    "float",
                    "List[str]"
                ],
                "value": [
                    "int",
                    "list",
                    "float",
                    "List[str]"
                ]
            }
        },
        "ServiceListType.hasContent_": {
            "name": "hasContent_",
            "location": 1743,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceListType.export": {
            "name": "export",
            "location": 1750,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "str",
                    "Union[int, float]",
                    "Optional[List[Any]]"
                ],
                "level": [
                    "bool",
                    "int",
                    "str"
                ],
                "namespaceprefix_": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "namespacedef_": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "name_": [
                    "dict",
                    "Dict[str, str]",
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]"
                ],
                "pretty_print": [
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "ServiceListType.exportAttributes": {
            "name": "exportAttributes",
            "location": 1773,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "level": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "already_processed": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "namespaceprefix_": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "name_": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "ServiceListType.exportChildren": {
            "name": "exportChildren",
            "location": 1775,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "bool",
                    "Callable",
                    "str",
                    "Union[str, int]",
                    "Union[int, float]"
                ],
                "level": [
                    "bool",
                    "Callable",
                    "str",
                    "Union[str, int]",
                    "Union[int, float]"
                ],
                "namespaceprefix_": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Optional[List[str]]",
                    "Callable"
                ],
                "namespacedef_": [
                    "bool",
                    "Callable",
                    "str",
                    "Union[str, int]",
                    "Union[int, float]"
                ],
                "name_": [
                    "bool",
                    "Callable",
                    "str",
                    "Union[str, int]",
                    "Union[int, float]"
                ],
                "fromsubclass_": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Callable"
                ],
                "pretty_print": [
                    "bool",
                    "Callable",
                    "str",
                    "Union[str, int]",
                    "Union[int, float]"
                ]
            }
        },
        "ServiceListType.build": {
            "name": "build",
            "location": 1783,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "gds_collector_": [
                    "str"
                ]
            }
        },
        "ServiceListType.buildAttributes": {
            "name": "buildAttributes",
            "location": 1794,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "attrs": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "already_processed": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ]
            }
        },
        "ServiceListType.buildChildren": {
            "name": "buildChildren",
            "location": 1796,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "child_": [
                    "str",
                    "Dict[str, Any]"
                ],
                "node": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "nodeName_": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "fromsubclass_": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "gds_collector_": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "DeviceListType.__init__": {
            "name": "__init__",
            "location": 1809,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "device": [
                    "Optional[float]",
                    "Optional[str]",
                    "int"
                ],
                "gds_collector_": [
                    "Callable",
                    "str",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "int"
                ]
            }
        },
        "DeviceListType.factory": {
            "name": "factory",
            "location": 1820,
            "return": [
                "Type",
                "str"
            ],
            "arguments": {}
        },
        "DeviceListType.get_ns_prefix_": {
            "name": "get_ns_prefix_",
            "location": 1831,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceListType.set_ns_prefix_": {
            "name": "set_ns_prefix_",
            "location": 1833,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ns_prefix": [
                    "bool",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "DeviceListType.get_device": {
            "name": "get_device",
            "location": 1835,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceListType.set_device": {
            "name": "set_device",
            "location": 1837,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "device": [
                    "bool",
                    "float"
                ]
            }
        },
        "DeviceListType.add_device": {
            "name": "add_device",
            "location": 1839,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict[str, Any]",
                    "List[float]",
                    "List[str]",
                    "int",
                    "Dict[str, bool]",
                    "List[List[Any]]"
                ]
            }
        },
        "DeviceListType.insert_device_at": {
            "name": "insert_device_at",
            "location": 1841,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "list",
                    "str",
                    "tuple",
                    "float"
                ],
                "value": [
                    "int",
                    "list",
                    "str",
                    "tuple",
                    "float"
                ]
            }
        },
        "DeviceListType.replace_device_at": {
            "name": "replace_device_at",
            "location": 1843,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "list",
                    "float",
                    "List[str]"
                ],
                "value": [
                    "int",
                    "list",
                    "float",
                    "List[str]"
                ]
            }
        },
        "DeviceListType.hasContent_": {
            "name": "hasContent_",
            "location": 1845,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceListType.export": {
            "name": "export",
            "location": 1852,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "str",
                    "Union[int, float]",
                    "Optional[List[Any]]"
                ],
                "level": [
                    "bool",
                    "int",
                    "str"
                ],
                "namespaceprefix_": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "namespacedef_": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "name_": [
                    "dict",
                    "Dict[str, str]",
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]"
                ],
                "pretty_print": [
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "DeviceListType.exportAttributes": {
            "name": "exportAttributes",
            "location": 1875,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "level": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "already_processed": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "namespaceprefix_": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "name_": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "DeviceListType.exportChildren": {
            "name": "exportChildren",
            "location": 1877,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "bool",
                    "Callable",
                    "str",
                    "Union[str, int]",
                    "Union[int, float]"
                ],
                "level": [
                    "bool",
                    "Callable",
                    "str",
                    "Union[str, int]",
                    "Union[int, float]"
                ],
                "namespaceprefix_": [
                    "bool",
                    "Optional[Any]",
                    "str"
                ],
                "namespacedef_": [
                    "bool",
                    "Callable",
                    "str",
                    "Union[str, int]",
                    "Union[int, float]"
                ],
                "name_": [
                    "bool",
                    "Callable",
                    "str",
                    "Union[str, int]",
                    "Union[int, float]"
                ],
                "fromsubclass_": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Callable"
                ],
                "pretty_print": [
                    "bool",
                    "Callable",
                    "str",
                    "Union[str, int]",
                    "Union[int, float]"
                ]
            }
        },
        "DeviceListType.build": {
            "name": "build",
            "location": 1885,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "gds_collector_": [
                    "str"
                ]
            }
        },
        "DeviceListType.buildAttributes": {
            "name": "buildAttributes",
            "location": 1896,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "attrs": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "already_processed": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ]
            }
        },
        "DeviceListType.buildChildren": {
            "name": "buildChildren",
            "location": 1898,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "child_": [
                    "str",
                    "Dict[str, Any]"
                ],
                "node": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "nodeName_": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "fromsubclass_": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "gds_collector_": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "iconType.__init__": {
            "name": "__init__",
            "location": 1911,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mimetype": [
                    "int",
                    "float",
                    "tuple",
                    "bool",
                    "Optional[List[Any]]"
                ],
                "width": [
                    "int",
                    "float",
                    "tuple",
                    "bool",
                    "Optional[List[Any]]"
                ],
                "height": [
                    "int",
                    "float",
                    "tuple",
                    "bool",
                    "Optional[List[Any]]"
                ],
                "depth": [
                    "int",
                    "float",
                    "tuple",
                    "bool",
                    "Optional[List[Any]]"
                ],
                "url": [
                    "int",
                    "float",
                    "tuple",
                    "bool",
                    "Optional[List[Any]]"
                ],
                "gds_collector_": [
                    "int",
                    "float",
                    "tuple",
                    "bool",
                    "Optional[List[Any]]"
                ]
            }
        },
        "iconType.factory": {
            "name": "factory",
            "location": 1927,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "iconType.get_ns_prefix_": {
            "name": "get_ns_prefix_",
            "location": 1938,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "iconType.set_ns_prefix_": {
            "name": "set_ns_prefix_",
            "location": 1940,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ns_prefix": [
                    "bool",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "iconType.get_mimetype": {
            "name": "get_mimetype",
            "location": 1942,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "iconType.set_mimetype": {
            "name": "set_mimetype",
            "location": 1944,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mimetype": [
                    "bool",
                    "float"
                ]
            }
        },
        "iconType.get_width": {
            "name": "get_width",
            "location": 1946,
            "return": [
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "iconType.set_width": {
            "name": "set_width",
            "location": 1948,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "width": [
                    "int",
                    "float",
                    "str",
                    "datetime.datetime",
                    "Union[str, float]",
                    "datetime.date.time"
                ]
            }
        },
        "iconType.get_height": {
            "name": "get_height",
            "location": 1950,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "iconType.set_height": {
            "name": "set_height",
            "location": 1952,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "height": [
                    "bool",
                    "float"
                ]
            }
        },
        "iconType.get_depth": {
            "name": "get_depth",
            "location": 1954,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "iconType.set_depth": {
            "name": "set_depth",
            "location": 1956,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "depth": [
                    "bool",
                    "float"
                ]
            }
        },
        "iconType.get_url": {
            "name": "get_url",
            "location": 1958,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "iconType.set_url": {
            "name": "set_url",
            "location": 1960,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "List[str]",
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "iconType.hasContent_": {
            "name": "hasContent_",
            "location": 1962,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "iconType.export": {
            "name": "export",
            "location": 1973,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "str",
                    "Union[int, float]",
                    "Optional[List[Any]]"
                ],
                "level": [
                    "bool",
                    "int",
                    "str"
                ],
                "namespaceprefix_": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "namespacedef_": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "name_": [
                    "dict",
                    "Dict[str, str]",
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]"
                ],
                "pretty_print": [
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "iconType.exportAttributes": {
            "name": "exportAttributes",
            "location": 1996,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "level": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "already_processed": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "namespaceprefix_": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "name_": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "iconType.exportChildren": {
            "name": "exportChildren",
            "location": 1998,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "str",
                    "Optional[str]",
                    "Iterator"
                ],
                "level": [
                    "str",
                    "int"
                ],
                "namespaceprefix_": [
                    "str",
                    "Optional[BaseException]",
                    "Dict[str, Any]"
                ],
                "namespacedef_": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Callable"
                ],
                "name_": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Callable"
                ],
                "fromsubclass_": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Callable"
                ],
                "pretty_print": [
                    "str",
                    "int"
                ]
            }
        },
        "iconType.build": {
            "name": "build",
            "location": 2023,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "gds_collector_": [
                    "str"
                ]
            }
        },
        "iconType.buildAttributes": {
            "name": "buildAttributes",
            "location": 2034,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "attrs": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "already_processed": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ]
            }
        },
        "iconType.buildChildren": {
            "name": "buildChildren",
            "location": 2036,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "child_": [
                    "str",
                    "Type",
                    "list"
                ],
                "node": [
                    "str",
                    "type",
                    "Type[T]",
                    "Type"
                ],
                "nodeName_": [
                    "str"
                ],
                "fromsubclass_": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "gds_collector_": [
                    "str",
                    "Type[T]",
                    "type"
                ]
            }
        },
        "serviceType.__init__": {
            "name": "__init__",
            "location": 2074,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "serviceType_member": [
                    "bool",
                    "Optional[float]"
                ],
                "serviceId": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Dict[str, Any]"
                ],
                "SCPDURL": [
                    "Optional[Dict[str, Any]]",
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[List[Any]]"
                ],
                "controlURL": [
                    "Optional[str]",
                    "str",
                    "bool"
                ],
                "eventSubURL": [
                    "str",
                    "float",
                    "bool"
                ],
                "gds_collector_": [
                    "Optional[Dict[str, Any]]",
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[List[Any]]"
                ]
            }
        },
        "serviceType.factory": {
            "name": "factory",
            "location": 2090,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "serviceType.get_ns_prefix_": {
            "name": "get_ns_prefix_",
            "location": 2101,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "serviceType.set_ns_prefix_": {
            "name": "set_ns_prefix_",
            "location": 2103,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ns_prefix": [
                    "bool",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "serviceType.get_serviceType": {
            "name": "get_serviceType",
            "location": 2105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "serviceType.set_serviceType": {
            "name": "set_serviceType",
            "location": 2107,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "serviceType": [
                    "str",
                    "int",
                    "Type"
                ]
            }
        },
        "serviceType.get_serviceId": {
            "name": "get_serviceId",
            "location": 2109,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "serviceType.set_serviceId": {
            "name": "set_serviceId",
            "location": 2111,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "serviceId": [
                    "int",
                    "str"
                ]
            }
        },
        "serviceType.get_SCPDURL": {
            "name": "get_SCPDURL",
            "location": 2113,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "serviceType.set_SCPDURL": {
            "name": "set_SCPDURL",
            "location": 2115,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "SCPDURL": [
                    "bool",
                    "float"
                ]
            }
        },
        "serviceType.get_controlURL": {
            "name": "get_controlURL",
            "location": 2117,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "serviceType.set_controlURL": {
            "name": "set_controlURL",
            "location": 2119,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "controlURL": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "serviceType.get_eventSubURL": {
            "name": "get_eventSubURL",
            "location": 2121,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "serviceType.set_eventSubURL": {
            "name": "set_eventSubURL",
            "location": 2123,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "eventSubURL": [
                    "str"
                ]
            }
        },
        "serviceType.hasContent_": {
            "name": "hasContent_",
            "location": 2125,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "serviceType.export": {
            "name": "export",
            "location": 2136,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "str",
                    "Union[int, float]",
                    "Optional[List[Any]]"
                ],
                "level": [
                    "bool",
                    "int",
                    "str"
                ],
                "namespaceprefix_": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "namespacedef_": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "name_": [
                    "dict",
                    "Dict[str, str]",
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]"
                ],
                "pretty_print": [
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "serviceType.exportAttributes": {
            "name": "exportAttributes",
            "location": 2159,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "level": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "already_processed": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "namespaceprefix_": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "name_": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "serviceType.exportChildren": {
            "name": "exportChildren",
            "location": 2161,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "str",
                    "Optional[str]",
                    "Iterator"
                ],
                "level": [
                    "str",
                    "int"
                ],
                "namespaceprefix_": [
                    "str"
                ],
                "namespacedef_": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Callable"
                ],
                "name_": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Callable"
                ],
                "fromsubclass_": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Callable"
                ],
                "pretty_print": [
                    "str",
                    "int"
                ]
            }
        },
        "serviceType.build": {
            "name": "build",
            "location": 2186,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "gds_collector_": [
                    "str"
                ]
            }
        },
        "serviceType.buildAttributes": {
            "name": "buildAttributes",
            "location": 2197,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "attrs": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "already_processed": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ]
            }
        },
        "serviceType.buildChildren": {
            "name": "buildChildren",
            "location": 2199,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "child_": [],
                "node": [
                    "str",
                    "Type[T]",
                    "Iterable[Hashable]",
                    "Type",
                    "type",
                    "bool"
                ],
                "nodeName_": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "fromsubclass_": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "gds_collector_": [
                    "str",
                    "Type[T]",
                    "type"
                ]
            }
        },
        "getSubclassFromModule_": {
            "name": "getSubclassFromModule_",
            "location": 659,
            "return": [
                "str",
                "Optional[str]",
                "Sequence[str]",
                "Optional[int]"
            ],
            "arguments": {
                "module": [
                    "List[Tuple[str, str]]",
                    "type",
                    "xml.etree.cElementTree.Element",
                    "str",
                    "Sequence[type]"
                ],
                "class_": [
                    "Dict[str, Any]",
                    "str",
                    "Mapping[str, T]",
                    "Type",
                    "Exception"
                ]
            }
        },
        "GdsCollector_.__init__": {
            "name": "__init__",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "messages": [
                    "Optional[bool]",
                    "Optional[int]",
                    "Any",
                    "Optional[Any]",
                    "str"
                ]
            }
        },
        "GdsCollector_.add_message": {
            "name": "add_message",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "float",
                    "int"
                ]
            }
        },
        "GdsCollector_.get_messages": {
            "name": "get_messages",
            "location": 141,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GdsCollector_.clear_messages": {
            "name": "clear_messages",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GdsCollector_.print_messages": {
            "name": "print_messages",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GdsCollector_.write_messages": {
            "name": "write_messages",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outstream": [
                    "float"
                ]
            }
        },
        "GeneratedsSuper.gds_format_string": {
            "name": "gds_format_string",
            "location": 189,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "Optional[bytes]",
                    "bool",
                    "str"
                ],
                "input_name": [
                    "Optional[bytes]",
                    "bool",
                    "str"
                ]
            }
        },
        "GeneratedsSuper.gds_parse_string": {
            "name": "gds_parse_string",
            "location": 191,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "List[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "bool"
                ],
                "node": [
                    "str",
                    "List[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "bool"
                ],
                "input_name": [
                    "str",
                    "List[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "GeneratedsSuper.gds_validate_string": {
            "name": "gds_validate_string",
            "location": 193,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "List[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "bool"
                ],
                "node": [
                    "str",
                    "List[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "bool"
                ],
                "input_name": [
                    "str",
                    "List[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "GeneratedsSuper.gds_format_base64": {
            "name": "gds_format_base64",
            "location": 198,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "dict",
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Optional[str]]"
                ],
                "input_name": [
                    "str",
                    "dict",
                    "List[Dict[str, Any]]",
                    "Optional[List[Dict]]",
                    "bool"
                ]
            }
        },
        "GeneratedsSuper.gds_validate_base64": {
            "name": "gds_validate_base64",
            "location": 200,
            "return": [
                "bytes",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "List[str]",
                    "bool",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "node": [
                    "List[str]",
                    "bool",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "input_name": [
                    "List[str]",
                    "bool",
                    "str",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "GeneratedsSuper.gds_format_integer": {
            "name": "gds_format_integer",
            "location": 202,
            "return": [
                "str",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "bool",
                    "str",
                    "List[str]",
                    "List[Dict[str, int]]",
                    "int"
                ],
                "input_name": [
                    "bool",
                    "str",
                    "List[str]",
                    "List[Dict[str, int]]",
                    "int"
                ]
            }
        },
        "GeneratedsSuper.gds_parse_integer": {
            "name": "gds_parse_integer",
            "location": 204,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "Optional[Dict]"
                ],
                "node": [
                    "str",
                    "int"
                ],
                "input_name": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Callable"
                ]
            }
        },
        "GeneratedsSuper.gds_validate_integer": {
            "name": "gds_validate_integer",
            "location": 210,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "bytes"
                ],
                "node": [
                    "str",
                    "Optional[str]",
                    "Exception",
                    "list"
                ],
                "input_name": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Callable"
                ]
            }
        },
        "GeneratedsSuper.gds_format_integer_list": {
            "name": "gds_format_integer_list",
            "location": 216,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "input_name": [
                    "bool",
                    "str"
                ]
            }
        },
        "GeneratedsSuper.gds_validate_integer_list": {
            "name": "gds_validate_integer_list",
            "location": 220,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "Union[str, Dict[str, Any]]",
                    "Optional[Tuple[str]]"
                ],
                "node": [
                    "str",
                    "Optional[str]",
                    "list",
                    "Exception"
                ],
                "input_name": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "list",
                    "Optional[Iterable[str]]",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "GeneratedsSuper.gds_format_float": {
            "name": "gds_format_float",
            "location": 229,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "Dict[str, Any]",
                    "bytes",
                    "Optional[Exception]",
                    "int"
                ],
                "input_name": [
                    "bool",
                    "str",
                    "List[str]",
                    "List[Dict[str, int]]",
                    "int"
                ]
            }
        },
        "GeneratedsSuper.gds_parse_float": {
            "name": "gds_parse_float",
            "location": 231,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "Union[str, Iterable[str]]"
                ],
                "node": [
                    "str",
                    "int"
                ],
                "input_name": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Callable"
                ]
            }
        },
        "GeneratedsSuper.gds_validate_float": {
            "name": "gds_validate_float",
            "location": 237,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Callable"
                ],
                "node": [
                    "str",
                    "Optional[str]",
                    "Exception",
                    "list"
                ],
                "input_name": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Callable"
                ]
            }
        },
        "GeneratedsSuper.gds_format_float_list": {
            "name": "gds_format_float_list",
            "location": 243,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "input_name": [
                    "bool",
                    "str"
                ]
            }
        },
        "GeneratedsSuper.gds_validate_float_list": {
            "name": "gds_validate_float_list",
            "location": 247,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "Union[str, Dict[str, Any]]",
                    "Optional[Tuple[str]]"
                ],
                "node": [
                    "str",
                    "Optional[str]",
                    "list",
                    "Exception"
                ],
                "input_name": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "list",
                    "Optional[Iterable[str]]",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "GeneratedsSuper.gds_format_decimal": {
            "name": "gds_format_decimal",
            "location": 256,
            "return": [
                "int",
                "tuple",
                "Dict[str, Any]",
                "bool",
                "float",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "Dict[str, Dict[str, Any]]",
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "bytes"
                ],
                "input_name": [
                    "bool",
                    "str",
                    "List[str]",
                    "List[Dict[str, int]]",
                    "int"
                ]
            }
        },
        "GeneratedsSuper.gds_parse_decimal": {
            "name": "gds_parse_decimal",
            "location": 263,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "List[Tuple[str, str]]",
                    "Optional[\"permissions_doc\"]",
                    "bool"
                ],
                "node": [
                    "str",
                    "Optional[str]",
                    "Exception",
                    "list"
                ],
                "input_name": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Callable"
                ]
            }
        },
        "GeneratedsSuper.gds_validate_decimal": {
            "name": "gds_validate_decimal",
            "location": 269,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "xml.etree.ElementTree.Element",
                    "dict"
                ],
                "node": [
                    "str",
                    "Optional[str]",
                    "Exception",
                    "list"
                ],
                "input_name": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Callable"
                ]
            }
        },
        "GeneratedsSuper.gds_format_decimal_list": {
            "name": "gds_format_decimal_list",
            "location": 275,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Dict[str, List[Any]]"
                ],
                "input_name": [
                    "bool",
                    "str"
                ]
            }
        },
        "GeneratedsSuper.gds_validate_decimal_list": {
            "name": "gds_validate_decimal_list",
            "location": 279,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "Union[str, Dict[str, Any]]",
                    "Optional[Tuple[str]]"
                ],
                "node": [
                    "str",
                    "Optional[str]",
                    "list",
                    "Exception"
                ],
                "input_name": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "list",
                    "Optional[Iterable[str]]",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "GeneratedsSuper.gds_format_double": {
            "name": "gds_format_double",
            "location": 288,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "bool",
                    "str",
                    "List[str]",
                    "List[Dict[str, int]]",
                    "int"
                ],
                "input_name": [
                    "bool",
                    "str",
                    "List[str]",
                    "List[Dict[str, int]]",
                    "int"
                ]
            }
        },
        "GeneratedsSuper.gds_parse_double": {
            "name": "gds_parse_double",
            "location": 290,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "Union[str, Iterable[str]]"
                ],
                "node": [
                    "str",
                    "int"
                ],
                "input_name": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Callable"
                ]
            }
        },
        "GeneratedsSuper.gds_validate_double": {
            "name": "gds_validate_double",
            "location": 296,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Callable"
                ],
                "node": [
                    "str",
                    "Optional[str]",
                    "Exception",
                    "list"
                ],
                "input_name": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Callable"
                ]
            }
        },
        "GeneratedsSuper.gds_format_double_list": {
            "name": "gds_format_double_list",
            "location": 302,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "input_name": [
                    "bool",
                    "str"
                ]
            }
        },
        "GeneratedsSuper.gds_validate_double_list": {
            "name": "gds_validate_double_list",
            "location": 306,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "Union[str, Dict[str, Any]]",
                    "Optional[Tuple[str]]"
                ],
                "node": [
                    "str",
                    "Optional[str]",
                    "list",
                    "Exception"
                ],
                "input_name": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "list",
                    "Optional[Iterable[str]]",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "GeneratedsSuper.gds_format_boolean": {
            "name": "gds_format_boolean",
            "location": 316,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "Dict[str, Any]",
                    "bytes",
                    "Optional[Exception]",
                    "int"
                ],
                "input_name": [
                    "bool",
                    "str",
                    "List[str]",
                    "List[Dict[str, int]]",
                    "int"
                ]
            }
        },
        "GeneratedsSuper.gds_parse_boolean": {
            "name": "gds_parse_boolean",
            "location": 318,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Callable"
                ],
                "node": [
                    "str",
                    "Optional[str]",
                    "Exception",
                    "list"
                ],
                "input_name": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Callable"
                ]
            }
        },
        "GeneratedsSuper.gds_validate_boolean": {
            "name": "gds_validate_boolean",
            "location": 326,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "dict",
                    "str",
                    "Tuple[Tuple[int, int]]",
                    "bool"
                ],
                "node": [
                    "str",
                    "Optional[str]",
                    "Exception",
                    "list"
                ],
                "input_name": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Callable"
                ]
            }
        },
        "GeneratedsSuper.gds_format_boolean_list": {
            "name": "gds_format_boolean_list",
            "location": 333,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "input_name": [
                    "bool",
                    "str"
                ]
            }
        },
        "GeneratedsSuper.gds_validate_boolean_list": {
            "name": "gds_validate_boolean_list",
            "location": 337,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "Union[str, Dict[str, Any]]",
                    "Optional[Tuple[str]]"
                ],
                "node": [
                    "str",
                    "Optional[str]",
                    "list",
                    "Exception"
                ],
                "input_name": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "list",
                    "Optional[Iterable[str]]",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "GeneratedsSuper.gds_validate_datetime": {
            "name": "gds_validate_datetime",
            "location": 347,
            "return": [
                "Optional[float]",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Callable"
                ],
                "node": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Callable"
                ],
                "input_name": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Callable"
                ]
            }
        },
        "GeneratedsSuper.gds_format_datetime": {
            "name": "gds_format_datetime",
            "location": 349,
            "return": [
                "str",
                "decimal.Decimal",
                "type"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "int",
                    "dict"
                ],
                "input_name": [
                    "str",
                    "dict",
                    "List[Dict[str, Any]]",
                    "Optional[List[Dict]]",
                    "bool"
                ]
            }
        },
        "GeneratedsSuper.gds_parse_datetime": {
            "name": "gds_parse_datetime",
            "location": 386,
            "return": [
                "Set[str]",
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[int, str]",
                    "bool",
                    "bytes",
                    "List[dict]"
                ],
                "input_data": [
                    "str",
                    "Collection[str]",
                    "bytes",
                    "int",
                    "dict"
                ]
            }
        },
        "GeneratedsSuper.gds_validate_date": {
            "name": "gds_validate_date",
            "location": 413,
            "return": [
                "str",
                "Optional[float]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "List[str]"
                ],
                "node": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "List[str]"
                ],
                "input_name": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "GeneratedsSuper.gds_format_date": {
            "name": "gds_format_date",
            "location": 415,
            "return": [
                "int",
                "str",
                "Union[int, float]",
                "Type"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "int",
                    "float",
                    "list",
                    "bool",
                    "bytes",
                    "List[str]",
                    "str",
                    "List[int]"
                ],
                "input_name": [
                    "Optional[bytes]",
                    "str",
                    "bool"
                ]
            }
        },
        "GeneratedsSuper.gds_parse_date": {
            "name": "gds_parse_date",
            "location": 442,
            "return": [
                "int",
                "str",
                "float",
                "datetime.date"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "int",
                    "bytes",
                    "Dict[int, str]"
                ],
                "input_data": [
                    "dict",
                    "Dict[str, Any]",
                    "Sequence",
                    "Dict[str, str]"
                ]
            }
        },
        "GeneratedsSuper.gds_validate_time": {
            "name": "gds_validate_time",
            "location": 460,
            "return": [
                "dict",
                "str",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "List[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "node": [
                    "str",
                    "List[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "input_name": [
                    "str",
                    "List[str]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "GeneratedsSuper.gds_format_time": {
            "name": "gds_format_time",
            "location": 462,
            "return": [
                "str",
                "int",
                "List[int]",
                "datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "dict",
                    "str",
                    "Mapping[str, Any]"
                ],
                "input_name": [
                    "str",
                    "bool",
                    "Optional[bytes]",
                    "Optional[str]"
                ]
            }
        },
        "GeneratedsSuper.gds_validate_simple_patterns": {
            "name": "gds_validate_simple_patterns",
            "location": 492,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "patterns": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "target": [
                    "bool",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "GeneratedsSuper.gds_parse_time": {
            "name": "gds_parse_time",
            "location": 509,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "int",
                    "str"
                ],
                "input_data": [
                    "dict",
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "GeneratedsSuper.gds_check_cardinality_": {
            "name": "gds_check_cardinality_",
            "location": 530,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[str]",
                    "Optional[Union[Any, str]]",
                    "Iterable[str]",
                    "int",
                    "str"
                ],
                "input_name": [
                    "str"
                ],
                "min_occurs": [
                    "str",
                    "Optional[int]"
                ],
                "max_occurs": [
                    "str",
                    "int"
                ],
                "required": [
                    "Optional[str]",
                    "Optional[bool]",
                    "str",
                    "Optional[IO[bytes]]",
                    "bool"
                ]
            }
        },
        "GeneratedsSuper.gds_validate_builtin_ST_": {
            "name": "gds_validate_builtin_ST_",
            "location": 558,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "validator": [
                    "str",
                    "int"
                ],
                "value": [
                    "Optional[str]",
                    "str",
                    "Callable[[Any], bool]"
                ],
                "input_name": [
                    "str",
                    "int"
                ],
                "min_occurs": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "bool",
                    "Optional[Union[float, int]]"
                ],
                "max_occurs": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "bool",
                    "Optional[Union[float, int]]"
                ],
                "required": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "bool",
                    "Optional[Union[float, int]]"
                ]
            }
        },
        "GeneratedsSuper.gds_validate_defined_ST_": {
            "name": "gds_validate_defined_ST_",
            "location": 566,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "validator": [
                    "str",
                    "float",
                    "int",
                    "bytes"
                ],
                "value": [
                    "Optional[str]",
                    "Optional[int]",
                    "Dict[str, str]",
                    "Optional[Dict[str, dict]]",
                    "Optional[Iterable[str]]"
                ],
                "input_name": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "bool",
                    "Optional[Union[float, int]]"
                ],
                "min_occurs": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "bool",
                    "Optional[Union[float, int]]"
                ],
                "max_occurs": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "bool",
                    "Optional[Union[float, int]]"
                ],
                "required": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "bool",
                    "Optional[Union[float, int]]"
                ]
            }
        },
        "GeneratedsSuper.gds_str_lower": {
            "name": "gds_str_lower",
            "location": 574,
            "return": [
                "float",
                "Tuple[int, int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "instring": [
                    "float",
                    "Tuple[int, int]",
                    "str",
                    "int"
                ]
            }
        },
        "GeneratedsSuper.get_path_": {
            "name": "get_path_",
            "location": 576,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "bytearray",
                    "List[List[str]]"
                ]
            }
        },
        "GeneratedsSuper.get_path_list_": {
            "name": "get_path_list_",
            "location": 583,
            "return": [
                "Set[str]",
                "Dict[str, Any]",
                "Generator",
                "Iterator[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Dict[str, str]",
                    "Optional[Iterable[str]]",
                    "bool",
                    "Sequence",
                    "str",
                    "List[Union[str, \"SqlFile\"]]"
                ],
                "path_list": [
                    "int",
                    "str",
                    "List[str]",
                    "lxml.etree.Element",
                    "bool",
                    "ImportError"
                ]
            }
        },
        "GeneratedsSuper.get_class_obj_": {
            "name": "get_class_obj_",
            "location": 590,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Dict[str, str]",
                    "AnyStr",
                    "Dict[str, Any]",
                    "Iterable[Dict[str, Any]]"
                ],
                "default_class": [
                    "str",
                    "Callable",
                    "type",
                    "List[List[str]]",
                    "Set[str]"
                ]
            }
        },
        "GeneratedsSuper.gds_build_any": {
            "name": "gds_build_any",
            "location": 602,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "tuple",
                    "bool",
                    "Callable"
                ],
                "type_name": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "GeneratedsSuper.gds_reverse_node_mapping": {
            "name": "gds_reverse_node_mapping",
            "location": 608,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "cls": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "Dict[str, bool]"
                ],
                "mapping": [
                    "Dict[str, str]",
                    "list",
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "bool",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "GeneratedsSuper.gds_encode": {
            "name": "gds_encode",
            "location": 611,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "instring": [
                    "str"
                ]
            }
        },
        "GeneratedsSuper.convert_unicode": {
            "name": "convert_unicode",
            "location": 621,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]",
                "Dict[str, int]"
            ],
            "arguments": {
                "instring": [
                    "Dict[str, str]",
                    "Mapping[str, Any]",
                    "List[str]",
                    "Callable[[Any], bool]"
                ]
            }
        },
        "GeneratedsSuper.__eq__": {
            "name": "__eq__",
            "location": 629,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "GeneratedsSuper.__ne__": {
            "name": "__ne__",
            "location": 638,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "GeneratedsSuper.gds_djo_etl_transform": {
            "name": "gds_djo_etl_transform",
            "location": 641,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneratedsSuper.gds_djo_etl_transform_db_obj": {
            "name": "gds_djo_etl_transform_db_obj",
            "location": 643,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dbobj": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "float"
                ]
            }
        },
        "GeneratedsSuper.gds_sqa_etl_transform": {
            "name": "gds_sqa_etl_transform",
            "location": 646,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneratedsSuper.gds_sqa_etl_transform_db_obj": {
            "name": "gds_sqa_etl_transform_db_obj",
            "location": 648,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dbobj": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "float"
                ]
            }
        },
        "GeneratedsSuper.gds_get_node_lineno_": {
            "name": "gds_get_node_lineno_",
            "location": 650,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneratedsSuper._FixedOffsetTZ.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int",
                    "datetime.datetime",
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "List[str]",
                    "str",
                    "dict"
                ]
            }
        },
        "GeneratedsSuper._FixedOffsetTZ.utcoffset": {
            "name": "utcoffset",
            "location": 183,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dt": [
                    "datetime.datetime",
                    "Callable[[], None]",
                    "int",
                    "bool"
                ]
            }
        },
        "GeneratedsSuper._FixedOffsetTZ.tzname": {
            "name": "tzname",
            "location": 185,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "dt": [
                    "datetime.datetime",
                    "Callable[[], None]",
                    "int",
                    "bool"
                ]
            }
        },
        "GeneratedsSuper._FixedOffsetTZ.dst": {
            "name": "dst",
            "location": 187,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "dt": [
                    "datetime.datetime",
                    "Callable[[], None]",
                    "int",
                    "bool"
                ]
            }
        },
        "GeneratedsSuper.__eq__.excl_select_objs_": {
            "name": "excl_select_objs_",
            "location": 630,
            "return": [
                "str",
                "type",
                "Optional[Iterable[Any]]",
                "int",
                "bool"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "pywemo-main/pywemo/ouimeaux_device/api/xsd/service.py": {
        "parsexml_": {
            "name": "parsexml_",
            "location": 46,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "infile": [
                    "str"
                ],
                "parser": [
                    "str"
                ]
            }
        },
        "parsexmlstring_": {
            "name": "parsexmlstring_",
            "location": 63,
            "return": [
                "str",
                "Iterable[str]",
                "Dict[str, Any]",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "instring": [
                    "str",
                    "Optional[str]"
                ],
                "parser": [
                    "str"
                ]
            }
        },
        "showIndent": {
            "name": "showIndent",
            "location": 706,
            "return": [
                ""
            ],
            "arguments": {
                "outfile": [
                    "int",
                    "Callable",
                    "str"
                ],
                "level": [
                    "int",
                    "Callable",
                    "str"
                ],
                "pretty_print": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "quote_xml": {
            "name": "quote_xml",
            "location": 712,
            "return": [
                "str"
            ],
            "arguments": {
                "inStr": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "quote_xml_aux": {
            "name": "quote_xml_aux",
            "location": 730,
            "return": [
                "str"
            ],
            "arguments": {
                "inStr": [
                    "str",
                    "int",
                    "Union[str, int]",
                    "type",
                    "Optional[float]"
                ]
            }
        },
        "quote_attrib": {
            "name": "quote_attrib",
            "location": 737,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "inStr": [
                    "str",
                    "List[str]",
                    "Hashable"
                ]
            }
        },
        "quote_python": {
            "name": "quote_python",
            "location": 752,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "inStr": [
                    "str",
                    "Optional[str]",
                    "Optional[Any]"
                ]
            }
        },
        "get_all_text_": {
            "name": "get_all_text_",
            "location": 768,
            "return": [
                "str"
            ],
            "arguments": {
                "node": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Set[str]]"
                ]
            }
        },
        "find_attr_value_": {
            "name": "find_attr_value_",
            "location": 779,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "attr_name": [
                    "str"
                ],
                "node": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "encode_str_2_3": {
            "name": "encode_str_2_3",
            "location": 793,
            "return": [
                "float",
                "Tuple[int, int]",
                "str",
                "int"
            ],
            "arguments": {
                "instr": [
                    "str",
                    "bool",
                    "int",
                    "float",
                    "IO[str]"
                ]
            }
        },
        "raise_parse_error": {
            "name": "raise_parse_error",
            "location": 801,
            "return": [
                ""
            ],
            "arguments": {
                "node": [],
                "msg": [
                    "Sequence[object]"
                ]
            }
        },
        "_cast": {
            "name": "_cast",
            "location": 956,
            "return": [
                "int",
                "bool",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "typ": [
                    "list",
                    "Optional[int]",
                    "Optional[object]",
                    "float"
                ],
                "value": [
                    "list",
                    "Optional[int]",
                    "Optional[object]",
                    "float"
                ]
            }
        },
        "usage": {
            "name": "usage",
            "location": 2249,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "get_root_tag": {
            "name": "get_root_tag",
            "location": 2254,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "node": [
                    "str",
                    "List[str]",
                    "int",
                    "Tuple[type]"
                ]
            }
        },
        "get_required_ns_prefix_defs": {
            "name": "get_required_ns_prefix_defs",
            "location": 2262,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "rootNode": [
                    "int"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 2279,
            "return": [
                "Optional[datetime.datetime]",
                "str"
            ],
            "arguments": {
                "inFileName": [
                    "str"
                ],
                "silence": [
                    "bool",
                    "Iterable[str]",
                    "str",
                    "Optional[Any]"
                ],
                "print_warnings": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "parseEtree": {
            "name": "parseEtree",
            "location": 2311,
            "return": [
                "bool",
                "str",
                "List[int]"
            ],
            "arguments": {
                "inFileName": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "int"
                ],
                "silence": [
                    "bool",
                    "Optional[List[Any]]",
                    "List[str]"
                ],
                "print_warnings": [
                    "str",
                    "int",
                    "Any",
                    "Dict[int, str]",
                    "List[Dict[str, Any]]",
                    "bytes"
                ],
                "mapping": [
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "nsmap": [
                    "Optional[str]",
                    "str",
                    "Sequence[Sequence[Any]]",
                    "Union[str, int]"
                ]
            }
        },
        "parseString": {
            "name": "parseString",
            "location": 2348,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "inString": [
                    "str"
                ],
                "silence": [
                    "str",
                    "Iterable[Tuple[int, int]]",
                    "Optional[str]"
                ],
                "print_warnings": [
                    "str",
                    "list",
                    "int",
                    "bytes"
                ]
            }
        },
        "parseLiteral": {
            "name": "parseLiteral",
            "location": 2383,
            "return": [
                "Optional[datetime.datetime]",
                "List[Dict[str, str]]"
            ],
            "arguments": {
                "inFileName": [
                    "str"
                ],
                "silence": [
                    "bool",
                    "Iterable[str]",
                    "Optional[Any]",
                    "str",
                    "Dict[str,str]",
                    "List[Dict[str, Any]]"
                ],
                "print_warnings": [
                    "int",
                    "str",
                    "List[str]",
                    "list"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 2414,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "MixedContainer.__init__": {
            "name": "__init__",
            "location": 823,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "category": [
                    "int",
                    "Callable",
                    "bool",
                    "str"
                ],
                "content_type": [
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "value": [
                    "str",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "MixedContainer.getCategory": {
            "name": "getCategory",
            "location": 828,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixedContainer.getContenttype": {
            "name": "getContenttype",
            "location": 830,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "content_type": [
                    "List[str]",
                    "Optional[str]",
                    "List[Tuple[str, str]]",
                    "int",
                    "list"
                ]
            }
        },
        "MixedContainer.getValue": {
            "name": "getValue",
            "location": 832,
            "return": [
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixedContainer.getName": {
            "name": "getName",
            "location": 834,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "MixedContainer.export": {
            "name": "export",
            "location": 836,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "str",
                    "Union[str, int]",
                    "Optional[str]",
                    "int",
                    "dict",
                    "MutableMapping[str, Any]"
                ],
                "level": [
                    "str",
                    "dict",
                    "Optional[Callable]",
                    "Optional[Any]",
                    "list"
                ],
                "name": [
                    "str",
                    "dict",
                    "Optional[Callable]",
                    "Optional[Any]",
                    "list"
                ],
                "namespace": [
                    "str",
                    "Optional[Callable]",
                    "Optional[Any]",
                    "Optional[str]",
                    "bool",
                    "bytes"
                ],
                "pretty_print": [
                    "str",
                    "Optional[Callable]",
                    "Optional[Any]",
                    "Optional[str]",
                    "bool",
                    "bytes"
                ]
            }
        },
        "MixedContainer.exportSimple": {
            "name": "exportSimple",
            "location": 848,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "str",
                    "dict"
                ],
                "level": [
                    "str",
                    "bool",
                    "List[Union[int, Any]]",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "dict"
                ]
            }
        },
        "MixedContainer.to_etree": {
            "name": "to_etree",
            "location": 868,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "element": [
                    "Optional",
                    "bool",
                    "Optional[Mapping]",
                    "Set[int]"
                ],
                "mapping_": [
                    "bool",
                    "dict",
                    "xml.etree.ElementTree.Element",
                    "Sequence[T]",
                    "tuple"
                ],
                "nsmap_": [
                    "bool",
                    "dict",
                    "xml.etree.ElementTree.Element",
                    "Sequence[T]",
                    "tuple"
                ]
            }
        },
        "MixedContainer.to_etree_simple": {
            "name": "to_etree_simple",
            "location": 888,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "mapping_": [
                    "bool",
                    "str",
                    "List[Dict[str, Any]]",
                    "Type[T]"
                ],
                "nsmap_": [
                    "bool",
                    "str",
                    "List[Dict[str, Any]]",
                    "Type[T]"
                ]
            }
        },
        "MixedContainer.exportLiteral": {
            "name": "exportLiteral",
            "location": 902,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "str",
                    "dict",
                    "Callable"
                ],
                "level": [
                    "bool",
                    "int",
                    "float",
                    "dict"
                ],
                "name": [
                    "Mapping[str, str]",
                    "Dict[str, Any]",
                    "int",
                    "bool"
                ]
            }
        },
        "MemberSpec_.__init__": {
            "name": "__init__",
            "location": 926,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, str]"
                ],
                "data_type": [
                    "int",
                    "Dict[str, str]",
                    "str",
                    "Tuple[int, int]"
                ],
                "container": [
                    "Optional[str]",
                    "int",
                    "str",
                    "bool"
                ],
                "optional": [
                    "Optional[str]",
                    "int",
                    "str",
                    "bool"
                ],
                "child_attrs": [
                    "Optional[str]",
                    "int",
                    "str",
                    "bool"
                ],
                "choice": [
                    "Optional[str]",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "MemberSpec_.set_name": {
            "name": "set_name",
            "location": 934,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "bool",
                    "str"
                ]
            }
        },
        "MemberSpec_.get_name": {
            "name": "get_name",
            "location": 935,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberSpec_.set_data_type": {
            "name": "set_data_type",
            "location": 936,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data_type": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Iterable[Dict]",
                    "float",
                    "Optional[bool]"
                ]
            }
        },
        "MemberSpec_.get_data_type_chain": {
            "name": "get_data_type_chain",
            "location": 937,
            "return": [
                "Optional[str]",
                "Tuple[str, str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberSpec_.get_data_type": {
            "name": "get_data_type",
            "location": 938,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberSpec_.set_container": {
            "name": "set_container",
            "location": 946,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "container": [
                    "Optional[str]",
                    "List[Type]",
                    "List[str]"
                ]
            }
        },
        "MemberSpec_.get_container": {
            "name": "get_container",
            "location": 947,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MemberSpec_.set_child_attrs": {
            "name": "set_child_attrs",
            "location": 948,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "child_attrs": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "MemberSpec_.get_child_attrs": {
            "name": "get_child_attrs",
            "location": 949,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberSpec_.set_choice": {
            "name": "set_choice",
            "location": 950,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "choice": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "MemberSpec_.get_choice": {
            "name": "get_choice",
            "location": 951,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberSpec_.set_optional": {
            "name": "set_optional",
            "location": 952,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "optional": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "MemberSpec_.get_optional": {
            "name": "get_optional",
            "location": 953,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "scpd.__init__": {
            "name": "__init__",
            "location": 970,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "specVersion": [
                    "List[List[str]]",
                    "Optional[Mapping]",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "str",
                    "Exception",
                    "int"
                ],
                "actionList": [
                    "bool",
                    "List[str]",
                    "Optional[List[str]]"
                ],
                "serviceStateTable": [
                    "dict",
                    "bool",
                    "str"
                ],
                "gds_collector_": [
                    "List[List[str]]",
                    "Optional[Mapping]",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "str",
                    "Exception",
                    "int"
                ]
            }
        },
        "scpd.factory": {
            "name": "factory",
            "location": 982,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "scpd.get_ns_prefix_": {
            "name": "get_ns_prefix_",
            "location": 993,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "scpd.set_ns_prefix_": {
            "name": "set_ns_prefix_",
            "location": 995,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ns_prefix": [
                    "bool",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "scpd.get_specVersion": {
            "name": "get_specVersion",
            "location": 997,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "scpd.set_specVersion": {
            "name": "set_specVersion",
            "location": 999,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "specVersion": [
                    "int",
                    "str",
                    "bool",
                    "Sequence[Dict[str, str]]"
                ]
            }
        },
        "scpd.get_actionList": {
            "name": "get_actionList",
            "location": 1001,
            "return": [
                "str",
                "List[Dict]",
                "List[int]",
                "List[str]",
                "List[List[Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "scpd.set_actionList": {
            "name": "set_actionList",
            "location": 1003,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "actionList": [
                    "str",
                    "Optional[List[Any]]",
                    "int",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "scpd.get_serviceStateTable": {
            "name": "get_serviceStateTable",
            "location": 1005,
            "return": [
                "str",
                "bool",
                "bytes",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "scpd.set_serviceStateTable": {
            "name": "set_serviceStateTable",
            "location": 1007,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "serviceStateTable": [
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "bool"
                ]
            }
        },
        "scpd.hasContent_": {
            "name": "hasContent_",
            "location": 1009,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "scpd.export": {
            "name": "export",
            "location": 1018,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "str",
                    "Union[int, float]",
                    "Optional[List[Any]]"
                ],
                "level": [
                    "bool",
                    "int",
                    "str"
                ],
                "namespaceprefix_": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "namespacedef_": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "name_": [
                    "dict",
                    "Dict[str, str]",
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]"
                ],
                "pretty_print": [
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "scpd.exportAttributes": {
            "name": "exportAttributes",
            "location": 1041,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "level": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "already_processed": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "namespaceprefix_": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "name_": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "scpd.exportChildren": {
            "name": "exportChildren",
            "location": 1043,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "Iterable[Any]",
                    "Sequence[float]"
                ],
                "level": [
                    "Iterable[Any]",
                    "Sequence[float]"
                ],
                "namespaceprefix_": [
                    "Tuple[float, float]",
                    "Type",
                    "Optional[Dict[str, Any]]",
                    "\"Point\"",
                    "Callable"
                ],
                "namespacedef_": [
                    "Iterable[Any]",
                    "Sequence[float]"
                ],
                "name_": [
                    "Iterable[Any]",
                    "Sequence[float]"
                ],
                "fromsubclass_": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Callable"
                ],
                "pretty_print": [
                    "Iterable[Any]",
                    "Sequence[float]"
                ]
            }
        },
        "scpd.build": {
            "name": "build",
            "location": 1057,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "gds_collector_": [
                    "str"
                ]
            }
        },
        "scpd.buildAttributes": {
            "name": "buildAttributes",
            "location": 1068,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "attrs": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "already_processed": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ]
            }
        },
        "scpd.buildChildren": {
            "name": "buildChildren",
            "location": 1070,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "child_": [
                    "str"
                ],
                "node": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "nodeName_": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "fromsubclass_": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "gds_collector_": [
                    "str"
                ]
            }
        },
        "SpecVersionType.__init__": {
            "name": "__init__",
            "location": 1093,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "major": [
                    "Callable",
                    "str",
                    "bool",
                    "Iterable[str]",
                    "int"
                ],
                "minor": [
                    "Callable",
                    "str",
                    "bool",
                    "Iterable[str]",
                    "int"
                ],
                "gds_collector_": [
                    "Callable",
                    "str",
                    "bool",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "SpecVersionType.factory": {
            "name": "factory",
            "location": 1103,
            "return": [
                "Type",
                "str"
            ],
            "arguments": {}
        },
        "SpecVersionType.get_ns_prefix_": {
            "name": "get_ns_prefix_",
            "location": 1114,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecVersionType.set_ns_prefix_": {
            "name": "set_ns_prefix_",
            "location": 1116,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ns_prefix": [
                    "bool",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "SpecVersionType.get_major": {
            "name": "get_major",
            "location": 1118,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecVersionType.set_major": {
            "name": "set_major",
            "location": 1120,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "major": [
                    "bool",
                    "float"
                ]
            }
        },
        "SpecVersionType.get_minor": {
            "name": "get_minor",
            "location": 1122,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecVersionType.set_minor": {
            "name": "set_minor",
            "location": 1124,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "minor": [
                    "bool",
                    "float"
                ]
            }
        },
        "SpecVersionType.hasContent_": {
            "name": "hasContent_",
            "location": 1126,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecVersionType.export": {
            "name": "export",
            "location": 1134,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "str",
                    "Union[int, float]",
                    "Optional[List[Any]]"
                ],
                "level": [
                    "bool",
                    "int",
                    "str"
                ],
                "namespaceprefix_": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "namespacedef_": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "name_": [
                    "dict",
                    "Dict[str, str]",
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]"
                ],
                "pretty_print": [
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "SpecVersionType.exportAttributes": {
            "name": "exportAttributes",
            "location": 1157,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "level": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "already_processed": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "namespaceprefix_": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "name_": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "SpecVersionType.exportChildren": {
            "name": "exportChildren",
            "location": 1159,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "str"
                ],
                "level": [
                    "str",
                    "int",
                    "datetime.datetime"
                ],
                "namespaceprefix_": [
                    "str",
                    "int"
                ],
                "namespacedef_": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Callable"
                ],
                "name_": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Callable"
                ],
                "fromsubclass_": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Callable"
                ],
                "pretty_print": [
                    "str",
                    "int",
                    "datetime.datetime"
                ]
            }
        },
        "SpecVersionType.build": {
            "name": "build",
            "location": 1172,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "gds_collector_": [
                    "str"
                ]
            }
        },
        "SpecVersionType.buildAttributes": {
            "name": "buildAttributes",
            "location": 1183,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "attrs": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "already_processed": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ]
            }
        },
        "SpecVersionType.buildChildren": {
            "name": "buildChildren",
            "location": 1185,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "child_": [
                    "str",
                    "dict"
                ],
                "node": [
                    "str",
                    "int",
                    "List[int]"
                ],
                "nodeName_": [
                    "str"
                ],
                "fromsubclass_": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "gds_collector_": [
                    "str",
                    "Type[T]",
                    "type"
                ]
            }
        },
        "ActionListType.__init__": {
            "name": "__init__",
            "location": 1205,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "action": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "Optional[Callable]",
                    "Optional[Hashable]",
                    "Optional[float]"
                ],
                "gds_collector_": [
                    "Callable",
                    "str",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "int"
                ]
            }
        },
        "ActionListType.factory": {
            "name": "factory",
            "location": 1216,
            "return": [
                "Type",
                "str"
            ],
            "arguments": {}
        },
        "ActionListType.get_ns_prefix_": {
            "name": "get_ns_prefix_",
            "location": 1227,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActionListType.set_ns_prefix_": {
            "name": "set_ns_prefix_",
            "location": 1229,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ns_prefix": [
                    "bool",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "ActionListType.get_action": {
            "name": "get_action",
            "location": 1231,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActionListType.set_action": {
            "name": "set_action",
            "location": 1233,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "action": [
                    "bool",
                    "float"
                ]
            }
        },
        "ActionListType.add_action": {
            "name": "add_action",
            "location": 1235,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict[str, Any]",
                    "List[float]",
                    "List[str]",
                    "int",
                    "Dict[str, bool]",
                    "List[List[Any]]"
                ]
            }
        },
        "ActionListType.insert_action_at": {
            "name": "insert_action_at",
            "location": 1237,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "list",
                    "str",
                    "tuple",
                    "float"
                ],
                "value": [
                    "int",
                    "list",
                    "str",
                    "tuple",
                    "float"
                ]
            }
        },
        "ActionListType.replace_action_at": {
            "name": "replace_action_at",
            "location": 1239,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "list",
                    "float",
                    "List[str]"
                ],
                "value": [
                    "int",
                    "list",
                    "float",
                    "List[str]"
                ]
            }
        },
        "ActionListType.hasContent_": {
            "name": "hasContent_",
            "location": 1241,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActionListType.export": {
            "name": "export",
            "location": 1248,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "str",
                    "Union[int, float]",
                    "Optional[List[Any]]"
                ],
                "level": [
                    "bool",
                    "int",
                    "str"
                ],
                "namespaceprefix_": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "namespacedef_": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "name_": [
                    "dict",
                    "Dict[str, str]",
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]"
                ],
                "pretty_print": [
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "ActionListType.exportAttributes": {
            "name": "exportAttributes",
            "location": 1271,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "level": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "already_processed": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "namespaceprefix_": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "name_": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "ActionListType.exportChildren": {
            "name": "exportChildren",
            "location": 1273,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "bool",
                    "Callable",
                    "str",
                    "Union[str, int]",
                    "Union[int, float]"
                ],
                "level": [
                    "bool",
                    "Callable",
                    "str",
                    "Union[str, int]",
                    "Union[int, float]"
                ],
                "namespaceprefix_": [
                    "bool",
                    "str"
                ],
                "namespacedef_": [
                    "bool",
                    "Callable",
                    "str",
                    "Union[str, int]",
                    "Union[int, float]"
                ],
                "name_": [
                    "bool",
                    "Callable",
                    "str",
                    "Union[str, int]",
                    "Union[int, float]"
                ],
                "fromsubclass_": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Callable"
                ],
                "pretty_print": [
                    "bool",
                    "Callable",
                    "str",
                    "Union[str, int]",
                    "Union[int, float]"
                ]
            }
        },
        "ActionListType.build": {
            "name": "build",
            "location": 1281,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "gds_collector_": [
                    "str"
                ]
            }
        },
        "ActionListType.buildAttributes": {
            "name": "buildAttributes",
            "location": 1292,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "attrs": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "already_processed": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ]
            }
        },
        "ActionListType.buildChildren": {
            "name": "buildChildren",
            "location": 1294,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "child_": [
                    "str",
                    "Dict[str, Any]"
                ],
                "node": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "nodeName_": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "fromsubclass_": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "gds_collector_": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "ActionType.__init__": {
            "name": "__init__",
            "location": 1307,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[Sequence[Any]]",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ],
                "argumentList": [
                    "str",
                    "List[str]",
                    "Optional[Dict]",
                    "Callable"
                ],
                "gds_collector_": [
                    "bool",
                    "str",
                    "Sequence",
                    "int"
                ]
            }
        },
        "ActionType.factory": {
            "name": "factory",
            "location": 1317,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "ActionType.get_ns_prefix_": {
            "name": "get_ns_prefix_",
            "location": 1328,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActionType.set_ns_prefix_": {
            "name": "set_ns_prefix_",
            "location": 1330,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ns_prefix": [
                    "bool",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "ActionType.get_name": {
            "name": "get_name",
            "location": 1332,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActionType.set_name": {
            "name": "set_name",
            "location": 1334,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ActionType.get_argumentList": {
            "name": "get_argumentList",
            "location": 1336,
            "return": [
                "str",
                "List[Dict]",
                "List[int]",
                "List[str]",
                "List[List[Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActionType.set_argumentList": {
            "name": "set_argumentList",
            "location": 1338,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "argumentList": [
                    "str",
                    "os.PathLike",
                    "int",
                    "List[str]"
                ]
            }
        },
        "ActionType.hasContent_": {
            "name": "hasContent_",
            "location": 1340,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActionType.export": {
            "name": "export",
            "location": 1348,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "str",
                    "Union[int, float]",
                    "Optional[List[Any]]"
                ],
                "level": [
                    "bool",
                    "int",
                    "str"
                ],
                "namespaceprefix_": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "namespacedef_": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "name_": [
                    "dict",
                    "Dict[str, str]",
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]"
                ],
                "pretty_print": [
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "ActionType.exportAttributes": {
            "name": "exportAttributes",
            "location": 1371,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "level": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "already_processed": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "namespaceprefix_": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "name_": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "ActionType.exportChildren": {
            "name": "exportChildren",
            "location": 1373,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "str"
                ],
                "level": [
                    "int",
                    "Optional[Union[str, Any]]",
                    "Optional[bool]",
                    "str",
                    "bool"
                ],
                "namespaceprefix_": [
                    "str",
                    "Optional[List[str]]",
                    "List[Union[str, Any]]",
                    "List['PydanticModelField']"
                ],
                "namespacedef_": [
                    "List[str]",
                    "dict",
                    "str",
                    "List[dict]"
                ],
                "name_": [
                    "List[str]",
                    "dict",
                    "str",
                    "List[dict]"
                ],
                "fromsubclass_": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Callable"
                ],
                "pretty_print": [
                    "int",
                    "Optional[Union[str, Any]]",
                    "Optional[bool]",
                    "str",
                    "bool"
                ]
            }
        },
        "ActionType.build": {
            "name": "build",
            "location": 1385,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "gds_collector_": [
                    "str"
                ]
            }
        },
        "ActionType.buildAttributes": {
            "name": "buildAttributes",
            "location": 1396,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "attrs": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "already_processed": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ]
            }
        },
        "ActionType.buildChildren": {
            "name": "buildChildren",
            "location": 1398,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "child_": [
                    "str"
                ],
                "node": [
                    "str",
                    "Iterable[Hashable]",
                    "dict"
                ],
                "nodeName_": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "fromsubclass_": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "gds_collector_": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "ArgumentListType.__init__": {
            "name": "__init__",
            "location": 1417,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "argument": [
                    "Optional[float]",
                    "Optional[str]",
                    "int"
                ],
                "gds_collector_": [
                    "Callable",
                    "str",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "int"
                ]
            }
        },
        "ArgumentListType.factory": {
            "name": "factory",
            "location": 1428,
            "return": [
                "Type",
                "str"
            ],
            "arguments": {}
        },
        "ArgumentListType.get_ns_prefix_": {
            "name": "get_ns_prefix_",
            "location": 1439,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArgumentListType.set_ns_prefix_": {
            "name": "set_ns_prefix_",
            "location": 1441,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ns_prefix": [
                    "bool",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "ArgumentListType.get_argument": {
            "name": "get_argument",
            "location": 1443,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArgumentListType.set_argument": {
            "name": "set_argument",
            "location": 1445,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "argument": [
                    "bool",
                    "float"
                ]
            }
        },
        "ArgumentListType.add_argument": {
            "name": "add_argument",
            "location": 1447,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict[str, Any]",
                    "List[float]",
                    "List[str]",
                    "int",
                    "Dict[str, bool]",
                    "List[List[Any]]"
                ]
            }
        },
        "ArgumentListType.insert_argument_at": {
            "name": "insert_argument_at",
            "location": 1449,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "list",
                    "str",
                    "tuple",
                    "float"
                ],
                "value": [
                    "int",
                    "list",
                    "str",
                    "tuple",
                    "float"
                ]
            }
        },
        "ArgumentListType.replace_argument_at": {
            "name": "replace_argument_at",
            "location": 1451,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "list",
                    "float",
                    "List[str]"
                ],
                "value": [
                    "int",
                    "list",
                    "float",
                    "List[str]"
                ]
            }
        },
        "ArgumentListType.hasContent_": {
            "name": "hasContent_",
            "location": 1453,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArgumentListType.export": {
            "name": "export",
            "location": 1460,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "str",
                    "Union[int, float]",
                    "Optional[List[Any]]"
                ],
                "level": [
                    "bool",
                    "int",
                    "str"
                ],
                "namespaceprefix_": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "namespacedef_": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "name_": [
                    "dict",
                    "Dict[str, str]",
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]"
                ],
                "pretty_print": [
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "ArgumentListType.exportAttributes": {
            "name": "exportAttributes",
            "location": 1483,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "level": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "already_processed": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "namespaceprefix_": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "name_": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "ArgumentListType.exportChildren": {
            "name": "exportChildren",
            "location": 1485,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "bool",
                    "Callable",
                    "str",
                    "Union[str, int]",
                    "Union[int, float]"
                ],
                "level": [
                    "bool",
                    "Callable",
                    "str",
                    "Union[str, int]",
                    "Union[int, float]"
                ],
                "namespaceprefix_": [
                    "str",
                    "bool",
                    "int",
                    "Tuple[int, int]"
                ],
                "namespacedef_": [
                    "bool",
                    "Callable",
                    "str",
                    "Union[str, int]",
                    "Union[int, float]"
                ],
                "name_": [
                    "bool",
                    "Callable",
                    "str",
                    "Union[str, int]",
                    "Union[int, float]"
                ],
                "fromsubclass_": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Callable"
                ],
                "pretty_print": [
                    "bool",
                    "Callable",
                    "str",
                    "Union[str, int]",
                    "Union[int, float]"
                ]
            }
        },
        "ArgumentListType.build": {
            "name": "build",
            "location": 1493,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "gds_collector_": [
                    "str"
                ]
            }
        },
        "ArgumentListType.buildAttributes": {
            "name": "buildAttributes",
            "location": 1504,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "attrs": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "already_processed": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ]
            }
        },
        "ArgumentListType.buildChildren": {
            "name": "buildChildren",
            "location": 1506,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "child_": [
                    "str",
                    "Dict[str, Any]"
                ],
                "node": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "nodeName_": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "fromsubclass_": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "gds_collector_": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "ArgumentType.__init__": {
            "name": "__init__",
            "location": 1519,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ],
                "direction": [
                    "Optional[str]",
                    "str",
                    "Mapping[str, Any]",
                    "int",
                    "bool"
                ],
                "relatedStateVariable": [
                    "Optional[bool]",
                    "Optional[int]",
                    "Optional[List[str]]",
                    "Optional[float]"
                ],
                "retval": [
                    "Optional[str]",
                    "str",
                    "Mapping[str, Any]",
                    "int",
                    "bool"
                ],
                "gds_collector_": [
                    "Optional[str]",
                    "str",
                    "Mapping[str, Any]",
                    "int",
                    "bool"
                ]
            }
        },
        "ArgumentType.factory": {
            "name": "factory",
            "location": 1533,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "ArgumentType.get_ns_prefix_": {
            "name": "get_ns_prefix_",
            "location": 1544,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArgumentType.set_ns_prefix_": {
            "name": "set_ns_prefix_",
            "location": 1546,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ns_prefix": [
                    "bool",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "ArgumentType.get_name": {
            "name": "get_name",
            "location": 1548,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArgumentType.set_name": {
            "name": "set_name",
            "location": 1550,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ArgumentType.get_direction": {
            "name": "get_direction",
            "location": 1552,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArgumentType.set_direction": {
            "name": "set_direction",
            "location": 1554,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "direction": [
                    "bool",
                    "float"
                ]
            }
        },
        "ArgumentType.get_relatedStateVariable": {
            "name": "get_relatedStateVariable",
            "location": 1556,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArgumentType.set_relatedStateVariable": {
            "name": "set_relatedStateVariable",
            "location": 1558,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "relatedStateVariable": [
                    "Callable[[], T]",
                    "Optional[str]",
                    "int",
                    "bool",
                    "Callable[[], None]"
                ]
            }
        },
        "ArgumentType.get_retval": {
            "name": "get_retval",
            "location": 1560,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArgumentType.set_retval": {
            "name": "set_retval",
            "location": 1562,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "retval": [
                    "bool",
                    "float"
                ]
            }
        },
        "ArgumentType.hasContent_": {
            "name": "hasContent_",
            "location": 1564,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArgumentType.export": {
            "name": "export",
            "location": 1574,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "str",
                    "Union[int, float]",
                    "Optional[List[Any]]"
                ],
                "level": [
                    "bool",
                    "int",
                    "str"
                ],
                "namespaceprefix_": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "namespacedef_": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "name_": [
                    "dict",
                    "Dict[str, str]",
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]"
                ],
                "pretty_print": [
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "ArgumentType.exportAttributes": {
            "name": "exportAttributes",
            "location": 1597,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "level": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "already_processed": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "namespaceprefix_": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "name_": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "ArgumentType.exportChildren": {
            "name": "exportChildren",
            "location": 1599,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "str"
                ],
                "level": [
                    "str",
                    "int"
                ],
                "namespaceprefix_": [
                    "str",
                    "Optional[List[str]]",
                    "List[Union[str, Any]]",
                    "List['PydanticModelField']"
                ],
                "namespacedef_": [
                    "bool",
                    "Callable",
                    "str",
                    "Union[str, int]",
                    "Union[int, float]"
                ],
                "name_": [
                    "bool",
                    "Callable",
                    "str",
                    "Union[str, int]",
                    "Union[int, float]"
                ],
                "fromsubclass_": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Callable"
                ],
                "pretty_print": [
                    "str",
                    "int"
                ]
            }
        },
        "ArgumentType.build": {
            "name": "build",
            "location": 1619,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "gds_collector_": [
                    "str"
                ]
            }
        },
        "ArgumentType.buildAttributes": {
            "name": "buildAttributes",
            "location": 1630,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "attrs": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "already_processed": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ]
            }
        },
        "ArgumentType.buildChildren": {
            "name": "buildChildren",
            "location": 1632,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "child_": [
                    "str"
                ],
                "node": [
                    "str",
                    "Type[T]",
                    "Iterable[Hashable]",
                    "Type",
                    "type",
                    "bool"
                ],
                "nodeName_": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "fromsubclass_": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "gds_collector_": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "ServiceStateTableType.__init__": {
            "name": "__init__",
            "location": 1663,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stateVariable": [
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[Union[str, Callable, bool]]",
                    "List[\"Issue\"]",
                    "Optional[int]",
                    "bool"
                ],
                "gds_collector_": [
                    "bool",
                    "int"
                ]
            }
        },
        "ServiceStateTableType.factory": {
            "name": "factory",
            "location": 1674,
            "return": [
                "bool",
                "str",
                "type"
            ],
            "arguments": {}
        },
        "ServiceStateTableType.get_ns_prefix_": {
            "name": "get_ns_prefix_",
            "location": 1685,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceStateTableType.set_ns_prefix_": {
            "name": "set_ns_prefix_",
            "location": 1687,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ns_prefix": [
                    "bool",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "ServiceStateTableType.get_stateVariable": {
            "name": "get_stateVariable",
            "location": 1689,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceStateTableType.set_stateVariable": {
            "name": "set_stateVariable",
            "location": 1691,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stateVariable": [
                    "Iterable[str]",
                    "Callable",
                    "list",
                    "str"
                ]
            }
        },
        "ServiceStateTableType.add_stateVariable": {
            "name": "add_stateVariable",
            "location": 1693,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[str]",
                    "str",
                    "dict",
                    "List[str]",
                    "List[T]",
                    "T",
                    "list"
                ]
            }
        },
        "ServiceStateTableType.insert_stateVariable_at": {
            "name": "insert_stateVariable_at",
            "location": 1695,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "ServiceStateTableType.replace_stateVariable_at": {
            "name": "replace_stateVariable_at",
            "location": 1697,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "float",
                    "Tuple[str, Any]",
                    "Tuple[str]",
                    "Sequence[Sequence[Any]]",
                    "list",
                    "tuple"
                ],
                "value": [
                    "int",
                    "float",
                    "Tuple[str, Any]",
                    "Tuple[str]",
                    "Sequence[Sequence[Any]]",
                    "list",
                    "tuple"
                ]
            }
        },
        "ServiceStateTableType.hasContent_": {
            "name": "hasContent_",
            "location": 1699,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceStateTableType.export": {
            "name": "export",
            "location": 1706,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "str",
                    "Union[int, float]",
                    "Optional[List[Any]]"
                ],
                "level": [
                    "bool",
                    "int",
                    "str"
                ],
                "namespaceprefix_": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "namespacedef_": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "name_": [
                    "dict",
                    "Dict[str, str]",
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]"
                ],
                "pretty_print": [
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "ServiceStateTableType.exportAttributes": {
            "name": "exportAttributes",
            "location": 1729,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "level": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "already_processed": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "namespaceprefix_": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "name_": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "ServiceStateTableType.exportChildren": {
            "name": "exportChildren",
            "location": 1731,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "int",
                    "float",
                    "dict",
                    "bool",
                    "T"
                ],
                "level": [
                    "int",
                    "float",
                    "dict",
                    "bool",
                    "T"
                ],
                "namespaceprefix_": [
                    "bool",
                    "Dict[str, Any]"
                ],
                "namespacedef_": [
                    "int",
                    "float",
                    "dict",
                    "bool",
                    "T"
                ],
                "name_": [
                    "int",
                    "float",
                    "dict",
                    "bool",
                    "T"
                ],
                "fromsubclass_": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Callable"
                ],
                "pretty_print": [
                    "int",
                    "float",
                    "dict",
                    "bool",
                    "T"
                ]
            }
        },
        "ServiceStateTableType.build": {
            "name": "build",
            "location": 1739,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "gds_collector_": [
                    "str"
                ]
            }
        },
        "ServiceStateTableType.buildAttributes": {
            "name": "buildAttributes",
            "location": 1750,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "attrs": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "already_processed": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ]
            }
        },
        "ServiceStateTableType.buildChildren": {
            "name": "buildChildren",
            "location": 1752,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "child_": [
                    "str",
                    "Dict[str, Any]"
                ],
                "node": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "nodeName_": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "fromsubclass_": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "gds_collector_": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "StateVariableType.__init__": {
            "name": "__init__",
            "location": 1765,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sendEvents": [
                    "Optional[bool]",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "Optional[Any]",
                    "str",
                    "Optional[Dict[str, int]]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[Sequence[Any]]",
                    "bool"
                ],
                "dataType": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "str"
                ],
                "defaultValue": [
                    "bool",
                    "int",
                    "Dict[str, str]"
                ],
                "allowedValueList": [
                    "bool",
                    "Optional[str]",
                    "str"
                ],
                "allowedValueRange": [
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "gds_collector_": [
                    "Optional[str]",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "StateVariableType.factory": {
            "name": "factory",
            "location": 1783,
            "return": [
                "bool",
                "Optional[Any]",
                "str"
            ],
            "arguments": {}
        },
        "StateVariableType.get_ns_prefix_": {
            "name": "get_ns_prefix_",
            "location": 1794,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateVariableType.set_ns_prefix_": {
            "name": "set_ns_prefix_",
            "location": 1796,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ns_prefix": [
                    "bool",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "StateVariableType.get_name": {
            "name": "get_name",
            "location": 1798,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateVariableType.set_name": {
            "name": "set_name",
            "location": 1800,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "StateVariableType.get_dataType": {
            "name": "get_dataType",
            "location": 1802,
            "return": [
                "Optional[str]",
                "Tuple[str, str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateVariableType.set_dataType": {
            "name": "set_dataType",
            "location": 1804,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dataType": [
                    "str",
                    "bool"
                ]
            }
        },
        "StateVariableType.get_defaultValue": {
            "name": "get_defaultValue",
            "location": 1806,
            "return": [
                "bool",
                "Tuple[float, float, float, float]",
                "int",
                "str",
                "Mapping"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateVariableType.set_defaultValue": {
            "name": "set_defaultValue",
            "location": 1808,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "defaultValue": [
                    "str",
                    "Sequence[Dict[str, str]]",
                    "float",
                    "int",
                    "datetime.datetime",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "StateVariableType.get_allowedValueList": {
            "name": "get_allowedValueList",
            "location": 1810,
            "return": [
                "str",
                "Optional[object]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateVariableType.set_allowedValueList": {
            "name": "set_allowedValueList",
            "location": 1812,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "allowedValueList": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "StateVariableType.get_allowedValueRange": {
            "name": "get_allowedValueRange",
            "location": 1814,
            "return": [
                "str",
                "List[str]",
                "Mapping[str, T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateVariableType.set_allowedValueRange": {
            "name": "set_allowedValueRange",
            "location": 1816,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "allowedValueRange": [
                    "datetime.datetime",
                    "datetime.date",
                    "str",
                    "List[datetime.date]"
                ]
            }
        },
        "StateVariableType.get_sendEvents": {
            "name": "get_sendEvents",
            "location": 1818,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateVariableType.set_sendEvents": {
            "name": "set_sendEvents",
            "location": 1820,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sendEvents": []
            }
        },
        "StateVariableType.hasContent_": {
            "name": "hasContent_",
            "location": 1822,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateVariableType.export": {
            "name": "export",
            "location": 1833,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "str",
                    "Union[int, float]",
                    "Optional[List[Any]]"
                ],
                "level": [
                    "bool",
                    "int",
                    "str"
                ],
                "namespaceprefix_": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "namespacedef_": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "name_": [
                    "dict",
                    "Dict[str, str]",
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]"
                ],
                "pretty_print": [
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "StateVariableType.exportAttributes": {
            "name": "exportAttributes",
            "location": 1856,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "str",
                    "int"
                ],
                "level": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "already_processed": [
                    "bool",
                    "float",
                    "List[str]",
                    "int"
                ],
                "namespaceprefix_": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "name_": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "StateVariableType.exportChildren": {
            "name": "exportChildren",
            "location": 1860,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "str"
                ],
                "level": [
                    "str",
                    "bool"
                ],
                "namespaceprefix_": [
                    "str",
                    "Optional[List[str]]",
                    "List[Union[str, Any]]",
                    "List['PydanticModelField']"
                ],
                "namespacedef_": [
                    "str",
                    "Callable",
                    "int",
                    "Iterable[Type]"
                ],
                "name_": [
                    "str",
                    "Callable",
                    "int",
                    "Iterable[Type]"
                ],
                "fromsubclass_": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Callable"
                ],
                "pretty_print": [
                    "str",
                    "bool"
                ]
            }
        },
        "StateVariableType.build": {
            "name": "build",
            "location": 1883,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "gds_collector_": [
                    "str"
                ]
            }
        },
        "StateVariableType.buildAttributes": {
            "name": "buildAttributes",
            "location": 1894,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Set[str]",
                    "Optional[str]"
                ],
                "attrs": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "already_processed": [
                    "bool"
                ]
            }
        },
        "StateVariableType.buildChildren": {
            "name": "buildChildren",
            "location": 1899,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "child_": [
                    "str"
                ],
                "node": [
                    "str",
                    "Type[T]",
                    "Iterable[Hashable]",
                    "Type",
                    "type",
                    "bool"
                ],
                "nodeName_": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "fromsubclass_": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "gds_collector_": [
                    "str",
                    "Callable"
                ]
            }
        },
        "AllowedValueListType.__init__": {
            "name": "__init__",
            "location": 1935,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "allowedValue": [
                    "str",
                    "Optional[Union[str, Any]]",
                    "Optional[List[str]]",
                    "int",
                    "Optional[bool]"
                ],
                "gds_collector_": [
                    "str",
                    "int",
                    "float",
                    "bool",
                    "Sequence[Dict[str, str]]"
                ]
            }
        },
        "AllowedValueListType.factory": {
            "name": "factory",
            "location": 1946,
            "return": [
                "Type",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "AllowedValueListType.get_ns_prefix_": {
            "name": "get_ns_prefix_",
            "location": 1957,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllowedValueListType.set_ns_prefix_": {
            "name": "set_ns_prefix_",
            "location": 1959,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ns_prefix": [
                    "bool",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "AllowedValueListType.get_allowedValue": {
            "name": "get_allowedValue",
            "location": 1961,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllowedValueListType.set_allowedValue": {
            "name": "set_allowedValue",
            "location": 1963,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "allowedValue": [
                    "str",
                    "list",
                    "int"
                ]
            }
        },
        "AllowedValueListType.add_allowedValue": {
            "name": "add_allowedValue",
            "location": 1965,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "AllowedValueListType.insert_allowedValue_at": {
            "name": "insert_allowedValue_at",
            "location": 1967,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "index": [
                    "Type",
                    "float",
                    "int",
                    "Union[Sequence, 'SweepFixedValues']"
                ],
                "value": [
                    "Type",
                    "float",
                    "int",
                    "Union[Sequence, 'SweepFixedValues']"
                ]
            }
        },
        "AllowedValueListType.replace_allowedValue_at": {
            "name": "replace_allowedValue_at",
            "location": 1969,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "index": [
                    "T",
                    "Optional[str]",
                    "float",
                    "Union[int, float]",
                    "str"
                ],
                "value": [
                    "T",
                    "Optional[str]",
                    "float",
                    "Union[int, float]",
                    "str"
                ]
            }
        },
        "AllowedValueListType.hasContent_": {
            "name": "hasContent_",
            "location": 1971,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllowedValueListType.export": {
            "name": "export",
            "location": 1978,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "str",
                    "Union[int, float]",
                    "Optional[List[Any]]"
                ],
                "level": [
                    "bool",
                    "int",
                    "str"
                ],
                "namespaceprefix_": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "namespacedef_": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "name_": [
                    "dict",
                    "Dict[str, str]",
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]"
                ],
                "pretty_print": [
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "AllowedValueListType.exportAttributes": {
            "name": "exportAttributes",
            "location": 2001,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "level": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "already_processed": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "namespaceprefix_": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "name_": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "AllowedValueListType.exportChildren": {
            "name": "exportChildren",
            "location": 2003,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "str",
                    "Optional[str]"
                ],
                "level": [
                    "str",
                    "Type[T]",
                    "bool",
                    "int"
                ],
                "namespaceprefix_": [
                    "str",
                    "int"
                ],
                "namespacedef_": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Callable"
                ],
                "name_": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Callable"
                ],
                "fromsubclass_": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Callable"
                ],
                "pretty_print": [
                    "str",
                    "Type[T]",
                    "bool",
                    "int"
                ]
            }
        },
        "AllowedValueListType.build": {
            "name": "build",
            "location": 2012,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "gds_collector_": [
                    "str"
                ]
            }
        },
        "AllowedValueListType.buildAttributes": {
            "name": "buildAttributes",
            "location": 2023,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "attrs": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "already_processed": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ]
            }
        },
        "AllowedValueListType.buildChildren": {
            "name": "buildChildren",
            "location": 2025,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "child_": [
                    "str",
                    "int",
                    "float"
                ],
                "node": [
                    "str",
                    "Iterable[Hashable]",
                    "dict"
                ],
                "nodeName_": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "fromsubclass_": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "gds_collector_": [
                    "str",
                    "Type[T]",
                    "type"
                ]
            }
        },
        "AllowedValueRangeType.__init__": {
            "name": "__init__",
            "location": 2039,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "minimum": [
                    "int",
                    "Callable",
                    "str",
                    "bool"
                ],
                "maximum": [
                    "int",
                    "Callable",
                    "str",
                    "bool"
                ],
                "step": [
                    "int",
                    "Callable",
                    "str",
                    "bool"
                ],
                "gds_collector_": [
                    "int",
                    "Callable",
                    "str",
                    "bool"
                ]
            }
        },
        "AllowedValueRangeType.factory": {
            "name": "factory",
            "location": 2051,
            "return": [
                "bool",
                "Type",
                "str"
            ],
            "arguments": {}
        },
        "AllowedValueRangeType.get_ns_prefix_": {
            "name": "get_ns_prefix_",
            "location": 2062,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllowedValueRangeType.set_ns_prefix_": {
            "name": "set_ns_prefix_",
            "location": 2064,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ns_prefix": [
                    "bool",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "AllowedValueRangeType.get_minimum": {
            "name": "get_minimum",
            "location": 2066,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllowedValueRangeType.set_minimum": {
            "name": "set_minimum",
            "location": 2068,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "minimum": [
                    "bool",
                    "float"
                ]
            }
        },
        "AllowedValueRangeType.get_maximum": {
            "name": "get_maximum",
            "location": 2070,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllowedValueRangeType.set_maximum": {
            "name": "set_maximum",
            "location": 2072,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "maximum": [
                    "bool",
                    "float"
                ]
            }
        },
        "AllowedValueRangeType.get_step": {
            "name": "get_step",
            "location": 2074,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllowedValueRangeType.set_step": {
            "name": "set_step",
            "location": 2076,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "step": [
                    "bool",
                    "float"
                ]
            }
        },
        "AllowedValueRangeType.hasContent_": {
            "name": "hasContent_",
            "location": 2078,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllowedValueRangeType.export": {
            "name": "export",
            "location": 2087,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "str",
                    "Union[int, float]",
                    "Optional[List[Any]]"
                ],
                "level": [
                    "bool",
                    "int",
                    "str"
                ],
                "namespaceprefix_": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "namespacedef_": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "name_": [
                    "dict",
                    "Dict[str, str]",
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]"
                ],
                "pretty_print": [
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "AllowedValueRangeType.exportAttributes": {
            "name": "exportAttributes",
            "location": 2110,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "level": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "already_processed": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "namespaceprefix_": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "name_": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "AllowedValueRangeType.exportChildren": {
            "name": "exportChildren",
            "location": 2112,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "str"
                ],
                "level": [
                    "str",
                    "int"
                ],
                "namespaceprefix_": [
                    "str",
                    "int"
                ],
                "namespacedef_": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Callable"
                ],
                "name_": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Callable"
                ],
                "fromsubclass_": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Callable"
                ],
                "pretty_print": [
                    "str",
                    "int"
                ]
            }
        },
        "AllowedValueRangeType.build": {
            "name": "build",
            "location": 2129,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "gds_collector_": [
                    "str"
                ]
            }
        },
        "AllowedValueRangeType.buildAttributes": {
            "name": "buildAttributes",
            "location": 2140,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "attrs": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "already_processed": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ]
            }
        },
        "AllowedValueRangeType.buildChildren": {
            "name": "buildChildren",
            "location": 2142,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "child_": [
                    "str",
                    "dict"
                ],
                "node": [
                    "str",
                    "int",
                    "List[int]"
                ],
                "nodeName_": [
                    "str"
                ],
                "fromsubclass_": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "gds_collector_": [
                    "str",
                    "Type[T]",
                    "type"
                ]
            }
        },
        "retvalType.__init__": {
            "name": "__init__",
            "location": 2168,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "gds_collector_": [
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "Callable",
                    "str",
                    "bool"
                ]
            }
        },
        "retvalType.factory": {
            "name": "factory",
            "location": 2174,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "retvalType.get_ns_prefix_": {
            "name": "get_ns_prefix_",
            "location": 2185,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "retvalType.set_ns_prefix_": {
            "name": "set_ns_prefix_",
            "location": 2187,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ns_prefix": [
                    "bool",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "retvalType.hasContent_": {
            "name": "hasContent_",
            "location": 2189,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "retvalType.export": {
            "name": "export",
            "location": 2196,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "str",
                    "Union[int, float]",
                    "Optional[List[Any]]"
                ],
                "level": [
                    "bool",
                    "int",
                    "str"
                ],
                "namespaceprefix_": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "namespacedef_": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "name_": [
                    "dict",
                    "Dict[str, str]",
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]"
                ],
                "pretty_print": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "retvalType.exportAttributes": {
            "name": "exportAttributes",
            "location": 2218,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "level": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "already_processed": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "namespaceprefix_": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "name_": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "retvalType.exportChildren": {
            "name": "exportChildren",
            "location": 2220,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outfile": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Callable"
                ],
                "level": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Callable"
                ],
                "namespaceprefix_": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Callable"
                ],
                "namespacedef_": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Callable"
                ],
                "name_": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Callable"
                ],
                "fromsubclass_": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Callable"
                ],
                "pretty_print": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "Callable"
                ]
            }
        },
        "retvalType.build": {
            "name": "build",
            "location": 2222,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "gds_collector_": [
                    "str"
                ]
            }
        },
        "retvalType.buildAttributes": {
            "name": "buildAttributes",
            "location": 2233,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "attrs": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ],
                "already_processed": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str"
                ]
            }
        },
        "retvalType.buildChildren": {
            "name": "buildChildren",
            "location": 2235,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "child_": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "node": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "nodeName_": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "fromsubclass_": [
                    "str",
                    "Type[T]",
                    "type"
                ],
                "gds_collector_": [
                    "str",
                    "Type[T]",
                    "type"
                ]
            }
        },
        "getSubclassFromModule_": {
            "name": "getSubclassFromModule_",
            "location": 659,
            "return": [
                "str",
                "Optional[str]",
                "Sequence[str]",
                "Optional[int]"
            ],
            "arguments": {
                "module": [
                    "List[Tuple[str, str]]",
                    "type",
                    "xml.etree.cElementTree.Element",
                    "str",
                    "Sequence[type]"
                ],
                "class_": [
                    "Dict[str, Any]",
                    "str",
                    "Mapping[str, T]",
                    "Type",
                    "Exception"
                ]
            }
        },
        "GdsCollector_.__init__": {
            "name": "__init__",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "messages": [
                    "Optional[bool]",
                    "Optional[int]",
                    "Any",
                    "Optional[Any]",
                    "str"
                ]
            }
        },
        "GdsCollector_.add_message": {
            "name": "add_message",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "float",
                    "int"
                ]
            }
        },
        "GdsCollector_.get_messages": {
            "name": "get_messages",
            "location": 141,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GdsCollector_.clear_messages": {
            "name": "clear_messages",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GdsCollector_.print_messages": {
            "name": "print_messages",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GdsCollector_.write_messages": {
            "name": "write_messages",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outstream": [
                    "float"
                ]
            }
        },
        "GeneratedsSuper.gds_format_string": {
            "name": "gds_format_string",
            "location": 189,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "Optional[bytes]",
                    "bool",
                    "str"
                ],
                "input_name": [
                    "Optional[bytes]",
                    "bool",
                    "str"
                ]
            }
        },
        "GeneratedsSuper.gds_parse_string": {
            "name": "gds_parse_string",
            "location": 191,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "List[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "bool"
                ],
                "node": [
                    "str",
                    "List[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "bool"
                ],
                "input_name": [
                    "str",
                    "List[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "GeneratedsSuper.gds_validate_string": {
            "name": "gds_validate_string",
            "location": 193,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "List[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "bool"
                ],
                "node": [
                    "str",
                    "List[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "bool"
                ],
                "input_name": [
                    "str",
                    "List[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "GeneratedsSuper.gds_format_base64": {
            "name": "gds_format_base64",
            "location": 198,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "dict",
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Optional[str]]"
                ],
                "input_name": [
                    "str",
                    "dict",
                    "List[Dict[str, Any]]",
                    "Optional[List[Dict]]",
                    "bool"
                ]
            }
        },
        "GeneratedsSuper.gds_validate_base64": {
            "name": "gds_validate_base64",
            "location": 200,
            "return": [
                "bytes",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "List[str]",
                    "bool",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "node": [
                    "List[str]",
                    "bool",
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "input_name": [
                    "List[str]",
                    "bool",
                    "str",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "GeneratedsSuper.gds_format_integer": {
            "name": "gds_format_integer",
            "location": 202,
            "return": [
                "str",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "bool",
                    "str",
                    "List[str]",
                    "List[Dict[str, int]]",
                    "int"
                ],
                "input_name": [
                    "bool",
                    "str",
                    "List[str]",
                    "List[Dict[str, int]]",
                    "int"
                ]
            }
        },
        "GeneratedsSuper.gds_parse_integer": {
            "name": "gds_parse_integer",
            "location": 204,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "Optional[Dict]"
                ],
                "node": [
                    "str",
                    "int"
                ],
                "input_name": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Callable"
                ]
            }
        },
        "GeneratedsSuper.gds_validate_integer": {
            "name": "gds_validate_integer",
            "location": 210,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "bytes"
                ],
                "node": [
                    "str",
                    "Optional[str]",
                    "Exception",
                    "list"
                ],
                "input_name": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Callable"
                ]
            }
        },
        "GeneratedsSuper.gds_format_integer_list": {
            "name": "gds_format_integer_list",
            "location": 216,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "input_name": [
                    "bool",
                    "str"
                ]
            }
        },
        "GeneratedsSuper.gds_validate_integer_list": {
            "name": "gds_validate_integer_list",
            "location": 220,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "Union[str, Dict[str, Any]]",
                    "Optional[Tuple[str]]"
                ],
                "node": [
                    "str",
                    "Optional[str]",
                    "list",
                    "Exception"
                ],
                "input_name": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "list",
                    "Optional[Iterable[str]]",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "GeneratedsSuper.gds_format_float": {
            "name": "gds_format_float",
            "location": 229,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "Dict[str, Any]",
                    "bytes",
                    "Optional[Exception]",
                    "int"
                ],
                "input_name": [
                    "bool",
                    "str",
                    "List[str]",
                    "List[Dict[str, int]]",
                    "int"
                ]
            }
        },
        "GeneratedsSuper.gds_parse_float": {
            "name": "gds_parse_float",
            "location": 231,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "Union[str, Iterable[str]]"
                ],
                "node": [
                    "str",
                    "int"
                ],
                "input_name": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Callable"
                ]
            }
        },
        "GeneratedsSuper.gds_validate_float": {
            "name": "gds_validate_float",
            "location": 237,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Callable"
                ],
                "node": [
                    "str",
                    "Optional[str]",
                    "Exception",
                    "list"
                ],
                "input_name": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Callable"
                ]
            }
        },
        "GeneratedsSuper.gds_format_float_list": {
            "name": "gds_format_float_list",
            "location": 243,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "input_name": [
                    "bool",
                    "str"
                ]
            }
        },
        "GeneratedsSuper.gds_validate_float_list": {
            "name": "gds_validate_float_list",
            "location": 247,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "Union[str, Dict[str, Any]]",
                    "Optional[Tuple[str]]"
                ],
                "node": [
                    "str",
                    "Optional[str]",
                    "list",
                    "Exception"
                ],
                "input_name": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "list",
                    "Optional[Iterable[str]]",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "GeneratedsSuper.gds_format_decimal": {
            "name": "gds_format_decimal",
            "location": 256,
            "return": [
                "int",
                "tuple",
                "Dict[str, Any]",
                "bool",
                "float",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "Dict[str, Dict[str, Any]]",
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "bytes"
                ],
                "input_name": [
                    "bool",
                    "str",
                    "List[str]",
                    "List[Dict[str, int]]",
                    "int"
                ]
            }
        },
        "GeneratedsSuper.gds_parse_decimal": {
            "name": "gds_parse_decimal",
            "location": 263,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "List[Tuple[str, str]]",
                    "Optional[\"permissions_doc\"]",
                    "bool"
                ],
                "node": [
                    "str",
                    "Optional[str]",
                    "Exception",
                    "list"
                ],
                "input_name": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Callable"
                ]
            }
        },
        "GeneratedsSuper.gds_validate_decimal": {
            "name": "gds_validate_decimal",
            "location": 269,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "xml.etree.ElementTree.Element",
                    "dict"
                ],
                "node": [
                    "str",
                    "Optional[str]",
                    "Exception",
                    "list"
                ],
                "input_name": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Callable"
                ]
            }
        },
        "GeneratedsSuper.gds_format_decimal_list": {
            "name": "gds_format_decimal_list",
            "location": 275,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Dict[str, List[Any]]"
                ],
                "input_name": [
                    "bool",
                    "str"
                ]
            }
        },
        "GeneratedsSuper.gds_validate_decimal_list": {
            "name": "gds_validate_decimal_list",
            "location": 279,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "Union[str, Dict[str, Any]]",
                    "Optional[Tuple[str]]"
                ],
                "node": [
                    "str",
                    "Optional[str]",
                    "list",
                    "Exception"
                ],
                "input_name": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "list",
                    "Optional[Iterable[str]]",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "GeneratedsSuper.gds_format_double": {
            "name": "gds_format_double",
            "location": 288,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "bool",
                    "str",
                    "List[str]",
                    "List[Dict[str, int]]",
                    "int"
                ],
                "input_name": [
                    "bool",
                    "str",
                    "List[str]",
                    "List[Dict[str, int]]",
                    "int"
                ]
            }
        },
        "GeneratedsSuper.gds_parse_double": {
            "name": "gds_parse_double",
            "location": 290,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "Union[str, Iterable[str]]"
                ],
                "node": [
                    "str",
                    "int"
                ],
                "input_name": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Callable"
                ]
            }
        },
        "GeneratedsSuper.gds_validate_double": {
            "name": "gds_validate_double",
            "location": 296,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Callable"
                ],
                "node": [
                    "str",
                    "Optional[str]",
                    "Exception",
                    "list"
                ],
                "input_name": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Callable"
                ]
            }
        },
        "GeneratedsSuper.gds_format_double_list": {
            "name": "gds_format_double_list",
            "location": 302,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "input_name": [
                    "bool",
                    "str"
                ]
            }
        },
        "GeneratedsSuper.gds_validate_double_list": {
            "name": "gds_validate_double_list",
            "location": 306,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "Union[str, Dict[str, Any]]",
                    "Optional[Tuple[str]]"
                ],
                "node": [
                    "str",
                    "Optional[str]",
                    "list",
                    "Exception"
                ],
                "input_name": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "list",
                    "Optional[Iterable[str]]",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "GeneratedsSuper.gds_format_boolean": {
            "name": "gds_format_boolean",
            "location": 316,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "Dict[str, Any]",
                    "bytes",
                    "Optional[Exception]",
                    "int"
                ],
                "input_name": [
                    "bool",
                    "str",
                    "List[str]",
                    "List[Dict[str, int]]",
                    "int"
                ]
            }
        },
        "GeneratedsSuper.gds_parse_boolean": {
            "name": "gds_parse_boolean",
            "location": 318,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Callable"
                ],
                "node": [
                    "str",
                    "Optional[str]",
                    "Exception",
                    "list"
                ],
                "input_name": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Callable"
                ]
            }
        },
        "GeneratedsSuper.gds_validate_boolean": {
            "name": "gds_validate_boolean",
            "location": 326,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "dict",
                    "str",
                    "Tuple[Tuple[int, int]]",
                    "bool"
                ],
                "node": [
                    "str",
                    "Optional[str]",
                    "Exception",
                    "list"
                ],
                "input_name": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Callable"
                ]
            }
        },
        "GeneratedsSuper.gds_format_boolean_list": {
            "name": "gds_format_boolean_list",
            "location": 333,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "input_name": [
                    "bool",
                    "str"
                ]
            }
        },
        "GeneratedsSuper.gds_validate_boolean_list": {
            "name": "gds_validate_boolean_list",
            "location": 337,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "Union[str, Dict[str, Any]]",
                    "Optional[Tuple[str]]"
                ],
                "node": [
                    "str",
                    "Optional[str]",
                    "list",
                    "Exception"
                ],
                "input_name": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "list",
                    "Optional[Iterable[str]]",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "GeneratedsSuper.gds_validate_datetime": {
            "name": "gds_validate_datetime",
            "location": 347,
            "return": [
                "Optional[float]",
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Callable"
                ],
                "node": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Callable"
                ],
                "input_name": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Callable"
                ]
            }
        },
        "GeneratedsSuper.gds_format_datetime": {
            "name": "gds_format_datetime",
            "location": 349,
            "return": [
                "str",
                "decimal.Decimal",
                "type"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "int",
                    "dict"
                ],
                "input_name": [
                    "str",
                    "dict",
                    "List[Dict[str, Any]]",
                    "Optional[List[Dict]]",
                    "bool"
                ]
            }
        },
        "GeneratedsSuper.gds_parse_datetime": {
            "name": "gds_parse_datetime",
            "location": 386,
            "return": [
                "Set[str]",
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[int, str]",
                    "bool",
                    "bytes",
                    "List[dict]"
                ],
                "input_data": [
                    "str",
                    "Collection[str]",
                    "bytes",
                    "int",
                    "dict"
                ]
            }
        },
        "GeneratedsSuper.gds_validate_date": {
            "name": "gds_validate_date",
            "location": 413,
            "return": [
                "str",
                "Optional[float]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "List[str]"
                ],
                "node": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "List[str]"
                ],
                "input_name": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "GeneratedsSuper.gds_format_date": {
            "name": "gds_format_date",
            "location": 415,
            "return": [
                "int",
                "str",
                "Union[int, float]",
                "Type"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "int",
                    "float",
                    "list",
                    "bool",
                    "bytes",
                    "List[str]",
                    "str",
                    "List[int]"
                ],
                "input_name": [
                    "Optional[bytes]",
                    "str",
                    "bool"
                ]
            }
        },
        "GeneratedsSuper.gds_parse_date": {
            "name": "gds_parse_date",
            "location": 442,
            "return": [
                "int",
                "str",
                "float",
                "datetime.date"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "int",
                    "bytes",
                    "Dict[int, str]"
                ],
                "input_data": [
                    "dict",
                    "Dict[str, Any]",
                    "Sequence",
                    "Dict[str, str]"
                ]
            }
        },
        "GeneratedsSuper.gds_validate_time": {
            "name": "gds_validate_time",
            "location": 460,
            "return": [
                "dict",
                "str",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "str",
                    "List[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "node": [
                    "str",
                    "List[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "input_name": [
                    "str",
                    "List[str]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "GeneratedsSuper.gds_format_time": {
            "name": "gds_format_time",
            "location": 462,
            "return": [
                "str",
                "int",
                "List[int]",
                "datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "dict",
                    "str",
                    "Mapping[str, Any]"
                ],
                "input_name": [
                    "str",
                    "bool",
                    "Optional[bytes]",
                    "Optional[str]"
                ]
            }
        },
        "GeneratedsSuper.gds_validate_simple_patterns": {
            "name": "gds_validate_simple_patterns",
            "location": 492,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "patterns": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "target": [
                    "bool",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "GeneratedsSuper.gds_parse_time": {
            "name": "gds_parse_time",
            "location": 509,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "int",
                    "str"
                ],
                "input_data": [
                    "dict",
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "GeneratedsSuper.gds_check_cardinality_": {
            "name": "gds_check_cardinality_",
            "location": 530,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[str]",
                    "Optional[Union[Any, str]]",
                    "Iterable[str]",
                    "int",
                    "str"
                ],
                "input_name": [
                    "str"
                ],
                "min_occurs": [
                    "str",
                    "Optional[int]"
                ],
                "max_occurs": [
                    "str",
                    "int"
                ],
                "required": [
                    "Optional[str]",
                    "Optional[bool]",
                    "str",
                    "Optional[IO[bytes]]",
                    "bool"
                ]
            }
        },
        "GeneratedsSuper.gds_validate_builtin_ST_": {
            "name": "gds_validate_builtin_ST_",
            "location": 558,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "validator": [
                    "str",
                    "int"
                ],
                "value": [
                    "Optional[str]",
                    "str",
                    "Callable[[Any], bool]"
                ],
                "input_name": [
                    "str",
                    "int"
                ],
                "min_occurs": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "bool",
                    "Optional[Union[float, int]]"
                ],
                "max_occurs": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "bool",
                    "Optional[Union[float, int]]"
                ],
                "required": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "bool",
                    "Optional[Union[float, int]]"
                ]
            }
        },
        "GeneratedsSuper.gds_validate_defined_ST_": {
            "name": "gds_validate_defined_ST_",
            "location": 566,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "validator": [
                    "str",
                    "float",
                    "int",
                    "bytes"
                ],
                "value": [
                    "Optional[str]",
                    "Optional[int]",
                    "Dict[str, str]",
                    "Optional[Dict[str, dict]]",
                    "Optional[Iterable[str]]"
                ],
                "input_name": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "bool",
                    "Optional[Union[float, int]]"
                ],
                "min_occurs": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "bool",
                    "Optional[Union[float, int]]"
                ],
                "max_occurs": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "bool",
                    "Optional[Union[float, int]]"
                ],
                "required": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "bool",
                    "Optional[Union[float, int]]"
                ]
            }
        },
        "GeneratedsSuper.gds_str_lower": {
            "name": "gds_str_lower",
            "location": 574,
            "return": [
                "float",
                "Tuple[int, int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "instring": [
                    "float",
                    "Tuple[int, int]",
                    "str",
                    "int"
                ]
            }
        },
        "GeneratedsSuper.get_path_": {
            "name": "get_path_",
            "location": 576,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "bool",
                    "bytearray",
                    "List[List[str]]"
                ]
            }
        },
        "GeneratedsSuper.get_path_list_": {
            "name": "get_path_list_",
            "location": 583,
            "return": [
                "Set[str]",
                "Dict[str, Any]",
                "Generator",
                "Iterator[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Dict[str, str]",
                    "Optional[Iterable[str]]",
                    "bool",
                    "Sequence",
                    "str",
                    "List[Union[str, \"SqlFile\"]]"
                ],
                "path_list": [
                    "int",
                    "str",
                    "List[str]",
                    "lxml.etree.Element",
                    "bool",
                    "ImportError"
                ]
            }
        },
        "GeneratedsSuper.get_class_obj_": {
            "name": "get_class_obj_",
            "location": 590,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Dict[str, str]",
                    "AnyStr",
                    "Dict[str, Any]",
                    "Iterable[Dict[str, Any]]"
                ],
                "default_class": [
                    "str",
                    "Callable",
                    "type",
                    "List[List[str]]",
                    "Set[str]"
                ]
            }
        },
        "GeneratedsSuper.gds_build_any": {
            "name": "gds_build_any",
            "location": 602,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "tuple",
                    "bool",
                    "Callable"
                ],
                "type_name": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "GeneratedsSuper.gds_reverse_node_mapping": {
            "name": "gds_reverse_node_mapping",
            "location": 608,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "cls": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "Dict[str, bool]"
                ],
                "mapping": [
                    "Dict[str, str]",
                    "list",
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "bool",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "GeneratedsSuper.gds_encode": {
            "name": "gds_encode",
            "location": 611,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "instring": [
                    "str"
                ]
            }
        },
        "GeneratedsSuper.convert_unicode": {
            "name": "convert_unicode",
            "location": 621,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]",
                "Dict[str, int]"
            ],
            "arguments": {
                "instring": [
                    "Dict[str, str]",
                    "Mapping[str, Any]",
                    "List[str]",
                    "Callable[[Any], bool]"
                ]
            }
        },
        "GeneratedsSuper.__eq__": {
            "name": "__eq__",
            "location": 629,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "GeneratedsSuper.__ne__": {
            "name": "__ne__",
            "location": 638,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "GeneratedsSuper.gds_djo_etl_transform": {
            "name": "gds_djo_etl_transform",
            "location": 641,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneratedsSuper.gds_djo_etl_transform_db_obj": {
            "name": "gds_djo_etl_transform_db_obj",
            "location": 643,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dbobj": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "float"
                ]
            }
        },
        "GeneratedsSuper.gds_sqa_etl_transform": {
            "name": "gds_sqa_etl_transform",
            "location": 646,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneratedsSuper.gds_sqa_etl_transform_db_obj": {
            "name": "gds_sqa_etl_transform_db_obj",
            "location": 648,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dbobj": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "float"
                ]
            }
        },
        "GeneratedsSuper.gds_get_node_lineno_": {
            "name": "gds_get_node_lineno_",
            "location": 650,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GeneratedsSuper._FixedOffsetTZ.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int",
                    "datetime.datetime",
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "List[str]",
                    "str",
                    "dict"
                ]
            }
        },
        "GeneratedsSuper._FixedOffsetTZ.utcoffset": {
            "name": "utcoffset",
            "location": 183,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dt": [
                    "datetime.datetime",
                    "Callable[[], None]",
                    "int",
                    "bool"
                ]
            }
        },
        "GeneratedsSuper._FixedOffsetTZ.tzname": {
            "name": "tzname",
            "location": 185,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "dt": [
                    "datetime.datetime",
                    "Callable[[], None]",
                    "int",
                    "bool"
                ]
            }
        },
        "GeneratedsSuper._FixedOffsetTZ.dst": {
            "name": "dst",
            "location": 187,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "dt": [
                    "datetime.datetime",
                    "Callable[[], None]",
                    "int",
                    "bool"
                ]
            }
        },
        "GeneratedsSuper.__eq__.excl_select_objs_": {
            "name": "excl_select_objs_",
            "location": 630,
            "return": [
                "str",
                "type",
                "Optional[Iterable[Any]]",
                "int",
                "bool"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "pywemo-main/pywemo/ouimeaux_device/api/xsd/__init__.py": {},
    "pywemo-main/scripts/generate_wemo_services.py": {
        "get_response_for_url_endswith": {
            "name": "get_response_for_url_endswith",
            "location": 63,
            "return": [
                "dict",
                "List[str]",
                "Optional[str]",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "cassette": [],
                "ending": [
                    "dict",
                    "Optional[dict]"
                ]
            }
        },
        "update_services_from_cassette": {
            "name": "update_services_from_cassette",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "cassette_file_name": [
                    "str"
                ]
            }
        },
        "class_name": {
            "name": "class_name",
            "location": 93,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "service_name": [
                    "str",
                    "List[str]",
                    "Iterator[str]",
                    "Iterable[str]"
                ]
            }
        },
        "output_service_as_class": {
            "name": "output_service_as_class",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "service_name": [
                    "str"
                ],
                "actions": [
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "generate": {
            "name": "generate",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "pywemo-main/tests/conftest.py": {
        "vcr_config": {
            "name": "vcr_config",
            "location": 14,
            "return": [
                "bool",
                "dict",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        },
        "vcr_cassette_dir": {
            "name": "vcr_cassette_dir",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "int",
                    "list",
                    "bytes",
                    "Exception"
                ]
            }
        },
        "subscription_registry": {
            "name": "subscription_registry",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "vcr_config.scrub_identifiers": {
            "name": "scrub_identifiers",
            "location": 17,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "response": [
                    "Mapping[str, object]",
                    "dict",
                    "scrapy.http.Response"
                ]
            }
        }
    },
    "pywemo-main/tests/test_discovery.py": {
        "test_discover_devices": {
            "name": "test_discover_devices",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "udn": [
                    "str",
                    "int"
                ],
                "wemo_class": []
            }
        },
        "test_discover_devices_empty": {
            "name": "test_discover_devices_empty",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_device_from_description": {
            "name": "test_device_from_description",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "vcr": [
                    "bool"
                ]
            }
        },
        "test_device_from_description_returns_none": {
            "name": "test_device_from_description_returns_none",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_device_from_uuid_and_location_returns_none": {
            "name": "test_device_from_uuid_and_location_returns_none",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_device_from_uuid_and_location_returns_unsupported": {
            "name": "test_device_from_uuid_and_location_returns_unsupported",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_call_once_per_uuid": {
            "name": "test_call_once_per_uuid",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_call_once_per_uuid.increment_call_count": {
            "name": "increment_call_count",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_call_once_per_uuid.decrement_call_count": {
            "name": "decrement_call_count",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pywemo-main/tests/test_ssdp.py": {
        "mock_interface_addresses": {
            "name": "mock_interface_addresses",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "mock_get_callback_address": {
            "name": "mock_get_callback_address",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "mock_socket": {
            "name": "mock_socket",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "mock_select": {
            "name": "mock_select",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "discovery_responder": {
            "name": "discovery_responder",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "mock_select": [
                    "str",
                    "int"
                ],
                "mock_socket": [],
                "mock_interface_addresses": [
                    "Callable",
                    "dict"
                ],
                "mock_get_callback_address": [
                    "Callable",
                    "dict"
                ]
            }
        },
        "test_discovery_responder_notify": {
            "name": "test_discovery_responder_notify",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "mock_socket": [],
                "mock_interface_addresses": [
                    "mock.Mock"
                ],
                "mock_get_callback_address": [
                    "mock.Mock"
                ]
            }
        },
        "test_discovery_responder_responds_to_wemo": {
            "name": "test_discovery_responder_responds_to_wemo",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "discovery_responder": []
            }
        },
        "test_discovery_responder_ignores_notify": {
            "name": "test_discovery_responder_ignores_notify",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "discovery_responder": []
            }
        },
        "test_discovery_responder_ignores_non_wemo": {
            "name": "test_discovery_responder_ignores_non_wemo",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "discovery_responder": []
            }
        },
        "test_discovery_responder_ignores_sendto_exception": {
            "name": "test_discovery_responder_ignores_sendto_exception",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "discovery_responder": [
                    "str"
                ]
            }
        },
        "mock_select.do_select": {
            "name": "do_select",
            "location": 51,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "discovery_responder.do_once": {
            "name": "do_once",
            "location": 81,
            "return": [
                "str",
                "bool",
                "Optional[int]",
                "Callable[..., None]",
                "Optional[Any]"
            ],
            "arguments": {
                "req": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Iterable"
                ],
                "source": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Iterable"
                ],
                "expect_sendto": [
                    "bool",
                    "str",
                    "List[str]"
                ],
                "sendto_exception": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestScan.test_scan": {
            "name": "test_scan",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_interface_addresses": [
                    "mock.Mock"
                ],
                "mock_socket": [],
                "mock_select": [
                    "mock.Mock"
                ],
                "kwargs": [],
                "expected_count": []
            }
        },
        "TestUPNPEntry.test_properties": {
            "name": "test_properties",
            "location": 260,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "discovery_responder.do_once.sendto": {
            "name": "sendto",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "msg": [
                    "T"
                ],
                "addr": [
                    "T"
                ]
            }
        }
    },
    "pywemo-main/tests/test_subscribe.py": {
        "device": {
            "name": "device",
            "location": 15,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "vcr": [
                    "str",
                    "List[int]",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "bridge": {
            "name": "bridge",
            "location": 22,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "vcr": [
                    "str",
                    "List[int]",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "Test_RequestHandler.outer": {
            "name": "outer",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_RequestHandler.http_server": {
            "name": "http_server",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outer": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Test_RequestHandler.server_address": {
            "name": "server_address",
            "location": 68,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "http_server": [
                    "int",
                    "rotkehlchen.api.server.APIServer",
                    "bob_emploi.frontend.server.scoring_base.ScoringProject",
                    "str",
                    "float",
                    "Optional[str]"
                ]
            }
        },
        "Test_RequestHandler.server_url": {
            "name": "server_url",
            "location": 73,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "http_server": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "dict",
                    "bool"
                ]
            }
        },
        "Test_RequestHandler.mock_light_switch": {
            "name": "mock_light_switch",
            "location": 79,
            "return": [
                "Mapping[str, Any]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_RequestHandler.test_NOTIFY_unknown_device": {
            "name": "test_NOTIFY_unknown_device",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "server_url": [
                    "str",
                    "apistar.http.Method"
                ]
            }
        },
        "Test_RequestHandler.test_NOTIFY_known_device": {
            "name": "test_NOTIFY_known_device",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outer": [
                    "mock.Mock"
                ],
                "server_address": [],
                "server_url": [
                    "str"
                ],
                "mock_light_switch": [
                    "mock.Mock"
                ]
            }
        },
        "Test_RequestHandler.test_GET_setup_xml": {
            "name": "test_GET_setup_xml",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "server_url": [
                    "str"
                ]
            }
        },
        "Test_RequestHandler.test_GET_default_404": {
            "name": "test_GET_default_404",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "server_url": [
                    "str",
                    "Dict[str, Union[str, int]]"
                ]
            }
        },
        "Test_RequestHandler.test_POST_unknown_device": {
            "name": "test_POST_unknown_device",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "server_url": [
                    "str",
                    "bytes",
                    "bool",
                    "apistar.http.Method"
                ]
            }
        },
        "Test_RequestHandler.test_POST_known_device": {
            "name": "test_POST_known_device",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outer": [
                    "mock.Mock",
                    "int"
                ],
                "server_address": [
                    "int"
                ],
                "server_url": [
                    "str"
                ],
                "mock_light_switch": [
                    "mock.Mock",
                    "int"
                ]
            }
        },
        "Test_RequestHandler.test_POST_default_404": {
            "name": "test_POST_default_404",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "server_url": [
                    "str",
                    "bool",
                    "bytes",
                    "apistar.http.Method"
                ]
            }
        },
        "Test_RequestHandler.test_SUBSCRIBE_state": {
            "name": "test_SUBSCRIBE_state",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "server_url": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Test_RequestHandler.test_SUBSCRIBE_default_404": {
            "name": "test_SUBSCRIBE_default_404",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "server_url": [
                    "str",
                    "apistar.http.Method"
                ]
            }
        },
        "Test_Subscription.get_callback_address": {
            "name": "get_callback_address",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test_Subscription.subscription": {
            "name": "subscription",
            "location": 192,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ],
                "device": [
                    "django.http.HttpRequest",
                    "str"
                ],
                "bridge": [
                    "django.http.HttpRequest",
                    "str"
                ]
            }
        },
        "Test_Subscription.test_url": {
            "name": "test_url",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "subscription": [
                    "str"
                ]
            }
        },
        "Test_Subscription.test_maintain": {
            "name": "test_maintain",
            "location": 204,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_request": [],
                "subscription": []
            }
        },
        "Test_Subscription.test_maintain_requests_exception": {
            "name": "test_maintain_requests_exception",
            "location": 291,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_request": [
                    "mock.Mock"
                ],
                "subscription": []
            }
        },
        "Test_Subscription.test_maintain_bad_status_code": {
            "name": "test_maintain_bad_status_code",
            "location": 296,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "subscription": []
            }
        },
        "Test_Subscription.test_unsubscribe": {
            "name": "test_unsubscribe",
            "location": 301,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_request": [],
                "subscription": [
                    "dict"
                ]
            }
        },
        "Test_Subscription.test_update_subscription": {
            "name": "test_update_subscription",
            "location": 316,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "subscription": [
                    "datetime.date.time",
                    "bool",
                    "server.service.manager.bike_connection_manager.BikeConnectionManager"
                ]
            }
        },
        "Test_SubscriptionRegistry._wait_for_registry": {
            "name": "_wait_for_registry",
            "location": 339,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "subscription_registry": [
                    "int",
                    "float"
                ]
            }
        },
        "Test_SubscriptionRegistry.test_register_unregister": {
            "name": "test_register_unregister",
            "location": 347,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "device": [],
                "subscription_registry": [
                    "bool",
                    "str"
                ]
            }
        },
        "Test_SubscriptionRegistry.test_subscribe_read_timeout_and_reconnect": {
            "name": "test_subscribe_read_timeout_and_reconnect",
            "location": 379,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_request": [],
                "device": [
                    "mock.Mock",
                    "mock.MagicMock"
                ],
                "subscription_registry": []
            }
        },
        "Test_RequestHandler.http_server.run_server": {
            "name": "run_server",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Test_SubscriptionRegistry.test_subscribe_read_timeout_and_reconnect.change_url": {
            "name": "change_url",
            "location": 396,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pywemo-main/tests/test_util.py": {
        "test_signal_strength_to_dbm": {
            "name": "test_signal_strength_to_dbm",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "test_input": [
                    "List[str]",
                    "str"
                ],
                "expected": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_meta_info": {
            "name": "test_meta_info",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ext_meta_info": {
            "name": "test_ext_meta_info",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pywemo-main/tests/__init__.py": {},
    "pywemo-main/tests/ouimeaux_device/test_bridge.py": {
        "bridge": {
            "name": "bridge",
            "location": 13,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "vcr": [
                    "str",
                    "List[int]",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "light": {
            "name": "light",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "bridge": [
                    "List[List[str]]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "group": {
            "name": "group",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "bridge": [
                    "Dict[str, Dict[str, int]]",
                    "int",
                    "Dict[Hashable, Any]",
                    "List[List[str]]"
                ]
            }
        },
        "test_light_turn_on": {
            "name": "test_light_turn_on",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "light": []
            }
        },
        "test_light_turn_off": {
            "name": "test_light_turn_off",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "light": []
            }
        },
        "test_light_color_fade": {
            "name": "test_light_color_fade",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "light": [
                    "int"
                ]
            }
        },
        "test_light_color_temperature": {
            "name": "test_light_color_temperature",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "light": []
            }
        },
        "test_light_start_ramp": {
            "name": "test_light_start_ramp",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "light": [
                    "int"
                ]
            }
        },
        "test_group_turn_on": {
            "name": "test_group_turn_on",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "group": []
            }
        },
        "test_group_turn_off": {
            "name": "test_group_turn_off",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "group": []
            }
        },
        "test_group_toggle": {
            "name": "test_group_toggle",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "group": [
                    "int"
                ]
            }
        },
        "test_bridge_getdevicestatus": {
            "name": "test_bridge_getdevicestatus",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "bridge": []
            }
        },
        "test_subscription_update": {
            "name": "test_subscription_update",
            "location": 273,
            "return": [
                ""
            ],
            "arguments": {
                "update": [
                    "float",
                    "Optional[str]",
                    "int"
                ],
                "expected_updated": [
                    "int",
                    "List[List[int]]"
                ],
                "expected_state": [
                    "int",
                    "float"
                ],
                "bridge": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "pywemo-main/tests/ouimeaux_device/test_device.py": {
        "mocked_requests_get": {
            "name": "mocked_requests_get",
            "location": 181,
            "return": [
                "bytes",
                "str",
                "dict"
            ],
            "arguments": {}
        },
        "device": {
            "name": "device",
            "location": 194,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "mock_get": []
            }
        },
        "lightspeed": {
            "name": "lightspeed",
            "location": 208,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "MockUrllib3Response.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "content": [
                    "Dict[str, Any]",
                    "bytes",
                    "Union[Dict, None]",
                    "Optional[Dict]"
                ],
                "status": [
                    "bool",
                    "str",
                    "Tuple[Any, int]",
                    "Dict[int, float]",
                    "List[str]"
                ]
            }
        },
        "MockResponse.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "content": [
                    "dict",
                    "str",
                    "Union[str, Dict[str, Any]]"
                ],
                "status_code": [
                    "int",
                    "List[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "TestDevice.test_initialization": {
            "name": "test_initialization",
            "location": 221,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "device": []
            }
        },
        "TestDevice.test_services": {
            "name": "test_services",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "device": []
            }
        },
        "TestDevice.test_reset": {
            "name": "test_reset",
            "location": 251,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "device": [
                    "str"
                ]
            }
        },
        "TestDevice.test_factory_reset": {
            "name": "test_factory_reset",
            "location": 271,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "device": [
                    "str"
                ]
            }
        },
        "TestDevice.test_encryption_no_openssl": {
            "name": "test_encryption_no_openssl",
            "location": 282,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_run": [
                    "str",
                    "int",
                    "mock.Mock"
                ],
                "device": []
            }
        },
        "TestDevice.test_encryption_openssl_error": {
            "name": "test_encryption_openssl_error",
            "location": 289,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_run": [
                    "mock.Mock",
                    "mock.MagicMock"
                ],
                "device": []
            }
        },
        "TestDevice.test_encryption_successful_non_rtos": {
            "name": "test_encryption_successful_non_rtos",
            "location": 296,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_run": [
                    "mock.Mock",
                    "str",
                    "int",
                    "mock.MagicMock"
                ],
                "device": [
                    "Tuple[str]"
                ]
            }
        },
        "TestDevice.test_encryption_successful_rtos": {
            "name": "test_encryption_successful_rtos",
            "location": 305,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_run": [
                    "mock.Mock",
                    "str",
                    "int",
                    "mock.MagicMock"
                ],
                "device": []
            }
        },
        "TestDevice.test_setup_unknown_service": {
            "name": "test_setup_unknown_service",
            "location": 313,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "device": []
            }
        },
        "TestDevice.test_setup_no_getaplist": {
            "name": "test_setup_no_getaplist",
            "location": 321,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "device": []
            }
        },
        "TestDevice.test_setup_aplist_missing": {
            "name": "test_setup_aplist_missing",
            "location": 329,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "device": []
            }
        },
        "TestDevice.test_setup_ap_not_found": {
            "name": "test_setup_ap_not_found",
            "location": 337,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "device": [
                    "bool",
                    "Callable"
                ]
            }
        },
        "TestDevice.test_setup_action_exception1": {
            "name": "test_setup_action_exception1",
            "location": 342,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "lightspeed": [
                    "str"
                ],
                "device": []
            }
        },
        "TestDevice.test_setup_action_exception2": {
            "name": "test_setup_action_exception2",
            "location": 350,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "lightspeed": [
                    "str"
                ],
                "device": []
            }
        },
        "TestDevice.test_setup_unsupported_encryption": {
            "name": "test_setup_unsupported_encryption",
            "location": 360,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "device": [
                    "str",
                    "float"
                ],
                "caplog": [
                    "logging.Logger",
                    "logging.FileHandler"
                ]
            }
        },
        "TestDevice.test_setup_short_password": {
            "name": "test_setup_short_password",
            "location": 372,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "lightspeed": [
                    "str"
                ],
                "device": []
            }
        },
        "TestDevice.test_setup_status_3": {
            "name": "test_setup_status_3",
            "location": 384,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "lightspeed": [],
                "device": []
            }
        },
        "TestDevice.test_setup_unsuccessful": {
            "name": "test_setup_unsuccessful",
            "location": 393,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "lightspeed": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "device": []
            }
        },
        "TestDevice.test_setup_successful_1_try": {
            "name": "test_setup_successful_1_try",
            "location": 402,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "lightspeed": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "device": []
            }
        },
        "TestDevice.test_setup_successful_2_tries": {
            "name": "test_setup_successful_2_tries",
            "location": 412,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "lightspeed": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "device": []
            }
        },
        "TestDevice.test_supports_long_press_is_false": {
            "name": "test_supports_long_press_is_false",
            "location": 423,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "lightspeed": [],
                "device": []
            }
        },
        "TestDevice.test_reconnect_with_device_by_probing_ConnectTimeout": {
            "name": "test_reconnect_with_device_by_probing_ConnectTimeout",
            "location": 428,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "get": [
                    "int"
                ],
                "device": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Sequence[str]"
                ]
            }
        },
        "TestDevice.test_reconnect_with_device_by_probing_Timeout": {
            "name": "test_reconnect_with_device_by_probing_Timeout",
            "location": 436,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "get": [],
                "device": []
            }
        },
        "TestDevice.test_reconnect_with_device_by_probing_ConnectionError": {
            "name": "test_reconnect_with_device_by_probing_ConnectionError",
            "location": 453,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "get": [
                    "str"
                ],
                "device": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "TestDevice.test_reconnect_with_device_by_probing_PortChanged": {
            "name": "test_reconnect_with_device_by_probing_PortChanged",
            "location": 462,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "requests_get": [
                    "bool",
                    "Dict[Hashable, Iterable[Hashable]]",
                    "Optional[Dict[str, str]]"
                ],
                "mock_request": [
                    "bool",
                    "List[str]"
                ],
                "device": [
                    "dict"
                ]
            }
        },
        "TestDevice.test_reconnect_with_device_by_probing_WrongDevice": {
            "name": "test_reconnect_with_device_by_probing_WrongDevice",
            "location": 488,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "requests_get": [
                    "bool",
                    "Dict[Hashable, Iterable[Hashable]]",
                    "Optional[Dict[str, str]]"
                ],
                "mock_request": [
                    "bool",
                    "List[str]"
                ],
                "device": [
                    "Callable"
                ]
            }
        },
        "TestDevice.test_reconnect_with_device_by_probing_PortChanged.get_urllib3_resp": {
            "name": "get_urllib3_resp",
            "location": 467,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "TestDevice.test_reconnect_with_device_by_probing_PortChanged.get_resp": {
            "name": "get_resp",
            "location": 476,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "TestDevice.test_reconnect_with_device_by_probing_WrongDevice.get_urllib3_resp": {
            "name": "get_urllib3_resp",
            "location": 495,
            "return": [
                "str",
                "TextIO",
                "Optional[List[str]]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TestDevice.test_reconnect_with_device_by_probing_WrongDevice.get_resp": {
            "name": "get_resp",
            "location": 504,
            "return": [
                "str",
                "bool",
                "requests.Response"
            ],
            "arguments": {
                "url": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "pywemo-main/tests/ouimeaux_device/test_dimmer.py": {
        "Base.test_turn_on": {
            "name": "test_turn_on",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dimmer": []
            }
        },
        "Base.test_turn_off": {
            "name": "test_turn_off",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dimmer": []
            }
        },
        "Base.test_set_brightness": {
            "name": "test_set_brightness",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dimmer": [
                    "List[Tuple[Any, Any]]",
                    "Tuple[int, int]"
                ],
                "brightness": [
                    "str",
                    "float",
                    "bool"
                ],
                "expected_state": [
                    "str",
                    "Set[str]"
                ],
                "expected_brightness": [
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "Base.test_subscription_update_brightness": {
            "name": "test_subscription_update_brightness",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dimmer": []
            }
        },
        "Test_PVT_OWRT_Dimmer_v1.dimmer": {
            "name": "dimmer",
            "location": 52,
            "return": [
                "int",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "vcr": [
                    "str",
                    "List[int]",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "Test_PVT_RTOS_Dimmer_v2.dimmer": {
            "name": "dimmer",
            "location": 66,
            "return": [
                "int",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "vcr": [
                    "str",
                    "List[int]",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "Test_PVT_RTOS_Dimmer_v2.test_is_subscribed": {
            "name": "test_is_subscribed",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dimmer": [
                    "bool",
                    "Union[int, float]",
                    "str"
                ],
                "subscription_registry": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "pywemo-main/tests/ouimeaux_device/test_humidifier.py": {
        "humidifier": {
            "name": "humidifier",
            "location": 14,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "vcr": [
                    "str",
                    "List[int]",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "test_on": {
            "name": "test_on",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "humidifier": [
                    "int",
                    "str"
                ]
            }
        },
        "test_off": {
            "name": "test_off",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "humidifier": []
            }
        },
        "test_desired_humidity": {
            "name": "test_desired_humidity",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "humidifier": [
                    "str"
                ]
            }
        },
        "test_set_fan_mode_and_humidity": {
            "name": "test_set_fan_mode_and_humidity",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "humidifier": [
                    "int",
                    "str"
                ]
            }
        },
        "test_reset_filter_life": {
            "name": "test_reset_filter_life",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "humidifier": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_filter_expired": {
            "name": "test_filter_expired",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "humidifier": []
            }
        },
        "test_current_humidity_percent": {
            "name": "test_current_humidity_percent",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "humidifier": []
            }
        },
        "test_water_level": {
            "name": "test_water_level",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "humidifier": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "pywemo-main/tests/ouimeaux_device/test_insight.py": {
        "Test_Insight.insight": {
            "name": "insight",
            "location": 16,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "vcr": [
                    "str",
                    "List[int]",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "Test_Insight.test_turn_on": {
            "name": "test_turn_on",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "insight": [
                    "int"
                ]
            }
        },
        "Test_Insight.test_turn_off": {
            "name": "test_turn_off",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "insight": [
                    "float",
                    "int"
                ]
            }
        },
        "Test_Insight.test_insight_params": {
            "name": "test_insight_params",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "insight": [
                    "Dict[str, Any]"
                ]
            }
        },
        "Test_Insight.test_subscribe": {
            "name": "test_subscribe",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "insight": [
                    "bool",
                    "str",
                    "Sequence[Union[int, float]]",
                    "float"
                ],
                "subscription_registry": [
                    "str",
                    "bool"
                ]
            }
        },
        "Test_Insight.test_subscription_update": {
            "name": "test_subscription_update",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "insight": []
            }
        }
    },
    "pywemo-main/tests/ouimeaux_device/test_lightswitch.py": {
        "Base.test_turn_on": {
            "name": "test_turn_on",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "lightswitch": []
            }
        },
        "Base.test_turn_off": {
            "name": "test_turn_off",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "lightswitch": []
            }
        },
        "Test_F7C030.lightswitch": {
            "name": "lightswitch",
            "location": 28,
            "return": [
                "int",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "vcr": [
                    "str",
                    "List[int]",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "Test_WLS040.lightswitch": {
            "name": "lightswitch",
            "location": 42,
            "return": [
                "int",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "vcr": [
                    "str",
                    "List[int]",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "Test_WLS0403.lightswitch": {
            "name": "lightswitch",
            "location": 56,
            "return": [
                "int",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "vcr": [
                    "str",
                    "List[int]",
                    "Optional[str]",
                    "Callable"
                ]
            }
        }
    },
    "pywemo-main/tests/ouimeaux_device/test_maker.py": {
        "Test_Maker.test_turn_on": {
            "name": "test_turn_on",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "maker": []
            }
        },
        "Test_Maker.test_turn_off": {
            "name": "test_turn_off",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "maker": []
            }
        },
        "Test_Maker.test_maker_params": {
            "name": "test_maker_params",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "maker": []
            }
        },
        "Test_Maker.test_maker_device_type": {
            "name": "test_maker_device_type",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "maker": [
                    "int",
                    "Sequence[int]",
                    "str"
                ]
            }
        },
        "Test_Maker.test_maker_unexpected_subscription_type": {
            "name": "test_maker_unexpected_subscription_type",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "maker": []
            }
        },
        "Test_Maker.test_subscription_update": {
            "name": "test_subscription_update",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "update": [
                    "Optional[str]",
                    "float",
                    "list",
                    "str"
                ],
                "has_sensor": [
                    "Optional[str]",
                    "float",
                    "list",
                    "str"
                ],
                "sensor_state": [
                    "int"
                ],
                "switch_mode": [
                    "bool",
                    "float",
                    "int"
                ],
                "switch_state": [
                    "int"
                ],
                "maker": []
            }
        },
        "Test_Maker.maker": {
            "name": "maker",
            "location": 124,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "vcr": [
                    "str",
                    "List[int]",
                    "Optional[str]",
                    "Callable"
                ]
            }
        }
    },
    "pywemo-main/tests/ouimeaux_device/test_outdoor_plug.py": {
        "Base.test_turn_on": {
            "name": "test_turn_on",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outdoor_plug": []
            }
        },
        "Base.test_turn_off": {
            "name": "test_turn_off",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "outdoor_plug": []
            }
        },
        "Test_WSP090.outdoor_plug": {
            "name": "outdoor_plug",
            "location": 26,
            "return": [
                "int",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "vcr": [
                    "str",
                    "List[int]",
                    "Optional[str]",
                    "Callable"
                ]
            }
        }
    },
    "pywemo-main/tests/ouimeaux_device/test_switch.py": {
        "Base.test_turn_on": {
            "name": "test_turn_on",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "switch": []
            }
        },
        "Base.test_turn_off": {
            "name": "test_turn_off",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "switch": []
            }
        },
        "Test_F7C027.switch": {
            "name": "switch",
            "location": 26,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "vcr": [
                    "str",
                    "List[int]",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "Test_F7C027.test_config_any": {
            "name": "test_config_any",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "switch": [
                    "str",
                    "Dict[str, float]",
                    "bool"
                ]
            }
        },
        "Test_F7C063.switch": {
            "name": "switch",
            "location": 43,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "vcr": [
                    "str",
                    "List[int]",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "Test_F7C063.test_config_any": {
            "name": "test_config_any",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "switch": [
                    "str",
                    "Dict[str, float]",
                    "bool"
                ]
            }
        },
        "Test_WSP080.switch": {
            "name": "switch",
            "location": 63,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "vcr": [
                    "str",
                    "List[int]",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "Test_WSP080.test_config_any": {
            "name": "test_config_any",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "switch": [
                    "str",
                    "Dict[str, float]",
                    "bool"
                ]
            }
        }
    },
    "pywemo-main/tests/ouimeaux_device/__init__.py": {},
    "pywemo-main/tests/ouimeaux_device/api/__init__.py": {},
    "pywemo-main/tests/ouimeaux_device/api/unit/long_press_helpers.py": {
        "TestLongPress.rules_db_from_device": {
            "name": "rules_db_from_device",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "device": [
                    "dict",
                    "List[str]",
                    "Callable",
                    "List[Dict[str, Any]]",
                    "str",
                    "Exception",
                    "int"
                ]
            }
        },
        "TestLongPress.test_supports_long_press": {
            "name": "test_supports_long_press",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "device": [
                    "str",
                    "float"
                ]
            }
        },
        "TestLongPress.test_list_add_remove_long_press_udns": {
            "name": "test_list_add_remove_long_press_udns",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "device": []
            }
        },
        "TestLongPress.test_get_set_long_press_action": {
            "name": "test_get_set_long_press_action",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "device": [
                    "Awaitable[None]"
                ]
            }
        },
        "TestLongPress.test_ensure_remove_long_press_virtual_device": {
            "name": "test_ensure_remove_long_press_virtual_device",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "device": [
                    "str",
                    "float"
                ]
            }
        },
        "TestLongPress.test_required_services": {
            "name": "test_required_services",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "device": [
                    "str"
                ]
            }
        },
        "TestLongPress.rules_db_from_device.yield_rdb": {
            "name": "yield_rdb",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pywemo-main/tests/ouimeaux_device/api/unit/test_long_press.py": {
        "test_ensure_long_press_rule_exists": {
            "name": "test_ensure_long_press_rule_exists",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "test_input": [
                    "bool",
                    "Iterable[str]",
                    "str"
                ],
                "expected": [
                    "str",
                    "Callable"
                ]
            }
        }
    },
    "pywemo-main/tests/ouimeaux_device/api/unit/test_rules.py": {
        "temp_file": {
            "name": "temp_file",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "sqldb": {
            "name": "sqldb",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "temp_file": [
                    "str",
                    "float"
                ]
            }
        },
        "test_create_empty_db": {
            "name": "test_create_empty_db",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "sqldb": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "test_pack_unpack_db": {
            "name": "test_pack_unpack_db",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "temp_file": [
                    "Callable"
                ],
                "sqldb": [
                    "str",
                    "Dict[str, bytes]",
                    "List[str]"
                ]
            }
        },
        "test_auto_primary_key": {
            "name": "test_auto_primary_key",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "sqldb": [
                    "str"
                ]
            }
        },
        "test_add_remove": {
            "name": "test_add_remove",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "sqldb": []
            }
        },
        "test_clear_all": {
            "name": "test_clear_all",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "sqldb": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_update_if_modified_field_changed": {
            "name": "test_update_if_modified_field_changed",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "sqldb": []
            }
        },
        "test_update_if_modified_new_entry": {
            "name": "test_update_if_modified_new_entry",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "sqldb": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_add_remove_target_device_to_rule": {
            "name": "test_add_remove_target_device_to_rule",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "sqldb": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_get_target_devices_for_rule": {
            "name": "test_get_target_devices_for_rule",
            "location": 204,
            "return": [
                ""
            ],
            "arguments": {
                "sqldb": []
            }
        },
        "test_entry_with_no_primary_key": {
            "name": "test_entry_with_no_primary_key",
            "location": 216,
            "return": [
                ""
            ],
            "arguments": {
                "sqldb": []
            }
        },
        "test_rules_db_from_device": {
            "name": "test_rules_db_from_device",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {
                "temp_file": [],
                "sqldb": []
            }
        },
        "test_rules_db_from_device_404": {
            "name": "test_rules_db_from_device_404",
            "location": 275,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_rules_db_from_device_raises_http_exception": {
            "name": "test_rules_db_from_device_raises_http_exception",
            "location": 306,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sqlite_errors_raised": {
            "name": "test_sqlite_errors_raised",
            "location": 322,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_rules_db_from_device.Device.rules.FetchRules": {
            "name": "FetchRules",
            "location": 249,
            "return": [],
            "arguments": {}
        },
        "test_rules_db_from_device.Device.rules.StoreRules": {
            "name": "StoreRules",
            "location": 256,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_rules_db_from_device_404.Device.rules.FetchRules": {
            "name": "FetchRules",
            "location": 286,
            "return": [],
            "arguments": {}
        },
        "test_sqlite_errors_raised.Device.rules.FetchRules": {
            "name": "FetchRules",
            "location": 333,
            "return": [
                "Hashable",
                "werkzeug.exceptions.HTTPException",
                "Optional[int]"
            ],
            "arguments": {}
        }
    },
    "pywemo-main/tests/ouimeaux_device/api/unit/test_service.py": {
        "TestSession.test_init_and_properties": {
            "name": "test_init_and_properties",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSession.test_404_raises": {
            "name": "test_404_raises",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestSession.test_urllib_raises_http_exception": {
            "name": "test_urllib_raises_http_exception",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_request": [
                    "mock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestSession.test_arg_override": {
            "name": "test_arg_override",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_poolmgr": []
            }
        },
        "TestAction.get_mock_action": {
            "name": "get_mock_action",
            "location": 93,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]",
                    "List[Union[str, int]]"
                ],
                "service_type": [
                    "Optional[str]",
                    "str",
                    "Type"
                ],
                "url": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "TestAction.mock_et_fromstring": {
            "name": "mock_et_fromstring",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAction.test_call_post_request_is_made_exactly_once_when_successful": {
            "name": "test_call_post_request_is_made_exactly_once_when_successful",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAction.test_call_request_has_well_formed_xml_body": {
            "name": "test_call_request_has_well_formed_xml_body",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAction.test_call_request_has_correct_header_keys": {
            "name": "test_call_request_has_correct_header_keys",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAction.test_call_headers_has_correct_content_type": {
            "name": "test_call_headers_has_correct_content_type",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAction.test_call_headers_has_correct_soapaction": {
            "name": "test_call_headers_has_correct_soapaction",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAction.test_call_headers_has_correct_url": {
            "name": "test_call_headers_has_correct_url",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAction.test_call_request_is_tried_up_to_max_on_communication_error": {
            "name": "test_call_request_is_tried_up_to_max_on_communication_error",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_request": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestAction.test_call_throws_when_final_retry_fails": {
            "name": "test_call_throws_when_final_retry_fails",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_request": [
                    "mock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestAction.test_call_returns_correct_dictionary_with_response_contents": {
            "name": "test_call_returns_correct_dictionary_with_response_contents",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_et_fromstring": []
            }
        },
        "TestAction.test_fault_response": {
            "name": "test_fault_response",
            "location": 225,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_et_fromstring": []
            }
        },
        "TestAction.test_call_with_overridden_timeout": {
            "name": "test_call_with_overridden_timeout",
            "location": 254,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestService.test_service": {
            "name": "test_service",
            "location": 281,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestService.test_from_xml_raises": {
            "name": "test_from_xml_raises",
            "location": 298,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MockRequiredService._required_services": {
            "name": "_required_services",
            "location": 315,
            "return": [
                "str",
                "dict",
                "Union[str, Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequiredServicesMixin.test_has_service": {
            "name": "test_has_service",
            "location": 322,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequiredServicesMixin.test_missing_service": {
            "name": "test_missing_service",
            "location": 332,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequiredServicesMixin.test_missing_action": {
            "name": "test_missing_action",
            "location": 340,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "pywemo-main/tests/ouimeaux_device/api/unit/test_xsd_types.py": {
        "test_argument_default_values": {
            "name": "test_argument_default_values",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_action": {
            "name": "test_action",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_action_missing_name": {
            "name": "test_action_missing_name",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_action_missing_arguments": {
            "name": "test_action_missing_arguments",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_service": {
            "name": "test_service",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_services_parse_string_raises": {
            "name": "test_services_parse_string_raises",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_service_no_action": {
            "name": "test_service_no_action",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_service_properties": {
            "name": "test_service_properties",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_service_properties_missing": {
            "name": "test_service_properties_missing",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "exclude": []
            }
        },
        "test_service_properties_empty": {
            "name": "test_service_properties_empty",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "exclude": []
            }
        },
        "test_device": {
            "name": "test_device",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_device_missing_required_fields": {
            "name": "test_device_missing_required_fields",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "exclude": []
            }
        },
        "test_device_missing_optional_fields": {
            "name": "test_device_missing_optional_fields",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_device_missing_device": {
            "name": "test_device_missing_device",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_device_wrong_manufacturer": {
            "name": "test_device_wrong_manufacturer",
            "location": 216,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_device_parser_raises": {
            "name": "test_device_parser_raises",
            "location": 228,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_no_six_import": {
            "name": "test_no_six_import",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "pywemo-main/tests/ouimeaux_device/api/unit/__init__.py": {}
}
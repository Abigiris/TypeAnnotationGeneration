{
    "qcore-master/setup.py": {},
    "qcore-master/qcore/asserts.py": {
        "_assert_fail_message": {
            "name": "_assert_fail_message",
            "location": 77,
            "return": [
                "str",
                "bool",
                "AnyStr"
            ],
            "arguments": {
                "message": [
                    "bool",
                    "int",
                    "List[str]"
                ],
                "expected": [
                    "str"
                ],
                "actual": [
                    "str"
                ],
                "comparison_str": [
                    "str"
                ],
                "extra": [
                    "str",
                    "bool",
                    "bytes",
                    "Union[str, dict]"
                ]
            }
        },
        "assert_is": {
            "name": "assert_is",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "expected": [
                    "str"
                ],
                "actual": [
                    "str"
                ],
                "message": [
                    "str"
                ],
                "extra": [
                    "str"
                ]
            }
        },
        "assert_is_not": {
            "name": "assert_is_not",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "expected": [
                    "str"
                ],
                "actual": [
                    "str"
                ],
                "message": [
                    "str"
                ],
                "extra": [
                    "str"
                ]
            }
        },
        "assert_is_instance": {
            "name": "assert_is_instance",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "str",
                    "Set[str]",
                    "Type",
                    "Exception"
                ],
                "types": [
                    "str",
                    "Set[str]",
                    "Type",
                    "Exception"
                ],
                "message": [
                    "str",
                    "Set[str]",
                    "Type",
                    "Exception"
                ],
                "extra": [
                    "str",
                    "Set[str]",
                    "Type",
                    "Exception"
                ]
            }
        },
        "assert_eq": {
            "name": "assert_eq",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "expected": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "actual": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "message": [
                    "str",
                    "Optional[str]"
                ],
                "tolerance": [
                    "str",
                    "Optional[List[str]]",
                    "bool"
                ],
                "extra": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_dict_path_string": {
            "name": "_dict_path_string",
            "location": 135,
            "return": [
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "_to_concrete_dict": {
            "name": "_to_concrete_dict",
            "location": 141,
            "return": [
                "dict",
                "Dict[str, Tuple[Any, Any]]",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "value": [
                    "dict",
                    "str",
                    "Optional['Block']",
                    "bool"
                ]
            }
        },
        "assert_dict_eq": {
            "name": "assert_dict_eq",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "expected": [
                    "Dict[str, str]",
                    "dict",
                    "MutableMapping[str, str]",
                    "List[Dict[str, Any]]",
                    "list"
                ],
                "actual": [
                    "str",
                    "dict",
                    "int"
                ],
                "number_tolerance": [
                    "Optional[bool]",
                    "bool",
                    "IO",
                    "Dict[str, str]",
                    "str"
                ],
                "dict_path": [
                    "str",
                    "bytes",
                    "Optional[Dict[str, str]]",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "assert_ne": {
            "name": "assert_ne",
            "location": 201,
            "return": [
                ""
            ],
            "arguments": {
                "expected": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "actual": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "message": [
                    "str",
                    "Optional[str]"
                ],
                "tolerance": [
                    "str",
                    "Optional[List[str]]",
                    "bool"
                ],
                "extra": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "assert_gt": {
            "name": "assert_gt",
            "location": 230,
            "return": [
                ""
            ],
            "arguments": {
                "left": [
                    "str"
                ],
                "right": [
                    "str"
                ],
                "message": [
                    "str"
                ],
                "extra": [
                    "str"
                ]
            }
        },
        "assert_ge": {
            "name": "assert_ge",
            "location": 235,
            "return": [
                ""
            ],
            "arguments": {
                "left": [
                    "str"
                ],
                "right": [
                    "str"
                ],
                "message": [
                    "str"
                ],
                "extra": [
                    "str"
                ]
            }
        },
        "assert_lt": {
            "name": "assert_lt",
            "location": 240,
            "return": [
                ""
            ],
            "arguments": {
                "left": [
                    "str"
                ],
                "right": [
                    "str"
                ],
                "message": [
                    "str"
                ],
                "extra": [
                    "str"
                ]
            }
        },
        "assert_le": {
            "name": "assert_le",
            "location": 245,
            "return": [
                ""
            ],
            "arguments": {
                "left": [
                    "str"
                ],
                "right": [
                    "str"
                ],
                "message": [
                    "str"
                ],
                "extra": [
                    "str"
                ]
            }
        },
        "assert_in": {
            "name": "assert_in",
            "location": 250,
            "return": [
                ""
            ],
            "arguments": {
                "obj": [
                    "str",
                    "bool"
                ],
                "seq": [
                    "str",
                    "bool"
                ],
                "message": [
                    "str",
                    "bool"
                ],
                "extra": [
                    "str",
                    "bool"
                ]
            }
        },
        "assert_not_in": {
            "name": "assert_not_in",
            "location": 255,
            "return": [
                ""
            ],
            "arguments": {
                "obj": [
                    "str",
                    "bool",
                    "int"
                ],
                "seq": [
                    "int",
                    "bool",
                    "str"
                ],
                "message": [
                    "str",
                    "bytes"
                ],
                "extra": [
                    "str",
                    "bytes"
                ]
            }
        },
        "assert_in_with_tolerance": {
            "name": "assert_in_with_tolerance",
            "location": 274,
            "return": [
                "DefaultDict",
                "str",
                "bytes"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "int",
                    "bool"
                ],
                "seq": [
                    "str",
                    "dict",
                    "int",
                    "bool"
                ],
                "tolerance": [
                    "int",
                    "dict",
                    "bool",
                    "str"
                ],
                "message": [
                    "str",
                    "int",
                    "bool"
                ],
                "extra": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "assert_unordered_list_eq": {
            "name": "assert_unordered_list_eq",
            "location": 285,
            "return": [
                ""
            ],
            "arguments": {
                "expected": [
                    "str",
                    "bytes",
                    "List[str]"
                ],
                "actual": [
                    "Dict[str, Any]",
                    "Union[str, IO[str]]",
                    "list"
                ],
                "message": [
                    "int",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "assert_raises": {
            "name": "assert_raises",
            "location": 310,
            "return": [
                ""
            ],
            "arguments": {
                "fn": [
                    "bool",
                    "str"
                ]
            }
        },
        "assert_is_substring": {
            "name": "assert_is_substring",
            "location": 372,
            "return": [
                ""
            ],
            "arguments": {
                "substring": [
                    "Optional[str]",
                    "bool",
                    "Optional[Any]",
                    "Optional[Dict[str, Any]]"
                ],
                "subject": [
                    "Optional[str]",
                    "bool",
                    "Optional[Any]",
                    "Optional[Dict[str, Any]]"
                ],
                "message": [
                    "Optional[str]",
                    "bool",
                    "Optional[Any]",
                    "Optional[Dict[str, Any]]"
                ],
                "extra": [
                    "Optional[str]",
                    "bool",
                    "Optional[Any]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "assert_is_not_substring": {
            "name": "assert_is_not_substring",
            "location": 381,
            "return": [
                ""
            ],
            "arguments": {
                "substring": [
                    "Optional[str]",
                    "bool",
                    "Optional[Any]",
                    "Optional[Dict[str, Any]]"
                ],
                "subject": [
                    "Optional[str]",
                    "bool",
                    "Optional[Any]",
                    "Optional[Dict[str, Any]]"
                ],
                "message": [
                    "Optional[str]",
                    "bool",
                    "Optional[Any]",
                    "Optional[Dict[str, Any]]"
                ],
                "extra": [
                    "Optional[str]",
                    "bool",
                    "Optional[Any]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "assert_startswith": {
            "name": "assert_startswith",
            "location": 390,
            "return": [
                ""
            ],
            "arguments": {
                "prefix": [
                    "str",
                    "Iterable[T]",
                    "bool"
                ],
                "subject": [
                    "str",
                    "Iterable[T]",
                    "bool"
                ],
                "message": [
                    "str",
                    "Iterable[T]",
                    "bool"
                ],
                "extra": [
                    "str",
                    "Iterable[T]",
                    "bool"
                ]
            }
        },
        "assert_endswith": {
            "name": "assert_endswith",
            "location": 399,
            "return": [
                ""
            ],
            "arguments": {
                "suffix": [
                    "str",
                    "bool"
                ],
                "subject": [
                    "str",
                    "bool"
                ],
                "message": [
                    "str",
                    "bool"
                ],
                "extra": [
                    "str",
                    "bool"
                ]
            }
        },
        "AssertRaises.__init__": {
            "name": "__init__",
            "location": 319,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AssertRaises.__enter__": {
            "name": "__enter__",
            "location": 330,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssertRaises.__exit__": {
            "name": "__exit__",
            "location": 333,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "int",
                    "str",
                    "type",
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "str"
                ],
                "exc_tb": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "qcore-master/qcore/caching.py": {
        "lazy_constant": {
            "name": "lazy_constant",
            "location": 83,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "lru_cache": {
            "name": "lru_cache",
            "location": 237,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "maxsize": [
                    "str",
                    "Callable"
                ],
                "key_fn": [
                    "str",
                    "Callable"
                ]
            }
        },
        "cached_per_instance": {
            "name": "cached_per_instance",
            "location": 281,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "get_args_tuple": {
            "name": "get_args_tuple",
            "location": 323,
            "return": [
                "Dict[str, Any]",
                "Optional[int]",
                "int",
                "str"
            ],
            "arguments": {
                "args": [],
                "kwargs": [],
                "arg_names": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "int"
                ],
                "kwargs_defaults": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "List[str]",
                    "Tuple[str, str]"
                ]
            }
        },
        "get_kwargs_defaults": {
            "name": "get_kwargs_defaults",
            "location": 344,
            "return": [
                "Callable[[KT], VT]",
                "Tuple[str, str]",
                "bool",
                "list"
            ],
            "arguments": {
                "argspec": [
                    "Set[str]",
                    "List[str]",
                    "Optional[Iterable[str]]",
                    "List[Mapping[str, Any]]",
                    "dict",
                    "Tuple[type]",
                    "Optional[Union[str, Any, Any, Any]]"
                ]
            }
        },
        "memoize": {
            "name": "memoize",
            "location": 357,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fun": [
                    "str"
                ]
            }
        },
        "memoize_with_ttl": {
            "name": "memoize_with_ttl",
            "location": 388,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ttl_secs": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "LazyConstant.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value_provider": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "LazyConstant.get_value": {
            "name": "get_value",
            "location": 63,
            "return": [
                "bool",
                "Optional[float]",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyConstant.compute": {
            "name": "compute",
            "location": 71,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyConstant.clear": {
            "name": "clear",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadLocalLazyConstant.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value_provider": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "ThreadLocalLazyConstant.get_value": {
            "name": "get_value",
            "location": 107,
            "return": [
                "bool",
                "Optional[float]",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadLocalLazyConstant.compute": {
            "name": "compute",
            "location": 114,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadLocalLazyConstant.clear": {
            "name": "clear",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LRUCache.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "capacity": [
                    "int",
                    "str"
                ],
                "item_evicted": [
                    "Tuple[int, int]",
                    "int",
                    "str"
                ]
            }
        },
        "LRUCache.get_capacity": {
            "name": "get_capacity",
            "location": 172,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LRUCache.__len__": {
            "name": "__len__",
            "location": 175,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LRUCache.__contains__": {
            "name": "__contains__",
            "location": 178,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "LRUCache.__getitem__": {
            "name": "__getitem__",
            "location": 181,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "LRUCache.get": {
            "name": "get",
            "location": 186,
            "return": [
                "str",
                "int",
                "OrderedDict",
                "dict"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "KT",
                    "bytes"
                ],
                "default": [
                    "str",
                    "Optional[Any]"
                ]
            }
        },
        "LRUCache.__setitem__": {
            "name": "__setitem__",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ],
                "value": [
                    "str",
                    "KT",
                    "VT",
                    "Union[str, int]"
                ]
            }
        },
        "LRUCache.__delitem__": {
            "name": "__delitem__",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "KT",
                    "dict",
                    "bytes"
                ]
            }
        },
        "LRUCache.clear": {
            "name": "clear",
            "location": 208,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "omit_item_evicted": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "LRUCache.__iter__": {
            "name": "__iter__",
            "location": 216,
            "return": [
                "Callable",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LRUCache.items": {
            "name": "items",
            "location": 219,
            "return": [
                "Mapping",
                "Dict[str, Any]",
                "Dict[str, Dict[str, str]]",
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "LRUCache.keys": {
            "name": "keys",
            "location": 222,
            "return": [
                "Dict[str, str]",
                "Optional[Dict[str, Any]]",
                "Literal",
                "Mapping",
                "bytes",
                "dict",
                "Dict[str, Any]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LRUCache.values": {
            "name": "values",
            "location": 225,
            "return": [
                "dict",
                "str",
                "Dict[str, Any]",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LRUCache._evict_item": {
            "name": "_evict_item",
            "location": 228,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "LRUCache._update_item": {
            "name": "_update_item",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "Sequence[str]",
                    "dict"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        },
        "lru_cache.decorator": {
            "name": "decorator",
            "location": 251,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "str"
                ]
            }
        },
        "cached_per_instance.cache_fun": {
            "name": "cache_fun",
            "location": 290,
            "return": [],
            "arguments": {
                "fun": []
            }
        },
        "memoize.cache_key": {
            "name": "cache_key",
            "location": 368,
            "return": [],
            "arguments": {
                "args": [],
                "kwargs": []
            }
        },
        "memoize.new_fun": {
            "name": "new_fun",
            "location": 372,
            "return": [],
            "arguments": {}
        },
        "memoize.clear_cache": {
            "name": "clear_cache",
            "location": 378,
            "return": [],
            "arguments": {}
        },
        "memoize_with_ttl.cache_fun": {
            "name": "cache_fun",
            "location": 404,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fun": [
                    "str"
                ]
            }
        },
        "lazy_constant.NewLazyConstant.__call__": {
            "name": "__call__",
            "location": 88,
            "return": [
                "Optional[str]",
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "lru_cache.decorator.wrapper": {
            "name": "wrapper",
            "location": 264,
            "return": [
                "str",
                "Optional[bool]",
                "float",
                "Optional[float]",
                "dict",
                "List[AnyStr]"
            ],
            "arguments": {}
        },
        "cached_per_instance.cache_fun.cache_key": {
            "name": "cache_key",
            "location": 296,
            "return": [],
            "arguments": {
                "args": [],
                "kwargs": []
            }
        },
        "cached_per_instance.cache_fun.clear_cache": {
            "name": "clear_cache",
            "location": 299,
            "return": [],
            "arguments": {
                "instance_key": [],
                "ref": []
            }
        },
        "cached_per_instance.cache_fun.new_fun": {
            "name": "new_fun",
            "location": 303,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "memoize_with_ttl.cache_fun.cache_key": {
            "name": "cache_key",
            "location": 409,
            "return": [
                "str",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "args": [],
                "kwargs": []
            }
        },
        "memoize_with_ttl.cache_fun.new_fun": {
            "name": "new_fun",
            "location": 413,
            "return": [
                "bool",
                "Tuple[int, int]",
                "int"
            ],
            "arguments": {}
        },
        "memoize_with_ttl.cache_fun.clear_cache": {
            "name": "clear_cache",
            "location": 433,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "memoize_with_ttl.cache_fun.dirty": {
            "name": "dirty",
            "location": 438,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "lru_cache.decorator.cache_key": {
            "name": "cache_key",
            "location": 260,
            "return": [],
            "arguments": {
                "args": [],
                "kwargs": []
            }
        }
    },
    "qcore-master/qcore/debug.py": {
        "trace": {
            "name": "trace",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "enter": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "exit": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "counter": {
            "name": "counter",
            "location": 117,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "breakpoint": {
            "name": "breakpoint",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "hang_me": {
            "name": "hang_me",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "timeout_secs": [
                    "float",
                    "Optional[float]",
                    "int",
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "format_stack": {
            "name": "format_stack",
            "location": 138,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_bool_by_mask": {
            "name": "get_bool_by_mask",
            "location": 142,
            "return": [
                "str",
                "list",
                "List[str]"
            ],
            "arguments": {
                "source": [
                    "str"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "set_by_mask": {
            "name": "set_by_mask",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "target": [
                    "Optional[str]",
                    "Optional[int]",
                    "Union[int, str, None]",
                    "bool"
                ],
                "prefix": [
                    "str"
                ],
                "value": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "trace.decorate": {
            "name": "decorate",
            "location": 44,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DebugCounter.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "DebugCounter.increment": {
            "name": "increment",
            "location": 80,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "increment_by": [
                    "Iterable[T]",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "DebugCounter.decrement": {
            "name": "decrement",
            "location": 84,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "decrement_by": [
                    "Iterable[T]",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "DebugCounter.dump": {
            "name": "dump",
            "location": 88,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DebugCounter.dump_if": {
            "name": "dump_if",
            "location": 93,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "predicate": [
                    "int",
                    "Callable",
                    "str"
                ],
                "and_break": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DebugCounter.dump_every": {
            "name": "dump_every",
            "location": 100,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "interval_in_seconds": [
                    "int",
                    "Optional[bool]",
                    "float"
                ]
            }
        },
        "DebugCounter.break_if": {
            "name": "break_if",
            "location": 105,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "predicate": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "DebugCounter.__str__": {
            "name": "__str__",
            "location": 110,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DebugCounter.__repr__": {
            "name": "__repr__",
            "location": 113,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "trace.decorate.new_fn": {
            "name": "new_fn",
            "location": 46,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]"
            ],
            "arguments": {}
        }
    },
    "qcore-master/qcore/decorators.py": {
        "decorate": {
            "name": "decorate",
            "location": 159,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "decorator_cls": []
            }
        },
        "deprecated": {
            "name": "deprecated",
            "location": 181,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "replacement_description": [
                    "str",
                    "Callable",
                    "dict",
                    "int",
                    "bool"
                ]
            }
        },
        "convert_result": {
            "name": "convert_result",
            "location": 205,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "float"
            ],
            "arguments": {
                "converter": [
                    "str",
                    "Type",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "retry": {
            "name": "retry",
            "location": 218,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "exception_cls": [
                    "Dict[str, Any]",
                    "bool",
                    "str",
                    "int",
                    "List[T]",
                    "List[float]"
                ],
                "max_tries": [
                    "Dict[str, Any]",
                    "bool",
                    "str",
                    "int",
                    "List[T]",
                    "List[float]"
                ],
                "sleep": [
                    "Dict[str, Any]",
                    "bool",
                    "str",
                    "int",
                    "List[T]",
                    "List[float]"
                ]
            }
        },
        "decorator_of_context_manager": {
            "name": "decorator_of_context_manager",
            "location": 276,
            "return": [
                "Iterable[T]",
                "str",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "ctxt": [
                    "Optional[int]",
                    "str",
                    "float"
                ]
            }
        },
        "_update_wrapper": {
            "name": "_update_wrapper",
            "location": 306,
            "return": [
                ""
            ],
            "arguments": {
                "wrapper": [
                    "int",
                    "Optional[Union[str, Any]]",
                    "bool",
                    "str"
                ],
                "wrapped": [
                    "dict",
                    "List[str]",
                    "type"
                ]
            }
        },
        "_reduce_impl": {
            "name": "_reduce_impl",
            "location": 315,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "module": [
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "DecoratorBinder.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "decorator": [
                    "int",
                    "bool",
                    "float"
                ],
                "instance": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DecoratorBinder.name": {
            "name": "name",
            "location": 51,
            "return": [
                "str",
                "Type",
                "Callable[..., T]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecoratorBinder.is_decorator": {
            "name": "is_decorator",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecoratorBinder.__call__": {
            "name": "__call__",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecoratorBinder.__str__": {
            "name": "__str__",
            "location": 63,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecoratorBinder.__repr__": {
            "name": "__repr__",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecoratorBinder.__hash__": {
            "name": "__hash__",
            "location": 93,
            "return": [
                "int",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "__eq__": {
            "name": "__eq__",
            "location": 99,
            "return": [
                "Callable",
                "Iterable[str]",
                "str",
                "int",
                "Exception"
            ],
            "arguments": {
                "self": [
                    "float",
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "Union[int, str]",
                    "Tuple[float, float, float]"
                ],
                "other": [
                    "float",
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "Union[int, str]",
                    "Tuple[float, float, float]"
                ]
            }
        },
        "DecoratorBase.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "str"
                ]
            }
        },
        "DecoratorBase.name": {
            "name": "name",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DecoratorBase.is_decorator": {
            "name": "is_decorator",
            "location": 127,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecoratorBase.__call__": {
            "name": "__call__",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DecoratorBase.__get__": {
            "name": "__get__",
            "location": 133,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "cls": [
                    "str",
                    "int",
                    "Iterable[T]"
                ]
            }
        },
        "DecoratorBase.__str__": {
            "name": "__str__",
            "location": 141,
            "return": [
                "str",
                "list",
                "IO",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecoratorBase.__repr__": {
            "name": "__repr__",
            "location": 144,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecoratorBase.__reduce__": {
            "name": "__reduce__",
            "location": 147,
            "return": [
                "Iterable[str]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "decorate.decorator": {
            "name": "decorator",
            "location": 173,
            "return": [],
            "arguments": {
                "fn": []
            }
        },
        "deprecated.decorate": {
            "name": "decorate",
            "location": 189,
            "return": [],
            "arguments": {
                "fn_or_class": []
            }
        },
        "convert_result.decorate": {
            "name": "decorate",
            "location": 208,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "retry.with_max_retries_call": {
            "name": "with_max_retries_call",
            "location": 229,
            "return": [
                "str",
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "delegate": [
                    "str",
                    "Iterable"
                ]
            }
        },
        "retry.outer": {
            "name": "outer",
            "location": 238,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "bool"
                ]
            }
        },
        "decorator_of_context_manager.decorator_fn": {
            "name": "decorator_fn",
            "location": 287,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "DecoratorBinder.__richcmp__": {
            "name": "__richcmp__",
            "location": 78,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int"
                ],
                "op": [
                    "int"
                ]
            }
        },
        "convert_result.decorate.new_fn": {
            "name": "new_fn",
            "location": 210,
            "return": [
                "Callable",
                "int"
            ],
            "arguments": {}
        },
        "retry.outer.retry_fun": {
            "name": "retry_fun",
            "location": 242,
            "return": [
                "Optional[int]",
                "str",
                "Optional[bool]",
                "Dict[str, int]"
            ],
            "arguments": {}
        },
        "retry.outer.retry_generator_fun": {
            "name": "retry_generator_fun",
            "location": 246,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "decorator_of_context_manager.decorator_fn.decorator": {
            "name": "decorator",
            "location": 288,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "retry.outer.retry_generator_fun.get_first_item": {
            "name": "get_first_item",
            "location": 247,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "decorator_of_context_manager.decorator_fn.decorator.wrapper": {
            "name": "wrapper",
            "location": 290,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "qcore-master/qcore/disallow_inheritance.py": {
        "DisallowInheritance.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cl_name": [
                    "Optional[str]",
                    "str"
                ],
                "bases": [
                    "str",
                    "Optional[str]"
                ],
                "namespace": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "DisallowInheritance.__prepare__": {
            "name": "__prepare__",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "List[str]",
                    "Tuple[type]"
                ],
                "name": [
                    "str",
                    "bool",
                    "List[str]",
                    "Tuple[type]"
                ],
                "bases": [
                    "str",
                    "bool",
                    "List[str]",
                    "Tuple[type]"
                ]
            }
        }
    },
    "qcore-master/qcore/enum.py": {
        "_create_invalid_value_error": {
            "name": "_create_invalid_value_error",
            "location": 396,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Mapping",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "EnumType.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "dict",
                    "Set[str]"
                ],
                "what": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "bases": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "dict": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "EnumType.__contains__": {
            "name": "__contains__",
            "location": 39,
            "return": [
                "bool",
                "Optional[Sequence[str]]",
                "Optional[Callable]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "EnumType.__len__": {
            "name": "__len__",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumType.__iter__": {
            "name": "__iter__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EnumType.__call__": {
            "name": "__call__",
            "location": 48,
            "return": [
                "float",
                "Type[BaseException]",
                "Type",
                "bool",
                "Callable[..., Awaitable]",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "type",
                    "Tuple[str, List[Any]]"
                ],
                "default": [
                    "type",
                    "Tuple[str, List[Any]]"
                ]
            }
        },
        "EnumType.process": {
            "name": "process",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumType._make_value": {
            "name": "_make_value",
            "location": 88,
            "return": [
                "int",
                "str",
                "Tuple[int, int]",
                "Tuple[str, int]",
                "T",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "float",
                    "T"
                ]
            }
        },
        "EnumType.__prepare__": {
            "name": "__prepare__",
            "location": 96,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "List[str]",
                    "Tuple[type]"
                ],
                "name": [
                    "str",
                    "bool",
                    "List[str]",
                    "Tuple[type]"
                ],
                "bases": [
                    "str",
                    "bool",
                    "List[str]",
                    "Tuple[type]"
                ]
            }
        },
        "EnumBase.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "int",
                    "Tuple[str, str, str]",
                    "bool",
                    "T"
                ]
            }
        },
        "EnumBase.short_name": {
            "name": "short_name",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumBase.long_name": {
            "name": "long_name",
            "location": 116,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumBase.title": {
            "name": "title",
            "location": 121,
            "return": [
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumBase.full_name": {
            "name": "full_name",
            "location": 126,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumBase.is_valid": {
            "name": "is_valid",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumBase.assert_valid": {
            "name": "assert_valid",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumBase.__int__": {
            "name": "__int__",
            "location": 137,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumBase.__call__": {
            "name": "__call__",
            "location": 140,
            "return": [
                "Dict[str, Any]",
                "float",
                "list",
                "dict",
                "Iterable[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumBase.__eq__": {
            "name": "__eq__",
            "location": 143,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "T",
                    "Tuple[int, int]"
                ]
            }
        },
        "EnumBase.__ne__": {
            "name": "__ne__",
            "location": 146,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "T",
                    "Tuple[int, int]"
                ]
            }
        },
        "EnumBase.__hash__": {
            "name": "__hash__",
            "location": 149,
            "return": [
                "int",
                "Optional[int]",
                "bool",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumBase.__str__": {
            "name": "__str__",
            "location": 152,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumBase.__repr__": {
            "name": "__repr__",
            "location": 158,
            "return": [
                "int",
                "Type",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumBase.get_names": {
            "name": "get_names",
            "location": 165,
            "return": [
                "List[str]",
                "Iterable[str]",
                "List[Tuple[str, Any]]",
                "str",
                "FrozenSet[str]",
                "list"
            ],
            "arguments": {
                "cls": [
                    "type",
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "EnumBase.get_members": {
            "name": "get_members",
            "location": 170,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[int]",
                    "Type['DataclassT']",
                    "str",
                    "List[str]"
                ]
            }
        },
        "EnumBase.create": {
            "name": "create",
            "location": 174,
            "return": [
                "set",
                "int",
                "Sequence[str]",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "members": [
                    "str",
                    "type"
                ]
            }
        },
        "EnumBase.parse": {
            "name": "parse",
            "location": 216,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "T",
                    "bool"
                ],
                "value": [
                    "T",
                    "bool"
                ],
                "default": [
                    "T",
                    "bool"
                ]
            }
        },
        "EnumBase.__reduce_ex__": {
            "name": "__reduce_ex__",
            "location": 220,
            "return": [
                "Set[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "proto": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Enum.is_valid": {
            "name": "is_valid",
            "location": 225,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Enum.short_name": {
            "name": "short_name",
            "location": 229,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Enum.parse": {
            "name": "parse",
            "location": 234,
            "return": [
                "bool",
                "float",
                "str",
                "Iterable['cirq.Qid']",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "Type['Model']",
                    "Dict[str, Any]",
                    "list",
                    "dict"
                ],
                "value": [
                    "str",
                    "bytes",
                    "float",
                    "Optional[bool]",
                    "Union[str, bytes]"
                ],
                "default": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "Flags.is_valid": {
            "name": "is_valid",
            "location": 271,
            "return": [
                "str",
                "list",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Flags.short_name": {
            "name": "short_name",
            "location": 279,
            "return": [
                "str",
                "Container[\"Taxon\"]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Flags.parse": {
            "name": "parse",
            "location": 295,
            "return": [
                "str",
                "int",
                "Type",
                "float",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "T",
                    "Optional[Dict]",
                    "bool",
                    "Callable"
                ],
                "value": [
                    "Optional[str]",
                    "Optional[Any]",
                    "Iterable",
                    "Optional[Dict]",
                    "bytes"
                ],
                "default": [
                    "Optional[bool]",
                    "Optional[Any]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Flags.__contains__": {
            "name": "__contains__",
            "location": 341,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "Iterable[T]",
                    "List[T]",
                    "Tuple[str, Any]",
                    "Sequence[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "Flags.__or__": {
            "name": "__or__",
            "location": 347,
            "return": [
                "str",
                "BaseException",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "Dict[str, Any]",
                    "List[Dict[str, str]]",
                    "str"
                ]
            }
        },
        "Flags.__and__": {
            "name": "__and__",
            "location": 350,
            "return": [
                "str",
                "BaseException",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "Dict[str, Any]",
                    "List[Dict[str, str]]",
                    "str"
                ]
            }
        },
        "Flags.__xor__": {
            "name": "__xor__",
            "location": 353,
            "return": [
                "str",
                "BaseException",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "Dict[str, Any]",
                    "List[Dict[str, str]]",
                    "str"
                ]
            }
        },
        "Flags.__repr__": {
            "name": "__repr__",
            "location": 356,
            "return": [
                "str",
                "int",
                "BinaryIO",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntEnum.__repr__": {
            "name": "__repr__",
            "location": 370,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumValueGenerator.__init__": {
            "name": "__init__",
            "location": 375,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "EnumValueGenerator.reset": {
            "name": "reset",
            "location": 378,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "str",
                    "Optional[List[str]]",
                    "float",
                    "dict"
                ]
            }
        },
        "EnumValueGenerator.next": {
            "name": "next",
            "location": 381,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumValueGenerator.__call__": {
            "name": "__call__",
            "location": 386,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumValueGenerator.__repr__": {
            "name": "__repr__",
            "location": 389,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qcore-master/qcore/errors.py": {
        "prepare_for_reraise": {
            "name": "prepare_for_reraise",
            "location": 71,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "error": [
                    "str",
                    "Exception"
                ],
                "exc_info": [
                    "str",
                    "NamedTuple",
                    "dict"
                ]
            }
        },
        "reraise": {
            "name": "reraise",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "error": [
                    "bool",
                    "Exception",
                    "dict"
                ]
            }
        }
    },
    "qcore-master/qcore/events.py": {
        "EventHook.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "handlers": [
                    "bool",
                    "str"
                ]
            }
        },
        "EventHook.subscribe": {
            "name": "subscribe",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Callable",
                    "Union[None, int, str]",
                    "Callable[..., Awaitable]"
                ]
            }
        },
        "EventHook.unsubscribe": {
            "name": "unsubscribe",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "EventHook.safe_trigger": {
            "name": "safe_trigger",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EventHook.trigger": {
            "name": "trigger",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EventHook.__call__": {
            "name": "__call__",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EventHook.__contains__": {
            "name": "__contains__",
            "location": 103,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "List[float]",
                    "bool"
                ]
            }
        },
        "EventHook.__iter__": {
            "name": "__iter__",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EventHook.__str__": {
            "name": "__str__",
            "location": 112,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventHook.__repr__": {
            "name": "__repr__",
            "location": 116,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SinkingEventHook.subscribe": {
            "name": "subscribe",
            "location": 129,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "SinkingEventHook.unsubscribe": {
            "name": "unsubscribe",
            "location": 133,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "SinkingEventHook.safe_trigger": {
            "name": "safe_trigger",
            "location": 137,
            "return": [
                "int",
                "Union[tuple, list]",
                "List[int]",
                "Union[int, slice]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SinkingEventHook.trigger": {
            "name": "trigger",
            "location": 141,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SinkingEventHook.__call__": {
            "name": "__call__",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SinkingEventHook.__contains__": {
            "name": "__contains__",
            "location": 149,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "T",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "SinkingEventHook.__iter__": {
            "name": "__iter__",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SinkingEventHook.__str__": {
            "name": "__str__",
            "location": 157,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventInterceptor.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "bool",
                    "list",
                    "Optional[str]"
                ]
            }
        },
        "EventInterceptor.__enter__": {
            "name": "__enter__",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EventInterceptor.__exit__": {
            "name": "__exit__",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "Optional[BaseException]",
                    "Callable[[str, object], None]",
                    "Iterable[float]",
                    "bool"
                ],
                "value": [
                    "Optional[BaseException]",
                    "Callable[[str, object], None]",
                    "Iterable[float]",
                    "bool"
                ],
                "traceback": [
                    "Optional[BaseException]",
                    "Callable[[str, object], None]",
                    "Iterable[float]",
                    "bool"
                ]
            }
        },
        "EventHub.__init__": {
            "name": "__init__",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Optional[str]",
                    "Type[T]",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "EventHub.on": {
            "name": "on",
            "location": 216,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "event": [],
                "handler": [
                    "float",
                    "Dict[str, Any]"
                ]
            }
        },
        "EventHub.off": {
            "name": "off",
            "location": 230,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "event": [],
                "handler": [
                    "float",
                    "Dict[str, Any]"
                ]
            }
        },
        "EventHub.trigger": {
            "name": "trigger",
            "location": 244,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "EventHub.safe_trigger": {
            "name": "safe_trigger",
            "location": 258,
            "return": [
                "float",
                "str",
                "T",
                "int"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "EventHub.get_or_create": {
            "name": "get_or_create",
            "location": 273,
            "return": [
                "int",
                "Dict[str, str]",
                "str",
                "Iterable[str]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict",
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "EventHub.__getattr__": {
            "name": "__getattr__",
            "location": 288,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "EventHub.__contains__": {
            "name": "__contains__",
            "location": 301,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "List[float]",
                    "bool"
                ]
            }
        },
        "EventHub.__len__": {
            "name": "__len__",
            "location": 305,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventHub.__getitem__": {
            "name": "__getitem__",
            "location": 309,
            "return": [
                "Mapping",
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "List[str]"
                ]
            }
        },
        "EventHub.__setitem__": {
            "name": "__setitem__",
            "location": 313,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        },
        "EventHub.__delitem__": {
            "name": "__delitem__",
            "location": 317,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Optional[str]",
                    "str",
                    "tuple",
                    "Dict[str, str]",
                    "int",
                    "Callable[[KT], VT]",
                    "Type[RuntimeError]"
                ]
            }
        },
        "EventHub.__iter__": {
            "name": "__iter__",
            "location": 321,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventHub.__repr__": {
            "name": "__repr__",
            "location": 325,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventHub.__prepare__": {
            "name": "__prepare__",
            "location": 331,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "List[str]",
                    "Tuple[type]"
                ],
                "name": [
                    "str",
                    "bool",
                    "List[str]",
                    "Tuple[type]"
                ],
                "bases": [
                    "str",
                    "bool",
                    "List[str]",
                    "Tuple[type]"
                ]
            }
        },
        "EnumBasedEventHubType.__init__": {
            "name": "__init__",
            "location": 342,
            "return": [
                "Dict[str, Dict[str, int]]",
                "str",
                "Dict[str, Any]",
                "Union[tuple, list]"
            ],
            "arguments": {
                "cls": [
                    "Optional[str]",
                    "str",
                    "Callable[..., T]",
                    "Dict[str, str]"
                ],
                "what": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "bases": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "dict": [
                    "Optional[str]",
                    "str",
                    "Exception",
                    "Dict[str, Any]",
                    "list",
                    "dict"
                ]
            }
        },
        "EnumBasedEventHubType.__prepare__": {
            "name": "__prepare__",
            "location": 393,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "List[str]",
                    "Tuple[type]"
                ],
                "name": [
                    "str",
                    "bool",
                    "List[str]",
                    "Tuple[type]"
                ],
                "bases": [
                    "str",
                    "bool",
                    "List[str]",
                    "Tuple[type]"
                ]
            }
        }
    },
    "qcore-master/qcore/helpers.py": {
        "true_fn": {
            "name": "true_fn",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "false_fn": {
            "name": "false_fn",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "ellipsis": {
            "name": "ellipsis",
            "location": 214,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "source": [
                    "int",
                    "List[str]",
                    "Sequence"
                ],
                "max_length": [
                    "int",
                    "List[str]",
                    "Sequence"
                ]
            }
        },
        "safe_str": {
            "name": "safe_str",
            "location": 221,
            "return": [
                "str"
            ],
            "arguments": {
                "source": [
                    "str",
                    "Union[str, bytes]"
                ],
                "max_length": [
                    "str",
                    "int",
                    "Union[str, Tuple[str, ...]]"
                ]
            }
        },
        "safe_repr": {
            "name": "safe_repr",
            "location": 229,
            "return": [
                "str",
                "bytes",
                "Tuple[str, str]",
                "int"
            ],
            "arguments": {
                "source": [
                    "int",
                    "bool",
                    "str",
                    "Exception"
                ],
                "max_length": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "dict_to_object": {
            "name": "dict_to_object",
            "location": 237,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "source": [
                    "Mapping[str, Any]",
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "IO[bytes]"
                ]
            }
        },
        "copy_public_attrs": {
            "name": "copy_public_attrs",
            "location": 245,
            "return": [
                ""
            ],
            "arguments": {
                "source_obj": [
                    "AsyncIterator[T]",
                    "Iterable",
                    "Optional[int]",
                    "Sequence[Iterable[Any]]",
                    "Iterable[Any]"
                ],
                "dest_obj": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "object_from_string": {
            "name": "object_from_string",
            "location": 256,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "catchable_exceptions": {
            "name": "catchable_exceptions",
            "location": 292,
            "return": [
                "bool"
            ],
            "arguments": {
                "exceptions": [
                    "str"
                ]
            }
        },
        "MarkerObject.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "Iterable[bytes]"
                ]
            }
        },
        "MarkerObject.__str__": {
            "name": "__str__",
            "location": 56,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MarkerObject.__repr__": {
            "name": "__repr__",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmptyContext.__enter__": {
            "name": "__enter__",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EmptyContext.__exit__": {
            "name": "__exit__",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "EmptyContext.__repr__": {
            "name": "__repr__",
            "location": 80,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CythonCachedHashWrapper.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "CythonCachedHashWrapper.value": {
            "name": "value",
            "location": 93,
            "return": [
                "str",
                "int",
                "Type[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CythonCachedHashWrapper.hash": {
            "name": "hash",
            "location": 96,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CythonCachedHashWrapper.__call__": {
            "name": "__call__",
            "location": 99,
            "return": [
                "Dict[str, Any]",
                "float",
                "list",
                "dict",
                "Iterable[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CythonCachedHashWrapper.__hash__": {
            "name": "__hash__",
            "location": 102,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CythonCachedHashWrapper.__richcmp__": {
            "name": "__richcmp__",
            "location": 105,
            "return": [
                "bool",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float"
                ],
                "op": [
                    "str",
                    "Iterable['cirq.Qid']",
                    "Optional[T]"
                ]
            }
        },
        "CythonCachedHashWrapper.__repr__": {
            "name": "__repr__",
            "location": 122,
            "return": [
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScopedValue.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "default": [
                    "str",
                    "int",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "ScopedValue.get": {
            "name": "get",
            "location": 157,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScopedValue.set": {
            "name": "set",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "ScopedValue.override": {
            "name": "override",
            "location": 163,
            "return": [
                "int",
                "float",
                "bool",
                "str",
                "List[int]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "bytes",
                    "int"
                ]
            }
        },
        "ScopedValue.__call__": {
            "name": "__call__",
            "location": 170,
            "return": [
                "Dict[str, Any]",
                "float",
                "list",
                "dict",
                "Iterable[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScopedValue.__str__": {
            "name": "__str__",
            "location": 174,
            "return": [
                "int",
                "bool",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScopedValue.__repr__": {
            "name": "__repr__",
            "location": 177,
            "return": [
                "int",
                "str",
                "Type",
                "tuple",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ScopedValueOverrideContext.__init__": {
            "name": "__init__",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "List[Tuple[int, float]]",
                    "int",
                    "float",
                    "str"
                ],
                "value": [
                    "float",
                    "str",
                    "int",
                    "Callable[[None], bool]"
                ]
            }
        },
        "_ScopedValueOverrideContext.__enter__": {
            "name": "__enter__",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_ScopedValueOverrideContext.__exit__": {
            "name": "__exit__",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "exc_value": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "tb": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        },
        "_PropertyOverrideContext.__init__": {
            "name": "__init__",
            "location": 196,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "str",
                    "Sequence[Dict[str, str]]",
                    "Callable",
                    "Set[str]"
                ],
                "property_name": [
                    "bool",
                    "str",
                    "List[str]"
                ],
                "value": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "_PropertyOverrideContext.__enter__": {
            "name": "__enter__",
            "location": 202,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_PropertyOverrideContext.__exit__": {
            "name": "__exit__",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "exc_value": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "tb": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        },
        "PythonCachedHashWrapper.__eq__": {
            "name": "__eq__",
            "location": 131,
            "return": [
                "int",
                "bool",
                "str",
                "Tuple[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[Any]"
                ]
            }
        },
        "PythonCachedHashWrapper.__ne__": {
            "name": "__ne__",
            "location": 138,
            "return": [
                "int",
                "str",
                "Type",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[Any]"
                ]
            }
        },
        "PythonCachedHashWrapper.__hash__": {
            "name": "__hash__",
            "location": 146,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qcore-master/qcore/inspectable_class.py": {
        "InspectableClass._filtered_dict": {
            "name": "_filtered_dict",
            "location": 32,
            "return": [
                "dict",
                "str",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InspectableClass.__repr__": {
            "name": "__repr__",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InspectableClass.__str__": {
            "name": "__str__",
            "location": 49,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "InspectableClass.__hash__": {
            "name": "__hash__",
            "location": 52,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "InspectableClass.__eq__": {
            "name": "__eq__",
            "location": 55,
            "return": [
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict[str, Any]",
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "InspectableClass.__ne__": {
            "name": "__ne__",
            "location": 60,
            "return": [
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict[str, Any]",
                    "Union[int, \"BitVec\"]"
                ]
            }
        }
    },
    "qcore-master/qcore/inspection.py": {
        "get_original_fn": {
            "name": "get_original_fn",
            "location": 26,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "fn": [
                    "dict",
                    "str",
                    "Mapping"
                ]
            }
        },
        "get_full_name": {
            "name": "get_full_name",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "src": [
                    "str",
                    "int"
                ]
            }
        },
        "get_function_call_str": {
            "name": "get_function_call_str",
            "location": 71,
            "return": [
                "str",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "type",
                    "Type[T]"
                ],
                "args": [],
                "kwargs": []
            }
        },
        "get_function_call_repr": {
            "name": "get_function_call_repr",
            "location": 101,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "fn": [
                    "str"
                ],
                "args": [],
                "kwargs": []
            }
        },
        "getargspec": {
            "name": "getargspec",
            "location": 122,
            "return": [
                "int",
                "List[str]",
                "Dict[str, int]"
            ],
            "arguments": {
                "func": [
                    "Callable"
                ]
            }
        },
        "is_cython_or_generator": {
            "name": "is_cython_or_generator",
            "location": 143,
            "return": [
                "bool"
            ],
            "arguments": {
                "fn": [
                    "str"
                ]
            }
        },
        "is_cython_function": {
            "name": "is_cython_function",
            "location": 158,
            "return": [
                "bool",
                "type",
                "Tuple[str]",
                "Union[str, List[str]]",
                "str"
            ],
            "arguments": {
                "fn": []
            }
        },
        "is_cython_class": {
            "name": "is_cython_class",
            "location": 170,
            "return": [
                "bool",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "IO[bytes]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "is_classmethod": {
            "name": "is_classmethod",
            "location": 175,
            "return": [
                "bool"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "Optional[BaseException]",
                    "Callable[[Mapping], Awaitable]",
                    "Callable[[], Awaitable[Mapping]]"
                ]
            }
        },
        "wraps": {
            "name": "wraps",
            "location": 190,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "wrapped": [
                    "int",
                    "bool",
                    "List[str]"
                ],
                "assigned": [
                    "int",
                    "bool",
                    "List[str]"
                ],
                "updated": [
                    "int",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "get_subclass_tree": {
            "name": "get_subclass_tree",
            "location": 200,
            "return": [
                "List[str]",
                "str",
                "List[Dict]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Sequence[int]",
                    "Optional[str]",
                    "int"
                ],
                "ensure_unique": [
                    "List[str]",
                    "list",
                    "Optional[str]",
                    "callable",
                    "int",
                    "List[List[int]]"
                ]
            }
        },
        "lazy_stack": {
            "name": "lazy_stack",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "get_function_call_str.str_converter": {
            "name": "str_converter",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "v": [
                    "int",
                    "str",
                    "SupportsInt"
                ]
            }
        }
    },
    "qcore-master/qcore/microtime.py": {
        "_keyword_arguments_only": {
            "name": "_keyword_arguments_only",
            "location": 69,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "utime_delta": {
            "name": "utime_delta",
            "location": 78,
            "return": [
                "int",
                "str",
                "dict",
                "T"
            ],
            "arguments": {
                "days": [
                    "int",
                    "float"
                ],
                "hours": [
                    "int",
                    "float"
                ],
                "minutes": [
                    "int",
                    "float"
                ],
                "seconds": [
                    "int",
                    "float"
                ]
            }
        },
        "get_time_offset": {
            "name": "get_time_offset",
            "location": 88,
            "return": [
                "str",
                "int",
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "set_time_offset": {
            "name": "set_time_offset",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "offset": [
                    "str",
                    "int",
                    "Iterable[int]",
                    "Tuple[int]",
                    "Tuple[bytes, bytes]"
                ]
            }
        },
        "add_time_offset": {
            "name": "add_time_offset",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "offset": [
                    "str",
                    "Tuple[bytes, bytes]",
                    "float",
                    "bool"
                ]
            }
        },
        "utime": {
            "name": "utime",
            "location": 121,
            "return": [
                "float",
                "Optional[float]",
                "int"
            ],
            "arguments": {}
        },
        "true_utime": {
            "name": "true_utime",
            "location": 126,
            "return": [
                "str",
                "int",
                "Optional[float]",
                "Optional[bool]",
                "Iterable[Any]"
            ],
            "arguments": {}
        },
        "execute_with_timeout": {
            "name": "execute_with_timeout",
            "location": 136,
            "return": [
                "int",
                "bool",
                "Tuple[float, float, float]",
                "float"
            ],
            "arguments": {
                "fn": [
                    "bool",
                    "List[Type]",
                    "List[str]",
                    "Optional[List[Type]]"
                ],
                "args": [],
                "kwargs": [],
                "timeout": [
                    "str",
                    "bool"
                ],
                "fail_if_no_timer": [
                    "str",
                    "List[str]",
                    "int",
                    "bool",
                    "List[Tuple[str, str]]"
                ],
                "signal_type": [
                    "str",
                    "bool",
                    "Hashable",
                    "Optional[List[str]]",
                    "Optional[str]"
                ],
                "timer_type": [
                    "bool",
                    "str",
                    "Optional[bool]"
                ],
                "timeout_exception_cls": [
                    "str",
                    "List[str]",
                    "int",
                    "bool",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "_keyword_arguments_only.new_fn": {
            "name": "new_fn",
            "location": 71,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {}
        },
        "TimeOffset.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "offset": [
                    "int",
                    "float",
                    "bool",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "TimeOffset.__enter__": {
            "name": "__enter__",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeOffset.__exit__": {
            "name": "__exit__",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "typ": [
                    "Optional[BaseException]",
                    "Callable[[str, object], None]",
                    "Iterable[float]",
                    "bool"
                ],
                "value": [
                    "Optional[BaseException]",
                    "Callable[[str, object], None]",
                    "Iterable[float]",
                    "bool"
                ],
                "traceback": [
                    "Optional[BaseException]",
                    "Callable[[str, object], None]",
                    "Iterable[float]",
                    "bool"
                ]
            }
        },
        "execute_with_timeout.signal_handler": {
            "name": "signal_handler",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "signum": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "frame": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "qcore-master/qcore/testing.py": {
        "disabled": {
            "name": "disabled",
            "location": 92,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "func_or_class": [
                    "Callable[[float], float]",
                    "float",
                    "Optional[str]",
                    "Warning",
                    "Optional[int]"
                ]
            }
        },
        "decorate_all_test_methods": {
            "name": "decorate_all_test_methods",
            "location": 124,
            "return": [
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "decorator": [
                    "Dict[str, int]",
                    "bool"
                ]
            }
        },
        "decorate_func_or_method_or_class": {
            "name": "decorate_func_or_method_or_class",
            "location": 142,
            "return": [
                "str",
                "Callable[..., T]",
                "int",
                "bool"
            ],
            "arguments": {
                "decorator": [
                    "str",
                    "List[Tuple[Any, Any]]",
                    "bool",
                    "Callable",
                    "Type[Any]",
                    "List[str]"
                ]
            }
        },
        "_Anything.__eq__": {
            "name": "__eq__",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "List[str]",
                    "Union[int, float]",
                    "AbstractSet[T]"
                ]
            }
        },
        "_Anything.__ne__": {
            "name": "__ne__",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "List[str]",
                    "Union[int, float]",
                    "AbstractSet[T]"
                ]
            }
        },
        "_Anything.__repr__": {
            "name": "__repr__",
            "location": 60,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Anything.__hash__": {
            "name": "__hash__",
            "location": 63,
            "return": [
                "Callable",
                "bytes",
                "T",
                "int",
                "IO"
            ],
            "arguments": {
                "self": []
            }
        },
        "GreaterEq.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "val": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "GreaterEq.__eq__": {
            "name": "__eq__",
            "location": 82,
            "return": [
                "bool",
                "int",
                "Iterable[T]",
                "str",
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[\"Cell\"]"
                ]
            }
        },
        "GreaterEq.__ne__": {
            "name": "__ne__",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "GreaterEq.__repr__": {
            "name": "__repr__",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "disabled.decorate_func": {
            "name": "decorate_func",
            "location": 100,
            "return": [
                "float",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "func": [
                    "Callable"
                ]
            }
        },
        "disabled.decorate_class": {
            "name": "decorate_class",
            "location": 112,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "class_": [
                    "str",
                    "bool"
                ]
            }
        },
        "decorate_all_test_methods.predicate": {
            "name": "predicate",
            "location": 127,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "member": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "decorate_all_test_methods.wrapper": {
            "name": "wrapper",
            "location": 130,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "type",
                    "Union[int, slice]",
                    "str"
                ]
            }
        },
        "decorate_func_or_method_or_class.decorate": {
            "name": "decorate",
            "location": 151,
            "return": [
                "Dict[str, Any]",
                "List[Dict[str, Any]]",
                "Dict[str, int]"
            ],
            "arguments": {
                "func_or_class": [
                    "Callable[[float], float]",
                    "bool",
                    "str",
                    "float",
                    "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                    "Dict[int, dict]"
                ]
            }
        },
        "disabled.decorate_func.wrapper": {
            "name": "wrapper",
            "location": 102,
            "return": [],
            "arguments": {}
        }
    },
    "qcore-master/qcore/__init__.py": {},
    "qcore-master/qcore/tests/test_asserts.py": {
        "test_assert_eq": {
            "name": "test_assert_eq",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_assert_eq_failures": {
            "name": "test_assert_eq_failures",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "test_assert_ordering": {
            "name": "test_assert_ordering",
            "location": 70,
            "return": [],
            "arguments": {}
        },
        "test_assert_ne": {
            "name": "test_assert_ne",
            "location": 141,
            "return": [],
            "arguments": {}
        },
        "test_assert_ne_with_failures": {
            "name": "test_assert_ne_with_failures",
            "location": 149,
            "return": [],
            "arguments": {}
        },
        "test_assert_is": {
            "name": "test_assert_is",
            "location": 170,
            "return": [],
            "arguments": {}
        },
        "test_assert_is_not": {
            "name": "test_assert_is_not",
            "location": 182,
            "return": [],
            "arguments": {}
        },
        "test_assert_not_in": {
            "name": "test_assert_not_in",
            "location": 194,
            "return": [],
            "arguments": {}
        },
        "test_assert_use_ascii_representation": {
            "name": "test_assert_use_ascii_representation",
            "location": 213,
            "return": [],
            "arguments": {}
        },
        "test_complex_assertions": {
            "name": "test_complex_assertions",
            "location": 284,
            "return": [],
            "arguments": {}
        },
        "test_string_assertions": {
            "name": "test_string_assertions",
            "location": 301,
            "return": [],
            "arguments": {}
        },
        "test_assert_error_saves_exception": {
            "name": "test_assert_error_saves_exception",
            "location": 324,
            "return": [],
            "arguments": {}
        },
        "test_message": {
            "name": "test_message",
            "location": 331,
            "return": [],
            "arguments": {}
        },
        "test_extra": {
            "name": "test_extra",
            "location": 340,
            "return": [],
            "arguments": {}
        },
        "test_assert_dict_eq": {
            "name": "test_assert_dict_eq",
            "location": 351,
            "return": [],
            "arguments": {}
        },
        "test_assert_in_with_tolerance": {
            "name": "test_assert_in_with_tolerance",
            "location": 372,
            "return": [],
            "arguments": {}
        },
        "TestAssertRaises.test_handles_specific_exceptions": {
            "name": "test_handles_specific_exceptions",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAssertRaises.test_handles_any_exceptions": {
            "name": "test_handles_any_exceptions",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAssertRaises.test_fails_if_raise_wrong_exception": {
            "name": "test_fails_if_raise_wrong_exception",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAssertRaises.test_fails_if_exception_not_raised": {
            "name": "test_fails_if_exception_not_raised",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAssertRaises.test_handles_multiple_exception_types": {
            "name": "test_handles_multiple_exception_types",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAssertRaises.test_with_extra": {
            "name": "test_with_extra",
            "location": 271,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAssertRaises.test_no_extra_kwargs": {
            "name": "test_no_extra_kwargs",
            "location": 278,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExceptionWithValue.__init__": {
            "name": "__init__",
            "location": 320,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "qcore-master/qcore/tests/test_caching.py": {
        "test_lru_cache": {
            "name": "test_lru_cache",
            "location": 279,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lru_cache_key_fn": {
            "name": "test_lru_cache_key_fn",
            "location": 323,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cached_per_instance": {
            "name": "test_cached_per_instance",
            "location": 372,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cached_per_instance_pickling": {
            "name": "test_cached_per_instance_pickling",
            "location": 439,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "cached_fn": {
            "name": "cached_fn",
            "location": 479,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "y": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ],
                "z": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "cached_fn_with_annotations": {
            "name": "cached_fn_with_annotations",
            "location": 486,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "y": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ],
                "z": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "cached_fn_with_kwonly_args": {
            "name": "cached_fn_with_kwonly_args",
            "location": 493,
            "return": [
                "int",
                "Iterable[Iterable[T]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "y": [
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "test_memoize_with_kwonly_args": {
            "name": "test_memoize_with_kwonly_args",
            "location": 502,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "cached_fn_with_ttl": {
            "name": "cached_fn_with_ttl",
            "location": 528,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "y": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ],
                "z": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "cached_fn_with_ttl_unhashable": {
            "name": "cached_fn_with_ttl_unhashable",
            "location": 535,
            "return": [
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "y": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ],
                "z": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "test_memoize": {
            "name": "test_memoize",
            "location": 541,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_memoize_with_ttl": {
            "name": "test_memoize_with_ttl",
            "location": 562,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_memoize_with_ttl_unhashable": {
            "name": "test_memoize_with_ttl_unhashable",
            "location": 611,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestLazyConstant.test_decorator": {
            "name": "test_decorator",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLazyConstant.test_not_compute": {
            "name": "test_not_compute",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLazyConstant.test_clear": {
            "name": "test_clear",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLazyConstant.test_compute_clear": {
            "name": "test_compute_clear",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThreadLocalLazyConstant.test_thread_locality": {
            "name": "test_thread_locality",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThreadLocalLazyConstant.test_not_compute": {
            "name": "test_not_compute",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThreadLocalLazyConstant.test_clear": {
            "name": "test_clear",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestThreadLocalLazyConstant.test_compute_clear": {
            "name": "test_compute_clear",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLRUCache.test_deletion": {
            "name": "test_deletion",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLRUCache.test_eviction": {
            "name": "test_eviction",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLRUCache._check_order": {
            "name": "_check_order",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "expected": [
                    "str",
                    "int",
                    "float"
                ],
                "cache": [
                    "List[Optional[Any]]",
                    "dict",
                    "Union[str, int]",
                    "str"
                ]
            }
        },
        "TestLRUCache.test_iteration": {
            "name": "test_iteration",
            "location": 208,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLRUCache.test_getitem": {
            "name": "test_getitem",
            "location": 216,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLRUCache.test_get": {
            "name": "test_get",
            "location": 233,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLRUCache.test_sets": {
            "name": "test_sets",
            "location": 249,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLRUCache.test_clear": {
            "name": "test_clear",
            "location": 265,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_lru_cache.cube": {
            "name": "cube",
            "location": 284,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "test_lru_cache_key_fn.cube": {
            "name": "cube",
            "location": 327,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "n": [
                    "int",
                    "Sequence",
                    "float",
                    "List[float]",
                    "list"
                ]
            }
        },
        "TestClass.__init__": {
            "name": "__init__",
            "location": 352,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "val": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "TestClass.get_x": {
            "name": "get_x",
            "location": 357,
            "return": [
                "str",
                "int",
                "Type",
                "Union[tuple, list]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClass.with_kwargs": {
            "name": "with_kwargs",
            "location": 362,
            "return": [
                "str",
                "bool",
                "List[int]",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "str",
                    "int",
                    "Union[int, float]"
                ],
                "y": [
                    "float",
                    "str",
                    "int",
                    "Union[int, float]"
                ],
                "z": [
                    "float",
                    "str",
                    "int",
                    "Union[int, float]"
                ]
            }
        },
        "TestClass.with_variable_kwargs": {
            "name": "with_variable_kwargs",
            "location": 367,
            "return": [
                "Tuple[float, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PickleTestClass.f": {
            "name": "f",
            "location": 435,
            "return": [
                "float",
                "str",
                "T"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "List[T]",
                    "Tuple[int]"
                ]
            }
        },
        "TestLazyConstant.test_decorator.test_function": {
            "name": "test_function",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "TestLazyConstant.test_compute_clear.test_function": {
            "name": "test_function",
            "location": 73,
            "return": [
                "Type"
            ],
            "arguments": {}
        },
        "TestThreadLocalLazyConstant.test_thread_locality.execute": {
            "name": "execute",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestThreadLocalLazyConstant.test_compute_clear.test_function": {
            "name": "test_function",
            "location": 116,
            "return": [
                "Type"
            ],
            "arguments": {}
        },
        "test_cached_per_instance_pickling.X.f": {
            "name": "f",
            "location": 466,
            "return": [
                "float",
                "str",
                "T"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "List[T]",
                    "Tuple[int]"
                ]
            }
        },
        "test_cached_per_instance_pickling.X.__getstate__": {
            "name": "__getstate__",
            "location": 469,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qcore-master/qcore/tests/test_debug.py": {
        "test_hang_me_does_not_throw": {
            "name": "test_hang_me_does_not_throw",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_hange_me_handles_exception": {
            "name": "test_hange_me_handles_exception",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_format_stack": {
            "name": "test_format_stack",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_debug_counter": {
            "name": "test_debug_counter",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_bool_by_mask": {
            "name": "test_bool_by_mask",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_format_stack.foo": {
            "name": "foo",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "test_bool_by_mask.MaskObject.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qcore-master/qcore/tests/test_decorators.py": {
        "deprecated_fn": {
            "name": "deprecated_fn",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_deprecated": {
            "name": "test_deprecated",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_convert_result": {
            "name": "test_convert_result",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "retry_it": {
            "name": "retry_it",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_decorator_of_context_manager": {
            "name": "test_decorator_of_context_manager",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "useless_decorator": {
            "name": "useless_decorator",
            "location": 234,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "decorated_fn": {
            "name": "decorated_fn",
            "location": 239,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_decorated_fn_name": {
            "name": "test_decorated_fn_name",
            "location": 243,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "f": {
            "name": "f",
            "location": 287,
            "return": [
                "str",
                "bytes",
                "bool",
                "bytearray"
            ],
            "arguments": {
                "a": [
                    "int",
                    "Sequence[Mapping]"
                ],
                "b": [
                    "int",
                    "Sequence[Mapping]"
                ]
            }
        },
        "test_convert_result.test1": {
            "name": "test1",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestRetry.create_generator_function": {
            "name": "create_generator_function",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "exception_type": [
                    "int",
                    "str"
                ],
                "max_tries": [
                    "int",
                    "str"
                ]
            }
        },
        "TestRetry.create_any_function": {
            "name": "create_any_function",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "exception_type": [
                    "int",
                    "str"
                ],
                "max_tries": [
                    "int",
                    "str"
                ]
            }
        },
        "TestRetry.test_pickling": {
            "name": "test_pickling",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_retry_passes_all_arguments": {
            "name": "test_retry_passes_all_arguments",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_retry_does_not_retry_on_no_exception": {
            "name": "test_retry_does_not_retry_on_no_exception",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_retry_does_not_retry_on_unspecified_exception": {
            "name": "test_retry_does_not_retry_on_unspecified_exception",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_retry_retries_on_provided_exception": {
            "name": "test_retry_retries_on_provided_exception",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_retry_requires_max_try_at_least_one": {
            "name": "test_retry_requires_max_try_at_least_one",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_retry_can_take_multiple_exceptions": {
            "name": "test_retry_can_take_multiple_exceptions",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.test_retry_preserves_argspec": {
            "name": "test_retry_preserves_argspec",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_decorator_of_context_manager.decorated": {
            "name": "decorated",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "UselessDecorator.name": {
            "name": "name",
            "location": 230,
            "return": [
                "Dict[str, Any]",
                "str",
                "int",
                "Iterator",
                "Container[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheDecoratorBinder.dirty": {
            "name": "dirty",
            "location": 249,
            "return": [
                "bool",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheDecorator.__init__": {
            "name": "__init__",
            "location": 259,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheDecorator.name": {
            "name": "name",
            "location": 263,
            "return": [
                "Dict[str, Any]",
                "str",
                "int",
                "Iterator",
                "Container[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheDecorator.dirty": {
            "name": "dirty",
            "location": 266,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CacheDecorator.__call__": {
            "name": "__call__",
            "location": 272,
            "return": [
                "tuple",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CachedMethods.f": {
            "name": "f",
            "location": 295,
            "return": [
                "str",
                "bytes",
                "bool",
                "bytearray"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "Sequence[Mapping]"
                ],
                "b": [
                    "int",
                    "Sequence[Mapping]"
                ]
            }
        },
        "CachedMethods.cached_classmethod": {
            "name": "cached_classmethod",
            "location": 302,
            "return": [
                "bytearray",
                "bytes",
                "int",
                "List[dict]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "T",
                    "int"
                ],
                "a": [
                    "list"
                ],
                "b": [
                    "list"
                ]
            }
        },
        "CachedMethods.cached_staticmethod": {
            "name": "cached_staticmethod",
            "location": 309,
            "return": [
                "bytearray",
                "bytes",
                "int",
                "List[dict]",
                "str"
            ],
            "arguments": {
                "a": [
                    "int",
                    "list"
                ],
                "b": [
                    "int",
                    "list"
                ]
            }
        },
        "CachedMethods.double_cached": {
            "name": "double_cached",
            "location": 317,
            "return": [
                "bytearray",
                "bytes",
                "int",
                "List[dict]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "T",
                    "int"
                ],
                "a": [
                    "list"
                ],
                "b": [
                    "list"
                ]
            }
        },
        "CachedMethods.__str__": {
            "name": "__str__",
            "location": 322,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CachedMethods.__repr__": {
            "name": "__repr__",
            "location": 325,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecorators.setup": {
            "name": "setup",
            "location": 330,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecorators.test_cached": {
            "name": "test_cached",
            "location": 334,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecorators.test_unbound_method": {
            "name": "test_unbound_method",
            "location": 355,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecorators.test_decorator_str_and_repr": {
            "name": "test_decorator_str_and_repr",
            "location": 364,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecorators.test_binder_equality": {
            "name": "test_binder_equality",
            "location": 383,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecorators.test_double_caching": {
            "name": "test_double_caching",
            "location": 390,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecorators.test_pickling": {
            "name": "test_pickling",
            "location": 401,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRetry.create_generator_function.any_function": {
            "name": "any_function",
            "location": 79,
            "return": [],
            "arguments": {}
        },
        "TestRetry.create_any_function.any_function": {
            "name": "any_function",
            "location": 90,
            "return": [
                "str",
                "Type"
            ],
            "arguments": {}
        },
        "TestRetry.test_retry_preserves_argspec.fn": {
            "name": "fn",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "foo": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "bar": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "baz": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_decorator_of_context_manager.Context.__init__": {
            "name": "__init__",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "test_decorator_of_context_manager.Context.__enter__": {
            "name": "__enter__",
            "location": 196,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_decorator_of_context_manager.Context.__exit__": {
            "name": "__exit__",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_decorator_of_context_manager.NoDocString.__enter__": {
            "name": "__enter__",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_decorator_of_context_manager.NoDocString.__exit__": {
            "name": "__exit__",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qcore-master/qcore/tests/test_disallow_inheritance.py": {
        "test_disallow_inheritance": {
            "name": "test_disallow_inheritance",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "qcore-master/qcore/tests/test_enum.py": {
        "_assert_equality_both_directions": {
            "name": "_assert_equality_both_directions",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "left": [
                    "dict",
                    "float"
                ],
                "right": [
                    "dict",
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "not_equal": [
                    "dict",
                    "float"
                ]
            }
        },
        "test_gender": {
            "name": "test_gender",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_property": {
            "name": "test_property",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_create": {
            "name": "test_create",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_xyz": {
            "name": "test_xyz",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_instances": {
            "name": "test_instances",
            "location": 216,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_intenum": {
            "name": "test_intenum",
            "location": 309,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_generator": {
            "name": "test_generator",
            "location": 318,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_bad_enum": {
            "name": "test_bad_enum",
            "location": 328,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_long_enum": {
            "name": "test_long_enum",
            "location": 341,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_pickling": {
            "name": "test_pickling",
            "location": 349,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Gender.opposite": {
            "name": "opposite",
            "location": 35,
            "return": [
                "int",
                "str",
                "List[int]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_create.test_exact_gender": {
            "name": "test_exact_gender",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Dict[str, float]",
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "test_bad_enum.declare_bad_enum": {
            "name": "declare_bad_enum",
            "location": 329,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "qcore-master/qcore/tests/test_errors.py": {
        "test_errors": {
            "name": "test_errors",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_errors.f1": {
            "name": "f1",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_errors.raise_later": {
            "name": "raise_later",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "e": [
                    "int"
                ]
            }
        },
        "test_errors.f2": {
            "name": "f2",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "qcore-master/qcore/tests/test_events.py": {
        "handler": {
            "name": "handler",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "expected_count": [],
                "raise_error": []
            }
        },
        "test_events": {
            "name": "test_events",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sinking_event_hook": {
            "name": "test_sinking_event_hook",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_event_interceptor": {
            "name": "test_event_interceptor",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_event_hub": {
            "name": "test_event_hub",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_events_hub_with_source": {
            "name": "test_events_hub_with_source",
            "location": 228,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_global_events": {
            "name": "test_global_events",
            "location": 240,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_enum_based_event_hub": {
            "name": "test_enum_based_event_hub",
            "location": 260,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sinking_event_hook.failing_handler": {
            "name": "failing_handler",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_event_hub.bad_fn": {
            "name": "bad_fn",
            "location": 214,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_events_hub_with_source.handler": {
            "name": "handler",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_global_events.event_handler": {
            "name": "event_handler",
            "location": 248,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_enum_based_event_hub.EventHub2.some_method": {
            "name": "some_method",
            "location": 294,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qcore-master/qcore/tests/test_examples.py": {
        "dump": {
            "name": "dump",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "fail": {
            "name": "fail",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_common": {
            "name": "test_common",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_events": {
            "name": "test_events",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "qcore-master/qcore/tests/test_helpers.py": {
        "test_true_fn": {
            "name": "test_true_fn",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_false_fn": {
            "name": "test_false_fn",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test": {
            "name": "test",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_exception": {
            "name": "test_exception",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_override": {
            "name": "test_override",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_dict_to_object": {
            "name": "test_dict_to_object",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_copy_public_attrs": {
            "name": "test_copy_public_attrs",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cached_hash_wrapper": {
            "name": "test_cached_hash_wrapper",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_stub_serializable_func": {
            "name": "_stub_serializable_func",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_object_from_string": {
            "name": "test_object_from_string",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_catchable_exceptions": {
            "name": "test_catchable_exceptions",
            "location": 223,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ellipsis": {
            "name": "test_ellipsis",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_safe_representation": {
            "name": "test_safe_representation",
            "location": 238,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_marker_object": {
            "name": "test_marker_object",
            "location": 257,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test.nested": {
            "name": "nested",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_copy_public_attrs.f": {
            "name": "f",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_copy_public_attrs.g": {
            "name": "g",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_object_from_string.check": {
            "name": "check",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "Callable",
                    "Optional[str]"
                ],
                "expected": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_override.TestObject.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_safe_representation.TestObject.__str__": {
            "name": "__str__",
            "location": 242,
            "return": [
                "Callable[[Union, Union], Tuple[Any, ...],]",
                "Union[int, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_safe_representation.TestObject.__repr__": {
            "name": "__repr__",
            "location": 245,
            "return": [
                "Callable",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qcore-master/qcore/tests/test_inspectable_class.py": {
        "SimpleObjectWithDictComparison.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OidObject.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "oid": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ObjectWithExcludedAttributes.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "attr1": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Union[str, None]",
                    "List[Tuple[str, str]]",
                    "List[str]"
                ],
                "attr2": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Union[str, None]",
                    "List[Tuple[str, str]]",
                    "List[str]"
                ]
            }
        },
        "ObjectWithSlots.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "oid": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "TestObjectWithDictComparison._check_repr_and_str": {
            "name": "_check_repr_and_str",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "expected": [
                    "str",
                    "dict",
                    "bool",
                    "Dict[str, Any]"
                ],
                "obj": [
                    "str",
                    "dict",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestObjectWithDictComparison.test_compare_objects": {
            "name": "test_compare_objects",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestObjectWithDictComparison.test_compare_to_non_object": {
            "name": "test_compare_to_non_object",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestObjectWithDictComparison.test_repr_and_str": {
            "name": "test_repr_and_str",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestObjectWithDictComparison.test_hash": {
            "name": "test_hash",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestObjectWithDictComparison.test_excluded_attributes": {
            "name": "test_excluded_attributes",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestObjectWithDictComparison.test_slots": {
            "name": "test_slots",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qcore-master/qcore/tests/test_inspection.py": {
        "test_is_cython_class": {
            "name": "test_is_cython_class",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_subclass_tree": {
            "name": "test_get_subclass_tree",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "fun_with_args": {
            "name": "fun_with_args",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "a": [
                    "int",
                    "1",
                    "2",
                    "bytes"
                ],
                "b": [
                    "int",
                    "1",
                    "2",
                    "bytes"
                ],
                "c": [
                    "int",
                    "1",
                    "2",
                    "bytes"
                ],
                "d": [
                    "int",
                    "1",
                    "2",
                    "bytes"
                ]
            }
        },
        "test_getargspec": {
            "name": "test_getargspec",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_is_classmethod": {
            "name": "test_is_classmethod",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_function_call_str": {
            "name": "test_get_function_call_str",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_function_call_repr": {
            "name": "test_get_function_call_repr",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_getargspec_py3_only": {
            "name": "test_getargspec_py3_only",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "X.myclassmethod": {
            "name": "myclassmethod",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "X.myinstancemethod": {
            "name": "myinstancemethod",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OldStyle.myclassmethod": {
            "name": "myclassmethod",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "OldStyle.myinstancemethod": {
            "name": "myinstancemethod",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BoolConversionFails.method": {
            "name": "method",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BoolConversionFails.__nonzero__": {
            "name": "__nonzero__",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_get_function_call_str.test_function": {
            "name": "test_function",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_function_call_repr.dummy_function": {
            "name": "dummy_function",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_function_call_str.TestObject.__str__": {
            "name": "__str__",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_get_function_call_str.TestObject.__repr__": {
            "name": "__repr__",
            "location": 169,
            "return": [
                "bool",
                "List[str]",
                "Union[int, float, complex]",
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qcore-master/qcore/tests/test_microtime.py": {
        "test_utime_delta_combines_dates_hours_minutes_and_seconds": {
            "name": "test_utime_delta_combines_dates_hours_minutes_and_seconds",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_utime_delta_does_not_allow_positional_arguments": {
            "name": "test_utime_delta_does_not_allow_positional_arguments",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_execute_with_timeout": {
            "name": "test_execute_with_timeout",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_time_offset": {
            "name": "test_time_offset",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_execute_with_timeout.run_forever": {
            "name": "run_forever",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_execute_with_timeout.run_quickly": {
            "name": "run_quickly",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "qcore-master/qcore/tests/test_testing.py": {
        "test_Anything": {
            "name": "test_Anything",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_GreaterEq": {
            "name": "test_GreaterEq",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_check_disabled": {
            "name": "_check_disabled",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "fn": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "test_disabled": {
            "name": "test_disabled",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "normal_method": {
            "name": "normal_method",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": [
                    "int",
                    "Callable",
                    "bool"
                ]
            }
        },
        "decorator": {
            "name": "decorator",
            "location": 106,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "method": [
                    "Callable",
                    "Callable[..., Optional[Any]]",
                    "List[str]",
                    "list",
                    "str"
                ]
            }
        },
        "_get_decoratable_class": {
            "name": "_get_decoratable_class",
            "location": 110,
            "return": [
                "str",
                "int",
                "Type[T]"
            ],
            "arguments": {}
        },
        "_assert_is_decorated": {
            "name": "_assert_is_decorated",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "new_cls": [
                    "\"SignedBlindedBalanceProof\"",
                    "T",
                    "str"
                ],
                "cls": [
                    "int",
                    "tuple"
                ]
            }
        },
        "test_decorate_all_test_methods": {
            "name": "test_decorate_all_test_methods",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_decorate_func_or_method_or_class": {
            "name": "test_decorate_func_or_method_or_class",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_disabled.fn": {
            "name": "fn",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_disabled.TestCls.test_method": {
            "name": "test_method",
            "location": 69,
            "return": [
                "int",
                "Tuple[float, float, float, float, float]",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_disabled.TestCls.normal_method": {
            "name": "normal_method",
            "location": 72,
            "return": [
                "int",
                "str",
                "float",
                "Union[int, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_disabled.TestCls2.test_method": {
            "name": "test_method",
            "location": 79,
            "return": [
                "int",
                "Tuple[float, float, float, float, float]",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_disabled.TestCls2.test_method_disabled": {
            "name": "test_method_disabled",
            "location": 83,
            "return": [
                "int",
                "Tuple[float, float, float, float, float]",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_disabled.TestCls2.normal_method": {
            "name": "normal_method",
            "location": 86,
            "return": [
                "int",
                "str",
                "float",
                "Union[int, float]"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
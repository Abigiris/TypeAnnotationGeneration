{
    "qiskit-ibmq-provider-master/setup.py": {},
    "qiskit-ibmq-provider-master/docs/conf.py": {},
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/accountprovider.py": {
        "AccountProvider.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "credentials": [
                    "str",
                    "credentials.Credentials",
                    "bool"
                ],
                "factory": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "AccountProvider._backends": {
            "name": "_backends",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "AccountProvider.backends": {
            "name": "backends",
            "location": 146,
            "return": [
                "typing.List[ibmqbackend.IBMQBackend]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Mapping[str, str]"
                ],
                "filters": [
                    "str",
                    "Mapping[str, str]"
                ]
            }
        },
        "AccountProvider._discover_remote_backends": {
            "name": "_discover_remote_backends",
            "location": 176,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "raiden.utils.Address",
                    "int",
                    "str"
                ]
            }
        },
        "AccountProvider.run_circuits": {
            "name": "run_circuits",
            "location": 216,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "circuits": [
                    "bool",
                    "int",
                    "Tuple[str]",
                    "str"
                ],
                "backend_name": [
                    "bool"
                ],
                "shots": [
                    "bool",
                    "int",
                    "Tuple[str]",
                    "str"
                ],
                "initial_layout": [
                    "bool",
                    "int",
                    "Tuple[str]",
                    "str"
                ],
                "layout_method": [
                    "bool",
                    "int",
                    "Tuple[str]",
                    "str"
                ],
                "routing_method": [
                    "bool",
                    "int",
                    "Tuple[str]",
                    "str"
                ],
                "translation_method": [
                    "bool",
                    "int",
                    "Tuple[str]",
                    "str"
                ],
                "seed_transpiler": [
                    "bool",
                    "int",
                    "Tuple[str]",
                    "str"
                ],
                "optimization_level": [
                    "bool",
                    "int",
                    "Tuple[str]",
                    "str"
                ],
                "init_qubits": [
                    "bool",
                    "int",
                    "Tuple[str]",
                    "str"
                ],
                "rep_delay": [
                    "bool",
                    "int",
                    "Tuple[str]",
                    "str"
                ],
                "transpiler_options": [
                    "bool",
                    "int",
                    "Tuple[str]",
                    "str"
                ],
                "measurement_error_mitigation": [
                    "bool",
                    "List[str]"
                ],
                "use_measure_esp": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[float]"
                ]
            }
        },
        "AccountProvider.service": {
            "name": "service",
            "location": 318,
            "return": [
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Mapping[str, str]",
                    "int"
                ]
            }
        },
        "AccountProvider.services": {
            "name": "services",
            "location": 340,
            "return": [
                "List[str]",
                "str",
                "Set[str]",
                "Optional[List[str]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountProvider.has_service": {
            "name": "has_service",
            "location": 348,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Mapping[str, str]"
                ]
            }
        },
        "AccountProvider.backend": {
            "name": "backend",
            "location": 369,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountProvider.experiment": {
            "name": "experiment",
            "location": 378,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountProvider.runtime": {
            "name": "runtime",
            "location": 394,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountProvider.__eq__": {
            "name": "__eq__",
            "location": 408,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "str",
                    "allennlp.models.model.Model"
                ]
            }
        },
        "AccountProvider.__repr__": {
            "name": "__repr__",
            "location": 416,
            "return": [
                "str",
                "Container[\"Taxon\"]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/apiconstants.py": {},
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/backendjoblimit.py": {
        "BackendJobLimit.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "maximum_jobs": [
                    "bool"
                ],
                "running_jobs": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[float]"
                ]
            }
        },
        "BackendJobLimit.__getattr__": {
            "name": "__getattr__",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Callable"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/backendreservation.py": {
        "BackendReservation.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "backend_name": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[str]"
                ],
                "start_datetime": [
                    "datetime.datetime",
                    "Optional[datetime.datetime]",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[int]",
                    "datetime.date",
                    "int"
                ],
                "end_datetime": [
                    "datetime.datetime",
                    "datetime.date"
                ],
                "creation_datetime": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "mode": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "reservation_id": [
                    "str",
                    "int"
                ],
                "hub_info": [
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "datetime.datetime"
                ]
            }
        },
        "BackendReservation.__repr__": {
            "name": "__repr__",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BackendReservation.__eq__": {
            "name": "__eq__",
            "location": 88,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Set[str]",
                    "Mapping[str, str]",
                    "Callable"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/exceptions.py": {},
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/ibmqbackend.py": {
        "IBMQBackend.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "configuration": [
                    "accountprovider.AccountProvider",
                    "api.clients.AccountClient",
                    "credentials.Credentials",
                    "str",
                    "raiden.utils.MessageID"
                ],
                "provider": [
                    "accountprovider.AccountProvider",
                    "api.clients.AccountClient",
                    "credentials.Credentials",
                    "str",
                    "raiden.utils.MessageID"
                ],
                "credentials": [
                    "int",
                    "Dict[int, List[int]]",
                    "qiskiproviders.ibmq.ibmqfactory.IBMQFactory"
                ],
                "api_client": [
                    "Callable",
                    "Callable[..., neuromation.api.Client]",
                    "antidote.providers.lazy.LazyCallProvider"
                ]
            }
        },
        "IBMQBackend._default_options": {
            "name": "_default_options",
            "location": 136,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "Dict[int, str]",
                    "List[str]",
                    "bytes",
                    "str"
                ]
            }
        },
        "IBMQBackend.run": {
            "name": "run",
            "location": 149,
            "return": [
                "str",
                "Optional[List[str]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "circuits": [
                    "str",
                    "abilian.services.security.models.Role",
                    "Dict[str, str]"
                ],
                "job_name": [
                    "str",
                    "Mapping[Any, str]",
                    "Optional[str]",
                    "bool"
                ],
                "job_share_level": [
                    "bool",
                    "int",
                    "List[str]",
                    "Optional[List[str]]",
                    "Iterable[float]"
                ],
                "job_tags": [
                    "str",
                    "Optional[List[str]]",
                    "Optional[str]"
                ],
                "experiment_id": [
                    "str",
                    "Mapping[Any, str]",
                    "Optional[str]",
                    "bool"
                ],
                "header": [
                    "str",
                    "int",
                    "bool",
                    "Optional[Mapping[str, str]]",
                    "Optional[Union[int, Any]]"
                ],
                "shots": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "memory": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "qubit_lo_freq": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "meas_lo_freq": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "schedule_los": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "meas_level": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "meas_return": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "memory_slots": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "memory_slot_size": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "rep_time": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "rep_delay": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "init_qubits": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "parameter_binds": [
                    "str",
                    "bool",
                    "Optional[List[str]]",
                    "dict"
                ],
                "use_measure_esp": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Callable[[Any], datetime.datetime]"
                ],
                "live_data_enabled": [
                    "str",
                    "Mapping[Any, str]",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "IBMQBackend._get_run_config": {
            "name": "_get_run_config",
            "location": 332,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQBackend._submit_job": {
            "name": "_submit_job",
            "location": 343,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "qobj": [
                    "str",
                    "Dict[str, 'LabwareDefinition']",
                    "int",
                    "Dict[str, str]",
                    "Dict[str, bytes]",
                    "Dict[str, Any]"
                ],
                "job_name": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "job_tags": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "experiment_id": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "live_data_enabled": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "IBMQBackend.properties": {
            "name": "properties",
            "location": 410,
            "return": [
                "datetime.timedelta",
                "int",
                "Union[int, None]",
                "Optional[Callable]",
                "Optional[Hashable]"
            ],
            "arguments": {
                "self": [],
                "refresh": [
                    "bool",
                    "int",
                    "datetime.datetime",
                    "Optional[Callable]",
                    "datetime",
                    "Optional[object]",
                    "Tuple[datetime.datetime, datetime.datetime]"
                ],
                "datetime": [
                    "datetime.datetime",
                    "datetime.date",
                    "Optional[datetime.datetime]",
                    "int",
                    "str"
                ]
            }
        },
        "IBMQBackend.status": {
            "name": "status",
            "location": 461,
            "return": [
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQBackend.defaults": {
            "name": "defaults",
            "location": 484,
            "return": [
                "list",
                "bool",
                "zerver.models.Realm",
                "int"
            ],
            "arguments": {
                "self": [],
                "refresh": [
                    "int",
                    "float",
                    "Optional[bytes]",
                    "bool",
                    "raiden.utils.Any"
                ]
            }
        },
        "IBMQBackend.job_limit": {
            "name": "job_limit",
            "location": 508,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQBackend.remaining_jobs_count": {
            "name": "remaining_jobs_count",
            "location": 552,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQBackend.jobs": {
            "name": "jobs",
            "location": 579,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[dict]"
                ],
                "skip": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[dict]"
                ],
                "status": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[dict]"
                ],
                "job_name": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[dict]"
                ],
                "start_datetime": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[dict]"
                ],
                "end_datetime": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[dict]"
                ],
                "job_tags": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[dict]"
                ],
                "job_tags_operator": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[dict]"
                ],
                "experiment_id": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[dict]"
                ],
                "descending": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[dict]"
                ],
                "db_filter": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[dict]"
                ]
            }
        },
        "IBMQBackend.active_jobs": {
            "name": "active_jobs",
            "location": 654,
            "return": [
                "int",
                "dict",
                "bool",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "int",
                    "raiden.utils.Port",
                    "Callable"
                ]
            }
        },
        "IBMQBackend.retrieve_job": {
            "name": "retrieve_job",
            "location": 675,
            "return": [
                "str",
                "zam_repondeur.models.Lecture",
                "deque",
                "services.email.transfer.models.Message",
                "int",
                "list"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "int"
                ]
            }
        },
        "IBMQBackend.reservations": {
            "name": "reservations",
            "location": 701,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "start_datetime": [
                    "Optional[str]",
                    "int",
                    "datetime.datetime",
                    "bool",
                    "Optional[datetime.datetime]"
                ],
                "end_datetime": [
                    "Optional[str]",
                    "datetime.datetime",
                    "int",
                    "bool"
                ]
            }
        },
        "IBMQBackend.configuration": {
            "name": "configuration",
            "location": 727,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQBackend.__repr__": {
            "name": "__repr__",
            "location": 742,
            "return": [
                "str",
                "topicdb.core.models.language.Language",
                "Set[mtg_ssm.scryfall.models.ScrySetType]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQBackend._deprecate_id_instruction": {
            "name": "_deprecate_id_instruction",
            "location": 750,
            "return": [
                "app.models.Article"
            ],
            "arguments": {
                "self": [],
                "circuits": [
                    "server.models.bike.Bike"
                ]
            }
        },
        "IBMQSimulator._default_options": {
            "name": "_default_options",
            "location": 841,
            "return": [
                "bool",
                "Optional[Any]",
                "Union[int, float, complex]",
                "list"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "Dict[int, str]",
                    "List[str]",
                    "bytes",
                    "str"
                ]
            }
        },
        "IBMQSimulator.properties": {
            "name": "properties",
            "location": 847,
            "return": [
                "Optional[str]",
                "str",
                "list",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "refresh": [
                    "Optional[datetime.datetime]",
                    "bool",
                    "str"
                ],
                "datetime": [
                    "Optional[datetime.datetime]",
                    "bool",
                    "str"
                ]
            }
        },
        "IBMQSimulator.run": {
            "name": "run",
            "location": 856,
            "return": [
                "Type[BaseException]",
                "Optional[Type[Exception]]",
                "Optional[Exception]",
                "Optional[Type[BaseException]]",
                "Optional[BaseException]",
                "BaseException"
            ],
            "arguments": {
                "self": [],
                "circuits": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "job_name": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "job_share_level": [
                    "bool",
                    "int",
                    "List[str]",
                    "Optional[List[str]]",
                    "Iterable[float]"
                ],
                "job_tags": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "experiment_id": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "backend_options": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[int]"
                ],
                "noise_model": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Tuple[Optional[str], Any]",
                    "Union[str, dict]"
                ]
            }
        },
        "IBMQRetiredBackend.__init__": {
            "name": "__init__",
            "location": 921,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "configuration": [
                    "int",
                    "str"
                ],
                "provider": [
                    "accountprovider.AccountProvider",
                    "api.clients.AccountClient",
                    "credentials.Credentials",
                    "str",
                    "raiden.utils.MessageID"
                ],
                "credentials": [
                    "accountprovider.AccountProvider",
                    "api.clients.AccountClient",
                    "credentials.Credentials",
                    "str",
                    "raiden.utils.MessageID"
                ],
                "api_client": [
                    "accountprovider.AccountProvider",
                    "api.clients.AccountClient",
                    "credentials.Credentials",
                    "str",
                    "raiden.utils.MessageID"
                ]
            }
        },
        "IBMQRetiredBackend._default_options": {
            "name": "_default_options",
            "location": 945,
            "return": [
                "bool",
                "Optional[Any]",
                "Union[int, float, complex]",
                "list"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "Dict[int, str]",
                    "List[str]",
                    "bytes",
                    "str"
                ]
            }
        },
        "IBMQRetiredBackend.properties": {
            "name": "properties",
            "location": 949,
            "return": [
                "Optional[str]",
                "str",
                "list",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "refresh": [
                    "Optional[datetime.datetime]",
                    "bool",
                    "str"
                ],
                "datetime": [
                    "Optional[datetime.datetime]",
                    "bool",
                    "str"
                ]
            }
        },
        "IBMQRetiredBackend.defaults": {
            "name": "defaults",
            "location": 957,
            "return": [
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "refresh": [
                    "str",
                    "bool",
                    "Any",
                    "Optional[str]"
                ]
            }
        },
        "IBMQRetiredBackend.status": {
            "name": "status",
            "location": 961,
            "return": [
                "str",
                "int",
                "datetime.timedelta",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQRetiredBackend.job_limit": {
            "name": "job_limit",
            "location": 965,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQRetiredBackend.remaining_jobs_count": {
            "name": "remaining_jobs_count",
            "location": 969,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQRetiredBackend.active_jobs": {
            "name": "active_jobs",
            "location": 973,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "IBMQRetiredBackend.reservations": {
            "name": "reservations",
            "location": 977,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "start_datetime": [
                    "Optional[datetime.datetime]",
                    "int",
                    "List[str]",
                    "bool",
                    "list"
                ],
                "end_datetime": [
                    "Optional[datetime.datetime]",
                    "int",
                    "List[str]",
                    "bool",
                    "list"
                ]
            }
        },
        "IBMQRetiredBackend.run": {
            "name": "run",
            "location": 984,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQRetiredBackend.from_name": {
            "name": "from_name",
            "location": 994,
            "return": [
                "str",
                "int",
                "Iterable[Sequence[str]]",
                "db.models.Taxon"
            ],
            "arguments": {
                "cls": [
                    "accountprovider.AccountProvider",
                    "credentials.Credentials",
                    "api.clients.AccountClient",
                    "bool",
                    "int",
                    "Union[str, bytes]"
                ],
                "backend_name": [
                    "str"
                ],
                "provider": [
                    "accountprovider.AccountProvider",
                    "credentials.Credentials",
                    "api.clients.AccountClient",
                    "bool",
                    "int",
                    "Union[str, bytes]"
                ],
                "credentials": [
                    "accountprovider.AccountProvider",
                    "credentials.Credentials",
                    "api.clients.AccountClient",
                    "bool",
                    "int",
                    "Union[str, bytes]"
                ],
                "api": [
                    "accountprovider.AccountProvider",
                    "credentials.Credentials",
                    "api.clients.AccountClient",
                    "bool",
                    "int",
                    "Union[str, bytes]"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/ibmqbackendservice.py": {
        "_issue_warning": {
            "name": "_issue_warning",
            "location": 702,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "IBMQBackendService.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "IBMQBackendService._discover_backends": {
            "name": "_discover_backends",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQBackendService.backends": {
            "name": "backends",
            "location": 86,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "bool"
                ],
                "filters": [
                    "List[str]",
                    "bool",
                    "str",
                    "Optional[List[int]]",
                    "Optional[List[Any]]",
                    "Optional[int]"
                ],
                "timeout": [
                    "bool",
                    "int",
                    "str"
                ],
                "min_num_qubits": [
                    "Optional[str]",
                    "bytes",
                    "str",
                    "List[Tuple[int, int]]",
                    "List[str]",
                    "bool",
                    "Optional[float]"
                ],
                "input_allowed": [
                    "List[str]",
                    "Optional[str]",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[Sequence[str]]"
                ]
            }
        },
        "IBMQBackendService.jobs": {
            "name": "jobs",
            "location": 148,
            "return": [
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "str",
                    "Optional[str]",
                    "Dict[str, int]"
                ],
                "skip": [
                    "str",
                    "datetime.datetime",
                    "Union[str, int, float]"
                ],
                "backend_name": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[Union[Any, Any]]",
                    "List[str]",
                    "dict",
                    "Optional[str]",
                    "bytes"
                ],
                "status": [
                    "Optional[str]",
                    "Dict[str, str]",
                    "str",
                    "Optional[Sequence[str]]",
                    "Optional[Dict]",
                    "List[List]",
                    "List[str]"
                ],
                "job_name": [
                    "Optional[str]",
                    "str",
                    "Optional[datetime.datetime]"
                ],
                "start_datetime": [
                    "datetime.datetime",
                    "Optional[List[str]]",
                    "int",
                    "datetime.timedelta",
                    "Union[None, int, str]"
                ],
                "end_datetime": [
                    "datetime.datetime",
                    "Optional[List[str]]",
                    "int",
                    "datetime.timedelta",
                    "Union[None, int, str]"
                ],
                "job_tags": [
                    "Optional[List[str]]",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "job_tags_operator": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "experiment_id": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[int]"
                ],
                "descending": [
                    "str",
                    "datetime.datetime",
                    "Union[str, int, float]"
                ],
                "db_filter": [
                    "Union[str, List[str]]",
                    "str"
                ]
            }
        },
        "IBMQBackendService.job_ids": {
            "name": "job_ids",
            "location": 339,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "str",
                    "list",
                    "int",
                    "bool",
                    "List[str]"
                ],
                "skip": [
                    "str",
                    "list",
                    "int",
                    "bool",
                    "List[str]"
                ],
                "backend_name": [
                    "str",
                    "Optional[List[str]]",
                    "int",
                    "Optional[str]"
                ],
                "status": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[Sequence[str]]",
                    "Optional[Dict]",
                    "List[List]",
                    "List[str]"
                ],
                "job_name": [
                    "Optional[str]",
                    "str",
                    "Optional[datetime.datetime]"
                ],
                "start_datetime": [
                    "Optional[List[str]]",
                    "int",
                    "datetime.timedelta",
                    "datetime.datetime"
                ],
                "end_datetime": [
                    "Optional[List[str]]",
                    "int",
                    "datetime.timedelta",
                    "datetime.datetime"
                ],
                "job_tags": [
                    "Optional[List[str]]",
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "Optional[str]"
                ],
                "job_tags_operator": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "descending": [
                    "str",
                    "list",
                    "int",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "IBMQBackendService._get_job_ids": {
            "name": "_get_job_ids",
            "location": 435,
            "return": [
                "Dict[str, Any]",
                "int",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "api_filter": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "limit": [
                    "vimiv.api.modes.Mode",
                    "str",
                    "bool",
                    "Optional[List[str]]"
                ],
                "skip": [
                    "str",
                    "Union[str, int]",
                    "Optional[str]"
                ],
                "descending": [
                    "str",
                    "Union[str, int]",
                    "Optional[str]"
                ]
            }
        },
        "IBMQBackendService._merge_logical_filters": {
            "name": "_merge_logical_filters",
            "location": 507,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cur_filter": [
                    "dict",
                    "Dict[str, Any]",
                    "Type",
                    "Mapping"
                ],
                "new_filter": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "IBMQBackendService._update_creation_date_filter": {
            "name": "_update_creation_date_filter",
            "location": 525,
            "return": [
                "bool",
                "Optional[str]",
                "Type",
                "dict"
            ],
            "arguments": {
                "self": [],
                "cur_dt_filter": [
                    "Union[str, Iterable[str]]",
                    "raiden.utils.BlockNumber",
                    "List[str]",
                    "Optional[Any]",
                    "str"
                ],
                "gte_dt": [
                    "raiden.utils.MessageID",
                    "list",
                    "int",
                    "raiden.utils.BlockNumber",
                    "raiden.utils.List[raiden.transfer.state.RouteState]"
                ],
                "lte_dt": [
                    "raiden.utils.MessageID",
                    "list",
                    "int",
                    "raiden.utils.BlockNumber",
                    "raiden.utils.List[raiden.transfer.state.RouteState]"
                ]
            }
        },
        "IBMQBackendService._get_status_db_filter": {
            "name": "_get_status_db_filter",
            "location": 564,
            "return": [
                "int",
                "cmk.utils.type_defs.UserId",
                "List[str]",
                "Exception",
                "dict",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "status_arg": [
                    "str",
                    "int"
                ]
            }
        },
        "IBMQBackendService._get_status_filter": {
            "name": "_get_status_filter",
            "location": 589,
            "return": [
                "int",
                "cmk.utils.type_defs.UserId",
                "str"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        },
        "IBMQBackendService.retrieve_job": {
            "name": "retrieve_job",
            "location": 634,
            "return": [
                "str",
                "deque",
                "int",
                "list"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "int"
                ]
            }
        },
        "IBMQBackendService.my_reservations": {
            "name": "my_reservations",
            "location": 673,
            "return": [
                "str",
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "int",
                "Optional[Any]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQBackendService._deprecated_backend_names": {
            "name": "_deprecated_backend_names",
            "location": 683,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "Container[str]"
            ],
            "arguments": {}
        },
        "IBMQBackendService._aliased_backend_names": {
            "name": "_aliased_backend_names",
            "location": 692,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "Container[str]"
            ],
            "arguments": {}
        },
        "_issue_warning._wrapper": {
            "name": "_wrapper",
            "location": 704,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [
                    "Iterable[str]",
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "IBMQDeprecatedBackendService.__init__": {
            "name": "__init__",
            "location": 718,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "backend_service": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "IBMQDeprecatedBackendService.jobs": {
            "name": "jobs",
            "location": 723,
            "return": [
                "List[str]",
                "logging.LogRecord",
                "int",
                "List[List[str]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQDeprecatedBackendService.retrieve_job": {
            "name": "retrieve_job",
            "location": 727,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQDeprecatedBackendService.my_reservations": {
            "name": "my_reservations",
            "location": 731,
            "return": [
                "float",
                "trezor.utils.Writer",
                "utils.Node",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQDeprecatedBackendService.__getattribute__": {
            "name": "__getattribute__",
            "location": 734,
            "return": [
                "int",
                "Optional[int]",
                "Tuple[Tuple[int, Any]]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "str",
                    "T",
                    "utils.mssql_counters.Section"
                ]
            }
        },
        "IBMQDeprecatedBackendService.__call__": {
            "name": "__call__",
            "location": 748,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/ibmqfactory.py": {
        "IBMQFactory.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQFactory.enable_account": {
            "name": "enable_account",
            "location": 52,
            "return": [
                "Optional[bool]",
                "Optional[dict]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str"
                ],
                "url": [
                    "str"
                ],
                "hub": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "List[str]",
                    "Tuple[str]"
                ],
                "group": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "List[str]",
                    "Tuple[str]"
                ],
                "project": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "List[str]",
                    "Tuple[str]"
                ]
            }
        },
        "IBMQFactory.disable_account": {
            "name": "disable_account",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQFactory.load_account": {
            "name": "load_account",
            "location": 138,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "bool",
                "List[str]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQFactory.save_account": {
            "name": "save_account",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "token": [
                    "str",
                    "type"
                ],
                "url": [
                    "str",
                    "Optional[str]"
                ],
                "hub": [
                    "Optional[str]",
                    "str"
                ],
                "group": [
                    "Optional[str]",
                    "str"
                ],
                "project": [
                    "Optional[str]",
                    "str"
                ],
                "overwrite": [
                    "bool",
                    "dict"
                ]
            }
        },
        "IBMQFactory.delete_account": {
            "name": "delete_account",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "IBMQFactory.stored_account": {
            "name": "stored_account",
            "location": 308,
            "return": [],
            "arguments": {}
        },
        "IBMQFactory.active_account": {
            "name": "active_account",
            "location": 339,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQFactory.update_account": {
            "name": "update_account",
            "location": 356,
            "return": [
                "int",
                "str",
                "Optional[int]",
                "float"
            ],
            "arguments": {
                "force": [
                    "bool",
                    "float",
                    "str",
                    "List[str]",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "IBMQFactory.providers": {
            "name": "providers",
            "location": 370,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "hub": [
                    "Optional[str]",
                    "List[str]",
                    "str",
                    "Container",
                    "Callable[[], T]"
                ],
                "group": [
                    "Optional[str]",
                    "bytes",
                    "List[List[Any]]",
                    "Callable",
                    "int",
                    "dict",
                    "List[Tuple[bool, str]]"
                ],
                "project": [
                    "Optional[str]",
                    "List[str]",
                    "dict",
                    "str",
                    "Type",
                    "Iterable"
                ]
            }
        },
        "IBMQFactory.get_provider": {
            "name": "get_provider",
            "location": 400,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "hub": [
                    "str",
                    "bool",
                    "Dict[str, int]"
                ],
                "group": [
                    "str",
                    "bool",
                    "Dict[str, int]"
                ],
                "project": [
                    "str",
                    "bool",
                    "Dict[str, int]"
                ]
            }
        },
        "IBMQFactory._check_api_version": {
            "name": "_check_api_version",
            "location": 436,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "List[str]",
                "Callable[[], bool]"
            ],
            "arguments": {
                "credentials": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "IBMQFactory._initialize_providers": {
            "name": "_initialize_providers",
            "location": 446,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "credentials": [
                    "str"
                ],
                "preferences": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/runner_result.py": {
        "RunnerResult.decode": {
            "name": "decode",
            "location": 29,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "tuple",
                    "dict",
                    "Optional[Dict]"
                ],
                "data": [
                    "str",
                    "tuple",
                    "dict",
                    "Optional[Dict]"
                ]
            }
        },
        "RunnerResult.get_quasiprobabilities": {
            "name": "get_quasiprobabilities",
            "location": 33,
            "return": [
                "Dict[str, str]",
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "experiment": [
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/version.py": {
        "_minimal_ext_cmd": {
            "name": "_minimal_ext_cmd",
            "location": 27,
            "return": [
                "str",
                "Set[str]",
                "Sequence[str]",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "cmd": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "git_version": {
            "name": "git_version",
            "location": 47,
            "return": [
                "int",
                "list",
                "bytes",
                "List[str]"
            ],
            "arguments": {}
        },
        "get_version_info": {
            "name": "get_version_info",
            "location": 63,
            "return": [
                "bool",
                "Optional[float]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/__init__.py": {
        "least_busy": {
            "name": "least_busy",
            "location": 116,
            "return": [
                "raiden.utils.signer.Signer",
                "bytes",
                "int"
            ],
            "arguments": {
                "backends": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "reservation_lookahead": [
                    "int",
                    "str",
                    "Iterable[T]"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/api/exceptions.py": {
        "RequestsApiError.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bool",
                    "dict",
                    "Sequence",
                    "Dict[str, Any]"
                ],
                "status_code": [
                    "int",
                    "Optional[int]"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/api/session.py": {
        "_get_client_header": {
            "name": "_get_client_header",
            "location": 49,
            "return": [
                "dict",
                "collector_utilities.type.Response",
                "purplship.core.utils.Element",
                "requests.Response"
            ],
            "arguments": {}
        },
        "PostForcelistRetry.increment": {
            "name": "increment",
            "location": 79,
            "return": [
                "Iterable[str]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Optional[dict]",
                    "requests.models.Response",
                    "Dict[str, str]",
                    "collector_utilities.type.Response"
                ],
                "url": [
                    "str",
                    "Optional[dict]",
                    "requests.models.Response",
                    "Dict[str, str]",
                    "collector_utilities.type.Response"
                ],
                "response": [
                    "str",
                    "dict",
                    "Optional[dict]",
                    "requests.PreparedRequest",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "bool"
                ],
                "error": [
                    "str",
                    "Optional[dict]",
                    "requests.models.Response",
                    "Dict[str, str]",
                    "collector_utilities.type.Response"
                ],
                "_pool": [
                    "Optional[dict]",
                    "str",
                    "dict"
                ],
                "_stacktrace": [
                    "Optional[dict]",
                    "str",
                    "dict"
                ]
            }
        },
        "PostForcelistRetry.is_retry": {
            "name": "is_retry",
            "location": 100,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "int",
                    "str"
                ],
                "status_code": [
                    "int",
                    "str"
                ],
                "has_retry_after": [
                    "bool",
                    "str",
                    "Sequence[str]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "RetrySession.__init__": {
            "name": "__init__",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_url": [
                    "str"
                ],
                "access_token": [
                    "str",
                    "Callable",
                    "float",
                    "int"
                ],
                "retries_total": [
                    "str",
                    "Callable",
                    "float",
                    "int"
                ],
                "retries_connect": [
                    "str",
                    "Callable",
                    "float",
                    "int"
                ],
                "backoff_factor": [
                    "str",
                    "Callable",
                    "float",
                    "int"
                ],
                "verify": [
                    "str",
                    "dict"
                ],
                "proxies": [
                    "str",
                    "dict"
                ],
                "auth": [
                    "str",
                    "dict"
                ],
                "timeout": [
                    "str",
                    "Callable",
                    "float",
                    "int"
                ]
            }
        },
        "RetrySession.__del__": {
            "name": "__del__",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RetrySession.access_token": {
            "name": "access_token",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "cmk.utils.type_defs.Seconds",
                    "bytes",
                    "Tuple[str, str, str]"
                ]
            }
        },
        "RetrySession._initialize_retry": {
            "name": "_initialize_retry",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "retries_total": [],
                "retries_connect": [],
                "backoff_factor": []
            }
        },
        "RetrySession._initialize_session_parameters": {
            "name": "_initialize_session_parameters",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verify": [
                    "int",
                    "bool",
                    "Sequence[str]",
                    "List[Dict]",
                    "str"
                ],
                "proxies": [
                    "int",
                    "bool",
                    "Sequence[str]",
                    "List[Dict]",
                    "str"
                ],
                "auth": [
                    "int",
                    "bool",
                    "Sequence[str]",
                    "List[Dict]",
                    "str"
                ]
            }
        },
        "RetrySession.request": {
            "name": "request",
            "location": 233,
            "return": [
                "dict",
                "Optional[str]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "int",
                    "Optional[bytes]",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ],
                "url": [
                    "str"
                ],
                "bare": [
                    "str",
                    "int"
                ]
            }
        },
        "RetrySession._modify_chained_exception_messages": {
            "name": "_modify_chained_exception_messages",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "denite.util.UserContext",
                    "Callable",
                    "Sequence[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "RetrySession._log_request_info": {
            "name": "_log_request_info",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "dict",
                    "Callable[[Any], None]",
                    "Mapping",
                    "bool"
                ],
                "method": [
                    "str",
                    "logging.Logger",
                    "Dict[str, Any]",
                    "list",
                    "Optional[dict]",
                    "dict",
                    "MutableMapping[str, Any]",
                    "Dict[str, Dict[str, Any]]",
                    "bytes"
                ],
                "request_data": [
                    "dict",
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "RetrySession._is_worth_logging": {
            "name": "_is_worth_logging",
            "location": 366,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "endpoint_url": [
                    "str",
                    "bool"
                ]
            }
        },
        "RetrySession.__getstate__": {
            "name": "__getstate__",
            "location": 392,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "int",
                "allennlp.common.util.JsonDict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/api/__init__.py": {},
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/api/clients/account.py": {
        "AccountClient.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "credentials": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "AccountClient.list_backends": {
            "name": "list_backends",
            "location": 63,
            "return": [
                "dict",
                "bool",
                "int",
                "Tuple[List[int], List[int], List[int]]",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "bool",
                    "Tuple[int, int]",
                    "int",
                    "str"
                ]
            }
        },
        "AccountClient.backend_status": {
            "name": "backend_status",
            "location": 74,
            "return": [
                "int",
                "cmk.utils.type_defs.UserId",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "backend_name": [
                    "str"
                ]
            }
        },
        "AccountClient.backend_properties": {
            "name": "backend_properties",
            "location": 85,
            "return": [
                "str",
                "Tuple[str, int]"
            ],
            "arguments": {
                "self": [],
                "backend_name": [
                    "str",
                    "datetime.date"
                ],
                "datetime": [
                    "str",
                    "datetime.date"
                ]
            }
        },
        "AccountClient.backend_pulse_defaults": {
            "name": "backend_pulse_defaults",
            "location": 102,
            "return": [
                "Dict[str, Any]",
                "dict",
                "cmk.utils.type_defs.UserId",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "backend_name": [
                    "str"
                ]
            }
        },
        "AccountClient.backend_job_limit": {
            "name": "backend_job_limit",
            "location": 113,
            "return": [
                "str",
                "Union[int, float]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "backend_name": [
                    "str"
                ]
            }
        },
        "AccountClient.backend_reservations": {
            "name": "backend_reservations",
            "location": 124,
            "return": [
                "str",
                "Dict[str, int]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "backend_name": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "start_datetime": [
                    "Optional[datetime.datetime]",
                    "int",
                    "float",
                    "datetime.datetime",
                    "Optional[float]"
                ],
                "end_datetime": [
                    "Optional[datetime.datetime]",
                    "int",
                    "float",
                    "datetime.datetime",
                    "Optional[float]"
                ]
            }
        },
        "AccountClient.my_reservations": {
            "name": "my_reservations",
            "location": 143,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountClient.list_jobs_statuses": {
            "name": "list_jobs_statuses",
            "location": 153,
            "return": [
                "str",
                "dict",
                "int",
                "Dict[str, Any]",
                "Callable[[], Any]"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "Dict[str, Any]",
                    "List['ValidatorRecord']",
                    "str",
                    "int"
                ],
                "skip": [
                    "Dict[str, Any]",
                    "List['ValidatorRecord']",
                    "str",
                    "int"
                ],
                "descending": [
                    "Dict[str, Any]",
                    "List['ValidatorRecord']",
                    "str",
                    "int"
                ],
                "extra_filter": [
                    "Dict[str, Any]",
                    "List['ValidatorRecord']",
                    "str",
                    "int"
                ]
            }
        },
        "AccountClient.list_jobs_ids": {
            "name": "list_jobs_ids",
            "location": 177,
            "return": [
                "dict",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "bool",
                    "str",
                    "List[str]",
                    "bytes",
                    "raiden.utils.Address"
                ],
                "skip": [
                    "bool",
                    "str",
                    "List[str]",
                    "bytes",
                    "raiden.utils.Address"
                ],
                "descending": [
                    "bool",
                    "str",
                    "List[str]",
                    "bytes",
                    "raiden.utils.Address"
                ],
                "extra_filter": [
                    "bool",
                    "str",
                    "List[str]",
                    "bytes",
                    "raiden.utils.Address"
                ]
            }
        },
        "AccountClient.job_submit": {
            "name": "job_submit",
            "location": 199,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "backend_name": [
                    "str",
                    "List[str]",
                    "int",
                    "dict",
                    "Optional[Sequence[Any]]",
                    "bool"
                ],
                "qobj_dict": [
                    "str",
                    "Optional[qiskiproviders.ibmq.utils.utils.RefreshQueue]",
                    "Optional[float]",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "job_name": [
                    "str",
                    "List[str]",
                    "int",
                    "dict",
                    "Optional[Sequence[Any]]",
                    "bool"
                ],
                "job_tags": [
                    "str",
                    "List[str]",
                    "int",
                    "dict",
                    "Optional[Sequence[Any]]",
                    "bool"
                ],
                "experiment_id": [
                    "str",
                    "List[str]",
                    "int",
                    "dict",
                    "Optional[Sequence[Any]]",
                    "bool"
                ],
                "live_data_enabled": [
                    "str",
                    "List[str]",
                    "int",
                    "dict",
                    "Optional[Sequence[Any]]",
                    "bool"
                ]
            }
        },
        "AccountClient.job_download_qobj": {
            "name": "job_download_qobj",
            "location": 252,
            "return": [
                "bytearray",
                "str"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "Optional[bool]",
                    "Optional[str]",
                    "bool"
                ],
                "use_object_storage": [
                    "bool",
                    "Callable[[], None]",
                    "str",
                    "dict"
                ]
            }
        },
        "AccountClient._job_download_qobj_object_storage": {
            "name": "_job_download_qobj_object_storage",
            "location": 267,
            "return": [
                "str",
                "bool",
                "int",
                "recidiviz.utils.regions.Region"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str"
                ]
            }
        },
        "AccountClient.job_result": {
            "name": "job_result",
            "location": 284,
            "return": [
                "str",
                "Callable",
                "dict",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "Optional[int]",
                    "backend.src.google_apis.drive_api.ResourceID",
                    "int"
                ],
                "use_object_storage": [
                    "bool",
                    "str",
                    "Callable[[], None]",
                    "dict"
                ]
            }
        },
        "AccountClient._job_result_object_storage": {
            "name": "_job_result_object_storage",
            "location": 306,
            "return": [
                "str",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str"
                ]
            }
        },
        "AccountClient.job_get": {
            "name": "job_get",
            "location": 331,
            "return": [
                "str",
                "int",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str"
                ]
            }
        },
        "AccountClient.job_status": {
            "name": "job_status",
            "location": 345,
            "return": [
                "bool",
                "Dict[str, Any]",
                "dict",
                "Dict[str, str]",
                "cmk.base.events.EventContext"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "int"
                ]
            }
        },
        "AccountClient.job_final_status": {
            "name": "job_final_status",
            "location": 359,
            "return": [
                "bytes",
                "dict",
                "int",
                "cmk.base.events.EventContext",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "int",
                    "str",
                    "Optional[qiskiproviders.ibmq.utils.utils.RefreshQueue]",
                    "Optional[float]"
                ],
                "timeout": [
                    "int",
                    "Optional[int]",
                    "Dict[int, int]",
                    "datetime.datetime",
                    "dict"
                ],
                "wait": [
                    "int",
                    "str",
                    "Optional[qiskiproviders.ibmq.utils.utils.RefreshQueue]",
                    "Optional[float]"
                ],
                "status_queue": [
                    "int",
                    "str",
                    "Optional[qiskiproviders.ibmq.utils.utils.RefreshQueue]",
                    "Optional[float]"
                ]
            }
        },
        "AccountClient._job_final_status_websocket": {
            "name": "_job_final_status_websocket",
            "location": 406,
            "return": [
                "Dict[str, Any]",
                "cmk.utils.type_defs.UserId",
                "werkzeug.exceptions.HTTPException",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str"
                ],
                "timeout": [
                    "int"
                ],
                "status_queue": [
                    "str"
                ]
            }
        },
        "AccountClient._job_final_status_polling": {
            "name": "_job_final_status_polling",
            "location": 444,
            "return": [
                "bytes",
                "dict",
                "int",
                "cmk.base.events.EventContext",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "int",
                    "str",
                    "Set[int]"
                ],
                "timeout": [
                    "Optional[float]",
                    "base.vertex_constructor_param_types",
                    "Optional[int]",
                    "int",
                    "Optional[str]",
                    "Optional[datetime.datetime]"
                ],
                "wait": [
                    "float",
                    "int",
                    "str",
                    "List[int]"
                ],
                "status_queue": [
                    "Optional[qiskiproviders.ibmq.utils.utils.RefreshQueue]",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[bool]",
                    "str"
                ]
            }
        },
        "AccountClient.job_properties": {
            "name": "job_properties",
            "location": 484,
            "return": [
                "Dict[str, Any]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "int",
                    "str"
                ]
            }
        },
        "AccountClient.job_cancel": {
            "name": "job_cancel",
            "location": 495,
            "return": [
                "str",
                "Union[str, Dict]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "int",
                    "str"
                ]
            }
        },
        "AccountClient.job_update_attribute": {
            "name": "job_update_attribute",
            "location": 506,
            "return": [
                "int",
                "cmk.utils.type_defs.UserId",
                "Dict[str, Any]",
                "Exception",
                "str"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "attr_name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "attr_value": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "AccountClient.job_delete": {
            "name": "job_delete",
            "location": 529,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "int",
                    "str",
                    "Union[int,str]",
                    "Optional[str]"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/api/clients/auth.py": {
        "AuthClient.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_token": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "List[str]",
                    "float",
                    "Dict[str, Any]"
                ],
                "auth_url": [
                    "str",
                    "List[dict]",
                    "int",
                    "bool"
                ]
            }
        },
        "AuthClient._init_service_clients": {
            "name": "_init_service_clients",
            "location": 43,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthClient._request_access_token": {
            "name": "_request_access_token",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthClient.user_urls": {
            "name": "user_urls",
            "location": 97,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthClient.user_hubs": {
            "name": "user_hubs",
            "location": 111,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthClient.api_version": {
            "name": "api_version",
            "location": 142,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthClient.current_access_token": {
            "name": "current_access_token",
            "location": 150,
            "return": [
                "bool",
                "bytearray",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthClient.current_service_urls": {
            "name": "current_service_urls",
            "location": 158,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/api/clients/base.py": {
        "BaseWebsocketClient.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "websocket_url": [
                    "str"
                ],
                "credentials": [
                    "str",
                    "Union[Literal, str]",
                    "int",
                    "frozenset[bytes]"
                ],
                "job_id": [
                    "str",
                    "int",
                    "Optional[List[int]]"
                ],
                "message_queue": [
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "int",
                    "dict"
                ]
            }
        },
        "BaseWebsocketClient.on_open": {
            "name": "on_open",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wsa": [
                    "bool",
                    "List[Dict[str, str]]",
                    "dict"
                ]
            }
        },
        "BaseWebsocketClient.on_message": {
            "name": "on_message",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wsa": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "message": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BaseWebsocketClient._handle_message": {
            "name": "_handle_message",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "BaseWebsocketClient.on_close": {
            "name": "on_close",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wsa": [
                    "str",
                    "Union[str, Sequence[str]]",
                    "int",
                    "float",
                    "bool"
                ],
                "status_code": [
                    "int"
                ],
                "msg": [
                    "int",
                    "str",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "BaseWebsocketClient.on_error": {
            "name": "on_error",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wsa": [
                    "bool"
                ],
                "error": [
                    "str",
                    "int",
                    "bool",
                    "Iterable[Any]"
                ]
            }
        },
        "BaseWebsocketClient.stream": {
            "name": "stream",
            "location": 143,
            "return": [
                "str",
                "Dict[str, Any]",
                "list"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "dict"
                ],
                "retries": [
                    "str"
                ],
                "backoff_factor": [
                    "int",
                    "str",
                    "float",
                    "bytes"
                ]
            }
        },
        "BaseWebsocketClient._handle_stream_iteration": {
            "name": "_handle_stream_iteration",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseWebsocketClient._backoff_time": {
            "name": "_backoff_time",
            "location": 233,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "backoff_factor": [
                    "int",
                    "Tuple[float, float]",
                    "float",
                    "dict",
                    "bool",
                    "list"
                ],
                "current_retry_attempt": [
                    "int",
                    "Tuple[float, float]",
                    "float",
                    "dict",
                    "bool",
                    "list"
                ]
            }
        },
        "BaseWebsocketClient.disconnect": {
            "name": "disconnect",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "close_code": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "BaseWebsocketClient._format_exception": {
            "name": "_format_exception",
            "location": 265,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "str",
                    "werkzeug.exceptions.Forbidden",
                    "Optional[list]",
                    "Exception",
                    "bool",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "BaseWebsocketClient._reset_state": {
            "name": "_reset_state",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/api/clients/experiment.py": {
        "ExperimentClient.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "credentials": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "ExperimentClient.experiments": {
            "name": "experiments",
            "location": 43,
            "return": [
                "bool",
                "str",
                "dict",
                "cmk.base.events.EventContext"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "Optional[str]"
                ],
                "marker": [
                    "Optional[str]"
                ],
                "backend_name": [
                    "Optional[str]"
                ],
                "experiment_type": [
                    "Optional[str]"
                ],
                "start_time": [
                    "Optional[str]"
                ],
                "device_components": [
                    "Optional[str]"
                ],
                "tags": [
                    "Optional[str]"
                ],
                "hub": [
                    "Optional[str]"
                ],
                "group": [
                    "Optional[str]"
                ],
                "project": [
                    "Optional[str]"
                ],
                "exclude_public": [
                    "Optional[str]"
                ],
                "public_only": [
                    "Optional[str]"
                ],
                "exclude_mine": [
                    "Optional[str]"
                ],
                "mine_only": [
                    "Optional[str]"
                ],
                "parent_id": [
                    "Optional[str]"
                ],
                "sort_by": [
                    "Optional[str]"
                ]
            }
        },
        "ExperimentClient.experiment_get": {
            "name": "experiment_get",
            "location": 100,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "experiment_id": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "ExperimentClient.experiment_upload": {
            "name": "experiment_upload",
            "location": 111,
            "return": [
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "float",
                    "List[str]",
                    "str",
                    "int"
                ]
            }
        },
        "ExperimentClient.experiment_update": {
            "name": "experiment_update",
            "location": 122,
            "return": [
                "str",
                "IO",
                "bool",
                "dict",
                "Callable[[], str]"
            ],
            "arguments": {
                "self": [],
                "experiment_id": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "new_data": [
                    "str",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "ExperimentClient.experiment_delete": {
            "name": "experiment_delete",
            "location": 134,
            "return": [
                "str",
                "IO",
                "List[int]",
                "Callable[[], str]"
            ],
            "arguments": {
                "self": [],
                "experiment_id": [
                    "int",
                    "str"
                ]
            }
        },
        "ExperimentClient.experiment_plot_upload": {
            "name": "experiment_plot_upload",
            "location": 145,
            "return": [
                "IO",
                "bytes",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "experiment_id": [
                    "int",
                    "Optional[str]",
                    "List[str]",
                    "str"
                ],
                "plot": [
                    "int",
                    "Optional[str]",
                    "List[str]",
                    "str"
                ],
                "plot_name": [
                    "int",
                    "Optional[str]",
                    "List[str]",
                    "str"
                ],
                "sync_upload": [
                    "int",
                    "Optional[str]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "ExperimentClient.experiment_plot_update": {
            "name": "experiment_plot_update",
            "location": 169,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "experiment_id": [
                    "int",
                    "str",
                    "List[str]",
                    "bool"
                ],
                "plot": [
                    "int",
                    "str",
                    "List[str]",
                    "bool"
                ],
                "plot_name": [
                    "int",
                    "str",
                    "List[str]",
                    "bool"
                ],
                "sync_upload": [
                    "int",
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "ExperimentClient.experiment_plot_get": {
            "name": "experiment_plot_get",
            "location": 193,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "experiment_id": [
                    "str"
                ],
                "plot_name": [
                    "str"
                ]
            }
        },
        "ExperimentClient.experiment_plot_delete": {
            "name": "experiment_plot_delete",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "experiment_id": [
                    "str",
                    "int"
                ],
                "plot_file_name": [
                    "str",
                    "int"
                ]
            }
        },
        "ExperimentClient.experiment_devices": {
            "name": "experiment_devices",
            "location": 214,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExperimentClient.analysis_results": {
            "name": "analysis_results",
            "location": 222,
            "return": [
                "str",
                "dict",
                "Exception",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "Optional[int]",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Type[T]",
                    "bool"
                ],
                "marker": [
                    "Optional[int]",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Type[T]",
                    "bool"
                ],
                "backend_name": [
                    "Optional[int]",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Type[T]",
                    "bool"
                ],
                "device_components": [
                    "Optional[int]",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Type[T]",
                    "bool"
                ],
                "experiment_uuid": [
                    "Optional[int]",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Type[T]",
                    "bool"
                ],
                "result_type": [
                    "Optional[int]",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Type[T]",
                    "bool"
                ],
                "quality": [
                    "Optional[int]",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Type[T]",
                    "bool"
                ],
                "verified": [
                    "Optional[int]",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Type[T]",
                    "bool"
                ],
                "tags": [
                    "Optional[int]",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Type[T]",
                    "bool"
                ],
                "sort_by": [
                    "Optional[int]",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Type[T]",
                    "bool"
                ]
            }
        },
        "ExperimentClient.analysis_result_upload": {
            "name": "analysis_result_upload",
            "location": 266,
            "return": [
                "str",
                "IO"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "Optional[Sequence[str]]",
                    "Optional[Callable]"
                ]
            }
        },
        "ExperimentClient.analysis_result_update": {
            "name": "analysis_result_update",
            "location": 277,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "result_id": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "new_data": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "ExperimentClient.analysis_result_delete": {
            "name": "analysis_result_delete",
            "location": 289,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "result_id": [
                    "int",
                    "str"
                ]
            }
        },
        "ExperimentClient.analysis_result_get": {
            "name": "analysis_result_get",
            "location": 300,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "result_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Union[int,str]"
                ]
            }
        },
        "ExperimentClient.device_components": {
            "name": "device_components",
            "location": 311,
            "return": [
                "bool",
                "str",
                "dict",
                "cmk.base.events.EventContext"
            ],
            "arguments": {
                "self": [],
                "backend_name": [
                    "str"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/api/clients/runtime.py": {
        "RuntimeClient.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "credentials": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "RuntimeClient.list_programs": {
            "name": "list_programs",
            "location": 42,
            "return": [
                "List[str]",
                "List[Dict]",
                "str",
                "List[int]",
                "list",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "str",
                    "bool"
                ],
                "skip": [
                    "str",
                    "bool"
                ]
            }
        },
        "RuntimeClient.program_create": {
            "name": "program_create",
            "location": 54,
            "return": [
                "bytes",
                "IO"
            ],
            "arguments": {
                "self": [],
                "program_data": [
                    "Optional[str]",
                    "Optional[qiskiproviders.ibmq.utils.utils.RefreshQueue]",
                    "str",
                    "Optional[float]",
                    "Optional[T]"
                ],
                "name": [
                    "Optional[str]",
                    "Optional[qiskiproviders.ibmq.utils.utils.RefreshQueue]",
                    "str",
                    "Optional[float]",
                    "Optional[T]"
                ],
                "description": [
                    "Optional[str]",
                    "Optional[qiskiproviders.ibmq.utils.utils.RefreshQueue]",
                    "str",
                    "Optional[float]",
                    "Optional[T]"
                ],
                "max_execution_time": [
                    "Optional[str]",
                    "Optional[qiskiproviders.ibmq.utils.utils.RefreshQueue]",
                    "str",
                    "Optional[float]",
                    "Optional[T]"
                ],
                "is_public": [
                    "Optional[str]",
                    "Optional[qiskiproviders.ibmq.utils.utils.RefreshQueue]",
                    "str",
                    "Optional[float]",
                    "Optional[T]"
                ],
                "spec": [
                    "Optional[str]",
                    "Optional[qiskiproviders.ibmq.utils.utils.RefreshQueue]",
                    "str",
                    "Optional[float]",
                    "Optional[T]"
                ]
            }
        },
        "RuntimeClient.program_get": {
            "name": "program_get",
            "location": 83,
            "return": [
                "str",
                "Optional[int]",
                "qutebrowser.api.apitypes.Tab"
            ],
            "arguments": {
                "self": [],
                "program_id": [
                    "str",
                    "int",
                    "Dict[int, int]"
                ]
            }
        },
        "RuntimeClient.set_program_visibility": {
            "name": "set_program_visibility",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "program_id": [
                    "str",
                    "int",
                    "cdp.runtime.RemoteObjectId",
                    "Optional[str]"
                ],
                "public": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "dict",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "RuntimeClient.program_run": {
            "name": "program_run",
            "location": 108,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "program_id": [
                    "str",
                    "int",
                    "float"
                ],
                "credentials": [
                    "str",
                    "int",
                    "float"
                ],
                "backend_name": [
                    "str",
                    "int",
                    "float"
                ],
                "params": [
                    "str",
                    "int",
                    "float"
                ],
                "image": [
                    "str",
                    "int",
                    "float"
                ],
                "log_level": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "RuntimeClient.program_delete": {
            "name": "program_delete",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "program_id": [
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "RuntimeClient.program_update": {
            "name": "program_update",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "program_id": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "Mapping[str, Any]",
                    "Callable"
                ],
                "program_data": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[qiskiproviders.ibmq.utils.utils.RefreshQueue]",
                    "Optional[float]",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "Optional[str]"
                ],
                "description": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "Optional[str]"
                ],
                "max_execution_time": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "Optional[str]"
                ],
                "spec": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "RuntimeClient.job_get": {
            "name": "job_get",
            "location": 170,
            "return": [
                "int",
                "List[str]",
                "Optional[str]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "int"
                ]
            }
        },
        "RuntimeClient.jobs_get": {
            "name": "jobs_get",
            "location": 183,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "str",
                    "int"
                ],
                "skip": [
                    "str",
                    "int"
                ],
                "pending": [
                    "str",
                    "int"
                ],
                "program_id": [
                    "str",
                    "int"
                ]
            }
        },
        "RuntimeClient.job_results": {
            "name": "job_results",
            "location": 204,
            "return": [
                "str",
                "int",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]",
                    "runtime.RemoteObjectId",
                    "Dict[str, Any]"
                ]
            }
        },
        "RuntimeClient.job_cancel": {
            "name": "job_cancel",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "RuntimeClient.job_delete": {
            "name": "job_delete",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "RuntimeClient.job_logs": {
            "name": "job_logs",
            "location": 231,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]",
                    "runtime.RemoteObjectId",
                    "Dict[str, Any]"
                ]
            }
        },
        "RuntimeClient.logout": {
            "name": "logout",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/api/clients/runtime_ws.py": {
        "RuntimeWebsocketClient.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "websocket_url": [
                    "str",
                    "int",
                    "Optional[List[int]]"
                ],
                "credentials": [
                    "str",
                    "int",
                    "bool"
                ],
                "job_id": [
                    "str",
                    "int",
                    "Optional[List[int]]"
                ],
                "message_queue": [
                    "str",
                    "int",
                    "Optional[List[int]]"
                ]
            }
        },
        "RuntimeWebsocketClient._handle_message": {
            "name": "_handle_message",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "BaseException",
                    "aiocometd.transports.base.Payload",
                    "bytes"
                ]
            }
        },
        "RuntimeWebsocketClient.job_results": {
            "name": "job_results",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_retries": [
                    "str",
                    "List[str]"
                ],
                "backoff_factor": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "RuntimeWebsocketClient._handle_stream_iteration": {
            "name": "_handle_stream_iteration",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/api/clients/utils.py": {
        "ws_proxy_params": {
            "name": "ws_proxy_params",
            "location": 21,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "credentials": [
                    "str",
                    "int"
                ],
                "ws_url": [
                    "str"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/api/clients/version.py": {
        "VersionClient.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "VersionClient.version": {
            "name": "version",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/api/clients/websocket.py": {
        "WebsocketMessage.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "Sequence",
                    "Optional[int]",
                    "int"
                ],
                "data": [
                    "str",
                    "int",
                    "Optional[Dict]",
                    "dict"
                ]
            }
        },
        "WebsocketMessage.data": {
            "name": "data",
            "location": 47,
            "return": [
                "Dict[str, List[int]]",
                "str",
                "Optional[float]",
                "dict",
                "float",
                "Set[cmk.utils.type_defs.HostName]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebsocketMessage.type": {
            "name": "type",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebsocketMessage.as_json": {
            "name": "as_json",
            "location": 56,
            "return": [
                "Exception",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WebsocketAuthenticationMessage.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "access_token": [
                    "bytes",
                    "str",
                    "Sequence[Tuple[str, int]]"
                ]
            }
        },
        "WebsocketResponseMethod.from_json": {
            "name": "from_json",
            "location": 77,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "json_string": [
                    "str",
                    "Mapping[str, str]"
                ]
            }
        },
        "WebsocketClient.on_open": {
            "name": "on_open",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wsa": [
                    "str",
                    "Union[str, IO[bytes]]",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "WebsocketClient._handle_message": {
            "name": "_handle_message",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "dict",
                    "Dict[Tuple[int, ...], float]",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "WebsocketClient._handle_auth_response": {
            "name": "_handle_auth_response",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Dict[str, Any]",
                    "str",
                    "dict"
                ]
            }
        },
        "WebsocketClient._handle_status_response": {
            "name": "_handle_status_response",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "dict",
                    "List[str]",
                    "str"
                ]
            }
        },
        "WebsocketClient.get_job_status": {
            "name": "get_job_status",
            "location": 154,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "retries": [
                    "str",
                    "IO[str]",
                    "dict"
                ],
                "backoff_factor": [
                    "str",
                    "IO[str]",
                    "dict"
                ]
            }
        },
        "WebsocketClient._handle_stream_iteration": {
            "name": "_handle_stream_iteration",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/api/clients/__init__.py": {},
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/api/rest/account.py": {
        "Account.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "sqlalchemy.orm.session.Session"
                ],
                "hub": [
                    "str",
                    "bool",
                    "dict",
                    "List[str]",
                    "TextIO"
                ],
                "group": [
                    "str",
                    "bool",
                    "dict",
                    "List[str]",
                    "TextIO"
                ],
                "project": [
                    "str",
                    "bool",
                    "dict",
                    "List[str]",
                    "TextIO"
                ]
            }
        },
        "Account.backend": {
            "name": "backend",
            "location": 58,
            "return": [
                "int",
                "str",
                "MutableSequence[utils.CWLObjectType]",
                "Type",
                "Optional[str]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "backend_name": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Account.job": {
            "name": "job",
            "location": 69,
            "return": [
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "cnaas_nms.db.session.sqla_session",
                    "Optional[int]"
                ]
            }
        },
        "Account.backends": {
            "name": "backends",
            "location": 82,
            "return": [
                "bytes",
                "cmk.base.events.EventContext",
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "Dict[str, Any]",
                    "dict",
                    "int",
                    "str",
                    "Optional[base.WhereSpec]"
                ]
            }
        },
        "Account.jobs": {
            "name": "jobs",
            "location": 94,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "str",
                    "list",
                    "dict",
                    "bool"
                ],
                "skip": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "str",
                    "list",
                    "dict",
                    "bool"
                ],
                "descending": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "str",
                    "list",
                    "dict",
                    "bool"
                ],
                "extra_filter": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "str",
                    "list",
                    "dict",
                    "bool"
                ]
            }
        },
        "Account.jobs_ids": {
            "name": "jobs_ids",
            "location": 133,
            "return": [
                "str",
                "Optional[float]",
                "dict",
                "int",
                "Dict[str, str]",
                "Set[cmk.utils.type_defs.HostName]"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "bool",
                    "str",
                    "bytes"
                ],
                "skip": [
                    "bool",
                    "str",
                    "bytes"
                ],
                "descending": [
                    "bool",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "int"
                ],
                "extra_filter": [
                    "bool",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "Account.create_remote_job": {
            "name": "create_remote_job",
            "location": 172,
            "return": [
                "Dict[str, Dict[str, Any]]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "backend_name": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "dict",
                    "cmk.utils.type_defs.HostName",
                    "cmk.base.check_utils.Service"
                ],
                "job_name": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "job_tags": [
                    "str",
                    "Iterable[str]",
                    "Optional[List[str]]",
                    "int",
                    "BinaryIO",
                    "Optional[str]"
                ],
                "experiment_id": [
                    "str"
                ],
                "live_data_enabled": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "dict",
                    "cmk.utils.type_defs.HostName",
                    "cmk.base.check_utils.Service"
                ]
            }
        },
        "Account.circuit": {
            "name": "circuit",
            "location": 211,
            "return": [
                "Optional[str]",
                "int",
                "Dict[str, str]",
                "dict",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/api/rest/analysis_result.py": {
        "AnalysisResult.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "int",
                    "bool"
                ],
                "result_uuid": [
                    "int",
                    "str",
                    "bool",
                    "Callable"
                ],
                "url_prefix": [
                    "bool",
                    "str",
                    "List[str]",
                    "Optional[Mapping[str, str]]"
                ]
            }
        },
        "AnalysisResult.update": {
            "name": "update",
            "location": 42,
            "return": [
                "Dict[str, str]",
                "dict",
                "Optional[Dict[str, Any]]",
                "Exception",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "analysis_result": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "Sequence[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "AnalysisResult.delete": {
            "name": "delete",
            "location": 55,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnalysisResult.get": {
            "name": "get",
            "location": 64,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/api/rest/backend.py": {
        "Backend.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "session.RetrySession",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "backend_name": [
                    "str",
                    "Optional[str]"
                ],
                "url_prefix": [
                    "str",
                    "session.RetrySession",
                    "Optional[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "Backend.properties": {
            "name": "properties",
            "location": 46,
            "return": [
                "bytes",
                "dict",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "datetime": [
                    "datetime.datetime",
                    "str"
                ]
            }
        },
        "Backend.pulse_defaults": {
            "name": "pulse_defaults",
            "location": 76,
            "return": [
                "Optional[int]",
                "Callable",
                "List[Dict[str, Any]]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backend.status": {
            "name": "status",
            "location": 85,
            "return": [
                "bool",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backend.job_limit": {
            "name": "job_limit",
            "location": 114,
            "return": [
                "int",
                "Hashable",
                "str",
                "Sequence[int]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backend.reservations": {
            "name": "reservations",
            "location": 123,
            "return": [
                "Optional[int]",
                "Callable",
                "int",
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "start_datetime": [
                    "Optional[datetime.datetime]",
                    "bool",
                    "Optional[int]",
                    "Optional[str]",
                    "int",
                    "datetime.date"
                ],
                "end_datetime": [
                    "Optional[datetime.datetime]",
                    "datetime.datetime",
                    "int",
                    "float",
                    "datetime.date"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/api/rest/base.py": {
        "RestAdapterBase.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "prefix_url": [
                    "str"
                ]
            }
        },
        "RestAdapterBase.get_url": {
            "name": "get_url",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str",
                    "List[str]",
                    "Optional[Container[str]]"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/api/rest/experiment.py": {
        "Experiment.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "session.RetrySession",
                    "Optional[str]"
                ],
                "experiment_uuid": [
                    "str",
                    "session.RetrySession",
                    "Optional[str]"
                ],
                "url_prefix": [
                    "str",
                    "session.RetrySession",
                    "Optional[str]"
                ]
            }
        },
        "Experiment.retrieve": {
            "name": "retrieve",
            "location": 42,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Experiment.update": {
            "name": "update",
            "location": 51,
            "return": [
                "dict",
                "int",
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]",
                "Exception",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "experiment": [
                    "str",
                    "Dict[str, Any]",
                    "Exception",
                    "int",
                    "dict"
                ]
            }
        },
        "Experiment.delete": {
            "name": "delete",
            "location": 63,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Experiment.upload_plot": {
            "name": "upload_plot",
            "location": 72,
            "return": [
                "int",
                "str",
                "Dict[str, Union[str, int]]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "plot": [
                    "str",
                    "bytes"
                ],
                "plot_name": [
                    "str"
                ],
                "sync_upload": [
                    "str"
                ]
            }
        },
        "ExperimentPlot.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "dict",
                    "bool",
                    "str",
                    "session.RetrySession"
                ],
                "experiment_uuid": [
                    "dict",
                    "bool",
                    "str",
                    "session.RetrySession"
                ],
                "plot_name": [
                    "str",
                    "dict",
                    "bool",
                    "session.RetrySession"
                ],
                "url_prefix": [
                    "dict",
                    "bool",
                    "str",
                    "session.RetrySession"
                ]
            }
        },
        "ExperimentPlot.retrieve": {
            "name": "retrieve",
            "location": 130,
            "return": [
                "int",
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]",
                "List[str]",
                "bytes",
                "Optional[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExperimentPlot.delete": {
            "name": "delete",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExperimentPlot.update": {
            "name": "update",
            "location": 145,
            "return": [
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "plot": [
                    "str",
                    "bytes"
                ],
                "sync_upload": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/api/rest/job.py": {
        "Job.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "bytes",
                    "int",
                    "Optional[Exception]"
                ],
                "job_id": [
                    "str",
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[dict]"
                ],
                "url_prefix": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "bytes",
                    "int",
                    "Optional[Exception]"
                ]
            }
        },
        "Job.get": {
            "name": "get",
            "location": 59,
            "return": [
                "int",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.update_attribute": {
            "name": "update_attribute",
            "location": 75,
            "return": [
                "str",
                "Dict[str, Tuple[Any, Any]]",
                "Exception",
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "job_attribute_info": [
                    "dict",
                    "Optional[str]",
                    "Dict[str, Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "Job.callback_upload": {
            "name": "callback_upload",
            "location": 94,
            "return": [
                "bool",
                "str",
                "int",
                "dict",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.callback_download": {
            "name": "callback_download",
            "location": 105,
            "return": [
                "Optional[str]",
                "int",
                "Dict[str, str]",
                "dict",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.cancel": {
            "name": "cancel",
            "location": 114,
            "return": [
                "Optional[str]",
                "int",
                "Dict[str, str]",
                "dict",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.download_url": {
            "name": "download_url",
            "location": 123,
            "return": [
                "str",
                "Optional[int]",
                "int",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.properties": {
            "name": "properties",
            "location": 132,
            "return": [
                "Dict[str, bool]",
                "bool",
                "dict",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.result_url": {
            "name": "result_url",
            "location": 141,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.status": {
            "name": "status",
            "location": 150,
            "return": [
                "Optional[Dict]",
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.upload_url": {
            "name": "upload_url",
            "location": 169,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.put_object_storage": {
            "name": "put_object_storage",
            "location": 178,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "dict",
                    "Optional[Dict]",
                    "Optional[str]",
                    "Optional"
                ],
                "qobj_dict": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[str]",
                    "Exception",
                    "str"
                ]
            }
        },
        "Job.get_object_storage": {
            "name": "get_object_storage",
            "location": 194,
            "return": [
                "int",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "dict"
                ]
            }
        },
        "Job.delete": {
            "name": "delete",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/api/rest/root.py": {
        "Api.experiment": {
            "name": "experiment",
            "location": 43,
            "return": [
                "Dict[str, bool]",
                "dict",
                "Dict[str, str]",
                "cmk.base.events.EventContext",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "experiment_uuid": [
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Api.experiment_plot": {
            "name": "experiment_plot",
            "location": 54,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "experiment_uuid": [
                    "str",
                    "Optional[object]",
                    "Callable"
                ],
                "plot_name": [
                    "str",
                    "Optional[object]",
                    "Callable"
                ]
            }
        },
        "Api.analysis_result": {
            "name": "analysis_result",
            "location": 66,
            "return": [
                "bool",
                "AsyncGenerator"
            ],
            "arguments": {
                "self": [],
                "analysis_result_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Api.hubs": {
            "name": "hubs",
            "location": 79,
            "return": [
                "Optional[int]",
                "Callable",
                "int",
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Api.version": {
            "name": "version",
            "location": 88,
            "return": [
                "bool",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Api.login": {
            "name": "login",
            "location": 115,
            "return": [
                "Optional[Dict[str, Any]]",
                "Tuple[str, str]",
                "str",
                "bool",
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "api_token": [
                    "str",
                    "bytes",
                    "Iterable[str]"
                ]
            }
        },
        "Api.user_info": {
            "name": "user_info",
            "location": 127,
            "return": [
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Api.reservations": {
            "name": "reservations",
            "location": 138,
            "return": [
                "Optional[int]",
                "Callable",
                "int",
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Api.experiments": {
            "name": "experiments",
            "location": 149,
            "return": [
                "Optional[str]",
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "str",
                    "Optional[bool]",
                    "int",
                    "bool"
                ],
                "marker": [
                    "str",
                    "Optional[bool]",
                    "int",
                    "bool"
                ],
                "backend_name": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Collection[str]",
                    "List[str]"
                ],
                "experiment_type": [
                    "Optional[str]",
                    "List[str]",
                    "Set[str]"
                ],
                "start_time": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "bool"
                ],
                "device_components": [
                    "str",
                    "Optional[bool]",
                    "int",
                    "bool"
                ],
                "tags": [
                    "str",
                    "Sequence[str]",
                    "List[List[str]]",
                    "bytes",
                    "Dict[str, str]"
                ],
                "hub": [
                    "str",
                    "Optional[bool]",
                    "int",
                    "bool"
                ],
                "group": [
                    "str",
                    "Optional[bool]",
                    "int",
                    "bool"
                ],
                "project": [
                    "str",
                    "Optional[bool]",
                    "int",
                    "bool"
                ],
                "exclude_public": [
                    "str",
                    "float",
                    "List[str]",
                    "int"
                ],
                "public_only": [
                    "str",
                    "float",
                    "List[str]",
                    "int"
                ],
                "exclude_mine": [
                    "str",
                    "float",
                    "List[str]",
                    "int"
                ],
                "mine_only": [
                    "str",
                    "float",
                    "List[str]",
                    "int"
                ],
                "parent_id": [
                    "str"
                ],
                "sort_by": [
                    "str",
                    "Optional[bool]",
                    "int",
                    "bool"
                ]
            }
        },
        "Api.experiment_devices": {
            "name": "experiment_devices",
            "location": 228,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Api.experiment_upload": {
            "name": "experiment_upload",
            "location": 238,
            "return": [
                "Union[str, IO]",
                "str",
                "IO",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "experiment": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Api.analysis_results": {
            "name": "analysis_results",
            "location": 252,
            "return": [
                "bool",
                "Optional[str]",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "bool",
                    "int",
                    "Tuple[str]"
                ],
                "marker": [
                    "bool",
                    "int",
                    "Tuple[str]"
                ],
                "backend_name": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[Union[int, str]]"
                ],
                "device_components": [
                    "bool",
                    "int",
                    "Tuple[str]"
                ],
                "experiment_uuid": [
                    "bool",
                    "int",
                    "Tuple[str]"
                ],
                "result_type": [
                    "str",
                    "List[str]",
                    "tuple",
                    "Optional[Union[int, str]]"
                ],
                "quality": [
                    "bool",
                    "int",
                    "Tuple[str]"
                ],
                "verified": [
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[float]",
                    "Union[None, int]",
                    "Optional[bool]"
                ],
                "tags": [
                    "bool",
                    "int",
                    "Optional[Sequence[str]]",
                    "Optional[str]",
                    "str"
                ],
                "sort_by": [
                    "bool",
                    "int",
                    "Tuple[str]"
                ]
            }
        },
        "Api.analysis_result_upload": {
            "name": "analysis_result_upload",
            "location": 306,
            "return": [
                "bool",
                "dict",
                "Dict[str, str]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "str",
                    "dict",
                    "int",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Api.device_components": {
            "name": "device_components",
            "location": 318,
            "return": [
                "Optional[int]",
                "Callable",
                "int",
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "backend_name": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/api/rest/runtime.py": {
        "Runtime.program": {
            "name": "program",
            "location": 36,
            "return": [
                "str",
                "List[list]",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "program_id": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Runtime.program_job": {
            "name": "program_job",
            "location": 47,
            "return": [
                "str",
                "int",
                "cmk.utils.type_defs.HostName",
                "Iterable[str]",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "Runtime.list_programs": {
            "name": "list_programs",
            "location": 58,
            "return": [
                "str",
                "Optional[str]",
                "bytes",
                "Tuple[List[int], List[int], List[int]]",
                "bool",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "str",
                    "dbadapters.base.relation.BaseRelation",
                    "bool"
                ],
                "skip": [
                    "str",
                    "dbadapters.base.relation.BaseRelation",
                    "bool"
                ]
            }
        },
        "Runtime.create_program": {
            "name": "create_program",
            "location": 76,
            "return": [
                "axion.utils.types.AnyCallable",
                "bool",
                "str",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "program_data": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "description": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "max_execution_time": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "is_public": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "spec": [
                    "Optional[int]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Runtime.program_run": {
            "name": "program_run",
            "location": 109,
            "return": [
                "str",
                "List[str]",
                "Callable[[], None]",
                "Optional[Exception]"
            ],
            "arguments": {
                "self": [],
                "program_id": [
                    "Dict[str, str]",
                    "Sequence[str]",
                    "List[str]",
                    "int",
                    "str"
                ],
                "hub": [
                    "Dict[str, str]",
                    "Sequence[str]",
                    "List[str]",
                    "int",
                    "str"
                ],
                "group": [
                    "Dict[str, str]",
                    "Sequence[str]",
                    "List[str]",
                    "int",
                    "str"
                ],
                "project": [
                    "Dict[str, str]",
                    "Sequence[str]",
                    "List[str]",
                    "int",
                    "str"
                ],
                "backend_name": [
                    "Dict[str, str]",
                    "Sequence[str]",
                    "List[str]",
                    "int",
                    "str"
                ],
                "params": [
                    "Dict[str, str]",
                    "Sequence[str]",
                    "List[str]",
                    "int",
                    "str"
                ],
                "image": [
                    "Dict[str, str]",
                    "Sequence[str]",
                    "List[str]",
                    "int",
                    "str"
                ],
                "log_level": [
                    "bool",
                    "float",
                    "int",
                    "raiden.utils.InitiatorAddress",
                    "Set[str]",
                    "str"
                ]
            }
        },
        "Runtime.jobs_get": {
            "name": "jobs_get",
            "location": 150,
            "return": [
                "str",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "str",
                    "Dict[str, str]",
                    "int"
                ],
                "skip": [
                    "str",
                    "Dict[str, str]",
                    "int"
                ],
                "pending": [
                    "int",
                    "str"
                ],
                "program_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "Runtime.logout": {
            "name": "logout",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Program.__init__": {
            "name": "__init__",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "program_id": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "url_prefix": [
                    "str",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "Program.get": {
            "name": "get",
            "location": 210,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Program.make_public": {
            "name": "make_public",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Program.make_private": {
            "name": "make_private",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Program.delete": {
            "name": "delete",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Program.update_data": {
            "name": "update_data",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "program_data": [
                    "dict",
                    "Dict[str, float]",
                    "Dict[str, str]",
                    "int",
                    "Mapping"
                ]
            }
        },
        "Program.update_metadata": {
            "name": "update_metadata",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Callable[[], int]"
                ],
                "description": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "bool"
                ],
                "max_execution_time": [
                    "int",
                    "bool",
                    "Sequence[str]"
                ],
                "spec": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "ProgramJob.__init__": {
            "name": "__init__",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "bytes",
                    "int",
                    "Optional[Exception]"
                ],
                "job_id": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "bytes",
                    "int",
                    "Optional[Exception]"
                ],
                "url_prefix": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "bytes",
                    "int",
                    "Optional[Exception]"
                ]
            }
        },
        "ProgramJob.get": {
            "name": "get",
            "location": 303,
            "return": [
                "dict",
                "int",
                "tuple",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProgramJob.delete": {
            "name": "delete",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProgramJob.results": {
            "name": "results",
            "location": 315,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProgramJob.cancel": {
            "name": "cancel",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProgramJob.logs": {
            "name": "logs",
            "location": 328,
            "return": [
                "str",
                "cmk.utils.type_defs.UserId",
                "bool",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/api/rest/__init__.py": {},
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/api/rest/utils/data_mapper.py": {
        "map_job_response": {
            "name": "map_job_response",
            "location": 20,
            "return": [
                "dict",
                "Dict[str, List[int]]",
                "str",
                "Optional[float]",
                "float",
                "bytes",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "data": [
                    "Dict[str, Any]",
                    "dict",
                    "str",
                    "Mapping[str, Any]",
                    "Dict[str, str]",
                    "bytes"
                ]
            }
        },
        "map_info_queue": {
            "name": "map_info_queue",
            "location": 47,
            "return": [
                "str",
                "dict",
                "Optional[float]",
                "Callable"
            ],
            "arguments": {
                "data": [
                    "Dict[str, Any]",
                    "bytes",
                    "dict"
                ]
            }
        },
        "map_job_status_response": {
            "name": "map_job_status_response",
            "location": 67,
            "return": [
                "float",
                "str",
                "Optional[Dict[str, Any]]",
                "bytes",
                "Dict[str, Any]",
                "Sequence"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "Mapping[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "map_jobs_limit_response": {
            "name": "map_jobs_limit_response",
            "location": 83,
            "return": [
                "Dict[str, List[int]]",
                "str",
                "Optional[float]",
                "dict",
                "float",
                "int",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "data": [
                    "Dict[str, Any]",
                    "bytes",
                    "int"
                ]
            }
        },
        "rename_fields": {
            "name": "rename_fields",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Callable[[Any], str]",
                    "Dict[str, str]"
                ],
                "mapper": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "dict",
                    "Union[List, Dict]"
                ]
            }
        },
        "dict_to_identifier": {
            "name": "dict_to_identifier",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "Dict[str, Any]",
                    "dict",
                    "List[Tuple]",
                    "bytes",
                    "List[int]"
                ],
                "mapper": [
                    "dict",
                    "Dict[str, Any]",
                    "bytes",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "to_python_identifier": {
            "name": "to_python_identifier",
            "location": 136,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict",
                    "Callable"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/api/rest/utils/__init__.py": {},
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/credentials/configrc.py": {
        "read_credentials_from_qiskitrc": {
            "name": "read_credentials_from_qiskitrc",
            "location": 38,
            "return": [
                "Mapping",
                "dict",
                "Dict[str, float]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "_parse_preferences": {
            "name": "_parse_preferences",
            "location": 104,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pref_section": [
                    "dict",
                    "Dict[Tuple[int, ...], float]"
                ]
            }
        },
        "write_qiskit_rc": {
            "name": "write_qiskit_rc",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "credentials": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ],
                "preferences": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, Dict]",
                    "Dict[str, List[str]]",
                    "Dict[int, List[str]]"
                ],
                "filename": [
                    "str",
                    "bool",
                    "Union[str, os.PathLike]"
                ]
            }
        },
        "store_credentials": {
            "name": "store_credentials",
            "location": 198,
            "return": [],
            "arguments": {
                "credentials": [
                    "bytes"
                ],
                "overwrite": [
                    "dict",
                    "Optional[object]",
                    "int"
                ],
                "filename": [
                    "str",
                    "Optional[str]",
                    "Optional[Pattern[str]]",
                    "Dict[str, Dict[str, str]]",
                    "bytes"
                ]
            }
        },
        "remove_credentials": {
            "name": "remove_credentials",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "credentials": [
                    "bool",
                    "List[str]"
                ],
                "filename": [
                    "str",
                    "bytes",
                    "Optional[Iterable[Any]]"
                ]
            }
        },
        "store_preferences": {
            "name": "store_preferences",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "preferences": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "int",
                    "bool",
                    "List[int]"
                ],
                "filename": [
                    "str",
                    "Optional[Pattern[str]]",
                    "Optional[str]"
                ]
            }
        },
        "write_qiskit_rc._credentials_object_to_dict": {
            "name": "_credentials_object_to_dict",
            "location": 146,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Mapping[str, Any]",
                "Dict[str, bool]",
                "bytes",
                "Dict[str, float]"
            ],
            "arguments": {
                "credentials_obj": [
                    "dict",
                    "Dict[str, Any]",
                    "Generator",
                    "Dict[str, \"Outcome\"]"
                ]
            }
        },
        "write_qiskit_rc._section_name": {
            "name": "_section_name",
            "location": 161,
            "return": [
                "str"
            ],
            "arguments": {
                "credentials_": [
                    "str",
                    "Container[\"Taxon\"]"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/credentials/credentials.py": {
        "_unify_ibmq_url": {
            "name": "_unify_ibmq_url",
            "location": 135,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "hub": [
                    "str",
                    "Optional[str]"
                ],
                "group": [
                    "str",
                    "Optional[str]"
                ],
                "project": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Credentials.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "url": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Set[str]"
                ],
                "websockets_url": [
                    "str",
                    "bool",
                    "Iterable[Any]",
                    "int"
                ],
                "hub": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Set[str]"
                ],
                "group": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Set[str]"
                ],
                "project": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Set[str]"
                ],
                "proxies": [
                    "bool",
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "verify": [
                    "bool",
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "services": [
                    "Dict[str, str]",
                    "Optional[Dict[str, str]]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "access_token": [
                    "bool",
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "preferences": [
                    "bool",
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "default_provider": [
                    "bool",
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "Credentials.is_ibmq": {
            "name": "is_ibmq",
            "location": 90,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Credentials.__eq__": {
            "name": "__eq__",
            "location": 94,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "Tuple[float, float, float]",
                    "Optional[str]",
                    "str",
                    "Type[T]"
                ]
            }
        },
        "Credentials.unique_id": {
            "name": "unique_id",
            "location": 99,
            "return": [
                "int",
                "str",
                "Hashable",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Credentials.connection_parameters": {
            "name": "connection_parameters",
            "location": 110,
            "return": [
                "int",
                "bool",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/credentials/environ.py": {
        "read_credentials_from_environ": {
            "name": "read_credentials_from_environ",
            "location": 31,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/credentials/exceptions.py": {},
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/credentials/hubgroupproject.py": {
        "HubGroupProject.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hub": [
                    "str",
                    "dict",
                    "MutableMapping[str, str]",
                    "List[str]"
                ],
                "group": [
                    "str",
                    "dict",
                    "MutableMapping[str, str]",
                    "List[str]"
                ],
                "project": [
                    "str",
                    "dict",
                    "MutableMapping[str, str]",
                    "List[str]"
                ]
            }
        },
        "HubGroupProject.from_stored_format": {
            "name": "from_stored_format",
            "location": 35,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Set[str]",
                    "dict"
                ],
                "hgp": [
                    "str"
                ]
            }
        },
        "HubGroupProject.from_credentials": {
            "name": "from_credentials",
            "location": 66,
            "return": [
                "str",
                "Callable",
                "int",
                "Iterable[Sequence[str]]",
                "Optional[Union[Any, str]]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ],
                "credentials_obj": [
                    "str",
                    "dict",
                    "Exception",
                    "Dict[str, Any]"
                ]
            }
        },
        "HubGroupProject.to_stored_format": {
            "name": "to_stored_format",
            "location": 79,
            "return": [
                "str",
                "bytes",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HubGroupProject.to_tuple": {
            "name": "to_tuple",
            "location": 101,
            "return": [
                "str",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "HubGroupProject.__eq__": {
            "name": "__eq__",
            "location": 105,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, float]"
                ]
            }
        },
        "HubGroupProject.__hash__": {
            "name": "__hash__",
            "location": 109,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/credentials/updater.py": {
        "update_credentials": {
            "name": "update_credentials",
            "location": 31,
            "return": [
                "Optional[bool]",
                "bool",
                "Optional[float]",
                "str",
                "Optional[int]",
                "List[str]"
            ],
            "arguments": {
                "force": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "is_directly_updatable": {
            "name": "is_directly_updatable",
            "location": 143,
            "return": [
                "bool"
            ],
            "arguments": {
                "credentials": [
                    "str",
                    "Dict[str, int]",
                    "int",
                    "dict"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/credentials/__init__.py": {
        "discover_credentials": {
            "name": "discover_credentials",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "qiskitrc_filename": [
                    "Callable",
                    "Mapping[str, Any]",
                    "Callable[[str], None]",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/experiment/constants.py": {},
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/experiment/device_component.py": {
        "to_component": {
            "name": "to_component",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str",
                    "int"
                ]
            }
        },
        "DeviceComponent.__str__": {
            "name": "__str__",
            "location": 22,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeviceComponent.__repr__": {
            "name": "__repr__",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Qubit.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Qubit.__str__": {
            "name": "__str__",
            "location": 35,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Resonator.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Resonator.__str__": {
            "name": "__str__",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnknownComponent.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "component": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "UnknownComponent.__str__": {
            "name": "__str__",
            "location": 55,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/experiment/exceptions.py": {},
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/experiment/ibm_experiment_service.py": {
        "IBMExperimentService.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "str",
                    "dict",
                    "vimiv.api.modes.Mode"
                ]
            }
        },
        "IBMExperimentService.backends": {
            "name": "backends",
            "location": 99,
            "return": [
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMExperimentService.create_experiment": {
            "name": "create_experiment",
            "location": 107,
            "return": [
                "int",
                "Dict[str, Any]",
                "Dict[str, str]",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "experiment_type": [
                    "str",
                    "dict",
                    "Dict[str, Sequence[str]]",
                    "Dict[str, Sequence[Any]]",
                    "Optional[Dict]",
                    "Mapping[str, Any]",
                    "Optional[Dict[str, str]]"
                ],
                "backend_name": [
                    "str",
                    "dict",
                    "Dict[str, Sequence[str]]",
                    "Dict[str, Sequence[Any]]",
                    "Optional[Dict]",
                    "Mapping[str, Any]",
                    "Optional[Dict[str, str]]"
                ],
                "metadata": [
                    "str",
                    "int"
                ],
                "experiment_id": [
                    "str",
                    "int"
                ],
                "parent_id": [
                    "str",
                    "int"
                ],
                "job_ids": [
                    "str",
                    "int"
                ],
                "tags": [
                    "str",
                    "int"
                ],
                "notes": [
                    "str",
                    "int"
                ],
                "share_level": [
                    "str",
                    "int"
                ],
                "start_datetime": [
                    "str",
                    "int"
                ],
                "json_encoder": [
                    "str",
                    "int"
                ]
            }
        },
        "IBMExperimentService.update_experiment": {
            "name": "update_experiment",
            "location": 182,
            "return": [
                "str",
                "Set[str]",
                "DefaultDict"
            ],
            "arguments": {
                "self": [],
                "experiment_id": [
                    "str",
                    "Optional[str]"
                ],
                "metadata": [
                    "str",
                    "Sequence[str]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "List[int]",
                    "Optional[Dict]",
                    "List[Dict[str, Any]]",
                    "Union[str, int, None]"
                ],
                "job_ids": [
                    "str",
                    "Sequence[str]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "List[int]",
                    "Optional[Dict]",
                    "List[Dict[str, Any]]",
                    "Union[str, int, None]"
                ],
                "notes": [
                    "str",
                    "Sequence[str]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "List[int]",
                    "Optional[Dict]",
                    "List[Dict[str, Any]]",
                    "Union[str, int, None]"
                ],
                "tags": [
                    "str",
                    "Sequence[str]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "List[int]",
                    "Optional[Dict]",
                    "List[Dict[str, Any]]",
                    "Union[str, int, None]"
                ],
                "share_level": [
                    "str",
                    "Sequence[str]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "List[int]",
                    "Optional[Dict]",
                    "List[Dict[str, Any]]",
                    "Union[str, int, None]"
                ],
                "end_datetime": [
                    "str",
                    "Sequence[str]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "List[int]",
                    "Optional[Dict]",
                    "List[Dict[str, Any]]",
                    "Union[str, int, None]"
                ],
                "json_encoder": [
                    "str"
                ]
            }
        },
        "IBMExperimentService._experiment_data_to_api": {
            "name": "_experiment_data_to_api",
            "location": 239,
            "return": [
                "Dict[str, List[int]]",
                "str",
                "Optional[Dict[str, Any]]",
                "dict",
                "Dict[str, raiden.utils.Any]"
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "str",
                    "datetime.datetime",
                    "Optional[str]"
                ],
                "experiment_id": [
                    "str",
                    "Optional[str]"
                ],
                "parent_id": [
                    "str",
                    "Optional[str]"
                ],
                "job_ids": [
                    "int",
                    "str",
                    "Callable",
                    "Optional[Dict]",
                    "dict",
                    "MutableMapping"
                ],
                "tags": [
                    "str",
                    "bool",
                    "int"
                ],
                "notes": [
                    "str",
                    "datetime.datetime",
                    "Optional[str]"
                ],
                "share_level": [
                    "str",
                    "int",
                    "bool"
                ],
                "start_dt": [
                    "int",
                    "str"
                ],
                "end_dt": [
                    "str",
                    "bool",
                    "raiden.utils.Address",
                    "raiden.utils.BlockIdentifier",
                    "int"
                ]
            }
        },
        "IBMExperimentService.experiment": {
            "name": "experiment",
            "location": 290,
            "return": [
                "List[Dict[str, Any]]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "experiment_id": [
                    "str"
                ],
                "json_decoder": [
                    "str",
                    "Union[str, int]",
                    "int"
                ]
            }
        },
        "IBMExperimentService.experiments": {
            "name": "experiments",
            "location": 313,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "Optional[int]",
                    "int"
                ],
                "json_decoder": [
                    "str",
                    "bool",
                    "Dict[str, int]",
                    "dict",
                    "int",
                    "Dict[str, Set[str]]"
                ],
                "device_components": [
                    "str",
                    "bool",
                    "int",
                    "Mapping[Any, Any]",
                    "Optional[str]"
                ],
                "device_components_operator": [
                    "str",
                    "bool",
                    "int",
                    "Mapping[Any, Any]",
                    "Optional[str]"
                ],
                "experiment_type": [
                    "str",
                    "bool",
                    "int",
                    "Mapping[Any, Any]",
                    "Optional[str]"
                ],
                "experiment_type_operator": [
                    "str",
                    "bool",
                    "int",
                    "Mapping[Any, Any]",
                    "Optional[str]"
                ],
                "backend_name": [
                    "bool",
                    "int",
                    "str",
                    "Sequence[int]"
                ],
                "tags": [
                    "str",
                    "bool",
                    "int",
                    "Mapping[Any, Any]",
                    "Optional[str]"
                ],
                "tags_operator": [
                    "str",
                    "bool",
                    "int",
                    "Mapping[Any, Any]",
                    "Optional[str]"
                ],
                "start_datetime_after": [
                    "bool",
                    "str",
                    "Dict[str, str]",
                    "int"
                ],
                "start_datetime_before": [
                    "bool",
                    "str",
                    "Dict[str, str]",
                    "int"
                ],
                "hub": [
                    "Dict[str, Any]",
                    "raiden.utils.Dict[str, raiden.utils.Any]"
                ],
                "group": [
                    "Dict[str, Any]",
                    "raiden.utils.Dict[str, raiden.utils.Any]"
                ],
                "project": [
                    "Dict[str, Any]",
                    "raiden.utils.Dict[str, raiden.utils.Any]"
                ],
                "exclude_public": [
                    "Optional[Any]",
                    "Union[bool, Iterable[str]]",
                    "bool",
                    "raiden.utils.InitiatorAddress",
                    "raiden.utils.PaymentAmount",
                    "raiden.utils.TokenNetworkID"
                ],
                "public_only": [
                    "Optional[Any]",
                    "Union[bool, Iterable[str]]",
                    "bool",
                    "raiden.utils.InitiatorAddress",
                    "raiden.utils.PaymentAmount",
                    "raiden.utils.TokenNetworkID"
                ],
                "exclude_mine": [
                    "Optional[Any]",
                    "Union[bool, Iterable[str]]",
                    "bool",
                    "raiden.utils.InitiatorAddress",
                    "raiden.utils.PaymentAmount",
                    "raiden.utils.TokenNetworkID"
                ],
                "mine_only": [
                    "Optional[Any]",
                    "Union[bool, Iterable[str]]",
                    "bool",
                    "raiden.utils.InitiatorAddress",
                    "raiden.utils.PaymentAmount",
                    "raiden.utils.TokenNetworkID"
                ],
                "parent_id": [
                    "bool",
                    "int",
                    "str",
                    "Sequence[int]"
                ],
                "sort_by": [
                    "str",
                    "bool",
                    "int",
                    "Mapping[Any, Any]",
                    "Optional[str]"
                ]
            }
        },
        "IBMExperimentService._api_to_experiment_data": {
            "name": "_api_to_experiment_data",
            "location": 490,
            "return": [
                "dict",
                "bytes",
                "str",
                "Exception",
                "Sequence",
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "self": [],
                "raw_data": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "IBMExperimentService._convert_dt": {
            "name": "_convert_dt",
            "location": 535,
            "return": [
                "Dict[str, Any]",
                "Set[VT]",
                "tuple",
                "Optional[bool]",
                "Dict[str, Tuple[int, int]]"
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "str",
                    "Set[str]",
                    "Union[str, Iterable[str]]"
                ],
                "data": [
                    "str",
                    "Set[str]",
                    "Union[str, Iterable[str]]"
                ],
                "field_name": [
                    "str",
                    "Set[str]",
                    "Union[str, Iterable[str]]"
                ]
            }
        },
        "IBMExperimentService.delete_experiment": {
            "name": "delete_experiment",
            "location": 552,
            "return": [
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "experiment_id": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "IBMExperimentService.create_analysis_result": {
            "name": "create_analysis_result",
            "location": 577,
            "return": [
                "Optional[Dict[str, Any]]",
                "Dict[str, str]",
                "bytes",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "experiment_id": [
                    "str",
                    "Optional[str]",
                    "Set[str]",
                    "list",
                    "Tuple[str, str]"
                ],
                "result_data": [
                    "str",
                    "Optional[str]",
                    "Set[str]",
                    "list",
                    "Tuple[str, str]"
                ],
                "result_type": [
                    "str",
                    "Optional[str]",
                    "Set[str]",
                    "list",
                    "Tuple[str, str]"
                ],
                "device_components": [
                    "List[Optional[str]]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, str]",
                    "str"
                ],
                "tags": [
                    "str",
                    "Optional[str]",
                    "Set[str]",
                    "list",
                    "Tuple[str, str]"
                ],
                "quality": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "float"
                ],
                "verified": [
                    "str",
                    "Optional[str]",
                    "Set[str]",
                    "list",
                    "Tuple[str, str]"
                ],
                "result_id": [
                    "str",
                    "Optional[str]",
                    "Set[str]",
                    "list",
                    "Tuple[str, str]"
                ],
                "chisq": [
                    "str",
                    "Optional[str]",
                    "Set[str]",
                    "list",
                    "Tuple[str, str]"
                ],
                "json_encoder": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "IBMExperimentService.update_analysis_result": {
            "name": "update_analysis_result",
            "location": 648,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result_id": [
                    "str",
                    "bool"
                ],
                "result_data": [
                    "str",
                    "int",
                    "Optional[str]",
                    "BinaryIO"
                ],
                "tags": [
                    "str",
                    "int",
                    "Optional[str]",
                    "BinaryIO"
                ],
                "quality": [
                    "str",
                    "Mapping[str, object]",
                    "Dict[str, Any]"
                ],
                "verified": [
                    "str",
                    "int",
                    "Optional[str]",
                    "BinaryIO"
                ],
                "chisq": [
                    "str",
                    "int",
                    "Optional[str]",
                    "BinaryIO"
                ],
                "json_encoder": [
                    "str",
                    "bool"
                ]
            }
        },
        "IBMExperimentService._analysis_result_to_api": {
            "name": "_analysis_result_to_api",
            "location": 694,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "str",
                "Iterable[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "experiment_id": [
                    "str",
                    "Optional[\"LocalizedString\"]",
                    "float"
                ],
                "device_components": [
                    "Optional[bool]",
                    "bool",
                    "Optional[str]",
                    "Optional[\"LocalizedString\"]"
                ],
                "data": [
                    "bool",
                    "str",
                    "Optional[Any]",
                    "int",
                    "Optional[str]"
                ],
                "result_type": [
                    "dict",
                    "bool",
                    "Tuple[str]",
                    "Optional[str]",
                    "type",
                    "List[str]",
                    "str"
                ],
                "tags": [
                    "Optional[str]",
                    "str"
                ],
                "quality": [
                    "Optional[bool]",
                    "bool",
                    "Optional[str]",
                    "Optional[\"LocalizedString\"]"
                ],
                "verified": [
                    "bool",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "Optional[bool]",
                    "str",
                    "Optional[List[str]]"
                ],
                "result_id": [
                    "str",
                    "Optional[\"LocalizedString\"]",
                    "float"
                ],
                "chisq": [
                    "Optional[bool]",
                    "bool",
                    "Optional[str]",
                    "Optional[\"LocalizedString\"]"
                ]
            }
        },
        "IBMExperimentService.analysis_result": {
            "name": "analysis_result",
            "location": 744,
            "return": [
                "Sequence[Sequence[str]]",
                "Sequence[str]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "result_id": [
                    "str"
                ],
                "json_decoder": [
                    "dict",
                    "str",
                    "int",
                    "Iterable[str]",
                    "Iterable[int]",
                    "Set[str]",
                    "app.utils.types.JSON"
                ]
            }
        },
        "IBMExperimentService.analysis_results": {
            "name": "analysis_results",
            "location": 767,
            "return": [
                "Tuple[int, Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "Optional[int]",
                    "bytes"
                ],
                "json_decoder": [
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[int]",
                    "bytes",
                    "Mapping[str, str]",
                    "Optional[List[str]]",
                    "dict"
                ],
                "device_components": [
                    "int",
                    "Optional[Sequence[str]]",
                    "Optional[Set[str]]",
                    "str",
                    "bool"
                ],
                "device_components_operator": [
                    "int",
                    "Optional[Sequence[str]]",
                    "Optional[Set[str]]",
                    "str",
                    "bool"
                ],
                "experiment_id": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "Optional[Mapping[str, Any]]"
                ],
                "result_type": [
                    "int",
                    "Optional[Sequence[str]]",
                    "Optional[Set[str]]",
                    "str",
                    "bool"
                ],
                "result_type_operator": [
                    "int",
                    "Optional[Sequence[str]]",
                    "Optional[Set[str]]",
                    "str",
                    "bool"
                ],
                "backend_name": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "Optional[Mapping[str, Any]]"
                ],
                "quality": [
                    "str",
                    "int",
                    "bytes"
                ],
                "verified": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "Optional[Mapping[str, Any]]"
                ],
                "tags": [
                    "int",
                    "Optional[Sequence[str]]",
                    "Optional[Set[str]]",
                    "str",
                    "bool"
                ],
                "tags_operator": [
                    "int",
                    "Optional[Sequence[str]]",
                    "Optional[Set[str]]",
                    "str",
                    "bool"
                ],
                "sort_by": [
                    "int",
                    "Optional[Sequence[str]]",
                    "Optional[Set[str]]",
                    "str",
                    "bool"
                ]
            }
        },
        "IBMExperimentService._quality_filter_to_api": {
            "name": "_quality_filter_to_api",
            "location": 896,
            "return": [
                "Optional[str]",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "quality": [
                    "int",
                    "set",
                    "Sequence[str]",
                    "str",
                    "Iterable",
                    "list"
                ]
            }
        },
        "IBMExperimentService._filtering_to_api": {
            "name": "_filtering_to_api",
            "location": 921,
            "return": [
                "List[str]",
                "List[cmk.gui.plugins.views.utils.JoinCell]",
                "List[cmk.gui.plugins.views.utils.Cell]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "tags": [
                    "str",
                    "Optional[str]",
                    "Set[str]",
                    "List[str]"
                ],
                "tags_operator": [
                    "str",
                    "Optional[str]"
                ],
                "sort_by": [
                    "List[str]",
                    "Sequence[str]",
                    "int",
                    "List[Tuple[str, str]]",
                    "dict",
                    "str",
                    "List[Dict[str, str]]"
                ],
                "sort_map": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Union[Dict, List]",
                    "T"
                ],
                "device_components": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "List[str]"
                ],
                "device_components_operator": [
                    "str",
                    "int"
                ],
                "item_type": [
                    "str"
                ],
                "item_type_operator": [
                    "str",
                    "bool",
                    "Type"
                ]
            }
        },
        "IBMExperimentService._api_to_analysis_result": {
            "name": "_api_to_analysis_result",
            "location": 998,
            "return": [
                "Dict[int, str]",
                "Dict[str, List[Any]]",
                "str",
                "Mapping[int, str]"
            ],
            "arguments": {
                "self": [],
                "raw_data": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "IBMExperimentService.delete_analysis_result": {
            "name": "delete_analysis_result",
            "location": 1041,
            "return": [
                "str",
                "recidiviz.common.constants.entity_enum.EntityEnumMeta"
            ],
            "arguments": {
                "self": [],
                "result_id": [
                    "str"
                ]
            }
        },
        "IBMExperimentService.create_figure": {
            "name": "create_figure",
            "location": 1068,
            "return": [
                "int",
                "str",
                "asgard.clients.chronos.models.job.ChronosJob",
                "Dict[str, int]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "experiment_id": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "figure": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "figure_name": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "Dict[str, 'LabwareDefinition']"
                ],
                "sync_upload": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "IBMExperimentService.update_figure": {
            "name": "update_figure",
            "location": 1108,
            "return": [
                "dict",
                "bool",
                "Dict[str, str]",
                "Dict[str, Any]",
                "asgard.clients.chronos.models.job.ChronosJob",
                "str"
            ],
            "arguments": {
                "self": [],
                "experiment_id": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int"
                ],
                "figure": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int"
                ],
                "figure_name": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "sync_upload": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "IBMExperimentService.figure": {
            "name": "figure",
            "location": 1137,
            "return": [
                "str",
                "Dict[int, dict]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "experiment_id": [
                    "str"
                ],
                "figure_name": [
                    "str",
                    "Optional[str]"
                ],
                "file_name": [
                    "str"
                ]
            }
        },
        "IBMExperimentService.delete_figure": {
            "name": "delete_figure",
            "location": 1169,
            "return": [
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "experiment_id": [
                    "str",
                    "bool"
                ],
                "figure_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "IBMExperimentService.device_components": {
            "name": "device_components",
            "location": 1198,
            "return": [
                "str",
                "recidiviz.common.constants.state.state_incarceration_period.StateIncarcerationPeriodAdmissionReason",
                "Callable",
                "type"
            ],
            "arguments": {
                "self": [],
                "backend_name": [
                    "str"
                ]
            }
        },
        "IBMExperimentService.preferences": {
            "name": "preferences",
            "location": 1228,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMExperimentService.save_preferences": {
            "name": "save_preferences",
            "location": 1241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "auto_save": [
                    "dict",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/experiment/utils.py": {
        "map_api_error": {
            "name": "map_api_error",
            "location": 24,
            "return": [
                "typing.Generator[None, None, None]"
            ],
            "arguments": {
                "error_msg": []
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/experiment/__init__.py": {},
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/job/exceptions.py": {},
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/job/ibmqjob.py": {
        "IBMQJob.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "backend": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[Dict]"
                ],
                "api_client": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "job_id": [
                    "str",
                    "Optional[float]",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "zerver.models.UserProfile",
                    "int"
                ],
                "creation_date": [
                    "str"
                ],
                "status": [
                    "zerver.models.UserProfile",
                    "Dict[str, Any]",
                    "Optional[Any]"
                ],
                "kind": [
                    "str",
                    "bool",
                    "Optional[int]",
                    "Optional[bool]"
                ],
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "time_per_step": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "result": [
                    "str",
                    "bool",
                    "int"
                ],
                "qobj": [
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "Union[Dict[str, Any], List[Any]]",
                    "bytes",
                    "Dict[str, str]"
                ],
                "error": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "tags": [
                    "str",
                    "Optional[int]",
                    "bool",
                    "List[\"ResourceTypeId\"]",
                    "Dict[bytes, int]"
                ],
                "run_mode": [
                    "bool",
                    "List[str]",
                    "Sequence[str]"
                ],
                "share_level": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "client_info": [
                    "Optional[str]",
                    "str"
                ],
                "experiment_id": [
                    "str",
                    "int"
                ]
            }
        },
        "IBMQJob.qobj": {
            "name": "qobj",
            "location": 180,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQJob.properties": {
            "name": "properties",
            "location": 198,
            "return": [
                "bool",
                "str",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQJob.result": {
            "name": "result",
            "location": 219,
            "return": [
                "bool",
                "zerver.models.Realm",
                "int",
                "str",
                "Union[server.models.User, int]"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "str",
                    "float",
                    "Optional[float]",
                    "int",
                    "Optional[str]"
                ],
                "wait": [
                    "str",
                    "float",
                    "Optional[float]",
                    "int",
                    "Optional[str]"
                ],
                "partial": [
                    "List[str]",
                    "Optional[str]",
                    "str",
                    "list",
                    "dict",
                    "Type",
                    "set"
                ],
                "refresh": [
                    "bool",
                    "int",
                    "dict",
                    "raiden.utils.signer.Signer"
                ]
            }
        },
        "IBMQJob.cancel": {
            "name": "cancel",
            "location": 298,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQJob.update_name": {
            "name": "update_name",
            "location": 323,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "IBMQJob.update_tags": {
            "name": "update_tags",
            "location": 358,
            "return": [
                "str",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "replacement_tags": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "additional_tags": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "List[str]"
                ],
                "removal_tags": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "List[str]"
                ]
            }
        },
        "IBMQJob._get_tags_to_update": {
            "name": "_get_tags_to_update",
            "location": 425,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "replacement_tags": [
                    "Optional[List[str]]",
                    "str",
                    "List[str]"
                ],
                "additional_tags": [
                    "Optional[List[str]]",
                    "str",
                    "List[str]"
                ],
                "removal_tags": [
                    "Optional[List[str]]",
                    "str",
                    "List[str]",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "IBMQJob.status": {
            "name": "status",
            "location": 478,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQJob.error_message": {
            "name": "error_message",
            "location": 513,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQJob.queue_position": {
            "name": "queue_position",
            "location": 540,
            "return": [
                "Optional[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "refresh": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "IBMQJob.queue_info": {
            "name": "queue_info",
            "location": 562,
            "return": [
                "Optional[bool]",
                "str",
                "Optional[str]",
                "Optional[int]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQJob.creation_date": {
            "name": "creation_date",
            "location": 589,
            "return": [
                "datetime.datetime",
                "int",
                "Union[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQJob.job_id": {
            "name": "job_id",
            "location": 598,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQJob.name": {
            "name": "name",
            "location": 606,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQJob.tags": {
            "name": "tags",
            "location": 614,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQJob.share_level": {
            "name": "share_level",
            "location": 622,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQJob.time_per_step": {
            "name": "time_per_step",
            "location": 635,
            "return": [
                "str",
                "int",
                "float",
                "Dict[int, datetime.datetime]",
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQJob.scheduling_mode": {
            "name": "scheduling_mode",
            "location": 664,
            "return": [
                "bool",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQJob.client_version": {
            "name": "client_version",
            "location": 696,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Optional[Dict]",
                    "dict",
                    "utils.clienClient",
                    "Dict[str, Union[Any, Any, Any, Any]]"
                ]
            }
        },
        "IBMQJob._set_client_version": {
            "name": "_set_client_version",
            "location": 707,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "dict",
                    "Optional[Union[Dict, str, int, bytes]]"
                ]
            }
        },
        "IBMQJob.experiment_id": {
            "name": "experiment_id",
            "location": 724,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQJob.submit": {
            "name": "submit",
            "location": 734,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQJob.refresh": {
            "name": "refresh",
            "location": 748,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQJob.circuits": {
            "name": "circuits",
            "location": 789,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQJob.backend_options": {
            "name": "backend_options",
            "location": 803,
            "return": [
                "bool",
                "float",
                "Optional[Any]",
                "str",
                "int",
                "Union[cirq.circuits.Circuit, cirq.schedules.Schedule]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQJob.header": {
            "name": "header",
            "location": 821,
            "return": [
                "int",
                "dict",
                "Dict[str, Type]",
                "str",
                "Dict[str, float]",
                "Dict[str, str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQJob.wait_for_final_state": {
            "name": "wait_for_final_state",
            "location": 834,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "str",
                    "int",
                    "bool",
                    "Optional[int]",
                    "Optional[str]",
                    "Union[str, bytes]"
                ],
                "wait": [
                    "str",
                    "int",
                    "Union[str, int, None]",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[int]]",
                    "dict"
                ],
                "callback": [
                    "str",
                    "int",
                    "Union[str, int, None]",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[int]]",
                    "dict"
                ]
            }
        },
        "IBMQJob._wait_for_completion": {
            "name": "_wait_for_completion",
            "location": 883,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "int",
                    "raiden.utils.Address.Hex",
                    "Callable[[], Any]"
                ],
                "wait": [
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "int",
                    "raiden.utils.Address.Hex",
                    "Callable[[], Any]"
                ],
                "required_status": [
                    "int",
                    "str",
                    "bool",
                    "datetime.tzinfo"
                ],
                "status_queue": [
                    "raiden.utils.TokenNetworkRegistryAddress",
                    "int",
                    "raiden.utils.Address.Hex",
                    "Callable[[], Any]"
                ]
            }
        },
        "IBMQJob._retrieve_result": {
            "name": "_retrieve_result",
            "location": 931,
            "return": [
                "str",
                "bytes",
                "Set[VT]",
                "Dict[str, Tuple[int, int]]"
            ],
            "arguments": {
                "self": [],
                "refresh": [
                    "Callable[..., Awaitable]"
                ]
            }
        },
        "IBMQJob._set_result": {
            "name": "_set_result",
            "location": 962,
            "return": [
                "str",
                "int",
                "List[Tuple[bytes, bytes]]",
                "Type",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "raw_data": [
                    "bytes",
                    "dict",
                    "Optional[Dict]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "IBMQJob._check_for_error_message": {
            "name": "_check_for_error_message",
            "location": 989,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result_response": [
                    "dict",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Type['Declared']"
                ]
            }
        },
        "IBMQJob._format_message_from_error": {
            "name": "_format_message_from_error",
            "location": 1001,
            "return": [
                "str",
                "zerver.models.Realm",
                "Type[Any]"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "dict",
                    "str",
                    "bool",
                    "werkzeug.exceptions.InternalServerError",
                    "Exception",
                    "List[openapi_core.exceptions.OpenAPIError]",
                    "werkzeug.exceptions.Unauthorized"
                ]
            }
        },
        "IBMQJob._status_callback": {
            "name": "_status_callback",
            "location": 1019,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "status_queue": [
                    "dict"
                ],
                "exit_event": [
                    "threading.Event",
                    "str",
                    "List[Optional['Cell']]",
                    "bool",
                    "Optional[List[int]]",
                    "Iterable[Any]"
                ],
                "callback": [
                    "str",
                    "bool",
                    "int",
                    "Optional[int]",
                    "Set[str]",
                    "Optional[str]"
                ],
                "wait": [
                    "Optional[float]",
                    "bool",
                    "str",
                    "Optional[Dict[str, int]]"
                ]
            }
        },
        "IBMQJob._get_status_position": {
            "name": "_get_status_position",
            "location": 1069,
            "return": [
                "cmk.utils.type_defs.UserId",
                "int"
            ],
            "arguments": {
                "self": [],
                "api_status": [
                    "str",
                    "zerver.models.Realm",
                    "zerver.models.UserProfile"
                ],
                "api_info_queue": [
                    "Optional[Dict]",
                    "Dict[str, Any]",
                    "str",
                    "raiden.utils.Address",
                    "bytes"
                ]
            }
        },
        "IBMQJob._get_qobj": {
            "name": "_get_qobj",
            "location": 1096,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQJob.__getattr__": {
            "name": "__getattr__",
            "location": 1117,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Callable"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/job/job_monitor.py": {
        "_text_checker": {
            "name": "_text_checker",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "job": [
                    "str",
                    "bytes"
                ],
                "interval": [
                    "int",
                    "bytes",
                    "Tuple[int, int]",
                    "str"
                ],
                "_interval_set": [
                    "bool",
                    "hackathon.utils.utils.ResultsMessage",
                    "int",
                    "str"
                ],
                "output": [
                    "TextIO"
                ]
            }
        },
        "job_monitor": {
            "name": "job_monitor",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "job": [
                    "TextIO",
                    "Iterable[str]"
                ],
                "interval": [
                    "int",
                    "dict"
                ],
                "output": [
                    "TextIO",
                    "Iterable[str]"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/job/queueinfo.py": {
        "QueueInfo.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "bool",
                    "float",
                    "Tuple[int, int, int]",
                    "List[float]",
                    "str"
                ],
                "status": [
                    "bool",
                    "float",
                    "Tuple[int, int, int]",
                    "List[float]",
                    "str"
                ],
                "estimated_start_time": [
                    "bool"
                ],
                "estimated_complete_time": [
                    "bool",
                    "Tuple[str, int]"
                ],
                "hub_priority": [
                    "bool",
                    "float",
                    "Tuple[int, int, int]",
                    "List[float]",
                    "str"
                ],
                "group_priority": [
                    "int",
                    "float",
                    "Optional[int]",
                    "bool",
                    "Optional[Union[int, float]]"
                ],
                "project_priority": [
                    "bool",
                    "Dict[str, Any]",
                    "float",
                    "list",
                    "Type",
                    "Dict[str, str]",
                    "Hashable"
                ],
                "job_id": [
                    "str",
                    "Optional[str]",
                    "Mapping[Any, str]",
                    "Optional[Dict]"
                ]
            }
        },
        "QueueInfo.__repr__": {
            "name": "__repr__",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueueInfo.__getattr__": {
            "name": "__getattr__",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Callable"
                ]
            }
        },
        "QueueInfo.format": {
            "name": "format",
            "location": 112,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueueInfo._get_value": {
            "name": "_get_value",
            "location": 141,
            "return": [
                "bool",
                "Union[int, Tuple[int, ...]]",
                "int",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[Any]",
                    "Optional[tildes.lib.datetime.SimpleHoursPeriod]"
                ],
                "default_value": [
                    "str",
                    "Optional[Any]",
                    "Optional[tildes.lib.datetime.SimpleHoursPeriod]"
                ]
            }
        },
        "QueueInfo.estimated_start_time": {
            "name": "estimated_start_time",
            "location": 150,
            "return": [
                "datetime.timedelta",
                "float",
                "Optional[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueueInfo.estimated_complete_time": {
            "name": "estimated_complete_time",
            "location": 157,
            "return": [
                "bool",
                "Optional[float]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/job/utils.py": {
        "build_error_report": {
            "name": "build_error_report",
            "location": 22,
            "return": [
                "Dict[str, str]",
                "str",
                "List[Tuple[str, str]]",
                "List[Callable]",
                "Optional[Dict[str, Any]]",
                "List[str]"
            ],
            "arguments": {
                "results": [
                    "List[Dict[str, Any]]",
                    "int",
                    "list"
                ]
            }
        },
        "get_cancel_status": {
            "name": "get_cancel_status",
            "location": 40,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]",
                "int",
                "Dict[str, bool]"
            ],
            "arguments": {
                "cancel_response": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "api_to_job_error": {
            "name": "api_to_job_error",
            "location": 54,
            "return": [
                "typing.Generator[None, None, None]"
            ],
            "arguments": {}
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/job/__init__.py": {},
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/jupyter/backend_info.py": {
        "_async_job_loader": {
            "name": "_async_job_loader",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "tab": [
                    "Union[qiskiproviders.ibmq.ibmqbackend.IBMQBackend, qiskitesmock.fake_backend.FakeBackend]",
                    "IO",
                    "Dict[str, Any]"
                ],
                "backend": [
                    "Union[qiskiproviders.ibmq.ibmqbackend.IBMQBackend, qiskitesmock.fake_backend.FakeBackend]",
                    "IO",
                    "Dict[str, Any]"
                ]
            }
        },
        "backend_widget": {
            "name": "backend_widget",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "backend": [
                    "int",
                    "Exception",
                    "str",
                    "List[Tuple[int, bytes]]"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/jupyter/config_widget.py": {
        "config_tab": {
            "name": "config_tab",
            "location": 27,
            "return": [
                "str",
                "int",
                "bytes",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "backend": [
                    "dict"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/jupyter/gates_widget.py": {
        "gates_tab": {
            "name": "gates_tab",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "backend": [
                    "int",
                    "bytes",
                    "Any",
                    "bool"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/jupyter/jobs_widget.py": {
        "_title_builder": {
            "name": "_title_builder",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "sel_dict": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, List[Any]]",
                    "MutableMapping",
                    "Mapping[str, Any]"
                ]
            }
        },
        "_job_table_builder": {
            "name": "_job_table_builder",
            "location": 63,
            "return": [
                "type",
                "List[str]",
                "Type",
                "str",
                "Dict[str, Any]",
                "Callable",
                "int",
                "Optional[BaseException]"
            ],
            "arguments": {
                "sel_dict": [
                    "dict",
                    "bool",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "_job_summary": {
            "name": "_job_summary",
            "location": 106,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "backend": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "jobs_tab": {
            "name": "jobs_tab",
            "location": 257,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "backend": [
                    "Union[qiskiproviders.ibmq.ibmqbackend.IBMQBackend, qiskitesmock.fake_backend.FakeBackend]",
                    "IO",
                    "Dict[str, Any]"
                ]
            }
        },
        "_job_summary.callback": {
            "name": "callback",
            "location": 241,
            "return": [
                ""
            ],
            "arguments": {
                "trace": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "selection": [
                    "int",
                    "Callable",
                    "str"
                ],
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/jupyter/live_data_widget.py": {
        "is_qlab_notebook": {
            "name": "is_qlab_notebook",
            "location": 82,
            "return": [],
            "arguments": {}
        },
        "LiveDataVisualization.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LiveDataVisualization.new_selected_job": {
            "name": "new_selected_job",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "LiveDataVisualization.update_job_selector_combobox": {
            "name": "update_job_selector_combobox",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "change": []
            }
        },
        "LiveDataVisualization.get_livedata_jobs": {
            "name": "get_livedata_jobs",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LiveDataVisualization.update_websocket_connection": {
            "name": "update_websocket_connection",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LiveDataVisualization.jobs_combobox": {
            "name": "jobs_combobox",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LiveDataVisualization.setup_views": {
            "name": "setup_views",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LiveDataVisualization.create_visualization": {
            "name": "create_visualization",
            "location": 211,
            "return": [],
            "arguments": {
                "self": [],
                "backend": [],
                "figsize": [],
                "show_title": []
            }
        },
        "LiveDataVisualization.create_title": {
            "name": "create_title",
            "location": 251,
            "return": [],
            "arguments": {
                "self": [],
                "title": [],
                "extra_space": []
            }
        },
        "LiveDataVisualization.pako_inflate": {
            "name": "pako_inflate",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "LiveDataVisualization.ws_on_open": {
            "name": "ws_on_open",
            "location": 286,
            "return": [],
            "arguments": {
                "self": [],
                "ws_connection": []
            }
        },
        "LiveDataVisualization.ws_on_message": {
            "name": "ws_on_message",
            "location": 305,
            "return": [],
            "arguments": {
                "self": [],
                "ws_connection": [],
                "message": []
            }
        },
        "LiveDataVisualization.ws_run_forever": {
            "name": "ws_run_forever",
            "location": 337,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LiveDataVisualization.disconnect_ws": {
            "name": "disconnect_ws",
            "location": 369,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LivePlot.__init__": {
            "name": "__init__",
            "location": 404,
            "return": [],
            "arguments": {
                "self": [],
                "figsize": []
            }
        },
        "LivePlot.clear": {
            "name": "clear",
            "location": 424,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LivePlot.get_plotview_height": {
            "name": "get_plotview_height",
            "location": 438,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LivePlot.widget": {
            "name": "widget",
            "location": 446,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LivePlot.hide": {
            "name": "hide",
            "location": 463,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LivePlot.show": {
            "name": "show",
            "location": 469,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LivePlot.hide_plot": {
            "name": "hide_plot",
            "location": 474,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LivePlot.show_plot": {
            "name": "show_plot",
            "location": 479,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LivePlot.channels_dropdown": {
            "name": "channels_dropdown",
            "location": 485,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LivePlot.update_channel_selector": {
            "name": "update_channel_selector",
            "location": 497,
            "return": [],
            "arguments": {
                "self": [],
                "change": []
            }
        },
        "LivePlot.update_channel_dd_content": {
            "name": "update_channel_dd_content",
            "location": 504,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "LivePlot.draw_data": {
            "name": "draw_data",
            "location": 516,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "LivePlot.fig_to_base64": {
            "name": "fig_to_base64",
            "location": 534,
            "return": [],
            "arguments": {
                "self": [],
                "fig": []
            }
        },
        "LivePlot.setup_live_data_plots": {
            "name": "setup_live_data_plots",
            "location": 549,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "LivePlot.update_live_data": {
            "name": "update_live_data",
            "location": 637,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "LivePlot.reset_all_view_limits": {
            "name": "reset_all_view_limits",
            "location": 705,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LivePlot.reset_view_limits": {
            "name": "reset_view_limits",
            "location": 714,
            "return": [],
            "arguments": {
                "self": [],
                "view": [],
                "reset_x": [],
                "reset_y": []
            }
        },
        "LivePlot.set_view_limits": {
            "name": "set_view_limits",
            "location": 732,
            "return": [],
            "arguments": {
                "self": [],
                "view": [],
                "values_x": [],
                "values_y": [],
                "center_origin": []
            }
        },
        "LivePlot.plot_raw_data": {
            "name": "plot_raw_data",
            "location": 802,
            "return": [],
            "arguments": {
                "self": [],
                "view": [],
                "data": [],
                "n_circuits": []
            }
        },
        "LivePlot.plot_iq_complex_plane": {
            "name": "plot_iq_complex_plane",
            "location": 843,
            "return": [],
            "arguments": {
                "self": [],
                "view": [],
                "real_list": [],
                "imag_list": []
            }
        },
        "LivePlot.plot_signal_circuit": {
            "name": "plot_signal_circuit",
            "location": 872,
            "return": [],
            "arguments": {
                "self": [],
                "view": [],
                "real_list": [],
                "imag_list": [],
                "n_circuits": []
            }
        },
        "LivePlot.plot_optimal_quadrature": {
            "name": "plot_optimal_quadrature",
            "location": 916,
            "return": [],
            "arguments": {
                "self": [],
                "view": [],
                "real_list": [],
                "imag_list": [],
                "n_circuits": []
            }
        },
        "LivePlot.get_channels_list": {
            "name": "get_channels_list",
            "location": 952,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "LivePlot.get_circuits_number": {
            "name": "get_circuits_number",
            "location": 970,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "channel": []
            }
        },
        "LivePlot.get_l0_data": {
            "name": "get_l0_data",
            "location": 988,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "channel": []
            }
        },
        "LivePlot.get_l1_data": {
            "name": "get_l1_data",
            "location": 1000,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "channel": []
            }
        },
        "LivePlot.get_op_data": {
            "name": "get_op_data",
            "location": 1016,
            "return": [],
            "arguments": {
                "self": [],
                "x_values": [],
                "y_values": []
            }
        },
        "ProgressBar.__init__": {
            "name": "__init__",
            "location": 1034,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProgressBar.get_widget": {
            "name": "get_widget",
            "location": 1039,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProgressBar.create_progress_bar": {
            "name": "create_progress_bar",
            "location": 1045,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProgressBar.update_progress_bar": {
            "name": "update_progress_bar",
            "location": 1065,
            "return": [],
            "arguments": {
                "self": [],
                "_max": [],
                "_value": [],
                "_min": []
            }
        },
        "ProgressBar.reset_progress_bar": {
            "name": "reset_progress_bar",
            "location": 1079,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProgressBar.error_progress_bar": {
            "name": "error_progress_bar",
            "location": 1087,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProgressBar.complete_progress_bar": {
            "name": "complete_progress_bar",
            "location": 1092,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JobInformationView.__init__": {
            "name": "__init__",
            "location": 1104,
            "return": [],
            "arguments": {
                "self": [],
                "job": [],
                "backend": []
            }
        },
        "JobInformationView.widget": {
            "name": "widget",
            "location": 1110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JobInformationView.set_job": {
            "name": "set_job",
            "location": 1118,
            "return": [],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "JobInformationView.create_job_information_view": {
            "name": "create_job_information_view",
            "location": 1147,
            "return": [],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "JobInformationView.job_information_content": {
            "name": "job_information_content",
            "location": 1154,
            "return": [],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "JobInformationView.update_progress_bar_widget": {
            "name": "update_progress_bar_widget",
            "location": 1206,
            "return": [],
            "arguments": {
                "self": [],
                "max_value": [],
                "value": []
            }
        },
        "JobInformationView.reset_progress_bar_widget": {
            "name": "reset_progress_bar_widget",
            "location": 1211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JobInformationView.hide_progress_bar": {
            "name": "hide_progress_bar",
            "location": 1216,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JobInformationView.show_progress_bar": {
            "name": "show_progress_bar",
            "location": 1220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JobInformationView.get_job_status": {
            "name": "get_job_status",
            "location": 1226,
            "return": [],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "JobInformationView.get_job_completion_time": {
            "name": "get_job_completion_time",
            "location": 1234,
            "return": [],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "JobInformationView.get_provider": {
            "name": "get_provider",
            "location": 1265,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JobInformationView.time_to_completion": {
            "name": "time_to_completion",
            "location": 1274,
            "return": [],
            "arguments": {
                "self": [],
                "completion_time": []
            }
        },
        "JobInformationView.get_job_sent_queue_time": {
            "name": "get_job_sent_queue_time",
            "location": 1295,
            "return": [],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "JobInformationView.days_hours_minutes": {
            "name": "days_hours_minutes",
            "location": 1310,
            "return": [],
            "arguments": {
                "self": [],
                "tdelta": []
            }
        },
        "JobInformationView.format_timedate": {
            "name": "format_timedate",
            "location": 1322,
            "return": [],
            "arguments": {
                "self": [],
                "date": []
            }
        },
        "LivePlot.set_view_limits.new_limits": {
            "name": "new_limits",
            "location": 746,
            "return": [],
            "arguments": {
                "new_values": [],
                "center_origin": []
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/jupyter/qubits_widget.py": {
        "qubits_tab": {
            "name": "qubits_tab",
            "location": 23,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "backend": [
                    "int",
                    "dict",
                    "Tuple[int, int]"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/jupyter/utils.py": {
        "get_next_reservation": {
            "name": "get_next_reservation",
            "location": 23,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "backend": [
                    "int",
                    "List[str]",
                    "datetime.date",
                    "Optional[datetime.date]",
                    "Optional[int]",
                    "float",
                    "datetime.datetime"
                ],
                "time_period_hr": [
                    "datetime.datetime",
                    "int",
                    "datetime.date"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/jupyter/__init__.py": {},
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/jupyter/dashboard/backend_update.py": {
        "update_backend_info": {
            "name": "update_backend_info",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "device_list": [
                    "ipywidgets.VBox",
                    "str",
                    "List[str]",
                    "int"
                ],
                "interval": [
                    "int",
                    "Optional[int]",
                    "constants.Rank",
                    "str"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/jupyter/dashboard/backend_widget.py": {
        "make_backend_widget": {
            "name": "make_backend_widget",
            "location": 27,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "backend_item": [
                    "raiden.utils.Address",
                    "int",
                    "Type",
                    "List[float]"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/jupyter/dashboard/constants.py": {},
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/jupyter/dashboard/dashboard.py": {
        "_add_device_to_list": {
            "name": "_add_device_to_list",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "backend": [
                    "int",
                    "float",
                    "str",
                    "List[List[T]]"
                ],
                "device_list": [
                    "ipywidgets.VBox",
                    "Optional[List[str]]",
                    "Union[str, List[str]]",
                    "Optional[int]",
                    "List[str]"
                ]
            }
        },
        "build_dashboard_widget": {
            "name": "build_dashboard_widget",
            "location": 269,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "AccordionWithThread.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "children": [
                    "str",
                    "Mapping[str, str]",
                    "Optional[Any]"
                ]
            }
        },
        "AccordionWithThread.__del__": {
            "name": "__del__",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "IQXDashboard.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "IQXDashboard._get_backends": {
            "name": "_get_backends",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IQXDashboard.refresh_jobs_board": {
            "name": "refresh_jobs_board",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IQXDashboard.refresh_device_list": {
            "name": "refresh_device_list",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IQXDashboard.start_dashboard": {
            "name": "start_dashboard",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IQXDashboard.stop_dashboard": {
            "name": "stop_dashboard",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IQXDashboard.update_single_job": {
            "name": "update_single_job",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "update_info": [
                    "int",
                    "Optional[bytes]",
                    "str",
                    "Dict[str, Any]",
                    "list",
                    "bytes"
                ]
            }
        },
        "IQXDashboard.cancel_job": {
            "name": "cancel_job",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "Tuple[str]",
                    "int"
                ]
            }
        },
        "IQXDashboard.clear_done": {
            "name": "clear_done",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IQXDashboard._init_subscriber": {
            "name": "_init_subscriber",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IQXDashboardMagic.iqx_dashboard": {
            "name": "iqx_dashboard",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "List[AnyStr]",
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "Iterable[Sequence[str]]"
                ],
                "cell": [
                    "List[AnyStr]",
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "Iterable[Sequence[str]]"
                ]
            }
        },
        "IQXDashboardMagic.disable_ibmq_dashboard": {
            "name": "disable_ibmq_dashboard",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "List[AnyStr]",
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "Iterable[Sequence[str]]"
                ],
                "cell": [
                    "List[AnyStr]",
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "Iterable[Sequence[str]]"
                ]
            }
        },
        "IQXDashboard._init_subscriber._add_job": {
            "name": "_add_job",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "job": [
                    "Type['Model']",
                    "str",
                    "cmk.utils.type_defs.HostAddress",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/jupyter/dashboard/job_widgets.py": {
        "make_clear_button": {
            "name": "make_clear_button",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "watcher": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "make_labels": {
            "name": "make_labels",
            "location": 55,
            "return": [
                "int",
                "bool",
                "str",
                "Iterable[str]",
                "List[List[str]]"
            ],
            "arguments": {}
        },
        "create_job_widget": {
            "name": "create_job_widget",
            "location": 76,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "watcher": [
                    "bool",
                    "dict",
                    "str"
                ],
                "job": [
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, tuple]",
                    "dict",
                    "str"
                ],
                "backend": [
                    "bool",
                    "dict",
                    "str"
                ],
                "status": [
                    "bool",
                    "dict",
                    "str"
                ],
                "queue_pos": [
                    "bool",
                    "dict",
                    "str"
                ],
                "est_start_time": [
                    "bool",
                    "dict",
                    "str"
                ]
            }
        },
        "make_clear_button.on_clear_button_clicked": {
            "name": "on_clear_button_clicked",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "create_job_widget.cancel_on_click": {
            "name": "cancel_on_click",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/jupyter/dashboard/provider_buttons.py": {
        "_copy_text_thread": {
            "name": "_copy_text_thread",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "button": [
                    "str",
                    "int",
                    "bytes",
                    "Mapping[str, int]",
                    "bool"
                ]
            }
        },
        "_copy_text": {
            "name": "_copy_text",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "provider_buttons": {
            "name": "provider_buttons",
            "location": 45,
            "return": [
                "list",
                "int"
            ],
            "arguments": {
                "providers": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/jupyter/dashboard/utils.py": {},
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/jupyter/dashboard/watcher_monitor.py": {
        "_job_monitor": {
            "name": "_job_monitor",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "job": [
                    "qiskiproviders.jobstatus.JobStatus",
                    "qiskiproviders.ibmq.job.ibmqjob.IBMQJob",
                    "int",
                    "str",
                    "Union[int, float]",
                    "raiden.utils.Address",
                    "List[str]"
                ],
                "status": [
                    "qiskiproviders.jobstatus.JobStatus",
                    "qiskiproviders.ibmq.job.ibmqjob.IBMQJob",
                    "int",
                    "str",
                    "Union[int, float]",
                    "raiden.utils.Address",
                    "List[str]"
                ],
                "watcher": [
                    "qiskiproviders.jobstatus.JobStatus",
                    "qiskiproviders.ibmq.job.ibmqjob.IBMQJob",
                    "int",
                    "str",
                    "Union[int, float]",
                    "raiden.utils.Address",
                    "List[str]"
                ]
            }
        },
        "_job_checker": {
            "name": "_job_checker",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "job": [
                    "Dict[str, str]",
                    "str",
                    "bool"
                ],
                "status": [
                    "qiskiproviders.jobstatus.JobStatus",
                    "str",
                    "int",
                    "List[str]"
                ],
                "watcher": [
                    "bytes",
                    "List[List[int]]",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/jupyter/dashboard/__init__.py": {},
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/managed/exceptions.py": {},
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/managed/ibmqjobmanager.py": {
        "IBMQJobManager.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQJobManager.run": {
            "name": "run",
            "location": 87,
            "return": [
                "Optional[Callable[..., Any]]",
                "str",
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "experiments": [
                    "str",
                    "List[int]",
                    "Set[str]",
                    "Optional[float]",
                    "bool"
                ],
                "backend": [
                    "ibmqbackend.IBMQBackend",
                    "bool",
                    "dict",
                    "Union[str, int]",
                    "Callable[..., Awaitable]",
                    "str"
                ],
                "name": [
                    "str",
                    "Iterable[str]",
                    "Sequence[str]",
                    "Sequence[Any]",
                    "Mapping[str, Any]",
                    "tuple"
                ],
                "max_experiments_per_job": [
                    "str",
                    "bool",
                    "Callable",
                    "bytes",
                    "int",
                    "raiden.utils.TargetAddress"
                ],
                "job_share_level": [
                    "str",
                    "bool",
                    "List[Union[int, Any]]"
                ],
                "job_tags": [
                    "Optional[List[str]]",
                    "str",
                    "Callable",
                    "Dict[str, str]"
                ]
            }
        },
        "IBMQJobManager._split_experiments": {
            "name": "_split_experiments",
            "location": 170,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "experiments": [
                    "list",
                    "dict",
                    "List[int]"
                ],
                "backend": [
                    "ibmqbackend.IBMQBackend",
                    "raiden.utils.Address",
                    "str"
                ],
                "max_experiments_per_job": [
                    "int",
                    "Optional[int]",
                    "Optional[Callable]",
                    "List[str]"
                ]
            }
        },
        "IBMQJobManager.report": {
            "name": "report",
            "location": 197,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "detailed": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "IBMQJobManager.job_sets": {
            "name": "job_sets",
            "location": 223,
            "return": [
                "List[str]",
                "bool",
                "List[cmk.gui.plugins.views.utils.Cell]",
                "List[Tuple[Any, ...]]",
                "Dict[int, int]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "IBMQJobManager.retrieve_job_set": {
            "name": "retrieve_job_set",
            "location": 237,
            "return": [
                "list",
                "Iterable[str]",
                "List[object]",
                "str",
                "Dict[str, Any]",
                "List[str]",
                "Tuple[int, Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "job_set_id": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "Tuple[int, str]"
                ],
                "provider": [
                    "qiskiproviders.ibmq.accountprovider.AccountProvider",
                    "str",
                    "List[Dict[str, Any]]",
                    "Iterable[Union[Any, int]]",
                    "int",
                    "Optional[str]",
                    "List[str]"
                ],
                "refresh": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/managed/managedjob.py": {
        "ManagedJob.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "start_index": [
                    "int"
                ],
                "experiments_count": [
                    "int"
                ],
                "job": [
                    "int",
                    "str"
                ]
            }
        },
        "ManagedJob.submit": {
            "name": "submit",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "circuits": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "job_name": [
                    "str",
                    "int"
                ],
                "backend": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "executor": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "submit_lock": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "job_share_level": [
                    "str",
                    "bool",
                    "List[Union[int, Any]]",
                    "Optional[str]"
                ],
                "job_tags": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "ManagedJob._async_submit": {
            "name": "_async_submit",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "circuits": [
                    "dict",
                    "bool",
                    "str",
                    "List[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "job_name": [
                    "str",
                    "logging.Logger"
                ],
                "backend": [
                    "str",
                    "dict",
                    "Mapping",
                    "Mapping[str, str]"
                ],
                "submit_lock": [
                    "bool",
                    "str",
                    "Optional[Mapping]"
                ],
                "job_tags": [
                    "dict",
                    "bool",
                    "str",
                    "List[str]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "ManagedJob.status": {
            "name": "status",
            "location": 152,
            "return": [
                "bool",
                "Optional[int]",
                "str",
                "dict",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagedJob.result": {
            "name": "result",
            "location": 174,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "dict",
                    "list",
                    "str",
                    "set",
                    "Dict[str, Any]"
                ],
                "partial": [
                    "dict",
                    "list",
                    "str",
                    "set",
                    "Dict[str, Any]"
                ],
                "refresh": [
                    "dict",
                    "list",
                    "str",
                    "set",
                    "Dict[str, Any]"
                ]
            }
        },
        "ManagedJob.error_message": {
            "name": "error_message",
            "location": 208,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[List[int]]",
                "Callable[[Type, str], bool]",
                "Optional['Entity']"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagedJob.cancel": {
            "name": "cancel",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagedJob.qobj": {
            "name": "qobj",
            "location": 234,
            "return": [
                "Optional[str]",
                "str",
                "bool",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/managed/managedjobset.py": {
        "ManagedJobSet.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict",
                    "Optional[Dict]",
                    "Optional[str]",
                    "Sequence[str]"
                ],
                "short_id": [
                    "Optional[bytes]",
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "ManagedJobSet.run": {
            "name": "run",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "experiment_list": [
                    "bool",
                    "int",
                    "str",
                    "float",
                    "List[float]",
                    "List[int]",
                    "List[List[int]]",
                    "list"
                ],
                "backend": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[Tuple]"
                ],
                "executor": [
                    "cmk.utils.type_defs.HostName",
                    "Callable",
                    "Optional[bool]",
                    "bool",
                    "\"prefecengine.state.State\""
                ],
                "job_share_level": [
                    "List[int]",
                    "List[List[int]]",
                    "str",
                    "Callable",
                    "dict",
                    "list",
                    "bool"
                ],
                "job_tags": [
                    "List[asgard.clients.chronos.models.job.ChronosEnvSpec]",
                    "dict",
                    "Union[None, str, List[str], Dict[str, str]]",
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, Set[str]]",
                    "Dict[str, Union[str, int]]",
                    "Type[Any]"
                ]
            }
        },
        "ManagedJobSet.retrieve_jobs": {
            "name": "retrieve_jobs",
            "location": 132,
            "return": [
                "str",
                "Union[tuple, list]",
                "Dict[str, Any]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "int",
                    "qutebrowser.utils.usertypes.ClickTarget",
                    "Exception",
                    "str"
                ],
                "refresh": [
                    "str",
                    "deque",
                    "int",
                    "list"
                ]
            }
        },
        "ManagedJobSet.statuses": {
            "name": "statuses",
            "location": 201,
            "return": [
                "List[str]",
                "Iterable[str]",
                "str",
                "List[Dict[str, str]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagedJobSet.report": {
            "name": "report",
            "location": 210,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "detailed": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ManagedJobSet.results": {
            "name": "results",
            "location": 234,
            "return": [
                "bool",
                "int",
                "float",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "int",
                    "str",
                    "float"
                ],
                "partial": [
                    "bool",
                    "int",
                    "float"
                ],
                "refresh": [
                    "bool",
                    "Dict[bytes, bytes]",
                    "Optional[Callable[..., Any]]",
                    "str"
                ]
            }
        },
        "ManagedJobSet.error_messages": {
            "name": "error_messages",
            "location": 320,
            "return": [
                "str",
                "int",
                "List[List[Any]]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagedJobSet.cancel": {
            "name": "cancel",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagedJobSet.jobs": {
            "name": "jobs",
            "location": 352,
            "return": [
                "bool",
                "int",
                "Tuple[int, int]",
                "tuple",
                "List[str]",
                "Union[List[str], str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagedJobSet.job": {
            "name": "job",
            "location": 363,
            "return": [
                "Tuple[Tuple[int, Any]]"
            ],
            "arguments": {
                "self": [],
                "experiment": [
                    "Union[str, qiskicircuiQuantumCircuit, qiskipulse.Schedule, int]",
                    "int"
                ]
            }
        },
        "ManagedJobSet.qobjs": {
            "name": "qobjs",
            "location": 407,
            "return": [
                "bool",
                "int",
                "Tuple[int, int]",
                "tuple",
                "List[str]",
                "Union[List[str], str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagedJobSet.name": {
            "name": "name",
            "location": 416,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagedJobSet.update_name": {
            "name": "update_name",
            "location": 425,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "ManagedJobSet.job_set_id": {
            "name": "job_set_id",
            "location": 452,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagedJobSet.managed_jobs": {
            "name": "managed_jobs",
            "location": 462,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagedJobSet.tags": {
            "name": "tags",
            "location": 470,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagedJobSet.update_tags": {
            "name": "update_tags",
            "location": 478,
            "return": [
                "str",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "replacement_tags": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "bytes"
                ],
                "additional_tags": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "bytes"
                ],
                "removal_tags": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "bytes"
                ]
            }
        },
        "ManagedJobSet._parse_job_name": {
            "name": "_parse_job_name",
            "location": 540,
            "return": [
                "str",
                "Type",
                "Tuple[str, str]",
                "bool",
                "type",
                "int"
            ],
            "arguments": {
                "self": [],
                "job": [
                    "job.IBMQJob",
                    "str",
                    "Type",
                    "Callable[[str], None]"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/managed/managedresults.py": {
        "ManagedResults.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "job_set": [
                    "bool",
                    "Dict[str, Dict]",
                    "str"
                ],
                "backend_name": [
                    "str",
                    "Callable",
                    "Optional[str]"
                ],
                "success": [
                    "str",
                    "dict",
                    "float",
                    "Dict[str, Any]",
                    "bool",
                    "Union[bool, int, str]"
                ]
            }
        },
        "ManagedResults.data": {
            "name": "data",
            "location": 59,
            "return": [
                "float",
                "Optional[Dict[str, Any]]",
                "bytes",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "experiment": [
                    "List[str]",
                    "AbstractSet[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "ManagedResults.get_memory": {
            "name": "get_memory",
            "location": 83,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "experiment": [
                    "int",
                    "List[str]",
                    "Union[str, qiskicircuiQuantumCircuit, qiskipulse.Schedule, int]"
                ]
            }
        },
        "ManagedResults.get_counts": {
            "name": "get_counts",
            "location": 106,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "experiment": [
                    "int",
                    "List[str]",
                    "Union[str, qiskicircuiQuantumCircuit, qiskipulse.Schedule, int]"
                ]
            }
        },
        "ManagedResults.get_statevector": {
            "name": "get_statevector",
            "location": 127,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "experiment": [
                    "int",
                    "bool"
                ],
                "decimals": [
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "ManagedResults.get_unitary": {
            "name": "get_unitary",
            "location": 151,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "experiment": [
                    "int",
                    "bool"
                ],
                "decimals": [
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "ManagedResults.combine_results": {
            "name": "combine_results",
            "location": 175,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Optional[bool]",
                "int",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagedResults._get_result": {
            "name": "_get_result",
            "location": 204,
            "return": [
                "str",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "experiment": [
                    "Dict[str, str]",
                    "Mapping[str, Any]",
                    "bool"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/managed/utils.py": {
        "requires_submit": {
            "name": "requires_submit",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "format_status_counts": {
            "name": "format_status_counts",
            "location": 66,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "statuses": [
                    "str",
                    "bytes",
                    "List[str]",
                    "float",
                    "list",
                    "int"
                ]
            }
        },
        "format_job_details": {
            "name": "format_job_details",
            "location": 90,
            "return": [
                "str",
                "int",
                "List[List[str]]",
                "tuple"
            ],
            "arguments": {
                "statuses": [
                    "List[Union[qiskiproviders.jobstatus.JobStatus, None]]",
                    "str",
                    "type",
                    "Optional[int]",
                    "int",
                    "Dict[str, Any]"
                ],
                "managed_jobs": [
                    "str",
                    "int"
                ]
            }
        },
        "requires_submit._wrapper": {
            "name": "_wrapper",
            "location": 43,
            "return": [
                "int",
                "Optional[float]",
                "float",
                "str",
                "slice"
            ],
            "arguments": {
                "job_set": [
                    "Callable"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/managed/__init__.py": {},
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/runtime/constants.py": {},
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/runtime/exceptions.py": {},
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/runtime/ibm_runtime_service.py": {
        "IBMRuntimeService.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "str",
                    "vimiv.api.modes.Mode",
                    "Optional[List[str]]"
                ]
            }
        },
        "IBMRuntimeService.pprint_programs": {
            "name": "pprint_programs",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "refresh": [
                    "int",
                    "Callable",
                    "str"
                ],
                "detailed": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "limit": [
                    "int",
                    "Callable",
                    "str"
                ],
                "skip": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "IBMRuntimeService.programs": {
            "name": "programs",
            "location": 132,
            "return": [
                "list",
                "str",
                "List[T]",
                "List['Frame']"
            ],
            "arguments": {
                "self": [],
                "refresh": [
                    "int",
                    "Callable",
                    "str"
                ],
                "limit": [
                    "Dict[str, Any]"
                ],
                "skip": [
                    "bool",
                    "dict",
                    "int",
                    "cmk.base.api.agent_based.type_defs.CheckPlugin"
                ]
            }
        },
        "IBMRuntimeService.program": {
            "name": "program",
            "location": 170,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "program_id": [
                    "int",
                    "str"
                ],
                "refresh": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "IBMRuntimeService._to_program": {
            "name": "_to_program",
            "location": 199,
            "return": [
                "tuple",
                "int"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Dict[str, Any]"
                ]
            }
        },
        "IBMRuntimeService.run": {
            "name": "run",
            "location": 232,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "program_id": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "bool"
                ],
                "options": [
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "dict",
                    "str",
                    "Optional[Any]"
                ],
                "inputs": [
                    "str",
                    "bool",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.Nonce",
                    "int",
                    "raiden.utils.Address",
                    "raiden.utils.ChannelID",
                    "raiden.utils.MessageID",
                    "Optional[bool]"
                ],
                "callback": [
                    "str",
                    "bool",
                    "Optional[Mapping[str, Any]]",
                    "int"
                ],
                "result_decoder": [
                    "int",
                    "str",
                    "raiden.utils.BlockIdentifier"
                ],
                "image": [
                    "TextIO",
                    "raiden.utils.Address",
                    "str",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "IBMRuntimeService.upload_program": {
            "name": "upload_program",
            "location": 304,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "bytes",
                    "str",
                    "List[str]"
                ],
                "metadata": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "IBMRuntimeService._read_metadata": {
            "name": "_read_metadata",
            "location": 382,
            "return": [
                "List[str]",
                "str",
                "Set[str]",
                "Optional[List[str]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "Any",
                    "Optional[Any]",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "IBMRuntimeService.update_program": {
            "name": "update_program",
            "location": 406,
            "return": [
                "str",
                "Set[str]",
                "DefaultDict"
            ],
            "arguments": {
                "self": [],
                "program_id": [
                    "str"
                ],
                "data": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "metadata": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "bytes"
                ],
                "description": [
                    "str",
                    "bytes"
                ],
                "max_execution_time": [
                    "str",
                    "bytes"
                ],
                "spec": [
                    "str",
                    "bytes"
                ]
            }
        },
        "IBMRuntimeService._merge_metadata": {
            "name": "_merge_metadata",
            "location": 468,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "Dict[str, Any]",
                    "OrderedDict",
                    "str",
                    "dict",
                    "List[str]",
                    "Set[int]",
                    "bool"
                ]
            }
        },
        "IBMRuntimeService.delete_program": {
            "name": "delete_program",
            "location": 490,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "program_id": [
                    "str",
                    "int"
                ]
            }
        },
        "IBMRuntimeService.set_program_visibility": {
            "name": "set_program_visibility",
            "location": 510,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "program_id": [
                    "str",
                    "int"
                ],
                "public": [
                    "str",
                    "int"
                ]
            }
        },
        "IBMRuntimeService.job": {
            "name": "job",
            "location": 533,
            "return": [
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "List[str]",
                "str",
                "Dict[str, dict]",
                "Tuple[str, Optional[int]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str"
                ]
            }
        },
        "IBMRuntimeService.jobs": {
            "name": "jobs",
            "location": 554,
            "return": [
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "str",
                    "vimiv.api.modes.Mode",
                    "int",
                    "Dict[str, Dict[Any, int]]"
                ],
                "skip": [
                    "str",
                    "Optional[dict]"
                ],
                "pending": [
                    "str",
                    "raiden.utils.Iterator[raiden.utils.Port]",
                    "vimiv.api.modes.Mode"
                ],
                "program_id": [
                    "str",
                    "raiden.utils.Iterator[raiden.utils.Port]",
                    "vimiv.api.modes.Mode"
                ]
            }
        },
        "IBMRuntimeService.delete_job": {
            "name": "delete_job",
            "location": 607,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str"
                ]
            }
        },
        "IBMRuntimeService._decode_job": {
            "name": "_decode_job",
            "location": 626,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "raw_data": [
                    "str"
                ]
            }
        },
        "IBMRuntimeService.logout": {
            "name": "logout",
            "location": 672,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/runtime/runtime_job.py": {
        "RuntimeJob.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "backend": [
                    "int",
                    "dict",
                    "bool",
                    "Dict[str, str]"
                ],
                "api_client": [
                    "str",
                    "float"
                ],
                "credentials": [
                    "str"
                ],
                "job_id": [
                    "str",
                    "bool",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "dict",
                    "cmk.utils.type_defs.HostName",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]"
                ],
                "program_id": [
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "params": [
                    "int",
                    "dict",
                    "bool",
                    "Dict[str, str]"
                ],
                "creation_date": [
                    "datetime.datetime",
                    "str",
                    "raiden.utils.MessageID",
                    "raiden.utils.Address",
                    "raiden.utils.ChannelID",
                    "bool"
                ],
                "user_callback": [
                    "str",
                    "Optional[str]",
                    "raiden.utils.Optional[raiden.utils.Address]",
                    "raiden.utils.TokenAmount",
                    "Optional[bool]",
                    "raiden.utils.TokenAddress",
                    "Optional[int]"
                ],
                "result_decoder": [
                    "int",
                    "dict",
                    "bool",
                    "Dict[str, str]"
                ],
                "image": [
                    "int",
                    "dict",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "RuntimeJob.result": {
            "name": "result",
            "location": 128,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "float",
                    "int",
                    "str",
                    "List[int]",
                    "Optional[int]"
                ],
                "wait": [
                    "float",
                    "int",
                    "str",
                    "List[int]",
                    "Optional[int]"
                ],
                "decoder": [
                    "float",
                    "int",
                    "dict"
                ]
            }
        },
        "RuntimeJob.cancel": {
            "name": "cancel",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuntimeJob.status": {
            "name": "status",
            "location": 173,
            "return": [
                "str",
                "int",
                "datetime.timedelta",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuntimeJob.error_message": {
            "name": "error_message",
            "location": 182,
            "return": [
                "str",
                "List[Tuple[str, str]]",
                "bool",
                "List[Callable]",
                "Optional[Dict[str, Any]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuntimeJob.wait_for_final_state": {
            "name": "wait_for_final_state",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "int",
                    "str",
                    "Optional[str]",
                    "datetime.datetime",
                    "Optional[List[str]]"
                ],
                "wait": [
                    "str",
                    "bool",
                    "List[int]",
                    "int"
                ]
            }
        },
        "RuntimeJob.stream_results": {
            "name": "stream_results",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "dict",
                    "bytes",
                    "int"
                ],
                "decoder": [
                    "dict",
                    "bytes",
                    "int"
                ]
            }
        },
        "RuntimeJob.cancel_result_streaming": {
            "name": "cancel_result_streaming",
            "location": 247,
            "return": [
                "Optional[bool]",
                "Dict[str, Any]",
                "Set[VT]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuntimeJob.logs": {
            "name": "logs",
            "location": 253,
            "return": [
                "List[int]",
                "int",
                "Iterator[Tuple[Any, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuntimeJob._set_status_and_error_message": {
            "name": "_set_status_and_error_message",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuntimeJob._set_status": {
            "name": "_set_status",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_response": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "RuntimeJob._set_error_message": {
            "name": "_set_error_message",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_response": [
                    "purplship.core.utils.xml.Element",
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "RuntimeJob._is_streaming": {
            "name": "_is_streaming",
            "location": 308,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuntimeJob._start_websocket_client": {
            "name": "_start_websocket_client",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuntimeJob._stream_results": {
            "name": "_stream_results",
            "location": 336,
            "return": [
                "Optional[bool]",
                "Dict[str, Any]",
                "Set[VT]",
                "str"
            ],
            "arguments": {
                "self": [],
                "result_queue": [
                    "Dict[str, Any]",
                    "str"
                ],
                "user_callback": [],
                "decoder": [
                    "dict",
                    "bool",
                    "str",
                    "int",
                    "Callable",
                    "Optional[List]"
                ]
            }
        },
        "RuntimeJob._empty_result_queue": {
            "name": "_empty_result_queue",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "result_queue": [
                    "raiden.utils.Dict[raiden.transfer.identifiers.QueueIdentifier, raiden.utils.List[raiden.messages.abstracMessage]]",
                    "bob_emploi.frontend.api.user_pb2.User",
                    "Dict[str, Any]",
                    "raiden.utils.Address"
                ]
            }
        },
        "RuntimeJob.job_id": {
            "name": "job_id",
            "location": 375,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuntimeJob.backend": {
            "name": "backend",
            "location": 383,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuntimeJob.image": {
            "name": "image",
            "location": 392,
            "return": [
                "str",
                "int",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuntimeJob.inputs": {
            "name": "inputs",
            "location": 402,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuntimeJob.program_id": {
            "name": "program_id",
            "location": 411,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuntimeJob.creation_date": {
            "name": "creation_date",
            "location": 420,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/runtime/runtime_options.py": {
        "RuntimeOptions.validate": {
            "name": "validate",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/runtime/runtime_program.py": {
        "RuntimeProgram.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "program_name": [
                    "str",
                    "Optional[str]",
                    "Collection[str]"
                ],
                "program_id": [
                    "str"
                ],
                "description": [
                    "Optional[str]",
                    "bool",
                    "Iterable[str]",
                    "str"
                ],
                "parameters": [
                    "Optional[str]",
                    "bool",
                    "Iterable[str]",
                    "str"
                ],
                "return_values": [
                    "bool",
                    "int",
                    "str",
                    "Optional[List[str]]"
                ],
                "interim_results": [
                    "str",
                    "bool",
                    "Dict[int, Set[str]]"
                ],
                "max_execution_time": [
                    "str",
                    "Optional[str]"
                ],
                "backend_requirements": [
                    "Optional[str]",
                    "bool",
                    "Iterable[str]",
                    "str"
                ],
                "creation_date": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "update_date": [
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "is_public": [
                    "Optional[str]",
                    "bool",
                    "Iterable[str]",
                    "str"
                ],
                "data": [
                    "str",
                    "bool",
                    "dict",
                    "Dict[str, str]"
                ],
                "api_client": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "RuntimeProgram.__str__": {
            "name": "__str__",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuntimeProgram.to_dict": {
            "name": "to_dict",
            "location": 144,
            "return": [
                "Dict[str, Any]",
                "str",
                "dict",
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuntimeProgram.parameters": {
            "name": "parameters",
            "location": 162,
            "return": [
                "bytes",
                "bool",
                "Type",
                "Dict[str, Tuple[int, int]]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuntimeProgram.program_id": {
            "name": "program_id",
            "location": 178,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuntimeProgram.name": {
            "name": "name",
            "location": 187,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuntimeProgram.description": {
            "name": "description",
            "location": 196,
            "return": [
                "bool",
                "str",
                "qiskiproviders.ibmq.ibmqfactory.IBMQFactory"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuntimeProgram.return_values": {
            "name": "return_values",
            "location": 205,
            "return": [
                "float",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuntimeProgram.interim_results": {
            "name": "interim_results",
            "location": 214,
            "return": [
                "int",
                "bool",
                "Tuple[str, List[str]]",
                "Tuple[str, str]",
                "float",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuntimeProgram.max_execution_time": {
            "name": "max_execution_time",
            "location": 223,
            "return": [
                "Dict[str, str]",
                "Dict[str, Any]",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuntimeProgram.backend_requirements": {
            "name": "backend_requirements",
            "location": 234,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuntimeProgram.creation_date": {
            "name": "creation_date",
            "location": 243,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuntimeProgram.update_date": {
            "name": "update_date",
            "location": 252,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuntimeProgram.is_public": {
            "name": "is_public",
            "location": 261,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuntimeProgram.data": {
            "name": "data",
            "location": 270,
            "return": [
                "Dict[str, List[int]]",
                "str",
                "starfish.types.Axes",
                "Optional[float]",
                "dict",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuntimeProgram._refresh": {
            "name": "_refresh",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParameterNamespace.__init__": {
            "name": "__init__",
            "location": 325,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parameters": [
                    "str",
                    "Dict[str, Tuple[Any, Any]]",
                    "Dict[str, Any]",
                    "Optional[Dict]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "ParameterNamespace.metadata": {
            "name": "metadata",
            "location": 344,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParameterNamespace.validate": {
            "name": "validate",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParameterNamespace.__str__": {
            "name": "__str__",
            "location": 367,
            "return": [
                "str",
                "tuple",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RuntimeProgram.__str__._format_common": {
            "name": "_format_common",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "schema": [
                    "str",
                    "bytearray",
                    "int",
                    "dict"
                ]
            }
        },
        "RuntimeProgram.__str__.sentence_case": {
            "name": "sentence_case",
            "location": 111,
            "return": [
                "mypy.types.Type",
                "str",
                "bool"
            ],
            "arguments": {
                "camel_case_text": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/runtime/utils.py": {
        "to_base64_string": {
            "name": "to_base64_string",
            "location": 99,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "_serialize_and_encode": {
            "name": "_serialize_and_encode",
            "location": 111,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "int",
                    "Dict[str, Any]"
                ],
                "serializer": [
                    "bytes",
                    "int",
                    "Dict[str, Any]"
                ],
                "compress": [
                    "dict",
                    "bytes"
                ]
            }
        },
        "_decode_and_deserialize": {
            "name": "_decode_and_deserialize",
            "location": 138,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "T"
                ],
                "deserializer": [
                    "int",
                    "bool",
                    "numpy.ndarray",
                    "str"
                ],
                "decompress": [
                    "bytes",
                    "int",
                    "tuple",
                    "numpy.ndarray",
                    "dict"
                ]
            }
        },
        "deserialize_from_settings": {
            "name": "deserialize_from_settings",
            "location": 160,
            "return": [
                "float",
                "Sequence[float]",
                "Tuple[int, int]",
                "tuple"
            ],
            "arguments": {
                "mod_name": [
                    "str"
                ],
                "class_name": [
                    "str"
                ],
                "settings": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[int]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "_set_int_keys_flag": {
            "name": "_set_int_keys_flag",
            "location": 181,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "Optional[Dict]",
                "List[int]"
            ],
            "arguments": {
                "obj": [
                    "Union[None, str]",
                    "list",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "_cast_strings_keys_to_int": {
            "name": "_cast_strings_keys_to_int",
            "location": 198,
            "return": [
                "int",
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "obj": [
                    "List[Optional[Any]]",
                    "List[str]",
                    "dict",
                    "str"
                ]
            }
        },
        "RuntimeEncoder.default": {
            "name": "default",
            "location": 228,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int"
                ]
            }
        },
        "RuntimeDecoder.__init__": {
            "name": "__init__",
            "location": 283,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RuntimeDecoder.object_hook": {
            "name": "object_hook",
            "location": 295,
            "return": [
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/runtime/__init__.py": {},
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/runtime/program/program_backend.py": {
        "ProgramBackend.run": {
            "name": "run",
            "location": 36,
            "return": [
                "qiskit.providers.job.JobV1"
            ],
            "arguments": {
                "self": [],
                "circuits": [
                    "bool",
                    "float"
                ],
                "timeout": [
                    "bool",
                    "float"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/runtime/program/program_template.py": {
        "program": {
            "name": "program",
            "location": 27,
            "return": [
                "List[int]",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {
                "backend": [
                    "List[int]",
                    "bool"
                ],
                "user_messenger": [
                    "List[int]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 34,
            "return": [
                "str",
                "bool",
                "int",
                "List[int]",
                "List[str]",
                "Dict[str, int]",
                "Dict[str, str]",
                "List[Tuple[str, str]]",
                "Optional[str]"
            ],
            "arguments": {
                "backend": [
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "str"
                ],
                "user_messenger": [
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "str"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/runtime/program/result_decoder.py": {
        "ResultDecoder.decode": {
            "name": "decode",
            "location": 41,
            "return": [
                "int",
                "bytes",
                "cmk.utils.type_defs.EventRule"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type",
                    "Dict[str, Any]",
                    "bytes",
                    "complex",
                    "dict"
                ],
                "data": [
                    "str",
                    "Type",
                    "Dict[str, Any]",
                    "bytes",
                    "complex",
                    "dict"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/runtime/program/user_messenger.py": {
        "UserMessenger.publish": {
            "name": "publish",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "dict",
                    "list",
                    "str"
                ],
                "encoder": [
                    "dict",
                    "list",
                    "str"
                ],
                "final": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/runtime/program/__init__.py": {},
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/utils/backend.py": {
        "convert_reservation_data": {
            "name": "convert_reservation_data",
            "location": 21,
            "return": [
                "str",
                "dict",
                "set",
                "bool"
            ],
            "arguments": {
                "raw_reservations": [
                    "list",
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "backend_name": [
                    "Mapping[str, T]",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Optional[int]",
                    "dict"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/utils/converters.py": {
        "utc_to_local": {
            "name": "utc_to_local",
            "location": 23,
            "return": [
                "int",
                "bool",
                "Optional[int]",
                "str",
                "dict",
                "float"
            ],
            "arguments": {
                "utc_dt": [
                    "str",
                    "Union[datetime.datetime, str]",
                    "int",
                    "Dict[str, Union[str, int, bool]]"
                ]
            }
        },
        "local_to_utc": {
            "name": "local_to_utc",
            "location": 44,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "local_dt": [
                    "int",
                    "Union[datetime.datetime, str]",
                    "str",
                    "Dict[str, Union[str, int, bool]]"
                ]
            }
        },
        "local_to_utc_str": {
            "name": "local_to_utc_str",
            "location": 68,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "local_dt": [
                    "str",
                    "Mapping",
                    "Dict[str, Any]",
                    "bytes",
                    "bool"
                ],
                "suffix": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "convert_tz": {
            "name": "convert_tz",
            "location": 85,
            "return": [
                "Optional[int]",
                "bool",
                "str",
                "Optional[str]",
                "Optional[Dict]"
            ],
            "arguments": {
                "input_dt": [
                    "Optional[float]",
                    "str",
                    "float",
                    "Optional[str]",
                    "Optional[Tuple[float, float]]",
                    "bool"
                ],
                "to_utc": [
                    "bool",
                    "Type[T]",
                    "str",
                    "float",
                    "FrozenSet[int]"
                ]
            }
        },
        "utc_to_local_all": {
            "name": "utc_to_local_all",
            "location": 102,
            "return": [
                "datetime.datetime",
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "data": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "str_to_utc": {
            "name": "str_to_utc",
            "location": 123,
            "return": [
                "Optional[str]",
                "Optional[float]",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "utc_dt": [
                    "Optional[bool]",
                    "Callable[[Optional, Optional, str], None]",
                    "bool",
                    "str",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "seconds_to_duration": {
            "name": "seconds_to_duration",
            "location": 138,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "seconds": [
                    "int",
                    "Tuple[int]",
                    "str",
                    "float"
                ]
            }
        },
        "duration_difference": {
            "name": "duration_difference",
            "location": 161,
            "return": [
                "str",
                "Optional[datetime.datetime]",
                "int",
                "Optional[datetime.tzinfo]",
                "datetime.timedelta"
            ],
            "arguments": {
                "date_time": [
                    "datetime.datetime",
                    "datetime.date",
                    "Optional[datetime.datetime]"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/utils/json_decoder.py": {
        "decode_pulse_qobj": {
            "name": "decode_pulse_qobj",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "pulse_qobj": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "decode_pulse_defaults": {
            "name": "decode_pulse_defaults",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "defaults": [
                    "dict",
                    "Type",
                    "int"
                ]
            }
        },
        "decode_backend_properties": {
            "name": "decode_backend_properties",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "properties": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "decode_backend_configuration": {
            "name": "decode_backend_configuration",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "decode_result": {
            "name": "decode_result",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "result": [
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "_to_complex": {
            "name": "_to_complex",
            "location": 95,
            "return": [
                "str",
                "bool",
                "Union[int, Tuple[int, ...]]",
                "Optional[float]"
            ],
            "arguments": {
                "value": [
                    "float",
                    "list",
                    "List[Union[int, float]]",
                    "str",
                    "T"
                ]
            }
        },
        "_decode_pulse_library_item": {
            "name": "_decode_pulse_library_item",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "pulse_library_item": [
                    "dict",
                    "int",
                    "bytes",
                    "Optional[dict]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "_decode_pulse_qobj_instr": {
            "name": "_decode_pulse_qobj_instr",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "pulse_qobj_instr": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/utils/json_encoder.py": {
        "IQXJsonEncoder.__encode": {
            "name": "__encode",
            "location": 26,
            "return": [
                "str",
                "Union[str, List[str]]"
            ],
            "arguments": {
                "self": [],
                "param": [
                    "dict",
                    "Mapping",
                    "Dict[str, \"Outcome\"]",
                    "Optional[Tuple[str, ...]]"
                ]
            }
        },
        "IQXJsonEncoder.encode": {
            "name": "encode",
            "location": 46,
            "return": [
                "str",
                "int",
                "List[str]",
                "OrderedDict"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "str",
                    "List[str]",
                    "Pattern"
                ]
            }
        },
        "IQXJsonEncoder.default": {
            "name": "default",
            "location": 53,
            "return": [
                "Callable[[Mapping], T]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "o": []
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/utils/qobj_utils.py": {
        "_serialize_noise_model": {
            "name": "_serialize_noise_model",
            "location": 22,
            "return": [
                "Dict[str, Any]",
                "Optional[str]",
                "str",
                "Mapping[str, int]"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "update_qobj_config": {
            "name": "update_qobj_config",
            "location": 47,
            "return": [
                "Callable[[bytes], None]",
                "bool",
                "float"
            ],
            "arguments": {
                "qobj": [
                    "Union[qiskiqobj.QasmQobj, qiskiqobj.PulseQobj]",
                    "int",
                    "dict",
                    "Optional[int]",
                    "str"
                ],
                "backend_options": [
                    "Optional[Dict]",
                    "Dict[str, Union[str, int]]",
                    "Dict[str, Dict[str, str]]",
                    "dict",
                    "str"
                ],
                "noise_model": [
                    "int",
                    "Dict[str, list]"
                ]
            }
        },
        "dict_to_qobj": {
            "name": "dict_to_qobj",
            "location": 82,
            "return": [
                "int",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "qobj_dict": [
                    "dict",
                    "Dict[str, float]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/utils/utils.py": {
        "api_status_to_job_status": {
            "name": "api_status_to_job_status",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "api_status": [
                    "int",
                    "str"
                ]
            }
        },
        "to_python_identifier": {
            "name": "to_python_identifier",
            "location": 62,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict",
                    "Callable"
                ]
            }
        },
        "validate_job_tags": {
            "name": "validate_job_tags",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "job_tags": [
                    "Optional[List[str]]",
                    "str",
                    "Dict[int, str]",
                    "Optional[str]",
                    "Callable",
                    "bool",
                    "Set[str]"
                ],
                "exception": [
                    "Type[Exception]",
                    "list",
                    "Dict[str, Any]",
                    "str",
                    "Iterable[str]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "setup_logger": {
            "name": "setup_logger",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "logger": [
                    "logging.Logger",
                    "int",
                    "bool"
                ]
            }
        },
        "filter_data": {
            "name": "filter_data",
            "location": 150,
            "return": [
                "dict",
                "bytes",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Union[Dict, List]",
                    "Dict[str, Any]"
                ]
            }
        },
        "_filter_value": {
            "name": "_filter_value",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "dict",
                    "List[str]"
                ],
                "filter_keys": [
                    "List[Union[str, Any]]",
                    "bool",
                    "bytes",
                    "str"
                ]
            }
        },
        "RefreshQueue.__init__": {
            "name": "__init__",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "maxsize": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "RefreshQueue.put": {
            "name": "put",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "type",
                    "T",
                    "os.DirEntry",
                    "Type",
                    "dict"
                ]
            }
        },
        "RefreshQueue.get": {
            "name": "get",
            "location": 223,
            "return": [
                "str",
                "Dict[str, Dict[str, Any]]",
                "Dict[str, Union[str, Set]]"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "bytes",
                    "bool"
                ],
                "timeout": [
                    "int",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "RefreshQueue.notify_all": {
            "name": "notify_all",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/utils/__init__.py": {},
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/visualization/colormaps.py": {
        "_sns_to_plotly": {
            "name": "_sns_to_plotly",
            "location": 38,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "cmap": [
                    "tuple",
                    "numpy.ndarray",
                    "List['cirq.Qid']",
                    "list"
                ],
                "pl_entries": [
                    "int",
                    "numpy.ndarray",
                    "str"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/visualization/device_layouts.py": {},
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/visualization/exceptions.py": {},
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/visualization/__init__.py": {},
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/visualization/interactive/error_map.py": {
        "iplot_error_map": {
            "name": "iplot_error_map",
            "location": 32,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "dict",
                "Set[str]"
            ],
            "arguments": {
                "backend": [
                    "bool",
                    "Optional[str]",
                    "Dict[int, dict]",
                    "Type[Any]"
                ],
                "figsize": [
                    "Tuple[int]",
                    "float",
                    "numpy.ndarray"
                ],
                "show_title": [
                    "numpy.ndarray",
                    "Optional[dict]",
                    "int"
                ],
                "remove_badcal_edges": [
                    "bool",
                    "Dict[str, object]",
                    "Union[numpy.ndarray, numpy.void]",
                    "set",
                    "str",
                    "Iterable"
                ],
                "background_color": [
                    "str",
                    "bool",
                    "int"
                ],
                "as_widget": [
                    "bool",
                    "int",
                    "bytes",
                    "str"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/visualization/interactive/gate_map.py": {
        "iplot_gate_map": {
            "name": "iplot_gate_map",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "backend": [
                    "int",
                    "dict",
                    "str"
                ],
                "figsize": [
                    "int",
                    "float",
                    "bool",
                    "bytes",
                    "Optional[List[int]]"
                ],
                "label_qubits": [
                    "str",
                    "Optional[Any]",
                    "Dict[str, Any]"
                ],
                "qubit_size": [
                    "Optional[int]",
                    "Optional[str]",
                    "int",
                    "Union[int, None]"
                ],
                "line_width": [
                    "Optional[float]"
                ],
                "font_size": [
                    "Optional[str]",
                    "int",
                    "Optional[Dict[str, str]]",
                    "Optional[Tuple[int, ...]]",
                    "Optional[int]"
                ],
                "qubit_color": [
                    "int",
                    "Callable[[T], None]",
                    "Union[int, float]",
                    "Tuple[str]",
                    "str",
                    "Callable[[Any], None]"
                ],
                "qubit_labels": [
                    "int",
                    "List[\"libkol.types.ItemQuantity\"]",
                    "Optional[bool]"
                ],
                "line_color": [
                    "int",
                    "Tuple[int, int]",
                    "str",
                    "List[str]"
                ],
                "font_color": [
                    "str",
                    "Optional[Any]",
                    "Dict[str, Any]"
                ],
                "background_color": [
                    "int",
                    "float",
                    "bool",
                    "bytes",
                    "Optional[List[int]]"
                ],
                "as_widget": [
                    "List[str]",
                    "bool",
                    "Optional[bool]",
                    "int",
                    "List[int]"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/visualization/interactive/plotly_wrapper.py": {
        "PlotlyFigure.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fig": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "PlotlyFigure.__repr__": {
            "name": "__repr__",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlotlyFigure._ipython_display_": {
            "name": "_ipython_display_",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PlotlyFigure.show": {
            "name": "show",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlotlyFigure.savefig": {
            "name": "savefig",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "int",
                    "bool",
                    "dict"
                ],
                "figsize": [
                    "str",
                    "int",
                    "bool",
                    "dict"
                ],
                "scale": [
                    "str",
                    "int",
                    "bool",
                    "dict"
                ],
                "transparent": [
                    "bool",
                    "str"
                ]
            }
        },
        "PlotlyWidget.show": {
            "name": "show",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlotlyWidget.savefig": {
            "name": "savefig",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "int",
                    "bool"
                ],
                "figsize": [
                    "int",
                    "bool"
                ],
                "scale": [
                    "int",
                    "bool"
                ],
                "transparent": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/qiskit/providers/ibmq/visualization/interactive/__init__.py": {},
    "qiskit-ibmq-provider-master/test/contextmanagers.py": {
        "_mocked_initialize_provider": {
            "name": "_mocked_initialize_provider",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [
                    "int",
                    "TextIO"
                ],
                "credentials": [
                    "str"
                ],
                "preferences": [
                    "str",
                    "Optional[str]",
                    "Optional[Sequence[str]]"
                ]
            }
        },
        "mock_ibmq_provider": {
            "name": "mock_ibmq_provider",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "custom_envs.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "new_environ": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "custom_envs.__enter__": {
            "name": "__enter__",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "custom_envs.__exit__": {
            "name": "__exit__",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "no_envs.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "vars_to_remove": [
                    "Union[None, bool]",
                    "dict",
                    "Type",
                    "type",
                    "int",
                    "float"
                ]
            }
        },
        "no_envs.__enter__": {
            "name": "__enter__",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "no_envs.__exit__": {
            "name": "__exit__",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "custom_qiskitrc.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contents": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "custom_qiskitrc.__enter__": {
            "name": "__enter__",
            "location": 86,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "custom_qiskitrc.__exit__": {
            "name": "__exit__",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "no_file.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "no_file.__enter__": {
            "name": "__enter__",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "no_file.__exit__": {
            "name": "__exit__",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "no_file.side_effect": {
            "name": "side_effect",
            "location": 113,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "filename_": [
                    "str"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/test/decorators.py": {
        "requires_qe_access": {
            "name": "requires_qe_access",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "func": [
                    "bool",
                    "Callable",
                    "dict",
                    "Mapping"
                ]
            }
        },
        "requires_providers": {
            "name": "requires_providers",
            "location": 77,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "requires_provider": {
            "name": "requires_provider",
            "location": 115,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "requires_private_provider": {
            "name": "requires_private_provider",
            "location": 140,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "requires_device": {
            "name": "requires_device",
            "location": 171,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "requires_runtime_device": {
            "name": "requires_runtime_device",
            "location": 206,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "_get_backend": {
            "name": "_get_backend",
            "location": 232,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "qe_token": [
                    "str",
                    "bool"
                ],
                "qe_url": [
                    "str",
                    "bool"
                ],
                "backend_name": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "_get_credentials": {
            "name": "_get_credentials",
            "location": 257,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "_get_custom_provider": {
            "name": "_get_custom_provider",
            "location": 291,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "ibmq_factory": [
                    "qiskiproviders.ibmq.ibmqfactory.IBMQFactory",
                    "dict",
                    "Dict[int, dict]"
                ]
            }
        },
        "_enable_account": {
            "name": "_enable_account",
            "location": 308,
            "return": [
                "OrderedDict",
                "str"
            ],
            "arguments": {
                "qe_token": [
                    "str"
                ],
                "qe_url": [
                    "str",
                    "bool"
                ]
            }
        },
        "requires_qe_access._wrapper": {
            "name": "_wrapper",
            "location": 64,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "requires_providers._wrapper": {
            "name": "_wrapper",
            "location": 92,
            "return": [],
            "arguments": {}
        },
        "requires_provider._wrapper": {
            "name": "_wrapper",
            "location": 130,
            "return": [],
            "arguments": {}
        },
        "requires_private_provider._wrapper": {
            "name": "_wrapper",
            "location": 153,
            "return": [],
            "arguments": {}
        },
        "requires_device._wrapper": {
            "name": "_wrapper",
            "location": 192,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "requires_runtime_device._wrapper": {
            "name": "_wrapper",
            "location": 217,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "obj": [
                    "tuple",
                    "List[str]",
                    "bool",
                    "str",
                    "Callable"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/test/fake_account_client.py": {
        "BaseFakeJob.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "executor": [
                    "str",
                    "bool",
                    "int",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "job_id": [
                    "str",
                    "Optional[str]"
                ],
                "qobj": [
                    "str",
                    "bool",
                    "int",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "backend_name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "job_tags": [
                    "str",
                    "Optional[str]"
                ],
                "job_name": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "BaseFakeJob._auto_progress": {
            "name": "_auto_progress",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFakeJob.data": {
            "name": "data",
            "location": 96,
            "return": [
                "Dict[str, List[int]]",
                "str",
                "Optional[float]",
                "dict",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFakeJob.cancel": {
            "name": "cancel",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFakeJob.result": {
            "name": "result",
            "location": 119,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFakeJob.status": {
            "name": "status",
            "location": 125,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFakeJob.name": {
            "name": "name",
            "location": 129,
            "return": [
                "str",
                "Type",
                "Callable[..., T]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NewFieldFakeJob.data": {
            "name": "data",
            "location": 147,
            "return": [
                "Dict[str, List[int]]",
                "str",
                "Optional[float]",
                "dict",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MissingFieldFakeJob.data": {
            "name": "data",
            "location": 157,
            "return": [
                "Dict[str, List[int]]",
                "str",
                "Optional[float]",
                "dict",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FailedFakeJob.data": {
            "name": "data",
            "location": 174,
            "return": [
                "Dict[str, List[int]]",
                "str",
                "Optional[float]",
                "dict",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFakeAccountClient.__init__": {
            "name": "__init__",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "job_limit": [
                    "bool",
                    "int",
                    "str",
                    "Dict[str, Any]"
                ],
                "job_class": [
                    "int",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "BaseFakeAccountClient.list_jobs_statuses": {
            "name": "list_jobs_statuses",
            "location": 195,
            "return": [
                "dict",
                "str",
                "IO[bytes]",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "bool",
                    "str",
                    "Optional[Any]",
                    "bytes"
                ],
                "skip": [
                    "bool",
                    "str",
                    "Optional[Any]",
                    "bytes"
                ],
                "descending": [
                    "bool",
                    "Callable",
                    "str"
                ],
                "extra_filter": [
                    "bool",
                    "Callable",
                    "str"
                ]
            }
        },
        "BaseFakeAccountClient.job_submit": {
            "name": "job_submit",
            "location": 205,
            "return": [
                "float",
                "Dict[str, Any]",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "backend_name": [
                    "str",
                    "dict"
                ],
                "qobj_dict": [
                    "str",
                    "dict"
                ],
                "job_name": [
                    "str",
                    "dict"
                ],
                "job_tags": [
                    "str",
                    "dict"
                ]
            }
        },
        "BaseFakeAccountClient.job_download_qobj": {
            "name": "job_download_qobj",
            "location": 226,
            "return": [
                "bool",
                "int",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "Mapping[str, Any]",
                    "int"
                ]
            }
        },
        "BaseFakeAccountClient.job_result": {
            "name": "job_result",
            "location": 230,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "bool"
                ]
            }
        },
        "BaseFakeAccountClient.job_get": {
            "name": "job_get",
            "location": 237,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "Optional[float]",
                    "int",
                    "List[str]",
                    "AsyncIterator[T]",
                    "Dict[str, Any]",
                    "List[dict]",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "BaseFakeAccountClient.job_status": {
            "name": "job_status",
            "location": 241,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "bytes",
                    "int",
                    "List[Dict[str, str]]",
                    "str"
                ]
            }
        },
        "BaseFakeAccountClient.job_final_status": {
            "name": "job_final_status",
            "location": 245,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "BaseFakeAccountClient.job_properties": {
            "name": "job_properties",
            "location": 260,
            "return": [
                "int",
                "Dict[str, Any]",
                "Callable[..., Awaitable]",
                "bytes",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFakeAccountClient.job_cancel": {
            "name": "job_cancel",
            "location": 264,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "int",
                    "str"
                ]
            }
        },
        "BaseFakeAccountClient.backend_job_limit": {
            "name": "backend_job_limit",
            "location": 269,
            "return": [
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFakeAccountClient.job_update_attribute": {
            "name": "job_update_attribute",
            "location": 273,
            "return": [
                "bool",
                "str",
                "IO"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "Dict[str, str]",
                    "Union[str, List[str]]"
                ],
                "attr_name": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Callable[[], int]"
                ],
                "attr_value": [
                    "str",
                    "List[int]",
                    "Callable",
                    "Optional[str]"
                ]
            }
        },
        "BaseFakeAccountClient.tear_down": {
            "name": "tear_down",
            "location": 282,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFakeAccountClient._unfinished_jobs": {
            "name": "_unfinished_jobs",
            "location": 290,
            "return": [
                "int",
                "str",
                "bool",
                "Sequence[int]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFakeAccountClient._get_job": {
            "name": "_get_job",
            "location": 294,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str"
                ]
            }
        },
        "JobSubmitFailClient.__init__": {
            "name": "__init__",
            "location": 304,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "max_fail_count": [
                    "int",
                    "Optional[int]",
                    "Dict[int, int]"
                ]
            }
        },
        "JobSubmitFailClient.job_submit": {
            "name": "job_submit",
            "location": 309,
            "return": [
                "List[str]",
                "int",
                "List[List[str]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobTimeoutClient.__init__": {
            "name": "__init__",
            "location": 320,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "JobTimeoutClient.job_final_status": {
            "name": "job_final_status",
            "location": 325,
            "return": [
                "bob_emploi.frontend.api.user_pb2.EmailSent",
                "Dict[str, Any]",
                "Sequence[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/test/http_server.py": {
        "BaseHandler._get_code": {
            "name": "_get_code",
            "location": 27,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseHandler._get_response_data": {
            "name": "_get_response_data",
            "location": 31,
            "return": [
                "Tuple[int, str]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseHandler._get_error_data": {
            "name": "_get_error_data",
            "location": 35,
            "return": [
                "Dict[str, Any]",
                "Tuple[dict, int]",
                "dict",
                "str",
                "bool",
                "Optional[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseHandler._respond": {
            "name": "_respond",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseHandler.do_GET": {
            "name": "do_GET",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseHandler.do_POST": {
            "name": "do_POST",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseHandler.do_PUT": {
            "name": "do_PUT",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerErrorOnceHandler._get_code": {
            "name": "_get_code",
            "location": 70,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientErrorHandler._get_code": {
            "name": "_get_code",
            "location": 81,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleServer.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "handler_class": [
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "SimpleServer.start": {
            "name": "start",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleServer.stop": {
            "name": "stop",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleServer.set_error_response": {
            "name": "set_error_response",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "error_response": [
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "SimpleServer.set_good_response": {
            "name": "set_good_response",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "response": [
                    "bool",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/test/ibmqtestcase.py": {
        "IBMQTestCase.setUpClass": {
            "name": "setUpClass",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "Exception",
                    "BaseException",
                    "werkzeug.exceptions.InternalServerError",
                    "Optional[logging.Logger]",
                    "str"
                ]
            }
        },
        "IBMQTestCase.tearDownClass": {
            "name": "tearDownClass",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type[Any]",
                    "Type[T]",
                    "Callable"
                ]
            }
        },
        "IBMQTestCase.simple_job_callback": {
            "name": "simple_job_callback",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "bytes",
                    "Pattern[str]"
                ],
                "job_id": [
                    "int",
                    "str",
                    "bytes",
                    "Pattern[str]"
                ],
                "job_status": [
                    "int",
                    "str",
                    "bytes",
                    "Pattern[str]"
                ],
                "job": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "IBMQTestCase._set_logging_level": {
            "name": "_set_logging_level",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Tuple[int, int]",
                    "logging.Logger",
                    "tuple",
                    "MutableMapping[str, Any]"
                ],
                "logger": [
                    "logging.Logger",
                    "bool",
                    "str",
                    "T"
                ]
            }
        },
        "IBMQTestCase.setUp": {
            "name": "setUp",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQTestCase.tearDown": {
            "name": "tearDown",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IBMQTestCase._recorded_submit": {
            "name": "_recorded_submit",
            "location": 105,
            "return": [
                "str",
                "int",
                "utils.JSON"
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        }
    },
    "qiskit-ibmq-provider-master/test/jobtestcase.py": {
        "JobTestCase.wait_for_initialization": {
            "name": "wait_for_initialization",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "job": [
                    "Optional[int]",
                    "str",
                    "bool"
                ],
                "timeout": [
                    "str",
                    "float",
                    "int"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/test/proxy_server.py": {
        "use_proxies": {
            "name": "use_proxies",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "provider": [
                    "Optional[bool]",
                    "bool",
                    "str"
                ],
                "proxies": [
                    "Optional[bool]",
                    "bool",
                    "str"
                ]
            }
        },
        "MockProxyServer.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_case": [
                    "List[List[float]]",
                    "bool",
                    "Tuple[int]",
                    "int"
                ],
                "logger": [
                    "bool",
                    "str"
                ]
            }
        },
        "MockProxyServer.start": {
            "name": "start",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MockProxyServer.stop": {
            "name": "stop",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qiskit-ibmq-provider-master/test/utils.py": {
        "setup_test_logging": {
            "name": "setup_test_logging",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "logger": [
                    "logging.Logger",
                    "str",
                    "TextIO",
                    "Optional[str]"
                ],
                "filename": [
                    "logging.Logger",
                    "str",
                    "TextIO"
                ]
            }
        },
        "most_busy_backend": {
            "name": "most_busy_backend",
            "location": 59,
            "return": [
                "int",
                "bool",
                "tuple",
                "List[int]",
                "Iterable[int]",
                "Sequence['cirq.Qid']",
                "list"
            ],
            "arguments": {
                "provider": [
                    "str",
                    "Iterable[str]",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "get_large_circuit": {
            "name": "get_large_circuit",
            "location": 77,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "backend": []
            }
        },
        "bell_in_qobj": {
            "name": "bell_in_qobj",
            "location": 96,
            "return": [
                "Optional[int]",
                "Dict[str, int]"
            ],
            "arguments": {
                "backend": [
                    "qiskiproviders.ibmq.ibmqbackend.IBMQBackend",
                    "int",
                    "T"
                ],
                "shots": [
                    "qiskiproviders.ibmq.ibmqbackend.IBMQBackend",
                    "int",
                    "T"
                ]
            }
        },
        "cancel_job": {
            "name": "cancel_job",
            "location": 110,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "job": [
                    "Dict[str, Any]",
                    "Callable",
                    "bool",
                    "bytes"
                ],
                "verify": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "submit_job_bad_shots": {
            "name": "submit_job_bad_shots",
            "location": 138,
            "return": [],
            "arguments": {
                "backend": [
                    "qiskiproviders.ibmq.ibmqbackend.IBMQBackend"
                ]
            }
        },
        "submit_job_one_bad_instr": {
            "name": "submit_job_one_bad_instr",
            "location": 154,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "submit_and_cancel": {
            "name": "submit_and_cancel",
            "location": 174,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "backend": [
                    "bool"
                ]
            }
        },
        "get_pulse_schedule": {
            "name": "get_pulse_schedule",
            "location": 189,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "backend": [
                    "bool",
                    "str"
                ]
            }
        },
        "get_provider": {
            "name": "get_provider",
            "location": 204,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "ibmq_factory": [
                    "str"
                ],
                "qe_token": [
                    "str"
                ],
                "qe_url": [
                    "str"
                ],
                "default": [
                    "bool",
                    "str",
                    "list",
                    "Optional[str]",
                    "dict",
                    "int",
                    "float"
                ]
            }
        },
        "update_job_tags_and_verify": {
            "name": "update_job_tags_and_verify",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "job_to_update": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[List[str]]"
                ],
                "tags_after_update": [
                    "List[str]",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "str",
                    "Dict[str, int]"
                ],
                "replacement_tags": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "additional_tags": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "removal_tags": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/test/ws_server.py": {
        "MockWsServer.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "int",
                    "bool"
                ],
                "logger": [
                    "str",
                    "List[str]",
                    "Tuple[Tuple[str, ...]]"
                ]
            }
        },
        "MockWsServer.start": {
            "name": "start",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MockWsServer.stop": {
            "name": "stop",
            "location": 51,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockWsServer._server_thread": {
            "name": "_server_thread",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "start_event": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/test/__init__.py": {},
    "qiskit-ibmq-provider-master/test/ibmq/test_account_client.py": {
        "TestAccountClient.setUpClass": {
            "name": "setUpClass",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "type",
                    "Type",
                    "Type[T]",
                    "bool"
                ],
                "provider": [
                    "type",
                    "Type",
                    "Type[T]",
                    "bool"
                ]
            }
        },
        "TestAccountClient.setUp": {
            "name": "setUp",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountClient.tearDown": {
            "name": "tearDown",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountClient._get_client": {
            "name": "_get_client",
            "location": 70,
            "return": [
                "str",
                "IO",
                "bool",
                "bytes",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountClient.test_exception_message": {
            "name": "test_exception_message",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountClient.test_custom_client_app_header": {
            "name": "test_custom_client_app_header",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountClient.test_access_token_not_in_exception_traceback": {
            "name": "test_access_token_not_in_exception_traceback",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountClient.test_job_submit_retry": {
            "name": "test_job_submit_retry",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountClient.test_client_error": {
            "name": "test_client_error",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountClientJobs.setUpClass": {
            "name": "setUpClass",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "bool",
                    "type",
                    "Type[T]",
                    "str"
                ],
                "provider": [
                    "Type",
                    "bool",
                    "type",
                    "Type[T]",
                    "str"
                ]
            }
        },
        "TestAccountClientJobs._get_qobj": {
            "name": "_get_qobj",
            "location": 186,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "backend": [
                    "float",
                    "recidiviz.utils.regions.Region",
                    "bool",
                    "raiden.utils.TargetAddress"
                ]
            }
        },
        "TestAccountClientJobs.test_job_get": {
            "name": "test_job_get",
            "location": 201,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountClientJobs.test_job_final_status_polling": {
            "name": "test_job_final_status_polling",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountClientJobs.test_list_jobs_statuses_skip": {
            "name": "test_list_jobs_statuses_skip",
            "location": 213,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthClient.test_valid_login": {
            "name": "test_valid_login",
            "location": 227,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "qe_token": [
                    "str",
                    "raiden.api.resAPIServer"
                ],
                "qe_url": [
                    "str",
                    "raiden.api.resAPIServer"
                ]
            }
        },
        "TestAuthClient.test_url_404": {
            "name": "test_url_404",
            "location": 233,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "qe_token": [
                    "str"
                ],
                "qe_url": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestAuthClient.test_invalid_token": {
            "name": "test_invalid_token",
            "location": 240,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "qe_token": [
                    "str"
                ],
                "qe_url": [
                    "str"
                ]
            }
        },
        "TestAuthClient.test_url_unreachable": {
            "name": "test_url_unreachable",
            "location": 247,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "qe_token": [
                    "str"
                ],
                "qe_url": [
                    "str"
                ]
            }
        },
        "TestAuthClient.test_api_version": {
            "name": "test_api_version",
            "location": 254,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "qe_token": [
                    "raiden.api.resAPIServer",
                    "Callable",
                    "str"
                ],
                "qe_url": [
                    "raiden.api.resAPIServer",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestAuthClient.test_user_urls": {
            "name": "test_user_urls",
            "location": 261,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "qe_token": [
                    "str",
                    "int"
                ],
                "qe_url": [
                    "str",
                    "int"
                ]
            }
        },
        "TestAuthClient.test_user_hubs": {
            "name": "test_user_hubs",
            "location": 269,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "qe_token": [
                    "str",
                    "int",
                    "raiden.api.resAPIServer"
                ],
                "qe_url": [
                    "str",
                    "int",
                    "raiden.api.resAPIServer"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/test/ibmq/test_basic_server_paths.py": {
        "TestBasicServerPaths.setUpClass": {
            "name": "setUpClass",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "type",
                    "int",
                    "bool",
                    "Type"
                ],
                "providers": [
                    "str",
                    "bytes",
                    "Type",
                    "float",
                    "int",
                    "Callable"
                ]
            }
        },
        "TestBasicServerPaths.test_job_submission": {
            "name": "test_job_submission",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasicServerPaths.test_job_backend_properties_and_status": {
            "name": "test_job_backend_properties_and_status",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasicServerPaths.test_retrieve_jobs": {
            "name": "test_retrieve_jobs",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasicServerPaths.test_device_properties_and_defaults": {
            "name": "test_device_properties_and_defaults",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasicServerPaths.test_device_status_and_job_limit": {
            "name": "test_device_status_and_job_limit",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasicServerPaths._submit_job_with_retry": {
            "name": "_submit_job_with_retry",
            "location": 110,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "circs": [
                    "int",
                    "Callable",
                    "str"
                ],
                "backend": [
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ],
                "max_retry": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/test/ibmq/test_filter_backends.py": {
        "TestBackendFilters.setUpClass": {
            "name": "setUpClass",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "Type",
                    "float",
                    "int",
                    "Callable"
                ],
                "provider": [
                    "str",
                    "bytes",
                    "Type",
                    "float",
                    "int",
                    "Callable"
                ]
            }
        },
        "TestBackendFilters.test_filter_config_properties": {
            "name": "test_filter_config_properties",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "backend": []
            }
        },
        "TestBackendFilters.test_filter_status_dict": {
            "name": "test_filter_status_dict",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBackendFilters.test_filter_config_callable": {
            "name": "test_filter_config_callable",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBackendFilters.test_filter_least_busy": {
            "name": "test_filter_least_busy",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBackendFilters.test_filter_least_busy_reservation": {
            "name": "test_filter_least_busy_reservation",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBackendFilters.test_filter_least_busy_paused": {
            "name": "test_filter_least_busy_paused",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBackendFilters.test_filter_min_num_qubits": {
            "name": "test_filter_min_num_qubits",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBackendFilters.test_filter_input_allowed": {
            "name": "test_filter_input_allowed",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qiskit-ibmq-provider-master/test/ibmq/test_ibmq_backend.py": {
        "TestIBMQBackend.setUpClass": {
            "name": "setUpClass",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "Optional[Dict]",
                    "Tuple[int, int]",
                    "raiden.utils.Address"
                ],
                "backend": [
                    "List[str]",
                    "Optional[Dict]",
                    "Tuple[int, int]",
                    "raiden.utils.Address"
                ]
            }
        },
        "TestIBMQBackend.test_backend_jobs_signature": {
            "name": "test_backend_jobs_signature",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQBackend.test_backend_status": {
            "name": "test_backend_status",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQBackend.test_backend_properties": {
            "name": "test_backend_properties",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQBackend.test_backend_job_limit": {
            "name": "test_backend_job_limit",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQBackend.test_backend_pulse_defaults": {
            "name": "test_backend_pulse_defaults",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQBackend.test_backend_reservations": {
            "name": "test_backend_reservations",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQBackend.test_run_qobj": {
            "name": "test_run_qobj",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQBackend.test_backend_options": {
            "name": "test_backend_options",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQBackend.test_sim_backend_options": {
            "name": "test_sim_backend_options",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQBackend.test_deprecate_id_instruction": {
            "name": "test_deprecate_id_instruction",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQBackendService.setUpClass": {
            "name": "setUpClass",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "type",
                    "int",
                    "bool",
                    "Type"
                ],
                "provider": [
                    "str",
                    "bytes",
                    "Type",
                    "float",
                    "int",
                    "Callable"
                ]
            }
        },
        "TestIBMQBackendService.test_my_reservations": {
            "name": "test_my_reservations",
            "location": 225,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQBackendService.test_deprecated_service": {
            "name": "test_deprecated_service",
            "location": 234,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qiskit-ibmq-provider-master/test/ibmq/test_ibmq_factory.py": {
        "TestIBMQFactoryEnableAccount.setUp": {
            "name": "setUp",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQFactoryEnableAccount.test_auth_url": {
            "name": "test_auth_url",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "qe_token": [
                    "str"
                ],
                "qe_url": [
                    "str"
                ]
            }
        },
        "TestIBMQFactoryEnableAccount.test_non_auth_url": {
            "name": "test_non_auth_url",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQFactoryEnableAccount.test_non_auth_url_with_hub": {
            "name": "test_non_auth_url_with_hub",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQFactoryEnableAccount.test_enable_twice": {
            "name": "test_enable_twice",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "qe_token": [
                    "str",
                    "bytes",
                    "raiden.api.resAPIServer"
                ],
                "qe_url": [
                    "str",
                    "bytes",
                    "raiden.api.resAPIServer"
                ]
            }
        },
        "TestIBMQFactoryEnableAccount.test_pass_unreachable_proxy": {
            "name": "test_pass_unreachable_proxy",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "qe_token": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "Optional[str]"
                ],
                "qe_url": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "TestIBMQFactoryEnableAccount.test_enable_specified_provider": {
            "name": "test_enable_specified_provider",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "qe_token": [
                    "str",
                    "int",
                    "bool"
                ],
                "qe_url": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "TestIBMQFactoryEnableAccount.test_provider_init_failed": {
            "name": "test_provider_init_failed",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "qe_token": [
                    "str",
                    "dict",
                    "bytes",
                    "int",
                    "bool"
                ],
                "qe_url": [
                    "str",
                    "dict",
                    "bytes",
                    "int",
                    "bool"
                ]
            }
        },
        "TestIBMQFactoryEnableAccount.test_discover_backend_failed": {
            "name": "test_discover_backend_failed",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "qe_token": [
                    "str",
                    "dict",
                    "bytes",
                    "bool"
                ],
                "qe_url": [
                    "str",
                    "dict",
                    "bytes",
                    "bool"
                ]
            }
        },
        "TestIBMQFactoryAccounts.setUpClass": {
            "name": "setUpClass",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "Optional[Callable]"
                ]
            }
        },
        "TestIBMQFactoryAccounts.setUp": {
            "name": "setUp",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQFactoryAccounts.test_save_account": {
            "name": "test_save_account",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQFactoryAccounts.test_save_account_specified_provider": {
            "name": "test_save_account_specified_provider",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQFactoryAccounts.test_save_account_specified_provider_invalid": {
            "name": "test_save_account_specified_provider_invalid",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQFactoryAccounts.test_delete_account": {
            "name": "test_delete_account",
            "location": 184,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQFactoryAccounts.test_load_account": {
            "name": "test_load_account",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "qe_token": [
                    "str",
                    "Set[str]",
                    "List[str]"
                ],
                "qe_url": [
                    "List[str]",
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "TestIBMQFactoryAccounts.test_load_account_saved_provider": {
            "name": "test_load_account_saved_provider",
            "location": 208,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "qe_token": [
                    "int",
                    "raiden.utils.TokenAddress",
                    "str",
                    "bool",
                    "Optional[str]",
                    "Callable[[dict], None]"
                ],
                "qe_url": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]",
                    "bytes",
                    "List[Tuple[bool, Any]]",
                    "int"
                ]
            }
        },
        "TestIBMQFactoryAccounts.test_load_account_saved_provider_invalid_hgp": {
            "name": "test_load_account_saved_provider_invalid_hgp",
            "location": 235,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "qe_token": [
                    "str",
                    "raiden.utils.TokenNetworkAddress",
                    "int",
                    "raiden.utils.Address",
                    "bool"
                ],
                "qe_url": [
                    "str"
                ]
            }
        },
        "TestIBMQFactoryAccounts.test_load_account_saved_provider_invalid_format": {
            "name": "test_load_account_saved_provider_invalid_format",
            "location": 252,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQFactoryAccounts.test_disable_account": {
            "name": "test_disable_account",
            "location": 276,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "qe_token": [
                    "str",
                    "bytes"
                ],
                "qe_url": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TestIBMQFactoryAccounts.test_active_account": {
            "name": "test_active_account",
            "location": 283,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "qe_token": [
                    "str",
                    "bytes",
                    "float"
                ],
                "qe_url": [
                    "str",
                    "bytes",
                    "float"
                ]
            }
        },
        "TestIBMQFactoryAccounts.test_save_token_invalid": {
            "name": "test_save_token_invalid",
            "location": 293,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQFactoryProvider._get_provider": {
            "name": "_get_provider",
            "location": 308,
            "return": [
                "str",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "qe_token": [
                    "str",
                    "dict",
                    "bool",
                    "int",
                    "raiden.utils.TokenAddress"
                ],
                "qe_url": [
                    "str",
                    "dict",
                    "bool",
                    "int",
                    "raiden.utils.TokenAddress"
                ]
            }
        },
        "TestIBMQFactoryProvider.setUp": {
            "name": "setUp",
            "location": 312,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQFactoryProvider.test_get_provider": {
            "name": "test_get_provider",
            "location": 320,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQFactoryProvider.test_providers_with_filter": {
            "name": "test_providers_with_filter",
            "location": 328,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQFactoryProvider.test_providers_no_filter": {
            "name": "test_providers_no_filter",
            "location": 336,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qiskit-ibmq-provider-master/test/ibmq/test_ibmq_integration.py": {
        "TestIBMQIntegration.setUpClass": {
            "name": "setUpClass",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "Type",
                    "type",
                    "Type[T]"
                ],
                "provider": [
                    "str",
                    "int",
                    "Type",
                    "type",
                    "Type[T]"
                ]
            }
        },
        "TestIBMQIntegration.setUp": {
            "name": "setUp",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQIntegration.test_ibmq_result_fields": {
            "name": "test_ibmq_result_fields",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQIntegration.test_compile_remote": {
            "name": "test_compile_remote",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "backend": [
                    "int"
                ]
            }
        },
        "TestIBMQIntegration.test_compile_two_remote": {
            "name": "test_compile_two_remote",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "backend": [
                    "Type",
                    "Iterable[Any]"
                ]
            }
        },
        "TestIBMQIntegration.test_compile_two_run_remote": {
            "name": "test_compile_two_run_remote",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQIntegration.test_execute_two_remote": {
            "name": "test_execute_two_remote",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQIntegration.test_private_job": {
            "name": "test_private_job",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "str"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/test/ibmq/test_ibmq_job.py": {
        "TestIBMQJob.setUpClass": {
            "name": "setUpClass",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "int",
                    "str",
                    "dict"
                ],
                "provider": [
                    "str",
                    "int",
                    "Type",
                    "type",
                    "Type[T]"
                ]
            }
        },
        "TestIBMQJob.test_run_device": {
            "name": "test_run_device",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "backend": []
            }
        },
        "TestIBMQJob.test_run_multiple_simulator": {
            "name": "test_run_multiple_simulator",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJob.test_run_multiple_device": {
            "name": "test_run_multiple_device",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "backend": []
            }
        },
        "TestIBMQJob.test_cancel": {
            "name": "test_cancel",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJob.test_retrieve_jobs": {
            "name": "test_retrieve_jobs",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJob.test_retrieve_job": {
            "name": "test_retrieve_job",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJob.test_retrieve_job_uses_appropriate_backend": {
            "name": "test_retrieve_job_uses_appropriate_backend",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "backend": []
            }
        },
        "TestIBMQJob.test_retrieve_job_error": {
            "name": "test_retrieve_job_error",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJob.test_retrieve_jobs_status": {
            "name": "test_retrieve_jobs_status",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJob.test_retrieve_multiple_job_statuses": {
            "name": "test_retrieve_multiple_job_statuses",
            "location": 250,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJob.test_retrieve_active_jobs": {
            "name": "test_retrieve_active_jobs",
            "location": 283,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJob.test_retrieve_jobs_queued": {
            "name": "test_retrieve_jobs_queued",
            "location": 303,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJob.test_retrieve_jobs_running": {
            "name": "test_retrieve_jobs_running",
            "location": 329,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJob.test_retrieve_jobs_start_datetime": {
            "name": "test_retrieve_jobs_start_datetime",
            "location": 349,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJob.test_retrieve_jobs_end_datetime": {
            "name": "test_retrieve_jobs_end_datetime",
            "location": 363,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJob.test_retrieve_jobs_db_filter": {
            "name": "test_retrieve_jobs_db_filter",
            "location": 403,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJob.test_pagination_filter": {
            "name": "test_pagination_filter",
            "location": 428,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJob.test_retrieve_failed_job_simulator_partial": {
            "name": "test_retrieve_failed_job_simulator_partial",
            "location": 461,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJob.test_pulse_job": {
            "name": "test_pulse_job",
            "location": 471,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJob.test_retrieve_from_retired_backend": {
            "name": "test_retrieve_from_retired_backend",
            "location": 494,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJob.test_refresh_job_result": {
            "name": "test_refresh_job_result",
            "location": 510,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJob.test_wait_for_final_state": {
            "name": "test_wait_for_final_state",
            "location": 528,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJob.test_wait_for_final_state_timeout": {
            "name": "test_wait_for_final_state_timeout",
            "location": 583,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJob.test_job_submit_partial_fail": {
            "name": "test_job_submit_partial_fail",
            "location": 595,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJob.test_job_circuits": {
            "name": "test_job_circuits",
            "location": 618,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJob.test_job_backend_options": {
            "name": "test_job_backend_options",
            "location": 622,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJob.test_job_header": {
            "name": "test_job_header",
            "location": 628,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJob.test_wait_for_final_state.final_state_callback": {
            "name": "final_state_callback",
            "location": 531,
            "return": [
                ""
            ],
            "arguments": {
                "c_job_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "c_status": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "c_job": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int",
                    "List[dict]"
                ]
            }
        },
        "TestIBMQJob.test_wait_for_final_state.job_canceller": {
            "name": "job_canceller",
            "location": 553,
            "return": [
                ""
            ],
            "arguments": {
                "job_": [
                    "str",
                    "list",
                    "int"
                ],
                "exit_event": [
                    "str",
                    "qutebrowser.utils.usertypes.ClickTarget"
                ],
                "wait": [
                    "str",
                    "qutebrowser.utils.usertypes.ClickTarget"
                ]
            }
        },
        "TestIBMQJob.test_job_submit_partial_fail._side_effect": {
            "name": "_side_effect",
            "location": 599,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qiskit-ibmq-provider-master/test/ibmq/test_ibmq_jobmanager.py": {
        "TestIBMQJobManager.setUpClass": {
            "name": "setUpClass",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "Type"
                ],
                "provider": [
                    "str",
                    "int",
                    "Type",
                    "type",
                    "Type[T]"
                ]
            }
        },
        "TestIBMQJobManager.setUp": {
            "name": "setUp",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobManager.tearDown": {
            "name": "tearDown",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobManager.fake_api_backend": {
            "name": "fake_api_backend",
            "location": 70,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobManager.fake_api_provider": {
            "name": "fake_api_provider",
            "location": 83,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobManager.test_split_circuits": {
            "name": "test_split_circuits",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobManager.test_no_split_circuits": {
            "name": "test_no_split_circuits",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobManager.test_custom_split_circuits": {
            "name": "test_custom_split_circuits",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobManager.test_job_report": {
            "name": "test_job_report",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobManager.test_skipped_status": {
            "name": "test_skipped_status",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobManager.test_job_qobjs": {
            "name": "test_job_qobjs",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobManager.test_error_message": {
            "name": "test_error_message",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobManager.test_async_submit_exception": {
            "name": "test_async_submit_exception",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobManager.test_multiple_job_sets": {
            "name": "test_multiple_job_sets",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobManager.test_retrieve_job_sets_by_name": {
            "name": "test_retrieve_job_sets_by_name",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobManager.test_retrieve_job_set": {
            "name": "test_retrieve_job_set",
            "location": 201,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobManager.test_job_tags": {
            "name": "test_job_tags",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobManager.test_job_limit": {
            "name": "test_job_limit",
            "location": 257,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobManager.test_job_limit_timeout": {
            "name": "test_job_limit_timeout",
            "location": 294,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobManager.test_job_tags_replace": {
            "name": "test_job_tags_replace",
            "location": 319,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobManager.test_job_tags_remove": {
            "name": "test_job_tags_remove",
            "location": 337,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobManager.test_index_by_number": {
            "name": "test_index_by_number",
            "location": 356,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobManager.test_index_by_name": {
            "name": "test_index_by_name",
            "location": 371,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobManager.test_index_out_of_range": {
            "name": "test_index_out_of_range",
            "location": 391,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobManager.test_skipped_result": {
            "name": "test_skipped_result",
            "location": 398,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobManager.test_combine_results": {
            "name": "test_combine_results",
            "location": 412,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobManager.test_ibmq_managed_results_signature": {
            "name": "test_ibmq_managed_results_signature",
            "location": 423,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobManager._get_class_methods": {
            "name": "_get_class_methods",
            "location": 457,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "Callable",
                    "bool"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/test/ibmq/test_ibmq_job_attributes.py": {
        "TestIBMQJobAttributes.setUpClass": {
            "name": "setUpClass",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "int",
                    "str",
                    "dict"
                ],
                "provider": [
                    "str",
                    "int",
                    "Type",
                    "type",
                    "Type[T]"
                ]
            }
        },
        "TestIBMQJobAttributes.setUp": {
            "name": "setUp",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobAttributes.test_job_id": {
            "name": "test_job_id",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobAttributes.test_get_backend_name": {
            "name": "test_get_backend_name",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobAttributes.test_running_job_properties": {
            "name": "test_running_job_properties",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "backend": []
            }
        },
        "TestIBMQJobAttributes.test_job_name": {
            "name": "test_job_name",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobAttributes.test_job_name_update": {
            "name": "test_job_name_update",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobAttributes.test_duplicate_job_name": {
            "name": "test_duplicate_job_name",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobAttributes.test_error_message_device": {
            "name": "test_error_message_device",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "backend": []
            }
        },
        "TestIBMQJobAttributes.test_error_message_simulator": {
            "name": "test_error_message_simulator",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobAttributes.test_error_message_validation": {
            "name": "test_error_message_validation",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobAttributes.test_refresh": {
            "name": "test_refresh",
            "location": 196,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobAttributes.test_job_creation_date": {
            "name": "test_job_creation_date",
            "location": 208,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobAttributes.test_time_per_step": {
            "name": "test_time_per_step",
            "location": 222,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobAttributes.test_new_job_attributes": {
            "name": "test_new_job_attributes",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobAttributes.test_queue_info": {
            "name": "test_queue_info",
            "location": 256,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobAttributes.test_esp_readout_not_enabled": {
            "name": "test_esp_readout_not_enabled",
            "location": 291,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobAttributes.test_esp_readout_enabled": {
            "name": "test_esp_readout_enabled",
            "location": 308,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobAttributes.test_esp_readout_default_value": {
            "name": "test_esp_readout_default_value",
            "location": 320,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobAttributes.test_esp_readout_enabled_not_used": {
            "name": "test_esp_readout_enabled_not_used",
            "location": 337,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobAttributes.test_job_tags_or": {
            "name": "test_job_tags_or",
            "location": 350,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobAttributes.test_job_tags_and": {
            "name": "test_job_tags_and",
            "location": 371,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobAttributes.test_job_tags_replace": {
            "name": "test_job_tags_replace",
            "location": 394,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobAttributes.test_job_tags_add": {
            "name": "test_job_tags_add",
            "location": 409,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobAttributes.test_job_tags_remove": {
            "name": "test_job_tags_remove",
            "location": 424,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobAttributes.test_job_tags_add_and_remove": {
            "name": "test_job_tags_add_and_remove",
            "location": 440,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobAttributes.test_job_tags_replace_and_remove": {
            "name": "test_job_tags_replace_and_remove",
            "location": 448,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobAttributes.test_job_tags_all_parameters": {
            "name": "test_job_tags_all_parameters",
            "location": 463,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobAttributes.test_invalid_job_tags": {
            "name": "test_invalid_job_tags",
            "location": 481,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobAttributes.test_run_mode": {
            "name": "test_run_mode",
            "location": 487,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobAttributes.test_missing_required_fields": {
            "name": "test_missing_required_fields",
            "location": 499,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobAttributes.test_client_version": {
            "name": "test_client_version",
            "location": 508,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobAttributes.test_experiment_id": {
            "name": "test_experiment_id",
            "location": 513,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobAttributes.test_running_job_properties._job_callback": {
            "name": "_job_callback",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "job_id": [
                    "int",
                    "Optional[str]",
                    "raiden.utils.ChainID",
                    "str",
                    "bool"
                ],
                "job_status": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[float]"
                ],
                "cjob": [
                    "int",
                    "str",
                    "bytes",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "TestIBMQJobAttributes.test_new_job_attributes._mocked__api_job_submit": {
            "name": "_mocked__api_job_submit",
            "location": 244,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "qiskit-ibmq-provider-master/test/ibmq/test_ibmq_job_states.py": {
        "_auto_progress_api": {
            "name": "_auto_progress_api",
            "location": 408,
            "return": [
                ""
            ],
            "arguments": {
                "api": [
                    "int",
                    "Callable",
                    "str"
                ],
                "interval": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TestIBMQJobStates.setUp": {
            "name": "setUp",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobStates.test_unrecognized_status": {
            "name": "test_unrecognized_status",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobStates.test_done_status": {
            "name": "test_done_status",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobStates.test_running_status": {
            "name": "test_running_status",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobStates.test_cancelled_status": {
            "name": "test_cancelled_status",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobStates.test_validating_job": {
            "name": "test_validating_job",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobStates.test_error_while_creating_job": {
            "name": "test_error_while_creating_job",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobStates.test_error_while_validating_job": {
            "name": "test_error_while_validating_job",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobStates.test_status_flow_for_non_queued_job": {
            "name": "test_status_flow_for_non_queued_job",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobStates.test_status_flow_for_queued_job": {
            "name": "test_status_flow_for_queued_job",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobStates.test_status_flow_for_cancellable_job": {
            "name": "test_status_flow_for_cancellable_job",
            "location": 220,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobStates.test_status_flow_for_non_cancellable_job": {
            "name": "test_status_flow_for_non_cancellable_job",
            "location": 233,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobStates.test_status_flow_for_errored_cancellation": {
            "name": "test_status_flow_for_errored_cancellation",
            "location": 246,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobStates.test_status_flow_for_unable_to_run_valid_qobj": {
            "name": "test_status_flow_for_unable_to_run_valid_qobj",
            "location": 256,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobStates.test_api_throws_temporarily_but_job_is_finished": {
            "name": "test_api_throws_temporarily_but_job_is_finished",
            "location": 261,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobStates.test_error_while_running_job": {
            "name": "test_error_while_running_job",
            "location": 278,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobStates.test_cancelled_result": {
            "name": "test_cancelled_result",
            "location": 290,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobStates.test_errored_result": {
            "name": "test_errored_result",
            "location": 301,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobStates.test_completed_result": {
            "name": "test_completed_result",
            "location": 308,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobStates.test_block_on_result_waiting_until_completed": {
            "name": "test_block_on_result_waiting_until_completed",
            "location": 317,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobStates.test_block_on_result_waiting_until_cancelled": {
            "name": "test_block_on_result_waiting_until_cancelled",
            "location": 329,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobStates.test_block_on_result_waiting_until_exception": {
            "name": "test_block_on_result_waiting_until_exception",
            "location": 342,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobStates.test_never_complete_result_with_timeout": {
            "name": "test_never_complete_result_with_timeout",
            "location": 353,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobStates.test_only_final_states_cause_detailed_request": {
            "name": "test_only_final_states_cause_detailed_request",
            "location": 361,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobStates.test_no_kind_job": {
            "name": "test_no_kind_job",
            "location": 386,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobStates.test_transpiling_status": {
            "name": "test_transpiling_status",
            "location": 393,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQJobStates.run_with_api": {
            "name": "run_with_api",
            "location": 399,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "api": [
                    "str"
                ]
            }
        },
        "BaseFakeAPI.__init__": {
            "name": "__init__",
            "location": 428,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFakeAPI.job_get": {
            "name": "job_get",
            "location": 439,
            "return": [
                "bool",
                "Dict[str, Any]",
                "type",
                "str"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "bool",
                    "Optional[List[str]]",
                    "list",
                    "Dict[str, Any]",
                    "str",
                    "int"
                ]
            }
        },
        "BaseFakeAPI.job_status": {
            "name": "job_status",
            "location": 445,
            "return": [
                "Mapping",
                "Dict[str, float]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "int"
                ]
            }
        },
        "BaseFakeAPI.job_submit": {
            "name": "job_submit",
            "location": 456,
            "return": [
                "str",
                "dict",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFakeAPI.job_cancel": {
            "name": "job_cancel",
            "location": 461,
            "return": [
                "Callable[..., None]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "Exception",
                    "Iterable[str]",
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "BaseFakeAPI.job_final_status": {
            "name": "job_final_status",
            "location": 468,
            "return": [
                "bytes",
                "dict",
                "int",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "int"
                ]
            }
        },
        "BaseFakeAPI.job_result": {
            "name": "job_result",
            "location": 482,
            "return": [
                "bool",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "BaseFakeAPI.progress": {
            "name": "progress",
            "location": 486,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RejectingJobAPI.job_submit": {
            "name": "job_submit",
            "location": 558,
            "return": [
                "str",
                "int",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnavailableRunAPI.job_submit": {
            "name": "job_submit",
            "location": 565,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ThrowingAPI.job_get": {
            "name": "job_get",
            "location": 577,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "bool",
                    "Optional[List[str]]",
                    "list",
                    "Dict[str, Any]",
                    "str",
                    "int"
                ]
            }
        },
        "ThrowingNonJobRelatedErrorAPI.__init__": {
            "name": "__init__",
            "location": 590,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "errors_before_success": [
                    "str",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "ThrowingNonJobRelatedErrorAPI.job_get": {
            "name": "job_get",
            "location": 594,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Iterable"
                ]
            }
        },
        "ThrowingGetJobAPI.job_status": {
            "name": "job_status",
            "location": 611,
            "return": [
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "Iterable[str]",
                    "int",
                    "str",
                    "Optional[float]",
                    "list",
                    "bytes"
                ]
            }
        },
        "ThrowingGetJobAPI.job_get": {
            "name": "job_get",
            "location": 614,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "bool",
                    "Optional[List[str]]",
                    "list",
                    "Dict[str, Any]",
                    "str",
                    "int"
                ]
            }
        },
        "ErroredCancellationAPI.job_cancel": {
            "name": "job_cancel",
            "location": 650,
            "return": [
                "Mapping[Tuple[str, str], Any]",
                "dict",
                "Callable[..., None]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "Exception",
                    "Iterable[str]",
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "NoKindJobAPI.job_submit": {
            "name": "job_submit",
            "location": 664,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoKindJobAPI.job_result": {
            "name": "job_result",
            "location": 667,
            "return": [
                "str",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "Optional[float]",
                    "List[int]",
                    "Iterable[str]"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/test/ibmq/test_ibmq_logger.py": {
        "TestLogger.test_no_log_level": {
            "name": "test_no_log_level",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogger.test_empty_log_level": {
            "name": "test_empty_log_level",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogger.test_invalid_log_level": {
            "name": "test_invalid_log_level",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogger.test_valid_log_levels_mixed_casing": {
            "name": "test_valid_log_levels_mixed_casing",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLogger.test_log_file": {
            "name": "test_log_file",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qiskit-ibmq-provider-master/test/ibmq/test_ibmq_provider.py": {
        "TestAccountProvider.setUp": {
            "name": "setUp",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountProvider._get_provider": {
            "name": "_get_provider",
            "location": 47,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "TestAccountProvider.test_remote_backends_exist_real_device": {
            "name": "test_remote_backends_exist_real_device",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountProvider.test_remote_backends_exist_simulator": {
            "name": "test_remote_backends_exist_simulator",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountProvider.test_remote_backends_instantiate_simulators": {
            "name": "test_remote_backends_instantiate_simulators",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountProvider.test_remote_backend_status": {
            "name": "test_remote_backend_status",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountProvider.test_remote_backend_configuration": {
            "name": "test_remote_backend_configuration",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountProvider.test_remote_backend_properties": {
            "name": "test_remote_backend_properties",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountProvider.test_qobj_headers_in_result_sims": {
            "name": "test_qobj_headers_in_result_sims",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountProvider.test_qobj_headers_in_result_devices": {
            "name": "test_qobj_headers_in_result_devices",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "backend": []
            }
        },
        "TestAccountProvider.test_aliases": {
            "name": "test_aliases",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountProvider.test_remote_backend_properties_filter_date": {
            "name": "test_remote_backend_properties_filter_date",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountProvider.test_provider_backend": {
            "name": "test_provider_backend",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountProvider.test_provider_services": {
            "name": "test_provider_services",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qiskit-ibmq-provider-master/test/ibmq/test_ibmq_qasm_simulator.py": {
        "TestIbmqQasmSimulator.setUp": {
            "name": "setUp",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "Optional[bool]",
                    "Optional[int]",
                    "str",
                    "List[int]"
                ]
            }
        },
        "TestIbmqQasmSimulator.test_execute_one_circuit_simulator_online": {
            "name": "test_execute_one_circuit_simulator_online",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIbmqQasmSimulator.test_execute_several_circuits_simulator_online": {
            "name": "test_execute_several_circuits_simulator_online",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIbmqQasmSimulator.test_online_qasm_simulator_two_registers": {
            "name": "test_online_qasm_simulator_two_registers",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIbmqQasmSimulator.test_conditional_operation": {
            "name": "test_conditional_operation",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIbmqQasmSimulator.test_simulator_with_noise_model": {
            "name": "test_simulator_with_noise_model",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "backend": []
            }
        }
    },
    "qiskit-ibmq-provider-master/test/ibmq/test_jupyter.py": {
        "_get_backends": {
            "name": "_get_backends",
            "location": 125,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "provider": [
                    "str",
                    "Optional[Callable]"
                ]
            }
        },
        "TestBackendInfo.setUpClass": {
            "name": "setUpClass",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Optional[str]"
                ],
                "provider": [
                    "Optional[str]"
                ]
            }
        },
        "TestBackendInfo.test_config_tab": {
            "name": "test_config_tab",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBackendInfo.test_qubits_tab": {
            "name": "test_qubits_tab",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBackendInfo.test_gates_tab": {
            "name": "test_gates_tab",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBackendInfo.test_error_map_tab": {
            "name": "test_error_map_tab",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBackendInfo.test_jobs_tab": {
            "name": "test_jobs_tab",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIQXDashboard.setUpClass": {
            "name": "setUpClass",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "type",
                    "Tuple[Type[Any]]",
                    "dict"
                ],
                "provider": [
                    "type",
                    "Tuple[Type[Any]]",
                    "dict"
                ]
            }
        },
        "TestIQXDashboard.test_backend_widget": {
            "name": "test_backend_widget",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIQXDashboard.test_job_widget": {
            "name": "test_job_widget",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIQXDashboard.test_watcher_monitor": {
            "name": "test_watcher_monitor",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBackendInfo.test_jobs_tab._limit_jobs": {
            "name": "_limit_jobs",
            "location": 79,
            "return": [
                "trezor.utils.Writer",
                "str"
            ],
            "arguments": {}
        }
    },
    "qiskit-ibmq-provider-master/test/ibmq/test_proxies.py": {
        "pproxy_desired_access_log_line": {
            "name": "pproxy_desired_access_log_line",
            "location": 170,
            "return": [
                "str",
                "List[str]",
                "Optional[Dict]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "bytearray"
                ]
            }
        },
        "TestProxies.setUp": {
            "name": "setUp",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProxies.tearDown": {
            "name": "tearDown",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProxies.test_proxies_factory": {
            "name": "test_proxies_factory",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "qe_token": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "Dict[str, Any]"
                ],
                "qe_url": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "TestProxies.test_proxies_authclient": {
            "name": "test_proxies_authclient",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "qe_token": [
                    "str",
                    "dict",
                    "int"
                ],
                "qe_url": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "List[List[int]]"
                ]
            }
        },
        "TestProxies.test_proxies_versionclient": {
            "name": "test_proxies_versionclient",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "qe_token": [
                    "str",
                    "Sequence[Hashable]",
                    "List[Tuple[int, int]]"
                ],
                "qe_url": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "TestProxies.test_invalid_proxy_port_authclient": {
            "name": "test_invalid_proxy_port_authclient",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "qe_token": [
                    "str",
                    "dict",
                    "int"
                ],
                "qe_url": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "TestProxies.test_invalid_proxy_port_versionclient": {
            "name": "test_invalid_proxy_port_versionclient",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "qe_token": [
                    "str",
                    "Sequence[Hashable]",
                    "List[Tuple[int, int]]"
                ],
                "qe_url": [
                    "str"
                ]
            }
        },
        "TestProxies.test_invalid_proxy_address_authclient": {
            "name": "test_invalid_proxy_address_authclient",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "qe_token": [
                    "str",
                    "dict",
                    "int"
                ],
                "qe_url": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "TestProxies.test_invalid_proxy_address_versionclient": {
            "name": "test_invalid_proxy_address_versionclient",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "qe_token": [
                    "str",
                    "Sequence[Hashable]",
                    "List[Tuple[int, int]]"
                ],
                "qe_url": [
                    "str"
                ]
            }
        },
        "TestProxies.test_proxy_urls": {
            "name": "test_proxy_urls",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "qe_token": [
                    "str",
                    "Optional[str]"
                ],
                "qe_url": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TestProxies.test_proxy_urls_2": {
            "name": "test_proxy_urls_2",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "qe_token": [
                    "str",
                    "Optional[str]"
                ],
                "qe_url": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/test/ibmq/test_registration.py": {
        "TestCredentials.test_load_account_no_credentials": {
            "name": "test_load_account_no_credentials",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCredentials.test_store_credentials_overwrite": {
            "name": "test_store_credentials_overwrite",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCredentials.test_environ_over_qiskitrc": {
            "name": "test_environ_over_qiskitrc",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCredentialsKwargs.test_no_proxy_params": {
            "name": "test_no_proxy_params",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCredentialsKwargs.test_verify_param": {
            "name": "test_verify_param",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCredentialsKwargs.test_proxy_param": {
            "name": "test_proxy_param",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCredentialsKwargs.test_proxies_param_with_ntlm": {
            "name": "test_proxies_param_with_ntlm",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCredentialsKwargs.test_malformed_proxy_param": {
            "name": "test_malformed_proxy_param",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCredentialsKwargs.test_malformed_ntlm_params": {
            "name": "test_malformed_ntlm_params",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPreferences.test_save_preferences": {
            "name": "test_save_preferences",
            "location": 196,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPreferences.test_update_preferences": {
            "name": "test_update_preferences",
            "location": 204,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPreferences.test_new_provider_pref": {
            "name": "test_new_provider_pref",
            "location": 214,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPreferences.test_update_one_of_many_providers": {
            "name": "test_update_one_of_many_providers",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPreferences.test_save_same_value_twice": {
            "name": "test_save_same_value_twice",
            "location": 237,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPreferences.test_new_pref_cat": {
            "name": "test_new_pref_cat",
            "location": 247,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPreferences.test_overwrite_category_keys": {
            "name": "test_overwrite_category_keys",
            "location": 266,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPreferences.test_save_preferences_credentials": {
            "name": "test_save_preferences_credentials",
            "location": 284,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPreferences.test_update_preferences_with_credentials": {
            "name": "test_update_preferences_with_credentials",
            "location": 295,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPreferences.test_remove_credentials": {
            "name": "test_remove_credentials",
            "location": 315,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPreferences._get_pref_dict": {
            "name": "_get_pref_dict",
            "location": 327,
            "return": [
                "int",
                "str",
                "bool",
                "List[Tuple[Any, Any]]"
            ],
            "arguments": {
                "self": [],
                "hgp": [
                    "str",
                    "bool",
                    "Optional[Dict]",
                    "List[str]"
                ],
                "cat": [
                    "int",
                    "str"
                ],
                "pref_key": [
                    "int",
                    "str"
                ],
                "pref_val": [
                    "int",
                    "str"
                ]
            }
        },
        "TestIBMQAccountUpdater.setUp": {
            "name": "setUp",
            "location": 343,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQAccountUpdater.tearDown": {
            "name": "tearDown",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQAccountUpdater.assertCorrectApi2Credentials": {
            "name": "assertCorrectApi2Credentials",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "IO"
                ],
                "credentials_dict": [
                    "str",
                    "List[dict]",
                    "List[int]",
                    "list",
                    "Tuple[dict, int]"
                ]
            }
        },
        "TestIBMQAccountUpdater.test_qe_credentials": {
            "name": "test_qe_credentials",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQAccountUpdater.test_qconsole_credentials": {
            "name": "test_qconsole_credentials",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQAccountUpdater.test_proxy_credentials": {
            "name": "test_proxy_credentials",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQAccountUpdater.test_multiple_credentials": {
            "name": "test_multiple_credentials",
            "location": 406,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQAccountUpdater.test_api2_non_auth_credentials": {
            "name": "test_api2_non_auth_credentials",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQAccountUpdater.test_auth2_credentials": {
            "name": "test_auth2_credentials",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIBMQAccountUpdater.test_unknown_credentials": {
            "name": "test_unknown_credentials",
            "location": 441,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qiskit-ibmq-provider-master/test/ibmq/test_serialization.py": {
        "_find_potential_encoded": {
            "name": "_find_potential_encoded",
            "location": 221,
            "return": [],
            "arguments": {
                "data": [],
                "c_key": [],
                "tally": []
            }
        },
        "_check_encoded": {
            "name": "_check_encoded",
            "location": 241,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "_array_to_list": {
            "name": "_array_to_list",
            "location": 254,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "TestSerialization.setUpClass": {
            "name": "setUpClass",
            "location": 39,
            "return": [],
            "arguments": {
                "cls": [],
                "provider": []
            }
        },
        "TestSerialization.test_qasm_qobj": {
            "name": "test_qasm_qobj",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSerialization.test_pulse_qobj": {
            "name": "test_pulse_qobj",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSerialization.test_backend_configuration": {
            "name": "test_backend_configuration",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSerialization.test_pulse_defaults": {
            "name": "test_pulse_defaults",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSerialization.test_backend_properties": {
            "name": "test_backend_properties",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSerialization.test_qasm_job_result": {
            "name": "test_qasm_job_result",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSerialization.test_pulse_job_result": {
            "name": "test_pulse_job_result",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSerialization._verify_data": {
            "name": "_verify_data",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "good_keys": [],
                "good_key_prefixes": []
            }
        },
        "TestSerialization.test_convert_complex": {
            "name": "test_convert_complex",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSerialization.test_exception_message": {
            "name": "test_exception_message",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSerialization.test_encode_no_replace": {
            "name": "test_encode_no_replace",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSerialization.test_encode_replace": {
            "name": "test_encode_replace",
            "location": 207,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "qiskit-ibmq-provider-master/test/ibmq/test_tutorials.py": {
        "TutorialsTestCaseMeta.__new__": {
            "name": "__new__",
            "location": 33,
            "return": [
                "Mapping[str, Any]",
                "Optional[BaseException]",
                "Optional[Dict[str, str]]",
                "dict"
            ],
            "arguments": {
                "mcs": [
                    "str",
                    "Tuple[type]",
                    "Pattern[str]",
                    "Pattern[bytes]"
                ],
                "name": [
                    "str",
                    "Tuple[type]",
                    "Pattern[str]",
                    "Pattern[bytes]"
                ],
                "bases": [
                    "str",
                    "Tuple[type]",
                    "Pattern[str]",
                    "Pattern[bytes]"
                ],
                "dict_": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]",
                    "Type"
                ]
            }
        },
        "TestTutorials._run_notebook": {
            "name": "_run_notebook",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "TutorialsTestCaseMeta.__new__.create_test": {
            "name": "create_test",
            "location": 35,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "filename": [
                    "bool",
                    "str",
                    "IO",
                    "List[str]"
                ]
            }
        },
        "TutorialsTestCaseMeta.__new__.create_test.test_function": {
            "name": "test_function",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qiskit-ibmq-provider-master/test/ibmq/__init__.py": {},
    "qiskit-ibmq-provider-master/test/ibmq/experiment/test_experiment.py": {
        "TestExperimentPreferences.setUpClass": {
            "name": "setUpClass",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "type",
                    "Type"
                ]
            }
        },
        "TestExperimentPreferences._setup_provider": {
            "name": "_setup_provider",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "provider": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "TestExperimentPreferences.test_default_preferences": {
            "name": "test_default_preferences",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentPreferences.test_set_preferences": {
            "name": "test_set_preferences",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "qiskit-ibmq-provider-master/test/ibmq/experiment/test_experiment_server_integration.py": {
        "TestExperimentServerIntegration.setUpClass": {
            "name": "setUpClass",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "type",
                    "Exception"
                ]
            }
        },
        "TestExperimentServerIntegration._setup_provider": {
            "name": "_setup_provider",
            "location": 53,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "provider": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "TestExperimentServerIntegration._setup_backend": {
            "name": "_setup_backend",
            "location": 59,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "backend": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "TestExperimentServerIntegration.setUp": {
            "name": "setUp",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.tearDown": {
            "name": "tearDown",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_unauthorized": {
            "name": "test_unauthorized",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_experiments": {
            "name": "test_experiments",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_experiments_with_backend": {
            "name": "test_experiments_with_backend",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_experiments_with_type": {
            "name": "test_experiments_with_type",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_experiments_with_parent_id": {
            "name": "test_experiments_with_parent_id",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_experiments_with_type_operator": {
            "name": "test_experiments_with_type_operator",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_experiments_with_bad_type_operator": {
            "name": "test_experiments_with_bad_type_operator",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_experiments_with_start_time": {
            "name": "test_experiments_with_start_time",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_experiments_with_tags": {
            "name": "test_experiments_with_tags",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_experiments_with_hgp": {
            "name": "test_experiments_with_hgp",
            "location": 243,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_experiments_with_hgp_error": {
            "name": "test_experiments_with_hgp_error",
            "location": 265,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_experiments_with_exclude_public": {
            "name": "test_experiments_with_exclude_public",
            "location": 281,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_experiments_with_public_only": {
            "name": "test_experiments_with_public_only",
            "location": 306,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_experiments_with_public_filters_error": {
            "name": "test_experiments_with_public_filters_error",
            "location": 330,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_experiments_with_exclude_mine": {
            "name": "test_experiments_with_exclude_mine",
            "location": 337,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_experiments_with_mine_only": {
            "name": "test_experiments_with_mine_only",
            "location": 361,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_experiments_with_owner_filters_error": {
            "name": "test_experiments_with_owner_filters_error",
            "location": 383,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_experiments_with_limit": {
            "name": "test_experiments_with_limit",
            "location": 390,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_experiments_with_no_limit": {
            "name": "test_experiments_with_no_limit",
            "location": 396,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_experiments_with_sort_by": {
            "name": "test_experiments_with_sort_by",
            "location": 404,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_experiments_with_bad_sort_by": {
            "name": "test_experiments_with_bad_sort_by",
            "location": 433,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_experiments_with_device_components": {
            "name": "test_experiments_with_device_components",
            "location": 442,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_experiments_with_device_components_operator": {
            "name": "test_experiments_with_device_components_operator",
            "location": 453,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_experiments_with_bad_components_operator": {
            "name": "test_experiments_with_bad_components_operator",
            "location": 470,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_retrieve_experiment": {
            "name": "test_retrieve_experiment",
            "location": 477,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_upload_experiment": {
            "name": "test_upload_experiment",
            "location": 485,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_update_experiment": {
            "name": "test_update_experiment",
            "location": 521,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_delete_experiment": {
            "name": "test_delete_experiment",
            "location": 543,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_upload_analysis_result": {
            "name": "test_upload_analysis_result",
            "location": 554,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_update_analysis_result": {
            "name": "test_update_analysis_result",
            "location": 584,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_analysis_results": {
            "name": "test_analysis_results",
            "location": 607,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_analysis_results_device_components": {
            "name": "test_analysis_results_device_components",
            "location": 623,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_analysis_results_device_components_operator": {
            "name": "test_analysis_results_device_components_operator",
            "location": 638,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_analysis_results_experiment_id": {
            "name": "test_analysis_results_experiment_id",
            "location": 659,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_analysis_results_type": {
            "name": "test_analysis_results_type",
            "location": 669,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_analysis_results_type_operator": {
            "name": "test_analysis_results_type_operator",
            "location": 682,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_analysis_results_bad_type_operator": {
            "name": "test_analysis_results_bad_type_operator",
            "location": 706,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_analysis_results_quality": {
            "name": "test_analysis_results_quality",
            "location": 712,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_analysis_results_backend_name": {
            "name": "test_analysis_results_backend_name",
            "location": 748,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_analysis_results_verified": {
            "name": "test_analysis_results_verified",
            "location": 754,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_analysis_results_with_tags": {
            "name": "test_analysis_results_with_tags",
            "location": 766,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_analysis_results_with_limit": {
            "name": "test_analysis_results_with_limit",
            "location": 797,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_analysis_results_with_no_limit": {
            "name": "test_analysis_results_with_no_limit",
            "location": 803,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_analysis_results_with_sort_by": {
            "name": "test_analysis_results_with_sort_by",
            "location": 811,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_analysis_results_with_bad_sort_by": {
            "name": "test_analysis_results_with_bad_sort_by",
            "location": 854,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_delete_analysis_result": {
            "name": "test_delete_analysis_result",
            "location": 863,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_backend_components": {
            "name": "test_backend_components",
            "location": 872,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_backend_components_backend_name": {
            "name": "test_backend_components_backend_name",
            "location": 877,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_retrieve_backends": {
            "name": "test_retrieve_backends",
            "location": 884,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_create_figure": {
            "name": "test_create_figure",
            "location": 889,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_figure": {
            "name": "test_figure",
            "location": 921,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_update_figure": {
            "name": "test_update_figure",
            "location": 948,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_delete_figure": {
            "name": "test_delete_figure",
            "location": 967,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_experiment_coders": {
            "name": "test_experiment_coders",
            "location": 981,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration.test_analysis_result_coders": {
            "name": "test_analysis_result_coders",
            "location": 998,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperimentServerIntegration._create_experiment": {
            "name": "_create_experiment",
            "location": 1018,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "experiment_type": [
                    "str",
                    "Optional[str]"
                ],
                "backend_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TestExperimentServerIntegration._create_analysis_result": {
            "name": "_create_analysis_result",
            "location": 1035,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "exp_id": [
                    "str",
                    "List[int]",
                    "Dict[str, int]",
                    "int"
                ],
                "result_type": [
                    "str",
                    "Optional[Any]",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Mapping[str, Any]",
                    "int"
                ],
                "result_data": [
                    "str",
                    "int",
                    "cmk.utils.type_defs.UserId"
                ]
            }
        },
        "TestExperimentServerIntegration._find_backend_device_components": {
            "name": "_find_backend_device_components",
            "location": 1053,
            "return": [
                "Optional[str]",
                "str",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "min_components": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/test/ibmq/experiment/utils.py": {
        "ExperimentEncoder.default": {
            "name": "default",
            "location": 27,
            "return": [
                "BaseException",
                "bool",
                "Iterable"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str"
                ]
            }
        },
        "ExperimentDecoder.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ExperimentDecoder.object_hook": {
            "name": "object_hook",
            "location": 42,
            "return": [
                "Optional[int]",
                "int",
                "float",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Union[numpy.ndarray, numpy.void]",
                    "numpy.ndarray",
                    "str"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/test/ibmq/experiment/__init__.py": {},
    "qiskit-ibmq-provider-master/test/ibmq/runtime/fake_runtime_client.py": {
        "BaseFakeProgram.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "program_id": [
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "Optional[List[str]]"
                ],
                "data": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]",
                    "bool",
                    "dict",
                    "bytes"
                ],
                "cost": [
                    "str",
                    "Optional[str]",
                    "list",
                    "Optional[bool]",
                    "Iterable[str]"
                ],
                "description": [
                    "str",
                    "Optional[str]",
                    "list",
                    "Optional[bool]",
                    "Iterable[str]"
                ],
                "backend_requirements": [
                    "str",
                    "Optional[str]",
                    "list",
                    "Optional[bool]",
                    "Iterable[str]"
                ],
                "parameters": [
                    "str",
                    "Optional[str]",
                    "list",
                    "Optional[bool]",
                    "Iterable[str]"
                ],
                "return_values": [
                    "bool",
                    "int",
                    "uuid.UUID",
                    "str"
                ],
                "interim_results": [
                    "bool",
                    "Optional[int]",
                    "str"
                ],
                "is_public": [
                    "str",
                    "Optional[str]",
                    "list",
                    "Optional[bool]",
                    "Iterable[str]"
                ]
            }
        },
        "BaseFakeProgram.to_dict": {
            "name": "to_dict",
            "location": 45,
            "return": [
                "str",
                "Dict[str, Any]",
                "list",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "include_data": [
                    "int",
                    "str",
                    "List[cmk.gui.plugins.views.utils.Sorter.Entry]"
                ]
            }
        },
        "BaseFakeRuntimeJob.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "Optional[str]"
                ],
                "program_id": [
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "hub": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "group": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "project": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "backend_name": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "final_status": [
                    "Optional[bool]",
                    "Optional[int]",
                    "Optional[str]",
                    "str",
                    "Mapping",
                    "int"
                ],
                "params": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "image": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "log_level": [
                    "str",
                    "int"
                ]
            }
        },
        "BaseFakeRuntimeJob._auto_progress": {
            "name": "_auto_progress",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFakeRuntimeJob.to_dict": {
            "name": "to_dict",
            "location": 109,
            "return": [
                "int",
                "bool",
                "cmk.utils.type_defs.UserId",
                "Dict[str, Union[str, Set]]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFakeRuntimeJob.result": {
            "name": "result",
            "location": 121,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FailedRuntimeJob._auto_progress": {
            "name": "_auto_progress",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FailedRanTooLongRuntimeJob._auto_progress": {
            "name": "_auto_progress",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CancelableRuntimeJob.__init__": {
            "name": "__init__",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CancelableRuntimeJob.cancel": {
            "name": "cancel",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CancelableRuntimeJob.to_dict": {
            "name": "to_dict",
            "location": 178,
            "return": [
                "bytes",
                "dict",
                "Sequence",
                "Union[Dict, Tuple]",
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomResultRuntimeJob._auto_progress": {
            "name": "_auto_progress",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TimedRuntimeJob.__init__": {
            "name": "__init__",
            "location": 202,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TimedRuntimeJob._auto_progress": {
            "name": "_auto_progress",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFakeRuntimeClient.__init__": {
            "name": "__init__",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "job_classes": [
                    "List[Dict[str, Any]]",
                    "Tuple[List[Any], int]",
                    "Type['BaseModel']",
                    "int",
                    "bool",
                    "str",
                    "dict"
                ],
                "final_status": [
                    "str",
                    "bool",
                    "hackathon.utils.utils.DataMessage",
                    "List['Product']"
                ],
                "job_kwargs": [
                    "bool",
                    "dict",
                    "Optional[Iterable[Any]]"
                ]
            }
        },
        "BaseFakeRuntimeClient.set_job_classes": {
            "name": "set_job_classes",
            "location": 226,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "classes": [
                    "str",
                    "type",
                    "bool"
                ]
            }
        },
        "BaseFakeRuntimeClient.set_final_status": {
            "name": "set_final_status",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "final_status": [
                    "uuid.UUID",
                    "Union['KspNativeControl', int]",
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "BaseFakeRuntimeClient.list_programs": {
            "name": "list_programs",
            "location": 236,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "list",
                    "str",
                    "List[int]",
                    "List[Dict[str, Any]]",
                    "List[T]",
                    "Dict[str, str]",
                    "List[float]"
                ],
                "skip": [
                    "list",
                    "str",
                    "List[int]",
                    "List[Dict[str, Any]]",
                    "List[T]",
                    "Dict[str, str]",
                    "List[float]"
                ]
            }
        },
        "BaseFakeRuntimeClient.program_create": {
            "name": "program_create",
            "location": 243,
            "return": [
                "bool",
                "Dict[str, Any]",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "self": [],
                "program_data": [
                    "bool",
                    "str",
                    "qutebrowser.api.apitypes.Tab",
                    "Mapping[Any, str]",
                    "List[dict]"
                ],
                "name": [
                    "str",
                    "Iterable[str]"
                ],
                "description": [
                    "bool",
                    "str",
                    "qutebrowser.api.apitypes.Tab",
                    "Mapping[Any, str]",
                    "List[dict]"
                ],
                "max_execution_time": [
                    "bool",
                    "str",
                    "qutebrowser.api.apitypes.Tab",
                    "Mapping[Any, str]",
                    "List[dict]"
                ],
                "spec": [
                    "str",
                    "dict",
                    "bool",
                    "Optional[Union[Any, Any]]"
                ],
                "is_public": [
                    "bool",
                    "str",
                    "qutebrowser.api.apitypes.Tab",
                    "Mapping[Any, str]",
                    "List[dict]"
                ]
            }
        },
        "BaseFakeRuntimeClient.program_update": {
            "name": "program_update",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "program_id": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "dict"
                ],
                "program_data": [
                    "str",
                    "Optional[str]",
                    "Callable[[], Any]",
                    "bool",
                    "dict"
                ],
                "name": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "description": [
                    "str",
                    "Optional[str]"
                ],
                "max_execution_time": [
                    "int",
                    "str"
                ],
                "spec": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "BaseFakeRuntimeClient.program_get": {
            "name": "program_get",
            "location": 284,
            "return": [
                "str",
                "google.oauth2.credentials.Credentials"
            ],
            "arguments": {
                "self": [],
                "program_id": [
                    "dict",
                    "Dict[str, Any]",
                    "Iterable[str]",
                    "Iterable[int]",
                    "str"
                ]
            }
        },
        "BaseFakeRuntimeClient.program_run": {
            "name": "program_run",
            "location": 290,
            "return": [
                "bool",
                "cmk.utils.type_defs.HostName",
                "Tuple[str]",
                "Dict[str, Any]",
                "dict",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "self": [],
                "program_id": [
                    "str",
                    "Optional[int]",
                    "List[int]"
                ],
                "credentials": [
                    "str",
                    "Optional[int]",
                    "List[int]"
                ],
                "backend_name": [
                    "str",
                    "Optional[int]",
                    "List[int]"
                ],
                "params": [
                    "str",
                    "Optional[int]",
                    "List[int]"
                ],
                "image": [
                    "str",
                    "Optional[int]",
                    "List[int]"
                ],
                "log_level": [
                    "str",
                    "Optional[int]",
                    "List[int]"
                ]
            }
        },
        "BaseFakeRuntimeClient.program_delete": {
            "name": "program_delete",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "program_id": [
                    "str",
                    "Dict[str, str]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "BaseFakeRuntimeClient.job_get": {
            "name": "job_get",
            "location": 317,
            "return": [
                "bool",
                "cmk.utils.type_defs.UserId",
                "int"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "runtime.RemoteObjectId",
                    "Dict[str, Any]",
                    "int",
                    "str"
                ]
            }
        },
        "BaseFakeRuntimeClient.jobs_get": {
            "name": "jobs_get",
            "location": 321,
            "return": [
                "bool",
                "dict",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "int",
                    "Sequence",
                    "List[int]"
                ],
                "skip": [
                    "bool",
                    "List[Tuple[bool, Any]]",
                    "str",
                    "Optional[bool]",
                    "TextIO"
                ],
                "pending": [
                    "Optional[bool]",
                    "Optional[int]",
                    "bool",
                    "str",
                    "int",
                    "Optional[List[str]]"
                ],
                "program_id": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "uuid.UUID",
                    "TextIO"
                ]
            }
        },
        "BaseFakeRuntimeClient.set_program_visibility": {
            "name": "set_program_visibility",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "program_id": [
                    "runtime.RemoteObjectId",
                    "int",
                    "Dict[str, Any]",
                    "runtime.ScriptId"
                ],
                "public": [
                    "runtime.RemoteObjectId",
                    "int",
                    "Dict[str, Any]",
                    "runtime.ScriptId"
                ]
            }
        },
        "BaseFakeRuntimeClient.job_results": {
            "name": "job_results",
            "location": 350,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "runtime.RemoteObjectId",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "BaseFakeRuntimeClient.job_cancel": {
            "name": "job_cancel",
            "location": 354,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "int",
                    "runtime.RemoteObjectId",
                    "Dict[str, Any]"
                ]
            }
        },
        "BaseFakeRuntimeClient.job_delete": {
            "name": "job_delete",
            "location": 358,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str",
                    "int"
                ]
            }
        },
        "BaseFakeRuntimeClient._get_job": {
            "name": "_get_job",
            "location": 363,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "job_id": [
                    "str"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/test/ibmq/runtime/test_runtime.py": {
        "TestRuntime.setUp": {
            "name": "setUp",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_coder": {
            "name": "test_coder",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_coder_qc": {
            "name": "test_coder_qc",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_coder_operators": {
            "name": "test_coder_operators",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_coder_optimizers": {
            "name": "test_coder_optimizers",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_encoder_datetime": {
            "name": "test_encoder_datetime",
            "location": 247,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_encoder_ndarray": {
            "name": "test_encoder_ndarray",
            "location": 260,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_encoder_instruction": {
            "name": "test_encoder_instruction",
            "location": 273,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_encoder_callable": {
            "name": "test_encoder_callable",
            "location": 287,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_decoder_import": {
            "name": "test_decoder_import",
            "location": 295,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_list_programs": {
            "name": "test_list_programs",
            "location": 324,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_list_programs_with_limit_skip": {
            "name": "test_list_programs_with_limit_skip",
            "location": 331,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_list_program": {
            "name": "test_list_program",
            "location": 345,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_print_programs": {
            "name": "test_print_programs",
            "location": 351,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_upload_program": {
            "name": "test_upload_program",
            "location": 372,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_update_program": {
            "name": "test_update_program",
            "location": 384,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_update_program_no_new_fields": {
            "name": "test_update_program_no_new_fields",
            "location": 424,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_delete_program": {
            "name": "test_delete_program",
            "location": 431,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_double_delete_program": {
            "name": "test_double_delete_program",
            "location": 438,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_run_program": {
            "name": "test_run_program",
            "location": 445,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_run_program_with_custom_runtime_image": {
            "name": "test_run_program_with_custom_runtime_image",
            "location": 457,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_run_program_with_custom_log_level": {
            "name": "test_run_program_with_custom_log_level",
            "location": 471,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_retrieve_program_data": {
            "name": "test_retrieve_program_data",
            "location": 477,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_program_params_validation": {
            "name": "test_program_params_validation",
            "location": 485,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_program_params_namespace": {
            "name": "test_program_params_namespace",
            "location": 503,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_run_program_failed": {
            "name": "test_run_program_failed",
            "location": 511,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_run_program_failed_ran_too_long": {
            "name": "test_run_program_failed_ran_too_long",
            "location": 522,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_retrieve_job": {
            "name": "test_retrieve_job",
            "location": 533,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_jobs_no_limit": {
            "name": "test_jobs_no_limit",
            "location": 542,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_jobs_limit": {
            "name": "test_jobs_limit",
            "location": 551,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_jobs_skip": {
            "name": "test_jobs_skip",
            "location": 565,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_jobs_skip_limit": {
            "name": "test_jobs_skip_limit",
            "location": 574,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_jobs_pending": {
            "name": "test_jobs_pending",
            "location": 583,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_jobs_limit_pending": {
            "name": "test_jobs_limit_pending",
            "location": 592,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_jobs_skip_pending": {
            "name": "test_jobs_skip_pending",
            "location": 601,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_jobs_limit_skip_pending": {
            "name": "test_jobs_limit_skip_pending",
            "location": 611,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_jobs_returned": {
            "name": "test_jobs_returned",
            "location": 621,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_jobs_limit_returned": {
            "name": "test_jobs_limit_returned",
            "location": 630,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_jobs_skip_returned": {
            "name": "test_jobs_skip_returned",
            "location": 639,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_jobs_limit_skip_returned": {
            "name": "test_jobs_limit_skip_returned",
            "location": 649,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_jobs_filter_by_program_id": {
            "name": "test_jobs_filter_by_program_id",
            "location": 659,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_cancel_job": {
            "name": "test_cancel_job",
            "location": 671,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_final_result": {
            "name": "test_final_result",
            "location": 680,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_job_status": {
            "name": "test_job_status",
            "location": 686,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_job_inputs": {
            "name": "test_job_inputs",
            "location": 692,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_job_program_id": {
            "name": "test_job_program_id",
            "location": 698,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_wait_for_final_state": {
            "name": "test_wait_for_final_state",
            "location": 704,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_result_decoder": {
            "name": "test_result_decoder",
            "location": 710,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_get_result_twice": {
            "name": "test_get_result_twice",
            "location": 723,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_program_metadata": {
            "name": "test_program_metadata",
            "location": 733,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime.test_different_providers": {
            "name": "test_different_providers",
            "location": 749,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntime._upload_program": {
            "name": "_upload_program",
            "location": 760,
            "return": [
                "str",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Union[str, os.PathLike]",
                    "Optional[Union[int, Any]]",
                    "bool"
                ],
                "max_execution_time": [
                    "Optional[int]",
                    "datetime.date",
                    "Optional[str]"
                ],
                "is_public": [
                    "dict",
                    "str",
                    "Optional[int]",
                    "Optional[List[str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestRuntime._run_program": {
            "name": "_run_program",
            "location": 774,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "program_id": [
                    "Optional[str]",
                    "Optional[List[int]]",
                    "str",
                    "Optional[float]",
                    "Optional[int]",
                    "Dict[str, Any]"
                ],
                "inputs": [
                    "bool",
                    "Optional[str]",
                    "Optional[Dict[str, int]]",
                    "str",
                    "raiden.utils.Optional[raiden.utils.Address]"
                ],
                "job_classes": [
                    "str",
                    "dict",
                    "int"
                ],
                "final_status": [
                    "Optional[str]",
                    "str",
                    "datetime.datetime",
                    "Optional[Dict[str, str]]"
                ],
                "decoder": [
                    "bool",
                    "Optional[str]",
                    "Optional[Dict[str, int]]",
                    "str",
                    "raiden.utils.Optional[raiden.utils.Address]"
                ],
                "image": [
                    "bool",
                    "Optional[str]",
                    "Optional[Dict[str, int]]",
                    "str",
                    "raiden.utils.Optional[raiden.utils.Address]"
                ],
                "log_level": [
                    "str",
                    "Optional[int]",
                    "Optional[Union[str, Any]]",
                    "protoactor.cluster.providers.abstract_cluster_provider.AbstractClusterProvider",
                    "Optional[str]",
                    "bool",
                    "float"
                ]
            }
        },
        "TestRuntime._populate_jobs_with_all_statuses": {
            "name": "_populate_jobs_with_all_statuses",
            "location": 791,
            "return": [
                "dict",
                "List[numpy.ndarray]",
                "Dict[str, int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "jobs": [
                    "List[str]",
                    "int",
                    "Set[str]",
                    "str",
                    "list"
                ],
                "program_id": [
                    "List[str]",
                    "int",
                    "Set[str]",
                    "str",
                    "list"
                ]
            }
        },
        "TestRuntime._validate_program": {
            "name": "_validate_program",
            "location": 811,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "program": [
                    "dict",
                    "Union[List, Dict]",
                    "List[Dict[str, str]]"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/test/ibmq/runtime/test_runtime_integration.py": {
        "TestRuntimeIntegration.setUpClass": {
            "name": "setUpClass",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "List['RunnerState']",
                    "Mapping",
                    "Callable"
                ],
                "backend": [
                    "List['RunnerState']",
                    "Callable"
                ]
            }
        },
        "TestRuntimeIntegration.tearDownClass": {
            "name": "tearDownClass",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Type",
                    "AsyncGenerator",
                    "str"
                ]
            }
        },
        "TestRuntimeIntegration.setUp": {
            "name": "setUp",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.tearDown": {
            "name": "tearDown",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_runtime_service": {
            "name": "test_runtime_service",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_list_programs": {
            "name": "test_list_programs",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_list_programs_with_limit_skip": {
            "name": "test_list_programs_with_limit_skip",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_list_program": {
            "name": "test_list_program",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_retrieve_program_data": {
            "name": "test_retrieve_program_data",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_retrieve_unauthorized_program_data": {
            "name": "test_retrieve_unauthorized_program_data",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_upload_program": {
            "name": "test_upload_program",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_upload_program_file": {
            "name": "test_upload_program_file",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_upload_public_program": {
            "name": "test_upload_public_program",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_set_visibility": {
            "name": "test_set_visibility",
            "location": 222,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_delete_program": {
            "name": "test_delete_program",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_double_delete_program": {
            "name": "test_double_delete_program",
            "location": 243,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_update_program_data": {
            "name": "test_update_program_data",
            "location": 250,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_update_program_metadata": {
            "name": "test_update_program_metadata",
            "location": 265,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_run_program": {
            "name": "test_run_program",
            "location": 287,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_run_program_failed": {
            "name": "test_run_program_failed",
            "location": 294,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_run_program_failed_ran_too_long": {
            "name": "test_run_program_failed_ran_too_long",
            "location": 309,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_retrieve_job_queued": {
            "name": "test_retrieve_job_queued",
            "location": 329,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_retrieve_job_running": {
            "name": "test_retrieve_job_running",
            "location": 338,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_retrieve_job_done": {
            "name": "test_retrieve_job_done",
            "location": 346,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_retrieve_all_jobs": {
            "name": "test_retrieve_all_jobs",
            "location": 354,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_retrieve_jobs_limit": {
            "name": "test_retrieve_jobs_limit",
            "location": 367,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_retrieve_pending_jobs": {
            "name": "test_retrieve_pending_jobs",
            "location": 379,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_retrieve_returned_jobs": {
            "name": "test_retrieve_returned_jobs",
            "location": 393,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_retrieve_jobs_by_program_id": {
            "name": "test_retrieve_jobs_by_program_id",
            "location": 407,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_cancel_job_queued": {
            "name": "test_cancel_job_queued",
            "location": 416,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_cancel_job_running": {
            "name": "test_cancel_job_running",
            "location": 427,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_cancel_job_done": {
            "name": "test_cancel_job_done",
            "location": 437,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_delete_job": {
            "name": "test_delete_job",
            "location": 444,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_interim_result_callback": {
            "name": "test_interim_result_callback",
            "location": 458,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_stream_results": {
            "name": "test_stream_results",
            "location": 480,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_stream_results_done": {
            "name": "test_stream_results_done",
            "location": 502,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_callback_error": {
            "name": "test_callback_error",
            "location": 518,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_callback_cancel_job": {
            "name": "test_callback_cancel_job",
            "location": 538,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_final_result": {
            "name": "test_final_result",
            "location": 562,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_job_status": {
            "name": "test_job_status",
            "location": 572,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_job_inputs": {
            "name": "test_job_inputs",
            "location": 578,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_job_backend": {
            "name": "test_job_backend",
            "location": 593,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_job_program_id": {
            "name": "test_job_program_id",
            "location": 598,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_wait_for_final_state": {
            "name": "test_wait_for_final_state",
            "location": 603,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_logout": {
            "name": "test_logout",
            "location": 609,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_run_circuit": {
            "name": "test_run_circuit",
            "location": 616,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_job_creation_date": {
            "name": "test_job_creation_date",
            "location": 623,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_websocket_proxy": {
            "name": "test_websocket_proxy",
            "location": 633,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_websocket_proxy_invalid_port": {
            "name": "test_websocket_proxy_invalid_port",
            "location": 648,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_job_logs": {
            "name": "test_job_logs",
            "location": 664,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration.test_run_program_log_level": {
            "name": "test_run_program_log_level",
            "location": 674,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeIntegration._validate_program": {
            "name": "_validate_program",
            "location": 688,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "program": [
                    "list",
                    "str",
                    "bool"
                ]
            }
        },
        "TestRuntimeIntegration._upload_program": {
            "name": "_upload_program",
            "location": 698,
            "return": [
                "str",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[Sequence[Any]]",
                    "Optional[str]",
                    "dict",
                    "bool"
                ],
                "max_execution_time": [
                    "int",
                    "bool",
                    "Optional[float]"
                ],
                "data": [
                    "int",
                    "str",
                    "Mapping",
                    "bytes"
                ],
                "is_public": [
                    "bool",
                    "str",
                    "Mapping[str, Any]",
                    "list",
                    "Optional[str]",
                    "Optional[Mapping]"
                ]
            }
        },
        "TestRuntimeIntegration._get_program_name": {
            "name": "_get_program_name",
            "location": 718,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "TestRuntimeIntegration._assert_complex_types_equal": {
            "name": "_assert_complex_types_equal",
            "location": 722,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "expected": [
                    "str",
                    "Callable",
                    "cmk.utils.type_defs.ServiceName",
                    "list"
                ],
                "received": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "bytes",
                    "Optional[Dict]"
                ]
            }
        },
        "TestRuntimeIntegration._run_program": {
            "name": "_run_program",
            "location": 729,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "program_id": [
                    "str",
                    "Mapping[Any, str]",
                    "raiden.utils.ChainID",
                    "bytes",
                    "Optional[qiskiproviders.ibmq.utils.utils.RefreshQueue]",
                    "Optional[float]"
                ],
                "iterations": [
                    "bool",
                    "Optional[int]",
                    "Union[str, int]",
                    "str",
                    "List[int]",
                    "Dict[str, Tuple[str, int, int]]"
                ],
                "interim_results": [
                    "bool",
                    "Optional[int]",
                    "Union[str, int]",
                    "str",
                    "List[int]",
                    "Dict[str, Tuple[str, int, int]]"
                ],
                "final_result": [
                    "bool",
                    "Optional[int]",
                    "Union[str, int]",
                    "str",
                    "List[int]",
                    "Dict[str, Tuple[str, int, int]]"
                ],
                "callback": [
                    "str",
                    "Optional[bool]",
                    "cdp.runtime.ScriptId",
                    "Callable[[], int]"
                ],
                "log_level": [
                    "int",
                    "Callable",
                    "Optional[int]",
                    "Union[int, str]",
                    "Callable[[Any], str]",
                    "bool",
                    "str"
                ]
            }
        },
        "TestRuntimeIntegration._wait_for_status": {
            "name": "_wait_for_status",
            "location": 746,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "job": [
                    "int",
                    "str",
                    "Dict[str, Any]"
                ],
                "status": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "TestRuntimeIntegration.test_interim_result_callback.result_callback": {
            "name": "result_callback",
            "location": 460,
            "return": [],
            "arguments": {
                "job_id": [],
                "interim_result": []
            }
        },
        "TestRuntimeIntegration.test_stream_results.result_callback": {
            "name": "result_callback",
            "location": 482,
            "return": [],
            "arguments": {
                "job_id": [],
                "interim_result": []
            }
        },
        "TestRuntimeIntegration.test_stream_results_done.result_callback": {
            "name": "result_callback",
            "location": 504,
            "return": [],
            "arguments": {
                "job_id": [],
                "interim_result": []
            }
        },
        "TestRuntimeIntegration.test_callback_error.result_callback": {
            "name": "result_callback",
            "location": 520,
            "return": [],
            "arguments": {
                "job_id": [],
                "interim_result": []
            }
        },
        "TestRuntimeIntegration.test_callback_cancel_job.result_callback": {
            "name": "result_callback",
            "location": 540,
            "return": [],
            "arguments": {
                "job_id": [],
                "interim_result": []
            }
        },
        "TestRuntimeIntegration.test_websocket_proxy.result_callback": {
            "name": "result_callback",
            "location": 635,
            "return": [],
            "arguments": {
                "job_id": [],
                "interim_result": []
            }
        },
        "TestRuntimeIntegration.test_websocket_proxy_invalid_port.result_callback": {
            "name": "result_callback",
            "location": 650,
            "return": [
                ""
            ],
            "arguments": {
                "job_id": [
                    "str",
                    "bool",
                    "uuid.UUID"
                ],
                "interim_result": [
                    "str",
                    "bool",
                    "uuid.UUID"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/test/ibmq/runtime/test_runtime_ws.py": {
        "TestRuntimeWebsocketClient.setUpClass": {
            "name": "setUpClass",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestRuntimeWebsocketClient.tearDownClass": {
            "name": "tearDownClass",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Tuple[str]",
                    "Callable[[str], str]"
                ]
            }
        },
        "TestRuntimeWebsocketClient.test_interim_result_callback": {
            "name": "test_interim_result_callback",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeWebsocketClient.test_stream_results": {
            "name": "test_stream_results",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeWebsocketClient.test_duplicate_streaming": {
            "name": "test_duplicate_streaming",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeWebsocketClient.test_cancel_streaming": {
            "name": "test_cancel_streaming",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeWebsocketClient.test_cancel_closed_streaming": {
            "name": "test_cancel_closed_streaming",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeWebsocketClient.test_completed_job": {
            "name": "test_completed_job",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeWebsocketClient.test_completed_job_stream": {
            "name": "test_completed_job_stream",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeWebsocketClient.test_websocket_retry_success": {
            "name": "test_websocket_retry_success",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeWebsocketClient.test_websocket_retry_failure": {
            "name": "test_websocket_retry_failure",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuntimeWebsocketClient._get_job": {
            "name": "_get_job",
            "location": 173,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "callback": [
                    "str",
                    "List[str]"
                ],
                "job_id": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestRuntimeWebsocketClient.test_interim_result_callback.result_callback": {
            "name": "result_callback",
            "location": 51,
            "return": [],
            "arguments": {
                "job_id": [],
                "interim_result": []
            }
        },
        "TestRuntimeWebsocketClient.test_stream_results.result_callback": {
            "name": "result_callback",
            "location": 64,
            "return": [],
            "arguments": {
                "job_id": [],
                "interim_result": []
            }
        },
        "TestRuntimeWebsocketClient.test_duplicate_streaming.result_callback": {
            "name": "result_callback",
            "location": 78,
            "return": [],
            "arguments": {
                "job_id": [],
                "interim_result": []
            }
        },
        "TestRuntimeWebsocketClient.test_cancel_streaming.result_callback": {
            "name": "result_callback",
            "location": 91,
            "return": [],
            "arguments": {
                "job_id": [],
                "interim_result": []
            }
        },
        "TestRuntimeWebsocketClient.test_cancel_closed_streaming.result_callback": {
            "name": "result_callback",
            "location": 109,
            "return": [],
            "arguments": {
                "job_id": [],
                "interim_result": []
            }
        },
        "TestRuntimeWebsocketClient.test_completed_job.result_callback": {
            "name": "result_callback",
            "location": 122,
            "return": [],
            "arguments": {
                "job_id": [],
                "interim_result": []
            }
        },
        "TestRuntimeWebsocketClient.test_completed_job_stream.result_callback": {
            "name": "result_callback",
            "location": 135,
            "return": [],
            "arguments": {
                "job_id": [],
                "interim_result": []
            }
        },
        "TestRuntimeWebsocketClient.test_websocket_retry_success.result_callback": {
            "name": "result_callback",
            "location": 149,
            "return": [],
            "arguments": {
                "job_id": [],
                "interim_result": []
            }
        },
        "TestRuntimeWebsocketClient.test_websocket_retry_failure.result_callback": {
            "name": "result_callback",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "job_id": [
                    "str",
                    "Dict[str, Any]"
                ],
                "interim_result": [
                    "str",
                    "int",
                    "Tuple[str, str]"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/test/ibmq/runtime/utils.py": {
        "get_complex_types": {
            "name": "get_complex_types",
            "location": 20,
            "return": [
                "str",
                "Type[Exception]"
            ],
            "arguments": {}
        },
        "SerializableClass.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "SerializableClass.to_json": {
            "name": "to_json",
            "location": 34,
            "return": [
                "dict",
                "int",
                "str",
                "tuple",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SerializableClass.from_json": {
            "name": "from_json",
            "location": 39,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "json_str": [
                    "str"
                ]
            }
        },
        "SerializableClass.__eq__": {
            "name": "__eq__",
            "location": 43,
            "return": [
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "SerializableClassDecoder.decode": {
            "name": "decode",
            "location": 51,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "str",
                    "dict",
                    "Dict[str, Set[str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "UnserializableClass.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "UnserializableClass.__eq__": {
            "name": "__eq__",
            "location": 66,
            "return": [
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "qiskit-ibmq-provider-master/test/ibmq/runtime/ws_handler.py": {},
    "qiskit-ibmq-provider-master/test/ibmq/runtime/__init__.py": {},
    "qiskit-ibmq-provider-master/test/ibmq/websocket/test_websocket.py": {
        "TestWebsocketClient.test_invalid_url": {
            "name": "test_invalid_url",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebsocketClient.test_threading": {
            "name": "test_threading",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebsocketClientMock.setUpClass": {
            "name": "setUpClass",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "purplship.core.utils.Element",
                    "purplship.core.utils.xml.Element"
                ]
            }
        },
        "TestWebsocketClientMock.tearDownClass": {
            "name": "tearDownClass",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Tuple[str]",
                    "Callable[[str], str]"
                ]
            }
        },
        "TestWebsocketClientMock._get_ws_client": {
            "name": "_get_ws_client",
            "location": 76,
            "return": [
                "str",
                "bool",
                "Optional[int]",
                "Optional[cmk.utils.type_defs.HostAddress]",
                "dict",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "List[str]"
                ],
                "url": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TestWebsocketClientMock.test_job_final_status": {
            "name": "test_job_final_status",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebsocketClientMock.test_job_transition": {
            "name": "test_job_transition",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebsocketClientMock.test_timeout": {
            "name": "test_timeout",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebsocketClientMock.test_invalid_response": {
            "name": "test_invalid_response",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebsocketClientMock.test_websocket_retry_success": {
            "name": "test_websocket_retry_success",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebsocketClientMock.test_websocket_retry_failure": {
            "name": "test_websocket_retry_failure",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebsocketClientMock.test_websocket_job_not_found": {
            "name": "test_websocket_job_not_found",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebsocketClientMock.test_websocket_status_queue": {
            "name": "test_websocket_status_queue",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebsocketClient.test_threading._import_websocket": {
            "name": "_import_websocket",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "qiskit-ibmq-provider-master/test/ibmq/websocket/test_websocket_integration.py": {
        "TestWebsocketIntegration.setUpClass": {
            "name": "setUpClass",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Type"
                ],
                "provider": [
                    "str",
                    "int",
                    "Type",
                    "type",
                    "Type[T]"
                ]
            }
        },
        "TestWebsocketIntegration.setUp": {
            "name": "setUp",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebsocketIntegration.tearDown": {
            "name": "tearDown",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebsocketIntegration._job_final_status_polling": {
            "name": "_job_final_status_polling",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebsocketIntegration.test_websockets_simulator": {
            "name": "test_websockets_simulator",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebsocketIntegration.test_websockets_device": {
            "name": "test_websockets_device",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "backend": [
                    "str"
                ]
            }
        },
        "TestWebsocketIntegration.test_websockets_job_final_state": {
            "name": "test_websockets_job_final_state",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebsocketIntegration.test_websockets_retry_bad_url": {
            "name": "test_websockets_retry_bad_url",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebsocketIntegration.test_websockets_retry_bad_auth": {
            "name": "test_websockets_retry_bad_auth",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebsocketIntegration.test_websockets_retry_connection_closed": {
            "name": "test_websockets_retry_connection_closed",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebsocketIntegration.test_websockets_timeout": {
            "name": "test_websockets_timeout",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebsocketIntegration.test_websockets_multi_job": {
            "name": "test_websockets_multi_job",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebsocketIntegration.test_websocket_proxy": {
            "name": "test_websocket_proxy",
            "location": 196,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebsocketIntegration.test_websocket_proxy_invalid_port": {
            "name": "test_websocket_proxy_invalid_port",
            "location": 208,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWebsocketIntegration.test_websockets_retry_connection_closed._job_status_side_effect": {
            "name": "_job_status_side_effect",
            "location": 132,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {}
        },
        "TestWebsocketIntegration.test_websockets_multi_job._run_job_get_result": {
            "name": "_run_job_get_result",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "q": [
                    "str",
                    "Optional[Union[Dict, str, int, bytes]]"
                ]
            }
        }
    },
    "qiskit-ibmq-provider-master/test/ibmq/websocket/ws_handler.py": {},
    "qiskit-ibmq-provider-master/test/ibmq/websocket/__init__.py": {},
    "qiskit-ibmq-provider-master/tools/verify_headers.py": {
        "discover_files": {
            "name": "discover_files",
            "location": 23,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "code_paths": [
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "validate_header": {
            "name": "validate_header",
            "location": 37,
            "return": [
                "str",
                "tuple",
                "argparse.Namespace",
                "Optional[str]",
                "Set[str]"
            ],
            "arguments": {
                "file_path": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {}
        }
    }
}
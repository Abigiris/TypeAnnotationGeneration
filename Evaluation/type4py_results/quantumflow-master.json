{
    "quantumflow-master/setup.py": {},
    "quantumflow-master/docs/source/conf.py": {
        "setup": {
            "name": "setup",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "Tuple[Callable, Callable]"
                ]
            }
        },
        "do_edits": {
            "name": "do_edits",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "quantumflow-master/examples/circuit_identities.py": {
        "identities": {
            "name": "identities",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "_print_circuit_identity": {
            "name": "_print_circuit_identity",
            "location": 299,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "int",
                    "Optional[bytes]",
                    "Optional[str]",
                    "tuple"
                ],
                "circ0": [
                    "str",
                    "Tuple[int, int]",
                    "int"
                ],
                "circ1": [
                    "str",
                    "Tuple[int, int]",
                    "int"
                ],
                "width": [
                    "int",
                    "str",
                    "Tuple[str, str, str]",
                    "List[Tuple[int, int]]",
                    "Callable"
                ]
            }
        },
        "_check_circuit_identities": {
            "name": "_check_circuit_identities",
            "location": 314,
            "return": [
                ""
            ],
            "arguments": {
                "circuit_identities": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "identities.cphase_to_zz": {
            "name": "cphase_to_zz",
            "location": 242,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "gate": [
                    "dict",
                    "Dict[str, List]"
                ]
            }
        },
        "identities.cphase00_to_zz": {
            "name": "cphase00_to_zz",
            "location": 248,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "gate": [
                    "dict",
                    "Dict[str, List]"
                ]
            }
        },
        "identities.cphase01_to_zz": {
            "name": "cphase01_to_zz",
            "location": 256,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "gate": [
                    "dict",
                    "Dict[str, List]"
                ]
            }
        },
        "identities.cphase10_to_zz": {
            "name": "cphase10_to_zz",
            "location": 264,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "gate": [
                    "dict",
                    "Dict[str, List]"
                ]
            }
        }
    },
    "quantumflow-master/examples/circuit_visulizations.py": {},
    "quantumflow-master/examples/eager_fit_gate.py": {
        "fit_zyz": {
            "name": "fit_zyz",
            "location": 21,
            "return": [
                "str",
                "int",
                "Iterable[Any]"
            ],
            "arguments": {
                "target_gate": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "fit_zyz.loss_fn": {
            "name": "loss_fn",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "quantumflow-master/examples/qaoa_maxcut.py": {
        "maxcut_qaoa": {
            "name": "maxcut_qaoa",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "graph": [
                    "int",
                    "Callable",
                    "str"
                ],
                "steps": [
                    "bool",
                    "List['cirq.Qid']",
                    "float",
                    "numpy.ndarray"
                ],
                "learning_rate": [
                    "int",
                    "Callable",
                    "str"
                ],
                "verbose": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_cli": {
            "name": "_cli",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "quantumflow-master/examples/quilc.py": {},
    "quantumflow-master/examples/state_prep_w16.py": {
        "prepare_w16": {
            "name": "prepare_w16",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "w16_circuit": {
            "name": "w16_circuit",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "quantumflow-master/examples/state_prep_w4.py": {
        "prepare_w4": {
            "name": "prepare_w4",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "quantumflow-master/examples/swaptest.py": {
        "swap_test": {
            "name": "swap_test",
            "location": 16,
            "return": [
                "quantumflow.Qubit",
                "int",
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "ket": [
                    "List[str]",
                    "str"
                ],
                "q0": [
                    "quantumflow.Qubit",
                    "int",
                    "str",
                    "Dict[str, int]"
                ],
                "q1": [
                    "quantumflow.Qubit",
                    "int",
                    "str",
                    "Dict[str, int]"
                ],
                "q2": [
                    "quantumflow.Qubit",
                    "int",
                    "str",
                    "Dict[str, int]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "quantumflow-master/examples/tensorflow2_fit_gate.py": {
        "fit_zyz": {
            "name": "fit_zyz",
            "location": 21,
            "return": [
                "str",
                "int",
                "Iterable[Any]"
            ],
            "arguments": {
                "target_gate": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "fit_zyz.loss_fn": {
            "name": "loss_fn",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "quantumflow-master/examples/tensorflow_fit_gate.py": {
        "fit_zyz": {
            "name": "fit_zyz",
            "location": 20,
            "return": [
                "bool",
                "str",
                "float",
                "Type"
            ],
            "arguments": {
                "target_gate": [
                    "str",
                    "bool",
                    "bytes",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "quantumflow-master/examples/weyl.py": {
        "sandwich_decompositions": {
            "name": "sandwich_decompositions",
            "location": 82,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "coords0": [
                    "int",
                    "Callable",
                    "str"
                ],
                "coords1": [
                    "int",
                    "Callable",
                    "str"
                ],
                "samples": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "display_weyl": {
            "name": "display_weyl",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "decomps": [
                    "float",
                    "Optional[Union[str, Any]]",
                    "Callable",
                    "str",
                    "list",
                    "Union[int, slice]"
                ]
            }
        },
        "_cli": {
            "name": "_cli",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "quantumflow-master/examples/__init__.py": {},
    "quantumflow-master/quantumflow/cbits.py": {
        "Register.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ],
                "dtype": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Register.__getitem__": {
            "name": "__getitem__",
            "location": 31,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Optional[str]",
                    "str",
                    "tuple",
                    "Dict[str, str]",
                    "int",
                    "Callable[[KT], VT]",
                    "Type[RuntimeError]"
                ]
            }
        },
        "Register.__lt__": {
            "name": "__lt__",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Optional[str]",
                    "MutableMapping[str, Any]"
                ]
            }
        },
        "Register.__eq__": {
            "name": "__eq__",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Optional[str]",
                    "MutableMapping[str, Any]"
                ]
            }
        },
        "Register.__hash__": {
            "name": "__hash__",
            "location": 44,
            "return": [
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Register.__repr__": {
            "name": "__repr__",
            "location": 47,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Addr.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "register": [
                    "Mapping[str, Any]",
                    "int",
                    "str"
                ],
                "key": [
                    "dict",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "T",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "Addr.dtype": {
            "name": "dtype",
            "location": 60,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Addr.__str__": {
            "name": "__str__",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Addr.__repr__": {
            "name": "__repr__",
            "location": 66,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Addr.__lt__": {
            "name": "__lt__",
            "location": 69,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Union[int, float]",
                    "str"
                ]
            }
        },
        "Addr.__eq__": {
            "name": "__eq__",
            "location": 74,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Union[int, float]",
                    "str"
                ]
            }
        },
        "Addr.__hash__": {
            "name": "__hash__",
            "location": 79,
            "return": [
                "str",
                "int",
                "Exception",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "quantumflow-master/quantumflow/channels.py": {
        "join_channels": {
            "name": "join_channels",
            "location": 170,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "channel_to_kraus": {
            "name": "channel_to_kraus",
            "location": 181,
            "return": [
                "float",
                "str",
                "int",
                "Union[str, int, float]"
            ],
            "arguments": {
                "chan": [
                    "int",
                    "Tuple[float, float]",
                    "float",
                    "List[int]",
                    "Dict[int, numpy.ndarray]",
                    "Tuple[int, int, int]"
                ]
            }
        },
        "kraus_iscomplete": {
            "name": "kraus_iscomplete",
            "location": 207,
            "return": [
                "str",
                "bool",
                "bytes",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "kraus": [
                    "int",
                    "list",
                    "Tuple[int, int, int]",
                    "states.Density"
                ]
            }
        },
        "Kraus.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "operators": [
                    "str",
                    "List[int]",
                    "int",
                    "Tuple[int]",
                    "List[str]",
                    "list"
                ],
                "weights": [
                    "Sequence[float]",
                    "Optional[Iterable[int]]",
                    "Optional[Callable[[List], Any]]",
                    "int",
                    "Optional[numpy.ndarray]"
                ]
            }
        },
        "Kraus.asgate": {
            "name": "asgate",
            "location": 51,
            "return": [
                "ops.Gate"
            ],
            "arguments": {
                "self": []
            }
        },
        "Kraus.aschannel": {
            "name": "aschannel",
            "location": 58,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Kraus.run": {
            "name": "run",
            "location": 70,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "states.State",
                    "int",
                    "Iterable",
                    "list",
                    "numpy.ndarray"
                ]
            }
        },
        "Kraus.evolve": {
            "name": "evolve",
            "location": 79,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "rho": [
                    "str"
                ]
            }
        },
        "Kraus.qubits": {
            "name": "qubits",
            "location": 88,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Kraus.H": {
            "name": "H",
            "location": 103,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnitaryMixture.asgate": {
            "name": "asgate",
            "location": 119,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnitaryMixture.run": {
            "name": "run",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "ket": [
                    "ops.Operation"
                ]
            }
        },
        "Depolarizing.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prob": [
                    "int",
                    "bool",
                    "float"
                ],
                "q0": [
                    "qubits.Qubit",
                    "int",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "Damping.__init__": {
            "name": "__init__",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prob": [
                    "int",
                    "bool",
                    "float"
                ],
                "q0": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Dephasing.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prob": [
                    "int",
                    "bool",
                    "float"
                ],
                "q0": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "quantumflow-master/quantumflow/circuits.py": {
        "count_operations": {
            "name": "count_operations",
            "location": 141,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "elements": [
                    "Sequence[T]",
                    "tuple",
                    "Iterable[ops.Operation]",
                    "List[int]",
                    "str"
                ]
            }
        },
        "map_gate": {
            "name": "map_gate",
            "location": 152,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "gate": [
                    "int",
                    "Callable",
                    "str"
                ],
                "args": []
            }
        },
        "qft_circuit": {
            "name": "qft_circuit",
            "location": 170,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "qubits": [
                    "int",
                    "bool"
                ]
            }
        },
        "reversal_circuit": {
            "name": "reversal_circuit",
            "location": 187,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "qubits": [
                    "int",
                    "bool"
                ]
            }
        },
        "control_circuit": {
            "name": "control_circuit",
            "location": 196,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "controls": [
                    "float"
                ],
                "gate": [
                    "ops.Gate",
                    "Dict[str, Tuple[int, int]]",
                    "float"
                ]
            }
        },
        "ccnot_circuit": {
            "name": "ccnot_circuit",
            "location": 227,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "qubits": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "zyz_circuit": {
            "name": "zyz_circuit",
            "location": 260,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "t0": [
                    "float",
                    "int",
                    "Optional[Callable]",
                    "bool",
                    "str"
                ],
                "t1": [
                    "float",
                    "int",
                    "Optional[Callable]",
                    "bool",
                    "str"
                ],
                "t2": [
                    "float",
                    "int",
                    "Optional[Callable]",
                    "bool",
                    "str"
                ],
                "q0": [
                    "float",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "phase_estimation_circuit": {
            "name": "phase_estimation_circuit",
            "location": 269,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "gate": [
                    "str",
                    "T",
                    "Type[T]"
                ],
                "outputs": [
                    "qubits.Qubis",
                    "Dict[str, object]",
                    "Dict[str, Any]",
                    "Set[str]",
                    "dict",
                    "int",
                    "MutableMapping",
                    "str"
                ]
            }
        },
        "addition_circuit": {
            "name": "addition_circuit",
            "location": 306,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "addend0": [
                    "qubits.Qubis",
                    "str",
                    "int",
                    "Sequence[str]",
                    "Iterable[str]",
                    "Set[str]"
                ],
                "addend1": [
                    "qubits.Qubis",
                    "str",
                    "int",
                    "Sequence[str]",
                    "Iterable[str]",
                    "Set[str]"
                ],
                "carry": [
                    "qubits.Qubis",
                    "str",
                    "int",
                    "Sequence[str]",
                    "Iterable[str]",
                    "Set[str]"
                ]
            }
        },
        "ghz_circuit": {
            "name": "ghz_circuit",
            "location": 359,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "qubits": [
                    "qubits.Qubis",
                    "List[int]",
                    "List[str]",
                    "list",
                    "int"
                ]
            }
        },
        "Circuit.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "elements": [
                    "Iterable[ops.Operation]",
                    "Optional[str]",
                    "Tuple[int, int]",
                    "Optional[T]",
                    "bool",
                    "str"
                ]
            }
        },
        "Circuit.add": {
            "name": "add",
            "location": 49,
            "return": [
                "int",
                "Iterable[str]",
                "cirq.Operation",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str"
                ]
            }
        },
        "Circuit.extend": {
            "name": "extend",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "list",
                    "List[int]",
                    "dict",
                    "float"
                ]
            }
        },
        "Circuit.__add__": {
            "name": "__add__",
            "location": 60,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "List[str]",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "str"
                ]
            }
        },
        "Circuit.__iadd__": {
            "name": "__iadd__",
            "location": 63,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "Circuit.__iter__": {
            "name": "__iter__",
            "location": 67,
            "return": [
                "IO",
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "Circuit.size": {
            "name": "size",
            "location": 71,
            "return": [
                "Union[str, IO]",
                "Dict[str, Any]",
                "IO[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Circuit.qubits": {
            "name": "qubits",
            "location": 76,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Circuit.run": {
            "name": "run",
            "location": 87,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "states.State",
                    "Optional[str]"
                ]
            }
        },
        "Circuit.evolve": {
            "name": "evolve",
            "location": 102,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "rho": [
                    "states.Density",
                    "Optional[int]",
                    "int",
                    "Optional[bool]"
                ]
            }
        },
        "Circuit.asgate": {
            "name": "asgate",
            "location": 111,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Circuit.aschannel": {
            "name": "aschannel",
            "location": 122,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Circuit.H": {
            "name": "H",
            "location": 129,
            "return": [
                "list",
                "List[cirq.ops.Operation]",
                "int",
                "List[Dict[str, Any]]",
                "frozenset",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Circuit.__str__": {
            "name": "__str__",
            "location": 135,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "addition_circuit._maj": {
            "name": "_maj",
            "location": 327,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "qubits": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "addition_circuit._uma": {
            "name": "_uma",
            "location": 335,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "qubits": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "quantumflow-master/quantumflow/config.py": {},
    "quantumflow-master/quantumflow/dagcircuit.py": {
        "DAGCircuit.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "elements": [
                    "Iterable[ops.Operation]",
                    "bool"
                ]
            }
        },
        "DAGCircuit.qubits": {
            "name": "qubits",
            "location": 64,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DAGCircuit.qubit_nb": {
            "name": "qubit_nb",
            "location": 74,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DAGCircuit.H": {
            "name": "H",
            "location": 78,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DAGCircuit.run": {
            "name": "run",
            "location": 81,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "states.State",
                    "str",
                    "int",
                    "circuits.Circuit",
                    "torch.utils.data.DataLoader"
                ]
            }
        },
        "DAGCircuit.evolve": {
            "name": "evolve",
            "location": 86,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "rho": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "DAGCircuit.asgate": {
            "name": "asgate",
            "location": 91,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DAGCircuit.aschannel": {
            "name": "aschannel",
            "location": 94,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DAGCircuit.depth": {
            "name": "depth",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "local": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DAGCircuit.size": {
            "name": "size",
            "location": 115,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "DAGCircuit.component_nb": {
            "name": "component_nb",
            "location": 119,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DAGCircuit.components": {
            "name": "components",
            "location": 124,
            "return": [
                "List[cirq.ops.Operation]",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DAGCircuit.layers": {
            "name": "layers",
            "location": 129,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DAGCircuit.__iter__": {
            "name": "__iter__",
            "location": 153,
            "return": [
                "typing.Iterator[ops.Operation]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DAGCircuit.next_element": {
            "name": "next_element",
            "location": 159,
            "return": [
                "int",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "elem": [
                    "bool",
                    "dict",
                    "str",
                    "cmk.utils.type_defs.HostName"
                ],
                "qubit": [
                    "qubits.Qubit",
                    "Dict[str, Any]",
                    "Optional[bool]",
                    "Optional[int]"
                ]
            }
        },
        "DAGCircuit.prev_element": {
            "name": "prev_element",
            "location": 166,
            "return": [
                "int",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "elem": [
                    "bool",
                    "dict",
                    "str",
                    "cmk.utils.type_defs.HostName"
                ],
                "qubit": [
                    "qubits.Qubit",
                    "Dict[str, Any]",
                    "Optional[bool]",
                    "Optional[int]"
                ]
            }
        },
        "DAGCircuit.depth.remove_local": {
            "name": "remove_local",
            "location": 106,
            "return": [
                "typing.Generator[ops.Operation, None, None]"
            ],
            "arguments": {
                "dagc": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "quantumflow-master/quantumflow/decompositions.py": {
        "bloch_decomposition": {
            "name": "bloch_decomposition",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "gate": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "zyz_decomposition": {
            "name": "zyz_decomposition",
            "location": 65,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "gate": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "kronecker_decomposition": {
            "name": "kronecker_decomposition",
            "location": 111,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "gate": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "canonical_coords": {
            "name": "canonical_coords",
            "location": 153,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "gate": [
                    "Dict[str, float]",
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "canonical_decomposition": {
            "name": "canonical_decomposition",
            "location": 161,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "gate": [
                    "float",
                    "List['cirq.Qid']",
                    "bool",
                    "cirq.circuits.Circuit"
                ]
            }
        },
        "_eig_complex_symmetric": {
            "name": "_eig_complex_symmetric",
            "location": 262,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "M": [
                    "numpy.ndarray",
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "_lambdas_to_coords": {
            "name": "_lambdas_to_coords",
            "location": 312,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "lambdas": [
                    "Sequence[float]",
                    "str",
                    "BaseException"
                ]
            }
        },
        "_constrain_to_weyl": {
            "name": "_constrain_to_weyl",
            "location": 346,
            "return": [
                "str",
                "float",
                "List[str]",
                "T",
                "Optional[int]",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "lambdas": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        },
        "_in_weyl": {
            "name": "_in_weyl",
            "location": 366,
            "return": [
                "str"
            ],
            "arguments": {
                "tx": [
                    "float",
                    "str",
                    "bool",
                    "int"
                ],
                "ty": [
                    "float",
                    "str",
                    "bool",
                    "int"
                ],
                "tz": [
                    "float",
                    "str",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "quantumflow-master/quantumflow/gates.py": {
        "identity_gate": {
            "name": "identity_gate",
            "location": 57,
            "return": [
                "int",
                "slice",
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "qubits": [
                    "int",
                    "bool",
                    "Union[int, qubits.Qubis]",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "join_gates": {
            "name": "join_gates",
            "location": 63,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "control_gate": {
            "name": "control_gate",
            "location": 71,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "control": [
                    "int",
                    "Callable",
                    "str"
                ],
                "gate": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "conditional_gate": {
            "name": "conditional_gate",
            "location": 86,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "control": [
                    "int",
                    "Callable",
                    "str"
                ],
                "gate0": [
                    "int",
                    "Callable",
                    "str"
                ],
                "gate1": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "almost_unitary": {
            "name": "almost_unitary",
            "location": 97,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "gate": [
                    "int",
                    "List[cirq.ops.Qid]",
                    "bool"
                ]
            }
        },
        "almost_identity": {
            "name": "almost_identity",
            "location": 104,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "gate": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "almost_hermitian": {
            "name": "almost_hermitian",
            "location": 110,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "gate": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "print_gate": {
            "name": "print_gate",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "gate": [
                    "str",
                    "float",
                    "int"
                ],
                "ndigits": [
                    "str",
                    "float",
                    "int"
                ],
                "file": [
                    "TextIO",
                    "List[str]",
                    "set",
                    "list",
                    "bool",
                    "str"
                ]
            }
        },
        "random_gate": {
            "name": "random_gate",
            "location": 159,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "qubits": [
                    "Union[int, qubits.Qubis]",
                    "int",
                    "str"
                ]
            }
        },
        "I.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "I.H": {
            "name": "H",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "I.__pow__": {
            "name": "__pow__",
            "location": 53,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "numpy.array",
                    "float",
                    "Union[type, numpy.dtype]",
                    "str"
                ]
            }
        },
        "P0.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "q0": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "P1.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "q0": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        }
    },
    "quantumflow-master/quantumflow/measures.py": {
        "state_fidelity": {
            "name": "state_fidelity",
            "location": 32,
            "return": [
                "states.State",
                "int",
                "Sequence[Tuple[float, float]]",
                "Dict[str, str]",
                "bytes",
                "str"
            ],
            "arguments": {
                "state0": [
                    "numpy.ndarray",
                    "tuple",
                    "float",
                    "str",
                    "routemaster.config.StateMachine",
                    "int",
                    "states.State"
                ],
                "state1": [
                    "numpy.ndarray",
                    "tuple",
                    "float",
                    "str",
                    "routemaster.config.StateMachine",
                    "int",
                    "states.State"
                ]
            }
        },
        "state_angle": {
            "name": "state_angle",
            "location": 39,
            "return": [
                "states.State",
                "int",
                "Sequence[Tuple[float, float]]",
                "Dict[str, str]",
                "bytes",
                "str"
            ],
            "arguments": {
                "ket0": [
                    "states.State",
                    "int",
                    "Sequence[Tuple[float, float]]",
                    "Dict[str, str]",
                    "bytes",
                    "str"
                ],
                "ket1": [
                    "states.State",
                    "int",
                    "Sequence[Tuple[float, float]]",
                    "Dict[str, str]",
                    "bytes",
                    "str"
                ]
            }
        },
        "states_close": {
            "name": "states_close",
            "location": 47,
            "return": [],
            "arguments": {
                "state0": [
                    "numpy.ndarray",
                    "tuple",
                    "float",
                    "str",
                    "routemaster.config.StateMachine",
                    "int",
                    "states.State"
                ],
                "state1": [
                    "numpy.ndarray",
                    "tuple",
                    "float",
                    "str",
                    "routemaster.config.StateMachine",
                    "int",
                    "states.State"
                ],
                "tolerance": [
                    "numpy.ndarray",
                    "tuple",
                    "float",
                    "str",
                    "routemaster.config.StateMachine",
                    "int",
                    "states.State"
                ]
            }
        },
        "purity": {
            "name": "purity",
            "location": 59,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rho": [
                    "int",
                    "states.Density",
                    "str"
                ]
            }
        },
        "fidelity": {
            "name": "fidelity",
            "location": 76,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rho0": [
                    "str",
                    "Tuple[int, int]"
                ],
                "rho1": [
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "bures_distance": {
            "name": "bures_distance",
            "location": 95,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rho0": [
                    "dict",
                    "Tuple[str, str]",
                    "Optional[str]"
                ],
                "rho1": [
                    "dict",
                    "Tuple[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "bures_angle": {
            "name": "bures_angle",
            "location": 110,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rho0": [
                    "int",
                    "Callable",
                    "str"
                ],
                "rho1": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "density_angle": {
            "name": "density_angle",
            "location": 118,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rho0": [
                    "int",
                    "Callable",
                    "str"
                ],
                "rho1": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "densities_close": {
            "name": "densities_close",
            "location": 123,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rho0": [
                    "int",
                    "Callable",
                    "str"
                ],
                "rho1": [
                    "int",
                    "Callable",
                    "str"
                ],
                "tolerance": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "entropy": {
            "name": "entropy",
            "location": 133,
            "return": [
                "Callable",
                "str",
                "numpy.ndarray",
                "float"
            ],
            "arguments": {
                "rho": [
                    "float",
                    "str",
                    "Type",
                    "BinaryIO",
                    "bool",
                    "Type[T]"
                ],
                "base": [
                    "float",
                    "str",
                    "Type",
                    "BinaryIO",
                    "bool",
                    "Type[T]"
                ]
            }
        },
        "mutual_info": {
            "name": "mutual_info",
            "location": 152,
            "return": [
                "Set[str]",
                "bool",
                "List[str]",
                "set",
                "Union[str, bytes]"
            ],
            "arguments": {
                "rho": [
                    "bool",
                    "List[str]",
                    "int",
                    "str",
                    "Optional[List[\"DeliveryItem\"]]",
                    "Dict[str, Any]",
                    "Set[int]",
                    "Sequence[str]"
                ],
                "qubits0": [
                    "bool",
                    "List[str]",
                    "int",
                    "str",
                    "Optional[List[\"DeliveryItem\"]]",
                    "Dict[str, Any]",
                    "Set[int]",
                    "Sequence[str]"
                ],
                "qubits1": [
                    "List[str]",
                    "Sequence[Hashable]",
                    "Iterable[int]",
                    "Type"
                ],
                "base": [
                    "int",
                    "str"
                ]
            }
        },
        "gate_angle": {
            "name": "gate_angle",
            "location": 183,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "gate0": [
                    "int",
                    "Callable",
                    "str"
                ],
                "gate1": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "gates_close": {
            "name": "gates_close",
            "location": 188,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "gate0": [
                    "int",
                    "Callable",
                    "str"
                ],
                "gate1": [
                    "int",
                    "Callable",
                    "str"
                ],
                "tolerance": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "channel_angle": {
            "name": "channel_angle",
            "location": 199,
            "return": [
                "ops.Channel",
                "float",
                "str",
                "Tuple[bytes]",
                "List[str]"
            ],
            "arguments": {
                "chan0": [
                    "ops.Channel",
                    "float",
                    "str",
                    "Tuple[bytes]",
                    "List[str]"
                ],
                "chan1": [
                    "ops.Channel",
                    "float",
                    "str",
                    "Tuple[bytes]",
                    "List[str]"
                ]
            }
        },
        "channels_close": {
            "name": "channels_close",
            "location": 204,
            "return": [
                "ops.Channel",
                "float",
                "str",
                "Tuple[bytes]",
                "List[str]"
            ],
            "arguments": {
                "chan0": [
                    "ops.Channel",
                    "float",
                    "str",
                    "Tuple[bytes]",
                    "List[str]"
                ],
                "chan1": [
                    "ops.Channel",
                    "float",
                    "str",
                    "Tuple[bytes]",
                    "List[str]"
                ],
                "tolerance": [
                    "ops.Channel",
                    "float",
                    "str",
                    "Tuple[bytes]",
                    "List[str]"
                ]
            }
        },
        "diamond_norm": {
            "name": "diamond_norm",
            "location": 213,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "chan0": [
                    "List[int]",
                    "list",
                    "ops.Channel"
                ],
                "chan1": [
                    "list",
                    "List[int]",
                    "str",
                    "float"
                ]
            }
        }
    },
    "quantumflow-master/quantumflow/meta.py": {
        "print_versions": {
            "name": "print_versions",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "file": [
                    "TextIO",
                    "str"
                ]
            }
        }
    },
    "quantumflow-master/quantumflow/ops.py": {
        "Operation.qubits": {
            "name": "qubits",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Operation.qubit_nb": {
            "name": "qubit_nb",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Operation.name": {
            "name": "name",
            "location": 54,
            "return": [
                "str",
                "BaseException",
                "Exception",
                "Type[BaseException]",
                "type",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Operation.run": {
            "name": "run",
            "location": 58,
            "return": [
                "states.State"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "states.State",
                    "str",
                    "bool"
                ]
            }
        },
        "Operation.evolve": {
            "name": "evolve",
            "location": 62,
            "return": [
                "states.Density"
            ],
            "arguments": {
                "self": [],
                "rho": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Operation.quil": {
            "name": "quil",
            "location": 66,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Operation.__str__": {
            "name": "__str__",
            "location": 69,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Operation.asgate": {
            "name": "asgate",
            "location": 72,
            "return": [
                "'Gate'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Operation.aschannel": {
            "name": "aschannel",
            "location": 76,
            "return": [
                "'Channel'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Operation.H": {
            "name": "H",
            "location": 81,
            "return": [
                "'Operation'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gate.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tensor": [
                    "str",
                    "numpy.array",
                    "bool",
                    "int",
                    "bytes"
                ],
                "qubits": [
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[str]",
                    "str"
                ],
                "params": [
                    "Optional[float]",
                    "Optional[Union[str, Any]]",
                    "Optional[int]",
                    "bool",
                    "Optional[bool]"
                ],
                "name": [
                    "Sequence[str]",
                    "Optional[int]"
                ]
            }
        },
        "Gate.name": {
            "name": "name",
            "location": 126,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gate.tensor": {
            "name": "tensor",
            "location": 130,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gate.qubits": {
            "name": "qubits",
            "location": 135,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gate.qubit_nb": {
            "name": "qubit_nb",
            "location": 139,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gate.relabel": {
            "name": "relabel",
            "location": 142,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "qubits": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Gate.permute": {
            "name": "permute",
            "location": 148,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "qubits": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Gate.H": {
            "name": "H",
            "location": 154,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gate.asoperator": {
            "name": "asoperator",
            "location": 157,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gate.run": {
            "name": "run",
            "location": 161,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "int",
                    "float",
                    "Awaitable[T_co]",
                    "str"
                ]
            }
        },
        "Gate.evolve": {
            "name": "evolve",
            "location": 168,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "rho": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Gate.__pow__": {
            "name": "__pow__",
            "location": 175,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "Gate.__matmul__": {
            "name": "__matmul__",
            "location": 187,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[T]",
                    "Collection",
                    "Union[int, float]",
                    "raiden.utils.Any"
                ]
            }
        },
        "Gate.quil": {
            "name": "quil",
            "location": 201,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gate.asgate": {
            "name": "asgate",
            "location": 240,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gate.aschannel": {
            "name": "aschannel",
            "location": 243,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gate.su": {
            "name": "su",
            "location": 254,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.__init__": {
            "name": "__init__",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tensor": [
                    "str",
                    "int",
                    "float",
                    "tuple",
                    "bool"
                ],
                "qubits": [
                    "str",
                    "int",
                    "List[Tuple[str, float]]",
                    "bool"
                ],
                "params": [
                    "str",
                    "int",
                    "float",
                    "tuple",
                    "bool"
                ],
                "name": [
                    "Sequence[str]",
                    "Optional[int]"
                ]
            }
        },
        "Channel.name": {
            "name": "name",
            "location": 282,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.tensor": {
            "name": "tensor",
            "location": 286,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.qubits": {
            "name": "qubits",
            "location": 291,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.qubit_nb": {
            "name": "qubit_nb",
            "location": 295,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.relabel": {
            "name": "relabel",
            "location": 298,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "qubits": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Channel.permute": {
            "name": "permute",
            "location": 304,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "qubits": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Channel.H": {
            "name": "H",
            "location": 310,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.sharp": {
            "name": "sharp",
            "location": 315,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.choi": {
            "name": "choi",
            "location": 337,
            "return": [
                "str",
                "List[str]",
                "bytes",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.chi": {
            "name": "chi",
            "location": 345,
            "return": [
                "str",
                "List[str]",
                "bytes",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.run": {
            "name": "run",
            "location": 351,
            "return": [
                "'State'"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "states.State",
                    "str",
                    "bool"
                ]
            }
        },
        "Channel.evolve": {
            "name": "evolve",
            "location": 354,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "rho": [
                    "List['cirq.Qid']"
                ]
            }
        },
        "Channel.asgate": {
            "name": "asgate",
            "location": 365,
            "return": [
                "'Gate'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.aschannel": {
            "name": "aschannel",
            "location": 368,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.__add__": {
            "name": "__add__",
            "location": 374,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Union[int, str]"
                ]
            }
        },
        "Channel.__mul__": {
            "name": "__mul__",
            "location": 382,
            "return": [
                "int",
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]"
                ]
            }
        },
        "Channel.__matmul__": {
            "name": "__matmul__",
            "location": 387,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[T]",
                    "Collection",
                    "Union[int, float]",
                    "raiden.utils.Any"
                ]
            }
        },
        "Channel.trace": {
            "name": "trace",
            "location": 402,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Channel.partial_trace": {
            "name": "partial_trace",
            "location": 407,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "qubits": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Gate.quil._param_format": {
            "name": "_param_format",
            "location": 204,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "quantumflow-master/quantumflow/paulialgebra.py": {
        "sX": {
            "name": "sX",
            "location": 224,
            "return": [
                "str",
                "int",
                "Iterator[int]",
                "dict"
            ],
            "arguments": {
                "qubit": [
                    "complex",
                    "qubits.Qubit",
                    "str",
                    "dict",
                    "Tuple[int, int, int]",
                    "Callable",
                    "Callable[[None, None], bool]"
                ],
                "coefficient": [
                    "complex",
                    "qubits.Qubit",
                    "str",
                    "dict",
                    "Tuple[int, int, int]",
                    "Callable",
                    "Callable[[None, None], bool]"
                ]
            }
        },
        "sY": {
            "name": "sY",
            "location": 229,
            "return": [
                "complex",
                "qubits.Qubit",
                "int",
                "Union[bool, None]",
                "float"
            ],
            "arguments": {
                "qubit": [
                    "complex",
                    "qubits.Qubit",
                    "int",
                    "Union[bool, None]",
                    "float"
                ],
                "coefficient": [
                    "complex",
                    "qubits.Qubit",
                    "int",
                    "Union[bool, None]",
                    "float"
                ]
            }
        },
        "sZ": {
            "name": "sZ",
            "location": 234,
            "return": [
                "complex",
                "qubits.Qubit",
                "int",
                "Union[bool, None]",
                "float"
            ],
            "arguments": {
                "qubit": [
                    "complex",
                    "qubits.Qubit",
                    "int",
                    "Union[bool, None]",
                    "float"
                ],
                "coefficient": [
                    "complex",
                    "qubits.Qubit",
                    "int",
                    "Union[bool, None]",
                    "float"
                ]
            }
        },
        "sI": {
            "name": "sI",
            "location": 239,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "qubit": [
                    "qubits.Qubit",
                    "complex",
                    "Optional[str]",
                    "bytes",
                    "str",
                    "bool"
                ],
                "coefficient": [
                    "qubits.Qubit",
                    "complex",
                    "Optional[str]",
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        },
        "pauli_sum": {
            "name": "pauli_sum",
            "location": 245,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "pauli_product": {
            "name": "pauli_product",
            "location": 258,
            "return": [
                "dict",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "pauli_pow": {
            "name": "pauli_pow",
            "location": 282,
            "return": [
                "float"
            ],
            "arguments": {
                "pauli": [
                    "int",
                    "Callable",
                    "str"
                ],
                "exponent": [
                    "int",
                    "str",
                    "List[str]",
                    "List[int]",
                    "Callable[[int], None]",
                    "float"
                ]
            }
        },
        "paulis_close": {
            "name": "paulis_close",
            "location": 311,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "pauli0": [
                    "int",
                    "Callable",
                    "str"
                ],
                "pauli1": [
                    "int",
                    "Callable",
                    "str"
                ],
                "tolerance": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "paulis_commute": {
            "name": "paulis_commute",
            "location": 319,
            "return": [
                "bool"
            ],
            "arguments": {
                "element0": [
                    "Iterable[str]",
                    "List[Set[str]]",
                    "int"
                ],
                "element1": [
                    "Iterable[str]",
                    "List[Set[str]]",
                    "int"
                ]
            }
        },
        "pauli_commuting_sets": {
            "name": "pauli_commuting_sets",
            "location": 348,
            "return": [
                "str",
                "List[str]",
                "bool",
                "Set[str]"
            ],
            "arguments": {
                "element": [
                    "str",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "Pauli.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "terms": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Pauli.term": {
            "name": "term",
            "location": 83,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "float",
                    "type"
                ],
                "qubits": [
                    "Type",
                    "float",
                    "type"
                ],
                "ops": [
                    "str",
                    "Callable[..., None]",
                    "Type",
                    "Sequence[str]"
                ],
                "coefficient": [
                    "Type",
                    "float",
                    "type"
                ]
            }
        },
        "Pauli.sigma": {
            "name": "sigma",
            "location": 105,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "complex",
                    "bytes",
                    "str",
                    "Optional[int]",
                    "bool"
                ],
                "qubit": [
                    "Type",
                    "float",
                    "type"
                ],
                "operator": [
                    "Type",
                    "float",
                    "type"
                ],
                "coefficient": [
                    "complex",
                    "bytes",
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "Pauli.scalar": {
            "name": "scalar",
            "location": 114,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "float",
                    "type"
                ],
                "coefficient": [
                    "Type",
                    "float",
                    "type"
                ]
            }
        },
        "Pauli.is_scalar": {
            "name": "is_scalar",
            "location": 118,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pauli.identity": {
            "name": "identity",
            "location": 130,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "float",
                    "type"
                ]
            }
        },
        "Pauli.is_identity": {
            "name": "is_identity",
            "location": 134,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pauli.zero": {
            "name": "zero",
            "location": 144,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "Pauli.is_zero": {
            "name": "is_zero",
            "location": 148,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pauli.qubits": {
            "name": "qubits",
            "location": 153,
            "return": [
                "List[str]",
                "str",
                "qubits.Qubis",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pauli.__repr__": {
            "name": "__repr__",
            "location": 158,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pauli.__str__": {
            "name": "__str__",
            "location": 161,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pauli.__iter__": {
            "name": "__iter__",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pauli.__len__": {
            "name": "__len__",
            "location": 174,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pauli.__add__": {
            "name": "__add__",
            "location": 177,
            "return": [
                "dict",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[T]",
                    "Tuple[int, int, int]"
                ]
            }
        },
        "Pauli.__radd__": {
            "name": "__radd__",
            "location": 182,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "Pauli.__mul__": {
            "name": "__mul__",
            "location": 185,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "Pauli.__rmul__": {
            "name": "__rmul__",
            "location": 190,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "Pauli.__sub__": {
            "name": "__sub__",
            "location": 193,
            "return": [
                "bool",
                "int",
                "Iterable[T]",
                "str",
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "Pauli.__rsub__": {
            "name": "__rsub__",
            "location": 196,
            "return": [
                "bool",
                "int",
                "Iterable[T]",
                "str",
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "Pauli.__neg__": {
            "name": "__neg__",
            "location": 199,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pauli.__pos__": {
            "name": "__pos__",
            "location": 202,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pauli.__pow__": {
            "name": "__pow__",
            "location": 205,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "exponent": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Pauli.__lt__": {
            "name": "__lt__",
            "location": 208,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "Pauli.__eq__": {
            "name": "__eq__",
            "location": 213,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "Pauli.__hash__": {
            "name": "__hash__",
            "location": 218,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "paulis_commute._coincident_parity": {
            "name": "_coincident_parity",
            "location": 328,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "term0": [
                    "int",
                    "Callable",
                    "str"
                ],
                "term1": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "quantumflow-master/quantumflow/programs.py": {
        "Instruction.qubits": {
            "name": "qubits",
            "location": 64,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instruction.qubit_nb": {
            "name": "qubit_nb",
            "location": 69,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instruction.name": {
            "name": "name",
            "location": 74,
            "return": [
                "str",
                "BaseException",
                "Exception",
                "Type[BaseException]",
                "type",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instruction.quil": {
            "name": "quil",
            "location": 78,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instruction.__str__": {
            "name": "__str__",
            "location": 81,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Instruction.run": {
            "name": "run",
            "location": 84,
            "return": [
                "states.State"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "states.State",
                    "str",
                    "bool"
                ]
            }
        },
        "Instruction.evolve": {
            "name": "evolve",
            "location": 88,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": [],
                "rho": [
                    "int",
                    "Mapping[str, Any]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Program.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instructions": [
                    "Optional[str]",
                    "Callable",
                    "Optional[Any]",
                    "str",
                    "bool",
                    "Optional[bytes]",
                    "Optional[bool]"
                ],
                "name": [
                    "str",
                    "dict",
                    "Optional[Hashable]"
                ],
                "params": [
                    "str",
                    "dict",
                    "Optional[Hashable]"
                ]
            }
        },
        "Program.quil": {
            "name": "quil",
            "location": 109,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Program.qubits": {
            "name": "qubits",
            "location": 116,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Program.__iadd__": {
            "name": "__iadd__",
            "location": 123,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Union[int, \"BitVec\"]",
                    "List[Union[\"PipeChain\", str]]"
                ]
            }
        },
        "Program.__len__": {
            "name": "__len__",
            "location": 128,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Program.__getitem__": {
            "name": "__getitem__",
            "location": 131,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Optional[str]",
                    "str",
                    "tuple",
                    "Dict[str, str]",
                    "int",
                    "Callable[[KT], VT]",
                    "Type[RuntimeError]"
                ]
            }
        },
        "Program.__iter__": {
            "name": "__iter__",
            "location": 134,
            "return": [
                "typing.Generator[Instruction, None, None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Program._initilize": {
            "name": "_initilize",
            "location": 138,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "int",
                "SendCh[trio.abc.Stream]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "dict",
                    "Dict[str, int]",
                    "str",
                    "Tuple[Dict[str, Any], bool]",
                    "int"
                ]
            }
        },
        "Program.run": {
            "name": "run",
            "location": 152,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "states.State",
                    "states.Density",
                    "Optional[complex]",
                    "Optional[int]"
                ]
            }
        },
        "Program.evolve": {
            "name": "evolve",
            "location": 174,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "rho": [
                    "states.Density",
                    "Optional[int]",
                    "Optional[str]",
                    "int",
                    "basilisp.lang.symbol.Symbol"
                ]
            }
        },
        "DefCircuit.__init__": {
            "name": "__init__",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ],
                "params": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ],
                "qubits": [
                    "Callable",
                    "bool",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[Any]",
                    "Optional[int]"
                ],
                "instructions": [
                    "bool",
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "DefCircuit.qubits": {
            "name": "qubits",
            "location": 216,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DefCircuit.quil": {
            "name": "quil",
            "location": 219,
            "return": [
                "bool",
                "Tuple[Parameter]",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wait.run": {
            "name": "run",
            "location": 246,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "states.State",
                    "str",
                    "bool"
                ]
            }
        },
        "Nop.run": {
            "name": "run",
            "location": 253,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "states.State",
                    "str",
                    "bool"
                ]
            }
        },
        "Halt.run": {
            "name": "run",
            "location": 259,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "states.State",
                    "bytes",
                    "Dict[str, str]",
                    "dict",
                    "\"UnitTypeData\""
                ]
            }
        },
        "Load.__init__": {
            "name": "__init__",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int",
                    "bool",
                    "float"
                ],
                "left": [
                    "int",
                    "bool",
                    "float"
                ],
                "right": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Load.quil": {
            "name": "quil",
            "location": 272,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Load.run": {
            "name": "run",
            "location": 276,
            "return": [
                "states.State"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "states.State",
                    "str",
                    "bool"
                ]
            }
        },
        "Store.__init__": {
            "name": "__init__",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int",
                    "bool",
                    "float"
                ],
                "left": [
                    "int",
                    "bool",
                    "float"
                ],
                "right": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Store.quil": {
            "name": "quil",
            "location": 289,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Store.run": {
            "name": "run",
            "location": 293,
            "return": [
                "states.State"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "states.State",
                    "str",
                    "bool"
                ]
            }
        },
        "Label.__init__": {
            "name": "__init__",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Label.quil": {
            "name": "quil",
            "location": 302,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Label.run": {
            "name": "run",
            "location": 305,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "states.State",
                    "str",
                    "bool"
                ]
            }
        },
        "Jump.__init__": {
            "name": "__init__",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Jump.quil": {
            "name": "quil",
            "location": 314,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Jump.run": {
            "name": "run",
            "location": 317,
            "return": [
                "states.State",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "bool",
                    "bytes"
                ]
            }
        },
        "JumpWhen.__init__": {
            "name": "__init__",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int",
                    "bool",
                    "float"
                ],
                "condition": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "JumpWhen.quil": {
            "name": "quil",
            "location": 328,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JumpWhen.run": {
            "name": "run",
            "location": 331,
            "return": [
                "states.State",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "bytes",
                    "dict",
                    "int",
                    "Optional[Mapping[str, Any]]",
                    "BinaryIO"
                ]
            }
        },
        "JumpWhen.name": {
            "name": "name",
            "location": 338,
            "return": [
                "Dict[str, Any]",
                "str",
                "int",
                "Iterator",
                "Container[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JumpUnless.__init__": {
            "name": "__init__",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int",
                    "bool",
                    "float"
                ],
                "condition": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "JumpUnless.quil": {
            "name": "quil",
            "location": 349,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JumpUnless.run": {
            "name": "run",
            "location": 352,
            "return": [
                "states.State",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "bytes",
                    "dict",
                    "int",
                    "Optional[Mapping[str, Any]]",
                    "BinaryIO"
                ]
            }
        },
        "JumpUnless.name": {
            "name": "name",
            "location": 359,
            "return": [
                "Dict[str, Any]",
                "str",
                "int",
                "Iterator",
                "Container[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pragma.__init__": {
            "name": "__init__",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "int",
                    "bool",
                    "float"
                ],
                "args": [],
                "freeform": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Pragma.quil": {
            "name": "quil",
            "location": 378,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pragma.run": {
            "name": "run",
            "location": 386,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "states.State",
                    "str",
                    "bool"
                ]
            }
        },
        "Include.__init__": {
            "name": "__init__",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[str]"
                ],
                "program": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Include.quil": {
            "name": "quil",
            "location": 400,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Include.run": {
            "name": "run",
            "location": 403,
            "return": [
                "states.State"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "states.State",
                    "str",
                    "bool"
                ]
            }
        },
        "Call.__init__": {
            "name": "__init__",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ],
                "params": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ],
                "qubits": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Call.quil": {
            "name": "quil",
            "location": 417,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Call.run": {
            "name": "run",
            "location": 429,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "states.State",
                    "int",
                    "Awaitable[T_co]"
                ]
            }
        },
        "Declare.__init__": {
            "name": "__init__",
            "location": 496,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "memory_name": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ],
                "memory_type": [
                    "str"
                ],
                "memory_size": [
                    "str",
                    "int",
                    "dict",
                    "Optional[dict]",
                    "float",
                    "FrozenSet[Any]"
                ],
                "shared_region": [
                    "str",
                    "Optional[str]"
                ],
                "offsets": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Declare.quil": {
            "name": "quil",
            "location": 508,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Declare.run": {
            "name": "run",
            "location": 525,
            "return": [
                "states.State",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "states.State",
                    "bytes",
                    "\"UnitTypeData\"",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "quantumflow-master/quantumflow/qaoa.py": {
        "qubo_circuit": {
            "name": "qubo_circuit",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "graph": [
                    "networkx.Graph",
                    "str",
                    "Callable[..., bool]"
                ],
                "steps": [
                    "int",
                    "Callable",
                    "str"
                ],
                "beta": [
                    "int",
                    "Callable",
                    "str"
                ],
                "gamma": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "graph_cuts": {
            "name": "graph_cuts",
            "location": 68,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "graph": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "quantumflow-master/quantumflow/qubits.py": {
        "asarray": {
            "name": "asarray",
            "location": 34,
            "return": [],
            "arguments": {
                "tensor": []
            }
        },
        "inner_product": {
            "name": "inner_product",
            "location": 233,
            "return": [],
            "arguments": {
                "vec0": [],
                "vec1": []
            }
        },
        "outer_product": {
            "name": "outer_product",
            "location": 248,
            "return": [],
            "arguments": {
                "vec0": [],
                "vec1": []
            }
        },
        "fubini_study_angle": {
            "name": "fubini_study_angle",
            "location": 282,
            "return": [],
            "arguments": {
                "vec0": [],
                "vec1": []
            }
        },
        "vectors_close": {
            "name": "vectors_close",
            "location": 310,
            "return": [],
            "arguments": {
                "vec0": [],
                "vec1": [],
                "tolerance": []
            }
        },
        "qubits_count_tuple": {
            "name": "qubits_count_tuple",
            "location": 329,
            "return": [],
            "arguments": {
                "qubits": []
            }
        },
        "QubitVector.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "tensor": [],
                "qubits": [],
                "rank": []
            }
        },
        "QubitVector.__getitem__": {
            "name": "__getitem__",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "QubitVector.asarray": {
            "name": "asarray",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QubitVector.flatten": {
            "name": "flatten",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QubitVector.relabel": {
            "name": "relabel",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "qubits": []
            }
        },
        "QubitVector.permute": {
            "name": "permute",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "qubits": []
            }
        },
        "QubitVector.H": {
            "name": "H",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QubitVector.norm": {
            "name": "norm",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QubitVector.trace": {
            "name": "trace",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QubitVector.partial_trace": {
            "name": "partial_trace",
            "location": 201,
            "return": [],
            "arguments": {
                "self": [],
                "qubits": []
            }
        }
    },
    "quantumflow-master/quantumflow/states.py": {
        "zero_state": {
            "name": "zero_state",
            "location": 186,
            "return": [],
            "arguments": {
                "qubits": []
            }
        },
        "w_state": {
            "name": "w_state",
            "location": 194,
            "return": [],
            "arguments": {
                "qubits": []
            }
        },
        "ghz_state": {
            "name": "ghz_state",
            "location": 205,
            "return": [],
            "arguments": {
                "qubits": []
            }
        },
        "random_state": {
            "name": "random_state",
            "location": 214,
            "return": [],
            "arguments": {
                "qubits": []
            }
        },
        "join_states": {
            "name": "join_states",
            "location": 225,
            "return": [],
            "arguments": {}
        },
        "print_state": {
            "name": "print_state",
            "location": 234,
            "return": [],
            "arguments": {
                "state": [],
                "file": []
            }
        },
        "print_probabilities": {
            "name": "print_probabilities",
            "location": 243,
            "return": [],
            "arguments": {
                "state": [],
                "ndigits": [],
                "file": []
            }
        },
        "mixed_density": {
            "name": "mixed_density",
            "location": 322,
            "return": [],
            "arguments": {
                "qubits": []
            }
        },
        "random_density": {
            "name": "random_density",
            "location": 329,
            "return": [],
            "arguments": {
                "qubits": []
            }
        },
        "join_densities": {
            "name": "join_densities",
            "location": 349,
            "return": [],
            "arguments": {}
        },
        "State.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "tensor": [],
                "qubits": [],
                "memory": []
            }
        },
        "State.tensor": {
            "name": "tensor",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.qubits": {
            "name": "qubits",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.qubit_nb": {
            "name": "qubit_nb",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.norm": {
            "name": "norm",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.memory": {
            "name": "memory",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.update": {
            "name": "update",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "memory": []
            }
        },
        "State.cbits": {
            "name": "cbits",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.cbit_nb": {
            "name": "cbit_nb",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.relabel": {
            "name": "relabel",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "qubits": []
            }
        },
        "State.permute": {
            "name": "permute",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "qubits": []
            }
        },
        "State.normalize": {
            "name": "normalize",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.probabilities": {
            "name": "probabilities",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.sample": {
            "name": "sample",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "trials": []
            }
        },
        "State.expectation": {
            "name": "expectation",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "diag_hermitian": [],
                "trials": []
            }
        },
        "State.measure": {
            "name": "measure",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.asdensity": {
            "name": "asdensity",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "State.__str__": {
            "name": "__str__",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Density.__init__": {
            "name": "__init__",
            "location": 266,
            "return": [],
            "arguments": {
                "self": [],
                "tensor": [],
                "qubits": [],
                "memory": []
            }
        },
        "Density.trace": {
            "name": "trace",
            "location": 277,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Density.partial_trace": {
            "name": "partial_trace",
            "location": 282,
            "return": [],
            "arguments": {
                "self": [],
                "qubits": []
            }
        },
        "Density.relabel": {
            "name": "relabel",
            "location": 287,
            "return": [],
            "arguments": {
                "self": [],
                "qubits": []
            }
        },
        "Density.permute": {
            "name": "permute",
            "location": 291,
            "return": [],
            "arguments": {
                "self": [],
                "qubits": []
            }
        },
        "Density.normalize": {
            "name": "normalize",
            "location": 296,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Density.probabilities": {
            "name": "probabilities",
            "location": 302,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Density.asoperator": {
            "name": "asoperator",
            "location": 307,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Density.asdensity": {
            "name": "asdensity",
            "location": 311,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Density.update": {
            "name": "update",
            "location": 316,
            "return": [],
            "arguments": {
                "self": [],
                "memory": []
            }
        }
    },
    "quantumflow-master/quantumflow/stdgates.py": {
        "X.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "q0": []
            }
        },
        "X.H": {
            "name": "H",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "X.__pow__": {
            "name": "__pow__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "Y.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "q0": []
            }
        },
        "Y.H": {
            "name": "H",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Y.__pow__": {
            "name": "__pow__",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "Z.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "q0": []
            }
        },
        "Z.H": {
            "name": "H",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Z.__pow__": {
            "name": "__pow__",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "H.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "q0": []
            }
        },
        "H.H": {
            "name": "H",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "H.__pow__": {
            "name": "__pow__",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "S.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "q0": []
            }
        },
        "S.H": {
            "name": "H",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "S.__pow__": {
            "name": "__pow__",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "T.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "q0": []
            }
        },
        "T.H": {
            "name": "H",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "T.__pow__": {
            "name": "__pow__",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "PHASE.__init__": {
            "name": "__init__",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "theta": [],
                "q0": []
            }
        },
        "PHASE.H": {
            "name": "H",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PHASE.__pow__": {
            "name": "__pow__",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "RX.__init__": {
            "name": "__init__",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "theta": [],
                "q0": []
            }
        },
        "RX.H": {
            "name": "H",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RX.__pow__": {
            "name": "__pow__",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "RY.__init__": {
            "name": "__init__",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "theta": [],
                "q0": []
            }
        },
        "RY.H": {
            "name": "H",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RY.__pow__": {
            "name": "__pow__",
            "location": 231,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "RZ.__init__": {
            "name": "__init__",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "theta": [],
                "q0": []
            }
        },
        "RZ.H": {
            "name": "H",
            "location": 256,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RZ.__pow__": {
            "name": "__pow__",
            "location": 260,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "CZ.__init__": {
            "name": "__init__",
            "location": 277,
            "return": [],
            "arguments": {
                "self": [],
                "q0": [],
                "q1": []
            }
        },
        "CZ.H": {
            "name": "H",
            "location": 287,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CNOT.__init__": {
            "name": "__init__",
            "location": 301,
            "return": [],
            "arguments": {
                "self": [],
                "q0": [],
                "q1": []
            }
        },
        "CNOT.H": {
            "name": "H",
            "location": 311,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SWAP.__init__": {
            "name": "__init__",
            "location": 327,
            "return": [],
            "arguments": {
                "self": [],
                "q0": [],
                "q1": []
            }
        },
        "SWAP.H": {
            "name": "H",
            "location": 337,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ISWAP.__init__": {
            "name": "__init__",
            "location": 351,
            "return": [],
            "arguments": {
                "self": [],
                "q0": [],
                "q1": []
            }
        },
        "CPHASE00.__init__": {
            "name": "__init__",
            "location": 371,
            "return": [],
            "arguments": {
                "self": [],
                "theta": [],
                "q0": [],
                "q1": []
            }
        },
        "CPHASE00.H": {
            "name": "H",
            "location": 382,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CPHASE01.__init__": {
            "name": "__init__",
            "location": 393,
            "return": [],
            "arguments": {
                "self": [],
                "theta": [],
                "q0": [],
                "q1": []
            }
        },
        "CPHASE01.H": {
            "name": "H",
            "location": 404,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CPHASE10.__init__": {
            "name": "__init__",
            "location": 415,
            "return": [],
            "arguments": {
                "self": [],
                "theta": [],
                "q0": [],
                "q1": []
            }
        },
        "CPHASE10.H": {
            "name": "H",
            "location": 426,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CPHASE.__init__": {
            "name": "__init__",
            "location": 437,
            "return": [],
            "arguments": {
                "self": [],
                "theta": [],
                "q0": [],
                "q1": []
            }
        },
        "CPHASE.H": {
            "name": "H",
            "location": 448,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CPHASE.__pow__": {
            "name": "__pow__",
            "location": 452,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "PSWAP.__init__": {
            "name": "__init__",
            "location": 467,
            "return": [],
            "arguments": {
                "self": [],
                "theta": [],
                "q0": [],
                "q1": []
            }
        },
        "PSWAP.H": {
            "name": "H",
            "location": 477,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PISWAP.__init__": {
            "name": "__init__",
            "location": 498,
            "return": [],
            "arguments": {
                "self": [],
                "theta": [],
                "q0": [],
                "q1": []
            }
        },
        "PISWAP.H": {
            "name": "H",
            "location": 508,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PISWAP.__pow__": {
            "name": "__pow__",
            "location": 512,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "CCNOT.__init__": {
            "name": "__init__",
            "location": 538,
            "return": [],
            "arguments": {
                "self": [],
                "q0": [],
                "q1": [],
                "q2": []
            }
        },
        "CCNOT.H": {
            "name": "H",
            "location": 555,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CSWAP.__init__": {
            "name": "__init__",
            "location": 577,
            "return": [],
            "arguments": {
                "self": [],
                "q0": [],
                "q1": [],
                "q2": []
            }
        },
        "CSWAP.H": {
            "name": "H",
            "location": 592,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "S_H.__init__": {
            "name": "__init__",
            "location": 606,
            "return": [],
            "arguments": {
                "self": [],
                "q0": []
            }
        },
        "S_H.H": {
            "name": "H",
            "location": 610,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "S_H.__pow__": {
            "name": "__pow__",
            "location": 613,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "T_H.__init__": {
            "name": "__init__",
            "location": 625,
            "return": [],
            "arguments": {
                "self": [],
                "q0": []
            }
        },
        "T_H.H": {
            "name": "H",
            "location": 630,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "T_H.__pow__": {
            "name": "__pow__",
            "location": 633,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "RN.__init__": {
            "name": "__init__",
            "location": 649,
            "return": [],
            "arguments": {
                "self": [],
                "theta": [],
                "nx": [],
                "ny": [],
                "nz": [],
                "q0": []
            }
        },
        "RN.H": {
            "name": "H",
            "location": 666,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RN.__pow__": {
            "name": "__pow__",
            "location": 670,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "TX.__init__": {
            "name": "__init__",
            "location": 684,
            "return": [],
            "arguments": {
                "self": [],
                "t": [],
                "q0": []
            }
        },
        "TX.H": {
            "name": "H",
            "location": 695,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TX.__pow__": {
            "name": "__pow__",
            "location": 699,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "TY.__init__": {
            "name": "__init__",
            "location": 716,
            "return": [],
            "arguments": {
                "self": [],
                "t": [],
                "q0": []
            }
        },
        "TY.H": {
            "name": "H",
            "location": 729,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TY.__pow__": {
            "name": "__pow__",
            "location": 733,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "TZ.__init__": {
            "name": "__init__",
            "location": 747,
            "return": [],
            "arguments": {
                "self": [],
                "t": [],
                "q0": []
            }
        },
        "TZ.H": {
            "name": "H",
            "location": 756,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TZ.__pow__": {
            "name": "__pow__",
            "location": 760,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "TH.__init__": {
            "name": "__init__",
            "location": 778,
            "return": [],
            "arguments": {
                "self": [],
                "t": [],
                "q0": []
            }
        },
        "TH.H": {
            "name": "H",
            "location": 791,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TH.__pow__": {
            "name": "__pow__",
            "location": 795,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "ZYZ.__init__": {
            "name": "__init__",
            "location": 820,
            "return": [],
            "arguments": {
                "self": [],
                "t0": [],
                "t1": [],
                "t2": [],
                "q0": []
            }
        },
        "ZYZ.H": {
            "name": "H",
            "location": 835,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CAN.__init__": {
            "name": "__init__",
            "location": 857,
            "return": [],
            "arguments": {
                "self": [],
                "tx": [],
                "ty": [],
                "tz": [],
                "q0": [],
                "q1": []
            }
        },
        "CAN.H": {
            "name": "H",
            "location": 870,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CAN.__pow__": {
            "name": "__pow__",
            "location": 874,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "XX.__init__": {
            "name": "__init__",
            "location": 899,
            "return": [],
            "arguments": {
                "self": [],
                "t": [],
                "q0": [],
                "q1": []
            }
        },
        "XX.H": {
            "name": "H",
            "location": 908,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XX.__pow__": {
            "name": "__pow__",
            "location": 912,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "YY.__init__": {
            "name": "__init__",
            "location": 926,
            "return": [],
            "arguments": {
                "self": [],
                "t": [],
                "q0": [],
                "q1": []
            }
        },
        "YY.H": {
            "name": "H",
            "location": 935,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "YY.__pow__": {
            "name": "__pow__",
            "location": 939,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "ZZ.__init__": {
            "name": "__init__",
            "location": 953,
            "return": [],
            "arguments": {
                "self": [],
                "t": [],
                "q0": [],
                "q1": []
            }
        },
        "ZZ.H": {
            "name": "H",
            "location": 962,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ZZ.__pow__": {
            "name": "__pow__",
            "location": 966,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "EXCH.__init__": {
            "name": "__init__",
            "location": 977,
            "return": [],
            "arguments": {
                "self": [],
                "t": [],
                "q0": [],
                "q1": []
            }
        },
        "EXCH.H": {
            "name": "H",
            "location": 982,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EXCH.__pow__": {
            "name": "__pow__",
            "location": 986,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        }
    },
    "quantumflow-master/quantumflow/stdops.py": {
        "Measure.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "qubit": [
                    "int",
                    "bool",
                    "float"
                ],
                "cbit": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Measure.quil": {
            "name": "quil",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Measure.qubits": {
            "name": "qubits",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Measure.run": {
            "name": "run",
            "location": 53,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "int",
                    "states.State",
                    "Optional[Mapping[str, Any]]",
                    "BinaryIO",
                    "Callable"
                ]
            }
        },
        "Measure.evolve": {
            "name": "evolve",
            "location": 67,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "rho": [
                    "numpy.array",
                    "states.State"
                ]
            }
        },
        "Reset.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reset.H": {
            "name": "H",
            "location": 97,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reset.run": {
            "name": "run",
            "location": 100,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "states.State",
                    "Tuple[int, int, int]"
                ]
            }
        },
        "Reset.evolve": {
            "name": "evolve",
            "location": 113,
            "return": [
                "states.Density"
            ],
            "arguments": {
                "self": [],
                "rho": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Reset.asgate": {
            "name": "asgate",
            "location": 117,
            "return": [
                "ops.Gate"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reset.aschannel": {
            "name": "aschannel",
            "location": 120,
            "return": [
                "ops.Channel"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reset.quil": {
            "name": "quil",
            "location": 123,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Barrier.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Barrier.H": {
            "name": "H",
            "location": 137,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Barrier.run": {
            "name": "run",
            "location": 140,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "states.State",
                    "str",
                    "bool"
                ]
            }
        },
        "Barrier.evolve": {
            "name": "evolve",
            "location": 143,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "rho": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Barrier.quil": {
            "name": "quil",
            "location": 146,
            "return": [
                "Dict[str, Any]",
                "str",
                "Set[str]",
                "list",
                "tuple",
                "Mapping[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "If.__init__": {
            "name": "__init__",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "elem": [
                    "int",
                    "Union[str, float]",
                    "float",
                    "List[str]",
                    "str",
                    "bool"
                ],
                "condition": [
                    "int",
                    "Union[str, float]",
                    "float",
                    "List[str]",
                    "str",
                    "bool"
                ],
                "value": [
                    "int",
                    "T",
                    "str",
                    "bool"
                ]
            }
        },
        "If.run": {
            "name": "run",
            "location": 158,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "str"
                ]
            }
        },
        "If.evolve": {
            "name": "evolve",
            "location": 165,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "rho": [
                    "Dict[str, Any]",
                    "Set[str]"
                ]
            }
        },
        "Neg.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "str",
                    "bool"
                ]
            }
        },
        "Neg.run": {
            "name": "run",
            "location": 179,
            "return": [
                "states.State",
                "int",
                "numpy.ndarray",
                "bool"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "dict",
                    "Optional[int]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "Neg.quil": {
            "name": "quil",
            "location": 182,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Not.__init__": {
            "name": "__init__",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Not.run": {
            "name": "run",
            "location": 191,
            "return": [
                "states.State",
                "int",
                "bytearray",
                "List[int]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "states.State",
                    "int",
                    "Optional[int]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "Not.quil": {
            "name": "quil",
            "location": 195,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryOP.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int",
                    "str",
                    "Optional[str]",
                    "float",
                    "list"
                ],
                "source": [
                    "str",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        },
        "BinaryOP._source": {
            "name": "_source",
            "location": 209,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "int",
                    "List[int]",
                    "numpy.ndarray",
                    "float"
                ]
            }
        },
        "BinaryOP.quil": {
            "name": "quil",
            "location": 214,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryOP.run": {
            "name": "run",
            "location": 217,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "BinaryOP.evolve": {
            "name": "evolve",
            "location": 229,
            "return": [
                "List[int]",
                "backend.src.sheets_commands.sheeGrid",
                "numpy.ndarray",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": [],
                "rho": [
                    "int",
                    "Mapping[str, Any]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Move.run": {
            "name": "run",
            "location": 281,
            "return": [
                "str",
                "Sequence[int]",
                "states.State",
                "Awaitable",
                "int",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "Callable[[Any], bool]",
                    "bytes"
                ]
            }
        },
        "Exchange.run": {
            "name": "run",
            "location": 287,
            "return": [
                "Optional[numpy.ndarray]",
                "bool",
                "Dict[str, Any]",
                "IO[bytes]"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "Comparison.__init__": {
            "name": "__init__",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int",
                    "bool",
                    "float"
                ],
                "left": [
                    "int",
                    "bool",
                    "float"
                ],
                "right": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Comparison.quil": {
            "name": "quil",
            "location": 304,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comparison.run": {
            "name": "run",
            "location": 308,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "ket": [
                    "states.State",
                    "str"
                ]
            }
        }
    },
    "quantumflow-master/quantumflow/utils.py": {
        "invert_map": {
            "name": "invert_map",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "mapping": [
                    "dict",
                    "Dict[str, Any]",
                    "Optional[Optional]",
                    "type",
                    "Mapping[Any, Any]"
                ],
                "one_to_one": [
                    "bool",
                    "str",
                    "Type[Exception]",
                    "float",
                    "int",
                    "Callable"
                ]
            }
        },
        "bitlist_to_int": {
            "name": "bitlist_to_int",
            "location": 52,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "bitlist": [
                    "Sequence[int]",
                    "str",
                    "List[dict]",
                    "Union[str, List]",
                    "bool"
                ]
            }
        },
        "int_to_bitlist": {
            "name": "int_to_bitlist",
            "location": 62,
            "return": [
                "numpy.ndarray",
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "Union[numpy.ndarray, pandas.DataFrame]",
                    "numpy.ndarray"
                ],
                "pad": [
                    "str",
                    "Optional[bytes]",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "deprecated": {
            "name": "deprecated",
            "location": 80,
            "return": [
                "Dict[str, Any]",
                "str",
                "bool",
                "Optional[BaseException]"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "from_graph6": {
            "name": "from_graph6",
            "location": 97,
            "return": [
                "int",
                "bytes",
                "List[str]",
                "dict",
                "Optional[Dict[str, Any]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "graph6": [
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "to_graph6": {
            "name": "to_graph6",
            "location": 102,
            "return": [
                "Dict[str, Any]",
                "bool",
                "str"
            ],
            "arguments": {
                "graph": [
                    "networkx.Graph",
                    "int",
                    "str"
                ]
            }
        },
        "spanning_tree_count": {
            "name": "spanning_tree_count",
            "location": 108,
            "return": [
                "int",
                "List[int]"
            ],
            "arguments": {
                "graph": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "octagonal_tiling_graph": {
            "name": "octagonal_tiling_graph",
            "location": 119,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "M": [
                    "int",
                    "str"
                ],
                "N": [
                    "int",
                    "bool",
                    "Iterable[T]"
                ]
            }
        },
        "cis": {
            "name": "cis",
            "location": 159,
            "return": [
                "int",
                "Optional[int]",
                "List[int]",
                "Tuple[Tuple[int, Any]]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "numpy.ndarray",
                    "bytes"
                ]
            }
        },
        "rationalize": {
            "name": "rationalize",
            "location": 171,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "flt": [
                    "float",
                    "int",
                    "str",
                    "Type"
                ],
                "denominators": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "symbolize": {
            "name": "symbolize",
            "location": 192,
            "return": [
                "List[int]",
                "numpy.ndarray",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "flt": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "deprecated._new_func": {
            "name": "_new_func",
            "location": 85,
            "return": [
                "bool",
                "Dict[str, Any]",
                "int",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {}
        }
    },
    "quantumflow-master/quantumflow/visualization.py": {
        "circuit_to_latex": {
            "name": "circuit_to_latex",
            "location": 47,
            "return": [
                "Union[str, List[str]]",
                "str",
                "int"
            ],
            "arguments": {
                "circ": [
                    "int",
                    "float",
                    "str",
                    "List[int]",
                    "List[List[str]]"
                ],
                "qubits": [
                    "list",
                    "List[int]",
                    "List[List[int]]"
                ],
                "document": [
                    "int",
                    "float",
                    "str",
                    "List[int]",
                    "List[List[str]]"
                ]
            }
        },
        "_display_layers": {
            "name": "_display_layers",
            "location": 235,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "circ": [
                    "int",
                    "Callable",
                    "str"
                ],
                "qubits": [
                    "list",
                    "Iterable[Tuple[str, str]]",
                    "List[dict]",
                    "float",
                    "List[Tuple[Any, Any]]",
                    "List[tuple]",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "render_latex": {
            "name": "render_latex",
            "location": 264,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "latex": [
                    "str"
                ]
            }
        },
        "circuit_to_image": {
            "name": "circuit_to_image",
            "location": 308,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "circ": [
                    "bool",
                    "float"
                ],
                "qubits": [
                    "bool",
                    "float"
                ]
            }
        },
        "_latex_format": {
            "name": "_latex_format",
            "location": 332,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": [
                    "bool",
                    "int"
                ]
            }
        },
        "circuit_to_latex._two_qubit_gate": {
            "name": "_two_qubit_gate",
            "location": 83,
            "return": [
                "bool",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "top": [
                    "str",
                    "int",
                    "Exception",
                    "raiden.utils.TransactionHash"
                ],
                "bot": [
                    "str",
                    "int",
                    "Exception",
                    "raiden.utils.TransactionHash"
                ],
                "label": [
                    "str"
                ]
            }
        }
    },
    "quantumflow-master/quantumflow/__init__.py": {},
    "quantumflow-master/quantumflow/backend/eagerbk.py": {
        "evaluate": {
            "name": "evaluate",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tensor": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "fcast": {
            "name": "fcast",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "astensor": {
            "name": "astensor",
            "location": 60,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "array": [
                    "tensorflowbk.TensorLike",
                    "int",
                    "list",
                    "AsyncIterator[T]",
                    "float"
                ]
            }
        },
        "astensorproduct": {
            "name": "astensorproduct",
            "location": 73,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "array": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "quantumflow-master/quantumflow/backend/numpybk.py": {
        "gpu_available": {
            "name": "gpu_available",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "ccast": {
            "name": "ccast",
            "location": 88,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "fcast": {
            "name": "fcast",
            "location": 93,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "astensor": {
            "name": "astensor",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "array": [
                    "Union[numpy.ndarray, numpy.void]",
                    "numpy.ndarray",
                    "str"
                ]
            }
        },
        "astensorproduct": {
            "name": "astensorproduct",
            "location": 105,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "array": [
                    "Union[numpy.ndarray, numpy.void]",
                    "float",
                    "numpy.ndarray",
                    "List[float]"
                ]
            }
        },
        "evaluate": {
            "name": "evaluate",
            "location": 115,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tensor": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "rank": {
            "name": "rank",
            "location": 120,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tensor": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "inner": {
            "name": "inner",
            "location": 125,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tensor0": [
                    "int",
                    "Callable",
                    "str"
                ],
                "tensor1": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "cis": {
            "name": "cis",
            "location": 131,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "theta": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "set_random_seed": {
            "name": "set_random_seed",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "seed": [
                    "int"
                ]
            }
        },
        "getitem": {
            "name": "getitem",
            "location": 145,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "tensor": [
                    "int",
                    "str",
                    "T"
                ],
                "key": [
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "productdiag": {
            "name": "productdiag",
            "location": 150,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tensor": [
                    "float",
                    "int",
                    "bool",
                    "numpy.ndarray"
                ]
            }
        },
        "tensormul": {
            "name": "tensormul",
            "location": 159,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tensor0": [
                    "int",
                    "Callable",
                    "str"
                ],
                "tensor1": [
                    "int",
                    "Callable",
                    "str"
                ],
                "indices": [
                    "int",
                    "str",
                    "List[List[str]]",
                    "List[int]"
                ]
            }
        }
    },
    "quantumflow-master/quantumflow/backend/tensorflow2bk.py": {
        "gpu_available": {
            "name": "gpu_available",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "ccast": {
            "name": "ccast",
            "location": 61,
            "return": [
                "str",
                "Iterable[numpy.dtype]",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "bool",
                    "complex",
                    "float",
                    "SupportsBytes",
                    "Sequence[str]"
                ]
            }
        },
        "fcast": {
            "name": "fcast",
            "location": 66,
            "return": [
                "str",
                "Iterable[numpy.dtype]",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "bool",
                    "complex",
                    "float",
                    "SupportsBytes",
                    "Sequence[str]"
                ]
            }
        },
        "size": {
            "name": "size",
            "location": 70,
            "return": [
                "Optional[bool]",
                "Optional[int]",
                "str",
                "List[int]"
            ],
            "arguments": {
                "tensor": [
                    "BKTensor",
                    "numpybk.BKTensor",
                    "int",
                    "float"
                ]
            }
        },
        "astensor": {
            "name": "astensor",
            "location": 74,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "array": [
                    "int",
                    "str",
                    "float",
                    "List[int]"
                ]
            }
        },
        "astensorproduct": {
            "name": "astensorproduct",
            "location": 80,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "array": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "evaluate": {
            "name": "evaluate",
            "location": 87,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tensor": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "inner": {
            "name": "inner",
            "location": 92,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tensor0": [
                    "int",
                    "Callable",
                    "str"
                ],
                "tensor1": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "outer": {
            "name": "outer",
            "location": 100,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tensor0": [
                    "int",
                    "Callable",
                    "str"
                ],
                "tensor1": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "cis": {
            "name": "cis",
            "location": 104,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "theta": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "arccos": {
            "name": "arccos",
            "location": 109,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "theta": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "sum": {
            "name": "sum",
            "location": 114,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tensor": [
                    "int",
                    "Callable",
                    "str"
                ],
                "axis": [
                    "int",
                    "Callable",
                    "str"
                ],
                "keepdims": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "set_random_seed": {
            "name": "set_random_seed",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "seed": [
                    "str",
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "getitem": {
            "name": "getitem",
            "location": 125,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "tensor": [
                    "int",
                    "BKTensor",
                    "numpybk.BKTensor",
                    "str",
                    "T"
                ],
                "key": [
                    "int",
                    "BKTensor",
                    "numpybk.BKTensor",
                    "str",
                    "T"
                ]
            }
        },
        "productdiag": {
            "name": "productdiag",
            "location": 129,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tensor": [
                    "float",
                    "int",
                    "bool",
                    "numpy.ndarray"
                ]
            }
        },
        "tensormul": {
            "name": "tensormul",
            "location": 137,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tensor0": [
                    "numpy.ndarray",
                    "float",
                    "OrderedDict",
                    "DefaultDict[int, List[Any]]"
                ],
                "tensor1": [
                    "int",
                    "Callable",
                    "str"
                ],
                "indices": [
                    "List[List[Any]]",
                    "int",
                    "list",
                    "Tuple[int]",
                    "List[Dict[str, Any]]",
                    "List[float]",
                    "str"
                ]
            }
        }
    },
    "quantumflow-master/quantumflow/backend/tensorflowbk.py": {
        "gpu_available": {
            "name": "gpu_available",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "ccast": {
            "name": "ccast",
            "location": 58,
            "return": [
                "str",
                "Iterable[numpy.dtype]",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "bool",
                    "complex",
                    "float",
                    "SupportsBytes",
                    "Sequence[str]"
                ]
            }
        },
        "fcast": {
            "name": "fcast",
            "location": 63,
            "return": [
                "str",
                "Iterable[numpy.dtype]",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "bool",
                    "complex",
                    "float",
                    "SupportsBytes",
                    "Sequence[str]"
                ]
            }
        },
        "size": {
            "name": "size",
            "location": 67,
            "return": [
                "Optional[bool]",
                "Optional[int]",
                "str",
                "List[int]"
            ],
            "arguments": {
                "tensor": [
                    "BKTensor",
                    "numpybk.BKTensor",
                    "int",
                    "float"
                ]
            }
        },
        "astensor": {
            "name": "astensor",
            "location": 71,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "array": [
                    "tensorflowbk.TensorLike",
                    "numpy.ndarray",
                    "int",
                    "list",
                    "AsyncIterator[T]",
                    "float"
                ]
            }
        },
        "astensorproduct": {
            "name": "astensorproduct",
            "location": 77,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "array": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "evaluate": {
            "name": "evaluate",
            "location": 84,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tensor": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "inner": {
            "name": "inner",
            "location": 89,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tensor0": [
                    "int",
                    "Callable",
                    "str"
                ],
                "tensor1": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "outer": {
            "name": "outer",
            "location": 97,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tensor0": [
                    "int",
                    "Callable",
                    "str"
                ],
                "tensor1": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "cis": {
            "name": "cis",
            "location": 101,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "theta": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "arccos": {
            "name": "arccos",
            "location": 106,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "theta": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "sum": {
            "name": "sum",
            "location": 111,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tensor": [
                    "int",
                    "Callable",
                    "str"
                ],
                "axis": [
                    "int",
                    "Callable",
                    "str"
                ],
                "keepdims": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "set_random_seed": {
            "name": "set_random_seed",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "seed": [
                    "int",
                    "str",
                    "Callable",
                    "float",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "getitem": {
            "name": "getitem",
            "location": 122,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "tensor": [
                    "int",
                    "BKTensor",
                    "numpybk.BKTensor",
                    "str",
                    "T"
                ],
                "key": [
                    "int",
                    "BKTensor",
                    "numpybk.BKTensor",
                    "str",
                    "T"
                ]
            }
        },
        "productdiag": {
            "name": "productdiag",
            "location": 126,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tensor": [
                    "float",
                    "int",
                    "bool",
                    "numpy.ndarray"
                ]
            }
        },
        "tensormul": {
            "name": "tensormul",
            "location": 134,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tensor0": [
                    "numpy.ndarray",
                    "float",
                    "OrderedDict",
                    "DefaultDict[int, List[Any]]"
                ],
                "tensor1": [
                    "int",
                    "Callable",
                    "str"
                ],
                "indices": [
                    "List[List[Any]]",
                    "int",
                    "list",
                    "Tuple[int]",
                    "List[Dict[str, Any]]",
                    "List[float]",
                    "str"
                ]
            }
        }
    },
    "quantumflow-master/quantumflow/backend/torchbk.py": {
        "astensor": {
            "name": "astensor",
            "location": 68,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "array": [
                    "float",
                    "int",
                    "Union[numpy.ndarray, numpy.void]",
                    "List[float]",
                    "numpy.ndarray"
                ]
            }
        },
        "astensorproduct": {
            "name": "astensorproduct",
            "location": 84,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "array": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "evaluate": {
            "name": "evaluate",
            "location": 91,
            "return": [
                "list",
                "List[T]",
                "List[float]",
                "int"
            ],
            "arguments": {
                "tensor": [
                    "str",
                    "Dict[str, float]",
                    "Mapping[str, Any]",
                    "dict"
                ]
            }
        },
        "real": {
            "name": "real",
            "location": 103,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tensor": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "imag": {
            "name": "imag",
            "location": 109,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tensor": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "size": {
            "name": "size",
            "location": 116,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "tensor": [
                    "bool",
                    "float"
                ]
            }
        },
        "absolute": {
            "name": "absolute",
            "location": 120,
            "return": [
                "str",
                "bool",
                "int",
                "float",
                "List[int]"
            ],
            "arguments": {
                "tensor": [
                    "float"
                ]
            }
        },
        "cis": {
            "name": "cis",
            "location": 130,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "theta": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "rank": {
            "name": "rank",
            "location": 135,
            "return": [
                "Callable",
                "str",
                "Tuple[Any, Any, Any]",
                "list"
            ],
            "arguments": {
                "tensor": [
                    "int",
                    "bool"
                ]
            }
        },
        "inner": {
            "name": "inner",
            "location": 143,
            "return": [
                "str",
                "bool",
                "bytes",
                "List[dict]",
                "int"
            ],
            "arguments": {
                "tensor0": [
                    "torch.Tensor",
                    "str",
                    "int"
                ],
                "tensor1": []
            }
        },
        "outer": {
            "name": "outer",
            "location": 159,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tensor0": [
                    "Set[str]",
                    "Callable"
                ],
                "tensor1": [
                    "Set[str]",
                    "Callable"
                ]
            }
        },
        "conj": {
            "name": "conj",
            "location": 177,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tensor": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "transpose": {
            "name": "transpose",
            "location": 181,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tensor": [
                    "int",
                    "str",
                    "List[float]"
                ],
                "perm": [
                    "int",
                    "bool",
                    "List[float]",
                    "dict",
                    "List[int]"
                ]
            }
        },
        "diag": {
            "name": "diag",
            "location": 190,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tensor": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "reshape": {
            "name": "reshape",
            "location": 194,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tensor": [
                    "AsyncIterator"
                ],
                "shape": [
                    "AsyncIterator"
                ]
            }
        },
        "matmul": {
            "name": "matmul",
            "location": 198,
            "return": [
                "str",
                "numpy.ndarray",
                "int"
            ],
            "arguments": {
                "tensor0": [
                    "int",
                    "Callable",
                    "str"
                ],
                "tensor1": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "trace": {
            "name": "trace",
            "location": 208,
            "return": [
                "str",
                "numpy.ndarray",
                "int"
            ],
            "arguments": {
                "tensor": [
                    "float"
                ]
            }
        },
        "set_random_seed": {
            "name": "set_random_seed",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "seed": [
                    "bool",
                    "float"
                ]
            }
        },
        "getitem": {
            "name": "getitem",
            "location": 218,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "tensor": [
                    "str",
                    "Sequence[str]",
                    "bytes",
                    "MutableMapping[Any, Any]",
                    "dict"
                ],
                "key": [
                    "str",
                    "Sequence[str]",
                    "bytes",
                    "MutableMapping[Any, Any]",
                    "dict"
                ]
            }
        },
        "productdiag": {
            "name": "productdiag",
            "location": 223,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tensor": [
                    "float",
                    "int",
                    "bool",
                    "numpy.ndarray",
                    "torch.Tensor"
                ]
            }
        },
        "einsum": {
            "name": "einsum",
            "location": 231,
            "return": [
                "str",
                "numpy.ndarray",
                "int"
            ],
            "arguments": {
                "subscripts": [
                    "float",
                    "numpy.ndarray",
                    "int",
                    "List[str]"
                ],
                "tensor0": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ],
                "tensor1": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "tensormul": {
            "name": "tensormul",
            "location": 243,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tensor0": [
                    "numpy.ndarray",
                    "float",
                    "OrderedDict",
                    "DefaultDict[int, List[Any]]"
                ],
                "tensor1": [
                    "int",
                    "Callable",
                    "str"
                ],
                "indices": [
                    "List[List[Any]]",
                    "int",
                    "list",
                    "Tuple[int]",
                    "List[Dict[str, Any]]",
                    "List[float]",
                    "str"
                ]
            }
        },
        "gpu_available": {
            "name": "gpu_available",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "quantumflow-master/quantumflow/backend/__init__.py": {},
    "quantumflow-master/quantumflow/datasets/__init__.py": {
        "load_stdgraphs": {
            "name": "load_stdgraphs",
            "location": 23,
            "return": [],
            "arguments": {
                "size": []
            }
        },
        "load_mnist": {
            "name": "load_mnist",
            "location": 43,
            "return": [],
            "arguments": {
                "size": [],
                "border": [],
                "blank_corners": [],
                "nums": []
            }
        },
        "load_mnist._filter_mnist": {
            "name": "_filter_mnist",
            "location": 73,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "nums": []
            }
        },
        "load_mnist._rescale": {
            "name": "_rescale",
            "location": 86,
            "return": [],
            "arguments": {
                "imgarray": [],
                "size": []
            }
        },
        "load_mnist._blank_corners": {
            "name": "_blank_corners",
            "location": 102,
            "return": [],
            "arguments": {
                "imgarray": []
            }
        }
    },
    "quantumflow-master/quantumflow/forest/pyquil.py": {},
    "quantumflow-master/quantumflow/forest/__init__.py": {
        "pyquil_to_image": {
            "name": "pyquil_to_image",
            "location": 160,
            "return": [
                "pyquil.Program",
                "bool",
                "float"
            ],
            "arguments": {
                "program": [
                    "pyquil.Program",
                    "bool",
                    "float"
                ]
            }
        },
        "circuit_to_pyquil": {
            "name": "circuit_to_pyquil",
            "location": 171,
            "return": [
                "bytes",
                "int",
                "IO",
                "pyquil.Program",
                "List[str]",
                "str"
            ],
            "arguments": {
                "circuit": [
                    "bytes",
                    "int",
                    "IO",
                    "pyquil.Program",
                    "List[str]",
                    "str"
                ]
            }
        },
        "pyquil_to_circuit": {
            "name": "pyquil_to_circuit",
            "location": 188,
            "return": [
                "bytes",
                "int",
                "IO",
                "pyquil.Program",
                "List[str]",
                "str"
            ],
            "arguments": {
                "program": [
                    "bytes",
                    "int",
                    "IO",
                    "pyquil.Program",
                    "List[str]",
                    "str"
                ]
            }
        },
        "quil_to_program": {
            "name": "quil_to_program",
            "location": 216,
            "return": [
                "cirq.circuits.Circuit",
                "Dict[str, Any]"
            ],
            "arguments": {
                "quil": [
                    "str",
                    "bool",
                    "int",
                    "bytes"
                ]
            }
        },
        "pyquil_to_program": {
            "name": "pyquil_to_program",
            "location": 222,
            "return": [
                "bytes",
                "int",
                "IO",
                "pyquil.Program",
                "List[str]",
                "str"
            ],
            "arguments": {
                "program": [
                    "int",
                    "float",
                    "pyquil.Program",
                    "str",
                    "List[int]",
                    "List[List[str]]"
                ]
            }
        },
        "state_to_wavefunction": {
            "name": "state_to_wavefunction",
            "location": 350,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "state": [
                    "states.State",
                    "homeassistancore.State",
                    "dict",
                    "float",
                    "str"
                ]
            }
        },
        "wavefunction_to_state": {
            "name": "wavefunction_to_state",
            "location": 361,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "wfn": [
                    "pyquil.Wavefunction",
                    "float",
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "NullCompiler.get_version_info": {
            "name": "get_version_info",
            "location": 136,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullCompiler.quil_to_native_quil": {
            "name": "quil_to_native_quil",
            "location": 139,
            "return": [
                "bytes",
                "int",
                "IO",
                "pyquil.Program",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "program": [
                    "int",
                    "float",
                    "pyquil.Program",
                    "str",
                    "List[int]",
                    "List[List[str]]"
                ]
            }
        },
        "NullCompiler.native_quil_to_executable": {
            "name": "native_quil_to_executable",
            "location": 142,
            "return": [
                "float",
                "int",
                "circuits.Circuit",
                "Union[bool, None]",
                "str"
            ],
            "arguments": {
                "self": [],
                "nq_program": [
                    "pyquil.Program",
                    "bool",
                    "float",
                    "Iterable[Any]"
                ]
            }
        },
        "pyquil_to_program._reg": {
            "name": "_reg",
            "location": 224,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "mem": [
                    "str",
                    "bytes"
                ]
            }
        },
        "QuantumFlowQVM.__init__": {
            "name": "__init__",
            "location": 372,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantumFlowQVM.load": {
            "name": "load",
            "location": 379,
            "return": [
                "str",
                "bool",
                "Optional[freqtrade.exchange.Exchange]"
            ],
            "arguments": {
                "self": [],
                "binary": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "QuantumFlowQVM.write_memory": {
            "name": "write_memory",
            "location": 396,
            "return": [
                "'QuantumFlowQVM'"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantumFlowQVM.run": {
            "name": "run",
            "location": 401,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantumFlowQVM.wait": {
            "name": "wait",
            "location": 412,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantumFlowQVM.read_from_memory_region": {
            "name": "read_from_memory_region",
            "location": 418,
            "return": [
                "Dict[str, Any]",
                "dict",
                "list",
                "Tuple[int, Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuantumFlowQVM.wavefunction": {
            "name": "wavefunction",
            "location": 437,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "quantumflow-master/tests/test_backend.py": {
        "test_import": {
            "name": "test_import",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_gpu_available": {
            "name": "test_gpu_available",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_inner": {
            "name": "test_inner",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_outer": {
            "name": "test_outer",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_absolute": {
            "name": "test_absolute",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_random_seed": {
            "name": "test_random_seed",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_size": {
            "name": "test_size",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_real_imag": {
            "name": "test_real_imag",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_trace": {
            "name": "test_trace",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_productdiag": {
            "name": "test_productdiag",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "quantumflow-master/tests/test_cbits.py": {
        "test_register": {
            "name": "test_register",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_register_ordered": {
            "name": "test_register_ordered",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_addr": {
            "name": "test_addr",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_addr_ordered": {
            "name": "test_addr_ordered",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "quantumflow-master/tests/test_channels.py": {
        "test_transpose_map": {
            "name": "test_transpose_map",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_random_density": {
            "name": "test_random_density",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_density": {
            "name": "test_density",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_state_to_density": {
            "name": "test_state_to_density",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_purity": {
            "name": "test_purity",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_stdkraus_creation": {
            "name": "test_stdkraus_creation",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_stdchannels_creation": {
            "name": "test_stdchannels_creation",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_identity": {
            "name": "test_identity",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_channel_chi": {
            "name": "test_channel_chi",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_channel_add": {
            "name": "test_channel_add",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sample_coin": {
            "name": "test_sample_coin",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sample_bell": {
            "name": "test_sample_bell",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_biased_coin": {
            "name": "test_biased_coin",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_measurement": {
            "name": "test_measurement",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_qaoa": {
            "name": "test_qaoa",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_amplitude_damping": {
            "name": "test_amplitude_damping",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_depolarizing": {
            "name": "test_depolarizing",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_kruas_qubits": {
            "name": "test_kruas_qubits",
            "location": 245,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_kraus_evolve": {
            "name": "test_kraus_evolve",
            "location": 251,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_kraus_run": {
            "name": "test_kraus_run",
            "location": 267,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_channel_adjoint": {
            "name": "test_channel_adjoint",
            "location": 290,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_kraus_qubits": {
            "name": "test_kraus_qubits",
            "location": 305,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_chan_qubits": {
            "name": "test_chan_qubits",
            "location": 314,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_chan_permute": {
            "name": "test_chan_permute",
            "location": 320,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_channel_errors": {
            "name": "test_channel_errors",
            "location": 334,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_kraus_errors": {
            "name": "test_kraus_errors",
            "location": 348,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_kraus_complete": {
            "name": "test_kraus_complete",
            "location": 355,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_askraus": {
            "name": "test_askraus",
            "location": 367,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_channel_trace": {
            "name": "test_channel_trace",
            "location": 385,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_channel_join": {
            "name": "test_channel_join",
            "location": 390,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_askraus._roundtrip": {
            "name": "_roundtrip",
            "location": 369,
            "return": [
                ""
            ],
            "arguments": {
                "kraus": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "quantumflow-master/tests/test_circuits.py": {
        "true_ket": {
            "name": "true_ket",
            "location": 19,
            "return": [
                "Optional[int]",
                "str",
                "float",
                "dict",
                "bool"
            ],
            "arguments": {}
        },
        "test_asgate": {
            "name": "test_asgate",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_str": {
            "name": "test_str",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_name": {
            "name": "test_name",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_qaoa_circuit": {
            "name": "test_qaoa_circuit",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_extend": {
            "name": "test_extend",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_qaoa_circuit_turns": {
            "name": "test_qaoa_circuit_turns",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_circuit_wires": {
            "name": "test_circuit_wires",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_inverse": {
            "name": "test_inverse",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_implicit_state": {
            "name": "test_implicit_state",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_elements": {
            "name": "test_elements",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_qft": {
            "name": "test_qft",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_create": {
            "name": "test_create",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_add": {
            "name": "test_add",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ccnot_circuit": {
            "name": "test_ccnot_circuit",
            "location": 234,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ccnot_circuit_evolve": {
            "name": "test_ccnot_circuit_evolve",
            "location": 244,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_circuit_aschannel": {
            "name": "test_circuit_aschannel",
            "location": 253,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_control_circuit": {
            "name": "test_control_circuit",
            "location": 263,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_phase_estimation_circuit": {
            "name": "test_phase_estimation_circuit",
            "location": 271,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_addition_circuit": {
            "name": "test_addition_circuit",
            "location": 298,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ghz_circuit": {
            "name": "test_ghz_circuit",
            "location": 353,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_zyz_circuit": {
            "name": "test_zyz_circuit",
            "location": 360,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_map_gate": {
            "name": "test_map_gate",
            "location": 366,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_count": {
            "name": "test_count",
            "location": 374,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "quantumflow-master/tests/test_config.py": {
        "test_random_seed": {
            "name": "test_random_seed",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_logger": {
            "name": "test_logger",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "quantumflow-master/tests/test_dagcircuit.py": {
        "_test_circ": {
            "name": "_test_circ",
            "location": 17,
            "return": [
                "str",
                "float"
            ],
            "arguments": {}
        },
        "_true_ket": {
            "name": "_true_ket",
            "location": 34,
            "return": [
                "Optional[int]",
                "str",
                "float",
                "dict",
                "bool"
            ],
            "arguments": {}
        },
        "test_init": {
            "name": "test_init",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_inverse": {
            "name": "test_inverse",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ascircuit": {
            "name": "test_ascircuit",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_asgate": {
            "name": "test_asgate",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_evolve": {
            "name": "test_evolve",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_aschannel": {
            "name": "test_aschannel",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_depth": {
            "name": "test_depth",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_layers": {
            "name": "test_layers",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_components": {
            "name": "test_components",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_next": {
            "name": "test_next",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "quantumflow-master/tests/test_datasets.py": {
        "test_load_stdgraphs": {
            "name": "test_load_stdgraphs",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_load_mnist": {
            "name": "test_load_mnist",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_exceptions": {
            "name": "test_exceptions",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "quantumflow-master/tests/test_decompositions.py": {
        "test_bloch_decomposition": {
            "name": "test_bloch_decomposition",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_bloch_decomp_errors": {
            "name": "test_bloch_decomp_errors",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_zyz_decomp_errors": {
            "name": "test_zyz_decomp_errors",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_zyz_decomposition": {
            "name": "test_zyz_decomposition",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_kronecker_decomposition": {
            "name": "test_kronecker_decomposition",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_kronecker_decomp_errors": {
            "name": "test_kronecker_decomp_errors",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_canonical_decomposition": {
            "name": "test_canonical_decomposition",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_canonical_decomp_sandwich": {
            "name": "test_canonical_decomp_sandwich",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_canonical_decomp_random": {
            "name": "test_canonical_decomp_random",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_canonical_decomp_errors": {
            "name": "test_canonical_decomp_errors",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_decomp_stdgates": {
            "name": "test_decomp_stdgates",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_decomp_sqrtswap_sandwich": {
            "name": "test_decomp_sqrtswap_sandwich",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_eig_complex_symmetric": {
            "name": "test_eig_complex_symmetric",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_eigcs_errors": {
            "name": "test_eigcs_errors",
            "location": 233,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "quantumflow-master/tests/test_examples.py": {
        "test_prepare_w4": {
            "name": "test_prepare_w4",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_prepare_w4_main": {
            "name": "test_prepare_w4_main",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_prepare_w16": {
            "name": "test_prepare_w16",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_prepare_w16_main": {
            "name": "test_prepare_w16_main",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_swap_test": {
            "name": "test_swap_test",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_swap_test_main": {
            "name": "test_swap_test_main",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_circuit_identities_main": {
            "name": "test_circuit_identities_main",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_fit_zyz": {
            "name": "test_fit_zyz",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_fit_zyz_main": {
            "name": "test_fit_zyz_main",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_fit_zyz_tf2": {
            "name": "test_fit_zyz_tf2",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_fit_zyz_eager": {
            "name": "test_fit_zyz_eager",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_fit_zyz_eager_main": {
            "name": "test_fit_zyz_eager_main",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "quantumflow-master/tests/test_forest.py": {
        "dependancies_installed": {
            "name": "dependancies_installed",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "test_circuit_to_pyquil": {
            "name": "test_circuit_to_pyquil",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_pyquil_to_circuit": {
            "name": "test_pyquil_to_circuit",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_pyquil_to_circuit_more": {
            "name": "test_pyquil_to_circuit_more",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_pyquil_to_latex": {
            "name": "test_pyquil_to_latex",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_qvm_run": {
            "name": "test_qvm_run",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_wavefunction": {
            "name": "test_wavefunction",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_qaoa_circuit": {
            "name": "test_qaoa_circuit",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_exceptions": {
            "name": "test_exceptions",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_null_complier": {
            "name": "test_null_complier",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_qvm": {
            "name": "test_qvm",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "quantumflow-master/tests/test_gates.py": {
        "test_repr": {
            "name": "test_repr",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_repr2": {
            "name": "test_repr2",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_identity_gate": {
            "name": "test_identity_gate",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_bits": {
            "name": "test_bits",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_gate_bits": {
            "name": "test_gate_bits",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_gates_close": {
            "name": "test_gates_close",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_normalize": {
            "name": "test_normalize",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_gate_inverse": {
            "name": "test_gate_inverse",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_projectors": {
            "name": "test_projectors",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_not_unitary": {
            "name": "test_not_unitary",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_almost_hermitian": {
            "name": "test_almost_hermitian",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_almost_identity": {
            "name": "test_almost_identity",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_random_gate": {
            "name": "test_random_gate",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_expectation": {
            "name": "test_expectation",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_join_gates": {
            "name": "test_join_gates",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_join_states": {
            "name": "test_join_states",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_control_gate": {
            "name": "test_control_gate",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_conditional_gate": {
            "name": "test_conditional_gate",
            "location": 204,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_print_gate": {
            "name": "test_print_gate",
            "location": 216,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_inverse_random": {
            "name": "test_inverse_random",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_hermitian": {
            "name": "test_hermitian",
            "location": 238,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_gatemul": {
            "name": "test_gatemul",
            "location": 248,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_gate_permute": {
            "name": "test_gate_permute",
            "location": 282,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_gates_evolve": {
            "name": "test_gates_evolve",
            "location": 293,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_su": {
            "name": "test_su",
            "location": 298,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_reset": {
            "name": "test_reset",
            "location": 304,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "quantumflow-master/tests/test_measures.py": {
        "test_state_angle": {
            "name": "test_state_angle",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_density_angle": {
            "name": "test_density_angle",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_gate_angle": {
            "name": "test_gate_angle",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_channel_angle": {
            "name": "test_channel_angle",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_fidelity": {
            "name": "test_fidelity",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_purity": {
            "name": "test_purity",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_bures_distance": {
            "name": "test_bures_distance",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_bures_angle": {
            "name": "test_bures_angle",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_entropy": {
            "name": "test_entropy",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_mutual_info": {
            "name": "test_mutual_info",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_diamond_norm": {
            "name": "test_diamond_norm",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_diamond_norm_err": {
            "name": "test_diamond_norm_err",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "quantumflow-master/tests/test_meta.py": {
        "test_print_versions": {
            "name": "test_print_versions",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_print_versions_main": {
            "name": "test_print_versions_main",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "quantumflow-master/tests/test_parser.py": {
        "_test": {
            "name": "_test",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "quil_string": [
                    "str",
                    "bool",
                    "Callable",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "test_empty": {
            "name": "test_empty",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_simple": {
            "name": "test_simple",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_reset_qubit": {
            "name": "test_reset_qubit",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_math": {
            "name": "test_math",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_classical": {
            "name": "test_classical",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_classical_moves": {
            "name": "test_classical_moves",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_classical_math": {
            "name": "test_classical_math",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_comparisons": {
            "name": "test_comparisons",
            "location": 241,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_delare": {
            "name": "test_delare",
            "location": 268,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_label": {
            "name": "test_label",
            "location": 297,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_jump": {
            "name": "test_jump",
            "location": 305,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_jumps2": {
            "name": "test_jumps2",
            "location": 325,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_measure": {
            "name": "test_measure",
            "location": 333,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_pragma": {
            "name": "test_pragma",
            "location": 357,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_gate_1qubit": {
            "name": "test_gate_1qubit",
            "location": 393,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_gate_2qubit": {
            "name": "test_gate_2qubit",
            "location": 404,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_gate_3qubit": {
            "name": "test_gate_3qubit",
            "location": 415,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_gate_1qubit_param": {
            "name": "test_gate_1qubit_param",
            "location": 426,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_gate_2qubit_param": {
            "name": "test_gate_2qubit_param",
            "location": 436,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parameters": {
            "name": "test_parameters",
            "location": 447,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_instr_qubits": {
            "name": "test_instr_qubits",
            "location": 640,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_comments": {
            "name": "test_comments",
            "location": 659,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_math.get_arg": {
            "name": "get_arg",
            "location": 47,
            "return": [
                "List[str]",
                "str",
                "List[Dict]",
                "List[int]"
            ],
            "arguments": {
                "prog": [
                    "str",
                    "Callable",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "quantumflow-master/tests/test_paulialgebra.py": {
        "test_term": {
            "name": "test_term",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_pauli_str": {
            "name": "test_pauli_str",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_pauli_sigma": {
            "name": "test_pauli_sigma",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sigmas": {
            "name": "test_sigmas",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sum": {
            "name": "test_sum",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_add": {
            "name": "test_add",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sub": {
            "name": "test_sub",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cmp": {
            "name": "test_cmp",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_hash": {
            "name": "test_hash",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_product": {
            "name": "test_product",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_mul": {
            "name": "test_mul",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_scalar": {
            "name": "test_scalar",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_zero": {
            "name": "test_zero",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_merge_sum": {
            "name": "test_merge_sum",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_power": {
            "name": "test_power",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_simplify": {
            "name": "test_simplify",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_dont_simplify": {
            "name": "test_dont_simplify",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_zero_term": {
            "name": "test_zero_term",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_neg": {
            "name": "test_neg",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_paulisum_iteration": {
            "name": "test_paulisum_iteration",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_check_commutation": {
            "name": "test_check_commutation",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_commuting_sets": {
            "name": "test_commuting_sets",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_qubits": {
            "name": "test_get_qubits",
            "location": 241,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_check_commutation_rigorous": {
            "name": "test_check_commutation_rigorous",
            "location": 250,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_isclose": {
            "name": "test_isclose",
            "location": 272,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "quantumflow-master/tests/test_programs.py": {
        "test_empty_program": {
            "name": "test_empty_program",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_nop": {
            "name": "test_nop",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_nop_evolve": {
            "name": "test_nop_evolve",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_compile_label": {
            "name": "test_compile_label",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_jump": {
            "name": "test_jump",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_wait": {
            "name": "test_wait",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_include": {
            "name": "test_include",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_halt": {
            "name": "test_halt",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_reset": {
            "name": "test_reset",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_reset_one": {
            "name": "test_reset_one",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_xgate": {
            "name": "test_xgate",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_call": {
            "name": "test_call",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_measure_until": {
            "name": "test_measure_until",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_belltest": {
            "name": "test_belltest",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_occupation_basis": {
            "name": "test_occupation_basis",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_qaoa_circuit": {
            "name": "test_qaoa_circuit",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_defcircuit": {
            "name": "test_defcircuit",
            "location": 279,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_defcircuit_param": {
            "name": "test_defcircuit_param",
            "location": 304,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_exceptions": {
            "name": "test_exceptions",
            "location": 312,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "quantumflow-master/tests/test_qaoa.py": {
        "test_qubo_circuit": {
            "name": "test_qubo_circuit",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_graph_cuts": {
            "name": "test_graph_cuts",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "quantumflow-master/tests/test_qaoa_maxcut.py": {
        "test_maxcut_qaoa": {
            "name": "test_maxcut_qaoa",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "quantumflow-master/tests/test_qubits.py": {
        "test_getitem": {
            "name": "test_getitem",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_rank": {
            "name": "test_rank",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_trace": {
            "name": "test_trace",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_partial_trace": {
            "name": "test_partial_trace",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_inner_product": {
            "name": "test_inner_product",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_fubini_study_angle": {
            "name": "test_fubini_study_angle",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_fubini_study_angle_states": {
            "name": "test_fubini_study_angle_states",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_vectors_not_close": {
            "name": "test_vectors_not_close",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_outer_product": {
            "name": "test_outer_product",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "quantumflow-master/tests/test_quil.py": {
        "test_parse_quilfile": {
            "name": "test_parse_quilfile",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_run_quilfile": {
            "name": "test_run_quilfile",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_unparsable": {
            "name": "test_unparsable",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "quantumflow-master/tests/test_states.py": {
        "test_zeros": {
            "name": "test_zeros",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_w_state": {
            "name": "test_w_state",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ghz_state": {
            "name": "test_ghz_state",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_random_state": {
            "name": "test_random_state",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_state_bits": {
            "name": "test_state_bits",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_state_labels": {
            "name": "test_state_labels",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_probability": {
            "name": "test_probability",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_states_close": {
            "name": "test_states_close",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_str": {
            "name": "test_str",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_print_state": {
            "name": "test_print_state",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_print_probabilities": {
            "name": "test_print_probabilities",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_measure": {
            "name": "test_measure",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sample": {
            "name": "test_sample",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_expectation": {
            "name": "test_expectation",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_random_density": {
            "name": "test_random_density",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_density": {
            "name": "test_density",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_state_to_density": {
            "name": "test_state_to_density",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_density_trace": {
            "name": "test_density_trace",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_mixed_density": {
            "name": "test_mixed_density",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_join_densities": {
            "name": "test_join_densities",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_memory": {
            "name": "test_memory",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_density_memory": {
            "name": "test_density_memory",
            "location": 225,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "quantumflow-master/tests/test_stdgates.py": {
        "test_I": {
            "name": "test_I",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_unitary_1qubit": {
            "name": "test_unitary_1qubit",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_unitary_2qubit": {
            "name": "test_unitary_2qubit",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_unitary_3qubit": {
            "name": "test_unitary_3qubit",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parametric_gates1": {
            "name": "test_parametric_gates1",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cnot": {
            "name": "test_cnot",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_CZ": {
            "name": "test_CZ",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cnot_reverse": {
            "name": "test_cnot_reverse",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ccnot": {
            "name": "test_ccnot",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cswap": {
            "name": "test_cswap",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_phase": {
            "name": "test_phase",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_hadamard": {
            "name": "test_hadamard",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_piswap": {
            "name": "test_piswap",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_pswap": {
            "name": "test_pswap",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cphase_gates": {
            "name": "test_cphase_gates",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parametric_TX_TY_TZ": {
            "name": "test_parametric_TX_TY_TZ",
            "location": 213,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parametric_Y": {
            "name": "test_parametric_Y",
            "location": 222,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parametric_Z": {
            "name": "test_parametric_Z",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_inverse_self": {
            "name": "test_inverse_self",
            "location": 235,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_inverse_1qubit": {
            "name": "test_inverse_1qubit",
            "location": 249,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_inverse_parametric_1qubit": {
            "name": "test_inverse_parametric_1qubit",
            "location": 263,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_inverse_parametric_2qubit": {
            "name": "test_inverse_parametric_2qubit",
            "location": 275,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_inverse_tgates_1qubit": {
            "name": "test_inverse_tgates_1qubit",
            "location": 287,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_inverse_tgates_2qubit": {
            "name": "test_inverse_tgates_2qubit",
            "location": 299,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_CAN": {
            "name": "test_CAN",
            "location": 311,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_EXCH": {
            "name": "test_EXCH",
            "location": 322,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_ZYZ": {
            "name": "test_ZYZ",
            "location": 334,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_XX_YY_ZZ": {
            "name": "test_XX_YY_ZZ",
            "location": 346,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_CH": {
            "name": "test_CH",
            "location": 357,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_pseudo_hadamard": {
            "name": "test_pseudo_hadamard",
            "location": 385,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_RN": {
            "name": "test_RN",
            "location": 395,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_qaoa_circuit": {
            "name": "test_qaoa_circuit",
            "location": 427,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_gatepow": {
            "name": "test_gatepow",
            "location": 450,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_qubit_qaoa_circuit": {
            "name": "test_qubit_qaoa_circuit",
            "location": 487,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "quantumflow-master/tests/test_stdops.py": {
        "test_measure": {
            "name": "test_measure",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_barrier": {
            "name": "test_barrier",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_if": {
            "name": "test_if",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_neg": {
            "name": "test_neg",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_logics": {
            "name": "test_logics",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_add": {
            "name": "test_add",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_density_add": {
            "name": "test_density_add",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_mul": {
            "name": "test_mul",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_div": {
            "name": "test_div",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sub": {
            "name": "test_sub",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_comparisions": {
            "name": "test_comparisions",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "quantumflow-master/tests/test_tools.py": {
        "test_benchmark_main": {
            "name": "test_benchmark_main",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "quantumflow-master/tests/test_utils.py": {
        "test_invert_dict": {
            "name": "test_invert_dict",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_deprecated": {
            "name": "test_deprecated",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_bitlist_to_int": {
            "name": "test_bitlist_to_int",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_int_to_bitlist": {
            "name": "test_int_to_bitlist",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_graph6": {
            "name": "test_graph6",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_spanning_tree_count": {
            "name": "test_spanning_tree_count",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_octagonal_tiling_graph": {
            "name": "test_octagonal_tiling_graph",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_rationalize": {
            "name": "test_rationalize",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_symbolize": {
            "name": "test_symbolize",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_deprecated.Something.some_thing": {
            "name": "some_thing",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "quantumflow-master/tests/test_visualization.py": {
        "test_circuit_to_latex": {
            "name": "test_circuit_to_latex",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_circuit_to_latex_error": {
            "name": "test_circuit_to_latex_error",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_gates_to_latex": {
            "name": "test_gates_to_latex",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_render_latex": {
            "name": "test_render_latex",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "quantumflow-master/tests/__init__.py": {},
    "quantumflow-master/tools/benchmark.py": {
        "benchmark": {
            "name": "benchmark",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "N": [
                    "int",
                    "List[int]"
                ],
                "gates": [
                    "int"
                ]
            }
        },
        "benchmark_gops": {
            "name": "benchmark_gops",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "N": [
                    "int",
                    "bool",
                    "str"
                ],
                "gates": [
                    "int",
                    "bool",
                    "str"
                ],
                "reps": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "_cli": {
            "name": "_cli",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "quantumflow-master/tools/graph_generate.py": {
        "_cli": {
            "name": "_cli",
            "location": 22,
            "return": [],
            "arguments": {}
        }
    },
    "quantumflow-master/tools/mnist_rescale.py": {
        "_cli": {
            "name": "_cli",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        }
    }
}
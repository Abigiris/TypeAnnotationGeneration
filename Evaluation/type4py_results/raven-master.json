{
    "raven-master/app.py": {},
    "raven-master/bot_demo.py": {},
    "raven-master/maintainer.py": {},
    "raven-master/merge_dev.py": {
        "get_env_files": {
            "name": "get_env_files",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "get_git_ignore": {
            "name": "get_git_ignore",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "merge": {
            "name": "merge",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "output_file_path": [
                    "str",
                    "int"
                ],
                "merged_file_paths": [
                    "bool",
                    "Sequence[str]",
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "bytes"
                ],
                "append_linesep": [
                    "bool",
                    "Sequence[str]",
                    "str",
                    "List[str]",
                    "Tuple[str]",
                    "bytes"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 103,
            "return": [
                "bytes"
            ],
            "arguments": {
                "env": [
                    "bool",
                    "str"
                ],
                "git": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_merge": {
            "name": "test_merge",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir_factory": [
                    "bool",
                    "int",
                    "str"
                ],
                "merged_file_count": [
                    "int",
                    "Tuple[str, str]",
                    "str"
                ],
                "append_linesep": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "raven-master/scaff.py": {
        "main": {
            "name": "main",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "m2r": {
            "name": "m2r",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "convert_file": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "TextIO"
                ]
            }
        },
        "intent": {
            "name": "intent",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "response": {
            "name": "response",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "both": {
            "name": "both",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "ipath": [
                    "int",
                    "Callable",
                    "str"
                ],
                "rpath": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "intent_to_dataset_format": {
            "name": "intent_to_dataset_format",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "dataset": [
                    "str"
                ],
                "common": [
                    "str"
                ]
            }
        },
        "intent_to_dataset_format.generate_intent_path": {
            "name": "generate_intent_path",
            "location": 205,
            "return": [
                "List[str]",
                "List[dict]",
                "str",
                "Union[List, Tuple]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[str]",
                    "IO[str]"
                ],
                "INTENT": [
                    "str",
                    "List[str]",
                    "IO[str]"
                ],
                "intent_path": [
                    "str",
                    "List[str]",
                    "IO[str]"
                ]
            }
        }
    },
    "raven-master/setup.py": {},
    "raven-master/tui.py": {},
    "raven-master/utils.py": {
        "path_join": {
            "name": "path_join",
            "location": 11,
            "return": [
                "str",
                "os.PathLike",
                "bool",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "render_template_file": {
            "name": "render_template_file",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ]
            }
        },
        "import_module": {
            "name": "import_module",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "cerulean.path.AbstractPath"
                ]
            }
        },
        "import_class": {
            "name": "import_class",
            "location": 37,
            "return": [],
            "arguments": {
                "path": [
                    "str",
                    "Sequence[str]",
                    "int"
                ]
            }
        },
        "env_str": {
            "name": "env_str",
            "location": 53,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "env_name": [
                    "str",
                    "dict"
                ],
                "default": [
                    "str",
                    "dict"
                ]
            }
        },
        "env_int": {
            "name": "env_int",
            "location": 60,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "env_name": [
                    "str",
                    "Optional[str]"
                ],
                "default": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "env_float": {
            "name": "env_float",
            "location": 67,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "env_name": [
                    "str",
                    "Optional[str]"
                ],
                "default": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "env_bool": {
            "name": "env_bool",
            "location": 74,
            "return": [
                "str",
                "Optional[str]",
                "Optional[bool]",
                "Optional[Union[Any, Any]]"
            ],
            "arguments": {
                "env_name": [
                    "str"
                ],
                "default": [
                    "str"
                ]
            }
        }
    },
    "raven-master/version.py": {},
    "raven-master/config/base.py": {},
    "raven-master/config/local.py": {},
    "raven-master/config/production.py": {},
    "raven-master/config/stage.py": {},
    "raven-master/docs/conf.py": {},
    "raven-master/raven/config.py": {},
    "raven-master/raven/utils.py": {
        "_title_case": {
            "name": "_title_case",
            "location": 10,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "value": [
                    "Optional[str]",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "invert_title_case": {
            "name": "invert_title_case",
            "location": 18,
            "return": [
                "int",
                "bool",
                "Callable",
                "Optional[str]",
                "raiden.utils.BlockHash",
                "raiden.utils.BlockNumber"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Callable[[None], bool]",
                    "Optional[str]",
                    "List[T]",
                    "bytes"
                ]
            }
        },
        "get_intent_sub_path": {
            "name": "get_intent_sub_path",
            "location": 27,
            "return": [
                "str",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "intent_name": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "import_response_intent": {
            "name": "import_response_intent",
            "location": 31,
            "return": [
                "int"
            ],
            "arguments": {
                "intent_name": [
                    "str"
                ]
            }
        },
        "parse_cmd": {
            "name": "parse_cmd",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "cmd": [
                    "List[List[int]]",
                    "str",
                    "bytes",
                    "int",
                    "Tuple[Any, Any]",
                    "List[str]"
                ],
                "stop_symbol": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "parse_cmd_value": {
            "name": "parse_cmd_value",
            "location": 57,
            "return": [
                "bool",
                "Optional[bool]",
                "Iterable[Any]",
                "Iterable[float]",
                "float",
                "Optional[float]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "bool",
                    "complex",
                    "float"
                ]
            }
        },
        "template_name_from_class_name": {
            "name": "template_name_from_class_name",
            "location": 63,
            "return": [],
            "arguments": {
                "value": [
                    "Union[str, IO]",
                    "IO[str]"
                ]
            }
        },
        "windows_path_regex": {
            "name": "windows_path_regex",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Pattern"
                ]
            }
        },
        "send_notification": {
            "name": "send_notification",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "msg": [
                    "tuple",
                    "List[str]",
                    "Dict[str, Any]",
                    "list",
                    "str"
                ]
            }
        }
    },
    "raven-master/raven/engine/abstract_engine.py": {
        "AbstractEngine.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractEngine.add": {
            "name": "add",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "layer": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "AbstractEngine.go": {
            "name": "go",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseEngine.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_object": [
                    "float",
                    "int",
                    "List[int]",
                    "str"
                ],
                "output_object": [
                    "int",
                    "float",
                    "bytearray"
                ],
                "engine_param": [
                    "raiden.utils.Address",
                    "raiden.utils.ABI",
                    "bool",
                    "slice",
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "BaseEngine.add": {
            "name": "add",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "layer": [
                    "Set[str]",
                    "List[int]",
                    "Union[int, slice]",
                    "str"
                ]
            }
        },
        "BaseEngine.subscribe_tobreak": {
            "name": "subscribe_tobreak",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sender": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "BaseEngine.go": {
            "name": "go",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseEngine.to_output": {
            "name": "to_output",
            "location": 87,
            "return": [
                "str",
                "Dict[str, Any]",
                "Callable",
                "bool",
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "txObject": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "BaseEngine.next": {
            "name": "next",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "raven-master/raven/engine/common_engine.py": {
        "CommonEngine.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_object": [
                    "Optional[str]",
                    "str",
                    "Iterable[str]",
                    "int"
                ],
                "output_object": [
                    "Optional[str]",
                    "str",
                    "Iterable[str]",
                    "int"
                ],
                "engine_param": [
                    "Optional[str]",
                    "str",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "CommonEngine.add": {
            "name": "add",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "layer": [
                    "Callable",
                    "str",
                    "Union[str, bytes]",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "CommonEngine.go": {
            "name": "go",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_next": [
                    "str",
                    "dict"
                ],
                "args": []
            }
        }
    },
    "raven-master/raven/engine/default_engine.py": {
        "DefaultEngine.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_object": [
                    "Optional[str]",
                    "str",
                    "Iterable[str]",
                    "int"
                ],
                "output_object": [
                    "Optional[str]",
                    "str",
                    "Iterable[str]",
                    "int"
                ],
                "engine_param": [
                    "str",
                    "Mapping[str, str]",
                    "Optional[str]",
                    "bool",
                    "float"
                ]
            }
        },
        "DefaultEngine.train_model": {
            "name": "train_model",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "DefaultEngine.parse": {
            "name": "parse",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "request_text": [
                    "int",
                    "bytes",
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "DefaultEngine.response": {
            "name": "response",
            "location": 52,
            "return": [
                "str",
                "Dict[str, dict]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "Optional[int]",
                    "Tuple[str]",
                    "dict",
                    "Callable",
                    "List[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "DefaultEngine.command_success_response": {
            "name": "command_success_response",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "txObject": [
                    "dict",
                    "bytes",
                    "Dict[str, Union[int, str]]",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "DefaultEngine.add": {
            "name": "add",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "layer": [
                    "Callable",
                    "str",
                    "Union[str, bytes]",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "DefaultEngine.go": {
            "name": "go",
            "location": 88,
            "return": [
                "bytes",
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "pretty": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "raven-master/raven/engine/__init__.py": {},
    "raven-master/raven/input/abstract_input.py": {
        "AbstractInput.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractInput.processed": {
            "name": "processed",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseInput.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "txObject": [
                    "Iterable[T]",
                    "int",
                    "str"
                ]
            }
        },
        "BaseInput.pre_loading_set": {
            "name": "pre_loading_set",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "txObject": [
                    "Awaitable",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "BaseInput.get_object": {
            "name": "get_object",
            "location": 41,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": [],
                "txObject": [
                    "bytes",
                    "dict",
                    "str",
                    "list",
                    "Dict[str, Any]",
                    "tuple"
                ]
            }
        },
        "BaseInput.delete": {
            "name": "delete",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "txObject": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "BaseInput.get_access_keys": {
            "name": "get_access_keys",
            "location": 55,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseInput.processed": {
            "name": "processed",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "raven-master/raven/input/cli_input.py": {
        "CLIInput.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "txObject": [
                    "int"
                ]
            }
        },
        "CLIInput.processed": {
            "name": "processed",
            "location": 34,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CLIInput.toBotText": {
            "name": "toBotText",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "raven-master/raven/input/rest_input.py": {
        "RESTInput.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "txObject": [
                    "Optional[str]",
                    "str",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "RESTInput.processed": {
            "name": "processed",
            "location": 12,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RESTInput.toBotText": {
            "name": "toBotText",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "raven-master/raven/input/__init__.py": {},
    "raven-master/raven/layer/abstract_layer.py": {
        "AbstractLayer.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractLayer.response": {
            "name": "response",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseLayer.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "params": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "BaseLayer.response": {
            "name": "response",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "txObject": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "int",
                    "T"
                ]
            }
        },
        "BaseLayer.on_success": {
            "name": "on_success",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "txObject": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "BaseLayer.on_fails": {
            "name": "on_fails",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "txObject": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "raven-master/raven/layer/preset.py": {},
    "raven-master/raven/layer/__init__.py": {},
    "raven-master/raven/layer/cmd/cmd_base_layer.py": {
        "CMDBaseLayer.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "param": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "CMDBaseLayer.response": {
            "name": "response",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "txObject": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "int",
                    "T"
                ]
            }
        },
        "CMDBaseLayer.check_cmd": {
            "name": "check_cmd",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "keyword": [
                    "bool",
                    "Union[List, str]"
                ],
                "txObject": [
                    "str",
                    "int"
                ]
            }
        },
        "CMDBaseLayer.__str__": {
            "name": "__str__",
            "location": 35,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "raven-master/raven/layer/cmd/exit.py": {
        "ExitLayer.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "param": [
                    "str",
                    "bytes",
                    "config.Rule",
                    "Iterable[str]"
                ]
            }
        },
        "ExitLayer.response": {
            "name": "response",
            "location": 14,
            "return": [
                "Optional[str]",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "txObject": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "raven-master/raven/layer/cmd/wiki.py": {
        "WikiLayer.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "param": [
                    "str",
                    "bytes",
                    "config.Rule",
                    "Iterable[str]"
                ]
            }
        },
        "WikiLayer.response": {
            "name": "response",
            "location": 19,
            "return": [
                "Optional[str]",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "txObject": [
                    "cmk.utils.type_defs.UserId",
                    "Mapping[str, Any]",
                    "werkzeug.exceptions.HTTPException",
                    "bytes",
                    "dict"
                ]
            }
        }
    },
    "raven-master/raven/model/user.py": {},
    "raven-master/raven/output/abstract_output.py": {
        "AbstractOutput.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractOutput.output": {
            "name": "output",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseOutput.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "txObject": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "BaseOutput.wrapper": {
            "name": "wrapper",
            "location": 29,
            "return": [
                "str",
                "Union[str, List[str]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "output": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "BaseOutput.output": {
            "name": "output",
            "location": 37,
            "return": [
                "bool",
                "\"Cash\""
            ],
            "arguments": {
                "self": [],
                "txObject": [
                    "str",
                    "int"
                ]
            }
        },
        "BaseOutput.params": {
            "name": "params",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "oparams": [
                    "dict",
                    "Optional[str]",
                    "str",
                    "list"
                ]
            }
        }
    },
    "raven-master/raven/output/cli_output.py": {
        "CLIOutput.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "txObject": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "CLIOutput.output": {
            "name": "output",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "txObject": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "raven-master/raven/output/rest_output.py": {
        "RESTOutput.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "txObject": [
                    "bool",
                    "str",
                    "Union[bool, str]",
                    "bytes",
                    "dict"
                ]
            }
        },
        "RESTOutput.output": {
            "name": "output",
            "location": 9,
            "return": [
                "str",
                "List[int]",
                "bool",
                "Tuple[int]"
            ],
            "arguments": {
                "self": [],
                "txObject": [
                    "str",
                    "bytes",
                    "Optional[str]"
                ]
            }
        }
    },
    "raven-master/raven/output/__init__.py": {},
    "raven-master/raven/response/abstract_response.py": {
        "AbstractResponse.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractResponse.render": {
            "name": "render",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractResponse.get_class_name": {
            "name": "get_class_name",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractResponse.check_intent_name": {
            "name": "check_intent_name",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseResponse.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseResponse.render": {
            "name": "render",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseResponse.get_class_name": {
            "name": "get_class_name",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseResponse.check_intent_name": {
            "name": "check_intent_name",
            "location": 78,
            "return": [
                "List[str]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "BaseResponse.get_slot_by_name": {
            "name": "get_slot_by_name",
            "location": 81,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "slot_name": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "raven-master/raven/response/response_schedule.py": {},
    "raven-master/raven/response/utils.py": {
        "geneate_response_from_intent": {
            "name": "geneate_response_from_intent",
            "location": 7,
            "return": [
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "response_file_name": [
                    "str"
                ],
                "intent_name": [
                    "str"
                ],
                "sub_path": [
                    "str"
                ],
                "base_path": [
                    "str"
                ],
                "random": [
                    "str",
                    "bool",
                    "Callable[[Optional], None]"
                ]
            }
        }
    },
    "raven-master/raven/response/changelog/_changelog/changelog.py": {
        "Changelog.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "Optional[int]",
                    "Callable",
                    "float"
                ]
            }
        },
        "Changelog.get_class_name": {
            "name": "get_class_name",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Changelog.fetch_changelog": {
            "name": "fetch_changelog",
            "location": 15,
            "return": [
                "int",
                "Dict[str, str]",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "package_name": [
                    "str"
                ]
            }
        },
        "Changelog.render": {
            "name": "render",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "pretty": [
                    "bool"
                ]
            }
        }
    },
    "raven-master/raven/response/_command/_commands/commands.py": {
        "Commands.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "str",
                    "Optional[int]",
                    "Iterable"
                ]
            }
        },
        "Commands.get_class_name": {
            "name": "get_class_name",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Commands.render": {
            "name": "render",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "txObject": [
                    "dict"
                ],
                "pretty": [
                    "dict"
                ]
            }
        }
    },
    "raven-master/raven/response/_cron/_reminder/models.py": {},
    "raven-master/raven/response/_cron/_reminder/reminder.py": {
        "Reminder.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "Optional[int]",
                    "Callable",
                    "float"
                ]
            }
        },
        "Reminder.get_class_name": {
            "name": "get_class_name",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reminder.render": {
            "name": "render",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "pretty": [
                    "int"
                ]
            }
        }
    },
    "raven-master/raven/response/_cron/_reminder/scheduler.py": {
        "to_secs": {
            "name": "to_secs",
            "location": 8,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "mins": [
                    "float",
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "to_mins": {
            "name": "to_mins",
            "location": 13,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "hrs": [
                    "float",
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "start_count_down_basic_case": {
            "name": "start_count_down_basic_case",
            "location": 18,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "List[int]",
                "str"
            ],
            "arguments": {
                "_time": [
                    "str",
                    "bool",
                    "list",
                    "List[str]"
                ],
                "message": [
                    "int",
                    "List[Callable]",
                    "complex",
                    "Optional[str]",
                    "Sequence[Any]",
                    "Dict[str, Any]"
                ],
                "task": [
                    "deeplearning.ml4pl.models.classifier_base.ClassifierBase",
                    "deeplearning.ml4pl.models.logger.Logger",
                    "models.Membership",
                    "models.User",
                    "esm.models.service_instance.ServiceInstance"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "time": [
                    "time.struct_time",
                    "str",
                    "List[str]"
                ],
                "message": [
                    "time.struct_time",
                    "str",
                    "List[str]"
                ]
            }
        },
        "list_of_all_task": {
            "name": "list_of_all_task",
            "location": 70,
            "return": [
                "Optional[str]",
                "Dict[str, Any]",
                "bool",
                "dict",
                "Dict[str, Union[str, Set]]",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "revoke_task_by_id": {
            "name": "revoke_task_by_id",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "_id": [
                    "str",
                    "int",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "raven-master/raven/response/_default/_default/default.py": {
        "Default.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "bool",
                    "str"
                ]
            }
        },
        "Default.get_class_name": {
            "name": "get_class_name",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Default.render": {
            "name": "render",
            "location": 21,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "pretty": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "raven-master/raven/response/_github/_stargazers/stargazers.py": {
        "Stargazers.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "Optional[int]",
                    "Callable",
                    "float"
                ]
            }
        },
        "Stargazers.get_class_name": {
            "name": "get_class_name",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stargazers.render": {
            "name": "render",
            "location": 13,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "pretty": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "raven-master/raven/response/_global/_getmyip/getmyip.py": {
        "Getmyip.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "Optional[int]",
                    "Callable",
                    "float"
                ]
            }
        },
        "Getmyip.get_class_name": {
            "name": "get_class_name",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Getmyip.get_ip": {
            "name": "get_ip",
            "location": 16,
            "return": [
                "str",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Getmyip.render": {
            "name": "render",
            "location": 28,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "pretty": [
                    "str",
                    "Sequence[str]",
                    "int"
                ]
            }
        }
    },
    "raven-master/raven/response/_global/_github_package_version/github_package_version.py": {
        "Github_package_version.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "str",
                    "int"
                ]
            }
        },
        "Github_package_version.get_class_name": {
            "name": "get_class_name",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Github_package_version.check_for_updates": {
            "name": "check_for_updates",
            "location": 38,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "package_name": [
                    "str"
                ],
                "patch_type": [
                    "str"
                ]
            }
        },
        "Github_package_version.render": {
            "name": "render",
            "location": 54,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "pretty": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "raven-master/raven/response/_global/_greeting/greeting.py": {
        "Greeting.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "Optional[int]",
                    "Callable",
                    "float"
                ]
            }
        },
        "Greeting.get_class_name": {
            "name": "get_class_name",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Greeting.render": {
            "name": "render",
            "location": 15,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "self": [],
                "pretty": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "raven-master/raven/response/_global/_humor/humor.py": {
        "Humor.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "Optional[int]",
                    "Callable",
                    "float"
                ]
            }
        },
        "Humor.get_class_name": {
            "name": "get_class_name",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Humor.render": {
            "name": "render",
            "location": 36,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "self": [],
                "pretty": [
                    "str",
                    "list",
                    "int"
                ]
            }
        },
        "Humor.get_humor_response": {
            "name": "get_humor_response",
            "location": 46,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Optional[str]",
                "List[str]",
                "int",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "raven-master/raven/response/_global/_pwned/pwned.py": {
        "Pwned.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "Optional[int]",
                    "Callable",
                    "float"
                ]
            }
        },
        "Pwned.get_class_name": {
            "name": "get_class_name",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pwned.check_for_breach": {
            "name": "check_for_breach",
            "location": 38,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "Dict[str, str]",
                    "dict",
                    "Dict[int, dict]",
                    "Dict[str, Any]",
                    "str",
                    "int"
                ]
            }
        },
        "Pwned.level_of_compormised": {
            "name": "level_of_compormised",
            "location": 122,
            "return": [
                "Iterable[T]",
                "str",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "list",
                    "int",
                    "List[Tuple[str, int]]",
                    "List[T]",
                    "str"
                ]
            }
        },
        "Pwned.render": {
            "name": "render",
            "location": 144,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "pretty": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "raven-master/raven/response/_profile/_bio/bio.py": {
        "Bio.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "Optional[int]",
                    "Callable",
                    "float"
                ]
            }
        },
        "Bio.get_class_name": {
            "name": "get_class_name",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bio.render": {
            "name": "render",
            "location": 13,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "pretty": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "raven-master/raven/response/_profile/_certification/certification.py": {
        "Certification.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "Optional[int]",
                    "Callable",
                    "float"
                ]
            }
        },
        "Certification.get_class_name": {
            "name": "get_class_name",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Certification.render": {
            "name": "render",
            "location": 12,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "pretty": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "raven-master/raven/response/_profile/_experience/experience.py": {
        "Experience.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "Optional[int]",
                    "Callable",
                    "float"
                ]
            }
        },
        "Experience.get_class_name": {
            "name": "get_class_name",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Experience.render": {
            "name": "render",
            "location": 20,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "pretty": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "raven-master/raven/response/_profile/_finalYearProject/finalYearProject.py": {
        "FinalYearProject.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "Optional[int]",
                    "Optional[str]",
                    "str",
                    "int"
                ]
            }
        },
        "FinalYearProject.get_class_name": {
            "name": "get_class_name",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FinalYearProject.render": {
            "name": "render",
            "location": 12,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "pretty": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "raven-master/raven/response/_profile/_location/location.py": {
        "Location.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "Optional[int]",
                    "Callable",
                    "float"
                ]
            }
        },
        "Location.get_class_name": {
            "name": "get_class_name",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Location.render": {
            "name": "render",
            "location": 12,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "pretty": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "raven-master/raven/response/_profile/_profileImage/profileImage.py": {
        "ProfileImage.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileImage.get_class_name": {
            "name": "get_class_name",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileImage.render": {
            "name": "render",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "raven-master/raven/response/_profile/_projects/projects.py": {
        "Projects.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "str",
                    "bool"
                ]
            }
        },
        "Projects.get_class_name": {
            "name": "get_class_name",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Projects.render": {
            "name": "render",
            "location": 13,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "pretty": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "raven-master/raven/response/_task/_getListOfTask/getListOfTask.py": {
        "GetListOfTask.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "int",
                    "Optional[str]",
                    "bool",
                    "tuple"
                ]
            }
        },
        "GetListOfTask.get_class_name": {
            "name": "get_class_name",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetListOfTask.render": {
            "name": "render",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "pretty": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Dict[str, Set[str]]"
                ]
            }
        }
    },
    "raven-master/raven/response/_task/_setTask/setTask.py": {
        "SetTask.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SetTask.get_class_name": {
            "name": "get_class_name",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetTask.check_intent_name": {
            "name": "check_intent_name",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "SetTask.render": {
            "name": "render",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "snip_scope": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "raven-master/raven/scaff/utils.py": {},
    "raven-master/raven/scaff/intent/__init__.py": {
        "gen_intent": {
            "name": "gen_intent",
            "location": 12,
            "return": [
                "str",
                "pathlib.Path",
                "Union[str, pathlib.Path]",
                "cmk.utils.type_defs.HostName",
                "List[pypi2nix.path.Path]"
            ],
            "arguments": {
                "base_path": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "Tuple[str]"
                ]
            }
        },
        "gen_intent.generate_files": {
            "name": "generate_files",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "file_name": [
                    "str",
                    "List[str]",
                    "list",
                    "pathlib.Path"
                ],
                "sub_path": [
                    "str",
                    "pathlib.Path",
                    "Optional[Dict]",
                    "Union[str, pathlib.Path]"
                ]
            }
        }
    },
    "raven-master/raven/scaff/response/__init__.py": {
        "gen_response": {
            "name": "gen_response",
            "location": 11,
            "return": [
                "str",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.ConfigSerial",
                "Callable[[str], None]"
            ],
            "arguments": {
                "base_path": [
                    "str",
                    "bool"
                ],
                "_sub_path": [
                    "str"
                ],
                "_file_name": [
                    "str"
                ]
            }
        }
    },
    "raven-master/server/main.py": {
        "get_response": {
            "name": "get_response",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "str",
                    "Optional[Union[Dict, str, int, bytes]]"
                ]
            }
        }
    },
    "raven-master/tests/conftest.py": {},
    "raven-master/tests/conftest_bot.py": {},
    "raven-master/tests/conftest_tx.py": {
        "sanic_app": {
            "name": "sanic_app",
            "location": 8,
            "return": [
                "\"App\""
            ],
            "arguments": {
                "request": []
            }
        },
        "sanic_tester": {
            "name": "sanic_tester",
            "location": 13,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "loop": [
                    "bool",
                    "Callable",
                    "Optional[Tuple[float, float]]"
                ],
                "sanic_app": [
                    "bool",
                    "Callable",
                    "Optional[Tuple[float, float]]"
                ],
                "test_client": [
                    "bool",
                    "Callable",
                    "Optional[Tuple[float, float]]"
                ]
            }
        },
        "logger": {
            "name": "logger",
            "location": 18,
            "return": [
                "int",
                "str",
                "bytearray"
            ],
            "arguments": {}
        }
    },
    "raven-master/tests/Bot/test_default_engine.py": {
        "test_engine_with_out_IO": {
            "name": "test_engine_with_out_IO",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "raven-master/tests/Tx/test_default_api.py": {},
    "raven-master/tests/Tx/test_health_api.py": {},
    "raven-master/tests/Tx/test_utils.py": {
        "test_app_config_default_env_prefix": {
            "name": "test_app_config_default_env_prefix",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "sanic_app": []
            }
        },
        "test_app_config_custom_env_prefix": {
            "name": "test_app_config_custom_env_prefix",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "sanic_app": []
            }
        }
    },
    "raven-master/TUI/main.py": {
        "from_server": {
            "name": "from_server",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[MutableMapping]",
                    "bytes",
                    "T",
                    "Union[Mapping, str]"
                ]
            }
        },
        "entryPoint.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "entryPoint.emit_to_server": {
            "name": "emit_to_server",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "text": [
                    "dict",
                    "str"
                ]
            }
        },
        "entryPoint2.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "entryPoint2.run": {
            "name": "run",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "text": [
                    "dict",
                    "str"
                ]
            }
        }
    },
    "raven-master/Tx(deprecated)/run.py": {},
    "raven-master/Tx(deprecated)/Tx.py": {},
    "raven-master/Tx(deprecated)/__init__.py": {},
    "raven-master/Tx(deprecated)/auth/__init__.py": {},
    "raven-master/Tx(deprecated)/auth/account/login.py": {},
    "raven-master/Tx(deprecated)/auth/account/signup.py": {},
    "raven-master/Tx(deprecated)/blueprint/__init__.py": {},
    "raven-master/Tx(deprecated)/blueprint/bio/__init__.py": {},
    "raven-master/Tx(deprecated)/blueprint/health/__init__.py": {},
    "raven-master/Tx(deprecated)/blueprint/user/__init__.py": {},
    "raven-master/Tx(deprecated)/dao/__init__.py": {},
    "raven-master/Tx(deprecated)/middleware/__init__.py": {},
    "raven-master/Tx(deprecated)/model/user.py": {
        "User.verify_password": {
            "name": "verify_password",
            "location": 21,
            "return": [
                "str",
                "list",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "bytes"
                ]
            }
        },
        "User.to_dict": {
            "name": "to_dict",
            "location": 28,
            "return": [
                "int",
                "tuple",
                "List[Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.__str__": {
            "name": "__str__",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.__repr__": {
            "name": "__repr__",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "raven-master/Tx(deprecated)/model/__init__.py": {},
    "raven-master/Tx(deprecated)/util/__init__.py": {
        "sanic_config_manager": {
            "name": "sanic_config_manager",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "sanic.Sanic"
                ],
                "prefix": [
                    "str",
                    "Mapping[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "setup_database_creation_listener": {
            "name": "setup_database_creation_listener",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "sanic.Sanic"
                ],
                "database": [
                    "sanic.Sanic"
                ]
            }
        },
        "setup_rate_limiter": {
            "name": "setup_rate_limiter",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "app": []
            }
        }
    }
}
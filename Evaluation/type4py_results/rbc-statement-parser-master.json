{
    "rbc-statement-parser-master/parse_chq.py": {
        "format_statement": {
            "name": "format_statement",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "match": [
                    "int",
                    "bool",
                    "Tuple[int]",
                    "Optional[int]"
                ],
                "with_padding": [
                    "int",
                    "bool",
                    "Tuple[int]",
                    "Optional[int]"
                ]
            }
        },
        "format_statement_with_padding": {
            "name": "format_statement_with_padding",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "match": [
                    "Match",
                    "str",
                    "re.Match[str]"
                ]
            }
        }
    },
    "rbc-statement-parser-master/parse_visa.py": {
        "format_statement": {
            "name": "format_statement",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "match": [
                    "int",
                    "str",
                    "bool",
                    "Match",
                    "Match[Any]",
                    "float",
                    "Tuple[str, str, str, str, str]"
                ],
                "with_padding": [
                    "int",
                    "str",
                    "bool",
                    "Match",
                    "Match[Any]",
                    "float",
                    "Tuple[str, str, str, str, str]"
                ]
            }
        },
        "format_statement_with_padding": {
            "name": "format_statement_with_padding",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "match": [
                    "Match",
                    "str",
                    "re.Match[str]"
                ]
            }
        }
    },
    "rbc-statement-parser-master/utils.py": {
        "cloc": {
            "name": "cloc",
            "location": 29,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "str": [
                    "str",
                    "bytes",
                    "Optional[bytes]"
                ]
            }
        },
        "file_to_str": {
            "name": "file_to_str",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        },
        "str_to_file": {
            "name": "str_to_file",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "write_str": [
                    "str"
                ],
                "file_path": [
                    "str"
                ]
            }
        },
        "optimize_whitespaces": {
            "name": "optimize_whitespaces",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "str": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "redact_lines": {
            "name": "redact_lines",
            "location": 94,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "str": [
                    "str",
                    "Optional[str]",
                    "Iterable[str]"
                ]
            }
        },
        "append_category_eol": {
            "name": "append_category_eol",
            "location": 115,
            "return": [
                "str",
                "list",
                "Sequence[str]",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "line": [
                    "str"
                ],
                "delimiter": [
                    "str",
                    "List[bytes]",
                    "Iterator[str]",
                    "int",
                    "Union[bytes, str]"
                ]
            }
        }
    }
}
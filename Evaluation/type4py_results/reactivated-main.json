{
    "reactivated-main/setup.py": {},
    "reactivated-main/development/manage.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "reactivated-main/development/server/asgi.py": {},
    "reactivated-main/development/server/urls.py": {},
    "reactivated-main/development/server/wsgi.py": {},
    "reactivated-main/development/server/__init__.py": {},
    "reactivated-main/development/server/example/admin.py": {},
    "reactivated-main/development/server/example/apps.py": {},
    "reactivated-main/development/server/example/context_processors.py": {
        "django_version": {
            "name": "django_version",
            "location": 11,
            "return": [
                "bool",
                "List[dict]",
                "int",
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "reactivated-main/development/server/example/forms.py": {
        "ExampleForm.clean": {
            "name": "clean",
            "location": 24,
            "return": [
                "typing.Dict[builtins.str, typing.Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "reactivated-main/development/server/example/models.py": {},
    "reactivated-main/development/server/example/templates.py": {},
    "reactivated-main/development/server/example/tests.py": {
        "test_foo": {
            "name": "test_foo",
            "location": 1,
            "return": [],
            "arguments": {}
        }
    },
    "reactivated-main/development/server/example/urls.py": {},
    "reactivated-main/development/server/example/views.py": {
        "django_default": {
            "name": "django_default",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "polls_index": {
            "name": "polls_index",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "rotkehlchen.db.utils.BlockchainAccounts",
                    "dict",
                    "metaswitch_tinder.database.models.User",
                    "set"
                ]
            }
        },
        "create_poll": {
            "name": "create_poll",
            "location": 19,
            "return": [
                "str",
                "int",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "app.models.dto.RenewRequest"
                ]
            }
        },
        "update_poll": {
            "name": "update_poll",
            "location": 40,
            "return": [
                "str",
                "Optional[str]",
                "salon.models.Stylist",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "int",
                    "zam_repondeur.models.Team",
                    "bytes",
                    "zerver.models.Stream",
                    "django.http.HttpRequest"
                ],
                "question_id": [
                    "int",
                    "str",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "poll_detail": {
            "name": "poll_detail",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Optional[bool]",
                    "raiden.utils.ChannelID",
                    "raiden.utils.TokenAmount"
                ],
                "question_id": [
                    "str",
                    "int",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "poll_comments": {
            "name": "poll_comments",
            "location": 66,
            "return": [
                "str",
                "int",
                "bool",
                "Iterable[int]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "zam_repondeur.models.Lecture",
                    "zerver.models.UserProfile",
                    "bytes"
                ],
                "question_id": [
                    "str",
                    "int",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "vote": {
            "name": "vote",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "str",
                    "zerver.models.UserProfile"
                ],
                "question_id": [
                    "str",
                    "int",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "form_playground": {
            "name": "form_playground",
            "location": 96,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "request": [
                    "zerver.models.UserProfile",
                    "django.http.HttpRequest",
                    "Union[zerver.models.UserProfile, zilencer.models.RemoteZulipServer]",
                    "zam_repondeur.models.Lecture"
                ]
            }
        },
        "results": {
            "name": "results",
            "location": 109,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "core_lib.core.models.Event",
                    "List[Dict[str, Any]]",
                    "bool"
                ],
                "question_id": [
                    "str",
                    "int",
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "reactivated-main/development/server/example/__init__.py": {},
    "reactivated-main/development/server/example/migrations/0001_initial.py": {},
    "reactivated-main/development/server/example/migrations/__init__.py": {},
    "reactivated-main/development/server/settings/common.py": {},
    "reactivated-main/development/server/settings/localhost.py": {},
    "reactivated-main/development/server/settings/production.py": {},
    "reactivated-main/development/server/settings/__init__.py": {},
    "reactivated-main/reactivated/admin.py": {},
    "reactivated-main/reactivated/apps.py": {
        "get_urls_schema": {
            "name": "get_urls_schema",
            "location": 28,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "get_types_schema": {
            "name": "get_types_schema",
            "location": 60,
            "return": [
                "str",
                "dict",
                "Optional[List[str]]"
            ],
            "arguments": {}
        },
        "get_templates": {
            "name": "get_templates",
            "location": 114,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_interfaces": {
            "name": "get_interfaces",
            "location": 118,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "get_values": {
            "name": "get_values",
            "location": 122,
            "return": [
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {}
        },
        "get_schema": {
            "name": "get_schema",
            "location": 126,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "generate_schema": {
            "name": "generate_schema",
            "location": 156,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "schema": [
                    "int",
                    "Callable",
                    "str"
                ],
                "skip_cache": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "ReactivatedConfig.ready": {
            "name": "ready",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReactivatedConfig.ready.regenerate_schema": {
            "name": "regenerate_schema",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "reactivated-main/reactivated/backend.py": {
        "JSX.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "List[str]",
                    "bool",
                    "qutebrowser.utils.usertypes.Backend",
                    "dict"
                ]
            }
        },
        "JSX.from_string": {
            "name": "from_string",
            "location": 28,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "template_code": [
                    "str",
                    "list",
                    "List[str]"
                ]
            }
        },
        "JSX.get_template": {
            "name": "get_template",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "template_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "JSX.template_adapters": {
            "name": "template_adapters",
            "location": 40,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSX.template_context_processors": {
            "name": "template_context_processors",
            "location": 51,
            "return": [
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSXTemplate.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jsx_template_name": [
                    "str",
                    "Callable[[str], str]"
                ],
                "backend": [
                    "int",
                    "str",
                    "Sequence[Dict[str, str]]",
                    "Set[str]",
                    "Optional[bool]",
                    "T"
                ]
            }
        },
        "JSXTemplate.render": {
            "name": "render",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "django.http.HttpRequest",
                    "Set[str]"
                ],
                "request": [
                    "django.http.HttpRequest",
                    "bytes",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "AdapterTemplate.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "adapter": [
                    "bool",
                    "int"
                ],
                "backend": [
                    "bool",
                    "torch.utils.data.DataLoader",
                    "cmk.utils.type_defs.HostAddress"
                ]
            }
        },
        "AdapterTemplate.render": {
            "name": "render",
            "location": 93,
            "return": [
                "Dict[str, Any]",
                "trezor.utils.Writer",
                "int",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "HttpRequest"
                ],
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "Tuple[int]"
                ]
            }
        }
    },
    "reactivated-main/reactivated/checks.py": {
        "check_installed_app_order": {
            "name": "check_installed_app_order",
            "location": 8,
            "return": [
                "dict",
                "List[str]",
                "MutableMapping[str, Any]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "app_configs": [
                    "bool"
                ]
            }
        }
    },
    "reactivated-main/reactivated/constraints.py": {
        "EnumConstraint.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumConstraint.constraint_sql": {
            "name": "constraint_sql",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "allennlp.models.model.Model",
                    "bool",
                    "Model",
                    "str"
                ],
                "schema_editor": [
                    "allennlp.models.model.Model",
                    "bool",
                    "Model",
                    "str"
                ]
            }
        },
        "EnumConstraint.create_sql": {
            "name": "create_sql",
            "location": 30,
            "return": [
                "Type[BaseException]",
                "Optional[Type[BaseException]]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Type",
                    "esm.models.plan.Plan",
                    "esm.models.service_type.ServiceType",
                    "int"
                ],
                "schema_editor": [
                    "Type",
                    "server.models.User",
                    "zerver.models.Realm",
                    "str",
                    "models.User"
                ]
            }
        },
        "EnumConstraint.remove_sql": {
            "name": "remove_sql",
            "location": 47,
            "return": [
                "str",
                "int",
                "bool",
                "Dict[str, Set[str]]"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "esm.models.service_type.ServiceType",
                    "Sequence[str]",
                    "List[str]",
                    "models.User"
                ],
                "schema_editor": [
                    "Type",
                    "Type[T]",
                    "bool",
                    "allennlp.models.Model",
                    "models.User"
                ]
            }
        },
        "EnumConstraint.__repr__": {
            "name": "__repr__",
            "location": 58,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumConstraint.__eq__": {
            "name": "__eq__",
            "location": 65,
            "return": [
                "str",
                "int",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "EnumConstraint.deconstruct": {
            "name": "deconstruct",
            "location": 72,
            "return": [
                "dict",
                "List[str]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "reactivated-main/reactivated/fields.py": {
        "convert_enum_to_choices": {
            "name": "convert_enum_to_choices",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "coerce_to_enum": {
            "name": "coerce_to_enum",
            "location": 83,
            "return": [],
            "arguments": {
                "enum": [],
                "value": []
            }
        },
        "parse_enum": {
            "name": "parse_enum",
            "location": 100,
            "return": [],
            "arguments": {
                "enum": [],
                "value": []
            }
        },
        "EnumChoice.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "choice": []
            }
        },
        "EnumChoice.__str__": {
            "name": "__str__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EnumChoice.__hash__": {
            "name": "__hash__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EnumChoice.__eq__": {
            "name": "__eq__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "EnumChoiceIterator.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EnumChoiceIterator.__iter__": {
            "name": "__iter__",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_EnumField.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_EnumField.deconstruct": {
            "name": "deconstruct",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_EnumField.contribute_to_class": {
            "name": "contribute_to_class",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "cls": [],
                "name": []
            }
        },
        "_EnumField.db_type": {
            "name": "db_type",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "connection": []
            }
        },
        "_EnumField.from_db_value": {
            "name": "from_db_value",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "expression": [],
                "connection": []
            }
        },
        "_EnumField.to_python": {
            "name": "to_python",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_EnumField.get_prep_value": {
            "name": "get_prep_value",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_EnumField.value_to_string": {
            "name": "value_to_string",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "_EnumField.formfield": {
            "name": "formfield",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EnumField": {
            "name": "EnumField",
            "location": 273,
            "return": [],
            "arguments": {
                "enum": [],
                "default": [],
                "null": [],
                "verbose_name": [],
                "unique": [],
                "blank": [],
                "db_index": [],
                "editable": [],
                "help_text": [],
                "db_column": [],
                "db_tablespace": [],
                "validators": [],
                "error_messages": []
            }
        },
        "DRFEnumChoiceField.to_internal_value": {
            "name": "to_internal_value",
            "location": 306,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "DRFEnumChoiceField.to_representation": {
            "name": "to_representation",
            "location": 312,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "DRFReadOnlyEnumField.to_representation": {
            "name": "to_representation",
            "location": 321,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        }
    },
    "reactivated-main/reactivated/forms.py": {
        "get_form_or_form_set_descriptor": {
            "name": "get_form_or_form_set_descriptor",
            "location": 102,
            "return": [
                "bool",
                "str",
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "prefixed_name": [
                    "str"
                ]
            }
        },
        "get_form_from_form_set_or_form": {
            "name": "get_form_from_form_set_or_form",
            "location": 121,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "context_data": [
                    "dict",
                    "Dict[int, Dict]",
                    "Dict[str, Any]"
                ],
                "descriptor": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, Set[str]]",
                    "Mapping[str, Any]",
                    "Callable[[Any], str]"
                ]
            }
        },
        "autocomplete": {
            "name": "autocomplete",
            "location": 140,
            "return": [
                "str"
            ],
            "arguments": {
                "view_func": [
                    "Callable",
                    "Callable[..., Dict]",
                    "bool"
                ]
            }
        },
        "EnumChoiceField.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "bool",
                "Optional[int]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumChoiceField.prepare_value": {
            "name": "prepare_value",
            "location": 88,
            "return": [
                "str",
                "int",
                "Tuple[Tuple[int, ...]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "type",
                    "int"
                ]
            }
        },
        "autocomplete.wrapped_view": {
            "name": "wrapped_view",
            "location": 141,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "reactivated-main/reactivated/middleware.py": {
        "ReactivatedMiddleware.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_response": [
                    "dict",
                    "str"
                ]
            }
        },
        "ReactivatedMiddleware.__call__": {
            "name": "__call__",
            "location": 10,
            "return": [
                "dict",
                "List[float]",
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "reactivated-main/reactivated/models.py": {
        "computed_relation": {
            "name": "computed_relation",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "computed_foreign_key": {
            "name": "computed_foreign_key",
            "location": 90,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Type[Any]"
            ],
            "arguments": {}
        },
        "ComputedRelation.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComputedRelation.related_model": {
            "name": "related_model",
            "location": 33,
            "return": [
                "List[app.models.Question]",
                "app.models.Question",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComputedRelation.__get__": {
            "name": "__get__",
            "location": 44,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Optional[str]",
                    "int",
                    "Optional[float]"
                ],
                "own": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "computed_relation.inner": {
            "name": "inner",
            "location": 60,
            "return": [],
            "arguments": {
                "fget": []
            }
        },
        "computed_foreign_key.inner": {
            "name": "inner",
            "location": 101,
            "return": [],
            "arguments": {
                "fget": []
            }
        }
    },
    "reactivated-main/reactivated/pick.py": {
        "get_field_descriptor": {
            "name": "get_field_descriptor",
            "location": 31,
            "return": [
                "str",
                "dict",
                "List[str]",
                "bool",
                "Type[Any]"
            ],
            "arguments": {
                "model_class": [
                    "Dict[str, Any]",
                    "bool",
                    "dict"
                ],
                "field_chain": [
                    "List[str]",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "serialize": {
            "name": "serialize",
            "location": 128,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "instance": [
                    "str",
                    "dict",
                    "jobs.models.Job",
                    "bool"
                ],
                "schema": [
                    "Dict[str, object]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, int]]",
                    "Optional[Dict[str, Any]]",
                    "JSONSchema",
                    "Dict[str, str]"
                ]
            }
        },
        "build_nested_schema": {
            "name": "build_nested_schema",
            "location": 147,
            "return": [
                "bool"
            ],
            "arguments": {
                "schema": [
                    "dict",
                    "List[dict]",
                    "JSONSchema"
                ],
                "path": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "BasePickHolder.get_json_schema": {
            "name": "get_json_schema",
            "location": 203,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "str",
                    "Optional[str]"
                ],
                "definitions": [
                    "str",
                    "BaseException"
                ]
            }
        },
        "Pick.__class_getitem__": {
            "name": "__class_getitem__",
            "location": 237,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Type[T]",
                    "Callable[..., T]",
                    "Type"
                ],
                "item": [
                    "Dict[str, Any]",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "reactivated-main/reactivated/plugin.py": {
        "analyze_stubs": {
            "name": "analyze_stubs",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [
                    "mypy.plugin.FunctionContext",
                    "mypy.plugin.ClassDefContext"
                ]
            }
        },
        "analyze_formset_factory": {
            "name": "analyze_formset_factory",
            "location": 78,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "ctx": [
                    "str"
                ]
            }
        },
        "analyze_pick": {
            "name": "analyze_pick",
            "location": 119,
            "return": [
                "mypy.nodes.ClassDef",
                "Type",
                "mypy.types.Type"
            ],
            "arguments": {
                "ctx": [
                    "mypy.plugin.AnalyzeTypeContext",
                    "mypy.plugin.ClassDefContext",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "analyze_template": {
            "name": "analyze_template",
            "location": 125,
            "return": [
                "mypy.types.Instance",
                "T",
                "List[Dict]"
            ],
            "arguments": {
                "ctx": [
                    "mypy.plugin.ClassDefContext"
                ]
            }
        },
        "plugin": {
            "name": "plugin",
            "location": 162,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "version": [
                    "str"
                ]
            }
        },
        "ReactivatedPlugin.get_type_analyze_hook": {
            "name": "get_type_analyze_hook",
            "location": 31,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str"
                ]
            }
        },
        "ReactivatedPlugin.get_class_decorator_hook": {
            "name": "get_class_decorator_hook",
            "location": 39,
            "return": [
                "str",
                "List[str]",
                "Union[str, bytes]"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str"
                ]
            }
        },
        "ReactivatedPlugin.get_base_class_hook": {
            "name": "get_base_class_hook",
            "location": 50,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str"
                ]
            }
        },
        "ReactivatedPlugin.get_dynamic_class_hook": {
            "name": "get_dynamic_class_hook",
            "location": 55,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str"
                ]
            }
        }
    },
    "reactivated-main/reactivated/processes.py": {
        "start_tsc": {
            "name": "start_tsc",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "start_client": {
            "name": "start_client",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "start_renderer": {
            "name": "start_renderer",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "reactivated-main/reactivated/renderer.py": {
        "wait_and_get_port": {
            "name": "wait_and_get_port",
            "location": 19,
            "return": [
                "List[str]",
                "Callable",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "get_accept_list": {
            "name": "get_accept_list",
            "location": 50,
            "return": [
                "List[str]",
                "int",
                "str",
                "tuple",
                "Set[str]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "should_respond_with_json": {
            "name": "should_respond_with_json",
            "location": 61,
            "return": [
                "str",
                "Optional[str]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "request": [
                    "http.MITMRequest"
                ]
            }
        },
        "render_jsx_to_string": {
            "name": "render_jsx_to_string",
            "location": 69,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "http.MITMRequest",
                    "str",
                    "Union[dict, list]"
                ],
                "context": [
                    "str",
                    "Dict[str, Any]"
                ],
                "props": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "reactivated-main/reactivated/stubs.py": {
        "BaseFormSet.total_form_count": {
            "name": "total_form_count",
            "location": 24,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFormSet.initial_form_count": {
            "name": "initial_form_count",
            "location": 27,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFormSet.non_form_errors": {
            "name": "non_form_errors",
            "location": 30,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseUndefinedHolder.get_json_schema": {
            "name": "get_json_schema",
            "location": 64,
            "return": [
                "int",
                "Tuple[str, str]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "definitions": [
                    "str"
                ]
            }
        },
        "Undefined.__class_getitem__": {
            "name": "__class_getitem__",
            "location": 72,
            "return": [
                "Callable[..., T]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Type[T]",
                    "Callable[..., T]",
                    "Type"
                ],
                "item": [
                    "dict",
                    "Dict[str, str]",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "reactivated-main/reactivated/templates.py": {
        "template": {
            "name": "template",
            "location": 70,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "Callable[[], None]",
                    "dict",
                    "django.template.RequestContext",
                    "AnyStr",
                    "str",
                    "Dict[str, Any]",
                    "Type['Declared']"
                ]
            }
        },
        "extract_forms_form_sets_and_actions": {
            "name": "extract_forms_form_sets_and_actions",
            "location": 115,
            "return": [
                "bool",
                "int",
                "float"
            ],
            "arguments": {
                "interface": [
                    "str",
                    "Mapping"
                ]
            }
        },
        "interface": {
            "name": "interface",
            "location": 144,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "T",
                    "type",
                    "str",
                    "Collection[str]",
                    "Dict[str, Any]",
                    "MutableMapping"
                ]
            }
        },
        "LazySerializationResponse.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "template": [
                    "str",
                    "Union[bool, int, str]",
                    "bool",
                    "dict"
                ]
            }
        },
        "LazySerializationResponse.rendered_content": {
            "name": "rendered_content",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazySerializationResponse.__getstate__": {
            "name": "__getstate__",
            "location": 52,
            "return": [
                "Dict[str, Any]",
                "dict",
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazySerializationResponse.resolve_context": {
            "name": "resolve_context",
            "location": 64,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "List[str]",
                    "str",
                    "float",
                    "tuple",
                    "hackathon.utils.utils.DataMessage"
                ]
            }
        },
        "template.Augmented.register": {
            "name": "register",
            "location": 75,
            "return": [],
            "arguments": {}
        },
        "template.Augmented.items": {
            "name": "items",
            "location": 79,
            "return": [
                "int",
                "List[int]",
                "float",
                "List[float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "template.Augmented.get_serialized": {
            "name": "get_serialized",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "template.Augmented.render": {
            "name": "render",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "interface.Augmented.register": {
            "name": "register",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "interface.Augmented.get_serialized": {
            "name": "get_serialized",
            "location": 155,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "interface.Augmented.render": {
            "name": "render",
            "location": 159,
            "return": [
                "int",
                "str",
                "Optional[Dict]",
                "Dict[str, Any]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "interface.Augmented.as_json": {
            "name": "as_json",
            "location": 181,
            "return": [
                "bool",
                "cmk.utils.type_defs.UserId",
                "Dict[int, dict]",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "int"
                ]
            }
        }
    },
    "reactivated-main/reactivated/types.py": {},
    "reactivated-main/reactivated/utils.py": {
        "is_simple_callable": {
            "name": "is_simple_callable",
            "location": 16,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "possible_callable": [
                    "str",
                    "int"
                ]
            }
        },
        "get_attribute": {
            "name": "get_attribute",
            "location": 21,
            "return": [
                "Optional[int]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "bool",
                "Optional[str]",
                "dict",
                "Optional[Any]",
                "Optional[List[Any]]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "instance": [
                    "Optional[int]",
                    "Iterable[T]",
                    "db.models.Cowboy",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "attrs": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "get_template_engine": {
            "name": "get_template_engine",
            "location": 87,
            "return": [
                "str",
                "List[str]",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "ClassLookupDict.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapping": [
                    "Optional[str]",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "Sequence[MutableSet[int]]",
                    "str"
                ]
            }
        },
        "ClassLookupDict.__getitem__": {
            "name": "__getitem__",
            "location": 69,
            "return": [
                "Dict[str, Any]",
                "List[Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "ClassLookupDict.__setitem__": {
            "name": "__setitem__",
            "location": 83,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        }
    },
    "reactivated-main/reactivated/views.py": {
        "schema": {
            "name": "schema",
            "location": 11,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "Dict[str, dict]",
                "str",
                "bool"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "apistar.http.QueryParams"
                ],
                "query": [
                    "Optional[str]"
                ]
            }
        }
    },
    "reactivated-main/reactivated/widgets.py": {
        "Autocomplete.get_context": {
            "name": "get_context",
            "location": 14,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "list"
                ],
                "value": [
                    "str",
                    "List[str]",
                    "int",
                    "topicdb.core.models.language.Language"
                ],
                "attrs": [
                    "str",
                    "list"
                ]
            }
        }
    },
    "reactivated-main/reactivated/__init__.py": {
        "patched_restart_with_reloader": {
            "name": "patched_restart_with_reloader",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "export": {
            "name": "export",
            "location": 60,
            "return": [],
            "arguments": {
                "var": []
            }
        },
        "to_camel_case": {
            "name": "to_camel_case",
            "location": 112,
            "return": [],
            "arguments": {
                "snake_str": []
            }
        },
        "render_jsx": {
            "name": "render_jsx",
            "location": 117,
            "return": [],
            "arguments": {
                "request": [],
                "template_name": [],
                "props": []
            }
        },
        "ssr": {
            "name": "ssr",
            "location": 141,
            "return": [],
            "arguments": {}
        },
        "create_schema": {
            "name": "create_schema",
            "location": 191,
            "return": [],
            "arguments": {
                "Type": [],
                "definitions": [],
                "ref": []
            }
        },
        "describe_pattern": {
            "name": "describe_pattern",
            "location": 390,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "extract_views_from_urlpatterns": {
            "name": "extract_views_from_urlpatterns",
            "location": 394,
            "return": [],
            "arguments": {
                "urlpatterns": [],
                "base": [],
                "namespace": []
            }
        },
        "ssr.no_args_wrap_with_jsx": {
            "name": "no_args_wrap_with_jsx",
            "location": 156,
            "return": [],
            "arguments": {
                "original": []
            }
        },
        "ssr.wrap_with_jsx": {
            "name": "wrap_with_jsx",
            "location": 167,
            "return": [],
            "arguments": {
                "original": []
            }
        },
        "TypeHint.name": {
            "name": "name",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ssr.no_args_wrap_with_jsx.wrapper": {
            "name": "wrapper",
            "location": 159,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "ssr.wrap_with_jsx.wrapper": {
            "name": "wrapper",
            "location": 170,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "reactivated-main/reactivated/management/__init__.py": {},
    "reactivated-main/reactivated/management/commands/build.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "reactivated-main/reactivated/management/commands/generate_client_assets.py": {
        "Command.handle": {
            "name": "handle",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "reactivated-main/reactivated/management/commands/print_schema.py": {
        "Command.handle": {
            "name": "handle",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "reactivated-main/reactivated/management/commands/__init__.py": {},
    "reactivated-main/reactivated/migrations/__init__.py": {},
    "reactivated-main/reactivated/serialization/context_processors.py": {
        "get_annotation_or_type_hints": {
            "name": "get_annotation_or_type_hints",
            "location": 62,
            "return": [],
            "arguments": {
                "item": []
            }
        },
        "create_context_processor_type": {
            "name": "create_context_processor_type",
            "location": 70,
            "return": [],
            "arguments": {
                "context_processors": [
                    "Callable",
                    "Type[Any]",
                    "List[str]",
                    "django.db.backends.postgresql_psycopg2.schema.DatabaseSchemaEditor"
                ]
            }
        },
        "Request.get_serialized_value": {
            "name": "get_serialized_value",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "Type": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[Any]"
                ],
                "value": [
                    "str"
                ],
                "schema": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[Any]"
                ]
            }
        }
    },
    "reactivated-main/reactivated/serialization/registry.py": {
        "register": {
            "name": "register",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "proxied": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "register.inner": {
            "name": "inner",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "proxy": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Thing.dereference": {
            "name": "dereference",
            "location": 58,
            "return": [
                "Optional[int]",
                "Dict[str, int]",
                "str",
                "mode.utils.types.trees.NodeT"
            ],
            "arguments": {
                "self": []
            }
        },
        "Thing.add_property": {
            "name": "add_property",
            "location": 68,
            "return": [
                "str",
                "float",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "property_schema": [
                    "str",
                    "int",
                    "List[int]",
                    "Optional[str]"
                ]
            }
        }
    },
    "reactivated-main/reactivated/serialization/widgets.py": {
        "BaseWidget.coerce_value": {
            "name": "coerce_value",
            "location": 59,
            "return": [
                "str",
                "int",
                "tuple",
                "List[int]",
                "Callable[[Mapping], T]",
                "dict"
            ],
            "arguments": {
                "context": [
                    "dict",
                    "bool",
                    "int",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "BaseWidget.get_json_schema": {
            "name": "get_json_schema",
            "location": 63,
            "return": [
                "str",
                "ClassVar"
            ],
            "arguments": {
                "Proxy": [
                    "str",
                    "bool",
                    "Hashable"
                ],
                "instance": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ],
                "definitions": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "BaseWidget.get_serialized_value": {
            "name": "get_serialized_value",
            "location": 151,
            "return": [
                "int",
                "str",
                "bytes",
                "Type",
                "set"
            ],
            "arguments": {
                "Proxy": [
                    "str",
                    "dict",
                    "django.template.RequestContext"
                ],
                "value": [
                    "str",
                    "bool",
                    "Optional[bool]"
                ],
                "schema": [
                    "set",
                    "Callable[[], None]",
                    "str",
                    "tuple"
                ]
            }
        },
        "CheckboxInput.coerce_value": {
            "name": "coerce_value",
            "location": 260,
            "return": [
                "bool",
                "Callable[..., None]",
                "Optional[Sequence[str]]",
                "Optional[Callable]"
            ],
            "arguments": {
                "context": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "dict",
                    "int"
                ]
            }
        },
        "Select.coerce_value": {
            "name": "coerce_value",
            "location": 293,
            "return": [
                "str",
                "int",
                "tuple",
                "List[int]",
                "Callable[[Mapping], T]",
                "dict"
            ],
            "arguments": {
                "context": [
                    "dict",
                    "bool",
                    "int",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        }
    },
    "reactivated-main/reactivated/serialization/__init__.py": {
        "extract_widget_context": {
            "name": "extract_widget_context",
            "location": 210,
            "return": [],
            "arguments": {
                "field": []
            }
        },
        "field_descriptor_schema": {
            "name": "field_descriptor_schema",
            "location": 497,
            "return": [],
            "arguments": {
                "Type": [],
                "definitions": []
            }
        },
        "generic_alias_schema": {
            "name": "generic_alias_schema",
            "location": 540,
            "return": [],
            "arguments": {
                "Type": [],
                "definitions": []
            }
        },
        "enum_type_schema": {
            "name": "enum_type_schema",
            "location": 635,
            "return": [],
            "arguments": {
                "Type": [],
                "definitions": []
            }
        },
        "enum_schema": {
            "name": "enum_schema",
            "location": 683,
            "return": [],
            "arguments": {
                "Type": [],
                "definitions": []
            }
        },
        "named_tuple_schema": {
            "name": "named_tuple_schema",
            "location": 699,
            "return": [],
            "arguments": {
                "Type": [],
                "definitions": []
            }
        },
        "create_schema": {
            "name": "create_schema",
            "location": 769,
            "return": [],
            "arguments": {
                "Type": [],
                "definitions": []
            }
        },
        "object_serializer": {
            "name": "object_serializer",
            "location": 826,
            "return": [],
            "arguments": {
                "value": [],
                "schema": []
            }
        },
        "array_serializer": {
            "name": "array_serializer",
            "location": 871,
            "return": [],
            "arguments": {
                "value": [],
                "schema": []
            }
        },
        "serialize": {
            "name": "serialize",
            "location": 901,
            "return": [],
            "arguments": {
                "value": [],
                "schema": [],
                "suppress_custom_serializer": []
            }
        },
        "BigAutoField.get_json_schema": {
            "name": "get_json_schema",
            "location": 42,
            "return": [],
            "arguments": {
                "Type": [],
                "instance": [],
                "definitions": []
            }
        },
        "ComputedField.get_serialized_value": {
            "name": "get_serialized_value",
            "location": 52,
            "return": [],
            "arguments": {
                "Type": [],
                "value": [],
                "schema": []
            }
        },
        "ComputedField.get_json_schema": {
            "name": "get_json_schema",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "definitions": []
            }
        },
        "ForeignKeyType.get_serialized_value": {
            "name": "get_serialized_value",
            "location": 83,
            "return": [],
            "arguments": {
                "Type": [],
                "value": [],
                "schema": []
            }
        },
        "ForeignKeyType.get_json_schema": {
            "name": "get_json_schema",
            "location": 89,
            "return": [],
            "arguments": {
                "Type": [],
                "definitions": []
            }
        },
        "BaseIntersectionHolder.get_json_schema": {
            "name": "get_json_schema",
            "location": 105,
            "return": [],
            "arguments": {
                "cls": [],
                "definitions": []
            }
        },
        "Intersection.__class_getitem__": {
            "name": "__class_getitem__",
            "location": 122,
            "return": [],
            "arguments": {
                "cls": [],
                "item": []
            }
        },
        "FieldType.get_json_schema": {
            "name": "get_json_schema",
            "location": 145,
            "return": [],
            "arguments": {
                "Proxy": [],
                "instance": [],
                "definitions": []
            }
        },
        "FieldType.get_serialized_value": {
            "name": "get_serialized_value",
            "location": 193,
            "return": [],
            "arguments": {
                "Type": [],
                "value": [],
                "schema": []
            }
        },
        "extract_widget_context.handle_optgroups": {
            "name": "handle_optgroups",
            "location": 236,
            "return": [],
            "arguments": {
                "widget_context": []
            }
        },
        "FormType.get_json_schema": {
            "name": "get_json_schema",
            "location": 263,
            "return": [],
            "arguments": {
                "Proxy": [],
                "Type": [],
                "definitions": []
            }
        },
        "FormType.get_serialized_value": {
            "name": "get_serialized_value",
            "location": 333,
            "return": [],
            "arguments": {
                "Type": [],
                "value": [],
                "schema": []
            }
        },
        "FormSetType.get_json_schema": {
            "name": "get_json_schema",
            "location": 391,
            "return": [],
            "arguments": {
                "Proxy": [],
                "Type": [],
                "definitions": []
            }
        },
        "QuerySetType.get_serialized_value": {
            "name": "get_serialized_value",
            "location": 480,
            "return": [],
            "arguments": {
                "Type": [],
                "value": [],
                "schema": []
            }
        },
        "Serializer.__call__": {
            "name": "__call__",
            "location": 493,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "schema": []
            }
        },
        "EnumValueType.get_serialized_value": {
            "name": "get_serialized_value",
            "location": 614,
            "return": [],
            "arguments": {
                "Type": [],
                "value": [],
                "schema": []
            }
        },
        "EnumMemberType.get_serialized_value": {
            "name": "get_serialized_value",
            "location": 628,
            "return": [],
            "arguments": {
                "Type": [],
                "value": [],
                "schema": []
            }
        }
    },
    "reactivated-main/sample/manage.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "reactivated-main/sample/__init__.py": {},
    "reactivated-main/sample/server/forms.py": {},
    "reactivated-main/sample/server/settings.py": {},
    "reactivated-main/sample/server/urls.py": {},
    "reactivated-main/sample/server/wsgi.py": {},
    "reactivated-main/sample/server/__init__.py": {},
    "reactivated-main/sample/server/apps/__init__.py": {},
    "reactivated-main/sample/server/apps/samples/admin.py": {},
    "reactivated-main/sample/server/apps/samples/apps.py": {},
    "reactivated-main/sample/server/apps/samples/forms.py": {
        "StoryboardForm.clean": {
            "name": "clean",
            "location": 64,
            "return": [
                "typing.Dict[builtins.str, typing.Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "reactivated-main/sample/server/apps/samples/interfaces.py": {},
    "reactivated-main/sample/server/apps/samples/models.py": {
        "Country.__str__": {
            "name": "__str__",
            "location": 25,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ComposerQuerySet.autocomplete": {
            "name": "autocomplete",
            "location": 40,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "T",
                    "allennlp.models.model.Model",
                    "int",
                    "List[List[str]]",
                    "bool",
                    "flask_appbuilder.models.sqla.Model"
                ]
            }
        },
        "Composer.operas_with_piano_transcriptions": {
            "name": "operas_with_piano_transcriptions",
            "location": 55,
            "return": [
                "Dict[int, Tuple[int, int]]",
                "List[str]",
                "Dict[str, Any]",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Composer.main_opera": {
            "name": "main_opera",
            "location": 59,
            "return": [
                "List[str]",
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Composer.favorite_opera": {
            "name": "favorite_opera",
            "location": 65,
            "return": [
                "Dict[int, Tuple[int, int]]",
                "List[str]",
                "Dict[str, Any]",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Composer.did_live_in_more_than_one_country": {
            "name": "did_live_in_more_than_one_country",
            "location": 69,
            "return": [
                "int",
                "Dict[str, str]",
                "Iterable[Iterable[T]]",
                "models.Trip"
            ],
            "arguments": {
                "self": []
            }
        },
        "Composer.__str__": {
            "name": "__str__",
            "location": 72,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OperaQuerySet.autocomplete": {
            "name": "autocomplete",
            "location": 81,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "T",
                    "allennlp.models.model.Model",
                    "int",
                    "List[List[str]]",
                    "bool",
                    "flask_appbuilder.models.sqla.Model"
                ]
            }
        },
        "Opera.__str__": {
            "name": "__str__",
            "location": 100,
            "return": [
                "str",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": []
            }
        },
        "Opera.get_birthplace_of_composer": {
            "name": "get_birthplace_of_composer",
            "location": 103,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "Optional[int]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "reactivated-main/sample/server/apps/samples/templates.py": {},
    "reactivated-main/sample/server/apps/samples/tests.py": {},
    "reactivated-main/sample/server/apps/samples/views.py": {
        "hello_world": {
            "name": "hello_world",
            "location": 7,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "Callable"
                ]
            }
        },
        "storyboard": {
            "name": "storyboard",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "int",
                    "zam_repondeur.models.Team",
                    "str"
                ]
            }
        },
        "opera_list": {
            "name": "opera_list",
            "location": 32,
            "return": [
                "int",
                "Union[List[str], str]",
                "List[Tuple]",
                "List[str]",
                "bool",
                "list"
            ],
            "arguments": {
                "request": [
                    "str",
                    "viewer.models.Gallery.QuerySet",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "reactivated-main/sample/server/apps/samples/__init__.py": {},
    "reactivated-main/sample/server/apps/samples/migrations/0001_initial.py": {},
    "reactivated-main/sample/server/apps/samples/migrations/__init__.py": {},
    "reactivated-main/scripts/generate_types.py": {},
    "reactivated-main/tests/autocomplete.py": {
        "test_autocomplete": {
            "name": "test_autocomplete",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_invalid_value": {
            "name": "test_invalid_value",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_typed_autocomplete": {
            "name": "test_typed_autocomplete",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "client": [],
                "settings": [
                    "str"
                ]
            }
        },
        "test_prefix_calculation": {
            "name": "test_prefix_calculation",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "bool"
                ]
            }
        }
    },
    "reactivated-main/tests/conftest.py": {
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        }
    },
    "reactivated-main/tests/e2e.py": {
        "test_end_to_end": {
            "name": "test_end_to_end",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "mock.MagicMock",
                    "pathlib.Path",
                    "bool",
                    "str"
                ],
                "live_server": [
                    "str"
                ],
                "page": [
                    "str"
                ]
            }
        },
        "test_default_widget": {
            "name": "test_default_widget",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "tmp_path": [
                    "Dict[str, cerulean.Path]",
                    "pathlib.Path",
                    "List[str]"
                ]
            }
        },
        "test_no_urls": {
            "name": "test_no_urls",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path",
                    "Dict[str, cerulean.Path]"
                ]
            }
        }
    },
    "reactivated-main/tests/exports.py": {
        "test_export_registry": {
            "name": "test_export_registry",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "reactivated-main/tests/fields.py": {
        "test_enum_model_form": {
            "name": "test_enum_model_form",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_enum_form_field": {
            "name": "test_enum_form_field",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_enum_uniqueness": {
            "name": "test_enum_uniqueness",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_convert_enum_to_choices": {
            "name": "test_convert_enum_to_choices",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_enum": {
            "name": "test_parse_enum",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_auto_contraint": {
            "name": "test_auto_contraint",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "settings": []
            }
        },
        "test_drf_serializer": {
            "name": "test_drf_serializer",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "settings": [
                    "Dict[str, Sequence[str]]",
                    "str"
                ]
            }
        },
        "Member.__str__": {
            "name": "__str__",
            "location": 19,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_drf_serializer.TestModelSerializer.create": {
            "name": "create",
            "location": 171,
            "return": [
                "int",
                "dict",
                "django.http.HttpRequest",
                "bool"
            ],
            "arguments": {
                "self": [],
                "validated_data": [
                    "bool",
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "Optional[str]",
                    "List[Dict]"
                ]
            }
        },
        "test_drf_serializer.TestModelSerializer.update": {
            "name": "update",
            "location": 174,
            "return": [
                "int",
                "django.http.HttpRequest",
                "Optional[float]",
                "rotkehlchen.db.dbhandler.DBHandler",
                "dict"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "bool",
                    "dict",
                    "str",
                    "int",
                    "Optional[Any]"
                ],
                "validated_data": [
                    "bool",
                    "dict",
                    "str",
                    "int",
                    "Optional[Any]"
                ]
            }
        }
    },
    "reactivated-main/tests/renderer.py": {
        "test_get_accept_list": {
            "name": "test_get_accept_list",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_render_to_json": {
            "name": "test_render_to_json",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "reactivated-main/tests/serialization.py": {
        "convert_to_json_and_validate": {
            "name": "convert_to_json_and_validate",
            "location": 72,
            "return": [],
            "arguments": {
                "instance": [],
                "schema": []
            }
        },
        "test_serialization": {
            "name": "test_serialization",
            "location": 113,
            "return": [],
            "arguments": {}
        },
        "test_form": {
            "name": "test_form",
            "location": 228,
            "return": [],
            "arguments": {}
        },
        "test_widget_inheritance": {
            "name": "test_widget_inheritance",
            "location": 242,
            "return": [],
            "arguments": {}
        },
        "test_custom_widget": {
            "name": "test_custom_widget",
            "location": 266,
            "return": [],
            "arguments": {}
        },
        "test_subwidget": {
            "name": "test_subwidget",
            "location": 280,
            "return": [],
            "arguments": {}
        },
        "test_form_with_model_choice_iterator_value": {
            "name": "test_form_with_model_choice_iterator_value",
            "location": 291,
            "return": [],
            "arguments": {}
        },
        "test_form_set": {
            "name": "test_form_set",
            "location": 319,
            "return": [],
            "arguments": {}
        },
        "test_typed_choices_non_enum": {
            "name": "test_typed_choices_non_enum",
            "location": 335,
            "return": [],
            "arguments": {
                "settings": []
            }
        },
        "test_override_pick_types": {
            "name": "test_override_pick_types",
            "location": 360,
            "return": [],
            "arguments": {
                "settings": []
            }
        },
        "test_deferred_evaluation_of_types": {
            "name": "test_deferred_evaluation_of_types",
            "location": 385,
            "return": [],
            "arguments": {
                "settings": []
            }
        },
        "test_pick_reverse_relationship": {
            "name": "test_pick_reverse_relationship",
            "location": 421,
            "return": [],
            "arguments": {}
        },
        "test_form_and_fields": {
            "name": "test_form_and_fields",
            "location": 427,
            "return": [],
            "arguments": {}
        },
        "convert_to_json_and_validate.merge_all_of": {
            "name": "merge_all_of",
            "location": 73,
            "return": [],
            "arguments": {
                "json_input": []
            }
        },
        "test_deferred_evaluation_of_types.TestModel.bar": {
            "name": "bar",
            "location": 393,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_deferred_evaluation_of_types.TestModel.resolve_type_hints": {
            "name": "resolve_type_hints",
            "location": 397,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "reactivated-main/tests/templates.py": {
        "test_serialization": {
            "name": "test_serialization",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_pickling": {
            "name": "test_pickling",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_union_with_pick": {
            "name": "test_union_with_pick",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_non_class_based_members": {
            "name": "test_non_class_based_members",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_render_template_with_no_renderer": {
            "name": "test_render_template_with_no_renderer",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "rf": [
                    "str"
                ],
                "settings": []
            }
        }
    },
    "reactivated-main/tests/types.py": {
        "test_named_tuple": {
            "name": "test_named_tuple",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "test_enum": {
            "name": "test_enum",
            "location": 75,
            "return": [],
            "arguments": {}
        },
        "test_enum_type": {
            "name": "test_enum_type",
            "location": 88,
            "return": [],
            "arguments": {}
        },
        "test_enum_does_not_clobber_enum_type": {
            "name": "test_enum_does_not_clobber_enum_type",
            "location": 127,
            "return": [],
            "arguments": {}
        },
        "test_literal": {
            "name": "test_literal",
            "location": 134,
            "return": [],
            "arguments": {}
        },
        "test_typed_dict": {
            "name": "test_typed_dict",
            "location": 148,
            "return": [],
            "arguments": {}
        },
        "test_fixed_tuple": {
            "name": "test_fixed_tuple",
            "location": 167,
            "return": [],
            "arguments": {}
        },
        "test_open_tuple": {
            "name": "test_open_tuple",
            "location": 179,
            "return": [],
            "arguments": {}
        },
        "test_list": {
            "name": "test_list",
            "location": 186,
            "return": [],
            "arguments": {}
        },
        "test_dict": {
            "name": "test_dict",
            "location": 193,
            "return": [],
            "arguments": {}
        },
        "test_none": {
            "name": "test_none",
            "location": 209,
            "return": [],
            "arguments": {}
        },
        "test_float": {
            "name": "test_float",
            "location": 213,
            "return": [],
            "arguments": {}
        },
        "test_int": {
            "name": "test_int",
            "location": 217,
            "return": [],
            "arguments": {}
        },
        "test_form": {
            "name": "test_form",
            "location": 222,
            "return": [],
            "arguments": {}
        },
        "test_form_set": {
            "name": "test_form_set",
            "location": 326,
            "return": [],
            "arguments": {}
        },
        "test_empty_form": {
            "name": "test_empty_form",
            "location": 337,
            "return": [],
            "arguments": {}
        },
        "custom_schema": {
            "name": "custom_schema",
            "location": 350,
            "return": [],
            "arguments": {
                "Type": [],
                "definitions": []
            }
        },
        "test_custom_schema": {
            "name": "test_custom_schema",
            "location": 357,
            "return": [],
            "arguments": {
                "settings": []
            }
        },
        "test_enum_field_descriptor": {
            "name": "test_enum_field_descriptor",
            "location": 366,
            "return": [],
            "arguments": {}
        },
        "test_get_field_descriptor": {
            "name": "test_get_field_descriptor",
            "location": 380,
            "return": [],
            "arguments": {}
        },
        "test_build_nested_schema": {
            "name": "test_build_nested_schema",
            "location": 441,
            "return": [],
            "arguments": {}
        },
        "test_generate_client_assets": {
            "name": "test_generate_client_assets",
            "location": 495,
            "return": [],
            "arguments": {
                "settings": []
            }
        },
        "sample_context_processor_one": {
            "name": "sample_context_processor_one",
            "location": 521,
            "return": [],
            "arguments": {}
        },
        "sample_context_processor_two": {
            "name": "sample_context_processor_two",
            "location": 531,
            "return": [],
            "arguments": {}
        },
        "sample_unannotated_context_processor": {
            "name": "sample_unannotated_context_processor",
            "location": 537,
            "return": [],
            "arguments": {}
        },
        "test_context_processor_type": {
            "name": "test_context_processor_type",
            "location": 541,
            "return": [],
            "arguments": {}
        },
        "NamedTupleType.fourth_as_property": {
            "name": "fourth_as_property",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "reactivated-main/tests/urls.py": {},
    "reactivated-main/tests/views.py": {
        "autocomplete_view": {
            "name": "autocomplete_view",
            "location": 13,
            "return": [
                "str",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "typed_autocomplete_view": {
            "name": "typed_autocomplete_view",
            "location": 25,
            "return": [
                "bool",
                "str",
                "float",
                "List[str]"
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        }
    },
    "reactivated-main/tests/__init__.py": {},
    "reactivated-main/website/manage.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "reactivated-main/website/server/asgi.py": {},
    "reactivated-main/website/server/urls.py": {},
    "reactivated-main/website/server/wsgi.py": {},
    "reactivated-main/website/server/__init__.py": {},
    "reactivated-main/website/server/documentation/templates.py": {},
    "reactivated-main/website/server/documentation/urls.py": {},
    "reactivated-main/website/server/documentation/views.py": {
        "get_stars": {
            "name": "get_stars",
            "location": 9,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "get_latest_tag": {
            "name": "get_latest_tag",
            "location": 25,
            "return": [
                "str",
                "Tuple[str]",
                "List[str]"
            ],
            "arguments": {}
        },
        "home_page": {
            "name": "home_page",
            "location": 39,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "Callable"
                ]
            }
        },
        "install": {
            "name": "install",
            "location": 45,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "Dict[str, dict]",
                "str",
                "bool"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "documentation": {
            "name": "documentation",
            "location": 89,
            "return": [
                "str",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "request": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "reactivated-main/website/server/documentation/__init__.py": {},
    "reactivated-main/website/server/settings/common.py": {},
    "reactivated-main/website/server/settings/localhost.py": {},
    "reactivated-main/website/server/settings/production.py": {},
    "reactivated-main/website/server/settings/__init__.py": {}
}
{
    "recipeyak-master/backend/manage.py": {
        "main": {
            "name": "main",
            "location": 8,
            "return": [],
            "arguments": {}
        }
    },
    "recipeyak-master/backend/set_server.py": {},
    "recipeyak-master/backend/core/apps.py": {},
    "recipeyak-master/backend/core/authentication.py": {
        "SessionAuthentication.enforce_csrf": {
            "name": "enforce_csrf",
            "location": 7,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "rest_framework.requesRequest",
                    "bool"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/conftest.py": {
        "user": {
            "name": "user",
            "location": 22,
            "return": [
                "bool",
                "int",
                "str",
                "Callable"
            ],
            "arguments": {}
        },
        "user_with_recipes": {
            "name": "user_with_recipes",
            "location": 31,
            "return": [
                "str",
                "IO",
                "List[str]",
                "int"
            ],
            "arguments": {
                "recipes": [
                    "bytes",
                    "str",
                    "Union[List, Dict]",
                    "float",
                    "tildes.models.user.User"
                ]
            }
        },
        "user2": {
            "name": "user2",
            "location": 37,
            "return": [
                "bool",
                "int",
                "str",
                "Callable"
            ],
            "arguments": {}
        },
        "user3": {
            "name": "user3",
            "location": 43,
            "return": [
                "bool",
                "int",
                "str",
                "Callable"
            ],
            "arguments": {}
        },
        "client": {
            "name": "client",
            "location": 49,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {}
        },
        "client_b": {
            "name": "client_b",
            "location": 54,
            "return": [
                "str",
                "float",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "recipes": {
            "name": "recipes",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "user": [
                    "str",
                    "zerver.models.UserProfile",
                    "User",
                    "dict"
                ]
            }
        },
        "empty_recipe": {
            "name": "empty_recipe",
            "location": 74,
            "return": [],
            "arguments": {
                "user": [
                    "zerver.models.UserProfile",
                    "str",
                    "user.User",
                    "excars.models.user.User",
                    "arxiv.users.domain.User"
                ]
            }
        },
        "recipe": {
            "name": "recipe",
            "location": 83,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "user": [
                    "zerver.models.UserProfile",
                    "core.models.User",
                    "Optional[User]",
                    "User",
                    "List[str]",
                    "zam_repondeur.models.Dossier",
                    "str"
                ]
            }
        },
        "recipe_pie_factory": {
            "name": "recipe_pie_factory",
            "location": 129,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "user": [
                    "str",
                    "zerver.models.UserProfile",
                    "zerver.models.Message"
                ]
            }
        },
        "recipe_pie": {
            "name": "recipe_pie",
            "location": 161,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "user": [
                    "str",
                    "models.user.UserModel",
                    "float",
                    "datetime.datetime",
                    "bytes",
                    "bool",
                    "int"
                ]
            }
        },
        "recipe2": {
            "name": "recipe2",
            "location": 166,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "user": [
                    "str",
                    "models.user.UserModel",
                    "float",
                    "datetime.datetime",
                    "bytes",
                    "bool",
                    "int"
                ]
            }
        },
        "team": {
            "name": "team",
            "location": 174,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "user": [
                    "str",
                    "models.user.UserModel",
                    "float",
                    "datetime.datetime",
                    "bytes",
                    "bool",
                    "int"
                ]
            }
        },
        "empty_team": {
            "name": "empty_team",
            "location": 181,
            "return": [
                "str",
                "List[Callable]"
            ],
            "arguments": {}
        },
        "team_with_recipes": {
            "name": "team_with_recipes",
            "location": 186,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "team": [
                    "int",
                    "VT"
                ],
                "recipe": [
                    "str",
                    "int",
                    "src.core.model.scripScript",
                    "VT"
                ],
                "recipe_pie": [
                    "str",
                    "int",
                    "src.core.model.scripScript",
                    "VT"
                ]
            }
        },
        "team_with_recipes_no_members": {
            "name": "team_with_recipes_no_members",
            "location": 193,
            "return": [
                "bool",
                "list"
            ],
            "arguments": {
                "recipe": [
                    "Optional[str]",
                    "tuple"
                ],
                "recipe_pie": [
                    "Optional[str]",
                    "tuple"
                ]
            }
        },
        "scheduled_recipe": {
            "name": "scheduled_recipe",
            "location": 201,
            "return": [
                "dict",
                "Iterable[str]",
                "bool",
                "models.User",
                "float",
                "Sequence[str]",
                "int"
            ],
            "arguments": {
                "recipe": [
                    "str",
                    "accounts.models.User",
                    "telegram.User",
                    "megatron.models.PlatformUser",
                    "int",
                    "Callable"
                ],
                "user": [
                    "str",
                    "accounts.models.User",
                    "telegram.User",
                    "megatron.models.PlatformUser",
                    "int",
                    "Callable"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/extensions.py": {
        "PgStatStatements.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "recipeyak-master/backend/core/logging.py": {
        "TestingDisableFilter.filter": {
            "name": "filter",
            "location": 11,
            "return": [
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "bool",
                    "list"
                ]
            }
        },
        "RequestIDFilter.filter": {
            "name": "filter",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "int",
                    "bool",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "CurrentUserFilter.filter": {
            "name": "filter",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "record": []
            }
        }
    },
    "recipeyak-master/backend/core/middleware.py": {
        "total_query_time": {
            "name": "total_query_time",
            "location": 34,
            "return": [
                "int",
                "Tuple[int]",
                "str",
                "bool",
                "tuple"
            ],
            "arguments": {}
        },
        "NoCacheMiddleware.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "get_response": [
                    "dict",
                    "str",
                    "uuid.UUID"
                ]
            }
        },
        "NoCacheMiddleware.__call__": {
            "name": "__call__",
            "location": 26,
            "return": [
                "dict",
                "List[float]",
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "Exception",
                    "str",
                    "Callable"
                ]
            }
        },
        "ServerTimingMiddleware.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "get_response": [
                    "dict",
                    "str",
                    "uuid.UUID"
                ]
            }
        },
        "ServerTimingMiddleware.__call__": {
            "name": "__call__",
            "location": 49,
            "return": [
                "dict",
                "List[float]",
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "Exception",
                    "str",
                    "Callable"
                ]
            }
        },
        "XForwardedForMiddleware.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "get_response": [
                    "dict",
                    "str",
                    "uuid.UUID"
                ]
            }
        },
        "XForwardedForMiddleware.__call__": {
            "name": "__call__",
            "location": 75,
            "return": [
                "str",
                "float",
                "bool",
                "List[float]",
                "Sequence",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "APIDelayMiddleware.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "get_response": [
                    "dict",
                    "str",
                    "uuid.UUID"
                ]
            }
        },
        "APIDelayMiddleware.__call__": {
            "name": "__call__",
            "location": 92,
            "return": [
                "str",
                "float",
                "bool",
                "List[float]",
                "Sequence",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "CurrentRequestMiddleware.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "get_response": [
                    "dict",
                    "str",
                    "uuid.UUID"
                ]
            }
        },
        "CurrentRequestMiddleware.generate_request_id": {
            "name": "generate_request_id",
            "location": 107,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "CurrentRequestMiddleware.__call__": {
            "name": "__call__",
            "location": 110,
            "return": [
                "str",
                "float",
                "bool",
                "List[float]",
                "Sequence",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "HealthCheckMiddleware.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "get_response": [
                    "dict",
                    "str",
                    "uuid.UUID"
                ]
            }
        },
        "HealthCheckMiddleware.__call__": {
            "name": "__call__",
            "location": 137,
            "return": [
                "Dict[str, Any]",
                "Tuple[str]",
                "nornir.core.inventory.Host",
                "float",
                "Callable[[Any], Coroutine[Any, Any, None]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "Dict[str, Any]"
                ]
            }
        },
        "HealthCheckMiddleware.healthz": {
            "name": "healthz",
            "location": 145,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "Dict[str, dict]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool"
                ]
            }
        },
        "HealthCheckMiddleware.readiness": {
            "name": "readiness",
            "location": 152,
            "return": [
                "str",
                "Optional[Dict]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool"
                ]
            }
        },
        "SessionMiddleware.process_request": {
            "name": "process_request",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/patches.py": {
        "patch_django": {
            "name": "patch_django",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "recipeyak-master/backend/core/renderers.py": {
        "fmt_decimal": {
            "name": "fmt_decimal",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "d": [
                    "str",
                    "Tuple[int, int, str]",
                    "memoryview",
                    "Set[str]",
                    "tuple",
                    "bytes",
                    "int"
                ]
            }
        },
        "default": {
            "name": "default",
            "location": 21,
            "return": [
                "int",
                "dict",
                "Union[int, float]",
                "str"
            ],
            "arguments": {
                "o": [
                    "float",
                    "Dict[str, Dict[str, int]]",
                    "int"
                ]
            }
        },
        "JSONRenderer.render": {
            "name": "render",
            "location": 35,
            "return": [
                "BinaryIO",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Optional[str]",
                    "str",
                    "Optional[dict]",
                    "int"
                ],
                "accepted_media_type": [
                    "str",
                    "Iterable[str]",
                    "bool",
                    "List[Sequence[int]]",
                    "Sequence"
                ],
                "renderer_context": [
                    "str",
                    "Iterable[str]",
                    "bool",
                    "List[Sequence[int]]",
                    "Sequence"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/request.py": {},
    "recipeyak-master/backend/core/request_state.py": {},
    "recipeyak-master/backend/core/response.py": {
        "represent_ordereddict": {
            "name": "represent_ordereddict",
            "location": 7,
            "return": [
                "dict"
            ],
            "arguments": {
                "dumper": [
                    "dict",
                    "Optional[Dict]",
                    "T"
                ],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "YamlResponse.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "Dict[str, List[Any]]",
                    "List[Dict[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/serialization.py": {
        "blocker": {
            "name": "blocker",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "warning_blocker": {
            "name": "warning_blocker",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "execute": [
                    "dict",
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ],
                "sql": [
                    "dict",
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ],
                "params": [
                    "dict",
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ],
                "many": [
                    "dict",
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ],
                "context": [
                    "dict",
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "DBBlockerSerializerMixin.to_representation": {
            "name": "to_representation",
            "location": 39,
            "return": [
                "Callable",
                "dict",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str"
                ]
            }
        },
        "DBBlockerSerializerMixin.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "recipeyak-master/backend/core/settings.py": {
        "get_oauth_url": {
            "name": "get_oauth_url",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {
                "env_var": [
                    "str",
                    "logging.Logger",
                    "Sequence[str]"
                ],
                "default": [
                    "str",
                    "logging.Logger",
                    "Sequence[str]"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/test_middleware.py": {
        "test_server_timing_middleware": {
            "name": "test_server_timing_middleware",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_health_check_middleware": {
            "name": "test_health_check_middleware",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "test_server_timing_middleware.get_response": {
            "name": "get_response",
            "location": 12,
            "return": [
                "Tuple[int, str]",
                "Dict[str, Any]",
                "Mapping[str, Any]",
                "dict"
            ],
            "arguments": {
                "request": [
                    "dict",
                    "http.MITMRequest"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/test_models.py": {
        "test_team_force_join": {
            "name": "test_team_force_join",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "List[int]",
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "team": [
                    "str",
                    "Tuple[str, str]"
                ],
                "user": [
                    "bool",
                    "models.characters.ai_base.AI"
                ],
                "user2": [
                    "str",
                    "Tuple[str, str]"
                ],
                "user3": [
                    "Dict[str, Any]"
                ],
                "empty_team": [
                    "bool",
                    "models.characters.ai_base.AI"
                ]
            }
        },
        "test_team_kick_user": {
            "name": "test_team_kick_user",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "str",
                    "List[int]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "team": [],
                "user": [
                    "bool",
                    "str"
                ],
                "user2": [
                    "str",
                    "Tuple[str, str]"
                ]
            }
        },
        "test_team_set_public_private": {
            "name": "test_team_set_public_private",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "str",
                    "List[int]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "team": [
                    "str"
                ],
                "user": [
                    "str",
                    "List[int]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "user2": [
                    "str",
                    "List[int]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_team_is_member": {
            "name": "test_team_is_member",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "str",
                    "List[int]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "team": [
                    "str",
                    "Tuple[str, str]"
                ],
                "user": [
                    "str",
                    "Tuple[str, str]"
                ],
                "user2": [
                    "str",
                    "Tuple[str, str]"
                ]
            }
        },
        "test_team_invite_user": {
            "name": "test_team_invite_user",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "Callable[[], int]",
                    "app.models.user.UserInDB",
                    "ultron8.api.models.user.UserInDB",
                    "bool"
                ],
                "empty_team": [
                    "django.contrib.auth.models.User",
                    "int"
                ],
                "user": [
                    "django.contrib.auth.models.User",
                    "int"
                ]
            }
        },
        "test_user_has_invite": {
            "name": "test_user_has_invite",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "Callable[[], int]",
                    "bool"
                ],
                "empty_team": [],
                "user": []
            }
        },
        "test_recipe_move_to": {
            "name": "test_recipe_move_to",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "app.models.user.UserInDB",
                    "ultron8.api.models.user.UserInDB"
                ],
                "team": [
                    "str",
                    "core.models.Team"
                ],
                "user": [
                    "zerver.models.UserMessage",
                    "asgard.models.accounAccount",
                    "str"
                ],
                "recipe": [
                    "core.models.MyUser"
                ]
            }
        },
        "test_recipe_copy_to": {
            "name": "test_recipe_copy_to",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "app.models.user.UserInDB",
                    "ultron8.api.models.user.UserInDB"
                ],
                "team": [],
                "user": [],
                "recipe": []
            }
        },
        "test_soft_delete": {
            "name": "test_soft_delete",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "model": [
                    "str",
                    "Callable",
                    "lms.lmsdb.models.User",
                    "core.models.Grouping"
                ],
                "recipe": [
                    "core.models.Recipe",
                    "str"
                ]
            }
        },
        "test_soft_delete_relations": {
            "name": "test_soft_delete_relations",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "recipe": [
                    "core.models.Recipe"
                ]
            }
        },
        "test_soft_delete_relations.objects_exist": {
            "name": "objects_exist",
            "location": 137,
            "return": [
                "bool",
                "Optional[int]"
            ],
            "arguments": {}
        }
    },
    "recipeyak-master/backend/core/test_renderers.py": {
        "test_decimal_encoding": {
            "name": "test_decimal_encoding",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "recipeyak-master/backend/core/test_serialization.py": {
        "test_db_blocker_warn_still_calls_db": {
            "name": "test_db_blocker_warn_still_calls_db",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "Callable",
                    "dict",
                    "zerver.models.Realm"
                ],
                "recipe": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_db_blocker_fails_with_proper_settings": {
            "name": "test_db_blocker_fails_with_proper_settings",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "settings": [
                    "str"
                ],
                "recipe": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/test_user_agent.py": {
        "test_user_agent": {
            "name": "test_user_agent",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "agent": [
                    "str"
                ],
                "expected": [
                    "str"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/urls.py": {},
    "recipeyak-master/backend/core/user_agent.py": {
        "get_os": {
            "name": "get_os",
            "location": 78,
            "return": [
                "str",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "user_agent": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_browser": {
            "name": "get_browser",
            "location": 89,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "user_agent": [
                    "str",
                    "int"
                ]
            }
        },
        "get_kind": {
            "name": "get_kind",
            "location": 96,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "user_agent": [
                    "str",
                    "int"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 110,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "user_agent": []
            }
        }
    },
    "recipeyak-master/backend/core/viewsets.py": {},
    "recipeyak-master/backend/core/wsgi.py": {},
    "recipeyak-master/backend/core/__init__.py": {},
    "recipeyak-master/backend/core/auth/permissions.py": {
        "has_recipe_access": {
            "name": "has_recipe_access",
            "location": 80,
            "return": [
                "bool",
                "dict",
                "bytes",
                "int"
            ],
            "arguments": {}
        },
        "DisallowAny.has_permission": {
            "name": "has_permission",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.db.models.Model",
                    "Optional[django.db.models.Model]",
                    "django.http.requesHttpRequest"
                ],
                "view": [
                    "django.http.HttpRequest",
                    "django.db.models.Model",
                    "Optional[django.db.models.Model]",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "DisallowAny.has_object_permission": {
            "name": "has_object_permission",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.db.models.Model",
                    "Optional[django.db.models.Model]",
                    "django.db.models.query.QuerySet",
                    "dict"
                ],
                "view": [
                    "django.http.HttpRequest",
                    "django.db.models.Model",
                    "Optional[django.db.models.Model]",
                    "django.db.models.query.QuerySet",
                    "dict"
                ],
                "obj": [
                    "django.http.HttpRequest",
                    "django.db.models.Model",
                    "Optional[django.db.models.Model]",
                    "django.db.models.query.QuerySet",
                    "dict"
                ]
            }
        },
        "IsTeamMember.has_permission": {
            "name": "has_permission",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "rest_framework.requesRequest",
                    "django.http.HttpRequest",
                    "str"
                ],
                "view": [
                    "django.http.HttpRequest",
                    "Dict[str, Any]"
                ]
            }
        },
        "IsTeamMemberIfPrivate.has_permission": {
            "name": "has_permission",
            "location": 32,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "dict",
                    "rest_framework.requesRequest",
                    "viewer.models.Archive"
                ],
                "view": [
                    "django.http.HttpRequest",
                    "Dict[str, Any]"
                ]
            }
        },
        "IsTeamAdmin.has_permission": {
            "name": "has_permission",
            "location": 39,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "dict",
                    "rest_framework.requesRequest"
                ],
                "view": [
                    "metaswitch_tinder.database.User"
                ]
            }
        },
        "IsTeamAdminOrMembershipOwner.has_object_permission": {
            "name": "has_object_permission",
            "location": 57,
            "return": [
                "str",
                "dict",
                "Iterable[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "django.http.HttpRequest",
                    "Mapping[str, str]",
                    "grouper.models.base.session.Session",
                    "grouper.models.user.User",
                    "Dict[str, Any]"
                ],
                "view": [
                    "django.http.HttpRequest",
                    "django.db.models.Model",
                    "Optional[django.db.models.Model]",
                    "django.db.models.query.QuerySet",
                    "dict"
                ],
                "membership": [
                    "int",
                    "Mapping[str, str]",
                    "django.http.HttpRequest",
                    "grouper.models.base.session.Session",
                    "grouper.models.user.User",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "NonSafeIfMemberOrAdmin.has_permission": {
            "name": "has_permission",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpResponse",
                    "str",
                    "Dict[str, Any]"
                ],
                "view": [
                    "django.http.HttpRequest",
                    "Dict[str, Any]"
                ]
            }
        },
        "HasRecipeAccess.has_object_permission": {
            "name": "has_object_permission",
            "location": 94,
            "return": [
                "int",
                "str",
                "Tuple[str]",
                "List[str]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "core.models.Recipe",
                    "User",
                    "rest_framework.requesRequest",
                    "django.http.HttpRequest",
                    "dict",
                    "viewer.models.Archive"
                ],
                "view": [
                    "django.http.HttpRequest",
                    "django.db.models.Model",
                    "Optional[django.db.models.Model]",
                    "django.db.models.query.QuerySet",
                    "dict"
                ],
                "recipe": [
                    "core.models.Recipe",
                    "User",
                    "rest_framework.requesRequest",
                    "django.http.HttpRequest",
                    "dict",
                    "viewer.models.Archive"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/auth/serializers.py": {
        "LoginSerializer._validate_email": {
            "name": "_validate_email",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "set",
                "bool"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "LoginSerializer._validate_username": {
            "name": "_validate_username",
            "location": 33,
            "return": [
                "bool",
                "set",
                "django.db.migrations.state.StateApps",
                "Mapping",
                "str"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "LoginSerializer._validate_username_email": {
            "name": "_validate_username_email",
            "location": 44,
            "return": [
                "abilian.core.models.subjects.User"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ],
                "email": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "LoginSerializer.validate": {
            "name": "validate",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "PasswordResetSerializer.get_email_options": {
            "name": "get_email_options",
            "location": 128,
            "return": [
                "str",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PasswordResetSerializer.validate_email": {
            "name": "validate_email",
            "location": 132,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "PasswordResetSerializer.save": {
            "name": "save",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PasswordResetConfirmSerializer.custom_validation": {
            "name": "custom_validation",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "PasswordResetConfirmSerializer.validate": {
            "name": "validate",
            "location": 169,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "str",
                    "dict"
                ]
            }
        },
        "PasswordResetConfirmSerializer.save": {
            "name": "save",
            "location": 191,
            "return": [
                "dict",
                "Dict[str, Any]",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PasswordChangeSerializer.__init__": {
            "name": "__init__",
            "location": 202,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PasswordChangeSerializer.validate_old_password": {
            "name": "validate_old_password",
            "location": 218,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "PasswordChangeSerializer.validate": {
            "name": "validate",
            "location": 229,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "str",
                    "Optional[BaseException]",
                    "raiden.utils.Address"
                ]
            }
        },
        "PasswordChangeSerializer.save": {
            "name": "save",
            "location": 238,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "recipeyak-master/backend/core/auth/social_serializers.py": {
        "TwitterLoginSerializer._get_request": {
            "name": "_get_request",
            "location": 14,
            "return": [
                "int",
                "List[Dict[str, Any]]",
                "Optional[Tuple[int, int]]",
                "models.characters.character_base.Character"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwitterLoginSerializer.get_social_login": {
            "name": "get_social_login",
            "location": 20,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "adapter": [
                    "bool",
                    "int",
                    "medtagger.database.models.User",
                    "bytes"
                ],
                "app": [
                    "bool",
                    "int",
                    "medtagger.database.models.User",
                    "bytes"
                ],
                "token": [
                    "jumeaux.models.Request",
                    "apistar.http.RequestData",
                    "List[str]"
                ],
                "response": [
                    "bool",
                    "int",
                    "medtagger.database.models.User",
                    "bytes"
                ]
            }
        },
        "TwitterLoginSerializer.validate": {
            "name": "validate",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "int"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/auth/test_authentication.py": {
        "test_signup": {
            "name": "test_signup",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_login": {
            "name": "test_login",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_logout": {
            "name": "test_logout",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "client": []
            }
        },
        "test_login_in_two_places_and_logout_from_one": {
            "name": "test_login_in_two_places_and_logout_from_one",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "str",
                    "rest_framework.tesAPIClient"
                ],
                "client_b": [
                    "str",
                    "deeplearning.ml4pl.models.log_database.Database.SessionType",
                    "int",
                    "django.http.HttpRequest"
                ]
            }
        },
        "test_signup_case_insensitive": {
            "name": "test_signup_case_insensitive",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "core.models.Recipe"
                ]
            }
        },
        "test_signup_user_has_email": {
            "name": "test_signup_user_has_email",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient",
                    "core.models.Recipe"
                ],
                "user": [
                    "rest_framework.tesAPIClient",
                    "core.models.Recipe"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/auth/urls.py": {},
    "recipeyak-master/backend/core/auth/views.py": {
        "LoginView.dispatch": {
            "name": "dispatch",
            "location": 56,
            "return": [
                "zerver.models.Realm",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoginView.post": {
            "name": "post",
            "location": 59,
            "return": [
                "django.http.HttpResponse",
                "List[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "LogoutView.post": {
            "name": "post",
            "location": 85,
            "return": [
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.requesHttpRequest",
                    "django.http.HttpRequest",
                    "str"
                ]
            }
        },
        "PasswordResetView.post": {
            "name": "post",
            "location": 105,
            "return": [
                "dict",
                "cmk.utils.type_defs.UserId",
                "bool",
                "List[str]",
                "Dict[str, Any]",
                "Exception",
                "tartare.core.models.Job"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "PasswordResetConfirmView.dispatch": {
            "name": "dispatch",
            "location": 137,
            "return": [
                "zerver.models.Realm",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PasswordResetConfirmView.post": {
            "name": "post",
            "location": 140,
            "return": [
                "dict",
                "List[str]",
                "bool",
                "cmk.utils.type_defs.UserId",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "PasswordChangeView.dispatch": {
            "name": "dispatch",
            "location": 164,
            "return": [
                "zerver.models.Realm",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PasswordChangeView.post": {
            "name": "post",
            "location": 167,
            "return": [
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "SocialLoginView.process_login": {
            "name": "process_login",
            "location": 201,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SocialAccountViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 254,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocialAccountViewSet.list": {
            "name": "list",
            "location": 257,
            "return": [
                "str",
                "cmk.utils.type_defs.UserId",
                "lms.lmsdb.models.User",
                "Optional[int]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest",
                    "Dict[str, str]",
                    "django.http.requesHttpRequest",
                    "dict"
                ]
            }
        },
        "SocialAccountViewSet.disconnect": {
            "name": "disconnect",
            "location": 264,
            "return": [
                "bool",
                "cmk.utils.type_defs.UserId",
                "int",
                "Optional[int]",
                "dict",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest"
                ],
                "pk": [
                    "django.http.HttpRequest",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/auth/__init__.py": {},
    "recipeyak-master/backend/core/auth/registration/serializers.py": {
        "SocialLoginSerializer._get_request": {
            "name": "_get_request",
            "location": 34,
            "return": [
                "int",
                "raiden.utils.Address",
                "List[Dict[str, Any]]",
                "Optional[Tuple[int, int]]",
                "models.characters.character_base.Character"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocialLoginSerializer.get_social_login": {
            "name": "get_social_login",
            "location": 41,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "adapter": [
                    "bool",
                    "int",
                    "medtagger.database.models.User",
                    "bytes"
                ],
                "app": [
                    "bool",
                    "int",
                    "medtagger.database.models.User",
                    "bytes"
                ],
                "token": [
                    "jumeaux.models.Request",
                    "trezor.utils.Writer",
                    "golem_messages.message.base.Message",
                    "apistar.http.RequestData",
                    "List[str]"
                ],
                "response": [
                    "bool",
                    "int",
                    "medtagger.database.models.User",
                    "bytes"
                ]
            }
        },
        "SocialLoginSerializer.validate": {
            "name": "validate",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "attrs": [
                    "Dict[str, Any]",
                    "dict",
                    "cmk.base.events.EventContext"
                ]
            }
        },
        "RegisterSerializer.validate_username": {
            "name": "validate_username",
            "location": 154,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "RegisterSerializer.validate_email": {
            "name": "validate_email",
            "location": 157,
            "return": [
                "str",
                "Union[str, int]"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "RegisterSerializer.validate_password1": {
            "name": "validate_password1",
            "location": 177,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "bytes"
                ]
            }
        },
        "RegisterSerializer.validate": {
            "name": "validate",
            "location": 180,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "bytes",
                    "list",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "RegisterSerializer.custom_signup": {
            "name": "custom_signup",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile",
                    "List[Dict[str, Any]]"
                ],
                "user": [
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "RegisterSerializer.get_cleaned_data": {
            "name": "get_cleaned_data",
            "location": 188,
            "return": [
                "bool",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegisterSerializer.save": {
            "name": "save",
            "location": 195,
            "return": [
                "set",
                "bool",
                "django.db.migrations.state.StateApps",
                "zam_repondeur.models.Lecture"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "requests.HeaderRequest",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "SocialConnectSerializer.get_social_login": {
            "name": "get_social_login",
            "location": 220,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "recipeyak-master/backend/core/auth/registration/urls.py": {},
    "recipeyak-master/backend/core/auth/registration/views.py": {
        "RegisterView.dispatch": {
            "name": "dispatch",
            "location": 40,
            "return": [
                "zerver.models.Realm",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegisterView.create": {
            "name": "create",
            "location": 43,
            "return": [
                "str",
                "List[str]",
                "axion.utils.types.AnyCallable",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "VerifyEmailView.get_serializer": {
            "name": "get_serializer",
            "location": 71,
            "return": [
                "str",
                "Optional[str]",
                "bytes",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerifyEmailView.post": {
            "name": "post",
            "location": 74,
            "return": [
                "dict",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "rest_framework.requesRequest",
                    "django.http.HttpRequest"
                ]
            }
        },
        "SocialAccountListView.get_queryset": {
            "name": "get_queryset",
            "location": 92,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocialAccountDisconnectView.get_queryset": {
            "name": "get_queryset",
            "location": 105,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SocialAccountDisconnectView.post": {
            "name": "post",
            "location": 108,
            "return": [
                "axion.utils.types.AnyCallable",
                "bool",
                "Dict[str, Any]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ],
                "provider": [
                    "int",
                    "str",
                    "zam_repondeur.models.Team",
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/auth/registration/__init__.py": {},
    "recipeyak-master/backend/core/cumin/cat.py": {
        "create_trie": {
            "name": "create_trie",
            "location": 443,
            "return": [],
            "arguments": {
                "mapping": []
            }
        },
        "search": {
            "name": "search",
            "location": 464,
            "return": [],
            "arguments": {
                "item": [],
                "trie": []
            }
        },
        "category": {
            "name": "category",
            "location": 479,
            "return": [],
            "arguments": {
                "ingredient": []
            }
        }
    },
    "recipeyak-master/backend/core/cumin/test_cat.py": {
        "test_categorize_ingredients": {
            "name": "test_categorize_ingredients",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_categorize_ingredient_test_cases": {
            "name": "test_categorize_ingredient_test_cases",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "snapshot": [
                    "pathlib.Path"
                ]
            }
        },
        "test_trie": {
            "name": "test_trie",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "recipeyak-master/backend/core/cumin/test_parsing.py": {
        "test_parsing_quantities": {
            "name": "test_parsing_quantities",
            "location": 57,
            "return": [],
            "arguments": {
                "quantity": [],
                "expected": []
            }
        },
        "test_fraction_to_decimal": {
            "name": "test_fraction_to_decimal",
            "location": 65,
            "return": [],
            "arguments": {
                "fraction": [],
                "expected": []
            }
        },
        "test_quantity_addition": {
            "name": "test_quantity_addition",
            "location": 139,
            "return": [],
            "arguments": {
                "quantities": [],
                "expected": []
            }
        },
        "test_adding_quantities_with_diff_unknown_units": {
            "name": "test_adding_quantities_with_diff_unknown_units",
            "location": 146,
            "return": [],
            "arguments": {}
        },
        "test_adding_incompatible_units": {
            "name": "test_adding_incompatible_units",
            "location": 158,
            "return": [],
            "arguments": {}
        },
        "test_combining_ingredients": {
            "name": "test_combining_ingredients",
            "location": 207,
            "return": [],
            "arguments": {
                "ingredients": [],
                "expected": []
            }
        },
        "test_combining_ingredients_to_json": {
            "name": "test_combining_ingredients_to_json",
            "location": 213,
            "return": [],
            "arguments": {}
        }
    },
    "recipeyak-master/backend/core/cumin/__init__.py": {
        "unicode_fractions_to_ascii": {
            "name": "unicode_fractions_to_ascii",
            "location": 193,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "get_unit": {
            "name": "get_unit",
            "location": 209,
            "return": [],
            "arguments": {
                "val": []
            }
        },
        "fraction_to_decimal": {
            "name": "fraction_to_decimal",
            "location": 243,
            "return": [],
            "arguments": {
                "val": []
            }
        },
        "max_quantity": {
            "name": "max_quantity",
            "location": 257,
            "return": [],
            "arguments": {
                "quantity": []
            }
        },
        "parse_quantity": {
            "name": "parse_quantity",
            "location": 266,
            "return": [],
            "arguments": {
                "val": []
            }
        },
        "_parse_quantity": {
            "name": "_parse_quantity",
            "location": 280,
            "return": [],
            "arguments": {
                "val": []
            }
        },
        "normalize_ingredient_name": {
            "name": "normalize_ingredient_name",
            "location": 315,
            "return": [],
            "arguments": {}
        },
        "combine_ingredients": {
            "name": "combine_ingredients",
            "location": 328,
            "return": [],
            "arguments": {
                "ingredients": []
            }
        },
        "Unit.base_unit": {
            "name": "base_unit",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Unit.__lt__": {
            "name": "__lt__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Quantity.__add__": {
            "name": "__add__",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Quantity.__str__": {
            "name": "__str__",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Quantity.to_base_unit": {
            "name": "to_base_unit",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "recipeyak-master/backend/core/export/serializers.py": {},
    "recipeyak-master/backend/core/export/test_export.py": {
        "c": {
            "name": "c",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "fields_in": {
            "name": "fields_in",
            "location": 18,
            "return": [],
            "arguments": {
                "data": [],
                "fields": []
            }
        },
        "test_fields_in": {
            "name": "test_fields_in",
            "location": 42,
            "return": [],
            "arguments": {
                "dict_": [],
                "expected": []
            }
        },
        "test_bulk_export_json": {
            "name": "test_bulk_export_json",
            "location": 46,
            "return": [],
            "arguments": {
                "c": [],
                "user": [],
                "user2": [],
                "recipe": [],
                "recipe2": []
            }
        },
        "test_export_fields": {
            "name": "test_export_fields",
            "location": 62,
            "return": [],
            "arguments": {
                "c": [],
                "user": [],
                "user2": [],
                "recipe": [],
                "recipe2": []
            }
        },
        "test_bulk_export_yaml": {
            "name": "test_bulk_export_yaml",
            "location": 77,
            "return": [],
            "arguments": {
                "c": [],
                "filetype": [],
                "user": [],
                "user2": [],
                "recipe": [],
                "recipe2": []
            }
        },
        "test_single_export_json": {
            "name": "test_single_export_json",
            "location": 104,
            "return": [],
            "arguments": {
                "c": [],
                "user": [],
                "recipe": []
            }
        },
        "test_single_export_yaml": {
            "name": "test_single_export_yaml",
            "location": 115,
            "return": [],
            "arguments": {
                "c": [],
                "filetype": [],
                "user": [],
                "recipe": []
            }
        },
        "test_unicode_issues": {
            "name": "test_unicode_issues",
            "location": 130,
            "return": [],
            "arguments": {
                "c": [],
                "user": [],
                "recipe": []
            }
        }
    },
    "recipeyak-master/backend/core/export/urls.py": {},
    "recipeyak-master/backend/core/export/views.py": {
        "export_recipes": {
            "name": "export_recipes",
            "location": 17,
            "return": [
                "Dict[str, Any]",
                "str",
                "Optional[str]",
                "Dict[str, dict]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ],
                "filetype": [
                    "bool"
                ],
                "pk": [
                    "Optional[int]",
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/export/__init__.py": {},
    "recipeyak-master/backend/core/ical/test_ical_views.py": {
        "test_ical_view_with_invalid_id": {
            "name": "test_ical_view_with_invalid_id",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient",
                    "str",
                    "Dict[str, str]",
                    "core.models.Recipe"
                ],
                "user": [],
                "team": [
                    "rest_framework.tesAPIClient"
                ]
            }
        },
        "omit_entry_ids": {
            "name": "omit_entry_ids",
            "location": 27,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "content": [
                    "bytes",
                    "str"
                ]
            }
        },
        "test_ical_ids_consistent": {
            "name": "test_ical_ids_consistent",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient"
                ],
                "user": [
                    "app.models.user.UserInDB",
                    "ultron8.api.models.user.UserInDB"
                ],
                "recipe": [
                    "models.Station",
                    "bob_emploi.frontend.api.user_pb2.User",
                    "Callable",
                    "server.models.User",
                    "raiden.utils.Address"
                ],
                "team": [
                    "models.Station",
                    "bob_emploi.frontend.api.user_pb2.User",
                    "Callable",
                    "server.models.User",
                    "raiden.utils.Address"
                ]
            }
        },
        "test_ical_view_with_correct_id": {
            "name": "test_ical_view_with_correct_id",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient",
                    "core.models.Recipe"
                ],
                "user": [],
                "recipe": [
                    "bob_emploi.frontend.api.user_pb2.User",
                    "models.Station",
                    "Callable",
                    "server.models.bike.Bike"
                ],
                "team": [
                    "bob_emploi.frontend.api.user_pb2.User",
                    "models.Station",
                    "Callable",
                    "server.models.bike.Bike"
                ]
            }
        },
        "test_get_ical_view_works_with_accept_encoding": {
            "name": "test_get_ical_view_works_with_accept_encoding",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient",
                    "core.models.Recipe"
                ],
                "user": [
                    "app.models.user.UserInDB",
                    "ultron8.api.models.user.UserInDB"
                ],
                "recipe": [
                    "app.models.user.UserInDB",
                    "ultron8.api.models.user.UserInDB"
                ],
                "team": [
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "test_get_ical_view_with_user_specific_id": {
            "name": "test_get_ical_view_with_user_specific_id",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient",
                    "Dict[str, str]"
                ],
                "user": [
                    "zerver.models.UserProfile",
                    "set",
                    "asgard.models.job.ScheduledJob",
                    "asgard.models.user.User",
                    "asgard.models.accounAccount",
                    "core.models.Recipe",
                    "Optional[str]"
                ],
                "recipe": [
                    "app.db_models.user.User",
                    "ultron8.api.db_models.user.User",
                    "app.models.user.UserInDB",
                    "ultron8.api.models.user.UserInDB"
                ],
                "team": [
                    "zerver.models.UserProfile",
                    "asgard.models.job.ScheduledJob",
                    "asgard.models.user.User",
                    "asgard.models.accounAccount",
                    "core.models.Recipe"
                ]
            }
        },
        "test_get_ical_view_with_schedule_endpoint": {
            "name": "test_get_ical_view_with_schedule_endpoint",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient",
                    "Dict[str, str]"
                ],
                "user": [
                    "float"
                ],
                "recipe": [
                    "app.models.user.UserInDB",
                    "ultron8.api.models.user.UserInDB"
                ],
                "team": []
            }
        },
        "test_get_ical_view_404_when_disabled": {
            "name": "test_get_ical_view_404_when_disabled",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient"
                ],
                "user": [
                    "zerver.models.UserProfile",
                    "asgard.models.job.ScheduledJob",
                    "asgard.models.user.User",
                    "asgard.models.accounAccount"
                ],
                "recipe": [
                    "app.models.user.UserInDB",
                    "ultron8.api.models.user.UserInDB"
                ],
                "team": [
                    "asgard.models.job.ScheduledJob",
                    "asgard.models.user.User",
                    "asgard.models.accounAccount",
                    "zerver.models.UserProfile"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/ical/utils.py": {
        "create_event": {
            "name": "create_event",
            "location": 7,
            "return": [
                "str",
                "dict",
                "int",
                "List[str]"
            ],
            "arguments": {}
        },
        "create_calendar": {
            "name": "create_calendar",
            "location": 32,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "to_ical_time": {
            "name": "to_ical_time",
            "location": 45,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "date": [
                    "str",
                    "datetime.datetime",
                    "Optional[str]",
                    "bytes"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/ical/views.py": {
        "get_ical_view": {
            "name": "get_ical_view",
            "location": 16,
            "return": [
                "int",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "str"
                ],
                "team_id": [
                    "int",
                    "zerver.models.UserProfile"
                ],
                "ical_id": [
                    "int",
                    "zerver.models.UserProfile"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/ical/__init__.py": {},
    "recipeyak-master/backend/core/migrations/0001_initial.py": {},
    "recipeyak-master/backend/core/migrations/0002_remove_myuser_is_superuser.py": {},
    "recipeyak-master/backend/core/migrations/0003_auto_20170806_1357.py": {},
    "recipeyak-master/backend/core/migrations/0004_auto_20170806_1408.py": {},
    "recipeyak-master/backend/core/migrations/0005_auto_20170806_1450.py": {},
    "recipeyak-master/backend/core/migrations/0006_auto_20170808_0017.py": {},
    "recipeyak-master/backend/core/migrations/0007_auto_20170917_0333.py": {},
    "recipeyak-master/backend/core/migrations/0008_auto_20171001_0026.py": {},
    "recipeyak-master/backend/core/migrations/0009_auto_20171001_0602.py": {},
    "recipeyak-master/backend/core/migrations/0010_auto_20171001_2119.py": {},
    "recipeyak-master/backend/core/migrations/0011_auto_20171001_2129.py": {},
    "recipeyak-master/backend/core/migrations/0012_auto_20171019_0350.py": {},
    "recipeyak-master/backend/core/migrations/0013_ingredient_name.py": {},
    "recipeyak-master/backend/core/migrations/0014_auto_20171116_1920.py": {},
    "recipeyak-master/backend/core/migrations/0015_auto_20171116_1924.py": {},
    "recipeyak-master/backend/core/migrations/0016_auto_20171130_0632.py": {},
    "recipeyak-master/backend/core/migrations/0016_recipe_views.py": {},
    "recipeyak-master/backend/core/migrations/0017_recipe_servings.py": {},
    "recipeyak-master/backend/core/migrations/0018_merge_20171202_0538.py": {},
    "recipeyak-master/backend/core/migrations/0019_auto_20171202_1827.py": {},
    "recipeyak-master/backend/core/migrations/0020_recipe_cart_additions.py": {},
    "recipeyak-master/backend/core/migrations/0021_cartitem_total_cart_additions.py": {},
    "recipeyak-master/backend/core/migrations/0022_remove_recipe_cart_additions.py": {},
    "recipeyak-master/backend/core/migrations/0023_team.py": {},
    "recipeyak-master/backend/core/migrations/0024_team_name.py": {},
    "recipeyak-master/backend/core/migrations/0025_auto_20180301_0310.py": {},
    "recipeyak-master/backend/core/migrations/0026_auto_20180301_0442.py": {},
    "recipeyak-master/backend/core/migrations/0027_myuser_membership.py": {},
    "recipeyak-master/backend/core/migrations/0028_auto_20180301_0635.py": {},
    "recipeyak-master/backend/core/migrations/0029_invite.py": {},
    "recipeyak-master/backend/core/migrations/0030_auto_20180301_2201.py": {},
    "recipeyak-master/backend/core/migrations/0031_auto_20180301_2300.py": {},
    "recipeyak-master/backend/core/migrations/0032_auto_20180302_0221.py": {},
    "recipeyak-master/backend/core/migrations/0033_membership_is_active.py": {},
    "recipeyak-master/backend/core/migrations/0034_auto_20180303_0818.py": {},
    "recipeyak-master/backend/core/migrations/0035_team_is_public.py": {},
    "recipeyak-master/backend/core/migrations/0036_auto_20180304_0002.py": {},
    "recipeyak-master/backend/core/migrations/0037_auto_20180304_0138.py": {},
    "recipeyak-master/backend/core/migrations/0038_auto_20180307_0530.py": {
        "copy_user_to_generic_forwards": {
            "name": "copy_user_to_generic_forwards",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "apps": [
                    "bool",
                    "int",
                    "models.Credentials"
                ],
                "schema_editor": [
                    "dict"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/migrations/0039_auto_20180308_0708.py": {},
    "recipeyak-master/backend/core/migrations/0040_cartitem.py": {},
    "recipeyak-master/backend/core/migrations/0041_auto_20180308_2320.py": {},
    "recipeyak-master/backend/core/migrations/0042_invite_creator.py": {},
    "recipeyak-master/backend/core/migrations/0043_auto_20180324_0020.py": {
        "add_creator_to_invite": {
            "name": "add_creator_to_invite",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "Optional[str]",
                    "dict",
                    "bool",
                    "str"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "List[str]",
                    "bool",
                    "Type"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/migrations/0044_auto_20180324_0041.py": {},
    "recipeyak-master/backend/core/migrations/0045_invite_status.py": {},
    "recipeyak-master/backend/core/migrations/0046_auto_20180330_0057.py": {},
    "recipeyak-master/backend/core/migrations/0047_recipe_deleted_at.py": {},
    "recipeyak-master/backend/core/migrations/0048_auto_20180502_1554.py": {},
    "recipeyak-master/backend/core/migrations/0048_auto_20180510_2050.py": {
        "set_position": {
            "name": "set_position",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "apps": [
                    "str",
                    "dict",
                    "gardnr.models.Grow",
                    "Dict[str, Set[str]]",
                    "Sequence[services.seating.models.seaSeat]"
                ],
                "schema_editor": [
                    "str",
                    "Protocol"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/migrations/0049_auto_20180505_0104.py": {},
    "recipeyak-master/backend/core/migrations/0049_remove_recipe_deleted_at.py": {},
    "recipeyak-master/backend/core/migrations/0050_remove_recipe_deleted_at.py": {},
    "recipeyak-master/backend/core/migrations/0051_merge_20180511_1955.py": {},
    "recipeyak-master/backend/core/migrations/0052_auto_20180512_0011.py": {},
    "recipeyak-master/backend/core/migrations/0053_auto_20180513_0052.py": {
        "set_position": {
            "name": "set_position",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "apps": [
                    "str",
                    "dict",
                    "gardnr.models.Grow",
                    "Dict[str, Set[str]]",
                    "Sequence[services.seating.models.seaSeat]"
                ],
                "schema_editor": [
                    "str",
                    "Protocol"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/migrations/0054_auto_20180514_1925.py": {},
    "recipeyak-master/backend/core/migrations/0055_ingredient_optional.py": {},
    "recipeyak-master/backend/core/migrations/0056_auto_20180616_1612.py": {},
    "recipeyak-master/backend/core/migrations/0057_scheduledrecipe_team.py": {},
    "recipeyak-master/backend/core/migrations/0058_auto_20180623_2309.py": {},
    "recipeyak-master/backend/core/migrations/0059_auto_20180624_1823.py": {},
    "recipeyak-master/backend/core/migrations/0060_auto_20180624_1825.py": {},
    "recipeyak-master/backend/core/migrations/0061_auto_20180630_0131.py": {},
    "recipeyak-master/backend/core/migrations/0062_auto_20181223_0449.py": {},
    "recipeyak-master/backend/core/migrations/0063_auto_20181223_0614.py": {},
    "recipeyak-master/backend/core/migrations/0064_auto_20190102_0514.py": {},
    "recipeyak-master/backend/core/migrations/0065_auto_20190105_1652.py": {},
    "recipeyak-master/backend/core/migrations/0066_auto_20190105_1701.py": {},
    "recipeyak-master/backend/core/migrations/0067_auto_20190222_2359.py": {},
    "recipeyak-master/backend/core/migrations/0068_auto_20190309_2251.py": {},
    "recipeyak-master/backend/core/migrations/0069_auto_20190730_0312.py": {},
    "recipeyak-master/backend/core/migrations/0070_auto_20191022_0238.py": {},
    "recipeyak-master/backend/core/migrations/0071_auto_20191101_0111.py": {},
    "recipeyak-master/backend/core/migrations/0071_note.py": {},
    "recipeyak-master/backend/core/migrations/0072_merge_20191116_2029.py": {},
    "recipeyak-master/backend/core/migrations/0073_recipechange.py": {},
    "recipeyak-master/backend/core/migrations/0074_shoppinglist.py": {},
    "recipeyak-master/backend/core/migrations/0075_auto_20200227_0349.py": {},
    "recipeyak-master/backend/core/migrations/0076_team_ical_id.py": {
        "forwards_func": {
            "name": "forwards_func",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "int",
                    "bool",
                    "str"
                ],
                "schema_editor": []
            }
        }
    },
    "recipeyak-master/backend/core/migrations/0077_auto_20200716_0345.py": {},
    "recipeyak-master/backend/core/migrations/0078_auto_20200801_1806.py": {},
    "recipeyak-master/backend/core/migrations/0079_auto_20200801_2251.py": {},
    "recipeyak-master/backend/core/migrations/0080_auto_20200809_1840.py": {
        "forwards_func": {
            "name": "forwards_func",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "int",
                    "bool",
                    "str"
                ],
                "schema_editor": [
                    "pymatgen.core.structure.Structure"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/migrations/0081_auto_20200814_1706.py": {},
    "recipeyak-master/backend/core/migrations/0082_recipe_archived_at.py": {},
    "recipeyak-master/backend/core/migrations/0083_auto_20201126_2226.py": {},
    "recipeyak-master/backend/core/migrations/0083_auto_20201206_2146.py": {},
    "recipeyak-master/backend/core/migrations/0084_auto_20201126_2226.py": {},
    "recipeyak-master/backend/core/migrations/0085_merge_20201206_2157.py": {},
    "recipeyak-master/backend/core/migrations/0086_recipechange_recipe.py": {},
    "recipeyak-master/backend/core/migrations/0087_recipe_tags.py": {},
    "recipeyak-master/backend/core/migrations/0088_auto_20211108_0327.py": {},
    "recipeyak-master/backend/core/migrations/0089_backfill_timeline.py": {
        "backfill": {
            "name": "backfill",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "apps": [
                    "str",
                    "django.db.migrations.state.StateApps",
                    "float",
                    "List[int]",
                    "Optional[int]"
                ],
                "schema_editor": [
                    "dict"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/migrations/0090_auto_20211118_0304.py": {},
    "recipeyak-master/backend/core/migrations/0091_alter_recipe_tags.py": {},
    "recipeyak-master/backend/core/migrations/__init__.py": {},
    "recipeyak-master/backend/core/models/base.py": {},
    "recipeyak-master/backend/core/models/ingredient.py": {
        "Ingredient.__str__": {
            "name": "__str__",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ingredient.__repr__": {
            "name": "__repr__",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "recipeyak-master/backend/core/models/invite.py": {
        "InviteManager.create_invite": {
            "name": "create_invite",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "email": [],
                "team": [],
                "level": [],
                "creator": []
            }
        },
        "Invite.__str__": {
            "name": "__str__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Invite.user": {
            "name": "user",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Invite.active": {
            "name": "active",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Invite.team": {
            "name": "team",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Invite.accept": {
            "name": "accept",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Invite.decline": {
            "name": "decline",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "recipeyak-master/backend/core/models/membership.py": {
        "get_random_ical_id": {
            "name": "get_random_ical_id",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "Membership.set_active": {
            "name": "set_active",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Membership.save": {
            "name": "save",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Membership.delete": {
            "name": "delete",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Membership.__str__": {
            "name": "__str__",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "recipeyak-master/backend/core/models/note.py": {
        "Note.__str__": {
            "name": "__str__",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "recipeyak-master/backend/core/models/recipe.py": {
        "Recipe.move_to": {
            "name": "move_to",
            "location": 74,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "cmk.utils.type_defs.HostAddress",
                "str"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "Callable",
                    "arxiv.users.domain.User",
                    "Optional[str]"
                ]
            }
        },
        "Recipe.copy_to": {
            "name": "copy_to",
            "location": 86,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recipe.duplicate": {
            "name": "duplicate",
            "location": 92,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recipe.schedule": {
            "name": "schedule",
            "location": 128,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recipe.ingredients": {
            "name": "ingredients",
            "location": 141,
            "return": [
                "bool",
                "Callable[..., None]",
                "recidiviz.utils.regions.Region",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recipe.ingredient_set": {
            "name": "ingredient_set",
            "location": 147,
            "return": [
                "str",
                "bool",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recipe.steps": {
            "name": "steps",
            "location": 151,
            "return": [
                "Dict[str, int]",
                "str",
                "int",
                "magic.models.Deck",
                "multinedb.models.workspace.Workspace",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recipe.scheduledrecipe_set": {
            "name": "scheduledrecipe_set",
            "location": 157,
            "return": [
                "str",
                "Dict[Optional[str], Set[abilian.services.security.models.Role]]",
                "abilian.core.models.subjects.Principal",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recipe.step_set": {
            "name": "step_set",
            "location": 161,
            "return": [
                "str",
                "bool",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recipe.section_set": {
            "name": "section_set",
            "location": 165,
            "return": [
                "str",
                "Dict[Optional[str], Set[abilian.services.security.models.Role]]",
                "abilian.core.models.subjects.Principal",
                "recidiviz.utils.regions.Region",
                "bool",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recipe.get_last_scheduled": {
            "name": "get_last_scheduled",
            "location": 168,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recipe.__str__": {
            "name": "__str__",
            "location": 175,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Recipe.save": {
            "name": "save",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "recipeyak-master/backend/core/models/recipe_change.py": {},
    "recipeyak-master/backend/core/models/scheduled_recipe.py": {
        "ScheduledRecipeManager.create_scheduled": {
            "name": "create_scheduled",
            "location": 18,
            "return": [
                "Callable",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "recipe": [
                    "str",
                    "List[str]",
                    "datetime.date",
                    "Optional[str]",
                    "Callable"
                ],
                "on": [
                    "str",
                    "List[str]",
                    "datetime.date",
                    "Optional[str]",
                    "Callable"
                ],
                "team": [
                    "str",
                    "List[str]",
                    "datetime.date",
                    "Optional[str]",
                    "Callable"
                ],
                "count": [
                    "int",
                    "str"
                ],
                "user": [
                    "str",
                    "List[str]",
                    "datetime.date",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "ScheduledRecipe.__str__": {
            "name": "__str__",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "recipeyak-master/backend/core/models/section.py": {
        "Section.__repr__": {
            "name": "__repr__",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "recipeyak-master/backend/core/models/shopping_list.py": {},
    "recipeyak-master/backend/core/models/step.py": {
        "Step.__str__": {
            "name": "__str__",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "recipeyak-master/backend/core/models/team.py": {
        "Team.__str__": {
            "name": "__str__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Team.force_join": {
            "name": "force_join",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "level": []
            }
        },
        "Team.force_join_admin": {
            "name": "force_join_admin",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Team.invite_user": {
            "name": "invite_user",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "user": [],
                "creator": [],
                "level": []
            }
        },
        "Team.kick_user": {
            "name": "kick_user",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Team.set_public": {
            "name": "set_public",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Team.set_private": {
            "name": "set_private",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Team.admins": {
            "name": "admins",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Team.is_member": {
            "name": "is_member",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Team.is_contributor": {
            "name": "is_contributor",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Team.is_admin": {
            "name": "is_admin",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Team.invite_exists": {
            "name": "invite_exists",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "email": []
            }
        },
        "Team.membership_set": {
            "name": "membership_set",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Team.scheduled_recipes": {
            "name": "scheduled_recipes",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "recipeyak-master/backend/core/models/timeline_event.py": {},
    "recipeyak-master/backend/core/models/user.py": {
        "get_avatar_url": {
            "name": "get_avatar_url",
            "location": 52,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]",
                "dict"
            ],
            "arguments": {
                "email": [
                    "str"
                ]
            }
        },
        "UserManager.create_user": {
            "name": "create_user",
            "location": 27,
            "return": [
                "zam_repondeur.models.Lecture",
                "core.models.UserPreferences",
                "set",
                "int",
                "bool",
                "django.db.models.QuerySet"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str",
                    "Optional[str]",
                    "Tuple[type]"
                ],
                "password": [
                    "str",
                    "Optional[str]",
                    "Optional[Tuple[float, float, float]]",
                    "logging.Formatter"
                ]
            }
        },
        "UserManager.create_superuser": {
            "name": "create_superuser",
            "location": 41,
            "return": [
                "core.models.User",
                "lms.lmsdb.models.User",
                "lms.lmsdb.models.Solution",
                "zam_repondeur.models.Lecture",
                "aiolambda.Maybe[auth.user.User]"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str",
                    "Optional[str]"
                ],
                "password": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "User.get_full_name": {
            "name": "get_full_name",
            "location": 107,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_short_name": {
            "name": "get_short_name",
            "location": 110,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.has_perm": {
            "name": "has_perm",
            "location": 114,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "perm": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "obj": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "User.has_module_perms": {
            "name": "has_module_perms",
            "location": 120,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "app_label": [
                    "str",
                    "bool",
                    "List[Dict[str, Any]]",
                    "Callable"
                ]
            }
        },
        "User.has_invite": {
            "name": "has_invite",
            "location": 125,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "team": [
                    "str",
                    "zerver.models.Realm",
                    "List[str]",
                    "int"
                ]
            }
        },
        "User.has_team": {
            "name": "has_team",
            "location": 135,
            "return": [
                "bool",
                "str",
                "float",
                "Optional[str]",
                "List[str]",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.is_staff": {
            "name": "is_staff",
            "location": 140,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.avatar_url": {
            "name": "avatar_url",
            "location": 144,
            "return": [
                "str",
                "IO",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.scheduled_recipes": {
            "name": "scheduled_recipes",
            "location": 148,
            "return": [
                "int",
                "str",
                "Optional[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.membership_set": {
            "name": "membership_set",
            "location": 153,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.session_set": {
            "name": "session_set",
            "location": 157,
            "return": [
                "str",
                "games.models.Game",
                "Optional[str]",
                "djmoney.contrib.exchange.models.Rate",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.__str__": {
            "name": "__str__",
            "location": 160,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "recipeyak-master/backend/core/models/__init__.py": {
        "user_active_team_ids": {
            "name": "user_active_team_ids",
            "location": 18,
            "return": [],
            "arguments": {
                "user": [
                    "zerver.models.UserProfile",
                    "core.models.Recipe",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "models.UserAuth",
                    "asgard.models.job.ScheduledJob",
                    "asgard.models.user.User",
                    "asgard.models.accounAccount"
                ]
            }
        },
        "user_and_team_recipes": {
            "name": "user_and_team_recipes",
            "location": 22,
            "return": [
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "user": [
                    "core.models.my_user.MyUser",
                    "zerver.models.UserProfile",
                    "django.contrib.auth.models.User",
                    "List[zerver.models.UserProfile]",
                    "zerver.models.Stream",
                    "zerver.models.Recipient"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/recipes/serializers.py": {
        "OwnerRelatedField.to_representation": {
            "name": "to_representation",
            "location": 26,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T",
                    "float",
                    "Optional['ModelOrDc']",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "OwnerRelatedField.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "IngredientSerializer.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "StepSerializer.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NoteSerializer.get_type": {
            "name": "get_type",
            "location": 94,
            "return": [
                "str",
                "int",
                "float",
                "db.models.Article",
                "bool",
                "List[db.models.Name]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str"
                ]
            }
        },
        "NoteSerializer.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RecipeSerializer.get_timelineItems": {
            "name": "get_timelineItems",
            "location": 142,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "list",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "RecipeSerializer.__init__": {
            "name": "__init__",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RecipeSerializer.validate_team": {
            "name": "validate_team",
            "location": 199,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[Any]",
                    "Optional[Union[str, Any]]",
                    "Optional[object]",
                    "Optional[str]",
                    "bytes",
                    "float"
                ]
            }
        },
        "RecipeSerializer.create": {
            "name": "create",
            "location": 207,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "validated_data": [
                    "dict",
                    "OrderedDict",
                    "story.models.Story",
                    "bytes"
                ]
            }
        },
        "RecipeMoveCopySerializer.validate": {
            "name": "validate",
            "location": 233,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bool",
                    "Dict[str, Any]",
                    "MutableMapping"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/recipes/test_ingredients.py": {
        "test_position_constraint_with_deleted_ingredient": {
            "name": "test_position_constraint_with_deleted_ingredient",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "recipe": [
                    "blurr.core.schema_loader.SchemaLoader"
                ]
            }
        },
        "test_position_constraint": {
            "name": "test_position_constraint",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "recipe": [
                    "core.models.Recipe"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/recipes/test_recipes.py": {
        "test_recipe_creation": {
            "name": "test_recipe_creation",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "Dict[str, str]",
                    "rest_framework.tesAPIClient"
                ],
                "user": [
                    "core.models.MyUser",
                    "rest_framework.tesAPIClient",
                    "authark.application.domain.common.User",
                    "str",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "test_creating_recipe_with_empty_ingredients_and_steps": {
            "name": "test_creating_recipe_with_empty_ingredients_and_steps",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient"
                ],
                "user": [
                    "core.models.MyUser",
                    "rest_framework.tesAPIClient",
                    "str",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "test_cache_headers": {
            "name": "test_cache_headers",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient",
                    "core.models.Recipe"
                ],
                "user": [
                    "core.models.MyUser",
                    "rest_framework.tesAPIClient",
                    "str",
                    "zerver.models.UserProfile",
                    "authark.application.domain.common.User"
                ],
                "recipe": [
                    "rest_framework.tesAPIClient",
                    "core.models.Recipe",
                    "Dict[str, str]"
                ]
            }
        },
        "test_recipe_creation_for_a_team": {
            "name": "test_recipe_creation_for_a_team",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "bool",
                    "dict"
                ],
                "team": [
                    "core.models.MyUser"
                ],
                "user": [
                    "rest_framework.tesAPIClient"
                ]
            }
        },
        "test_recipe_deletion": {
            "name": "test_recipe_deletion",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient"
                ],
                "user": [
                    "core.models.MyUser",
                    "rest_framework.tesAPIClient",
                    "authark.application.domain.common.User",
                    "str",
                    "zerver.models.UserProfile"
                ],
                "recipe": [
                    "rest_framework.tesAPIClient",
                    "core.models.Recipe"
                ]
            }
        },
        "test_recipe_updating": {
            "name": "test_recipe_updating",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient"
                ],
                "user": [
                    "core.models.MyUser",
                    "rest_framework.tesAPIClient",
                    "str",
                    "zerver.models.UserProfile"
                ],
                "recipe": [
                    "core.models.Recipe",
                    "rest_framework.tesAPIClient"
                ]
            }
        },
        "test_recipe_archived_at": {
            "name": "test_recipe_archived_at",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "core.models.Recipe",
                    "Dict[str, str]"
                ],
                "user": [
                    "bool",
                    "bytes",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "str"
                ],
                "recipe": [
                    "rest_framework.tesAPIClient",
                    "Dict[str, str]"
                ]
            }
        },
        "test_recipe_list_timeline_items": {
            "name": "test_recipe_list_timeline_items",
            "location": 228,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient"
                ],
                "user": [
                    "core.models.MyUser",
                    "rest_framework.tesAPIClient",
                    "str",
                    "zerver.models.UserProfile",
                    "authark.application.domain.common.User"
                ],
                "recipe": [],
                "snapshot": [
                    "utils.clienClient"
                ]
            }
        },
        "test_updating_step_of_recipe": {
            "name": "test_updating_step_of_recipe",
            "location": 253,
            "return": [
                ""
            ],
            "arguments": {
                "client": [],
                "user": [
                    "core.models.MyUser",
                    "rest_framework.tesAPIClient",
                    "str",
                    "zerver.models.UserProfile",
                    "authark.application.domain.common.User"
                ],
                "recipe": []
            }
        },
        "test_deleting_step_from_recipe": {
            "name": "test_deleting_step_from_recipe",
            "location": 277,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "dict",
                    "Dict[str, str]"
                ],
                "user": [
                    "core.models.MyUser",
                    "rest_framework.tesAPIClient",
                    "str",
                    "zerver.models.UserProfile"
                ],
                "recipe": [
                    "rest_framework.tesAPIClient"
                ]
            }
        },
        "test_position_step_ingredient": {
            "name": "test_position_step_ingredient",
            "location": 317,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "str",
                    "raiden.utils.Address",
                    "rest_framework.tesAPIClient"
                ],
                "user": [
                    "str"
                ],
                "recipe": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "utils.tags.Tags",
                    "Dict[str, Any]",
                    "tracim.models.data.User",
                    "dict"
                ],
                "data": [
                    "str",
                    "rest_framework.tesAPIClient"
                ],
                "base_name": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "utils.tags.Tags",
                    "Dict[str, Any]",
                    "tracim.models.data.User",
                    "dict"
                ],
                "model": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "test_adding_note_to_recipe": {
            "name": "test_adding_note_to_recipe",
            "location": 333,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "user": [
                    "bool",
                    "Optional[str]"
                ],
                "recipe": [
                    "str",
                    "core.models.Recipe"
                ]
            }
        },
        "test_modifying_note_of_recipe": {
            "name": "test_modifying_note_of_recipe",
            "location": 343,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient",
                    "str"
                ],
                "user": [
                    "core.models.Recipe",
                    "str",
                    "List[str]",
                    "rest_framework.tesAPIClient"
                ],
                "user2": [
                    "str"
                ],
                "recipe": [
                    "dict",
                    "str",
                    "tracim.models.data.Content",
                    "tracim.models.data.User"
                ]
            }
        },
        "test_delete_note_of_recipe": {
            "name": "test_delete_note_of_recipe",
            "location": 353,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient",
                    "str"
                ],
                "user": [
                    "str"
                ],
                "user2": [],
                "recipe": [
                    "bob_emploi.frontend.api.user_pb2.User"
                ]
            }
        },
        "test_delete_note": {
            "name": "test_delete_note",
            "location": 363,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient",
                    "core.models.Recipe",
                    "str"
                ],
                "user": [
                    "str"
                ],
                "user2": [],
                "recipe": [
                    "str",
                    "int",
                    "bob_emploi.frontend.api.user_pb2.User"
                ]
            }
        },
        "test_adding_ingredient_to_recipe": {
            "name": "test_adding_ingredient_to_recipe",
            "location": 373,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "Dict[str, str]",
                    "rest_framework.tesAPIClient"
                ],
                "user": [
                    "core.models.MyUser",
                    "rest_framework.tesAPIClient",
                    "str",
                    "zerver.models.UserProfile",
                    "authark.application.domain.common.User"
                ],
                "recipe": [
                    "rest_framework.tesAPIClient",
                    "core.models.Recipe",
                    "Dict[str, str]"
                ]
            }
        },
        "test_updating_ingredient_of_recipe": {
            "name": "test_updating_ingredient_of_recipe",
            "location": 398,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient",
                    "arxiv.submission.User",
                    "str"
                ],
                "user": [
                    "core.models.MyUser",
                    "rest_framework.tesAPIClient",
                    "str",
                    "zerver.models.UserProfile",
                    "authark.application.domain.common.User"
                ],
                "recipe": [
                    "rest_framework.tesAPIClient"
                ]
            }
        },
        "test_updating_ingredient_position": {
            "name": "test_updating_ingredient_position",
            "location": 419,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient"
                ],
                "user": [
                    "core.models.MyUser",
                    "rest_framework.tesAPIClient",
                    "str",
                    "zerver.models.UserProfile"
                ],
                "recipe": [
                    "rest_framework.tesAPIClient",
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "test_deleting_ingredient_from_recipe": {
            "name": "test_deleting_ingredient_from_recipe",
            "location": 438,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "dict",
                    "Dict[str, str]"
                ],
                "user": [
                    "core.models.MyUser",
                    "rest_framework.tesAPIClient",
                    "str",
                    "zerver.models.UserProfile"
                ],
                "recipe": [
                    "rest_framework.tesAPIClient"
                ]
            }
        },
        "test_display_all_accessable_recipes": {
            "name": "test_display_all_accessable_recipes",
            "location": 460,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "str",
                    "rest_framework.tesAPIClient"
                ],
                "user": [
                    "float",
                    "str",
                    "int"
                ],
                "recipes": [
                    "str",
                    "List[List[int]]",
                    "list",
                    "List[str]"
                ],
                "team_with_recipes_no_members": [
                    "bob_emploi.frontend.api.user_pb2.User",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "test_recording_edits_for_recipes": {
            "name": "test_recording_edits_for_recipes",
            "location": 484,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "core.models.MyUser",
                    "rest_framework.tesAPIClient",
                    "str",
                    "zerver.models.UserProfile",
                    "authark.application.domain.common.User"
                ],
                "user": [
                    "core.models.MyUser",
                    "rest_framework.tesAPIClient",
                    "str",
                    "zerver.models.UserProfile",
                    "authark.application.domain.common.User"
                ],
                "recipe": [
                    "str",
                    "core.models.Recipe",
                    "bool"
                ]
            }
        },
        "test_updating_edit_recipe_via_api": {
            "name": "test_updating_edit_recipe_via_api",
            "location": 498,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient"
                ],
                "user": [
                    "core.models.MyUser",
                    "rest_framework.tesAPIClient",
                    "str",
                    "zerver.models.UserProfile"
                ],
                "recipe": [
                    "rest_framework.tesAPIClient",
                    "core.models.Recipe"
                ]
            }
        },
        "test_updating_edit_recipe_via_api_empty_tags": {
            "name": "test_updating_edit_recipe_via_api_empty_tags",
            "location": 510,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient",
                    "raiden.utils.Address"
                ],
                "user": [
                    "core.models.MyUser",
                    "rest_framework.tesAPIClient",
                    "str",
                    "zerver.models.UserProfile",
                    "authark.application.domain.common.User"
                ],
                "recipe": [
                    "rest_framework.tesAPIClient"
                ]
            }
        },
        "test_copy_recipe": {
            "name": "test_copy_recipe",
            "location": 520,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "dict",
                    "utils.clienClient"
                ],
                "user_with_recipes": [
                    "Optional[core.models.User]",
                    "lms.lmsdb.models.User",
                    "zerver.models.UserProfile"
                ],
                "empty_team": [
                    "core.models.Recipe"
                ],
                "user3": [
                    "str",
                    "core.models.Team"
                ]
            }
        },
        "test_move_recipe": {
            "name": "test_move_recipe",
            "location": 558,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "dict",
                    "utils.clienClient",
                    "core_lib.core.processing_chain.DatabaseSink"
                ],
                "user_with_recipes": [
                    "zerver.models.UserProfile",
                    "Optional[core.models.User]",
                    "raiden.utils.Address",
                    "rest_framework.tesAPIClient"
                ],
                "empty_team": [
                    "django.conf.settings.AUTH_USER_MODEL",
                    "core.models.Recipe"
                ],
                "user3": [
                    "str",
                    "core.models.Team"
                ]
            }
        },
        "test_duplicate_recipe_view": {
            "name": "test_duplicate_recipe_view",
            "location": 591,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient",
                    "str",
                    "core.models.Recipe"
                ],
                "user": [
                    "core.models.MyUser",
                    "zerver.models.UserProfile",
                    "rest_framework.tesAPIClient",
                    "str",
                    "core.models.Recipe"
                ],
                "recipe": [
                    "rest_framework.tesAPIClient",
                    "core.models.Recipe",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "user2": [
                    "core.models.MyUser",
                    "zerver.models.UserProfile",
                    "rest_framework.tesAPIClient",
                    "str",
                    "core.models.Recipe"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/recipes/test_recipes_permissions.py": {
        "test_accessing_recipes": {
            "name": "test_accessing_recipes",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient",
                    "str",
                    "zerver.models.Client",
                    "zerver.models.UserProfile"
                ],
                "user": [
                    "core.models.MyUser",
                    "core.models.Recipe",
                    "zerver.models.UserProfile"
                ],
                "recipe": [
                    "str",
                    "rest_framework.tesAPIClient"
                ],
                "user2": [
                    "core.models.MyUser",
                    "core.models.Recipe",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "test_accessing_step_of_other_user": {
            "name": "test_accessing_step_of_other_user",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient"
                ],
                "recipe": [
                    "str",
                    "Optional[float]"
                ],
                "user2": [
                    "str",
                    "core.models.MyUser",
                    "rest_framework.tesAPIClient",
                    "zerver.models.UserProfile"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/recipes/test_recipe_changelog.py": {
        "step": {
            "name": "step",
            "location": 11,
            "return": [
                "Dict[str, int]",
                "str"
            ],
            "arguments": {
                "recipe": [
                    "core.models.Recipe",
                    "str",
                    "Iterable[int]",
                    "Callable"
                ]
            }
        },
        "ingredient": {
            "name": "ingredient",
            "location": 18,
            "return": [
                "str",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "recipe": [
                    "core.models.Recipe",
                    "str",
                    "List[str]",
                    "List[List[str]]",
                    "int"
                ]
            }
        },
        "test_step_create": {
            "name": "test_step_create",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient",
                    "core.models.Recipe"
                ],
                "recipe": [
                    "rest_framework.tesAPIClient",
                    "core.models.Recipe"
                ],
                "user": [
                    "core.models.MyUser"
                ]
            }
        },
        "test_step_update": {
            "name": "test_step_update",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient",
                    "core.models.Recipe"
                ],
                "recipe": [
                    "rest_framework.tesAPIClient",
                    "core.models.Recipe"
                ],
                "user": [
                    "core.models.MyUser"
                ],
                "step": [
                    "str"
                ]
            }
        },
        "test_step_delete": {
            "name": "test_step_delete",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient",
                    "core.models.Recipe"
                ],
                "recipe": [
                    "core.models.Recipe",
                    "rest_framework.tesAPIClient",
                    "str"
                ],
                "user": [
                    "core.models.MyUser"
                ],
                "step": [
                    "core.models.Recipe",
                    "rest_framework.tesAPIClient",
                    "str"
                ]
            }
        },
        "test_recipe_name_update": {
            "name": "test_recipe_name_update",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient"
                ],
                "recipe": [
                    "rest_framework.tesAPIClient"
                ],
                "user": [
                    "core.models.MyUser"
                ]
            }
        },
        "test_recipe_source_update": {
            "name": "test_recipe_source_update",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient",
                    "core.models.Recipe"
                ],
                "recipe": [
                    "dict",
                    "rest_framework.tesAPIClient",
                    "tracim.models.data.User",
                    "str",
                    "tracim.models.data.Content",
                    "tracim.models.data.Workspace"
                ],
                "user": [
                    "core.models.MyUser"
                ]
            }
        },
        "test_recipe_servings_update": {
            "name": "test_recipe_servings_update",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient"
                ],
                "recipe": [
                    "core.models.Grouping"
                ],
                "user": [
                    "core.models.MyUser"
                ]
            }
        },
        "test_recipe_time_update": {
            "name": "test_recipe_time_update",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient",
                    "core.models.Recipe"
                ],
                "recipe": [
                    "core.models.Grouping",
                    "rest_framework.tesAPIClient"
                ],
                "user": [
                    "core.models.MyUser"
                ]
            }
        },
        "test_ingredient_create": {
            "name": "test_ingredient_create",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient",
                    "core.models.Recipe"
                ],
                "recipe": [
                    "rest_framework.tesAPIClient",
                    "core.models.Recipe"
                ],
                "user": [
                    "core.models.MyUser"
                ]
            }
        },
        "test_ingredient_update": {
            "name": "test_ingredient_update",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient",
                    "core.models.Recipe"
                ],
                "recipe": [
                    "rest_framework.tesAPIClient",
                    "core.models.Recipe"
                ],
                "user": [
                    "core.models.MyUser"
                ],
                "ingredient": [
                    "core.models.Recipe",
                    "rest_framework.tesAPIClient"
                ]
            }
        },
        "test_ingredient_delete": {
            "name": "test_ingredient_delete",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient",
                    "core.models.Recipe"
                ],
                "recipe": [
                    "core.models.Recipe",
                    "rest_framework.tesAPIClient",
                    "str"
                ],
                "user": [
                    "core.models.MyUser"
                ],
                "ingredient": [
                    "core.models.Recipe",
                    "rest_framework.tesAPIClient",
                    "str",
                    "int"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/recipes/test_recipe_sections.py": {
        "test_creating_section": {
            "name": "test_creating_section",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient"
                ],
                "user": [
                    "core.models.MyUser",
                    "rest_framework.tesAPIClient",
                    "str",
                    "zerver.models.UserProfile"
                ],
                "recipe": [
                    "rest_framework.tesAPIClient",
                    "models.Station",
                    "core.models.Recipe"
                ]
            }
        },
        "test_creating_section_without_position": {
            "name": "test_creating_section_without_position",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient"
                ],
                "user": [
                    "core.models.MyUser",
                    "rest_framework.tesAPIClient",
                    "str",
                    "zerver.models.UserProfile"
                ],
                "recipe": [
                    "rest_framework.tesAPIClient"
                ]
            }
        },
        "test_fetching_sections_for_recipe": {
            "name": "test_fetching_sections_for_recipe",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "core.models.Recipe",
                    "rest_framework.tesAPIClient",
                    "Dict[str, str]"
                ],
                "user": [
                    "core.models.MyUser",
                    "rest_framework.tesAPIClient",
                    "str",
                    "zerver.models.UserProfile",
                    "authark.application.domain.common.User"
                ],
                "recipe": [
                    "rest_framework.tesAPIClient",
                    "core.models.Recipe"
                ],
                "team": [
                    "rest_framework.tesAPIClient",
                    "core.models.Recipe"
                ]
            }
        },
        "test_updating_section": {
            "name": "test_updating_section",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient"
                ],
                "user": [
                    "core.models.MyUser",
                    "rest_framework.tesAPIClient",
                    "authark.application.domain.common.User",
                    "str",
                    "zerver.models.UserProfile"
                ],
                "recipe": [
                    "bob_emploi.frontend.api.user_pb2.User",
                    "models.Station"
                ]
            }
        },
        "test_deleting_section": {
            "name": "test_deleting_section",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient"
                ],
                "user": [
                    "core.models.MyUser",
                    "rest_framework.tesAPIClient",
                    "authark.application.domain.common.User",
                    "str",
                    "zerver.models.UserProfile"
                ],
                "recipe": [
                    "str"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/recipes/test_recipe_timeline.py": {
        "test_get_recipe_timeline": {
            "name": "test_get_recipe_timeline",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "asgard.models.accounAccount"
                ],
                "user2": [
                    "core.models.MyUser",
                    "User",
                    "core.models.Recipe",
                    "authark.application.domain.common.User",
                    "zerver.models.UserProfile"
                ],
                "client": [
                    "core.models.Recipe",
                    "List[str]"
                ],
                "recipe": [
                    "django.contrib.auth.models.User",
                    "zerver.models.UserProfile",
                    "bob_emploi.frontend.api.user_pb2.User",
                    "core.models.my_user.MyUser",
                    "zerver.models.Realm",
                    "metaswitch_tinder.database.models.User",
                    "str"
                ],
                "empty_team": [
                    "core.models.MyUser",
                    "User",
                    "core.models.Recipe",
                    "authark.application.domain.common.User",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "test_get_recipe_timeline_ordering": {
            "name": "test_get_recipe_timeline_ordering",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "core.models.MyUser",
                    "str",
                    "core.models.Grouping",
                    "int"
                ],
                "client": [
                    "rest_framework.tesAPIClient",
                    "core.models.Recipe"
                ],
                "recipe": [
                    "dict",
                    "projects.models.Project",
                    "Tuple[int, int]",
                    "str",
                    "core.models.Grouping"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/recipes/test_steps.py": {
        "test_step_position_order": {
            "name": "test_step_position_order",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient"
                ],
                "user": [
                    "core.models.MyUser",
                    "rest_framework.tesAPIClient",
                    "str",
                    "zerver.models.UserProfile"
                ],
                "recipe": [
                    "rest_framework.tesAPIClient",
                    "core.models.Recipe",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_adding_step_to_recipe": {
            "name": "test_adding_step_to_recipe",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "step": [
                    "core.models.Recipe",
                    "rest_framework.tesAPIClient"
                ],
                "client": [
                    "str",
                    "Dict[str, Any]"
                ],
                "user": [
                    "str",
                    "rest_framework.tesAPIClient",
                    "slice",
                    "core.models.MyUser",
                    "zerver.models.UserProfile"
                ],
                "recipe": [
                    "rest_framework.tesAPIClient",
                    "str"
                ]
            }
        },
        "test_position_constraint_with_deleted_steps": {
            "name": "test_position_constraint_with_deleted_steps",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "recipe": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "test_position_constraint": {
            "name": "test_position_constraint",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "recipe": [
                    "core.models.Recipe"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/recipes/utils.py": {
        "add_positions": {
            "name": "add_positions",
            "location": 1,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "recipe_steps": [
                    "float"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/recipes/views.py": {
        "group_by_recipe_id": {
            "name": "group_by_recipe_id",
            "location": 53,
            "return": [
                "int",
                "Iterable[Any]",
                "Tuple[int, int, int, int]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "T",
                    "Dict[str, Any]",
                    "List[float]"
                ]
            }
        },
        "parse_int": {
            "name": "parse_int",
            "location": 391,
            "return": [
                "str",
                "Optional[str]",
                "Optional[List[Any]]",
                "list",
                "Optional[BaseException]"
            ],
            "arguments": {
                "val": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "get_recipe_timeline": {
            "name": "get_recipe_timeline",
            "location": 400,
            "return": [
                "str",
                "Dict[str, Any]",
                "contests.models.User",
                "models.Dashboard",
                "core.types.FBAccessToken",
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                "int"
            ],
            "arguments": {
                "request": [
                    "rest_framework.requesRequest",
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ],
                "recipe_pk": [
                    "django.http.HttpRequest",
                    "str",
                    "int",
                    "zerver.models.Stream",
                    "app.db.session.Session",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "get_next_max_pos": {
            "name": "get_next_max_pos",
            "location": 421,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "create_section_view": {
            "name": "create_section_view",
            "location": 433,
            "return": [
                "Dict[str, Any]",
                "dict",
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest",
                    "str"
                ],
                "recipe_pk": [
                    "int",
                    "str",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "zam_repondeur.models.Team",
                    "django.http.HttpRequest"
                ]
            }
        },
        "delete_section_view": {
            "name": "delete_section_view",
            "location": 458,
            "return": [
                "str",
                "zerver.models.UserProfile",
                "bool",
                "dict",
                "django.contrib.auth.models.AbstractUser"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ],
                "section_pk": [
                    "int",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "django.http.HttpRequest",
                    "str",
                    "bool"
                ]
            }
        },
        "update_section_view": {
            "name": "update_section_view",
            "location": 477,
            "return": [
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                "Dict[str, Any]",
                "asgard.models.job.ScheduledJob"
            ],
            "arguments": {
                "request": [
                    "purplship.core.models.RateRequest",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest",
                    "zam_repondeur.models.Lecture"
                ],
                "section_pk": [
                    "int",
                    "str",
                    "zam_repondeur.models.Team",
                    "django.http.HttpRequest"
                ]
            }
        },
        "delete_or_update_section_view": {
            "name": "delete_or_update_section_view",
            "location": 499,
            "return": [
                "int",
                "bool",
                "str",
                "raiden.utils.List[raiden.utils.FeeAmount]"
            ],
            "arguments": {
                "request": [
                    "rest_framework.requesRequest",
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ],
                "section_pk": [
                    "int",
                    "rest_framework.requesRequest",
                    "django.http.HttpRequest"
                ]
            }
        },
        "ingredient_to_text": {
            "name": "ingredient_to_text",
            "location": 604,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "ingredient": [
                    "Type[T]",
                    "str",
                    "Optional[Callable]"
                ]
            }
        },
        "RecipeViewSet.get_serializer_context": {
            "name": "get_serializer_context",
            "location": 65,
            "return": [
                "str",
                "List[Tuple[str, str, int]]",
                "cmk.utils.type_defs.CheckPluginName.Str",
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "bool",
                "Optional[Callable[[Dict], bool]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecipeViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 68,
            "return": [
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecipeViewSet.list": {
            "name": "list",
            "location": 88,
            "return": [
                "str",
                "Optional[str]",
                "Optional[Dict[str, str]]",
                "Dict[str, bool]",
                "BinaryIO",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "Dict[str, Any]"
                ]
            }
        },
        "RecipeViewSet.create": {
            "name": "create",
            "location": 221,
            "return": [
                "Dict[str, Any]",
                "app.models.dto.LoginResponse",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "RecipeViewSet.update": {
            "name": "update",
            "location": 246,
            "return": [
                "app.models.dto.LoginResponse",
                "asgard.models.job.ScheduledJob",
                "Optional[ocspdash.models.Location]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "Dict[str, Any]"
                ]
            }
        },
        "RecipeViewSet.move": {
            "name": "move",
            "location": 304,
            "return": [
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ],
                "pk": [
                    "rest_framework.requesRequest",
                    "bool"
                ]
            }
        },
        "RecipeViewSet.copy": {
            "name": "copy",
            "location": 339,
            "return": [
                "dict",
                "Dict[str, Any]",
                "cmk.utils.type_defs.UserId",
                "Response",
                "werkzeug.exceptions.HTTPException"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ],
                "pk": [
                    "rest_framework.requesRequest",
                    "bool"
                ]
            }
        },
        "RecipeViewSet.duplicate": {
            "name": "duplicate",
            "location": 381,
            "return": [
                "Optional[str]",
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "str",
                "Dict[str, Any]",
                "Tuple[str, int, Dict[str, str]]",
                "models.Base"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "rest_framework.requesRequest",
                    "django.http.HttpRequest"
                ],
                "pk": [
                    "rest_framework.requesRequest",
                    "bool"
                ]
            }
        },
        "TeamRecipesViewSet.get": {
            "name": "get",
            "location": 515,
            "return": [
                "core.models.User",
                "bool",
                "str",
                "\"User\"",
                "app.domain.users.User",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str"
                ],
                "team_pk": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "rest_framework.requesRequest",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "StepViewSet.create": {
            "name": "create",
            "location": 544,
            "return": [
                "Dict[str, Any]",
                "app.models.dto.LoginResponse",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ],
                "recipe_pk": [
                    "int",
                    "str",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "zam_repondeur.models.Team",
                    "django.http.HttpRequest"
                ]
            }
        },
        "StepViewSet.update": {
            "name": "update",
            "location": 575,
            "return": [
                "app.models.dto.LoginResponse",
                "asgard.models.job.ScheduledJob",
                "Optional[ocspdash.models.Location]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest",
                    "dict",
                    "Tuple[int]"
                ]
            }
        },
        "StepViewSet.perform_destroy": {
            "name": "perform_destroy",
            "location": 593,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "core.models.Step",
                    "Union[int, slice]",
                    "str"
                ]
            }
        },
        "IngredientViewSet.create": {
            "name": "create",
            "location": 622,
            "return": [
                "Dict[str, Any]",
                "app.models.dto.LoginResponse",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ],
                "recipe_pk": [
                    "str",
                    "django.db.models.query.QuerySet",
                    "rest_framework.requesRequest",
                    "dict",
                    "bool",
                    "zerver.models.UserProfile",
                    "django.http.HttpRequest"
                ]
            }
        },
        "IngredientViewSet.update": {
            "name": "update",
            "location": 654,
            "return": [
                "app.models.dto.LoginResponse",
                "asgard.models.job.ScheduledJob",
                "Optional[ocspdash.models.Location]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "dict",
                    "rest_framework.requesRequest",
                    "Tuple[int]"
                ]
            }
        },
        "IngredientViewSet.perform_destroy": {
            "name": "perform_destroy",
            "location": 676,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "core.models.Step",
                    "core.models.Ingredient",
                    "IO[str]",
                    "int",
                    "bool",
                    "Optional[cmk.utils.type_defs.HostAddress]"
                ]
            }
        },
        "NoteViewSet.get_serializer": {
            "name": "get_serializer",
            "location": 692,
            "return": [
                "str",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoteViewSet.create": {
            "name": "create",
            "location": 695,
            "return": [
                "Dict[str, Any]",
                "app.models.dto.LoginResponse",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest"
                ],
                "recipe_pk": [
                    "int",
                    "str",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "zam_repondeur.models.Team",
                    "django.http.HttpRequest"
                ]
            }
        },
        "NoteViewSet.perform_update": {
            "name": "perform_update",
            "location": 704,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "serializer": [
                    "purplship.core.utils.xml.Element",
                    "List[str]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/recipes/__init__.py": {},
    "recipeyak-master/backend/core/schedule/inflect.py": {
        "pluralize": {
            "name": "pluralize",
            "location": 553,
            "return": [
                "Callable",
                "Tuple[int, int]",
                "str",
                "list",
                "bool"
            ],
            "arguments": {
                "word": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "List[int]"
                ],
                "pos": [
                    "Dict[str, Any]"
                ],
                "custom": [
                    "float",
                    "str"
                ],
                "classical": [
                    "Dict[str, Any]"
                ]
            }
        },
        "singularize": {
            "name": "singularize",
            "location": 832,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "word": [
                    "int",
                    "str"
                ],
                "pos": [
                    "str",
                    "Union[str, List[str]]"
                ],
                "custom": []
            }
        }
    },
    "recipeyak-master/backend/core/schedule/serializers.py": {
        "ScheduledRecipeSerializerCreate.create": {
            "name": "create",
            "location": 19,
            "return": [
                "int",
                "salon.models.Stylist",
                "bytes",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "validated_data": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/schedule/test_calendar.py": {
        "test_creating_scheduled_recipe": {
            "name": "test_creating_scheduled_recipe",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "recipe": [
                    "str",
                    "Optional[str]"
                ],
                "user": [
                    "str"
                ]
            }
        },
        "test_recipe_returns_last_scheduled_date": {
            "name": "test_recipe_returns_last_scheduled_date",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "str",
                    "Dict[str, Any]"
                ],
                "scheduled_recipe": [
                    "blurr.core.aggregate_activity.ActivityAggregate.Schema",
                    "Dict[str, Any]",
                    "bool"
                ],
                "recipe2": [
                    "rest_framework.tesAPIClient",
                    "Dict[str, str]",
                    "core.models.Recipe"
                ]
            }
        },
        "test_updating_scheduled_recipe": {
            "name": "test_updating_scheduled_recipe",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient",
                    "Dict[str, str]"
                ],
                "user": [
                    "core.models.MyUser",
                    "rest_framework.tesAPIClient",
                    "str",
                    "zerver.models.UserProfile"
                ],
                "scheduled_recipe": [
                    "django.conf.settings.AUTH_USER_MODEL",
                    "models.Station"
                ]
            }
        },
        "test_deleting_scheduled_recipe": {
            "name": "test_deleting_scheduled_recipe",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "int"
                ],
                "user": [
                    "core.models.MyUser",
                    "rest_framework.tesAPIClient",
                    "str",
                    "zerver.models.UserProfile"
                ],
                "scheduled_recipe": [
                    "models.Station",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "test_fetching_scheduled_recipes": {
            "name": "test_fetching_scheduled_recipes",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient"
                ],
                "user": [
                    "core.models.MyUser",
                    "rest_framework.tesAPIClient",
                    "str",
                    "zerver.models.UserProfile"
                ],
                "scheduled_recipe": [
                    "Sequence[str]",
                    "core.models.MyUser"
                ]
            }
        },
        "test_deleting_recipe_deletes_scheduled_recipes": {
            "name": "test_deleting_recipe_deletes_scheduled_recipes",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "recipe": [
                    "Optional[int]",
                    "src.core.model.scripScript",
                    "src.main.core.repositories.mouse_repository.MouseRepository",
                    "abilian.core.models.subjects.User",
                    "bool",
                    "str"
                ],
                "scheduled_recipe": [
                    "int",
                    "datetime.date.time"
                ],
                "user": [
                    "app.models.user.UserInDB",
                    "ultron8.api.models.user.UserInDB"
                ]
            }
        },
        "test_schedule_for_recipe_method": {
            "name": "test_schedule_for_recipe_method",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "recipe": [
                    "Optional[List[\"ChannelResourceIdentifier\"]]",
                    "Optional[\"ChannelResourceIdentifier\"]"
                ],
                "user": [
                    "Optional[List[\"ChannelResourceIdentifier\"]]",
                    "Optional[\"ChannelResourceIdentifier\"]"
                ]
            }
        },
        "test_scheduling_the_same_recipe_twice_on_a_day": {
            "name": "test_scheduling_the_same_recipe_twice_on_a_day",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "recipe": [],
                "user": []
            }
        },
        "test_dupe_scheduling_with_http": {
            "name": "test_dupe_scheduling_with_http",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient"
                ],
                "recipe": [
                    "Optional[Tuple[float, float]]"
                ],
                "user": [
                    "rest_framework.tesAPIClient",
                    "str"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/schedule/test_shopping_list.py": {
        "test_fetching_shoppinglist": {
            "name": "test_fetching_shoppinglist",
            "location": 26,
            "return": [],
            "arguments": {
                "client": [],
                "user": [],
                "recipe": []
            }
        },
        "test_fetching_shoppinglist_with_team_recipe": {
            "name": "test_fetching_shoppinglist_with_team_recipe",
            "location": 62,
            "return": [],
            "arguments": {
                "client": [],
                "team": [],
                "user": [],
                "recipe": []
            }
        },
        "test_fetching_shoppinglist_with_invalid_dates": {
            "name": "test_fetching_shoppinglist_with_invalid_dates",
            "location": 98,
            "return": [],
            "arguments": {
                "user": [],
                "client": []
            }
        },
        "test_scheduling_multiple_times_some_ingredient": {
            "name": "test_scheduling_multiple_times_some_ingredient",
            "location": 106,
            "return": [],
            "arguments": {
                "quantity": [],
                "user": [],
                "client": []
            }
        },
        "test_combine_ingredients": {
            "name": "test_combine_ingredients",
            "location": 306,
            "return": [],
            "arguments": {
                "ingredients": [],
                "expected": []
            }
        },
        "test_report_bad_merge": {
            "name": "test_report_bad_merge",
            "location": 318,
            "return": [],
            "arguments": {
                "user": [],
                "client": [],
                "recipe": []
            }
        },
        "test_combining_feta": {
            "name": "test_combining_feta",
            "location": 326,
            "return": [],
            "arguments": {
                "user": [],
                "client": [],
                "empty_recipe": []
            }
        }
    },
    "recipeyak-master/backend/core/schedule/test_team_calendar.py": {
        "test_adding_to_team_calendar": {
            "name": "test_adding_to_team_calendar",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "Dict[str, str]",
                    "List[str]"
                ],
                "user": [
                    "rest_framework.tesAPIClient"
                ],
                "team": [
                    "bob_emploi.frontend.api.user_pb2.User",
                    "bool",
                    "Iterable[Iterable[Any]]"
                ],
                "recipe": [
                    "authark.application.domain.common.User",
                    "asgard.models.user.User",
                    "asgard.models.accounAccount"
                ]
            }
        },
        "test_removing_from_team_calendar": {
            "name": "test_removing_from_team_calendar",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "int"
                ],
                "user": [
                    "core.models.MyUser",
                    "rest_framework.tesAPIClient",
                    "str",
                    "zerver.models.UserProfile",
                    "authark.application.domain.common.User"
                ],
                "team": [
                    "dict",
                    "esm.models.dashboard_clienDashboardClient",
                    "bob_emploi.frontend.api.user_pb2.User",
                    "models.Station",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "recipe": []
            }
        },
        "test_updating_team_schedule_recipe": {
            "name": "test_updating_team_schedule_recipe",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient",
                    "Dict[str, str]"
                ],
                "user": [
                    "core.models.MyUser",
                    "rest_framework.tesAPIClient",
                    "str",
                    "zerver.models.UserProfile"
                ],
                "team": [
                    "dict",
                    "models.Station",
                    "esm.models.dashboard_clienDashboardClient",
                    "bob_emploi.frontend.api.user_pb2.User"
                ],
                "recipe": [
                    "str"
                ]
            }
        },
        "test_fetching_team_calendar": {
            "name": "test_fetching_team_calendar",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient"
                ],
                "user": [
                    "core.models.MyUser",
                    "rest_framework.tesAPIClient",
                    "authark.application.domain.common.User",
                    "str",
                    "zerver.models.UserProfile"
                ],
                "team": [
                    "django.conf.settings.AUTH_USER_MODEL",
                    "Callable",
                    "zerver.models.Realm",
                    "str",
                    "server.models.User",
                    "core.models.Recipe"
                ],
                "recipe": [
                    "int",
                    "Callable"
                ]
            }
        },
        "test_fetching_team_calendar_v2": {
            "name": "test_fetching_team_calendar_v2",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient",
                    "core.models.Recipe"
                ],
                "user": [
                    "core.models.MyUser",
                    "rest_framework.tesAPIClient",
                    "str",
                    "zerver.models.UserProfile",
                    "authark.application.domain.common.User"
                ],
                "team": [
                    "str",
                    "Callable"
                ],
                "recipe": []
            }
        },
        "test_fetching_team_cal_v2_content": {
            "name": "test_fetching_team_cal_v2_content",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient",
                    "core.models.Recipe"
                ],
                "user": [
                    "Callable[[List, bool], None]",
                    "str"
                ],
                "team": [
                    "float",
                    "List[str]",
                    "str"
                ],
                "recipe": []
            }
        },
        "test_cal_updating_settings_view": {
            "name": "test_cal_updating_settings_view",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient",
                    "Dict[str, str]"
                ],
                "user": [
                    "zerver.models.UserProfile",
                    "set"
                ],
                "team": [
                    "float",
                    "List[str]",
                    "str"
                ],
                "recipe": []
            }
        },
        "test_cal_generate_link_view": {
            "name": "test_cal_generate_link_view",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient",
                    "Optional[str]"
                ],
                "user": [
                    "core.models.MyUser",
                    "rest_framework.tesAPIClient",
                    "str",
                    "zerver.models.UserProfile",
                    "authark.application.domain.common.User"
                ],
                "team": [
                    "str",
                    "rest_framework.tesAPIClient",
                    "zerver.models.Client",
                    "zerver.models.UserProfile",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "recipe": []
            }
        },
        "test_cal_next_open": {
            "name": "test_cal_next_open",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient",
                    "Dict[str, str]",
                    "core.models.Recipe"
                ],
                "user": [
                    "core.models.MyUser",
                    "rest_framework.tesAPIClient",
                    "str",
                    "zerver.models.UserProfile",
                    "authark.application.domain.common.User"
                ],
                "team": [
                    "rest_framework.tesAPIClient",
                    "core.models.Recipe",
                    "Dict[str, str]"
                ],
                "empty_team": [
                    "rest_framework.tesAPIClient",
                    "core.models.Recipe",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/schedule/test_team_shopping_list.py": {
        "test_fetching_team_shopping_list": {
            "name": "test_fetching_team_shopping_list",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "client": [],
                "user": [
                    "rest_framework.tesAPIClient",
                    "str"
                ],
                "team": [
                    "Optional[List[\"ChannelResourceIdentifier\"]]",
                    "str",
                    "Optional[\"ChannelResourceIdentifier\"]"
                ],
                "recipe": [
                    "str"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/schedule/views.py": {
        "unwrap": {
            "name": "unwrap",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "arg": [
                    "Optional[int]",
                    "Optional[List[Callable]]",
                    "str"
                ]
            }
        },
        "get_scheduled_recipes": {
            "name": "get_scheduled_recipes",
            "location": 43,
            "return": [
                "Optional[str]",
                "bool",
                "int",
                "float",
                "Optional[int]",
                "Optional[\"Period\"]"
            ],
            "arguments": {}
        },
        "get_shopping_list_view": {
            "name": "get_shopping_list_view",
            "location": 67,
            "return": [
                "str",
                "List[str]",
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "dict",
                    "Optional[Dict[str, Any]]"
                ],
                "team_pk": [
                    "django.http.HttpRequest",
                    "dict",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "get_cal_settings": {
            "name": "get_cal_settings",
            "location": 112,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "ReportBadMerge.post": {
            "name": "post",
            "location": 99,
            "return": [
                "Dict[int, dict]",
                "List[Dict[str, Any]]",
                "dict",
                "models.Dashboard",
                "Optional[Dict]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "CalendarViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 141,
            "return": [
                "zerver.models.Realm",
                "int",
                "str",
                "bytes",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "CalendarViewSet.create": {
            "name": "create",
            "location": 150,
            "return": [
                "zerver.models.UserProfile",
                "dict",
                "Dict[str, Any]",
                "models.UserAuth"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "Tuple[int]"
                ],
                "team_pk": [
                    "int",
                    "str",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "zam_repondeur.models.Team",
                    "django.http.HttpRequest"
                ]
            }
        },
        "CalendarViewSet.update_settings": {
            "name": "update_settings",
            "location": 169,
            "return": [
                "bool",
                "core.models.User",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ],
                "team_pk": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "models.WalletRequest"
                ]
            }
        },
        "CalendarViewSet.generate_link": {
            "name": "generate_link",
            "location": 181,
            "return": [
                "Dict[int, dict]",
                "dict",
                "Optional[Iterable[str]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "models.WalletRequest",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "str"
                ],
                "team_pk": [
                    "django.http.HttpRequest",
                    "models.WalletRequest",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "str"
                ]
            }
        },
        "CalendarViewSet.next_open": {
            "name": "next_open",
            "location": 189,
            "return": [
                "str",
                "zerver.models.UserProfile",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "str",
                    "rest_framework.requesRequest"
                ],
                "team_pk": [
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "CalendarViewSet.list": {
            "name": "list",
            "location": 225,
            "return": [
                "dict",
                "int",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest"
                ],
                "team_pk": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/schedule/__init__.py": {},
    "recipeyak-master/backend/core/teams/serializers.py": {
        "TeamSerializer.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamSerializer.create": {
            "name": "create",
            "location": 43,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "validated_data": [
                    "jgikbase.idmapping.core.object_id.Namespace",
                    "dict",
                    "salon.models.Stylist",
                    "Tuple[int, int]",
                    "Optional['models.LTI1p3Provider']"
                ]
            }
        },
        "MembershipSerializer.validate_level": {
            "name": "validate_level",
            "location": 63,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "int",
                    "List[int]",
                    "List[float]",
                    "bytearray",
                    "bool"
                ]
            }
        },
        "CreateInviteSerializer.validate_emails": {
            "name": "validate_emails",
            "location": 96,
            "return": [
                "Set[str]",
                "str",
                "Optional[dict]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "emails": [
                    "str"
                ]
            }
        },
        "CreateInviteSerializer.create": {
            "name": "create",
            "location": 100,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "validated_data": [
                    "Dict[str, Dict[str, Any]]",
                    "str",
                    "dict",
                    "Optional[int]",
                    "float",
                    "int",
                    "T"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/teams/test_teams.py": {
        "test_creating_team": {
            "name": "test_creating_team",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "str",
                    "rest_framework.tesAPIClient",
                    "core.models.Recipe"
                ],
                "user": [],
                "user2": []
            }
        },
        "test_updating_team_name": {
            "name": "test_updating_team_name",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "team": [
                    "bool",
                    "int",
                    "str",
                    "fonduer.parser.models.table.Cell"
                ],
                "user": [
                    "str",
                    "Tuple[str, str]"
                ],
                "user2": [],
                "user3": [
                    "rest_framework.tesAPIClient",
                    "core.models.Recipe",
                    "str"
                ]
            }
        },
        "test_deleting_team": {
            "name": "test_deleting_team",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "str",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "team": [
                    "Callable"
                ],
                "user": [],
                "user2": [
                    "float"
                ],
                "empty_team": [
                    "bool",
                    "str",
                    "int",
                    "Union[starfish.core.types.Number, Tuple[starfish.core.types.Number]]",
                    "float"
                ],
                "user3": [
                    "float",
                    "int"
                ]
            }
        },
        "test_list_team": {
            "name": "test_list_team",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "team": [
                    "Optional[str]",
                    "zerver.models.UserProfile",
                    "str"
                ],
                "user": [
                    "str",
                    "Tuple[str, str]"
                ],
                "user2": [
                    "str",
                    "core.models.Recipe"
                ],
                "user3": [
                    "str",
                    "List[int]",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "test_retrieve_team": {
            "name": "test_retrieve_team",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "team": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Callable"
                ],
                "user": [
                    "str",
                    "Tuple[str, str]"
                ],
                "user2": [
                    "str",
                    "rest_framework.tesAPIClient"
                ]
            }
        },
        "test_create_team_member": {
            "name": "test_create_team_member",
            "location": 196,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "str",
                    "rest_framework.tesAPIClient",
                    "core.models.Recipe"
                ],
                "team": [
                    "str"
                ],
                "user": [
                    "str",
                    "Tuple[str, str]"
                ],
                "user2": [
                    "str",
                    "Tuple[str, str]"
                ]
            }
        },
        "test_list_team_members": {
            "name": "test_list_team_members",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "str",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "rest_framework.tesAPIClient"
                ],
                "team": [
                    "bool",
                    "str",
                    "fonduer.parser.models.table.Cell",
                    "int"
                ],
                "user": [
                    "Dict[str, Any]"
                ],
                "user2": [
                    "rest_framework.tesAPIClient",
                    "str"
                ],
                "user3": [
                    "str",
                    "int"
                ]
            }
        },
        "test_destory_team_member": {
            "name": "test_destory_team_member",
            "location": 250,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "str",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "rest_framework.tesAPIClient"
                ],
                "team": [
                    "django.conf.settings.AUTH_USER_MODEL",
                    "str",
                    "core.models.Recipe",
                    "users.models.JustfixUser",
                    "List[Tuple[bool, Any]]"
                ],
                "user": [
                    "str",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "core.models.Recipe"
                ],
                "user2": [
                    "rest_framework.tesAPIClient",
                    "str"
                ],
                "user3": [],
                "empty_team": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "test_retrieve_team_member": {
            "name": "test_retrieve_team_member",
            "location": 331,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "str",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "rest_framework.tesAPIClient"
                ],
                "team": [
                    "str",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "core.models.Recipe",
                    "List[Tuple[bool, Any]]",
                    "users.models.JustfixUser"
                ],
                "user": [
                    "str",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "core.models.Recipe",
                    "app.models.dto.ClientInfo"
                ],
                "user2": [
                    "rest_framework.tesAPIClient",
                    "str"
                ],
                "user3": [
                    "str",
                    "int"
                ]
            }
        },
        "test_update_team_member": {
            "name": "test_update_team_member",
            "location": 374,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "Dict[str, str]",
                    "str",
                    "django.http.HttpRequest"
                ],
                "team": [
                    "str",
                    "List[Tuple[bool, Any]]",
                    "core.models.Recipe",
                    "users.models.JustfixUser",
                    "users.models.User"
                ],
                "user": [
                    "str",
                    "core.models.Recipe"
                ],
                "user2": [
                    "rest_framework.tesAPIClient",
                    "str",
                    "core.models.Recipe"
                ],
                "user3": [
                    "List[int]",
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "empty_team": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_create_team_invite": {
            "name": "test_create_team_invite",
            "location": 419,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "team": [
                    "bool",
                    "str"
                ],
                "user": [
                    "str",
                    "Tuple[str, str]"
                ],
                "user2": [
                    "str"
                ],
                "user3": [
                    "str",
                    "List[int]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "empty_team": [
                    "str",
                    "List[int]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_creating_invites_by_non_members": {
            "name": "test_creating_invites_by_non_members",
            "location": 454,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "team": [],
                "user2": [
                    "bool"
                ],
                "user3": [
                    "str"
                ],
                "empty_team": [
                    "str",
                    "core.models.Grouping"
                ]
            }
        },
        "test_destroy_team_invite": {
            "name": "test_destroy_team_invite",
            "location": 476,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "team": [],
                "user": [
                    "str"
                ],
                "user2": [
                    "str"
                ],
                "user3": [
                    "str",
                    "app.user.models.User"
                ]
            }
        },
        "test_create_user_invite": {
            "name": "test_create_user_invite",
            "location": 498,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "team": [
                    "str",
                    "Tuple[str, str]"
                ],
                "user": [
                    "str",
                    "Tuple[str, str]"
                ],
                "user2": [
                    "str",
                    "Tuple[str, str]"
                ]
            }
        },
        "test_update_user_invite": {
            "name": "test_update_user_invite",
            "location": 514,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "team": [
                    "bool",
                    "int"
                ],
                "user": [
                    "models.user.User",
                    "str"
                ],
                "user2": [
                    "models.user.User",
                    "str"
                ]
            }
        },
        "test_destroy_user_invite": {
            "name": "test_destroy_user_invite",
            "location": 550,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "team": [
                    "bool",
                    "int"
                ],
                "user": [
                    "str",
                    "models.user.User"
                ],
                "user2": [
                    "str",
                    "models.user.User"
                ]
            }
        },
        "test_list_user_invites": {
            "name": "test_list_user_invites",
            "location": 584,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "team": [
                    "Dict[str, Any]"
                ],
                "user": [
                    "rest_framework.tesAPIClient",
                    "core.models.Recipe",
                    "str"
                ],
                "user2": []
            }
        },
        "test_retrieve_user_invite": {
            "name": "test_retrieve_user_invite",
            "location": 607,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "team": [
                    "set"
                ],
                "user": [
                    "str"
                ],
                "user2": [
                    "str"
                ]
            }
        },
        "test_user_invites": {
            "name": "test_user_invites",
            "location": 628,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "str",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "rest_framework.tesAPIClient"
                ],
                "team": [
                    "bool",
                    "Dict[str, Any]",
                    "int",
                    "Iterable",
                    "Iterable[int]"
                ],
                "user": [
                    "str"
                ],
                "user2": [
                    "str",
                    "rest_framework.tesAPIClient"
                ],
                "user3": [
                    "str"
                ]
            }
        },
        "test_accept_team_invite": {
            "name": "test_accept_team_invite",
            "location": 678,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "team": [
                    "str",
                    "dict"
                ],
                "user": [
                    "rest_framework.tesAPIClient",
                    "core.models.Recipe",
                    "str"
                ],
                "user2": [
                    "str"
                ],
                "user3": [
                    "List[int]",
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "test_decline_team_invite": {
            "name": "test_decline_team_invite",
            "location": 706,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "team": [
                    "str",
                    "dict"
                ],
                "user": [
                    "rest_framework.tesAPIClient",
                    "core.models.Recipe"
                ],
                "user2": [
                    "str"
                ]
            }
        },
        "test_list_team_recipe": {
            "name": "test_list_team_recipe",
            "location": 736,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "core.models.Recipe"
                ],
                "team": [
                    "django.conf.settings.AUTH_USER_MODEL",
                    "Dict[str, Sequence[Any]]"
                ],
                "recipe": [
                    "bool",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "str",
                    "int",
                    "Dict[str, Sequence[Any]]"
                ],
                "user": [],
                "user2": [
                    "str"
                ]
            }
        },
        "test_fetching_team_recipes": {
            "name": "test_fetching_team_recipes",
            "location": 771,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient",
                    "str"
                ],
                "team_with_recipes": [],
                "user": [
                    "str"
                ],
                "user2": [
                    "str"
                ]
            }
        },
        "test_removing_recipe_from_team": {
            "name": "test_removing_recipe_from_team",
            "location": 785,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "str",
                    "rest_framework.tesAPIClient"
                ],
                "team_with_recipes": [],
                "user": [
                    "str",
                    "zerver.models.UserProfile",
                    "core.models.MyUser"
                ]
            }
        },
        "test_creating_team_with_name_and_emails": {
            "name": "test_creating_team_with_name_and_emails",
            "location": 803,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "str"
                ],
                "user": [],
                "user2": [
                    "str"
                ],
                "user3": [
                    "str"
                ]
            }
        },
        "test_demoting_self_in_team_from_admin": {
            "name": "test_demoting_self_in_team_from_admin",
            "location": 831,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient"
                ],
                "team": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "user": []
            }
        },
        "test_deleting_last_membership_of_team": {
            "name": "test_deleting_last_membership_of_team",
            "location": 852,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "bool",
                    "Optional[str]"
                ],
                "team": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "user": []
            }
        }
    },
    "recipeyak-master/backend/core/teams/views.py": {
        "TeamInviteViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 41,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamInviteViewSet.create": {
            "name": "create",
            "location": 45,
            "return": [
                "Dict[str, Any]",
                "List[Dict[str, Any]]",
                "app.models.dto.LoginResponse"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "str",
                    "starlette.requests.Request",
                    "aiohttp.web.Request"
                ],
                "team_pk": [
                    "int",
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "Request",
                    "core.Core"
                ]
            }
        },
        "UserInvitesViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 80,
            "return": [
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserInvitesViewSet.accept": {
            "name": "accept",
            "location": 88,
            "return": [
                "Optional[str]",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "rest_framework.requesRequest",
                    "bool"
                ],
                "pk": [
                    "aiohttp.web.Request",
                    "rest_framework.requesRequest",
                    "bool"
                ]
            }
        },
        "UserInvitesViewSet.decline": {
            "name": "decline",
            "location": 94,
            "return": [
                "Optional[str]",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "rest_framework.requesRequest",
                    "bool"
                ],
                "pk": [
                    "aiohttp.web.Request",
                    "rest_framework.requesRequest",
                    "bool"
                ]
            }
        },
        "TeamViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 112,
            "return": [
                "List[Tuple[str, int]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamViewSet.get_permissions": {
            "name": "get_permissions",
            "location": 117,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamViewSet.create": {
            "name": "create",
            "location": 125,
            "return": [
                "Dict[str, Any]",
                "app.models.dto.LoginResponse",
                "bool",
                "metaswitch_tinder.database.Request"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "MembershipViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 153,
            "return": [
                "str",
                "int",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]",
                "zerver.models.Realm",
                "salon.models.Stylist",
                "pathpy.core.network.Network"
            ],
            "arguments": {
                "self": []
            }
        },
        "MembershipViewSet.get_permissions": {
            "name": "get_permissions",
            "location": 157,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MembershipViewSet.destroy": {
            "name": "destroy",
            "location": 167,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "rest_framework.requesRequest",
                    "bool"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/teams/__init__.py": {},
    "recipeyak-master/backend/core/users/serializers.py": {
        "SessionSerializer.get_device": {
            "name": "get_device",
            "location": 43,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "slice"
                ]
            }
        },
        "SessionSerializer.get_current": {
            "name": "get_current",
            "location": 48,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "tildes.models.topic.Topic",
                    "str",
                    "List[graphx.core.entities.Edge]"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/users/tests.py": {
        "test_create_user": {
            "name": "test_create_user",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_avatar_url": {
            "name": "test_avatar_url",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "user": [
                    "authark.application.domain.common.User",
                    "User",
                    "core.models.MyUser",
                    "zerver.models.UserProfile",
                    "core.models.Recipe"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/users/test_user.py": {
        "test_user_delete": {
            "name": "test_user_delete",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient",
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "user": [
                    "int",
                    "bool"
                ],
                "team": [
                    "rest_framework.tesAPIClient",
                    "str"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/users/test_views.py": {
        "test_detail": {
            "name": "test_detail",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "core.models.Recipe"
                ],
                "user": [
                    "core.models.MyUser",
                    "rest_framework.tesAPIClient",
                    "authark.application.domain.common.User",
                    "str",
                    "zerver.models.UserProfile"
                ],
                "empty_team": [
                    "django.conf.settings.AUTH_USER_MODEL",
                    "core.models.Grouping",
                    "projects.models.Project",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        },
        "matches_shape": {
            "name": "matches_shape",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "res": [
                    "rest_framework.response.Response",
                    "dict",
                    "Dict[str, Any]"
                ],
                "shape": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Type['Declared']"
                ]
            }
        },
        "login_info": {
            "name": "login_info",
            "location": 85,
            "return": [
                "int",
                "djmoney.contrib.exchange.models.Rate",
                "zerver.models.Realm",
                "Exception",
                "tartare.core.models.Job",
                "str"
            ],
            "arguments": {}
        },
        "logged_in_user": {
            "name": "logged_in_user",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "str",
                    "Optional[str]"
                ],
                "login_info": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "test_session_list": {
            "name": "test_session_list",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient",
                    "str"
                ],
                "logged_in_user": [
                    "django.conf.settings.AUTH_USER_MODEL",
                    "str"
                ]
            }
        },
        "test_session_delete_all": {
            "name": "test_session_delete_all",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient"
                ],
                "logged_in_user": [
                    "str"
                ],
                "login_info": [
                    "dict",
                    "bool"
                ]
            }
        },
        "test_session_delete_by_id": {
            "name": "test_session_delete_by_id",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [
                    "rest_framework.tesAPIClient",
                    "List[str]"
                ],
                "logged_in_user": [
                    "django.conf.settings.AUTH_USER_MODEL",
                    "str"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/users/urls.py": {},
    "recipeyak-master/backend/core/users/views.py": {
        "sessions": {
            "name": "sessions",
            "location": 47,
            "return": [
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "request": [
                    "rest_framework.requesRequest",
                    "django.http.HttpRequest"
                ]
            }
        },
        "sessions_detail": {
            "name": "sessions_detail",
            "location": 65,
            "return": [
                "Dict[str, Any]",
                "str",
                "bool"
            ],
            "arguments": {
                "request": [
                    "str",
                    "rest_framework.requesRequest",
                    "Union[dict, list]",
                    "django.http.HttpRequest"
                ],
                "pk": [
                    "str",
                    "rest_framework.requesRequest",
                    "Union[dict, list]",
                    "django.http.HttpRequest"
                ]
            }
        },
        "UserDetailsView.get_object": {
            "name": "get_object",
            "location": 33,
            "return": [
                "int",
                "dict",
                "bool",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserDetailsView.delete": {
            "name": "delete",
            "location": 36,
            "return": [
                "str",
                "zerver.models.UserProfile",
                "dict",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "rest_framework.requesRequest",
                    "str",
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "recipeyak-master/backend/core/users/__init__.py": {},
    "recipeyak-master/backend/s/squawk.py": {
        "is_installed": {
            "name": "is_installed",
            "location": 19,
            "return": [
                "bool",
                "Dict[int, int]",
                "int",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Union[str, Tuple[str, ...]]"
                ]
            }
        },
        "get_migration_id": {
            "name": "get_migration_id",
            "location": 23,
            "return": [
                "pathlib.Path",
                "str",
                "paradigm.catalog.Path"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "get_pr_info": {
            "name": "get_pr_info",
            "location": 34,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "int",
                "str"
            ],
            "arguments": {
                "env": [
                    "Iterable[Dict[str, Any]]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 43,
            "return": [
                "bytes"
            ],
            "arguments": {}
        }
    }
}
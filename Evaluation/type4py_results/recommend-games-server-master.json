{
    "recommend-games-server-master/build.py": {
        "_server_version": {
            "name": "_server_version",
            "location": 119,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "_remove": {
            "name": "_remove",
            "location": 125,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "gitprepare": {
            "name": "gitprepare",
            "location": 134,
            "return": [],
            "arguments": {
                "repo": []
            }
        },
        "gitupdate": {
            "name": "gitupdate",
            "location": 147,
            "return": [],
            "arguments": {}
        },
        "merge": {
            "name": "merge",
            "location": 177,
            "return": [],
            "arguments": {
                "in_paths": [],
                "out_path": []
            }
        },
        "_merge_kwargs": {
            "name": "_merge_kwargs",
            "location": 197,
            "return": [],
            "arguments": {
                "site": [],
                "item": [],
                "in_paths": [],
                "out_path": [],
                "full": []
            }
        },
        "mergebga": {
            "name": "mergebga",
            "location": 232,
            "return": [],
            "arguments": {
                "in_paths": [],
                "out_path": [],
                "full": []
            }
        },
        "mergebgaratings": {
            "name": "mergebgaratings",
            "location": 247,
            "return": [],
            "arguments": {
                "in_paths": [],
                "out_path": [],
                "full": []
            }
        },
        "mergebgg": {
            "name": "mergebgg",
            "location": 267,
            "return": [],
            "arguments": {
                "in_paths": [],
                "out_path": [],
                "full": []
            }
        },
        "mergebggusers": {
            "name": "mergebggusers",
            "location": 273,
            "return": [],
            "arguments": {
                "in_paths": [],
                "out_path": [],
                "full": []
            }
        },
        "mergebggratings": {
            "name": "mergebggratings",
            "location": 292,
            "return": [],
            "arguments": {
                "in_paths": [],
                "out_path": [],
                "full": []
            }
        },
        "mergebggrankings": {
            "name": "mergebggrankings",
            "location": 311,
            "return": [],
            "arguments": {
                "in_paths": [],
                "out_path": [],
                "full": [],
                "days": []
            }
        },
        "mergebgghotness": {
            "name": "mergebgghotness",
            "location": 349,
            "return": [],
            "arguments": {
                "in_paths": [],
                "out_path": [],
                "full": [],
                "days": []
            }
        },
        "mergebggabstract": {
            "name": "mergebggabstract",
            "location": 384,
            "return": [],
            "arguments": {
                "in_paths": [],
                "out_path": [],
                "full": [],
                "days": []
            }
        },
        "mergebggchildren": {
            "name": "mergebggchildren",
            "location": 422,
            "return": [],
            "arguments": {
                "in_paths": [],
                "out_path": [],
                "full": [],
                "days": []
            }
        },
        "mergebggcustomizable": {
            "name": "mergebggcustomizable",
            "location": 460,
            "return": [],
            "arguments": {
                "in_paths": [],
                "out_path": [],
                "full": [],
                "days": []
            }
        },
        "mergebggfamily": {
            "name": "mergebggfamily",
            "location": 498,
            "return": [],
            "arguments": {
                "in_paths": [],
                "out_path": [],
                "full": [],
                "days": []
            }
        },
        "mergebggparty": {
            "name": "mergebggparty",
            "location": 536,
            "return": [],
            "arguments": {
                "in_paths": [],
                "out_path": [],
                "full": [],
                "days": []
            }
        },
        "mergebggstrategy": {
            "name": "mergebggstrategy",
            "location": 574,
            "return": [],
            "arguments": {
                "in_paths": [],
                "out_path": [],
                "full": [],
                "days": []
            }
        },
        "mergebggthematic": {
            "name": "mergebggthematic",
            "location": 612,
            "return": [],
            "arguments": {
                "in_paths": [],
                "out_path": [],
                "full": [],
                "days": []
            }
        },
        "mergebggwar": {
            "name": "mergebggwar",
            "location": 650,
            "return": [],
            "arguments": {
                "in_paths": [],
                "out_path": [],
                "full": [],
                "days": []
            }
        },
        "mergedbpedia": {
            "name": "mergedbpedia",
            "location": 688,
            "return": [],
            "arguments": {
                "in_paths": [],
                "out_path": [],
                "full": []
            }
        },
        "mergeluding": {
            "name": "mergeluding",
            "location": 696,
            "return": [],
            "arguments": {
                "in_paths": [],
                "out_path": [],
                "full": []
            }
        },
        "mergespielen": {
            "name": "mergespielen",
            "location": 704,
            "return": [],
            "arguments": {
                "in_paths": [],
                "out_path": [],
                "full": []
            }
        },
        "mergewikidata": {
            "name": "mergewikidata",
            "location": 712,
            "return": [],
            "arguments": {
                "in_paths": [],
                "out_path": [],
                "full": []
            }
        },
        "mergenews": {
            "name": "mergenews",
            "location": 722,
            "return": [],
            "arguments": {
                "in_paths": [],
                "out_path": []
            }
        },
        "mergeall": {
            "name": "mergeall",
            "location": 790,
            "return": [],
            "arguments": {}
        },
        "split": {
            "name": "split",
            "location": 795,
            "return": [],
            "arguments": {
                "in_file": [],
                "out_dir": [],
                "trie_file": [],
                "fields": [],
                "limit": [],
                "construct": []
            }
        },
        "link": {
            "name": "link",
            "location": 819,
            "return": [],
            "arguments": {
                "gazetteer": [],
                "paths": [],
                "training_file": [],
                "manual_labelling": [],
                "threshold": [],
                "output": [],
                "pretty_print": []
            }
        },
        "labellinks": {
            "name": "labellinks",
            "location": 855,
            "return": [],
            "arguments": {
                "gazetteer": [],
                "paths": [],
                "training_file": [],
                "threshold": [],
                "output": [],
                "pretty_print": []
            }
        },
        "_train": {
            "name": "_train",
            "location": 881,
            "return": [],
            "arguments": {
                "recommender_cls": [],
                "games_file": [],
                "ratings_file": [],
                "out_path": [],
                "users": [],
                "max_iterations": []
            }
        },
        "_min_votes_from_date": {
            "name": "_min_votes_from_date",
            "location": 914,
            "return": [],
            "arguments": {
                "first_date": [],
                "second_date": [],
                "seconds_per_step": [],
                "max_value": [],
                "min_value": []
            }
        },
        "trainbgg": {
            "name": "trainbgg",
            "location": 956,
            "return": [],
            "arguments": {
                "games_file": [],
                "ratings_file": [],
                "out_path": [],
                "users": [],
                "max_iterations": [],
                "min_votes": [],
                "min_votes_anchor_date": [],
                "min_votes_seconds_per_step": [],
                "min_votes_max_value": []
            }
        },
        "trainbga": {
            "name": "trainbga",
            "location": 996,
            "return": [],
            "arguments": {
                "games_file": [],
                "ratings_file": [],
                "out_path": [],
                "users": [],
                "max_iterations": []
            }
        },
        "train": {
            "name": "train",
            "location": 1015,
            "return": [],
            "arguments": {}
        },
        "_save_ranking": {
            "name": "_save_ranking",
            "location": 1019,
            "return": [],
            "arguments": {
                "recommender": [],
                "dst_dir": [],
                "file_name": [],
                "similarity_model": []
            }
        },
        "_save_rg_ranking": {
            "name": "_save_rg_ranking",
            "location": 1036,
            "return": [],
            "arguments": {
                "recommender": [],
                "path_ratings": [],
                "top": [],
                "min_ratings": [],
                "dst_dir": [],
                "file_name": []
            }
        },
        "savebggrankings": {
            "name": "savebggrankings",
            "location": 1091,
            "return": [],
            "arguments": {
                "recommender_path": [],
                "ratings_path": [],
                "dst_dir": [],
                "file_name": [],
                "top_k_games": [],
                "min_ratings": []
            }
        },
        "savebgarankings": {
            "name": "savebgarankings",
            "location": 1136,
            "return": [],
            "arguments": {
                "recommender_path": [],
                "dst_dir": [],
                "file_name": []
            }
        },
        "saverankings": {
            "name": "saverankings",
            "location": 1161,
            "return": [],
            "arguments": {}
        },
        "weeklycharts": {
            "name": "weeklycharts",
            "location": 1166,
            "return": [],
            "arguments": {
                "src_file": [],
                "dst_dir": [],
                "dst_file": [],
                "overwrite": []
            }
        },
        "cleandata": {
            "name": "cleandata",
            "location": 1198,
            "return": [],
            "arguments": {
                "src_dir": [],
                "bk_dir": []
            }
        },
        "migrate": {
            "name": "migrate",
            "location": 1214,
            "return": [],
            "arguments": {}
        },
        "filldb": {
            "name": "filldb",
            "location": 1221,
            "return": [],
            "arguments": {
                "src_dir": [],
                "rec_dir": [],
                "ranking_date": [],
                "dry_run": []
            }
        },
        "kennerspiel": {
            "name": "kennerspiel",
            "location": 1253,
            "return": [],
            "arguments": {
                "model_path": [],
                "batch_size": [],
                "dry_run": []
            }
        },
        "compressdb": {
            "name": "compressdb",
            "location": 1275,
            "return": [],
            "arguments": {
                "db_file": []
            }
        },
        "cpdirs": {
            "name": "cpdirs",
            "location": 1281,
            "return": [],
            "arguments": {
                "src_dir": [],
                "dst_dir": [],
                "sub_dirs": []
            }
        },
        "cpdirsbga": {
            "name": "cpdirsbga",
            "location": 1296,
            "return": [],
            "arguments": {
                "src_dir": [],
                "dst_dir": [],
                "sub_dirs": []
            }
        },
        "dateflag": {
            "name": "dateflag",
            "location": 1306,
            "return": [],
            "arguments": {
                "dst": [],
                "date": []
            }
        },
        "bggranking": {
            "name": "bggranking",
            "location": 1318,
            "return": [],
            "arguments": {
                "dst": []
            }
        },
        "splitrankings": {
            "name": "splitrankings",
            "location": 1330,
            "return": [],
            "arguments": {
                "src": [],
                "dst_dir": [],
                "dst_file": [],
                "overwrite": []
            }
        },
        "splithotness": {
            "name": "splithotness",
            "location": 1347,
            "return": [],
            "arguments": {
                "src": [],
                "dst_dir": [],
                "dst_file": [],
                "overwrite": []
            }
        },
        "splitabstract": {
            "name": "splitabstract",
            "location": 1365,
            "return": [],
            "arguments": {
                "src": [],
                "dst_dir": [],
                "dst_file": [],
                "overwrite": []
            }
        },
        "splitchildren": {
            "name": "splitchildren",
            "location": 1382,
            "return": [],
            "arguments": {
                "src": [],
                "dst_dir": [],
                "dst_file": [],
                "overwrite": []
            }
        },
        "splitcustomizable": {
            "name": "splitcustomizable",
            "location": 1399,
            "return": [],
            "arguments": {
                "src": [],
                "dst_dir": [],
                "dst_file": [],
                "overwrite": []
            }
        },
        "splitfamily": {
            "name": "splitfamily",
            "location": 1418,
            "return": [],
            "arguments": {
                "src": [],
                "dst_dir": [],
                "dst_file": [],
                "overwrite": []
            }
        },
        "splitparty": {
            "name": "splitparty",
            "location": 1435,
            "return": [],
            "arguments": {
                "src": [],
                "dst_dir": [],
                "dst_file": [],
                "overwrite": []
            }
        },
        "splitstrategy": {
            "name": "splitstrategy",
            "location": 1452,
            "return": [],
            "arguments": {
                "src": [],
                "dst_dir": [],
                "dst_file": [],
                "overwrite": []
            }
        },
        "splitthematic": {
            "name": "splitthematic",
            "location": 1469,
            "return": [],
            "arguments": {
                "src": [],
                "dst_dir": [],
                "dst_file": [],
                "overwrite": []
            }
        },
        "splitwar": {
            "name": "splitwar",
            "location": 1486,
            "return": [],
            "arguments": {
                "src": [],
                "dst_dir": [],
                "dst_file": [],
                "overwrite": []
            }
        },
        "splitall": {
            "name": "splitall",
            "location": 1514,
            "return": [],
            "arguments": {}
        },
        "historicalbggrankings": {
            "name": "historicalbggrankings",
            "location": 1519,
            "return": [],
            "arguments": {
                "repo": [],
                "dst": [],
                "script": [],
                "overwrite": []
            }
        },
        "fillrankingdb": {
            "name": "fillrankingdb",
            "location": 1565,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "updatecount": {
            "name": "updatecount",
            "location": 1571,
            "return": [],
            "arguments": {
                "dst": [],
                "template": [],
                "paths_lines": [],
                "line_glob": [],
                "paths_files": [],
                "file_glob": []
            }
        },
        "makecsvs": {
            "name": "makecsvs",
            "location": 1606,
            "return": [],
            "arguments": {
                "in_dir": [],
                "glob": [],
                "file_ext": [],
                "columns": [],
                "joiner": [],
                "exclude": []
            }
        },
        "referencecsvs": {
            "name": "referencecsvs",
            "location": 1644,
            "return": [],
            "arguments": {
                "in_file": [],
                "out_dir": [],
                "out_file": []
            }
        },
        "sitemap": {
            "name": "sitemap",
            "location": 1660,
            "return": [],
            "arguments": {
                "url": [],
                "dst": [],
                "limit": []
            }
        },
        "builddb": {
            "name": "builddb",
            "location": 1683,
            "return": [],
            "arguments": {}
        },
        "builddbfull": {
            "name": "builddbfull",
            "location": 1699,
            "return": [],
            "arguments": {}
        },
        "_sync_data": {
            "name": "_sync_data",
            "location": 1703,
            "return": [],
            "arguments": {
                "src": [],
                "dst": [],
                "retries": []
            }
        },
        "syncdata": {
            "name": "syncdata",
            "location": 1729,
            "return": [],
            "arguments": {
                "src": [],
                "bucket": [],
                "retries": []
            }
        },
        "releasedb": {
            "name": "releasedb",
            "location": 1735,
            "return": [],
            "arguments": {}
        },
        "releasedbfull": {
            "name": "releasedbfull",
            "location": 1740,
            "return": [],
            "arguments": {}
        },
        "cleanstatic": {
            "name": "cleanstatic",
            "location": 1745,
            "return": [],
            "arguments": {
                "base_dir": [],
                "sub_dirs": []
            }
        },
        "minify": {
            "name": "minify",
            "location": 1755,
            "return": [],
            "arguments": {
                "src": [],
                "dst": []
            }
        },
        "collectstatic": {
            "name": "collectstatic",
            "location": 1764,
            "return": [],
            "arguments": {
                "delete": []
            }
        },
        "buildserver": {
            "name": "buildserver",
            "location": 1782,
            "return": [],
            "arguments": {
                "images": [],
                "tags": []
            }
        },
        "pushserver": {
            "name": "pushserver",
            "location": 1811,
            "return": [],
            "arguments": {
                "image": [],
                "version": []
            }
        },
        "releaseserver": {
            "name": "releaseserver",
            "location": 1820,
            "return": [],
            "arguments": {
                "app_file": [],
                "image": [],
                "version": []
            }
        },
        "build": {
            "name": "build",
            "location": 1847,
            "return": [],
            "arguments": {}
        },
        "buildfull": {
            "name": "buildfull",
            "location": 1852,
            "return": [],
            "arguments": {}
        },
        "release": {
            "name": "release",
            "location": 1857,
            "return": [],
            "arguments": {}
        },
        "releasefull": {
            "name": "releasefull",
            "location": 1862,
            "return": [],
            "arguments": {}
        },
        "lintshell": {
            "name": "lintshell",
            "location": 1867,
            "return": [],
            "arguments": {
                "base_dir": []
            }
        },
        "lintdocker": {
            "name": "lintdocker",
            "location": 1873,
            "return": [],
            "arguments": {
                "base_dir": []
            }
        },
        "lintpy": {
            "name": "lintpy",
            "location": 1881,
            "return": [],
            "arguments": {}
        },
        "linthtml": {
            "name": "linthtml",
            "location": 1890,
            "return": [],
            "arguments": {}
        },
        "lintjs": {
            "name": "lintjs",
            "location": 1898,
            "return": [],
            "arguments": {}
        },
        "lintcss": {
            "name": "lintcss",
            "location": 1906,
            "return": [],
            "arguments": {}
        },
        "lint": {
            "name": "lint",
            "location": 1913,
            "return": [],
            "arguments": {}
        }
    },
    "recommend-games-server-master/manage.py": {},
    "recommend-games-server-master/games/admin.py": {},
    "recommend-games-server-master/games/apps.py": {},
    "recommend-games-server-master/games/models.py": {
        "Ranking.__str__": {
            "name": "__str__",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.highest_ranking": {
            "name": "highest_ranking",
            "location": 125,
            "return": [
                "str",
                "bytes",
                "zerver.models.Realm",
                "bool"
            ],
            "arguments": {
                "self": [],
                "ranking_type": [
                    "BaseException",
                    "Exception",
                    "Type[BaseException]",
                    "type",
                    "Type[Any]"
                ]
            }
        },
        "Game.highest_ranking_bgg": {
            "name": "highest_ranking_bgg",
            "location": 135,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.highest_ranking_factor": {
            "name": "highest_ranking_factor",
            "location": 140,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.highest_ranking_similarity": {
            "name": "highest_ranking_similarity",
            "location": 145,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.__str__": {
            "name": "__str__",
            "location": 155,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.__str__": {
            "name": "__str__",
            "location": 170,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameType.__str__": {
            "name": "__str__",
            "location": 185,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Category.__str__": {
            "name": "__str__",
            "location": 200,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mechanic.__str__": {
            "name": "__str__",
            "location": 215,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.__str__": {
            "name": "__str__",
            "location": 231,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.__str__": {
            "name": "__str__",
            "location": 251,
            "return": [
                "int",
                "bool",
                "str",
                "Union[int, float]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "recommend-games-server-master/games/permissions.py": {
        "ReadOnly.has_permission": {
            "name": "has_permission",
            "location": 13,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "Union[None, str]",
                    "Optional[str]",
                    "Callable"
                ],
                "view": []
            }
        }
    },
    "recommend-games-server-master/games/serializers.py": {},
    "recommend-games-server-master/games/urls.py": {},
    "recommend-games-server-master/games/utils.py": {
        "format_from_path": {
            "name": "format_from_path",
            "location": 23,
            "return": [
                "str",
                "Optional[str]",
                "pathlib.Path",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "serialize_date": {
            "name": "serialize_date",
            "location": 33,
            "return": [
                "Dict[str, int]",
                "int",
                "pathlib.Path",
                "str"
            ],
            "arguments": {
                "date": [
                    "str",
                    "datetime.date",
                    "int",
                    "Optional[str]",
                    "datetime.datetime.datetime"
                ],
                "tzinfo": [
                    "str",
                    "datetime.datetime",
                    "int",
                    "datetime.date",
                    "Optional[str]"
                ]
            }
        },
        "load_recommender": {
            "name": "load_recommender",
            "location": 40,
            "return": [
                "str",
                "Optional[str]",
                "pathlib.Path",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path",
                    "Iterable[str]"
                ],
                "site": [
                    "str",
                    "norfs.fs.base.Path",
                    "pathlib.Path"
                ]
            }
        },
        "pubsub_client": {
            "name": "pubsub_client",
            "location": 58,
            "return": [
                "Callable[[List, bool], None]",
                "dict"
            ],
            "arguments": {}
        },
        "pubsub_push": {
            "name": "pubsub_push",
            "location": 69,
            "return": [
                "Any",
                "Union[str, pathlib.Path, None]",
                "Optional[Any]",
                "Optional[int]",
                "str",
                "bool",
                "Optional[Callable[[pathlib.Path], int]]"
            ],
            "arguments": {}
        },
        "model_updated_at": {
            "name": "model_updated_at",
            "location": 104,
            "return": [
                "str",
                "datetime.datetime",
                "int",
                "float",
                "Optional[str]",
                "datetime.date"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        },
        "parse_version": {
            "name": "parse_version",
            "location": 116,
            "return": [
                "int",
                "str",
                "Optional[float]"
            ],
            "arguments": {
                "version": [
                    "str"
                ]
            }
        },
        "project_version": {
            "name": "project_version",
            "location": 126,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[Any]",
                "list"
            ],
            "arguments": {
                "file_path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "server_version": {
            "name": "server_version",
            "location": 138,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "file_path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "save_recommender_ranking": {
            "name": "save_recommender_ranking",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "recommender": [
                    "str",
                    "bool",
                    "Callable[[str], None]",
                    "Dict[str, str]"
                ],
                "dst": [
                    "str",
                    "bool",
                    "pathlib.Path",
                    "Optional[Any]"
                ],
                "similarity_model": [
                    "str",
                    "bool",
                    "Callable[[str], None]",
                    "Dict[str, str]"
                ]
            }
        },
        "count_lines": {
            "name": "count_lines",
            "location": 165,
            "return": [
                "Optional[str]",
                "Sequence[str]",
                "bool",
                "Optional[int]",
                "Optional[bool]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "count_files": {
            "name": "count_files",
            "location": 171,
            "return": [
                "str",
                "bool",
                "Callable[[str], None]",
                "Optional[bool]"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "Union[pathlib.Path, str]",
                    "cerulean.path.Path"
                ],
                "glob": [
                    "str"
                ]
            }
        },
        "count_lines_and_files": {
            "name": "count_lines_and_files",
            "location": 178,
            "return": [
                "str",
                "int",
                "bool",
                "Dict[str, Callable[[], Any]]",
                "Dict[str, Tuple[int, int]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "paths_lines": [
                    "str",
                    "pathlib.Path",
                    "Optional[int]",
                    "bool"
                ],
                "paths_files": [
                    "str",
                    "pathlib.Path",
                    "Optional[int]",
                    "bool"
                ],
                "line_glob": [
                    "List[str]",
                    "norfs.fs.base.Path",
                    "Dict[str, Any]",
                    "list",
                    "pathlib.Path",
                    "Iterable[str]",
                    "Optional[str]",
                    "Final[pathlib.Path]"
                ],
                "file_glob": [
                    "pathlib.Path",
                    "str",
                    "Optional[str]",
                    "Set[str]"
                ]
            }
        },
        "_process_value": {
            "name": "_process_value",
            "location": 214,
            "return": [
                "str",
                "int",
                "float",
                "dict"
            ],
            "arguments": {
                "value": [
                    "Union[T, Sequence[T]]",
                    "Optional[dict]",
                    "float",
                    "Optional[str]",
                    "Optional[List]"
                ],
                "joiner": [
                    "str",
                    "Set[int]",
                    "Optional[List[str]]",
                    "Type"
                ]
            }
        },
        "_process_row": {
            "name": "_process_row",
            "location": 228,
            "return": [
                "Set[str]",
                "Dict[str, str]",
                "Dict[str, List[Callable]]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "row": [
                    "str",
                    "List[int]",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "dict"
                ],
                "columns": [
                    "int",
                    "List[str]"
                ],
                "joiner": [
                    "int",
                    "bytes",
                    "str",
                    "Dict[Any, str]"
                ]
            }
        },
        "jl_to_csv": {
            "name": "jl_to_csv",
            "location": 238,
            "return": [
                ""
            ],
            "arguments": {
                "in_path": [
                    "str",
                    "Union[pathlib.Path, str]",
                    "bool",
                    "pathlib.Path",
                    "Union[str, pathlib.Path]"
                ],
                "out_path": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "int"
                ],
                "columns": [
                    "bool",
                    "List[str]",
                    "str",
                    "Optional[Sequence[str]]",
                    "List[Dict]"
                ],
                "joiner": [
                    "int",
                    "Iterable[str]"
                ]
            }
        },
        "Timer.__init__": {
            "name": "__init__",
            "location": 267,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "bool"
                ],
                "logger": [
                    "str",
                    "logging.Logger",
                    "List[str]",
                    "Tuple[Tuple[str, ...]]"
                ]
            }
        },
        "Timer.__enter__": {
            "name": "__enter__",
            "location": 272,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.__exit__": {
            "name": "__exit__",
            "location": 276,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "recommend-games-server-master/games/views.py": {
        "_exclude": {
            "name": "_exclude",
            "location": 163,
            "return": [
                "bool",
                "Optional[int]",
                "Optional[str]",
                "Optional[float]"
            ],
            "arguments": {
                "user": [
                    "zerver.models.Realm",
                    "int",
                    "mapistar.permissions.ActesPermissions",
                    "str"
                ],
                "ids": [
                    "str",
                    "List[str]",
                    "int",
                    "List['Token']"
                ]
            }
        },
        "_parse_parts": {
            "name": "_parse_parts",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        },
        "_parse_ints": {
            "name": "_parse_ints",
            "location": 204,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        },
        "_extract_params": {
            "name": "_extract_params",
            "location": 210,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "key": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "parser": [
                    "str",
                    "Optional[str]",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "_light_games": {
            "name": "_light_games",
            "location": 229,
            "return": [
                "str",
                "bool",
                "tartare.core.models.DataSource",
                "Dict[str, int]"
            ],
            "arguments": {
                "bgg_ids": [
                    "str",
                    "int"
                ]
            }
        },
        "_light_games_dict": {
            "name": "_light_games_dict",
            "location": 239,
            "return": [
                "List[str]",
                "List[\"Variable\"]",
                "List[Tuple[str, str, bool]]"
            ],
            "arguments": {
                "bgg_ids": [
                    "int",
                    "str"
                ]
            }
        },
        "_add_games": {
            "name": "_add_games",
            "location": 244,
            "return": [
                "str",
                "int",
                "Mapping[str, Any]",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "bool",
                    "List[str]",
                    "int",
                    "Optional[List[str]]"
                ],
                "bgg_ids": [
                    "str"
                ],
                "key": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "bytes"
                ]
            }
        },
        "redirect_view": {
            "name": "redirect_view",
            "location": 1058,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "dict",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "PermissionsModelViewSet.get_permissions": {
            "name": "get_permissions",
            "location": 75,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PermissionsModelViewSet.handle_exception": {
            "name": "handle_exception",
            "location": 82,
            "return": [
                "str",
                "int",
                "bytes",
                "list",
                "fonduer.parser.models.Document"
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "dict",
                    "List[dict]",
                    "zam_repondeur.models.Amendement"
                ]
            }
        },
        "GamesActionViewSet.games": {
            "name": "games",
            "location": 93,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "dict",
                    "Optional[django.db.models.Model]",
                    "django.http.requesHttpRequest",
                    "django.db.models.Model"
                ],
                "pk": [
                    "django.http.HttpRequest",
                    "dict",
                    "Optional[django.db.models.Model]",
                    "django.http.requesHttpRequest",
                    "django.db.models.Model"
                ]
            }
        },
        "BodyParamsPagination.get_next_link": {
            "name": "get_next_link",
            "location": 118,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BodyParamsPagination.get_previous_link": {
            "name": "get_previous_link",
            "location": 133,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameViewSet._excluded_games": {
            "name": "_excluded_games",
            "location": 347,
            "return": [
                "int",
                "type"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "dict",
                    "models.User",
                    "django.contrib.auth.models.User",
                    "users.models.JustfixUser",
                    "core.models.User",
                    "medtagger.database.models.Task"
                ],
                "params": [
                    "dict",
                    "models.User",
                    "tracim.models.auth.User"
                ],
                "include": [
                    "mediaarchiver.models.Account",
                    "models.User",
                    "reader_server.types.User",
                    "List[str]",
                    "str"
                ],
                "exclude": [
                    "bob_emploi.frontend.api.user_pb2.User",
                    "dict",
                    "datetime.datetime",
                    "bool",
                    "flask.Response"
                ]
            }
        },
        "GameViewSet._recommend_rating": {
            "name": "_recommend_rating",
            "location": 387,
            "return": [
                "cmk.utils.type_defs.EventRule",
                "Hashable",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "accounts.models.User",
                    "datetime.datetime",
                    "django.db.models.QuerySet",
                    "user_models.User",
                    "Callable",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                    "bool"
                ],
                "recommender": [
                    "asgard.models.user.User",
                    "core.models.User",
                    "lms.lmsdb.models.User",
                    "lms.lmsdb.models.Solution",
                    "User",
                    "server.models.User",
                    "daylighdb.models.User"
                ],
                "params": [
                    "Dict[str, Any]",
                    "dict",
                    "tracim.models.auth.User"
                ],
                "include": [
                    "Dict[str, Any]",
                    "dict",
                    "int",
                    "flask.Response",
                    "Union[Dict, List]",
                    "str"
                ],
                "exclude": [
                    "raiden.utils.Address",
                    "raiden.utils.TokenNetworkAddress",
                    "bob_emploi.frontend.api.user_pb2.User",
                    "List[src.main.core.models.area.Area]",
                    "float"
                ]
            }
        },
        "GameViewSet._recommend_group_rating": {
            "name": "_recommend_group_rating",
            "location": 422,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "users": [
                    "int"
                ],
                "recommender": [
                    "zerver.models.UserProfile",
                    "Union[str, datetime.datetime, None]",
                    "bob_emploi.frontend.api.user_pb2.User",
                    "Dict[str, Any]",
                    "int",
                    "zerver.models.Recipient",
                    "mypy.types.Union[str, datetime.datetime, None]"
                ],
                "params": [
                    "str"
                ]
            }
        },
        "GameViewSet._recommend_similar": {
            "name": "_recommend_similar",
            "location": 464,
            "return": [
                "bool",
                "str",
                "utils.diskstaSection",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "like": [
                    "Dict[str, float]",
                    "str",
                    "List[Dict]",
                    "int",
                    "Iterable[zam_repondeur.models.Amendement]"
                ],
                "recommender": [
                    "int",
                    "Dict[str, Any]",
                    "Dict[int, Dict[int, Any]]"
                ]
            }
        },
        "GameViewSet.recommend": {
            "name": "recommend",
            "location": 485,
            "return": [
                "str",
                "Dict[str, Any]",
                "guillotina.response.Response",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "GameViewSet._recommend_group_rating_bga": {
            "name": "_recommend_group_rating_bga",
            "location": 597,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "users": [
                    "str",
                    "zerver.models.UserProfile"
                ],
                "recommender": [
                    "str",
                    "zerver.models.UserProfile"
                ],
                "params": [
                    "str"
                ]
            }
        },
        "GameViewSet.recommend_bga": {
            "name": "recommend_bga",
            "location": 630,
            "return": [
                "bool",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "app.models.dto.RenewRequest",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "GameViewSet.similar": {
            "name": "similar",
            "location": 667,
            "return": [
                "Optional[str]",
                "werkzeug.exceptions.HTTPException",
                "salon.models.Stylist",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ],
                "pk": [
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest",
                    "int"
                ]
            }
        },
        "GameViewSet.similar_bga": {
            "name": "similar_bga",
            "location": 712,
            "return": [
                "dict",
                "Dict[str, float]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "rest_framework.requesRequest",
                    "bool"
                ],
                "pk": [
                    "int",
                    "salon.models.Stylist"
                ]
            }
        },
        "GameViewSet.rankings": {
            "name": "rankings",
            "location": 733,
            "return": [
                "Optional[str]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest",
                    "dict"
                ],
                "pk": [
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest",
                    "dict"
                ]
            }
        },
        "GameViewSet.history": {
            "name": "history",
            "location": 754,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "GameViewSet.updated_at": {
            "name": "updated_at",
            "location": 800,
            "return": [
                "Dict[str, Any]",
                "bool",
                "axion.utils.types.AnyCallable",
                "Dict[str, str]",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "int"
                ]
            }
        },
        "GameViewSet.version": {
            "name": "version",
            "location": 808,
            "return": [
                "int",
                "Optional[str]",
                "Dict[str, str]",
                "List[str]",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "GameViewSet.stats": {
            "name": "stats",
            "location": 813,
            "return": [
                "List[str]",
                "int",
                "bytes",
                "Dict[str, str]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "Exception"
                ]
            }
        },
        "PersonViewSet.games": {
            "name": "games",
            "location": 865,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict",
                    "django.http.HttpRequest"
                ],
                "pk": [
                    "django.http.HttpRequest",
                    "dict",
                    "Optional[django.db.models.Model]",
                    "django.http.requesHttpRequest",
                    "django.db.models.Model"
                ]
            }
        },
        "UserViewSet.stats": {
            "name": "stats",
            "location": 936,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "viewer.models.Archive",
                    "Tuple[int]",
                    "dict"
                ],
                "pk": [
                    "rest_framework.requesRequest",
                    "bool"
                ]
            }
        },
        "CollectionViewSet.get_permissions": {
            "name": "get_permissions",
            "location": 970,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RankingViewSet.dates": {
            "name": "dates",
            "location": 1019,
            "return": [
                "str",
                "bool",
                "list",
                "Optional[cmk.utils.type_defs.UserId]",
                "core.models.User",
                "asgard.models.user.User"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bytes",
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "RankingViewSet.games": {
            "name": "games",
            "location": 1032,
            "return": [
                "str",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest",
                    "dict"
                ]
            }
        }
    },
    "recommend-games-server-master/games/__init__.py": {},
    "recommend-games-server-master/games/management/__init__.py": {},
    "recommend-games-server-master/games/management/commands/bggranking.py": {
        "_write_games": {
            "name": "_write_games",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "games": [
                    "str",
                    "Optional[str]"
                ],
                "output": [
                    "bool",
                    "str",
                    "int",
                    "List[str]",
                    "TextIO"
                ]
            }
        },
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "recommend-games-server-master/games/management/commands/charts.py": {
        "_process_ratings": {
            "name": "_process_ratings",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "lines": [
                    "str",
                    "tuple",
                    "Dict[str, str]",
                    "Optional[str]"
                ],
                "keys": [
                    "str",
                    "list",
                    "tests.utils.Strategy[paradigm.hints.Domain]",
                    "core.forms.RegistrationForm",
                    "T",
                    "\"PMap[Tk, Tv]\""
                ]
            }
        },
        "_ratings_data": {
            "name": "_ratings_data",
            "location": 42,
            "return": [
                "Dict[str, List[int]]",
                "dict",
                "str",
                "pathlib.Path",
                "Optional[float]",
                "bytes"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "str",
                    "Union[pathlib.Path, str]",
                    "path.Path"
                ],
                "max_rows": [
                    "int",
                    "T",
                    "Dict[Tuple[int, ...], int]"
                ]
            }
        },
        "exp_decay": {
            "name": "exp_decay",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "dates": [
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]",
                    "datetime.date",
                    "str",
                    "datetime.datetime"
                ],
                "anchor": [
                    "datetime.date",
                    "datetime.datetime",
                    "str",
                    "Optional[datetime.datetime]"
                ],
                "halflife": [
                    "int",
                    "float",
                    "Optional[str]",
                    "Union[int, float]",
                    "bool",
                    "str"
                ]
            }
        },
        "calculate_charts": {
            "name": "calculate_charts",
            "location": 63,
            "return": [
                "str",
                "Iterable[numpy.dtype]",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "ratings": [
                    "datetime.date",
                    "datetime.datetime",
                    "Sequence[str]",
                    "Optional[datetime.date]",
                    "int",
                    "str"
                ],
                "end_date": [
                    "str",
                    "datetime.date",
                    "datetime.datetime",
                    "Optional[datetime.date]",
                    "int"
                ],
                "start_date": [
                    "int",
                    "datetime.datetime",
                    "float",
                    "Optional[str]",
                    "datetime.date",
                    "bool"
                ],
                "days": [
                    "datetime.date",
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "percentiles": [
                    "str",
                    "pandas.DataFrame",
                    "int",
                    "float"
                ],
                "min_raw_score": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "decay": [
                    "float",
                    "str",
                    "List[dict]",
                    "List[str]",
                    "datetime.datetime",
                    "bool"
                ]
            }
        },
        "_pairwise": {
            "name": "_pairwise",
            "location": 152,
            "return": [
                "Set[cmk.utils.type_defs.HostName]",
                "str",
                "Dict[str, List[Any]]",
                "Sequence['cirq.Qid']",
                "Optional[float]",
                "pandas.DataFrame",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "str",
                    "Iterable",
                    "numpy.ndarray",
                    "Iterable[T]"
                ]
            }
        },
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "recommend-games-server-master/games/management/commands/filldb.py": {
        "_load_json": {
            "name": "_load_json",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "_load_jl": {
            "name": "_load_jl",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "_load": {
            "name": "_load",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_find_latest_ranking": {
            "name": "_find_latest_ranking",
            "location": 56,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "path_dir": [
                    "pathlib.Path",
                    "pathlib.PurePath"
                ],
                "glob": [
                    "str",
                    "Union[pathlib.Path, str]",
                    "waterbutler.core.path.WaterButlerPath",
                    "pathlib.Path",
                    "Union[str, pathlib.Path]"
                ],
                "star_percentiles": [
                    "str",
                    "List[str]",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "_rating_data": {
            "name": "_rating_data",
            "location": 81,
            "return": [
                "str",
                "set",
                "List[bool]",
                "Optional[str]",
                "bool",
                "Tuple[str, Any]"
            ],
            "arguments": {
                "recommender_path": [
                    "str",
                    "bool",
                    "Callable",
                    "Union[pathlib.Path, str]"
                ],
                "pk_field": [
                    "str",
                    "int",
                    "cmk.utils.type_defs.CheckPluginName.Str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Dict[str, Dict[str, Any]]",
                    "bool",
                    "Dict[str, str]"
                ],
                "rankings_path": [
                    "str",
                    "Optional[str]",
                    "Optional[list]",
                    "pymatgen.core.composition.Composition"
                ],
                "r_g_ranking_effective_date": [
                    "str",
                    "bool",
                    "Optional[zerver.models.UserProfile]",
                    "Dict[str, Any]",
                    "Dict[str, magic.models.Card]",
                    "Optional[datetime.datetime]",
                    "datetime.datetime"
                ]
            }
        },
        "_parse_item": {
            "name": "_parse_item",
            "location": 139,
            "return": [
                "bool",
                "zerver.models.Realm",
                "int",
                "Dict[str, int]"
            ],
            "arguments": {
                "item": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[Optional]",
                    "tracim.models.data.Content",
                    "Optional[cmk.utils.structured_data.StructuredDataTree]",
                    "List[str]"
                ],
                "fields": [
                    "bool",
                    "Callable",
                    "str",
                    "Dict[str, Any]",
                    "Optional[Optional]",
                    "list",
                    "List[Dict[str, Any]]",
                    "Tuple[models.snippeSnippetVersion, events.snippeSnippetCreated]"
                ],
                "fields_mapping": [
                    "dict",
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "Mapping[str, str]"
                ],
                "item_mapping": [
                    "dict",
                    "Dict[str, str]",
                    "list",
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "_parse_value_id": {
            "name": "_parse_value_id",
            "location": 161,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "string": [
                    "str",
                    "Pattern"
                ],
                "regex": [
                    "str",
                    "Pattern"
                ]
            }
        },
        "_make_instances": {
            "name": "_make_instances",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "model": [
                    "bool",
                    "Dict[str, Dict[str, Any]]",
                    "str",
                    "users.models.JustfixUser",
                    "db.models.Region"
                ],
                "items": [
                    "dict",
                    "Dict[str, Set[str]]",
                    "Dict[str, piccolo.conf.apps.MigrationModule]",
                    "Dict[str, str]",
                    "DefaultDict[str, int]"
                ],
                "fields": [
                    "Dict[str, Set[str]]",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "fields_mapping": [
                    "Dict[str, Set[str]]",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "item_mapping": [
                    "Dict[str, Set[str]]",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "add_data": [
                    "dict",
                    "str",
                    "cmk.utils.type_defs.UserId",
                    "int"
                ]
            }
        },
        "_create_from_items": {
            "name": "_create_from_items",
            "location": 208,
            "return": [
                ""
            ],
            "arguments": {
                "model": [
                    "List[core.base.types.GalleryData]",
                    "Optional[List[core.base.types.GalleryData]]",
                    "pringles.models.Model",
                    "Dict[str, Any]",
                    "esm.models.service_type.ServiceType"
                ],
                "items": [
                    "str",
                    "dict",
                    "models.User",
                    "bytes",
                    "Type",
                    "Dict[str, Any]",
                    "Dict[str, Union[str, int]]"
                ],
                "fields": [
                    "str",
                    "dict",
                    "models.User",
                    "bytes",
                    "Type",
                    "Dict[str, Any]",
                    "Dict[str, Union[str, int]]"
                ],
                "fields_mapping": [
                    "str",
                    "dict",
                    "models.User",
                    "bytes",
                    "Type",
                    "Dict[str, Any]",
                    "Dict[str, Union[str, int]]"
                ],
                "item_mapping": [
                    "str",
                    "dict",
                    "models.User",
                    "bytes",
                    "Type",
                    "Dict[str, Any]",
                    "Dict[str, Union[str, int]]"
                ],
                "add_data": [
                    "str",
                    "dict",
                    "models.User",
                    "bytes",
                    "Type",
                    "Dict[str, Any]",
                    "Dict[str, Union[str, int]]"
                ],
                "batch_size": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "dry_run": [
                    "Optional[Dict[str, Any]]",
                    "Optional[Dict[str, str]]",
                    "int",
                    "bool",
                    "Callable[[int], None]",
                    "Optional[str]",
                    "Optional[bool]"
                ]
            }
        },
        "_create_references": {
            "name": "_create_references",
            "location": 239,
            "return": [
                "str",
                "Callable",
                "Set[VT]",
                "bool",
                "Sequence[str]"
            ],
            "arguments": {
                "model": [
                    "str",
                    "Tuple[Sequence]",
                    "Union[Sequence[str], str]",
                    "lingAny_api.models.reflection.Reflection",
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "items": [
                    "int",
                    "Tuple[int]",
                    "Type[core.T]",
                    "str",
                    "Sequence[Any]"
                ],
                "foreign": [
                    "Tuple[float, float]",
                    "int",
                    "list",
                    "dict",
                    "List[str]"
                ],
                "recursive": [
                    "bool",
                    "str",
                    "List[dict]",
                    "gluonts.core.componenDType",
                    "allennlp.models.model.Model",
                    "int"
                ],
                "batch_size": [
                    "bool",
                    "allennlp.models.model.Model",
                    "Optional[List[str]]"
                ],
                "dry_run": [
                    "bool",
                    "allennlp.models.model.Model",
                    "Optional[List[str]]",
                    "int"
                ]
            }
        },
        "_make_secondary_instances": {
            "name": "_make_secondary_instances",
            "location": 355,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "model": [
                    "Optional[List[Any]]",
                    "List[str]",
                    "bool",
                    "Optional[Iterable[int]]",
                    "Optional[Any]",
                    "int"
                ],
                "secondary": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "items": [
                    "Optional[List[Any]]",
                    "List[str]",
                    "bool",
                    "Optional[Iterable[int]]",
                    "Optional[Any]",
                    "int"
                ]
            }
        },
        "_create_secondary_instances": {
            "name": "_create_secondary_instances",
            "location": 374,
            "return": [
                ""
            ],
            "arguments": {
                "model": [
                    "Optional[Tuple]",
                    "float",
                    "raiden.utils.Dict",
                    "bytes",
                    "Optional[Dict[object, Any]]",
                    "List[jinete.models.Stop]"
                ],
                "secondary": [
                    "Optional[Tuple]",
                    "float",
                    "raiden.utils.Dict",
                    "bytes",
                    "Optional[Dict[object, Any]]",
                    "List[jinete.models.Stop]"
                ],
                "items": [
                    "Optional[Tuple]",
                    "float",
                    "raiden.utils.Dict",
                    "bytes",
                    "Optional[Dict[object, Any]]",
                    "List[jinete.models.Stop]"
                ],
                "models_order": [
                    "str",
                    "bool",
                    "dere.models.Model",
                    "float",
                    "Union[int, str]"
                ],
                "batch_size": [
                    "int",
                    "float",
                    "Tuple[int]",
                    "Optional[int]"
                ],
                "dry_run": [
                    "bool",
                    "Optional[int]",
                    "Type[T]",
                    "Optional[Mapping]",
                    "raiden.utils.Callable"
                ]
            }
        },
        "_parse_link_id": {
            "name": "_parse_link_id",
            "location": 422,
            "return": [
                "Optional[int]",
                "str",
                "Optional[str]",
                "bool",
                "dict",
                "Optional[Person]"
            ],
            "arguments": {
                "string": [
                    "str",
                    "Pattern"
                ],
                "regex": [
                    "str",
                    "Pattern"
                ]
            }
        },
        "_parse_link_ids": {
            "name": "_parse_link_ids",
            "location": 439,
            "return": [
                "str",
                "bool",
                "zerver.models.Realm",
                "Tuple[int, Dict[str, Any]]"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "regex": [
                    "str",
                    "List[str]",
                    "bytes",
                    "int",
                    "Optional[Dict]",
                    "dict"
                ]
            }
        },
        "_parse_link_file": {
            "name": "_parse_link_file",
            "location": 452,
            "return": [
                "pathlib.Path",
                "str",
                "Dict[str, cerulean.path.Path]",
                "Dict[str, str]",
                "bool",
                "IO"
            ],
            "arguments": {
                "file": [
                    "pathlib.Path",
                    "Union[str, pathlib.Path]",
                    "str",
                    "Union[pathlib.Path, str]"
                ],
                "regex": [
                    "str",
                    "int",
                    "Union[str, int]",
                    "Exception",
                    "bool",
                    "Iterable[str]",
                    "Optional[int]"
                ]
            }
        },
        "_load_add_data": {
            "name": "_load_add_data",
            "location": 461,
            "return": [
                "Dict[str, Any]",
                "dict",
                "ezscrape.scraping.core.ScrapeResult",
                "list"
            ],
            "arguments": {
                "files": [
                    "str"
                ],
                "id_field": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict]",
                    "annofabapi.models.JobType",
                    "List[int]",
                    "Iterable[Hashable]"
                ]
            }
        },
        "_make_user": {
            "name": "_make_user",
            "location": 471,
            "return": [
                "Optional[str]",
                "bool",
                "dict",
                "Optional[float]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "Dict[str, str]"
                ],
                "add_data": [
                    "str"
                ]
            }
        },
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 574,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 626,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.handle._find_links": {
            "name": "_find_links",
            "location": 648,
            "return": [
                "Optional[str]",
                "str",
                "pathlib.Path",
                "Dict[str, Any]",
                "int",
                "models.user.User"
            ],
            "arguments": {
                "item": [
                    "str",
                    "raiden.utils.ChannelMap",
                    "Optional[Callable]",
                    "int",
                    "dict"
                ],
                "site": [
                    "str",
                    "raiden.utils.ChannelMap",
                    "Optional[Callable]",
                    "int",
                    "dict"
                ],
                "links": [
                    "str",
                    "Optional[Dict]",
                    "Optional[str]",
                    "Optional",
                    "Optional[Callable]",
                    "int"
                ]
            }
        }
    },
    "recommend-games-server-master/games/management/commands/fillrankingdb.py": {
        "_week_day_number": {
            "name": "_week_day_number",
            "location": 31,
            "return": [
                "str",
                "Optional[int]",
                "List[str]",
                "datetime.datetime",
                "type"
            ],
            "arguments": {
                "day": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "tuple"
                ]
            }
        },
        "_make_instruction": {
            "name": "_make_instruction",
            "location": 42,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "day": [
                    "int",
                    "datetime.timedelta",
                    "float",
                    "raiden.utils.BlockIdentifier",
                    "str"
                ]
            }
        },
        "_following": {
            "name": "_following",
            "location": 47,
            "return": [
                "datetime.datetime",
                "str",
                "Union[str, int]",
                "int",
                "models.User"
            ],
            "arguments": {
                "date": [
                    "datetime.date",
                    "str",
                    "datetime.datetime",
                    "Union[str, datetime.datetime]",
                    "int"
                ],
                "week_day": [
                    "float",
                    "str",
                    "datetime.datetime",
                    "int",
                    "Union[int, float]",
                    "bool"
                ],
                "tzinfo": [
                    "str",
                    "Optional[str]",
                    "datetime.date",
                    "datetime.datetime",
                    "datetime.datetime.datetime"
                ]
            }
        },
        "_extract_date": {
            "name": "_extract_date",
            "location": 53,
            "return": [
                "str",
                "dict",
                "int",
                "Optional[str]",
                "ddionrails.base.models.News"
            ],
            "arguments": {
                "path_file": [
                    "str",
                    "pathlib.Path"
                ],
                "tzinfo": [
                    "str",
                    "datetime.datetime",
                    "Optional[datetime.date]",
                    "pandas.DataFrame",
                    "Tuple[str, str]"
                ]
            }
        },
        "parse_ranking_csv": {
            "name": "parse_ranking_csv",
            "location": 59,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "path_file": [
                    "Optional[str]",
                    "str",
                    "Optional[pathlib.Path]",
                    "bool",
                    "List[str]"
                ],
                "date": [
                    "Optional[str]",
                    "str",
                    "Optional[int]"
                ],
                "tzinfo": [
                    "Optional[str]",
                    "str",
                    "pathlib.Path",
                    "Optional[int]",
                    "Dict[str, str]"
                ]
            }
        },
        "parse_ranking_csvs": {
            "name": "parse_ranking_csvs",
            "location": 72,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "path_dir": [
                    "str",
                    "Optional[pathlib.Path]",
                    "Union[int, str]",
                    "Optional[str]",
                    "Optional[Iterable[str]]"
                ],
                "week_day": [
                    "Optional[datetime.datetime]",
                    "int",
                    "datetime.datetime",
                    "List[str]",
                    "Optional[datetime.date]"
                ],
                "tzinfo": [
                    "pathlib.Path",
                    "str",
                    "Optional[str]",
                    "list",
                    "Optional[Any]",
                    "tracim.lib.core.contenContentApi"
                ],
                "min_date": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[Callable]",
                    "bool"
                ],
                "max_date": [
                    "str",
                    "bool",
                    "Optional[Callable]",
                    "int",
                    "datetime.datetime",
                    "Optional[str]"
                ]
            }
        },
        "_last_ranking": {
            "name": "_last_ranking",
            "location": 113,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "data": [
                    "str",
                    "List[str]"
                ],
                "date": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "_avg_ranking": {
            "name": "_avg_ranking",
            "location": 124,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Optional[int]",
                    "zerver.models.Message"
                ],
                "date": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "_create_instances": {
            "name": "_create_instances",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "path_dir": [
                    "str",
                    "Optional[str]"
                ],
                "ranking_type": [
                    "str",
                    "Optional[str]"
                ],
                "filter_ids": [
                    "Optional[str]",
                    "str"
                ],
                "method": [
                    "str",
                    "Optional[str]"
                ],
                "week_day": [
                    "Optional[str]",
                    "Optional[pathlib.Path]",
                    "int",
                    "datetime.datetime",
                    "str"
                ],
                "min_date": [
                    "Optional[str]",
                    "Optional[pathlib.Path]",
                    "int",
                    "datetime.datetime",
                    "str"
                ],
                "max_date": [
                    "Optional[str]",
                    "Optional[pathlib.Path]",
                    "int",
                    "datetime.datetime",
                    "str"
                ],
                "min_score": [
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 200,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command._create_all_instances": {
            "name": "_create_all_instances",
            "location": 230,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool"
                ],
                "filter_ids": [
                    "str",
                    "bool"
                ],
                "week_day": [
                    "str",
                    "bool"
                ],
                "types": [
                    "Type",
                    "str",
                    "Type[django.applications.catmaid.control.annotationadmin.SourceTypeForm]"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 249,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "recommend-games-server-master/games/management/commands/gitrankings.py": {
        "_df_from_jl": {
            "name": "_df_from_jl",
            "location": 24,
            "return": [
                "bool",
                "int",
                "bytes"
            ],
            "arguments": {
                "rows": [
                    "dict",
                    "TextIO",
                    "rads.xml.base.Element"
                ]
            }
        },
        "_dfs_from_repo": {
            "name": "_dfs_from_repo",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "repo": [
                    "str",
                    "IO",
                    "logging.Logger",
                    "Optional[str]"
                ],
                "directories": [
                    "str",
                    "TextIO",
                    "BinaryIO",
                    "List[str]",
                    "bool",
                    "Optional[str]"
                ],
                "files": [
                    "str",
                    "TextIO",
                    "BinaryIO",
                    "List[str]",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "_process_df": {
            "name": "_process_df",
            "location": 75,
            "return": [
                "str",
                "Optional[bool]",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "data_frame": [
                    "list",
                    "Dict[str, Union[str, Any]]",
                    "int",
                    "Tuple[Set[str], Set[str]]",
                    "Optional[int]"
                ]
            }
        },
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "recommend-games-server-master/games/management/commands/gitrecommenders.py": {
        "_exists": {
            "name": "_exists",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "dst": [
                    "str",
                    "pathlib.Path",
                    "bytes",
                    "bool"
                ],
                "overwrite": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_cp_jl_files": {
            "name": "_cp_jl_files",
            "location": 43,
            "return": [
                "str",
                "List[str]",
                "tracim.models.data.Content",
                "dict",
                "bool"
            ],
            "arguments": {
                "dst": [
                    "str",
                    "bool",
                    "Optional[path.Path]",
                    "os.PathLike",
                    "Union[str, bytes]"
                ],
                "tree": [
                    "str",
                    "pathlib.Path"
                ],
                "game_item": [
                    "pathlib.Path",
                    "Optional[pathlib.Path]",
                    "int",
                    "Optional[str]",
                    "List[int]"
                ],
                "rating_item": [
                    "pathlib.Path",
                    "int",
                    "dict",
                    "bool",
                    "programl.models.lstm.lstm.Lstm",
                    "str"
                ]
            }
        },
        "_cp_any_files": {
            "name": "_cp_any_files",
            "location": 73,
            "return": [
                "str",
                "pathlib.Path",
                "Generator[pathlib.Path, None, None]"
            ],
            "arguments": {
                "dst": [
                    "str",
                    "Optional[str]",
                    "pathlib.Path",
                    "IO[str]"
                ],
                "tree": [
                    "str",
                    "bytes"
                ],
                "files": [
                    "str",
                    "bytes"
                ]
            }
        },
        "_cp_files": {
            "name": "_cp_files",
            "location": 86,
            "return": [
                "str",
                "Optional[Tuple[str, str]]",
                "pathlib.Path",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "dst": [
                    "str",
                    "pathlib.Path"
                ],
                "tree": [
                    "str",
                    "bytes",
                    "int",
                    "cmk.utils.type_defs.HostName",
                    "Union[int, str]",
                    "pathlib.Path",
                    "Optional[int]"
                ],
                "game_item": [
                    "Optional[int]",
                    "bool",
                    "str",
                    "int",
                    "Union[int, str]"
                ],
                "rating_item": [
                    "Optional[int]",
                    "bool",
                    "str",
                    "int",
                    "Union[int, str]"
                ],
                "game_csv": [
                    "str",
                    "Optional[str]",
                    "Union[str, pathlib.Path]",
                    "Optional[Pattern[str]]",
                    "pathlib.Path",
                    "IO[Any]",
                    "Dict[str, str]",
                    "bool"
                ],
                "rating_csv": [
                    "str",
                    "Optional[str]",
                    "Union[str, pathlib.Path]",
                    "Optional[Pattern[str]]",
                    "pathlib.Path",
                    "IO[Any]",
                    "Dict[str, str]",
                    "bool"
                ],
                "dry_run": [
                    "list",
                    "bool",
                    "str",
                    "Tuple[str]",
                    "List[str]",
                    "Optional[bool]"
                ]
            }
        },
        "_process_commit": {
            "name": "_process_commit",
            "location": 106,
            "return": [
                "app.models.Article",
                "core.models.Resource",
                "Iterator"
            ],
            "arguments": {
                "commit": [
                    "str",
                    "pathlib.Path",
                    "Type",
                    "int",
                    "TextIO"
                ],
                "directory": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "int"
                ],
                "game_item": [
                    "bool",
                    "str",
                    "int",
                    "paradigm.models.Base"
                ],
                "rating_item": [
                    "bool",
                    "str",
                    "int",
                    "paradigm.models.Base"
                ],
                "game_csv": [
                    "bool",
                    "str",
                    "int",
                    "paradigm.models.Base"
                ],
                "rating_csv": [
                    "bool",
                    "str",
                    "int",
                    "paradigm.models.Base"
                ],
                "recommender_cls": [
                    "Callable",
                    "pypi2nix.path.Path",
                    "Optional[Dict[str, Any]]",
                    "pathlib.Path",
                    "int"
                ],
                "recommender_dir": [
                    "str",
                    "Optional[str]",
                    "Optional[Type[Exception]]",
                    "Optional[Dict[str, str]]",
                    "int",
                    "Optional[bool]"
                ],
                "ranking_fac_dir": [
                    "Optional[int]",
                    "bool",
                    "Optional[str]",
                    "str",
                    "TextIO"
                ],
                "ranking_sim_dir": [
                    "Optional[int]",
                    "bool",
                    "Optional[str]",
                    "str",
                    "TextIO"
                ],
                "max_iterations": [
                    "Callable",
                    "pypi2nix.path.Path",
                    "Optional[Dict[str, Any]]",
                    "pathlib.Path",
                    "int"
                ],
                "date_str": [
                    "Callable[[str], None]",
                    "Optional[str]",
                    "transfer.models.SnippetID",
                    "Optional[int]"
                ],
                "overwrite": [
                    "str",
                    "path.Path",
                    "Optional[path.Path]",
                    "Callable"
                ],
                "dry_run": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command._process_repo": {
            "name": "_process_repo",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "repo": [
                    "str",
                    "Optional[str]",
                    "tsrc.Repo"
                ],
                "directories": [
                    "str",
                    "bool"
                ],
                "game_item": [],
                "rating_item": [],
                "game_csv": [],
                "rating_csv": [],
                "recommender_cls": [],
                "recommender_dir": [
                    "Optional[str]",
                    "tsrc.Repo",
                    "Optional[Type[Exception]]",
                    "str",
                    "dict",
                    "cmk.utils.type_defs.ServiceName"
                ],
                "ranking_dir": [
                    "str",
                    "tsrc.Repo",
                    "List[Tuple[int, int]]",
                    "Optional[Type[Exception]]"
                ],
                "max_iterations": [],
                "date_str": [],
                "overwrite": [],
                "dry_run": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 288,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "recommend-games-server-master/games/management/commands/kennerspiel.py": {
        "_concat": {
            "name": "_concat",
            "location": 22,
            "return": [
                "bool",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "values": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "bytes",
                    "Exception"
                ]
            }
        },
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "recommend-games-server-master/games/management/commands/minify.py": {
        "_minify_css": {
            "name": "_minify_css",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "fsrc": [
                    "str",
                    "bool",
                    "Union[int, str]"
                ],
                "fdst": [
                    "bool",
                    "str",
                    "IO[str]"
                ],
                "keep_bang_comments": [
                    "str",
                    "int",
                    "Union[int, List[int]]"
                ],
                "encoding": [
                    "bool",
                    "IO[str]",
                    "str",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "_minify_js": {
            "name": "_minify_js",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "fsrc": [
                    "str",
                    "bool",
                    "Union[int, str]"
                ],
                "fdst": [
                    "bool",
                    "str",
                    "IO[str]"
                ],
                "keep_bang_comments": [
                    "str",
                    "int",
                    "Union[int, List[int]]"
                ],
                "encoding": [
                    "bool",
                    "IO[str]",
                    "str",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "_minify_html": {
            "name": "_minify_html",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "fsrc": [
                    "str",
                    "bool",
                    "Union[int, str]"
                ],
                "fdst": [
                    "bool",
                    "str",
                    "IO[str]"
                ],
                "encoding": [
                    "bool",
                    "IO[str]",
                    "str",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "_filter_file": {
            "name": "_filter_file",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "file": [
                    "str",
                    "Pattern[str]",
                    "int"
                ],
                "exclude_files": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "_walk_files": {
            "name": "_walk_files",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "exclude_files": [
                    "str",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "minify": {
            "name": "minify",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "src": [
                    "str",
                    "List[str]",
                    "fs.base.FS"
                ],
                "dst": [
                    "str",
                    "TextIO",
                    "IO[bytes]",
                    "List[str]"
                ],
                "exclude_files": [
                    "Union[None, str, bytes]",
                    "Dict[str, str]"
                ],
                "file_processors": [
                    "str",
                    "int",
                    "str or None",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "recommend-games-server-master/games/management/commands/referencecsvs.py": {
        "_parse_id": {
            "name": "_parse_id",
            "location": 20,
            "return": [
                "str",
                "Optional[int]",
                "Optional[List[str]]",
                "bool",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "_parse_ids": {
            "name": "_parse_ids",
            "location": 27,
            "return": [
                "typing.Generator[typing.Tuple[builtins.int, builtins.str], None, None]"
            ],
            "arguments": {
                "values": [
                    "str",
                    "bool"
                ]
            }
        },
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "recommend-games-server-master/games/management/commands/sitemap.py": {
        "_url_elements": {
            "name": "_url_elements",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "url": [
                    "str",
                    "dict",
                    "float"
                ],
                "ids": [
                    "str",
                    "List[int]"
                ],
                "lastmod": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "sitemap": {
            "name": "sitemap",
            "location": 66,
            "return": [
                "str",
                "Iterable[int]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Optional[str]",
                    "Callable[[str], None]"
                ],
                "limit": [
                    "str",
                    "Optional[int]",
                    "bytes",
                    "float"
                ]
            }
        },
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "recommend-games-server-master/games/management/commands/splitrankings.py": {
        "_parse_json": {
            "name": "_parse_json",
            "location": 21,
            "return": [
                "Optional[Iterable[Any]]",
                "Optional[BaseException]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "line": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "List[str]"
                ]
            }
        },
        "_process_row": {
            "name": "_process_row",
            "location": 29,
            "return": [
                "Tuple[int, int]",
                "bool",
                "float",
                "pandas.DataFrame"
            ],
            "arguments": {
                "row": [
                    "Dict[str, str]",
                    "List[str]",
                    "Dict[str, Any]",
                    "Iterable[str]"
                ]
            }
        },
        "_process_file": {
            "name": "_process_file",
            "location": 34,
            "return": [
                "Set[str]",
                "str",
                "Tuple[int, str]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "file": [
                    "pathlib.Path",
                    "Union[str, pathlib.Path]",
                    "Union[pathlib.Path, str]"
                ]
            }
        },
        "_process_files": {
            "name": "_process_files",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "files": [
                    "Iterable[pathlib.Path]",
                    "IO[str]",
                    "IO[Any]",
                    "Sequence[str]",
                    "List[str]"
                ]
            }
        },
        "_process_df": {
            "name": "_process_df",
            "location": 51,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "data_frame": [
                    "int",
                    "Optional[static_frame.core.util.IndexInitializer]",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "List[str]"
                ],
                "columns": [
                    "int",
                    "List[float]",
                    "bool"
                ],
                "required_columns": [
                    "int",
                    "Dict[str, pandas.DataFrame]",
                    "str",
                    "bool",
                    "Callable[[Type, str], bool]",
                    "List['Entity']"
                ],
                "target_column": [
                    "Optional[Sequence[str]]",
                    "Tuple[str]",
                    "Optional[str]",
                    "str",
                    "List[int]",
                    "int"
                ]
            }
        },
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "recommend-games-server-master/games/management/commands/stresstest.py": {
        "Command.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "recommend-games-server-master/games/management/commands/__init__.py": {},
    "recommend-games-server-master/games/migrations/0001_initial.py": {},
    "recommend-games-server-master/games/migrations/__init__.py": {},
    "recommend-games-server-master/rg/settings.py": {},
    "recommend-games-server-master/rg/urls.py": {},
    "recommend-games-server-master/rg/wsgi.py": {},
    "recommend-games-server-master/rg/__init__.py": {}
}
{
    "reel-master/setup.py": {},
    "reel-master/sitecustomize.py": {},
    "reel-master/docs/conf.py": {},
    "reel-master/reel/cli.py": {
        "enter": {
            "name": "enter",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "reel-master/reel/config.py": {},
    "reel-master/reel/keyboard.py": {
        "block_stdin": {
            "name": "block_stdin",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "block": [
                    "bool"
                ]
            }
        },
        "pty_stdin": {
            "name": "pty_stdin",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "preload": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Keyboard.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Keyboard.__enter__": {
            "name": "__enter__",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keyboard.__exit__": {
            "name": "__exit__",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Keyboard.__aiter__": {
            "name": "__aiter__",
            "location": 65,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keyboard.break_on_eot": {
            "name": "break_on_eot",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "character": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Keyboard.read": {
            "name": "read",
            "location": 85,
            "return": [
                "str",
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {}
        },
        "pty_stdin.stdin": {
            "name": "stdin",
            "location": 147,
            "return": [
                "str",
                "Tuple[str]",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "reel-master/reel/_daemon.py": {
        "Daemon.__or__": {
            "name": "__or__",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "next_one": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Daemon.__gt__": {
            "name": "__gt__",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "nursery": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Daemon.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "command": [
                    "int",
                    "bool",
                    "float"
                ],
                "xenv": [
                    "str",
                    "Union[str, List[str], Tuple[str, ...]]",
                    "int"
                ],
                "xflags": [
                    "str",
                    "Union[str, List[str], Tuple[str, ...]]",
                    "int"
                ]
            }
        }
    },
    "reel-master/reel/_reel.py": {
        "Reel.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tracks": [
                    "Optional[Sequence[str]]",
                    "Exception",
                    "Optional[int]",
                    "Type[T]",
                    "bool"
                ],
                "announce_to": [
                    "Optional[Sequence[str]]",
                    "Exception",
                    "Optional[int]",
                    "Type[T]",
                    "bool"
                ],
                "a_announce_to": [
                    "Optional[Sequence[str]]",
                    "Exception",
                    "Optional[int]",
                    "Type[T]",
                    "bool"
                ]
            }
        },
        "Reel.__str__": {
            "name": "__str__",
            "location": 25,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reel.__repr__": {
            "name": "__repr__",
            "location": 29,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reel.__or__": {
            "name": "__or__",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "next_one": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Reel.__rshift__": {
            "name": "__rshift__",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "next_one": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Reel.announce_to": {
            "name": "announce_to",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "str",
                    "List[float]",
                    "List[str]",
                    "T"
                ]
            }
        },
        "Reel.announce_to_async": {
            "name": "announce_to_async",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "str",
                    "List[float]",
                    "List[str]",
                    "T"
                ]
            }
        },
        "Reel.next_track": {
            "name": "next_track",
            "location": 72,
            "return": [
                "str",
                "list",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reel.current_track": {
            "name": "current_track",
            "location": 79,
            "return": [
                "str",
                "list",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reel.tracks": {
            "name": "tracks",
            "location": 86,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reel.spools": {
            "name": "spools",
            "location": 91,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reel.start": {
            "name": "start",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "nursery": [
                    "int",
                    "Tuple[str, str]",
                    "str",
                    "list"
                ],
                "stdin": [
                    "int",
                    "Tuple[str, str]",
                    "str",
                    "list"
                ]
            }
        },
        "Reel._start_next_track": {
            "name": "_start_next_track",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "reel-master/reel/_server.py": {
        "Server.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "daemon": [
                    "str",
                    "Optional[list]",
                    "int"
                ]
            }
        },
        "Server.__gt__": {
            "name": "__gt__",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "nursery": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Server.__or__": {
            "name": "__or__",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "next_one": [
                    "int",
                    "str",
                    "T"
                ]
            }
        }
    },
    "reel-master/reel/_spool.py": {
        "Spool.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "command": [
                    "List[str]",
                    "str",
                    "List[Callable]",
                    "OrderedDict"
                ],
                "xenv": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[Dict[str, Any]]"
                ],
                "xflags": [
                    "bool",
                    "Dict[str, Any]",
                    "int",
                    "Union[str, int]"
                ]
            }
        },
        "Spool.__str__": {
            "name": "__str__",
            "location": 39,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Spool.__repr__": {
            "name": "__repr__",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Spool.__or__": {
            "name": "__or__",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "next_one": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Spool.__rshift__": {
            "name": "__rshift__",
            "location": 51,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "next_one": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Spool.pid": {
            "name": "pid",
            "location": 65,
            "return": [
                "str",
                "Optional[str]",
                "Optional[List[Any]]",
                "list",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Spool.proc": {
            "name": "proc",
            "location": 72,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Spool.returncode": {
            "name": "returncode",
            "location": 77,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Spool.stderr": {
            "name": "stderr",
            "location": 82,
            "return": [
                "str",
                "list",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Spool.stdout": {
            "name": "stdout",
            "location": 89,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Spool.limit": {
            "name": "limit",
            "location": 96,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "byte_limit": [
                    "bytes",
                    "Iterable[T]",
                    "int"
                ]
            }
        },
        "Spool.handle_stderr": {
            "name": "handle_stderr",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "nursery": [
                    "Tuple[int]",
                    "Callable",
                    "SendCh[trio.abc.Stream]",
                    "str",
                    "int"
                ]
            }
        },
        "Spool.handle_stdout": {
            "name": "handle_stdout",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "nursery": [
                    "Tuple[int]",
                    "Callable",
                    "SendCh[trio.abc.Stream]",
                    "str",
                    "int"
                ]
            }
        },
        "Spool.handle_stdin": {
            "name": "handle_stdin",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "nursery": [
                    "Tuple[int]",
                    "Callable",
                    "SendCh[trio.abc.Stream]",
                    "str",
                    "int"
                ],
                "message": [
                    "Tuple[int]",
                    "Callable",
                    "SendCh[trio.abc.Stream]",
                    "str",
                    "int"
                ]
            }
        },
        "Spool.start": {
            "name": "start",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "nursery": [
                    "int",
                    "Tuple[str, str]",
                    "str",
                    "list"
                ],
                "stdin": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "reel-master/reel/_streamer.py": {
        "Streamer.start": {
            "name": "start",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "nursery": [
                    "int",
                    "Dict[str, str]",
                    "Callable",
                    "bool",
                    "str",
                    "Optional"
                ],
                "stdin": [
                    "int",
                    "Dict[str, str]",
                    "Callable",
                    "bool",
                    "str",
                    "Optional"
                ]
            }
        }
    },
    "reel-master/reel/_track.py": {
        "Track.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "func": [
                    "int",
                    "float",
                    "List[List[T]]"
                ]
            }
        },
        "Track.__or__": {
            "name": "__or__",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "the_other_one": [
                    "int",
                    "Dict[str, Any]",
                    "Set[str]"
                ]
            }
        },
        "Track.start": {
            "name": "start",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "nursery": [
                    "str",
                    "float",
                    "int",
                    "Iterable[int]"
                ],
                "stdin": [
                    "SendCh[trio.abc.Stream]",
                    "int",
                    "str",
                    "dict",
                    "Optional[str]"
                ]
            }
        }
    },
    "reel-master/reel/_transport.py": {
        "Transport.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Transport.__gt__": {
            "name": "__gt__",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "nursery": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Transport.__or__": {
            "name": "__or__",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "next_one": [
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "Transport.__rshift__": {
            "name": "__rshift__",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "next_one": [
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "Transport.__str__": {
            "name": "__str__",
            "location": 46,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transport.__repr__": {
            "name": "__repr__",
            "location": 50,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transport.is_done": {
            "name": "is_done",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transport.spawn_in": {
            "name": "spawn_in",
            "location": 101,
            "return": [
                "Iterator",
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "nursery": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "Transport.start_daemon": {
            "name": "start_daemon",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "nursery": [
                    "int"
                ]
            }
        }
    },
    "reel-master/reel/__init__.py": {},
    "reel-master/reel/cmd/ffmpeg.py": {
        "read": {
            "name": "read",
            "location": 5,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "uri": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "to_icecast": {
            "name": "to_icecast",
            "location": 19,
            "return": [
                "List[int]",
                "int",
                "str"
            ],
            "arguments": {
                "host": [
                    "str",
                    "bool",
                    "int"
                ],
                "port": [
                    "str",
                    "bool",
                    "int"
                ],
                "mount": [
                    "str",
                    "bool",
                    "int"
                ],
                "password": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "to_udp": {
            "name": "to_udp",
            "location": 38,
            "return": [
                "List[int]",
                "int",
                "str"
            ],
            "arguments": {
                "host": [
                    "int",
                    "str"
                ],
                "port": [
                    "int",
                    "str"
                ]
            }
        },
        "to_file": {
            "name": "to_file",
            "location": 56,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "reel-master/reel/cmd/ffprobe.py": {
        "Devices.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Devices.list_outputs": {
            "name": "list_outputs",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Devices.list_inputs": {
            "name": "list_inputs",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Codecs.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Codecs.audio_codecs": {
            "name": "audio_codecs",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "reel-master/reel/cmd/icecast.py": {
        "Icecast.client": {
            "name": "client",
            "location": 24,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "mount": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "reel-master/reel/cmd/sox.py": {
        "speakers": {
            "name": "speakers",
            "location": 5,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {}
        }
    },
    "reel-master/reel/cmd/_aria2.py": {},
    "reel-master/reel/cmd/_redis.py": {},
    "reel-master/reel/cmd/__init__.py": {},
    "reel-master/tests/conftest.py": {
        "set_env": {
            "name": "set_env",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "env": [
                    "dict",
                    "str",
                    "List[str]"
                ]
            }
        },
        "unset_env": {
            "name": "unset_env",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "env": [
                    "bool",
                    "dict",
                    "str",
                    "Union[str, None]"
                ]
            }
        },
        "neil_reel": {
            "name": "neil_reel",
            "location": 55,
            "return": [
                "str",
                "int",
                "tuple",
                "List[str]",
                "list",
                "Union[List[str], str]",
                "float"
            ],
            "arguments": {}
        },
        "audio_dest": {
            "name": "audio_dest",
            "location": 65,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {}
        },
        "cli_cmd": {
            "name": "cli_cmd",
            "location": 86,
            "return": [
                "int",
                "list"
            ],
            "arguments": {
                "request": [
                    "Callable"
                ]
            }
        },
        "audio_uri": {
            "name": "audio_uri",
            "location": 92,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "env_home": {
            "name": "env_home",
            "location": 105,
            "return": [
                "str",
                "Set[str]",
                "tuple",
                "Dict[str, str]",
                "list"
            ],
            "arguments": {
                "tmp_path_factory": [
                    "str",
                    "pathlib2.Path",
                    "BinaryIO",
                    "Union[str, BinaryIO]",
                    "pathlib.Path"
                ]
            }
        },
        "config_icecast": {
            "name": "config_icecast",
            "location": 116,
            "return": [
                "int",
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {}
        },
        "audio_dir": {
            "name": "audio_dir",
            "location": 128,
            "return": [
                "str",
                "pathlib.Path",
                "Type[Any]",
                "List[str]"
            ],
            "arguments": {
                "tmp_path_factory": [
                    "pathlib.Path",
                    "str",
                    "bool"
                ]
            }
        },
        "music_dir": {
            "name": "music_dir",
            "location": 138,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "tmpdir": [
                    "bool",
                    "int",
                    "Tuple[Tuple[str, str]]",
                    "str",
                    "Tuple[str, str]"
                ]
            }
        },
        "audio_dest.audio_dest_fn": {
            "name": "audio_dest_fn",
            "location": 67,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "music_dir.create_nodes": {
            "name": "create_nodes",
            "location": 158,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "structure": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "dict",
                    "Optional[int]",
                    "BinaryIO"
                ],
                "parent_node": [
                    "Optional[path.Path]",
                    "bool",
                    "str",
                    "BinaryIO"
                ]
            }
        }
    },
    "reel-master/tests/test_api.py": {},
    "reel-master/tests/test_cli.py": {},
    "reel-master/tests/test_cmd.py": {},
    "reel-master/tests/test_config.py": {},
    "reel-master/tests/test_io.py": {},
    "reel-master/tests/test_keyboard.py": {
        "test_keyboard_context": {
            "name": "test_keyboard_context",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_arrows": {
            "name": "test_arrows",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "reel-master/tests/test_proc.py": {},
    "reel-master/tests/test_reel.py": {
        "test_reel_has_next_track.checkpoint": {
            "name": "checkpoint",
            "location": 54,
            "return": [],
            "arguments": {
                "track": []
            }
        }
    },
    "reel-master/tests/test_spool.py": {},
    "reel-master/tests/test_track.py": {},
    "reel-master/tests/__init__.py": {}
}
{
    "reifer-monitor-master/src/client.py": {
        "FocusingTextInput.on_parent": {
            "name": "on_parent",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "widget": [],
                "parent": []
            }
        },
        "FocusingTextInput.on_text_validate": {
            "name": "on_text_validate",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MonitorDeviceWidget.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MonitorDeviceWidget.make_config": {
            "name": "make_config",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MonitorDeviceWidget.stop": {
            "name": "stop",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MonitorDeviceWidget.on_num_workers_change": {
            "name": "on_num_workers_change",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "value": []
            }
        },
        "MonitorDeviceWidget.on_batch_code_input": {
            "name": "on_batch_code_input",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "MonitorDeviceWidget.on_num_workers_model_change": {
            "name": "on_num_workers_model_change",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "num_workers": []
            }
        },
        "MonitorDeviceWidget.on_sensors_model_change": {
            "name": "on_sensors_model_change",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "sensors": []
            }
        },
        "MonitorDeviceWidget.on_batch_name_model_change": {
            "name": "on_batch_name_model_change",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "batch_name": []
            }
        },
        "MonitorDeviceWidget.on_workstation_state_model_change": {
            "name": "on_workstation_state_model_change",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "MonitorDeviceWidget._compute_sensor_status": {
            "name": "_compute_sensor_status",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "sensor": []
            }
        },
        "MonitorApp.build": {
            "name": "build",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MonitorApp.on_stop": {
            "name": "on_stop",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FocusingTextInput.on_parent.refocus": {
            "name": "refocus",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "MonitorDeviceWidget.__init__.schedule_sensor": {
            "name": "schedule_sensor",
            "location": 84,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "MonitorDeviceWidget.__init__.refresh": {
            "name": "refresh",
            "location": 104,
            "return": [],
            "arguments": {}
        }
    },
    "reifer-monitor-master/src/client_model.py": {
        "SensorSystem.sensors": {
            "name": "sensors",
            "location": 34,
            "return": [
                "typing.List[Sensor]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SensorSystem.add_sensor_change_listener": {
            "name": "add_sensor_change_listener",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "Device.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workstation_code": [
                    "int",
                    "List[int]",
                    "str"
                ],
                "sensor_system": [
                    "Tuple[int, int]",
                    "bool",
                    "str"
                ],
                "server_connection": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "Device.add_workstation_state_changed_listener": {
            "name": "add_workstation_state_changed_listener",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": [
                    "Dict[str, Any]",
                    "bytes",
                    "dict",
                    "str"
                ]
            }
        },
        "Device.add_num_workers_changed_listener": {
            "name": "add_num_workers_changed_listener",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": [
                    "int",
                    "dict",
                    "str"
                ]
            }
        },
        "Device.add_sensors_changed_listener": {
            "name": "add_sensors_changed_listener",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": []
            }
        },
        "Device.add_batch_name_changed_listener": {
            "name": "add_batch_name_changed_listener",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": [
                    "Dict[str, Any]",
                    "Mapping",
                    "str"
                ]
            }
        },
        "Device._on_sensor_changed": {
            "name": "_on_sensor_changed",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_sensor": [
                    "str",
                    "bytes",
                    "Tuple[List[str], List[str]]"
                ]
            }
        },
        "Device._notify_work_run": {
            "name": "_notify_work_run",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workstation_state": []
            }
        },
        "Device.num_workers": {
            "name": "num_workers",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_workers": [
                    "int",
                    "Union[str, int]"
                ]
            }
        },
        "Device.workstation_state": {
            "name": "workstation_state",
            "location": 149,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.sensors": {
            "name": "sensors",
            "location": 161,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.batch_code": {
            "name": "batch_code",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "batch_code": [
                    "str"
                ]
            }
        },
        "Device.refresh": {
            "name": "refresh",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "reifer-monitor-master/src/client_test.py": {
        "test_workstation_state_empty": {
            "name": "test_workstation_state_empty",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_workstation_state_idle": {
            "name": "test_workstation_state_idle",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_workstation_state_active": {
            "name": "test_workstation_state_active",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sensor_change_notified": {
            "name": "test_sensor_change_notified",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "FakeSensorSystem.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fake_sensors": [
                    "int",
                    "bool",
                    "float"
                ],
                "fake_sensor_change_listener": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "FakeSensorSystem.sensors": {
            "name": "sensors",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeSensorSystem.add_sensor_change_listener": {
            "name": "add_sensor_change_listener",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": [
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "FakeSensorSystem.proximity": {
            "name": "proximity",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeSensorSystem.add_proximity_change_listener": {
            "name": "add_proximity_change_listener",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "FakeServerConnection.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_sensor_change_notified.sensors_changed": {
            "name": "sensors_changed",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "new_sensors": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "reifer-monitor-master/src/fakesensors.py": {
        "BlinkingSensorSystem.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sensors": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ],
                "schedule": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "BlinkingSensorSystem.sensors": {
            "name": "sensors",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlinkingSensorSystem.add_sensor_change_listener": {
            "name": "add_sensor_change_listener",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "listener": []
            }
        },
        "BlinkingSensorSystem.stop": {
            "name": "stop",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlinkingSensorSystem.__init__.update_sensors": {
            "name": "update_sensors",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "BlinkingSensorSystem.__init__.blinker": {
            "name": "blinker",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "reifer-monitor-master/src/fakewiringpi.py": {
        "wiringPiSetup": {
            "name": "wiringPiSetup",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "pinMode": {
            "name": "pinMode",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "pin": [
                    "int",
                    "Iterable[Tuple[str, str]]",
                    "str",
                    "List[str]",
                    "bool"
                ],
                "mode": [
                    "int",
                    "Iterable[Tuple[str, str]]",
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "digitalRead": {
            "name": "digitalRead",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pin": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "digitalWrite": {
            "name": "digitalWrite",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "pin": [
                    "Optional[BaseException]",
                    "Callable[[str, object], None]",
                    "Iterable[float]",
                    "bool"
                ],
                "value": [
                    "Optional[BaseException]",
                    "Callable[[str, object], None]",
                    "Iterable[float]",
                    "bool"
                ]
            }
        },
        "analogRead": {
            "name": "analogRead",
            "location": 21,
            "return": [
                "List[float]",
                "str",
                "int"
            ],
            "arguments": {
                "pin": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "reifer-monitor-master/src/leddriver.py": {
        "LedDriver.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LedDriver.start": {
            "name": "start",
            "location": 30,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LedDriver.set_color": {
            "name": "set_color",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "int",
                    "float",
                    "Dict[str, bytes]",
                    "Dict[str, Union[Any, Any, Any, Any, Any, Any]]",
                    "str"
                ],
                "g": [
                    "int",
                    "float",
                    "Dict[str, bytes]",
                    "Dict[str, Union[Any, Any, Any, Any, Any, Any]]",
                    "str"
                ],
                "b": [
                    "int",
                    "float",
                    "Dict[str, bytes]",
                    "Dict[str, Union[Any, Any, Any, Any, Any, Any]]",
                    "str"
                ]
            }
        }
    },
    "reifer-monitor-master/src/manager.py": {
        "ValidatingTextInput.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidatingTextInput.on_text": {
            "name": "on_text",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "value": [
                    "str",
                    "bytes",
                    "float",
                    "Iterable[str]",
                    "Iterable[Any]"
                ]
            }
        },
        "CardManagerWidget.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CardManagerWidget.on_associate": {
            "name": "on_associate",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagerApp.build": {
            "name": "build",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "reifer-monitor-master/src/message.py": {},
    "reifer-monitor-master/src/sensors.py": {
        "QuickAmplitudeMeasurer.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "bias": [],
                "threshold": [],
                "averaging": []
            }
        },
        "QuickAmplitudeMeasurer.sample": {
            "name": "sample",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "QuickAmplitudeMeasurer.over_threshold": {
            "name": "over_threshold",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SensorSystem.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "schedule": []
            }
        },
        "SensorSystem._new_measurer": {
            "name": "_new_measurer",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SensorSystem.start": {
            "name": "start",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SensorSystem.update": {
            "name": "update",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SensorSystem.sensors": {
            "name": "sensors",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SensorSystem.add_sensor_change_listener": {
            "name": "add_sensor_change_listener",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "listener": []
            }
        }
    },
    "reifer-monitor-master/src/sensors_test.py": {},
    "reifer-monitor-master/src/server.py": {
        "now": {
            "name": "now",
            "location": 56,
            "return": [
                "str",
                "datetime.datetime",
                "datetime.date"
            ],
            "arguments": {}
        },
        "bind_tables": {
            "name": "bind_tables",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "engine": [
                    "IO",
                    "List[str]",
                    "Sequence[str]",
                    "eth.abc.MessageAPI"
                ]
            }
        },
        "make_config": {
            "name": "make_config",
            "location": 433,
            "return": [
                "str",
                "bool",
                "Optional[int]",
                "int"
            ],
            "arguments": {}
        },
        "init_lite": {
            "name": "init_lite",
            "location": 449,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "url": [
                    "bytes",
                    "str"
                ]
            }
        },
        "init": {
            "name": "init",
            "location": 456,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "str",
                    "dict"
                ]
            }
        },
        "Workstation.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Batch.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Iterable",
                    "bytes"
                ],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Iterable",
                    "bytes"
                ]
            }
        },
        "ActivityPeriod.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workstation": [
                    "str",
                    "int",
                    "float",
                    "Optional[int]"
                ],
                "num_workers": [
                    "str",
                    "int",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "WorkRun.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workstation": [
                    "Optional[Callable]",
                    "str",
                    "slice"
                ],
                "batch": [
                    "Optional[Callable]",
                    "str",
                    "slice"
                ]
            }
        },
        "Work.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workstation": [
                    "Iterable[int]",
                    "Optional[str]"
                ],
                "batch": [
                    "Iterable[int]",
                    "Optional[str]"
                ]
            }
        },
        "Server.__init__": {
            "name": "__init__",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "engine": [
                    "int",
                    "List[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "Server.session": {
            "name": "session",
            "location": 160,
            "return": [
                "dict",
                "Exception",
                "str",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server.find_batch_by_code": {
            "name": "find_batch_by_code",
            "location": 163,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "grouper.models.base.session.Session",
                    "Optional[str]"
                ]
            }
        },
        "Server.associate_batch": {
            "name": "associate_batch",
            "location": 172,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "int"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Server.ensure_workstation": {
            "name": "ensure_workstation",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workstation_code": [
                    "int",
                    "str",
                    "float",
                    "T"
                ]
            }
        },
        "Server.find_workstation_by_code": {
            "name": "find_workstation_by_code",
            "location": 197,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "sess": [
                    "str"
                ],
                "workstation_code": [
                    "str"
                ]
            }
        },
        "Server.start_activity_period": {
            "name": "start_activity_period",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workstation_code": [
                    "str",
                    "int"
                ],
                "num_workers": [
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "Server.stop_activity_period": {
            "name": "stop_activity_period",
            "location": 219,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "workstation_code": [
                    "str"
                ]
            }
        },
        "Server.start_work_run": {
            "name": "start_work_run",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workstation_code": [
                    "str",
                    "int"
                ]
            }
        },
        "Server.refresh_work_run": {
            "name": "refresh_work_run",
            "location": 259,
            "return": [
                "Iterator[str]",
                "Iterator[T]",
                "Iterator",
                "Generator"
            ],
            "arguments": {
                "self": [],
                "workstation_code": [
                    "str",
                    "int"
                ]
            }
        },
        "Server.stop_work_run": {
            "name": "stop_work_run",
            "location": 281,
            "return": [
                "Iterable[Hashable]",
                "str"
            ],
            "arguments": {
                "self": [],
                "workstation_code": [
                    "str",
                    "int"
                ]
            }
        },
        "Server.start_work": {
            "name": "start_work",
            "location": 301,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "workstation_code": [
                    "str"
                ],
                "batch_code": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Server.stop_work": {
            "name": "stop_work",
            "location": 318,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "workstation_code": [
                    "str"
                ]
            }
        },
        "Server.terminate_work_runs_process": {
            "name": "terminate_work_runs_process",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server.run_server": {
            "name": "run_server",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bind_address": [
                    "str",
                    "int",
                    "bool",
                    "list"
                ]
            }
        },
        "Server.handle_batch_name_query": {
            "name": "handle_batch_name_query",
            "location": 374,
            "return": [
                "str",
                "bool",
                "type"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "dict",
                    "bytes",
                    "message.header.Asset"
                ]
            }
        },
        "Server.handle_batch_association": {
            "name": "handle_batch_association",
            "location": 378,
            "return": [
                "dict",
                "Optional[str]",
                "Hashable",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Exception",
                    "str",
                    "int"
                ]
            }
        },
        "Server.handle_start_activity_period": {
            "name": "handle_start_activity_period",
            "location": 382,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "dict",
                    "bool",
                    "Optional[str]",
                    "email.message.Message",
                    "Any"
                ]
            }
        },
        "Server.handle_stop_activity_period": {
            "name": "handle_stop_activity_period",
            "location": 386,
            "return": [
                "Dict[str, str]",
                "middleman_protocol.concent_golem_messages.message.SignedTransaction",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Callable",
                    "str"
                ]
            }
        },
        "Server.handle_start_work_run": {
            "name": "handle_start_work_run",
            "location": 390,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bool"
                ]
            }
        },
        "Server.handle_refresh_work_run": {
            "name": "handle_refresh_work_run",
            "location": 394,
            "return": [
                "IO[str]",
                "dict",
                "Optional[bool]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int",
                    "message.header.Message",
                    "Dict[str, Any]"
                ]
            }
        },
        "Server.handle_stop_work_run": {
            "name": "handle_stop_work_run",
            "location": 398,
            "return": [
                "IO[str]",
                "dict",
                "Optional[bool]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int",
                    "message.header.Message",
                    "Dict[str, Any]"
                ]
            }
        },
        "Server.handle_start_work": {
            "name": "handle_start_work",
            "location": 402,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Optional[Union[Any, Any]]",
                    "bool",
                    "Callable",
                    "tuple"
                ]
            }
        },
        "Server.handle_stop_work": {
            "name": "handle_stop_work",
            "location": 406,
            "return": [
                "List[str]",
                "str",
                "Dict[str, dict]",
                "Tuple[str, Optional[int]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bytes",
                    "str",
                    "Callable[[bytes], bytes]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Server.execute": {
            "name": "execute",
            "location": 410,
            "return": [
                "str",
                "Callable",
                "dict",
                "type"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Optional[Exception]",
                    "Dict[str, Any]"
                ]
            }
        },
        "BaseEntity.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "reifer-monitor-master/src/serverconnection.py": {
        "ServerError.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "ServerConnection.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ServerConnection._communicate": {
            "name": "_communicate",
            "location": 36,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ServerConnection.connect": {
            "name": "connect",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerConnection.get_batch_name": {
            "name": "get_batch_name",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "batch_code": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ServerConnection.associate_batch": {
            "name": "associate_batch",
            "location": 58,
            "return": [
                "int",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "batch_code": [
                    "str",
                    "int"
                ],
                "batch_name": [
                    "str",
                    "int"
                ]
            }
        },
        "ServerConnection.start_activity_period": {
            "name": "start_activity_period",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workstation_code": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "num_workers": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "ServerConnection.stop_activity_period": {
            "name": "stop_activity_period",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workstation_code": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "ServerConnection.start_work_run": {
            "name": "start_work_run",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workstation_code": [
                    "str",
                    "int"
                ]
            }
        },
        "ServerConnection.refresh_work_run": {
            "name": "refresh_work_run",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workstation_code": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "ServerConnection.stop_work_run": {
            "name": "stop_work_run",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workstation_code": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "ServerConnection.start_work": {
            "name": "start_work",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workstation_code": [
                    "int",
                    "str"
                ],
                "batch_code": [
                    "int",
                    "str"
                ]
            }
        },
        "ServerConnection.stop_work": {
            "name": "stop_work",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "workstation_code": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "reifer-monitor-master/src/server_test.py": {
        "session": {
            "name": "session",
            "location": 25,
            "return": [
                "bool",
                "List[Dict]",
                "Mapping[str, Any]",
                "str",
                "Dict[int, Dict[str, Any]]"
            ],
            "arguments": {
                "engine": [
                    "bool",
                    "List[Dict]",
                    "Mapping[str, Any]",
                    "str",
                    "Dict[int, Dict[str, Any]]"
                ]
            }
        },
        "test_find_batch_by_code": {
            "name": "test_find_batch_by_code",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_associate_batch_once": {
            "name": "test_associate_batch_once",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_associate_batch_twice": {
            "name": "test_associate_batch_twice",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_start_activity_period": {
            "name": "test_start_activity_period",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_start_stop_activity_period": {
            "name": "test_start_stop_activity_period",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "reifer-monitor-master/src/reifermonitor/__init__.py": {}
}
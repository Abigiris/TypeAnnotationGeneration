{
    "requests3-master/setup.py": {
        "Format.initialize_options": {
            "name": "initialize_options",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Format.finalize_options": {
            "name": "finalize_options",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Format.run": {
            "name": "run",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PyTest.initialize_options": {
            "name": "initialize_options",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PyTest.finalize_options": {
            "name": "finalize_options",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PyTest.run": {
            "name": "run",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MyPyTest.initialize_options": {
            "name": "initialize_options",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MyPyTest.finalize_options": {
            "name": "finalize_options",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MyPyTest.run_tests": {
            "name": "run_tests",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "requests3-master/docs/conf.py": {},
    "requests3-master/docs/_themes/flask_theme_support.py": {},
    "requests3-master/requests3/exceptions.py": {
        "RequestException.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "requests3-master/requests3/help.py": {
        "_implementation": {
            "name": "_implementation",
            "location": 28,
            "return": [
                "str",
                "bool",
                "Type"
            ],
            "arguments": {}
        },
        "info": {
            "name": "info",
            "location": 61,
            "return": [
                "str",
                "int",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "requests3-master/requests3/http_adapters.py": {
        "_pool_kwargs": {
            "name": "_pool_kwargs",
            "location": 53,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "verify": [
                    "bool",
                    "str",
                    "list",
                    "List[str]",
                    "Iterable[float]"
                ],
                "cert": [
                    "float",
                    "int",
                    "str",
                    "IO[Any]",
                    "Dict[str, bool]"
                ]
            }
        },
        "BaseAdapter.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseAdapter.send": {
            "name": "send",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "List[str]",
                    "Dict[str, Any]",
                    "str"
                ],
                "stream": [
                    "List[str]",
                    "Dict[str, Any]",
                    "str"
                ],
                "timeout": [
                    "List[str]",
                    "Dict[str, Any]",
                    "str"
                ],
                "verify": [
                    "List[str]",
                    "Dict[str, Any]",
                    "str"
                ],
                "cert": [
                    "List[str]",
                    "Dict[str, Any]",
                    "str"
                ],
                "proxies": [
                    "List[str]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "BaseAdapter.close": {
            "name": "close",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPAdapter.__init__": {
            "name": "__init__",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPAdapter.__getstate__": {
            "name": "__getstate__",
            "location": 190,
            "return": [
                "bool",
                "str",
                "int",
                "List[Dict[str, Any]]",
                "Set[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPAdapter.__setstate__": {
            "name": "__setstate__",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "HTTPAdapter.build_response": {
            "name": "build_response",
            "location": 204,
            "return": [
                "dict",
                "Optional[str]",
                "Optional[Dict[str, Any]]",
                "Dict[str, Dict[str, str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "requests.Response",
                    "bytes",
                    "dict",
                    "str",
                    "int"
                ],
                "resp": [
                    "dict",
                    "Optional[dict]",
                    "str",
                    "Exception",
                    "responses.Response",
                    "Mapping[str, str]"
                ]
            }
        },
        "HTTPAdapter.request_url": {
            "name": "request_url",
            "location": 235,
            "return": [
                "str",
                "bytes",
                "djmoney.contrib.exchange.models.Rate",
                "dict",
                "Optional[List[str]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Set[str]",
                    "str"
                ],
                "proxies": [
                    "list",
                    "bool"
                ]
            }
        },
        "HTTPAdapter.add_headers": {
            "name": "add_headers",
            "location": 261,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool"
                ]
            }
        },
        "HTTPAdapter.proxy_headers": {
            "name": "proxy_headers",
            "location": 275,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Union[str, int]]",
                "dict",
                "Dict[str, Dict[str, str]]",
                "List[dict]",
                "Dict[str, Type]",
                "str"
            ],
            "arguments": {
                "self": [],
                "proxy": [
                    "Mapping[str, Any]",
                    "dict",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "HTTPAdapter.send": {
            "name": "send",
            "location": 296,
            "return": [
                "str",
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "stream": [
                    "List[str]",
                    "Dict[str, Any]",
                    "str"
                ],
                "timeout": [
                    "Optional[str]",
                    "bool",
                    "Optional[dict]",
                    "Optional[Union[bool, str]]"
                ],
                "verify": [
                    "List[str]",
                    "Dict[str, Any]",
                    "str"
                ],
                "cert": [
                    "List[str]",
                    "Dict[str, Any]",
                    "str"
                ],
                "proxies": [
                    "str",
                    "bool",
                    "dict",
                    "int",
                    "bytes"
                ]
            }
        },
        "AsyncHTTPAdapter.__init__": {
            "name": "__init__",
            "location": 373,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "backend": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "AsyncHTTPAdapter.close": {
            "name": "close",
            "location": 408,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SOCKSProxyManager": {
            "name": "SOCKSProxyManager",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "requests3-master/requests3/http_auth.py": {
        "_basic_auth_str": {
            "name": "_basic_auth_str",
            "location": 26,
            "return": [
                "str",
                "bytes",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "username": [
                    "str"
                ],
                "password": [
                    "str",
                    "int"
                ]
            }
        },
        "AuthBase.__call__": {
            "name": "__call__",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "r": [
                    "T",
                    "float"
                ]
            }
        },
        "HTTPBasicAuth.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "HTTPBasicAuth.__eq__": {
            "name": "__eq__",
            "location": 70,
            "return": [
                "BaseException",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str"
                ]
            }
        },
        "HTTPBasicAuth.__ne__": {
            "name": "__ne__",
            "location": 78,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "HTTPBasicAuth.__call__": {
            "name": "__call__",
            "location": 81,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "str",
                    "float",
                    "dict",
                    "MutableMapping[str, Any]"
                ]
            }
        },
        "HTTPDigestAuth.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "HTTPDigestAuth.init_per_thread_state": {
            "name": "init_per_thread_state",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPDigestAuth.build_digest_header": {
            "name": "build_digest_header",
            "location": 107,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "Optional[List[Any]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "url": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "HTTPDigestAuth.handle_redirect": {
            "name": "handle_redirect",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "r": [
                    "int"
                ]
            }
        },
        "HTTPDigestAuth.handle_401": {
            "name": "handle_401",
            "location": 211,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "Dict[str, List[str]]",
                    "Optional[str]",
                    "dict",
                    "float",
                    "bool"
                ]
            }
        },
        "HTTPDigestAuth.__call__": {
            "name": "__call__",
            "location": 252,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "HTTPDigestAuth.__eq__": {
            "name": "__eq__",
            "location": 273,
            "return": [
                "BaseException",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str"
                ]
            }
        },
        "HTTPDigestAuth.__ne__": {
            "name": "__ne__",
            "location": 281,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "HTTPDigestAuth.build_digest_header.md5_utf8": {
            "name": "md5_utf8",
            "location": 124,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "HTTPDigestAuth.build_digest_header.sha_utf8": {
            "name": "sha_utf8",
            "location": 132,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "HTTPDigestAuth.build_digest_header.sha256_utf8": {
            "name": "sha256_utf8",
            "location": 140,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "HTTPDigestAuth.build_digest_header.sha512_utf8": {
            "name": "sha512_utf8",
            "location": 148,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ]
            }
        }
    },
    "requests3-master/requests3/http_cookies.py": {
        "extract_cookies_to_jar": {
            "name": "extract_cookies_to_jar",
            "location": 142,
            "return": [
                "Optional[int]",
                "Optional[float]",
                "Optional[str]"
            ],
            "arguments": {
                "jar": [
                    "int",
                    "bytes",
                    "AnyStr",
                    "str",
                    "Type[object]",
                    "eth.abc.BlockHeaderAPI"
                ],
                "request": [
                    "Optional[str]",
                    "eth.abc.BlockHeaderAPI",
                    "Dict[str, Any]"
                ],
                "response": [
                    "Dict[str, Any]",
                    "float",
                    "dict",
                    "str"
                ]
            }
        },
        "get_cookie_header": {
            "name": "get_cookie_header",
            "location": 175,
            "return": [
                "bytes",
                "Callable",
                "str",
                "bool"
            ],
            "arguments": {
                "jar": [
                    "Dict[str, str]"
                ],
                "request": [
                    "Optional[str]",
                    "int",
                    "eth.abc.BlockHeaderAPI"
                ]
            }
        },
        "remove_cookie_by_name": {
            "name": "remove_cookie_by_name",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "cookiejar": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "domain": [
                    "str",
                    "Optional[str]"
                ],
                "path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_copy_cookie_jar": {
            "name": "_copy_cookie_jar",
            "location": 488,
            "return": [
                "Optional[str]",
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "jar": [
                    "Optional[bytes]",
                    "Optional[int]"
                ]
            }
        },
        "create_cookie": {
            "name": "create_cookie",
            "location": 504,
            "return": [
                "Optional[bool]",
                "int",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]",
                    "bool"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        },
        "morsel_to_cookie": {
            "name": "morsel_to_cookie",
            "location": 538,
            "return": [
                "Dict[str, Any]",
                "int",
                "bool"
            ],
            "arguments": {
                "morsel": [
                    "int",
                    "bytes",
                    "Dict[str, str]"
                ]
            }
        },
        "cookiejar_from_dict": {
            "name": "cookiejar_from_dict",
            "location": 569,
            "return": [
                "float",
                "Sequence[float]",
                "Tuple[int, int]",
                "tuple"
            ],
            "arguments": {
                "cookie_dict": [
                    "Optional[Dict[str, Any]]",
                    "bool"
                ],
                "cookiejar": [
                    "dict",
                    "Dict[str, str]",
                    "Type[T]"
                ],
                "overwrite": [
                    "str",
                    "dict",
                    "Callable[[], Any]"
                ]
            }
        },
        "merge_cookies": {
            "name": "merge_cookies",
            "location": 588,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cookiejar": [
                    "List[Dict]",
                    "Optional[List[str]]",
                    "bool",
                    "dict",
                    "int"
                ],
                "cookies": [
                    "dict"
                ]
            }
        },
        "MockRequest.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "bool",
                    "bytes",
                    "List[List[int]]"
                ]
            }
        },
        "MockRequest.get_type": {
            "name": "get_type",
            "location": 42,
            "return": [
                "str",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockRequest.get_host": {
            "name": "get_host",
            "location": 45,
            "return": [
                "bytes",
                "str",
                "int",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockRequest.get_origin_req_host": {
            "name": "get_origin_req_host",
            "location": 48,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockRequest.get_full_url": {
            "name": "get_full_url",
            "location": 51,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]",
                "Mapping"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockRequest.is_unverifiable": {
            "name": "is_unverifiable",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockRequest.has_header": {
            "name": "has_header",
            "location": 75,
            "return": [
                "bool",
                "Optional[str]",
                "Tuple[bool, int]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "MockRequest.get_header": {
            "name": "get_header",
            "location": 78,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "default": [
                    "str"
                ]
            }
        },
        "MockRequest.add_header": {
            "name": "add_header",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "tuple",
                    "abc.graph.NodeKeyType",
                    "bool"
                ],
                "val": [
                    "str",
                    "tuple",
                    "abc.graph.NodeKeyType",
                    "bool"
                ]
            }
        },
        "MockRequest.add_unredirected_header": {
            "name": "add_unredirected_header",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "MockRequest.get_new_headers": {
            "name": "get_new_headers",
            "location": 90,
            "return": [
                "Mapping[str, T]",
                "Dict[str, Any]",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockRequest.unverifiable": {
            "name": "unverifiable",
            "location": 94,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockRequest.origin_req_host": {
            "name": "origin_req_host",
            "location": 98,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockRequest.host": {
            "name": "host",
            "location": 102,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Headers.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "MutableMapping"
                ]
            }
        },
        "Headers.get_all": {
            "name": "get_all",
            "location": 110,
            "return": [
                "bool",
                "dict",
                "Dict[int, str]",
                "float",
                "str",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Hashable",
                    "Dict[str, str]"
                ],
                "default": [
                    "str",
                    "int",
                    "Hashable",
                    "Dict[str, str]"
                ]
            }
        },
        "MockResponse.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "MutableMapping"
                ]
            }
        },
        "MockResponse.get_all": {
            "name": "get_all",
            "location": 128,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "default": [
                    "str",
                    "bool",
                    "int",
                    "list"
                ]
            }
        },
        "MockResponse.info": {
            "name": "info",
            "location": 131,
            "return": [
                "int",
                "Dict[str, Union[str, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockResponse.getheaders": {
            "name": "getheaders",
            "location": 134,
            "return": [
                "str",
                "Tuple[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "MockResponse.headers": {
            "name": "headers",
            "location": 138,
            "return": [
                "dict",
                "Dict[str, Any]",
                "int",
                "Dict[str, Union[str, int]]",
                "Dict[str, Dict[str, str]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestsCookieJar.get": {
            "name": "get",
            "location": 231,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]"
                ],
                "default": [
                    "str",
                    "bool",
                    "list"
                ],
                "domain": [
                    "str",
                    "List[str]"
                ],
                "path": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "RequestsCookieJar.set": {
            "name": "set",
            "location": 244,
            "return": [
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ],
                "value": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Optional[float]",
                    "Optional[Dict[str, dict]]"
                ]
            }
        },
        "RequestsCookieJar.iterkeys": {
            "name": "iterkeys",
            "location": 266,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestsCookieJar.keys": {
            "name": "keys",
            "location": 275,
            "return": [
                "str",
                "List[Dict]",
                "List[int]",
                "List[str]",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestsCookieJar.itervalues": {
            "name": "itervalues",
            "location": 283,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestsCookieJar.values": {
            "name": "values",
            "location": 292,
            "return": [
                "List[Dict]",
                "str",
                "List[int]",
                "List[str]",
                "List[List[Any]]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestsCookieJar.iteritems": {
            "name": "iteritems",
            "location": 300,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestsCookieJar.items": {
            "name": "items",
            "location": 309,
            "return": [
                "List[Dict]",
                "str",
                "List[str]",
                "List[int]",
                "List[List[Any]]",
                "Sequence[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestsCookieJar.list_domains": {
            "name": "list_domains",
            "location": 318,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestsCookieJar.list_paths": {
            "name": "list_paths",
            "location": 326,
            "return": [
                "str",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestsCookieJar.multiple_domains": {
            "name": "multiple_domains",
            "location": 334,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestsCookieJar.get_dict": {
            "name": "get_dict",
            "location": 348,
            "return": [
                "int",
                "List[Dict[str, Any]]",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "Optional[str]"
                ],
                "path": [
                    "Optional[str]"
                ]
            }
        },
        "RequestsCookieJar.__contains__": {
            "name": "__contains__",
            "location": 363,
            "return": [
                "List[str]",
                "int",
                "str",
                "Dict[str, Any]",
                "Tuple[str, int, Dict[str, str]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "RequestsCookieJar.__getitem__": {
            "name": "__getitem__",
            "location": 370,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "RequestsCookieJar.__setitem__": {
            "name": "__setitem__",
            "location": 379,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "RequestsCookieJar.__delitem__": {
            "name": "__delitem__",
            "location": 386,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Union[str, int]"
                ]
            }
        },
        "RequestsCookieJar.set_cookie": {
            "name": "set_cookie",
            "location": 392,
            "return": [
                "Dict[str, List[str]]",
                "int",
                "Set[int]",
                "bool",
                "str",
                "bytes",
                "Optional[Dict]",
                "Dict[int, Dict]"
            ],
            "arguments": {
                "self": [],
                "cookie": [
                    "str",
                    "bool"
                ]
            }
        },
        "RequestsCookieJar.update": {
            "name": "update",
            "location": 403,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict[str, Any]",
                    "bytes",
                    "Dict[str, float]",
                    "Optional[dict]",
                    "bool"
                ]
            }
        },
        "RequestsCookieJar._find": {
            "name": "_find",
            "location": 411,
            "return": [
                "Type[T]",
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "domain": [
                    "str",
                    "Dict[str, str]"
                ],
                "path": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "RequestsCookieJar._find_no_duplicates": {
            "name": "_find_no_duplicates",
            "location": 431,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "domain": [
                    "str"
                ],
                "path": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "RequestsCookieJar.__getstate__": {
            "name": "__getstate__",
            "location": 464,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "int",
                "SendCh[trio.abc.Stream]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestsCookieJar.__setstate__": {
            "name": "__setstate__",
            "location": 471,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "RequestsCookieJar.copy": {
            "name": "copy",
            "location": 477,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestsCookieJar.get_policy": {
            "name": "get_policy",
            "location": 483,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "requests3-master/requests3/http_models.py": {
        "RequestEncodingMixin.path_url": {
            "name": "path_url",
            "location": 95,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestEncodingMixin._encode_params": {
            "name": "_encode_params",
            "location": 110,
            "return": [
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Union[bytes, str]",
                    "List[int]",
                    "Union[io.FileIO, io.BufferedReader]",
                    "str"
                ]
            }
        },
        "RequestEncodingMixin._encode_files": {
            "name": "_encode_files",
            "location": 142,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "files": [
                    "List[str]",
                    "list",
                    "List[Tuple[str, str, bool]]",
                    "int",
                    "dict"
                ],
                "data": [
                    "dict",
                    "str",
                    "Dict[str, List[Any]]",
                    "Optional[List[Any]]",
                    "List[str]"
                ]
            }
        },
        "RequestHooksMixin.register_hook": {
            "name": "register_hook",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "hook": [
                    "dict"
                ]
            }
        },
        "RequestHooksMixin.deregister_hook": {
            "name": "deregister_hook",
            "location": 221,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ],
                "hook": [
                    "dict"
                ]
            }
        },
        "Request.__init__": {
            "name": "__init__",
            "location": 274,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "bool",
                    "Optional[dict]",
                    "int"
                ],
                "url": [
                    "str",
                    "bool",
                    "Optional[dict]",
                    "int"
                ],
                "headers": [
                    "Optional[str]",
                    "Dict[str, Union[str, Any]]",
                    "List[Tuple[str, bytes]]",
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "files": [
                    "Optional[TextIO]",
                    "Optional[str]",
                    "str"
                ],
                "data": [
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ],
                "params": [
                    "Optional[Dict[str, str]]",
                    "Optional[str]",
                    "bool",
                    "str",
                    "Optional[Mapping[str, Any]]"
                ],
                "auth": [
                    "str",
                    "bool",
                    "Optional[dict]",
                    "int"
                ],
                "cookies": [
                    "str",
                    "bool",
                    "Optional[dict]",
                    "int"
                ],
                "hooks": [
                    "Optional[Any]",
                    "Optional[str]"
                ],
                "json": [
                    "str",
                    "bool",
                    "Optional[dict]",
                    "int"
                ]
            }
        },
        "Request.__repr__": {
            "name": "__repr__",
            "location": 306,
            "return": [
                "bytes",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.prepare": {
            "name": "prepare",
            "location": 309,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PreparedRequest.__init__": {
            "name": "__init__",
            "location": 355,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PreparedRequest.prepare": {
            "name": "prepare",
            "location": 372,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "int",
                    "bool"
                ],
                "url": [
                    "str"
                ],
                "headers": [
                    "str",
                    "Union[bool, str]",
                    "int"
                ],
                "files": [
                    "str",
                    "Union[bool, str]",
                    "int"
                ],
                "data": [
                    "str",
                    "Union[bool, str]",
                    "int"
                ],
                "params": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "auth": [
                    "str",
                    "int",
                    "bool"
                ],
                "cookies": [
                    "str",
                    "int",
                    "bool"
                ],
                "hooks": [
                    "str",
                    "int",
                    "bool"
                ],
                "json": [
                    "str",
                    "Union[bool, str]",
                    "int"
                ]
            }
        },
        "PreparedRequest.__repr__": {
            "name": "__repr__",
            "location": 397,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "PreparedRequest.copy": {
            "name": "copy",
            "location": 400,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PreparedRequest.prepare_method": {
            "name": "prepare_method",
            "location": 411,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "PreparedRequest._get_idna_encoded_host": {
            "name": "_get_idna_encoded_host",
            "location": 420,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "host": [
                    "str",
                    "Union[int, str]",
                    "IO",
                    "bytes",
                    "Callable"
                ]
            }
        },
        "PreparedRequest.prepare_url": {
            "name": "prepare_url",
            "location": 430,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bytes",
                    "Dict[str, Any]",
                    "dict",
                    "Optional[str]",
                    "List[int]"
                ],
                "params": [
                    "str",
                    "BinaryIO",
                    "List[str]"
                ],
                "validate": [
                    "str",
                    "List[str]",
                    "dict",
                    "Callable[[str], str]"
                ]
            }
        },
        "PreparedRequest.prepare_headers": {
            "name": "prepare_headers",
            "location": 496,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "Callable"
                ]
            }
        },
        "PreparedRequest.prepare_body": {
            "name": "prepare_body",
            "location": 506,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Tuple[dict, bool]",
                    "dict",
                    "Optional[List[str]]",
                    "object",
                    "List[dict]",
                    "Dict[str, Any]"
                ],
                "files": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "bytes"
                ],
                "json": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "PreparedRequest.prepare_content_length": {
            "name": "prepare_content_length",
            "location": 567,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "body": [
                    "Optional[str]",
                    "int",
                    "str",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "PreparedRequest.prepare_auth": {
            "name": "prepare_auth",
            "location": 603,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "url": [
                    "str",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "PreparedRequest.prepare_cookies": {
            "name": "prepare_cookies",
            "location": 620,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cookies": [
                    "float",
                    "str"
                ]
            }
        },
        "PreparedRequest.prepare_hooks": {
            "name": "prepare_hooks",
            "location": 639,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hooks": [
                    "bool",
                    "float"
                ]
            }
        },
        "PreparedRequest.send": {
            "name": "send",
            "location": 648,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str"
                ]
            }
        },
        "Response.__init__": {
            "name": "__init__",
            "location": 676,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.__enter__": {
            "name": "__enter__",
            "location": 714,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.__exit__": {
            "name": "__exit__",
            "location": 717,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.__getstate__": {
            "name": "__getstate__",
            "location": 720,
            "return": [
                "bool",
                "str",
                "int",
                "List[Dict[str, Any]]",
                "Set[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.__setstate__": {
            "name": "__setstate__",
            "location": 727,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Response.__repr__": {
            "name": "__repr__",
            "location": 734,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.__iter__": {
            "name": "__iter__",
            "location": 737,
            "return": [
                "Callable",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.uri": {
            "name": "uri",
            "location": 742,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.ok": {
            "name": "ok",
            "location": 746,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.is_redirect": {
            "name": "is_redirect",
            "location": 762,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.is_permanent_redirect": {
            "name": "is_permanent_redirect",
            "location": 771,
            "return": [
                "bool",
                "Optional[int]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.next": {
            "name": "next",
            "location": 779,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.apparent_encoding": {
            "name": "apparent_encoding",
            "location": 784,
            "return": [
                "str",
                "Mapping[str, Any]",
                "Optional[str]",
                "int",
                "List[Callable]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.iter_content": {
            "name": "iter_content",
            "location": 788,
            "return": [
                "int",
                "Dict[str, str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "decode_unicode": [
                    "int",
                    "str"
                ]
            }
        },
        "Response.iter_lines": {
            "name": "iter_lines",
            "location": 867,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "chunk_size": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "decode_unicode": [
                    "int",
                    "List[str]",
                    "str",
                    "Tuple[int, int]"
                ],
                "delimiter": [
                    "List[str]",
                    "bool",
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "Response.content": {
            "name": "content",
            "location": 943,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.text": {
            "name": "text",
            "location": 966,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.json": {
            "name": "json",
            "location": 999,
            "return": [
                "bool",
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.links": {
            "name": "links",
            "location": 1027,
            "return": [
                "bool",
                "str",
                "List[str]",
                "Set[str]",
                "List[Mapping[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.raise_for_status": {
            "name": "raise_for_status",
            "location": 1039,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.close": {
            "name": "close",
            "location": 1071,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AsyncResponse.__init__": {
            "name": "__init__",
            "location": 1085,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.iter_content.generate": {
            "name": "generate",
            "location": 807,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "requests3-master/requests3/http_sessions.py": {
        "merge_setting": {
            "name": "merge_setting",
            "location": 68,
            "return": [
                "str",
                "dict",
                "bytes",
                "bool",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request_setting": [
                    "Optional[str]",
                    "Optional[bool]",
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]"
                ],
                "session_setting": [
                    "Optional[bool]",
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "dict_class": [
                    "List[str]",
                    "Set[str]"
                ]
            }
        },
        "merge_hooks": {
            "name": "merge_hooks",
            "location": 96,
            "return": [
                "int",
                "bytes",
                "str",
                "bool"
            ],
            "arguments": {
                "request_hooks": [
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "dict",
                    "Optional[bool]",
                    "List[Tuple[str, bytes]]"
                ],
                "session_hooks": [
                    "Optional[Dict[str, Any]]",
                    "dict",
                    "Dict[str, List[Callable]]",
                    "Optional[str]"
                ],
                "dict_class": [
                    "bool",
                    "dict",
                    "Callable",
                    "List[bytes]",
                    "int"
                ]
            }
        },
        "SessionRedirectMixin.get_redirect_target": {
            "name": "get_redirect_target",
            "location": 112,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "_models.Request"
                ]
            }
        },
        "SessionRedirectMixin.resolve_redirects": {
            "name": "resolve_redirects",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "response": [
                    "List[dict]",
                    "algoliasearch.http.transporter.Request",
                    "kobin.requests.Request"
                ],
                "request": [
                    "Dict[str, Any]",
                    "dict",
                    "int",
                    "datetime.date",
                    "Dict[str, str]"
                ],
                "stream": [
                    "bool",
                    "List[bytes]",
                    "int",
                    "Optional[str]"
                ],
                "timeout": [
                    "bool",
                    "List[bytes]",
                    "int",
                    "Optional[str]"
                ],
                "verify": [
                    "bool",
                    "List[bytes]",
                    "int",
                    "Optional[str]"
                ],
                "cert": [
                    "bool",
                    "List[bytes]",
                    "int",
                    "Optional[str]"
                ],
                "proxies": [],
                "yield_requests": []
            }
        },
        "SessionRedirectMixin.rebuild_auth": {
            "name": "rebuild_auth",
            "location": 262,
            "return": [
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "prepared_request": [
                    "str",
                    "dict",
                    "flask.Request"
                ],
                "response": [
                    "fausweb.Request",
                    "dict"
                ]
            }
        },
        "SessionRedirectMixin.rebuild_proxies": {
            "name": "rebuild_proxies",
            "location": 283,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "prepared_request": [
                    "str",
                    "starlette.requests.Request",
                    "flask.Request",
                    "dict",
                    "aiohttp.web.Request"
                ],
                "proxies": [
                    "Optional[bytes]"
                ]
            }
        },
        "SessionRedirectMixin.rebuild_method": {
            "name": "rebuild_method",
            "location": 319,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "prepared_request": [
                    "aiohttp.web.Request"
                ],
                "response": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[Any, List[Any]]"
                ]
            }
        },
        "HTTPSession.__init__": {
            "name": "__init__",
            "location": 379,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPSession.__enter__": {
            "name": "__enter__",
            "location": 422,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPSession.__exit__": {
            "name": "__exit__",
            "location": 425,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPSession.prepare_request": {
            "name": "prepare_request",
            "location": 428,
            "return": [
                "Dict[str, Any]",
                "dict",
                "List[Dict]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "flask.Request",
                    "str"
                ]
            }
        },
        "HTTPSession.request": {
            "name": "request",
            "location": 466,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Exception",
                "tartare.core.models.Job",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "dict"
                ],
                "url": [
                    "dict"
                ],
                "params": [
                    "dict"
                ],
                "data": [
                    "dict"
                ],
                "headers": [
                    "dict"
                ],
                "cookies": [
                    "dict"
                ],
                "files": [
                    "dict"
                ],
                "auth": [
                    "dict"
                ],
                "timeout": [
                    "bool",
                    "int",
                    "Optional[Callable[[], Any]]",
                    "Optional[datetime.timedelta]",
                    "Optional[str]"
                ],
                "allow_redirects": [
                    "bool",
                    "int",
                    "Optional[Callable[[], Any]]",
                    "Optional[datetime.timedelta]",
                    "Optional[str]"
                ],
                "proxies": [
                    "str",
                    "dict",
                    "Optional[\"ShippingInfo\"]",
                    "defaultdict"
                ],
                "hooks": [
                    "dict"
                ],
                "stream": [
                    "str",
                    "dict",
                    "Exception",
                    "Dict[str, str]"
                ],
                "verify": [
                    "str",
                    "dict",
                    "Exception",
                    "Dict[str, str]"
                ],
                "cert": [
                    "str",
                    "dict",
                    "Exception",
                    "Dict[str, str]"
                ],
                "json": [
                    "dict"
                ]
            }
        },
        "HTTPSession.get": {
            "name": "get",
            "location": 545,
            "return": [
                "int",
                "bytes",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "HTTPSession.head": {
            "name": "head",
            "location": 555,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "HTTPSession.send": {
            "name": "send",
            "location": 565,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "_models.Request",
                    "aiohttp.web.Request"
                ]
            }
        },
        "HTTPSession.merge_environment_settings": {
            "name": "merge_environment_settings",
            "location": 624,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "proxies": [
                    "dict",
                    "T"
                ],
                "stream": [
                    "str",
                    "tartare.core.publisher.AbstractProtocol",
                    "Optional[List[T]]"
                ],
                "verify": [
                    "str",
                    "dict",
                    "Dict[str, object]",
                    "Type['Declared']",
                    "Dict[str, Any]"
                ],
                "cert": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "HTTPSession.get_adapter": {
            "name": "get_adapter",
            "location": 666,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "HTTPSession.close": {
            "name": "close",
            "location": 679,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPSession.mount": {
            "name": "mount",
            "location": 684,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str",
                    "IO[str]"
                ],
                "adapter": [
                    "str",
                    "bool"
                ]
            }
        },
        "HTTPSession.__getstate__": {
            "name": "__getstate__",
            "location": 694,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPSession.__setstate__": {
            "name": "__setstate__",
            "location": 698,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "AsyncHTTPSession.__init__": {
            "name": "__init__",
            "location": 704,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "backend": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        }
    },
    "requests3-master/requests3/http_stati.py": {},
    "requests3-master/requests3/http_utils.py": {
        "dict_to_sequence": {
            "name": "dict_to_sequence",
            "location": 108,
            "return": [
                "str",
                "float",
                "Iterable[int]"
            ],
            "arguments": {
                "d": [
                    "Callable[[Any], T]",
                    "Iterable[Any]",
                    "int",
                    "float",
                    "list"
                ]
            }
        },
        "super_len": {
            "name": "super_len",
            "location": 118,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "o": [
                    "int",
                    "str"
                ]
            }
        },
        "get_netrc_auth": {
            "name": "get_netrc_auth",
            "location": 173,
            "return": [
                "str",
                "Optional[int]",
                "int",
                "Optional[bool]",
                "Optional[str]"
            ],
            "arguments": {
                "url": [
                    "bool",
                    "int",
                    "str",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "raise_errors": [
                    "bool",
                    "int",
                    "Type[T]",
                    "str",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "guess_filename": {
            "name": "guess_filename",
            "location": 219,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "extract_zipped_paths": {
            "name": "extract_zipped_paths",
            "location": 226,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "from_key_val_list": {
            "name": "from_key_val_list",
            "location": 258,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[Dict]",
                "str",
                "Optional[Any]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "Optional[bytes]"
            ],
            "arguments": {
                "value": [
                    "Optional[str]",
                    "dict",
                    "str",
                    "Optional[Type]",
                    "Callable"
                ]
            }
        },
        "to_key_val_list": {
            "name": "to_key_val_list",
            "location": 283,
            "return": [
                "Optional[str]",
                "int",
                "bool",
                "Optional[bool]",
                "str"
            ],
            "arguments": {
                "value": [
                    "Optional[str]",
                    "str",
                    "Union[List, Tuple]",
                    "T",
                    "Optional[bytes]",
                    "Optional[int]",
                    "Type[T]"
                ]
            }
        },
        "parse_list_header": {
            "name": "parse_list_header",
            "location": 310,
            "return": [
                "Dict[str, Any]",
                "dict",
                "list",
                "Tuple[int, Dict[str, Any]]"
            ],
            "arguments": {
                "value": [
                    "dict",
                    "str",
                    "Union[str]"
                ]
            }
        },
        "parse_dict_header": {
            "name": "parse_dict_header",
            "location": 342,
            "return": [
                "Dict[str, Any]",
                "dict",
                "list"
            ],
            "arguments": {
                "value": [
                    "dict",
                    "Union[dict, List[Any]]",
                    "Dict[str, Any]",
                    "List[str]",
                    "list",
                    "str"
                ]
            }
        },
        "unquote_header_value": {
            "name": "unquote_header_value",
            "location": 378,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Mapping[str, str]"
                ],
                "is_filename": [
                    "str"
                ]
            }
        },
        "dict_from_cookiejar": {
            "name": "dict_from_cookiejar",
            "location": 403,
            "return": [
                "Dict[str, Union[int, str]]",
                "Dict[str, Any]",
                "Dict[str, Dict]",
                "Optional[Dict[str, str]]",
                "Dict[int, List[str]]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "cj": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "add_dict_to_cookiejar": {
            "name": "add_dict_to_cookiejar",
            "location": 415,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "cj": [
                    "dict",
                    "Dict[str, bool]",
                    "Dict[str, Any]"
                ],
                "cookie_dict": [
                    "dict",
                    "Dict[str, bool]",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_encodings_from_content": {
            "name": "get_encodings_from_content",
            "location": 427,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "content": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "get_encoding_from_headers": {
            "name": "get_encoding_from_headers",
            "location": 450,
            "return": [
                "int",
                "Optional[str]",
                "Optional[Dict[str, Any]]",
                "List[\"InlineContent\"]",
                "Union[str, None]"
            ],
            "arguments": {
                "headers": [
                    "dict",
                    "str",
                    "bool",
                    "Mapping"
                ]
            }
        },
        "stream_decode_response_unicode": {
            "name": "stream_decode_response_unicode",
            "location": 468,
            "return": [
                ""
            ],
            "arguments": {
                "iterator": [
                    "int",
                    "Optional[Callable]",
                    "T",
                    "bool"
                ],
                "r": [
                    "str",
                    "Tuple[int]",
                    "Union[float, str]",
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "iter_slices": {
            "name": "iter_slices",
            "location": 481,
            "return": [
                ""
            ],
            "arguments": {
                "string": [
                    "str",
                    "int",
                    "bytes"
                ],
                "slice_length": [
                    "str",
                    "int",
                    "List[str]",
                    "Sequence[int]",
                    "Dict[str, int]",
                    "Tuple[str]"
                ]
            }
        },
        "unquote_unreserved": {
            "name": "unquote_unreserved",
            "location": 498,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "uri": [
                    "str"
                ]
            }
        },
        "requote_uri": {
            "name": "requote_uri",
            "location": 536,
            "return": [
                "Dict[str, int]",
                "Optional[bool]",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "uri": [
                    "list",
                    "int",
                    "List[List[T]]",
                    "bool"
                ]
            }
        },
        "address_in_network": {
            "name": "address_in_network",
            "location": 559,
            "return": [
                "Iterator",
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "ip": [
                    "int",
                    "bytes"
                ],
                "net": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "dotted_netmask": {
            "name": "dotted_netmask",
            "location": 574,
            "return": [
                "str",
                "int",
                "bytes",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "mask": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "is_ipv4_address": {
            "name": "is_ipv4_address",
            "location": 585,
            "return": [
                "bool"
            ],
            "arguments": {
                "string_ip": [
                    "str",
                    "bool"
                ]
            }
        },
        "is_valid_cidr": {
            "name": "is_valid_cidr",
            "location": 597,
            "return": [
                "bool"
            ],
            "arguments": {
                "string_network": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "set_environ": {
            "name": "set_environ",
            "location": 624,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "env_name": [
                    "str"
                ],
                "value": [
                    "Optional[str]",
                    "str",
                    "Optional[Iterable[str]]",
                    "Optional[int]"
                ]
            }
        },
        "should_bypass_proxies": {
            "name": "should_bypass_proxies",
            "location": 646,
            "return": [
                "bool"
            ],
            "arguments": {
                "url": [
                    "str",
                    "int",
                    "list",
                    "List[int]"
                ],
                "no_proxy": [
                    "str",
                    "List[str]",
                    "List[bytes]"
                ]
            }
        },
        "get_environ_proxies": {
            "name": "get_environ_proxies",
            "location": 692,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "no_proxy": [
                    "str"
                ]
            }
        },
        "select_proxy": {
            "name": "select_proxy",
            "location": 705,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Optional[bytes]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "float",
                    "List[Tuple[int, int]]"
                ],
                "proxies": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "default_user_agent": {
            "name": "default_user_agent",
            "location": 733,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Tuple[str, int]",
                    "set"
                ]
            }
        },
        "default_headers": {
            "name": "default_headers",
            "location": 742,
            "return": [
                "dict",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {}
        },
        "parse_header_links": {
            "name": "parse_header_links",
            "location": 756,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "float"
                ]
            }
        },
        "is_valid_location": {
            "name": "is_valid_location",
            "location": 786,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "response": [
                    "dict"
                ]
            }
        },
        "guess_json_utf": {
            "name": "guess_json_utf",
            "location": 806,
            "return": [
                "str",
                "bool",
                "bytearray"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "bytes",
                    "Union[bytes, bytearray, memoryview]"
                ]
            }
        },
        "prepend_scheme_if_needed": {
            "name": "prepend_scheme_if_needed",
            "location": 846,
            "return": [
                "bool",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Iterable[str]",
                    "List[str]"
                ],
                "new_scheme": [
                    "str",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "get_auth_from_url": {
            "name": "get_auth_from_url",
            "location": 861,
            "return": [
                "bytes",
                "Callable",
                "bool",
                "pymatgen.io.vasp.inputs.Poscar"
            ],
            "arguments": {
                "url": [
                    "str",
                    "bool",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "check_header_validity": {
            "name": "check_header_validity",
            "location": 880,
            "return": [
                "None"
            ],
            "arguments": {
                "header": [
                    "Dict[str, float]"
                ]
            }
        },
        "urldefragauth": {
            "name": "urldefragauth",
            "location": 902,
            "return": [
                "bool",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "rewind_body": {
            "name": "rewind_body",
            "location": 916,
            "return": [
                "None"
            ],
            "arguments": {
                "prepared_request": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "is_stream": {
            "name": "is_stream",
            "location": 935,
            "return": [
                "bool"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "List[Dict[str, Any]]",
                    "list",
                    "Dict[str, float]"
                ]
            }
        },
        "proxy_bypass_registry": {
            "name": "proxy_bypass_registry",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "host": [
                    "int",
                    "str"
                ]
            }
        },
        "proxy_bypass": {
            "name": "proxy_bypass",
            "location": 95,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "host": [
                    "str",
                    "int"
                ]
            }
        },
        "unquote_unreserved.convert": {
            "name": "convert",
            "location": 508,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "is_bytes": [
                    "int",
                    "str"
                ],
                "c": [
                    "int",
                    "str",
                    "Tuple[str]",
                    "bool"
                ]
            }
        }
    },
    "requests3-master/requests3/_basics.py": {},
    "requests3-master/requests3/_hooks.py": {
        "default_hooks": {
            "name": "default_hooks",
            "location": 16,
            "return": [
                "bool",
                "Tuple[int, int]",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "dispatch_hook": {
            "name": "dispatch_hook",
            "location": 21,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "key": [
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "T",
                    "bytes",
                    "Type[T]"
                ],
                "hooks": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "bytes",
                    "Dict[str, str]",
                    "List[Dict[str, str]]",
                    "bool"
                ],
                "hook_data": [
                    "str",
                    "dict",
                    "List[str]",
                    "bool",
                    "bytes"
                ]
            }
        }
    },
    "requests3-master/requests3/_internal_utils.py": {
        "to_native_string": {
            "name": "to_native_string",
            "location": 13,
            "return": [
                "str",
                "OrderedDict",
                "Dict[str, Any]",
                "list",
                "Optional[str]"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "encoding": [
                    "str",
                    "bytes"
                ]
            }
        },
        "unicode_is_ascii": {
            "name": "unicode_is_ascii",
            "location": 25,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "u_string": [
                    "str",
                    "AnyStr",
                    "bytes"
                ]
            }
        }
    },
    "requests3-master/requests3/_structures.py": {
        "CaseInsensitiveDict.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "CaseInsensitiveDict.__setitem__": {
            "name": "__setitem__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "CaseInsensitiveDict.__getitem__": {
            "name": "__getitem__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "CaseInsensitiveDict.__delitem__": {
            "name": "__delitem__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "CaseInsensitiveDict.__iter__": {
            "name": "__iter__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CaseInsensitiveDict.__len__": {
            "name": "__len__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CaseInsensitiveDict.lower_items": {
            "name": "lower_items",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CaseInsensitiveDict.__eq__": {
            "name": "__eq__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "CaseInsensitiveDict.copy": {
            "name": "copy",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CaseInsensitiveDict.__repr__": {
            "name": "__repr__",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPHeaderDict.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "HTTPHeaderDict.__setitem__": {
            "name": "__setitem__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "val": []
            }
        },
        "HTTPHeaderDict.__getitem__": {
            "name": "__getitem__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "HTTPHeaderDict.lower_items": {
            "name": "lower_items",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPHeaderDict.copy": {
            "name": "copy",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPHeaderDict.getlist": {
            "name": "getlist",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "HTTPHeaderDict.setlist": {
            "name": "setlist",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "values": []
            }
        },
        "HTTPHeaderDict._extend": {
            "name": "_extend",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "values": []
            }
        },
        "HTTPHeaderDict.add": {
            "name": "add",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "val": []
            }
        },
        "HTTPHeaderDict.extend": {
            "name": "extend",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPHeaderDict._as_dict": {
            "name": "_as_dict",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPHeaderDict.__repr__": {
            "name": "__repr__",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LookupDict.__init__": {
            "name": "__init__",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "LookupDict.__repr__": {
            "name": "__repr__",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LookupDict.__getitem__": {
            "name": "__getitem__",
            "location": 215,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "LookupDict.__iter__": {
            "name": "__iter__",
            "location": 219,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LookupDict.get": {
            "name": "get",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        }
    },
    "requests3-master/requests3/_types.py": {},
    "requests3-master/requests3/__init__.py": {
        "check_compatibility": {
            "name": "check_compatibility",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "urllib3_version": [
                    "str",
                    "List[str]"
                ],
                "chardet_version": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "_check_cryptography": {
            "name": "_check_cryptography",
            "location": 70,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "cryptography_version": [
                    "str",
                    "int",
                    "bool",
                    "list"
                ]
            }
        }
    },
    "requests3-master/requests3/__version__.py": {},
    "requests3-master/requests3/core/api.py": {},
    "requests3-master/requests3/core/__init__.py": {
        "blocking_request": {
            "name": "blocking_request",
            "location": 30,
            "return": [
                "List[str]",
                "MutableMapping[str, List[int]]",
                "Set[str]",
                "MutableMapping[str, int]",
                "Tuple[str, Any]",
                "Sequence[dict]",
                "str"
            ],
            "arguments": {
                "method": [
                    "dict",
                    "str"
                ],
                "url": [
                    "dict",
                    "str"
                ],
                "timeout": [
                    "Optional[bool]",
                    "List[str]",
                    "Optional[Iterable[str]]"
                ]
            }
        }
    },
    "requests3-master/requests3/core/_http/base.py": {
        "Request.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "method": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "str"
                ],
                "target": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "str"
                ],
                "headers": [
                    "Dict[str, Any]",
                    "Dict[str, Type[Any]]",
                    "int",
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Dict[str, str]]"
                ],
                "body": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "str"
                ]
            }
        },
        "Request.add_host": {
            "name": "add_host",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "host": [
                    "dict",
                    "Dict[str, str]",
                    "str",
                    "Union[str, dict]"
                ],
                "port": [
                    "str",
                    "dict",
                    "bytes",
                    "Mapping[str, Any]"
                ],
                "scheme": [
                    "dict",
                    "Dict[str, Any]",
                    "int",
                    "Union[Dict, str]"
                ]
            }
        },
        "Response.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "status_code": [
                    "int",
                    "Optional[int]"
                ],
                "headers": [
                    "str",
                    "dict",
                    "bytes",
                    "List[Tuple[str, str, int]]",
                    "List[str]"
                ],
                "body": [
                    "int",
                    "str",
                    "List[int]",
                    "bool"
                ],
                "version": [
                    "int",
                    "str",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "Response.complete": {
            "name": "complete",
            "location": 95,
            "return": [
                "str",
                "Dict[str, str]",
                "MutableMapping[str, Any]",
                "int",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "requests3-master/requests3/core/_http/connection.py": {
        "_match_hostname": {
            "name": "_match_hostname",
            "location": 379,
            "return": [
                ""
            ],
            "arguments": {
                "cert": [
                    "bytes",
                    "str"
                ],
                "asserted_hostname": [
                    "bytes",
                    "str"
                ]
            }
        },
        "HTTPConnection.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPConnection.host": {
            "name": "host",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str, bytes]"
                ]
            }
        },
        "HTTPConnection._new_conn": {
            "name": "_new_conn",
            "location": 149,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPConnection._prepare_conn": {
            "name": "_prepare_conn",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "HTTPConnection.connect": {
            "name": "connect",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPConnection.request_chunked": {
            "name": "request_chunked",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Dict[str, str]"
                ],
                "url": [
                    "str",
                    "Dict[str, str]"
                ],
                "body": [
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Match]",
                    "List[Tuple[str, bytes]]"
                ],
                "headers": [
                    "str",
                    "Optional[bytes]"
                ]
            }
        },
        "HTTPSConnection.__init__": {
            "name": "__init__",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "port": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "key_file": [
                    "str",
                    "Optional[str]",
                    "Union[str, bytes, int]",
                    "Optional[List[str]]"
                ],
                "cert_file": [
                    "str",
                    "bool",
                    "Callable[[float], None]",
                    "Optional[List[str]]"
                ],
                "strict": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "timeout": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "ssl_context": [
                    "bool",
                    "int",
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "Any",
                    "Optional[str]"
                ]
            }
        },
        "HTTPSConnection.connect": {
            "name": "connect",
            "location": 250,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VerifiedHTTPSConnection.set_cert": {
            "name": "set_cert",
            "location": 277,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key_file": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "cert_file": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "cert_reqs": [
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "Optional[List[str]]",
                    "bool"
                ],
                "ca_certs": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "assert_hostname": [
                    "bool"
                ],
                "assert_fingerprint": [
                    "bool"
                ],
                "ca_cert_dir": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "VerifiedHTTPSConnection.connect": {
            "name": "connect",
            "location": 307,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "requests3-master/requests3/core/_http/connectionpool.py": {},
    "requests3-master/requests3/core/_http/exceptions.py": {
        "PoolError.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "str",
                    "Optional[str]"
                ],
                "message": [
                    "str",
                    "bool"
                ]
            }
        },
        "PoolError.__reduce__": {
            "name": "__reduce__",
            "location": 22,
            "return": [
                "int",
                "Optional[str]",
                "Optional[BaseException]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestError.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "str",
                    "bool"
                ],
                "url": [
                    "str",
                    "dict",
                    "Set[str]",
                    "float"
                ],
                "message": [
                    "str",
                    "bool"
                ]
            }
        },
        "RequestError.__reduce__": {
            "name": "__reduce__",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MaxRetryError.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pool": [
                    "str",
                    "Optional[str]"
                ],
                "url": [
                    "str",
                    "bool",
                    "int"
                ],
                "reason": [
                    "str",
                    "Union[str, \"DatabaseURL\"]",
                    "bool",
                    "dict",
                    "Tuple[int, int]"
                ]
            }
        },
        "LocationParseError.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "location": [
                    "int",
                    "List[Tuple[int, int]]",
                    "bool",
                    "list"
                ]
            }
        },
        "BadVersionError.__init__": {
            "name": "__init__",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "version": [
                    "str",
                    "bool",
                    "Tuple['cirq.Qid']"
                ]
            }
        },
        "ProxySchemeUnknown.__init__": {
            "name": "__init__",
            "location": 201,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "scheme": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "HeaderParsingError.__init__": {
            "name": "__init__",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "defects": [
                    "Optional[Dict[str, Any]]",
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[List[str]]",
                    "bytes",
                    "Dict[str, Any]",
                    "dict"
                ],
                "unparsed_data": [
                    "Optional[Dict[str, Any]]",
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[List[str]]",
                    "bytes",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "FailedTunnelError.__init__": {
            "name": "__init__",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bool",
                    "int"
                ],
                "response": [
                    "int",
                    "str",
                    "float",
                    "List[str]",
                    "bytes"
                ]
            }
        }
    },
    "requests3-master/requests3/core/_http/fields.py": {
        "guess_content_type": {
            "name": "guess_content_type",
            "location": 8,
            "return": [],
            "arguments": {
                "filename": [
                    "str",
                    "dict"
                ],
                "default": [
                    "str",
                    "dict"
                ]
            }
        },
        "format_header_param": {
            "name": "format_header_param",
            "location": 23,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str",
                    "Optional[Exception]",
                    "int"
                ]
            }
        },
        "RequestField.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "data": [
                    "str",
                    "dict",
                    "Union[str, Dict[str, Any]]",
                    "int",
                    "Optional[Dict]"
                ],
                "filename": [
                    "str"
                ],
                "headers": [
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]",
                    "Optional[List[str]]",
                    "List[Tuple[str, str, int]]"
                ]
            }
        },
        "RequestField.from_tuples": {
            "name": "from_tuples",
            "location": 75,
            "return": [
                "int",
                "bool",
                "List[Dict[str, Any]]",
                "list",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "Optional[str]"
                ],
                "fieldname": [
                    "str",
                    "dict",
                    "Optional[str]"
                ],
                "value": [
                    "str",
                    "dict",
                    "List[str]",
                    "list",
                    "Tuple[object]",
                    "bytes"
                ]
            }
        },
        "RequestField._render_part": {
            "name": "_render_part",
            "location": 106,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Set[str]"
                ],
                "value": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "RequestField._render_parts": {
            "name": "_render_parts",
            "location": 117,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "header_parts": [
                    "dict",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "RequestField.render_headers": {
            "name": "render_headers",
            "location": 137,
            "return": [
                "str",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestField.make_multipart": {
            "name": "make_multipart",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "content_disposition": [
                    "str"
                ],
                "content_type": [
                    "str"
                ],
                "content_location": [
                    "str"
                ]
            }
        }
    },
    "requests3-master/requests3/core/_http/filepost.py": {
        "choose_boundary": {
            "name": "choose_boundary",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "iter_field_objects": {
            "name": "iter_field_objects",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "fields": []
            }
        },
        "iter_fields": {
            "name": "iter_fields",
            "location": 49,
            "return": [
                "Set[str]",
                "dict",
                "Dict[str, List[Callable]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "fields": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "encode_multipart_formdata": {
            "name": "encode_multipart_formdata",
            "location": 67,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "fields": [
                    "str",
                    "io.StringIO",
                    "Dict[str, str]"
                ],
                "boundary": []
            }
        }
    },
    "requests3-master/requests3/core/_http/poolmanager.py": {},
    "requests3-master/requests3/core/_http/request.py": {
        "RequestMethods.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "MutableMapping"
                ]
            }
        },
        "RequestMethods.urlopen": {
            "name": "urlopen",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "bytes",
                    "Mapping[str, Optional[float]]",
                    "List[Tuple[bytes, bytes]]",
                    "int"
                ],
                "url": [
                    "str",
                    "bytes",
                    "Mapping[str, Optional[float]]",
                    "List[Tuple[bytes, bytes]]",
                    "int"
                ],
                "body": [
                    "str",
                    "bytes",
                    "Mapping[str, Optional[float]]",
                    "List[Tuple[bytes, bytes]]",
                    "int"
                ],
                "headers": [
                    "str",
                    "bytes",
                    "Mapping[str, Optional[float]]",
                    "List[Tuple[bytes, bytes]]",
                    "int"
                ],
                "encode_multipart": [
                    "str",
                    "bytes",
                    "Mapping[str, Optional[float]]",
                    "List[Tuple[bytes, bytes]]",
                    "int"
                ],
                "multipart_boundary": [
                    "str",
                    "bytes",
                    "Mapping[str, Optional[float]]",
                    "List[Tuple[bytes, bytes]]",
                    "int"
                ]
            }
        },
        "RequestMethods.request": {
            "name": "request",
            "location": 59,
            "return": [
                "dict",
                "Dict[str, Union[int, str]]",
                "Optional[Dict[str, str]]",
                "Dict[int, List[str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "BaseException"
                ],
                "url": [
                    "Optional[Dict[str, Any]]",
                    "str",
                    "Dict[str, str]"
                ],
                "fields": [
                    "Optional[Dict[str, Any]]",
                    "str",
                    "Dict[str, str]"
                ],
                "headers": [
                    "Optional[Dict[str, Any]]",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "RequestMethods.request_encode_url": {
            "name": "request_encode_url",
            "location": 81,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "bool",
                    "Callable[[str], str]"
                ],
                "url": [
                    "bool",
                    "dict",
                    "Optional[Dict]",
                    "list"
                ],
                "fields": [
                    "str",
                    "List[str]"
                ],
                "headers": [
                    "Optional[Dict[str, Any]]",
                    "Optional[Mapping]",
                    "Optional[Dict[str, str]]",
                    "Optional[dict]",
                    "Optional[str]",
                    "Optional[Type[Any]]"
                ]
            }
        },
        "RequestMethods.request_encode_body": {
            "name": "request_encode_body",
            "location": 94,
            "return": [
                "Mapping[str, Any]",
                "str",
                "Dict[str, Any]",
                "MutableMapping"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "url": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "fields": [
                    "str",
                    "dict"
                ],
                "headers": [
                    "dict",
                    "Optional[Mapping[str, Any]]",
                    "Optional[Mapping]"
                ],
                "encode_multipart": [
                    "bool",
                    "Optional[int]"
                ],
                "multipart_boundary": [
                    "str",
                    "dict",
                    "Mapping[str, str]",
                    "Callable"
                ]
            }
        }
    },
    "requests3-master/requests3/core/_http/response.py": {},
    "requests3-master/requests3/core/_http/_collections.py": {
        "RecentlyUsedContainer.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "maxsize": [
                    "int",
                    "float",
                    "Optional[List[str]]",
                    "List[List[int]]"
                ],
                "dispose_func": [
                    "int",
                    "float",
                    "Optional[List[str]]",
                    "List[List[int]]"
                ]
            }
        },
        "RecentlyUsedContainer.__getitem__": {
            "name": "__getitem__",
            "location": 52,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "RecentlyUsedContainer.__setitem__": {
            "name": "__setitem__",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "Optional[str]"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        },
        "RecentlyUsedContainer.__delitem__": {
            "name": "__delitem__",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "RecentlyUsedContainer.__len__": {
            "name": "__len__",
            "location": 78,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecentlyUsedContainer.__iter__": {
            "name": "__iter__",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RecentlyUsedContainer.clear": {
            "name": "clear",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RecentlyUsedContainer.keys": {
            "name": "keys",
            "location": 96,
            "return": [
                "bool",
                "str",
                "List[str]",
                "Set[str]",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPHeaderDict.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "Optional[Dict[str, str]]",
                    "Optional[str]",
                    "bool",
                    "Optional[dict]"
                ]
            }
        },
        "HTTPHeaderDict.__setitem__": {
            "name": "__setitem__",
            "location": 146,
            "return": [
                "bytes",
                "str",
                "Callable",
                "OrderedDict"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "KT"
                ],
                "val": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "HTTPHeaderDict.__getitem__": {
            "name": "__getitem__",
            "location": 150,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "float",
                    "bool",
                    "Hashable",
                    "Union[float, int]"
                ]
            }
        },
        "HTTPHeaderDict.__delitem__": {
            "name": "__delitem__",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str",
                    "int",
                    "float",
                    "tuple"
                ]
            }
        },
        "HTTPHeaderDict.__contains__": {
            "name": "__contains__",
            "location": 157,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "HTTPHeaderDict.__eq__": {
            "name": "__eq__",
            "location": 160,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AbstractSet[T]"
                ]
            }
        },
        "HTTPHeaderDict.__ne__": {
            "name": "__ne__",
            "location": 170,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "HTTPHeaderDict.__len__": {
            "name": "__len__",
            "location": 178,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPHeaderDict.__iter__": {
            "name": "__iter__",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPHeaderDict.pop": {
            "name": "pop",
            "location": 186,
            "return": [
                "str",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "default": [
                    "str",
                    "bytes",
                    "int",
                    "List[Tuple[int, int]]",
                    "Optional[str]"
                ]
            }
        },
        "HTTPHeaderDict.discard": {
            "name": "discard",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "HTTPHeaderDict.add": {
            "name": "add",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "KT"
                ],
                "val": [
                    "str",
                    "bytes",
                    "slice",
                    "int",
                    "bool"
                ]
            }
        },
        "HTTPHeaderDict.extend": {
            "name": "extend",
            "location": 227,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPHeaderDict.getlist": {
            "name": "getlist",
            "location": 254,
            "return": [
                "list",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "float",
                    "Hashable"
                ],
                "default": [
                    "str",
                    "bytes",
                    "int",
                    "List[Tuple[int, int]]",
                    "Optional[str]"
                ]
            }
        },
        "HTTPHeaderDict.__repr__": {
            "name": "__repr__",
            "location": 275,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPHeaderDict._copy_from": {
            "name": "_copy_from",
            "location": 278,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict[str, Any]",
                    "Callable",
                    "str"
                ]
            }
        },
        "HTTPHeaderDict.copy": {
            "name": "copy",
            "location": 286,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPHeaderDict.iteritems": {
            "name": "iteritems",
            "location": 291,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPHeaderDict.itermerged": {
            "name": "itermerged",
            "location": 298,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPHeaderDict.items": {
            "name": "items",
            "location": 304,
            "return": [
                "List[Dict]",
                "str",
                "List[str]",
                "List[int]",
                "List[List[Any]]",
                "Sequence[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPHeaderDict.from_httplib": {
            "name": "from_httplib",
            "location": 308,
            "return": [
                "int",
                "dict",
                "Dict[str, float]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "bytes",
                    "type"
                ],
                "message": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "bytes",
                    "type"
                ]
            }
        },
        "RLock.__enter__": {
            "name": "__enter__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RLock.__exit__": {
            "name": "__exit__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "exc_value": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "traceback": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        }
    },
    "requests3-master/requests3/core/_http/__init__.py": {
        "add_stderr_logger": {
            "name": "add_stderr_logger",
            "location": 80,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "level": [
                    "int",
                    "float",
                    "Optional[\"GraphLogger\"]",
                    "Exception"
                ]
            }
        },
        "disable_warnings": {
            "name": "disable_warnings",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "category": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "NullHandler.emit": {
            "name": "emit",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "record": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "requests3-master/requests3/core/_http/contrib/appengine.py": {
        "is_appengine": {
            "name": "is_appengine",
            "location": 298,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "is_appengine_sandbox": {
            "name": "is_appengine_sandbox",
            "location": 302,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "is_local_appengine": {
            "name": "is_local_appengine",
            "location": 306,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "is_prod_appengine": {
            "name": "is_prod_appengine",
            "location": 313,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "is_prod_appengine_mvms": {
            "name": "is_prod_appengine_mvms",
            "location": 321,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {}
        },
        "AppEngineManager.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "bool",
                    "Optional[Any]",
                    "bytes",
                    "Tuple[str, bool]",
                    "OrderedDict",
                    "Dict[str, Any]"
                ],
                "retries": [
                    "str",
                    "Optional[dict]"
                ],
                "validate_certificate": [
                    "List[int]",
                    "Tuple[str, List[str]]",
                    "Sequence",
                    "MutableMapping",
                    "Optional[int]",
                    "str",
                    "Dict[str, Any]"
                ],
                "urlfetch_retries": [
                    "bool",
                    "str",
                    "cirq.api.google.v1.params_pb2.ZipSweep",
                    "List[str]"
                ]
            }
        },
        "AppEngineManager.__enter__": {
            "name": "__enter__",
            "location": 127,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppEngineManager.__exit__": {
            "name": "__exit__",
            "location": 130,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "AppEngineManager.urlopen": {
            "name": "urlopen",
            "location": 134,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]",
                "google.oauth2.credentials.Credentials",
                "guillotina.response.Response"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "dict",
                    "Dict[str, str]",
                    "str",
                    "\"ResponseType\"",
                    "bool"
                ],
                "url": [
                    "dict",
                    "Dict[str, str]",
                    "str",
                    "\"ResponseType\"",
                    "bool"
                ],
                "body": [
                    "dict",
                    "Dict[str, str]",
                    "str",
                    "\"ResponseType\"",
                    "bool"
                ],
                "headers": [
                    "dict",
                    "Dict[str, str]",
                    "str",
                    "\"ResponseType\"",
                    "bool"
                ],
                "retries": [
                    "str",
                    "Optional[str]",
                    "int",
                    "qutebrowser.api.apitypes.Tab",
                    "Mapping",
                    "List[str]"
                ],
                "redirect": [
                    "Optional[bool]",
                    "str",
                    "int",
                    "qutebrowser.api.apitypes.Tab"
                ],
                "timeout": [
                    "dict",
                    "Dict[str, str]",
                    "str",
                    "\"ResponseType\"",
                    "bool"
                ]
            }
        },
        "AppEngineManager._urlfetch_response_to_http_response": {
            "name": "_urlfetch_response_to_http_response",
            "location": 248,
            "return": [
                "bool",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "urlfetch_resp": [
                    "int",
                    "Mapping",
                    "str"
                ]
            }
        },
        "AppEngineManager._get_absolute_timeout": {
            "name": "_get_absolute_timeout",
            "location": 271,
            "return": [
                "Optional[str]",
                "str",
                "Union[None, List[str]]"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "int",
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "AppEngineManager._get_retries": {
            "name": "_get_retries",
            "location": 286,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "retries": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "redirect": [
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "requests3-master/requests3/core/_http/contrib/pyopenssl.py": {
        "inject_into_urllib3": {
            "name": "inject_into_urllib3",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "extract_from_urllib3": {
            "name": "extract_from_urllib3",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_validate_dependencies_met": {
            "name": "_validate_dependencies_met",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_dnsname_to_stdlib": {
            "name": "_dnsname_to_stdlib",
            "location": 141,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "get_subj_alt_name": {
            "name": "get_subj_alt_name",
            "location": 173,
            "return": [
                "str"
            ],
            "arguments": {
                "peer_cert": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "_verify_callback": {
            "name": "_verify_callback",
            "location": 470,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "cnx": [
                    "int",
                    "str"
                ],
                "x509": [
                    "int",
                    "str"
                ],
                "err_no": [
                    "int",
                    "str"
                ],
                "err_depth": [
                    "int",
                    "str"
                ],
                "return_code": [
                    "int",
                    "str"
                ]
            }
        },
        "_dnsname_to_stdlib.idna_encode": {
            "name": "idna_encode",
            "location": 152,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "WrappedSocket.__init__": {
            "name": "__init__",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "int",
                    "bool",
                    "float"
                ],
                "socket": [
                    "int",
                    "bool",
                    "float"
                ],
                "suppress_ragged_eofs": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "WrappedSocket.fileno": {
            "name": "fileno",
            "location": 238,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WrappedSocket._decref_socketios": {
            "name": "_decref_socketios",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WrappedSocket.recv": {
            "name": "recv",
            "location": 248,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WrappedSocket.recv_into": {
            "name": "recv_into",
            "location": 276,
            "return": [
                "List[str]",
                "logging.LogRecord",
                "int",
                "List[List[str]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "WrappedSocket.settimeout": {
            "name": "settimeout",
            "location": 302,
            "return": [
                "str",
                "bytes",
                "float"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "float",
                    "Optional[float]",
                    "int",
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "WrappedSocket._send_until_done": {
            "name": "_send_until_done",
            "location": 305,
            "return": [
                "int",
                "pymatgen.io.vasp.inputs.Poscar",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "dict",
                    "Optional[Exception]",
                    "Optional[bool]",
                    "bytes",
                    "Union[Dict, List]"
                ]
            }
        },
        "WrappedSocket.send": {
            "name": "send",
            "location": 320,
            "return": [
                "str",
                "Optional[int]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "Union[bytes, bytearray, memoryview]"
                ]
            }
        },
        "WrappedSocket.sendall": {
            "name": "sendall",
            "location": 323,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "int",
                    "dict",
                    "Union[bytes, bytearray, memoryview]"
                ]
            }
        },
        "WrappedSocket.shutdown": {
            "name": "shutdown",
            "location": 331,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WrappedSocket.close": {
            "name": "close",
            "location": 335,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "WrappedSocket.getpeercert": {
            "name": "getpeercert",
            "location": 347,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "binary_form": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "WrappedSocket.setblocking": {
            "name": "setblocking",
            "location": 360,
            "return": [
                "str",
                "dict",
                "List[Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "flag": [
                    "Type",
                    "float",
                    "type"
                ]
            }
        },
        "WrappedSocket._reuse": {
            "name": "_reuse",
            "location": 363,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WrappedSocket._drop": {
            "name": "_drop",
            "location": 366,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "makefile": {
            "name": "makefile",
            "location": 375,
            "return": [
                "str",
                "Optional[int]",
                "List[dict]",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [
                    "str",
                    "int",
                    "List[Tuple[int, str]]"
                ],
                "mode": [
                    "int",
                    "float",
                    "Optional[Dict[int, Any]]"
                ],
                "bufsize": [
                    "int",
                    "float",
                    "Optional[Dict[int, Any]]"
                ]
            }
        },
        "PyOpenSSLContext.__init__": {
            "name": "__init__",
            "location": 392,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "protocol": [
                    "int",
                    "str"
                ]
            }
        },
        "PyOpenSSLContext.options": {
            "name": "options",
            "location": 403,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "PyOpenSSLContext.verify_mode": {
            "name": "verify_mode",
            "location": 412,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "PyOpenSSLContext.set_default_verify_paths": {
            "name": "set_default_verify_paths",
            "location": 415,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PyOpenSSLContext.set_ciphers": {
            "name": "set_ciphers",
            "location": 418,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ciphers": [
                    "str",
                    "denite.util.UserContext",
                    "int"
                ]
            }
        },
        "PyOpenSSLContext.load_verify_locations": {
            "name": "load_verify_locations",
            "location": 423,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cafile": [
                    "bool",
                    "Optional[int]",
                    "str"
                ],
                "capath": [
                    "bool",
                    "Optional[int]",
                    "str"
                ],
                "cadata": [
                    "str",
                    "gobbli.io.PredictInput",
                    "Optional[str]"
                ]
            }
        },
        "PyOpenSSLContext.load_cert_chain": {
            "name": "load_cert_chain",
            "location": 432,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "certfile": [
                    "str"
                ],
                "keyfile": [
                    "str",
                    "bool"
                ],
                "password": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "PyOpenSSLContext.wrap_socket": {
            "name": "wrap_socket",
            "location": 438,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "sock": [
                    "float",
                    "int",
                    "Optional[int]"
                ],
                "server_side": [
                    "bool",
                    "Set[Tuple[int, int]]",
                    "Optional[float]",
                    "Dict[str, str]",
                    "Optional[List[str]]",
                    "str"
                ],
                "do_handshake_on_connect": [
                    "bool",
                    "Set[Tuple[int, int]]",
                    "Optional[float]",
                    "Dict[str, str]",
                    "Optional[List[str]]",
                    "str"
                ],
                "suppress_ragged_eofs": [
                    "bool",
                    "Set[Tuple[int, int]]",
                    "Optional[float]",
                    "Dict[str, str]",
                    "Optional[List[str]]",
                    "str"
                ],
                "server_hostname": [
                    "Callable[[float], float]",
                    "str",
                    "int",
                    "float",
                    "Optional[int]"
                ]
            }
        }
    },
    "requests3-master/requests3/core/_http/contrib/securetransport.py": {
        "inject_into_urllib3": {
            "name": "inject_into_urllib3",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "extract_from_urllib3": {
            "name": "extract_from_urllib3",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_read_callback": {
            "name": "_read_callback",
            "location": 178,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "connection_id": [
                    "dict",
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "data_buffer": [
                    "int",
                    "Optional[int]",
                    "Optional[threading.RLock]"
                ],
                "data_length_pointer": [
                    "str"
                ]
            }
        },
        "_write_callback": {
            "name": "_write_callback",
            "location": 235,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "connection_id": [
                    "dict",
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "data_buffer": [
                    "str",
                    "bytes",
                    "List[str]"
                ],
                "data_length_pointer": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "WrappedSocket.__init__": {
            "name": "__init__",
            "location": 299,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "socket": [
                    "int",
                    "ssl.SSLContext",
                    "str"
                ]
            }
        },
        "WrappedSocket._raise_on_error": {
            "name": "_raise_on_error",
            "location": 317,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WrappedSocket._set_ciphers": {
            "name": "_set_ciphers",
            "location": 337,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WrappedSocket._custom_validate": {
            "name": "_custom_validate",
            "location": 350,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "verify": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "trust_bundle": [
                    "str",
                    "int"
                ]
            }
        },
        "WrappedSocket.handshake": {
            "name": "handshake",
            "location": 400,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "server_hostname": [
                    "bytes",
                    "int",
                    "bool",
                    "str"
                ],
                "verify": [
                    "bool",
                    "Union[None, int]",
                    "Optional[Union[float, Any]]",
                    "float",
                    "Optional[Tuple[float, float]]",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "trust_bundle": [
                    "bool",
                    "Union[None, int]",
                    "Optional[Union[float, Any]]",
                    "float",
                    "Optional[Tuple[float, float]]",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "min_version": [
                    "bool",
                    "Dict[str, Any]",
                    "float"
                ],
                "max_version": [
                    "Optional[int]",
                    "Optional[float]",
                    "bool",
                    "Dict[str, int]",
                    "int",
                    "str"
                ],
                "client_cert": [
                    "bool",
                    "str",
                    "Optional[Callable[..., Any]]",
                    "Optional[str]"
                ],
                "client_key": [
                    "bool",
                    "str",
                    "Optional[Callable[..., Any]]",
                    "Optional[str]"
                ],
                "client_key_passphrase": [
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "WrappedSocket.fileno": {
            "name": "fileno",
            "location": 480,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WrappedSocket._decref_socketios": {
            "name": "_decref_socketios",
            "location": 484,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WrappedSocket.recv": {
            "name": "recv",
            "location": 490,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "bufsiz": [
                    "int",
                    "bytes"
                ]
            }
        },
        "WrappedSocket.recv_into": {
            "name": "recv_into",
            "location": 496,
            "return": [
                "int",
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "int",
                    "bytearray",
                    "TextIO"
                ],
                "nbytes": [
                    "ByteString",
                    "venv.Lib.site-packages.sqlalchemy.orm.unitofwork.PostUpdateAll",
                    "List[str]",
                    "int",
                    "bytes",
                    "float"
                ]
            }
        },
        "WrappedSocket.settimeout": {
            "name": "settimeout",
            "location": 536,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "float",
                    "Optional[float]",
                    "int",
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "WrappedSocket.gettimeout": {
            "name": "gettimeout",
            "location": 539,
            "return": [
                "str",
                "int",
                "List[dict]",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "WrappedSocket.send": {
            "name": "send",
            "location": 542,
            "return": [
                "int",
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes"
                ]
            }
        },
        "WrappedSocket.sendall": {
            "name": "sendall",
            "location": 557,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "int",
                    "dict",
                    "Union[bytes, bytearray, memoryview]"
                ]
            }
        },
        "WrappedSocket.shutdown": {
            "name": "shutdown",
            "location": 563,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WrappedSocket.close": {
            "name": "close",
            "location": 567,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WrappedSocket.getpeercert": {
            "name": "getpeercert",
            "location": 587,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "binary_form": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "WrappedSocket._reuse": {
            "name": "_reuse",
            "location": 642,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WrappedSocket._drop": {
            "name": "_drop",
            "location": 645,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "makefile": {
            "name": "makefile",
            "location": 661,
            "return": [
                "int",
                "Optional[int]",
                "List[int]"
            ],
            "arguments": {
                "self": [
                    "List[str]",
                    "bytes",
                    "int"
                ],
                "mode": [
                    "List[str]",
                    "bytes",
                    "int"
                ],
                "buffering": [
                    "List[str]",
                    "bytes",
                    "int"
                ]
            }
        },
        "SecureTransportContext.__init__": {
            "name": "__init__",
            "location": 678,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "protocol": [
                    "int",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "SecureTransportContext.check_hostname": {
            "name": "check_hostname",
            "location": 696,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "SecureTransportContext.options": {
            "name": "options",
            "location": 714,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "SecureTransportContext.verify_mode": {
            "name": "verify_mode",
            "location": 723,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[int]",
                    "Callable[[], Any]",
                    "int"
                ]
            }
        },
        "SecureTransportContext.set_default_verify_paths": {
            "name": "set_default_verify_paths",
            "location": 726,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SecureTransportContext.load_default_certs": {
            "name": "load_default_certs",
            "location": 738,
            "return": [
                "Optional[str]",
                "str",
                "dict",
                "denite.util.UserContext"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecureTransportContext.set_ciphers": {
            "name": "set_ciphers",
            "location": 741,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ciphers": [
                    "bool",
                    "float"
                ]
            }
        },
        "SecureTransportContext.load_verify_locations": {
            "name": "load_verify_locations",
            "location": 746,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cafile": [
                    "str",
                    "int",
                    "Tuple[int, int]",
                    "Tuple[bytes]",
                    "Dict[str, Any]"
                ],
                "capath": [
                    "Optional[str]",
                    "str",
                    "list"
                ],
                "cadata": [
                    "str",
                    "int",
                    "Tuple[int, int]",
                    "Tuple[bytes]",
                    "Dict[str, Any]"
                ]
            }
        },
        "SecureTransportContext.load_cert_chain": {
            "name": "load_cert_chain",
            "location": 753,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "certfile": [
                    "str"
                ],
                "keyfile": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "List[str]",
                    "int"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "SecureTransportContext.wrap_socket": {
            "name": "wrap_socket",
            "location": 758,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "sock": [
                    "int",
                    "Optional[int]",
                    "Optional[Tuple[int, ...]]",
                    "str",
                    "bool"
                ],
                "server_side": [
                    "bool",
                    "Set[Tuple[int, int]]",
                    "Optional[float]",
                    "Dict[str, str]",
                    "Optional[List[str]]",
                    "str"
                ],
                "do_handshake_on_connect": [
                    "bool",
                    "Set[Tuple[int, int]]",
                    "Optional[float]",
                    "Dict[str, str]",
                    "Optional[List[str]]",
                    "str"
                ],
                "suppress_ragged_eofs": [
                    "bool",
                    "Set[Tuple[int, int]]",
                    "Optional[float]",
                    "Dict[str, str]",
                    "Optional[List[str]]",
                    "str"
                ],
                "server_hostname": [
                    "float",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "requests3-master/requests3/core/_http/contrib/socks.py": {
        "SOCKSConnection.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SOCKSConnection._do_socket_connect": {
            "name": "_do_socket_connect",
            "location": 60,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "connect_timeout": [
                    "int",
                    "List[int]",
                    "str"
                ],
                "connect_kw": [
                    "int",
                    "List[int]",
                    "str"
                ]
            }
        },
        "SOCKSProxyManager.__init__": {
            "name": "__init__",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "proxy_url": [
                    "str",
                    "int"
                ],
                "username": [
                    "str",
                    "int"
                ],
                "password": [
                    "str",
                    "int"
                ],
                "num_pools": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ],
                "headers": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "requests3-master/requests3/core/_http/contrib/__init__.py": {},
    "requests3-master/requests3/core/_http/contrib/_securetransport/bindings.py": {},
    "requests3-master/requests3/core/_http/contrib/_securetransport/low_level.py": {
        "_cf_data_from_bytes": {
            "name": "_cf_data_from_bytes",
            "location": 26,
            "return": [
                "int",
                "bytes",
                "Dict[str, Dict[str, float]]",
                "bool",
                "str"
            ],
            "arguments": {
                "bytestring": [
                    "str",
                    "bool",
                    "int",
                    "bytes",
                    "MutableMapping[str, str]"
                ]
            }
        },
        "_cf_dictionary_from_tuples": {
            "name": "_cf_dictionary_from_tuples",
            "location": 36,
            "return": [
                "int",
                "List[int]"
            ],
            "arguments": {
                "tuples": [
                    "int",
                    "float",
                    "List[list]",
                    "Tuple[int, int]"
                ]
            }
        },
        "_cf_string_to_unicode": {
            "name": "_cf_string_to_unicode",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "ctypes.CDLL",
                    "int",
                    "Type[ctypes.c_void_p]",
                    "ctypes.c_int",
                    "ctypes.c_uint32"
                ]
            }
        },
        "_assert_no_error": {
            "name": "_assert_no_error",
            "location": 81,
            "return": [
                "Iterator[Tuple[str, str]]",
                "int"
            ],
            "arguments": {
                "error": [
                    "dict",
                    "Dict[str, str]",
                    "str",
                    "Callable",
                    "Dict[str, Any]"
                ],
                "exception_class": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Optional[bool]",
                    "Union[List[str], int]",
                    "Optional[Callable[[str], Any]]"
                ]
            }
        },
        "_cert_array_from_pem": {
            "name": "_cert_array_from_pem",
            "location": 99,
            "return": [
                "Set[str]",
                "Tuple[str]",
                "Dict[str, Any]",
                "int",
                "Sequence[float]"
            ],
            "arguments": {
                "pem_bundle": [
                    "str",
                    "list",
                    "set",
                    "Pattern[str]"
                ]
            }
        },
        "_is_cert": {
            "name": "_is_cert",
            "location": 141,
            "return": [
                "Sequence[Any]",
                "type",
                "dict"
            ],
            "arguments": {
                "item": [
                    "str",
                    "dict"
                ]
            }
        },
        "_is_identity": {
            "name": "_is_identity",
            "location": 149,
            "return": [
                "Sequence[Any]",
                "type",
                "dict"
            ],
            "arguments": {
                "item": [
                    "str",
                    "dict"
                ]
            }
        },
        "_temporary_keychain": {
            "name": "_temporary_keychain",
            "location": 157,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "_load_items_from_file": {
            "name": "_load_items_from_file",
            "location": 189,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "keychain": [
                    "str",
                    "bool",
                    "dict"
                ],
                "path": [
                    "str",
                    "Union[str, bytes, int]"
                ]
            }
        },
        "_load_client_cert_chain": {
            "name": "_load_client_cert_chain",
            "location": 238,
            "return": [
                "int",
                "dict"
            ],
            "arguments": {
                "keychain": [
                    "str"
                ]
            }
        }
    },
    "requests3-master/requests3/core/_http/contrib/_securetransport/__init__.py": {},
    "requests3-master/requests3/core/_http/packages/ordered_dict.py": {
        "OrderedDict.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedDict.__setitem__": {
            "name": "__setitem__",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict"
                ],
                "value": [
                    "str"
                ],
                "dict_setitem": [
                    "str"
                ]
            }
        },
        "OrderedDict.__delitem__": {
            "name": "__delitem__",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "KT"
                ],
                "dict_delitem": [
                    "str",
                    "int",
                    "Hashable"
                ]
            }
        },
        "OrderedDict.__iter__": {
            "name": "__iter__",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedDict.__reversed__": {
            "name": "__reversed__",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedDict.clear": {
            "name": "clear",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedDict.popitem": {
            "name": "popitem",
            "location": 92,
            "return": [
                "int",
                "Sequence[str]",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "last": [
                    "bool",
                    "List[str]",
                    "Iterable"
                ]
            }
        },
        "OrderedDict.keys": {
            "name": "keys",
            "location": 117,
            "return": [
                "str",
                "List[Dict]",
                "List[int]",
                "List[str]",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedDict.values": {
            "name": "values",
            "location": 121,
            "return": [
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedDict.items": {
            "name": "items",
            "location": 125,
            "return": [
                "str",
                "Dict[str, Set[str]]",
                "List[str]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedDict.iterkeys": {
            "name": "iterkeys",
            "location": 129,
            "return": [
                "set",
                "Iterator[str]",
                "Iterable[T]",
                "Iterator[int]",
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedDict.itervalues": {
            "name": "itervalues",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedDict.iteritems": {
            "name": "iteritems",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedDict.update": {
            "name": "update",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "OrderedDict.pop": {
            "name": "pop",
            "location": 181,
            "return": [
                "bool",
                "Dict[str, Set[str]]",
                "int",
                "Dict[str, Tuple[int, int]]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "List[str]"
                ],
                "default": [
                    "str",
                    "bytes",
                    "int",
                    "List[Tuple[int, int]]",
                    "Optional[str]"
                ]
            }
        },
        "OrderedDict.setdefault": {
            "name": "setdefault",
            "location": 196,
            "return": [
                "bool",
                "str",
                "Tuple[str, int, int]",
                "Dict[str, object]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "T",
                    "bytes"
                ],
                "default": [
                    "str",
                    "int",
                    "Set[str]"
                ]
            }
        },
        "OrderedDict.__repr__": {
            "name": "__repr__",
            "location": 204,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "_repr_running": [
                    "bool",
                    "Optional[Any]",
                    "str",
                    "Tuple[int, int]",
                    "\"Codebook\"",
                    "dict"
                ]
            }
        },
        "OrderedDict.__reduce__": {
            "name": "__reduce__",
            "location": 220,
            "return": [
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedDict.copy": {
            "name": "copy",
            "location": 231,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedDict.fromkeys": {
            "name": "fromkeys",
            "location": 236,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "bool"
                ],
                "iterable": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "list",
                    "Pattern[str]",
                    "List[Union[Any, Any]]"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "OrderedDict.__eq__": {
            "name": "__eq__",
            "location": 246,
            "return": [
                "bool",
                "Optional[int]",
                "Optional[bool]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Set[VT]",
                    "int"
                ]
            }
        },
        "OrderedDict.__ne__": {
            "name": "__ne__",
            "location": 256,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "OrderedDict.viewkeys": {
            "name": "viewkeys",
            "location": 260,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedDict.viewvalues": {
            "name": "viewvalues",
            "location": 264,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrderedDict.viewitems": {
            "name": "viewitems",
            "location": 268,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "requests3-master/requests3/core/_http/packages/six.py": {
        "_add_doc": {
            "name": "_add_doc",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[[T], bool]",
                    "float"
                ],
                "doc": [
                    "Callable",
                    "Callable[[T], bool]",
                    "float"
                ]
            }
        },
        "_import_module": {
            "name": "_import_module",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "Type[T]",
                    "Sequence[utils.types.A]"
                ]
            }
        },
        "add_move": {
            "name": "add_move",
            "location": 484,
            "return": [
                ""
            ],
            "arguments": {
                "move": [
                    "str",
                    "dss.util.types.JSON",
                    "Callable",
                    "Set[str]"
                ]
            }
        },
        "remove_move": {
            "name": "remove_move",
            "location": 489,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "assertCountEqual": {
            "name": "assertCountEqual",
            "location": 663,
            "return": [
                "Callable",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "assertRaisesRegex": {
            "name": "assertRaisesRegex",
            "location": 667,
            "return": [
                "Callable",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "assertRegex": {
            "name": "assertRegex",
            "location": 671,
            "return": [
                "float",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "with_metaclass": {
            "name": "with_metaclass",
            "location": 822,
            "return": [
                "tuple"
            ],
            "arguments": {
                "meta": [
                    "bool",
                    "str",
                    "int",
                    "Iterable[int]"
                ]
            }
        },
        "add_metaclass": {
            "name": "add_metaclass",
            "location": 835,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "metaclass": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "python_2_unicode_compatible": {
            "name": "python_2_unicode_compatible",
            "location": 853,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "klass": [
                    "str",
                    "dict"
                ]
            }
        },
        "_LazyDescr.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "_LazyDescr.__get__": {
            "name": "__get__",
            "location": 84,
            "return": [
                "str",
                "bool",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "dict",
                    "Dict[str, List[str]]",
                    "Dict[str, Any]"
                ],
                "tp": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "MovedModule.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[Dict]",
                    "Dict[str, Any]",
                    "bool",
                    "float"
                ],
                "old": [
                    "Optional[List[str]]",
                    "bool",
                    "int"
                ],
                "new": [
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[\"ValidatorTypes\"]",
                    "str",
                    "Optional[\"Node\"]",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "MovedModule._resolve": {
            "name": "_resolve",
            "location": 106,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MovedModule.__getattr__": {
            "name": "__getattr__",
            "location": 109,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "dict",
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "Type[T]",
                    "type"
                ]
            }
        },
        "_LazyModule.__init__": {
            "name": "__init__",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "_LazyModule.__dir__": {
            "name": "__dir__",
            "location": 121,
            "return": [
                "str",
                "complex",
                "int",
                "Set[str]",
                "hashdecoder.lib.types.hint_type"
            ],
            "arguments": {
                "self": []
            }
        },
        "MovedAttribute.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "old_mod": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[int]",
                    "Iterable[str]"
                ],
                "new_mod": [
                    "Optional[str]",
                    "Union[int, str]",
                    "Optional[Sequence[str]]",
                    "Optional[int]",
                    "str"
                ],
                "old_attr": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "bool"
                ],
                "new_attr": [
                    "Optional[str]",
                    "Optional[Match]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Dict]",
                    "bool",
                    "Optional[Dict[str, str]]",
                    "Optional[List[dict]]",
                    "Optional[dict]"
                ]
            }
        },
        "MovedAttribute._resolve": {
            "name": "_resolve",
            "location": 149,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SixMetaPathImporter.__init__": {
            "name": "__init__",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "six_module_name": [
                    "str",
                    "Container[str]",
                    "types.ModuleType",
                    "bool"
                ]
            }
        },
        "_SixMetaPathImporter._add_module": {
            "name": "_add_module",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mod": [
                    "bytes",
                    "dict"
                ]
            }
        },
        "_SixMetaPathImporter._get_module": {
            "name": "_get_module",
            "location": 170,
            "return": [
                "Optional[str]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "dict",
                    "bytes"
                ]
            }
        },
        "_SixMetaPathImporter.find_module": {
            "name": "find_module",
            "location": 173,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "int",
                    "bool",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "str"
                ],
                "path": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "List[str]",
                    "Optional[str]",
                    "types.ModuleType"
                ]
            }
        },
        "_SixMetaPathImporter.__get_module": {
            "name": "__get_module",
            "location": 179,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str"
                ]
            }
        },
        "_SixMetaPathImporter.load_module": {
            "name": "load_module",
            "location": 186,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str",
                    "bool"
                ]
            }
        },
        "_SixMetaPathImporter.is_package": {
            "name": "is_package",
            "location": 201,
            "return": [
                "str",
                "gobbli.io.EmbedInput",
                "bool",
                "dict",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "int",
                    "List[Callable]"
                ]
            }
        },
        "_SixMetaPathImporter.get_code": {
            "name": "get_code",
            "location": 210,
            "return": [
                "Optional[int]",
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "Union[str, IO]",
                    "str",
                    "IO[str]",
                    "List[str]"
                ]
            }
        },
        "Module_six_moves_urllib.__dir__": {
            "name": "__dir__",
            "location": 475,
            "return": [
                "bytes",
                "Sequence",
                "List[str]",
                "str",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "get_unbound_function": {
            "name": "get_unbound_function",
            "location": 544,
            "return": [
                "str"
            ],
            "arguments": {
                "unbound": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "create_unbound_method": {
            "name": "create_unbound_method",
            "location": 550,
            "return": [
                "mypy.types.Type",
                "Optional[Callable[[], mypy.types.Instance]]"
            ],
            "arguments": {
                "func": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "cls": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "create_bound_method": {
            "name": "create_bound_method",
            "location": 547,
            "return": [
                "mypy.types.Type",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "func": [
                    "dict",
                    "bytearray",
                    "Type"
                ],
                "obj": [
                    "dict",
                    "bytearray",
                    "Type"
                ]
            }
        },
        "iterkeys": {
            "name": "iterkeys",
            "location": 586,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "d": [
                    "str"
                ]
            }
        },
        "itervalues": {
            "name": "itervalues",
            "location": 589,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "d": [
                    "str"
                ]
            }
        },
        "iteritems": {
            "name": "iteritems",
            "location": 592,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "d": [
                    "str"
                ]
            }
        },
        "iterlists": {
            "name": "iterlists",
            "location": 595,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "d": [
                    "str"
                ]
            }
        },
        "b": {
            "name": "b",
            "location": 636,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bool"
                ]
            }
        },
        "u": {
            "name": "u",
            "location": 640,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int"
                ]
            }
        },
        "byte2int": {
            "name": "byte2int",
            "location": 646,
            "return": [
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "bs": [
                    "Optional[str]",
                    "float",
                    "str",
                    "bytes"
                ]
            }
        },
        "indexbytes": {
            "name": "indexbytes",
            "location": 649,
            "return": [
                "List[str]",
                "str",
                "Iterable[T]",
                "float",
                "int",
                "List[\"DictDataLoader\"]",
                "type"
            ],
            "arguments": {
                "buf": [
                    "bytes",
                    "int",
                    "List[str]",
                    "Mapping[str, Any]",
                    "Iterable[int]"
                ],
                "i": [
                    "bytes",
                    "int",
                    "List[str]",
                    "Mapping[str, Any]",
                    "Iterable[int]"
                ]
            }
        },
        "reraise": {
            "name": "reraise",
            "location": 678,
            "return": [
                ""
            ],
            "arguments": {
                "tp": [
                    "str",
                    "int",
                    "T",
                    "bytes"
                ],
                "value": [
                    "Optional[str]",
                    "float",
                    "bool",
                    "Iterable",
                    "str",
                    "T"
                ],
                "tb": [
                    "int",
                    "bool"
                ]
            }
        },
        "exec_": {
            "name": "exec_",
            "location": 689,
            "return": [
                ""
            ],
            "arguments": {
                "_code_": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "_globs_": [
                    "str",
                    "Optional[str]"
                ],
                "_locs_": [
                    "str",
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[float]"
                ]
            }
        },
        "print_": {
            "name": "print_",
            "location": 794,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "wraps": {
            "name": "wraps",
            "location": 805,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "wrapped": [
                    "bool",
                    "List[int]",
                    "Optional[List]"
                ],
                "assigned": [
                    "bool",
                    "List[int]",
                    "Optional[List]"
                ],
                "updated": [
                    "bool",
                    "List[int]",
                    "Optional[List]"
                ]
            }
        },
        "add_metaclass.wrapper": {
            "name": "wrapper",
            "location": 838,
            "return": [
                "str",
                "authorityspoke.io.schemas.RawFactor",
                "Type",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "T",
                    "Type[T]",
                    "Type",
                    "Exception",
                    "type"
                ]
            }
        },
        "advance_iterator": {
            "name": "advance_iterator",
            "location": 518,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "it": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "callable": {
            "name": "callable",
            "location": 527,
            "return": [
                "Optional[Collection[int]]",
                "bool",
                "str",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "obj": [
                    "mypy.types.Instance",
                    "int",
                    "str"
                ]
            }
        },
        "Iterator.next": {
            "name": "next",
            "location": 554,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "raise_from": {
            "name": "raise_from",
            "location": 722,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "Optional[str]",
                    "Dict[str, int]",
                    "Dict[str, object]"
                ],
                "from_value": [
                    "Optional[str]",
                    "Dict[str, int]",
                    "Dict[str, object]"
                ]
            }
        },
        "print_.write": {
            "name": "write",
            "location": 735,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "Union[str, bytes]"
                ]
            }
        },
        "wraps.wrapper": {
            "name": "wrapper",
            "location": 810,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "with_metaclass.metaclass.__new__": {
            "name": "__new__",
            "location": 829,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "int",
                    "str",
                    "Sequence[str]",
                    "Optional[Any]"
                ],
                "name": [
                    "str",
                    "List[str]",
                    "dict",
                    "int"
                ],
                "this_bases": [
                    "bool",
                    "int",
                    "str",
                    "Sequence[str]",
                    "Optional[Any]"
                ],
                "d": [
                    "str",
                    "List[str]",
                    "dict",
                    "int"
                ]
            }
        },
        "X.__len__": {
            "name": "__len__",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "requests3-master/requests3/core/_http/packages/__init__.py": {},
    "requests3-master/requests3/core/_http/packages/backports/makefile.py": {
        "backport_makefile": {
            "name": "backport_makefile",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [
                    "bool",
                    "Callable",
                    "Optional[Union[int, str]]",
                    "Tuple[str, str]"
                ],
                "mode": [
                    "str",
                    "int"
                ],
                "buffering": [
                    "int",
                    "bool",
                    "TextIO",
                    "bytes",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "encoding": [
                    "str",
                    "io.StringIO"
                ],
                "errors": [
                    "str",
                    "io.StringIO"
                ],
                "newline": [
                    "str",
                    "io.StringIO"
                ]
            }
        }
    },
    "requests3-master/requests3/core/_http/packages/backports/__init__.py": {},
    "requests3-master/requests3/core/_http/packages/ssl_match_hostname/_implementation.py": {
        "_dnsname_match": {
            "name": "_dnsname_match",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "dn": [
                    "str"
                ],
                "hostname": [
                    "str"
                ],
                "max_wildcards": [
                    "int",
                    "float"
                ]
            }
        },
        "_to_unicode": {
            "name": "_to_unicode",
            "location": 74,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "obj": [
                    "Dict[str, bool]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "_ipaddress_match": {
            "name": "_ipaddress_match",
            "location": 80,
            "return": [
                "Callable[[T], bool]",
                "Iterable[T]"
            ],
            "arguments": {
                "ipname": [
                    "str",
                    "bytes"
                ],
                "host_ip": [
                    "Callable[[T], bool]",
                    "Iterable[T]"
                ]
            }
        },
        "match_hostname": {
            "name": "match_hostname",
            "location": 92,
            "return": [],
            "arguments": {
                "cert": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ],
                "hostname": [
                    "str",
                    "Sequence[str]",
                    "int",
                    "Optional[float]"
                ]
            }
        }
    },
    "requests3-master/requests3/core/_http/packages/ssl_match_hostname/__init__.py": {},
    "requests3-master/requests3/core/_http/util/connection.py": {
        "is_connection_dropped": {
            "name": "is_connection_dropped",
            "location": 5,
            "return": [
                "bool"
            ],
            "arguments": {
                "conn": [
                    "str",
                    "int"
                ]
            }
        },
        "create_connection": {
            "name": "create_connection",
            "location": 17,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "address": [
                    "int",
                    "Tuple[int, int]",
                    "str"
                ],
                "timeout": [
                    "str",
                    "List[\"ItemShippingTarget\"]",
                    "Optional[str]",
                    "int"
                ],
                "source_address": [
                    "str",
                    "Iterable"
                ],
                "socket_options": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "_set_socket_options": {
            "name": "_set_socket_options",
            "location": 67,
            "return": [
                "bytes"
            ],
            "arguments": {
                "sock": [
                    "bool",
                    "str",
                    "tuple",
                    "Optional[str]"
                ],
                "options": [
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "allowed_gai_family": {
            "name": "allowed_gai_family",
            "location": 75,
            "return": [
                "int",
                "str",
                "Iterable[Iterable]",
                "Iterable",
                "float"
            ],
            "arguments": {}
        },
        "_has_ipv6": {
            "name": "_has_ipv6",
            "location": 85,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "host": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "requests3-master/requests3/core/_http/util/request.py": {
        "make_headers": {
            "name": "make_headers",
            "location": 11,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Union[str, int]]",
                "dict",
                "Dict[str, Dict[str, str]]",
                "List[dict]",
                "Dict[str, Type]",
                "str"
            ],
            "arguments": {
                "keep_alive": [
                    "bool",
                    "Type[T]",
                    "str",
                    "Optional[int]"
                ],
                "accept_encoding": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "user_agent": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Dict[str, List[str]]",
                    "int"
                ],
                "basic_auth": [
                    "str",
                    "Optional[Callable[..., Any]]",
                    "List[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "proxy_basic_auth": [
                    "str",
                    "Optional[Callable[..., Any]]"
                ],
                "disable_cache": [
                    "bool",
                    "Type[T]",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "set_file_position": {
            "name": "set_file_position",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "body": [
                    "str",
                    "dict",
                    "Type['Declared']"
                ],
                "pos": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "rewind_body": {
            "name": "rewind_body",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "body": [
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, Any]]",
                    "dict",
                    "Literal",
                    "str"
                ],
                "body_pos": [
                    "int",
                    "Optional[bool]",
                    "dict",
                    "Optional[Union[int, str]]",
                    "str"
                ]
            }
        }
    },
    "requests3-master/requests3/core/_http/util/response.py": {
        "is_fp_closed": {
            "name": "is_fp_closed",
            "location": 4,
            "return": [
                "Dict[str, int]",
                "int"
            ],
            "arguments": {
                "obj": [
                    "T",
                    "Type",
                    "set"
                ]
            }
        }
    },
    "requests3-master/requests3/core/_http/util/retry.py": {
        "Retry.__init__": {
            "name": "__init__",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "total": [
                    "bool",
                    "Tuple[Any, int, Dict[str, str]]",
                    "Optional[str]"
                ],
                "connect": [
                    "bool",
                    "Optional[Mapping]",
                    "Mapping[str, Any]",
                    "int",
                    "Callable",
                    "Optional[int]",
                    "Type[T]"
                ],
                "read": [
                    "str",
                    "int",
                    "Dict[str, Dict[str, str]]",
                    "list",
                    "Optional[Exception]",
                    "Optional[bytes]"
                ],
                "redirect": [
                    "bool"
                ],
                "status": [
                    "bool",
                    "Optional[Mapping]",
                    "Mapping[str, Any]",
                    "int",
                    "Callable",
                    "Optional[int]",
                    "Type[T]"
                ],
                "method_whitelist": [
                    "bool",
                    "Optional[Mapping]",
                    "Mapping[str, Any]",
                    "int",
                    "Callable",
                    "Optional[int]",
                    "Type[T]"
                ],
                "status_forcelist": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "backoff_factor": [
                    "bool",
                    "Optional[Mapping]",
                    "Mapping[str, Any]",
                    "int",
                    "Callable",
                    "Optional[int]",
                    "Type[T]"
                ],
                "raise_on_redirect": [
                    "bool"
                ],
                "raise_on_status": [
                    "int",
                    "Dict[str, Any]",
                    "dict"
                ],
                "history": [
                    "bool",
                    "Optional[Mapping]",
                    "Mapping[str, Any]",
                    "int",
                    "Callable",
                    "Optional[int]",
                    "Type[T]"
                ],
                "respect_retry_after_header": [
                    "bool",
                    "Optional[Mapping]",
                    "Mapping[str, Any]",
                    "int",
                    "Callable",
                    "Optional[int]",
                    "Type[T]"
                ]
            }
        },
        "Retry.new": {
            "name": "new",
            "location": 181,
            "return": [
                "str",
                "Tuple[str, str]",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Retry.from_int": {
            "name": "from_int",
            "location": 199,
            "return": [
                "Dict[str, Any]",
                "str",
                "float"
            ],
            "arguments": {
                "cls": [
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "bool",
                    "Optional[dict]"
                ],
                "retries": [
                    "Tuple[List[str], Optional[Any], Optional[Any]]",
                    "Optional[int]"
                ],
                "redirect": [
                    "Optional[str]",
                    "bytes",
                    "Optional[Callable]",
                    "Tuple[List[str], Optional[str]]",
                    "Tuple[List[str], Optional[Any], Optional[Any]]"
                ],
                "default": [
                    "Optional[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "Retry.get_backoff_time": {
            "name": "get_backoff_time",
            "location": 211,
            "return": [
                "int",
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "dict",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Retry.parse_retry_after": {
            "name": "parse_retry_after",
            "location": 228,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "retry_after": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Retry.get_retry_after": {
            "name": "get_retry_after",
            "location": 243,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "Retry.sleep_for_retry": {
            "name": "sleep_for_retry",
            "location": 251,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "bool",
                    "str"
                ]
            }
        },
        "Retry._sleep_backoff": {
            "name": "_sleep_backoff",
            "location": 259,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Retry.sleep": {
            "name": "sleep",
            "location": 266,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "List[dict]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "Retry._is_connection_error": {
            "name": "_is_connection_error",
            "location": 281,
            "return": [
                "int",
                "Generator",
                "Dict[str, int]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "err": [
                    "List['cirq.Qid']",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "Retry._is_read_error": {
            "name": "_is_read_error",
            "location": 287,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "err": [
                    "str",
                    "AnyStr"
                ]
            }
        },
        "Retry._is_method_retryable": {
            "name": "_is_method_retryable",
            "location": 293,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Retry.is_retry": {
            "name": "is_retry",
            "location": 302,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "List[int]",
                    "int",
                    "Tuple[str]",
                    "Optional[\"Node\"]"
                ],
                "status_code": [
                    "int"
                ],
                "has_retry_after": [
                    "int",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "Retry.is_exhausted": {
            "name": "is_exhausted",
            "location": 322,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Retry.increment": {
            "name": "increment",
            "location": 331,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "int",
                    "Dict[str, Any]"
                ],
                "url": [
                    "Optional[Dict]",
                    "str",
                    "bytes"
                ],
                "response": [],
                "error": [
                    "Optional[logging.Logger]",
                    "Exception",
                    "werkzeug.exceptions.InternalServerError",
                    "Optional[Type[BaseException]]"
                ],
                "_pool": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[Dict]",
                    "int"
                ],
                "_stacktrace": [
                    "Dict[str, Any]",
                    "logging.Logger",
                    "werkzeug.exceptions.BadRequest",
                    "Callable",
                    "str",
                    "dict"
                ]
            }
        },
        "Retry.__repr__": {
            "name": "__repr__",
            "location": 411,
            "return": [
                "str",
                "Tuple[str]",
                "Sequence[str]",
                "Union[str, None]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "requests3-master/requests3/core/_http/util/selectors.py": {
        "_fileobj_to_fd": {
            "name": "_fileobj_to_fd",
            "location": 43,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "fileobj": [
                    "int"
                ]
            }
        },
        "_can_allocate": {
            "name": "_can_allocate",
            "location": 547,
            "return": [
                "bool"
            ],
            "arguments": {
                "struct": [
                    "int",
                    "bool",
                    "bytes",
                    "AsyncGenerator",
                    "Coroutine"
                ]
            }
        },
        "DefaultSelector": {
            "name": "DefaultSelector",
            "location": 569,
            "return": [
                "list",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "SelectorError.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "errcode": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "SelectorError.__repr__": {
            "name": "__repr__",
            "location": 36,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectorError.__str__": {
            "name": "__str__",
            "location": 39,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "_syscall_wrapper": {
            "name": "_syscall_wrapper",
            "location": 80,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "func": [],
                "recalc_timeout": [
                    "int",
                    "float"
                ]
            }
        },
        "_SelectorMapping.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "selector": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "_SelectorMapping.__len__": {
            "name": "__len__",
            "location": 146,
            "return": [
                "str",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SelectorMapping.__getitem__": {
            "name": "__getitem__",
            "location": 149,
            "return": [
                "bytes",
                "int",
                "MutableMapping[str, Any]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "fileobj": [
                    "str",
                    "Tuple[str, float]",
                    "list"
                ]
            }
        },
        "_SelectorMapping.__iter__": {
            "name": "__iter__",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseSelector.__init__": {
            "name": "__init__",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSelector._fileobj_lookup": {
            "name": "_fileobj_lookup",
            "location": 183,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": [],
                "fileobj": [
                    "Mapping",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "BaseSelector.register": {
            "name": "register",
            "location": 203,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "fileobj": [
                    "str",
                    "Sequence",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "int",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "dict"
                ],
                "events": [
                    "int",
                    "Dict[str, Any]",
                    "Union[Iterable, str]",
                    "str"
                ],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "BaseSelector.unregister": {
            "name": "unregister",
            "location": 217,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "fileobj": [
                    "str",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        },
        "BaseSelector.modify": {
            "name": "modify",
            "location": 240,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "fileobj": [
                    "dict",
                    "bool"
                ],
                "events": [
                    "Optional[\"TrackingData\"]",
                    "Dict[str, Any]",
                    "Type[Any]",
                    "dict",
                    "bytes"
                ],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[int, Dict]"
                ]
            }
        },
        "BaseSelector.select": {
            "name": "select",
            "location": 257,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "float",
                    "Optional[float]",
                    "int",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "BaseSelector.close": {
            "name": "close",
            "location": 262,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSelector.get_key": {
            "name": "get_key",
            "location": 268,
            "return": [
                "Dict[str, Any]",
                "str",
                "int",
                "bool",
                "IO"
            ],
            "arguments": {
                "self": [],
                "fileobj": [
                    "str"
                ]
            }
        },
        "BaseSelector.get_map": {
            "name": "get_map",
            "location": 280,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSelector._key_from_fd": {
            "name": "_key_from_fd",
            "location": 284,
            "return": [
                "bool",
                "dict",
                "Dict[str, Dict[str, Any]]",
                "Sequence[str]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "fd": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "BaseSelector.__enter__": {
            "name": "__enter__",
            "location": 293,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSelector.__exit__": {
            "name": "__exit__",
            "location": 296,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectSelector.__init__": {
            "name": "__init__",
            "location": 306,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SelectSelector.register": {
            "name": "register",
            "location": 311,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "fileobj": [
                    "dict",
                    "Dict[str, bool]",
                    "Optional[Dict[str, int]]"
                ],
                "events": [
                    "Dict[str, Any]",
                    "eth.abc.TransactionContextAPI",
                    "dict",
                    "bool",
                    "Dict[str, List[Callable]]"
                ],
                "data": [
                    "dict",
                    "Dict[str, bool]",
                    "Optional[Dict[str, int]]"
                ]
            }
        },
        "SelectSelector.unregister": {
            "name": "unregister",
            "location": 319,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "fileobj": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "SelectSelector._select": {
            "name": "_select",
            "location": 325,
            "return": [
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "float",
                    "bool",
                    "int",
                    "Tuple[int]",
                    "Dict[str, bool]",
                    "Tuple[int, int]"
                ],
                "w": [
                    "float",
                    "bool",
                    "int",
                    "Tuple[int]",
                    "Dict[str, bool]",
                    "Tuple[int, int]"
                ],
                "timeout": [
                    "float",
                    "bool",
                    "int",
                    "Tuple[int]",
                    "Dict[str, bool]",
                    "Tuple[int, int]"
                ]
            }
        },
        "SelectSelector.select": {
            "name": "select",
            "location": 329,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "PollSelector.__init__": {
            "name": "__init__",
            "location": 358,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PollSelector.register": {
            "name": "register",
            "location": 362,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "fileobj": [
                    "dict",
                    "Dict[str, bool]",
                    "Optional[Dict[str, int]]"
                ],
                "events": [
                    "Dict[str, Any]",
                    "eth.abc.TransactionContextAPI",
                    "dict",
                    "bool",
                    "Dict[str, List[Callable]]"
                ],
                "data": [
                    "dict",
                    "Dict[str, bool]",
                    "Optional[Dict[str, int]]"
                ]
            }
        },
        "PollSelector.unregister": {
            "name": "unregister",
            "location": 372,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "fileobj": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "PollSelector._wrap_poll": {
            "name": "_wrap_poll",
            "location": 377,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "Optional[bool]",
                    "Optional[dict]",
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[float]"
                ]
            }
        },
        "PollSelector.select": {
            "name": "select",
            "location": 390,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "bool",
                    "Tuple[str, str]",
                    "Optional[float]",
                    "int"
                ]
            }
        },
        "EpollSelector.__init__": {
            "name": "__init__",
            "location": 410,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EpollSelector.fileno": {
            "name": "fileno",
            "location": 414,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EpollSelector.register": {
            "name": "register",
            "location": 417,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "fileobj": [
                    "dict",
                    "Dict[str, bool]",
                    "Optional[Dict[str, int]]"
                ],
                "events": [
                    "Dict[str, Any]",
                    "eth.abc.TransactionContextAPI",
                    "dict",
                    "bool",
                    "Dict[str, List[Callable]]"
                ],
                "data": [
                    "dict",
                    "Dict[str, bool]",
                    "Optional[Dict[str, int]]"
                ]
            }
        },
        "EpollSelector.unregister": {
            "name": "unregister",
            "location": 427,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "fileobj": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "EpollSelector.select": {
            "name": "select",
            "location": 436,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "Optional[float]",
                    "int",
                    "float",
                    "Union[int, float]"
                ]
            }
        },
        "EpollSelector.close": {
            "name": "close",
            "location": 466,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "KqueueSelector.__init__": {
            "name": "__init__",
            "location": 476,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "KqueueSelector.fileno": {
            "name": "fileno",
            "location": 480,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KqueueSelector.register": {
            "name": "register",
            "location": 483,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "fileobj": [
                    "dict",
                    "Dict[str, bool]",
                    "Optional[Dict[str, int]]"
                ],
                "events": [
                    "Dict[str, Any]",
                    "eth.abc.TransactionContextAPI",
                    "dict",
                    "bool",
                    "Dict[str, List[Callable]]"
                ],
                "data": [
                    "dict",
                    "Dict[str, bool]",
                    "Optional[Dict[str, int]]"
                ]
            }
        },
        "KqueueSelector.unregister": {
            "name": "unregister",
            "location": 493,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "fileobj": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "KqueueSelector.select": {
            "name": "select",
            "location": 513,
            "return": [
                "str",
                "List[Dict]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "Optional[float]",
                    "int",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "KqueueSelector.close": {
            "name": "close",
            "location": 538,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "requests3-master/requests3/core/_http/util/ssl_.py": {
        "_const_compare_digest_backport": {
            "name": "_const_compare_digest_backport",
            "location": 25,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "a": [
                    "str",
                    "int",
                    "list",
                    "Sequence[int]"
                ],
                "b": [
                    "str",
                    "int",
                    "list",
                    "Sequence[int]"
                ]
            }
        },
        "assert_fingerprint": {
            "name": "assert_fingerprint",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "cert": [
                    "int",
                    "Callable",
                    "str"
                ],
                "fingerprint": [
                    "str",
                    "int"
                ]
            }
        },
        "resolve_cert_reqs": {
            "name": "resolve_cert_reqs",
            "location": 167,
            "return": [
                "Optional[str]",
                "type",
                "logging.LogRecord"
            ],
            "arguments": {
                "candidate": [
                    "Optional[str]",
                    "Optional[Dict]",
                    "Optional[int]",
                    "Optional[Type[Any]]"
                ]
            }
        },
        "resolve_ssl_version": {
            "name": "resolve_ssl_version",
            "location": 190,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "candidate": [
                    "Optional[str]",
                    "Optional[dict]",
                    "Optional[T]",
                    "Optional[Dict[str, Any]]",
                    "list"
                ]
            }
        },
        "create_urllib3_context": {
            "name": "create_urllib3_context",
            "location": 206,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "ssl_version": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "cert_reqs": [
                    "str",
                    "int",
                    "Union[str, List[str]]",
                    "Optional[Mapping[str, Any]]"
                ],
                "options": [
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[int]"
                ],
                "ciphers": [
                    "str",
                    "int",
                    "Union[Literal, str]",
                    "Union[int, float, str]",
                    "Optional[Tuple[float, float, float]]"
                ]
            }
        },
        "merge_context_settings": {
            "name": "merge_context_settings",
            "location": 266,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "context": [
                    "bool",
                    "int",
                    "Sequence[str]",
                    "float"
                ],
                "keyfile": [
                    "List[str]",
                    "str",
                    "Dict[str, List[str]]"
                ],
                "certfile": [
                    "List[str]",
                    "str",
                    "Dict[str, List[str]]"
                ],
                "cert_reqs": [
                    "bool",
                    "str",
                    "List[Optional[float]]"
                ],
                "ca_certs": [
                    "str",
                    "int"
                ],
                "ca_cert_dir": [
                    "str",
                    "int"
                ]
            }
        },
        "ssl_wrap_socket": {
            "name": "ssl_wrap_socket",
            "location": 301,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sock": [
                    "int",
                    "str"
                ],
                "keyfile": [
                    "int",
                    "Callable",
                    "str"
                ],
                "certfile": [
                    "int",
                    "Callable",
                    "str"
                ],
                "cert_reqs": [
                    "AbstractSet[str]"
                ],
                "ca_certs": [
                    "str",
                    "dict",
                    "IO"
                ],
                "server_hostname": [
                    "bool",
                    "int",
                    "bytes",
                    "List[str]",
                    "AbstractSet[str]"
                ],
                "ssl_version": [
                    "AbstractSet[str]"
                ],
                "ciphers": [
                    "AbstractSet[str]"
                ],
                "ssl_context": [
                    "str",
                    "Optional[str]"
                ],
                "ca_cert_dir": [
                    "str",
                    "dict",
                    "IO"
                ]
            }
        },
        "match_hostname": {
            "name": "match_hostname",
            "location": 370,
            "return": [
                ""
            ],
            "arguments": {
                "cert": [
                    "bytes",
                    "str"
                ],
                "asserted_hostname": [
                    "bytes",
                    "str"
                ]
            }
        },
        "SSLContext.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "protocol_version": [
                    "bool",
                    "tuple",
                    "int",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "SSLContext.load_cert_chain": {
            "name": "load_cert_chain",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "certfile": [
                    "str",
                    "bool"
                ],
                "keyfile": [
                    "str",
                    "bool"
                ]
            }
        },
        "SSLContext.load_verify_locations": {
            "name": "load_verify_locations",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cafile": [
                    "str",
                    "int",
                    "Tuple[int, int]",
                    "Tuple[bytes]",
                    "Dict[str, Any]"
                ],
                "capath": [
                    "Optional[str]",
                    "str",
                    "list"
                ]
            }
        },
        "SSLContext.set_ciphers": {
            "name": "set_ciphers",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cipher_suite": [
                    "bool",
                    "float"
                ]
            }
        },
        "SSLContext.wrap_socket": {
            "name": "wrap_socket",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "socket": [
                    "str",
                    "int",
                    "BinaryIO",
                    "bool"
                ],
                "server_hostname": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "server_side": [
                    "str",
                    "list"
                ]
            }
        }
    },
    "requests3-master/requests3/core/_http/util/timeout.py": {
        "Timeout.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "total": [
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "connect": [
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "read": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "Timeout.__str__": {
            "name": "__str__",
            "location": 98,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timeout._validate_timeout": {
            "name": "_validate_timeout",
            "location": 107,
            "return": [
                "str",
                "Union[int, float]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable[[dict], None]",
                    "List[str]",
                    "Optional[Any]"
                ],
                "value": [
                    "str",
                    "bool"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Timeout.from_float": {
            "name": "from_float",
            "location": 154,
            "return": [],
            "arguments": {
                "cls": [
                    "str",
                    "Callable[..., None]",
                    "Sequence[Any]",
                    "bool",
                    "Callable",
                    "List[Dict]"
                ],
                "timeout": [
                    "bytes",
                    "memoryview",
                    "str",
                    "AnyStr",
                    "IO[bytes]"
                ]
            }
        },
        "Timeout.clone": {
            "name": "clone",
            "location": 169,
            "return": [
                "str",
                "int",
                "List[dict]",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timeout.start_connect": {
            "name": "start_connect",
            "location": 183,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timeout.get_connect_duration": {
            "name": "get_connect_duration",
            "location": 195,
            "return": [
                "int",
                "Type[T]",
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timeout.connect_timeout": {
            "name": "connect_timeout",
            "location": 211,
            "return": [
                "int",
                "List[int]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timeout.read_timeout": {
            "name": "read_timeout",
            "location": 229,
            "return": [
                "Optional[int]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "requests3-master/requests3/core/_http/util/url.py": {
        "split_first": {
            "name": "split_first",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "int",
                    "AbstractSet[Any]",
                    "AbstractSet[T]"
                ],
                "delims": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "parse_url": {
            "name": "parse_url",
            "location": 136,
            "return": [
                "str",
                "MutableMapping[str, Any]",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "url": [
                    "str",
                    "list"
                ]
            }
        },
        "get_host": {
            "name": "get_host",
            "location": 217,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, List[str]]",
                    "Dict[str, str]"
                ]
            }
        },
        "Url.__new__": {
            "name": "__new__",
            "location": 21,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "scheme": [
                    "str",
                    "Union[str, BinaryIO]",
                    "list",
                    "dict"
                ],
                "auth": [
                    "str"
                ],
                "host": [
                    "str",
                    "TextIO"
                ],
                "port": [
                    "str"
                ],
                "path": [
                    "str",
                    "dict",
                    "Optional[str]"
                ],
                "query": [
                    "str"
                ],
                "fragment": [
                    "str"
                ]
            }
        },
        "Url.hostname": {
            "name": "hostname",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Url.request_uri": {
            "name": "request_uri",
            "location": 47,
            "return": [
                "Mapping[str, Any]",
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Url.netloc": {
            "name": "netloc",
            "location": 55,
            "return": [
                "str",
                "float",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Url.url": {
            "name": "url",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Url.__str__": {
            "name": "__str__",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "requests3-master/requests3/core/_http/util/wait.py": {
        "_wait_for_io_events": {
            "name": "_wait_for_io_events",
            "location": 4,
            "return": [
                "List[str]",
                "tuple",
                "int",
                "Dict[str, str]",
                "str",
                "Optional[List[str]]"
            ],
            "arguments": {
                "socks": [
                    "int",
                    "Iterable[Iterable[str]]",
                    "set"
                ],
                "events": [
                    "Callable",
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "bytes"
                ],
                "timeout": [
                    "str",
                    "Callable[[str], bool]",
                    "Dict[str, Dict[str, Any]]",
                    "dict",
                    "Dict[int, int]"
                ]
            }
        },
        "wait_for_read": {
            "name": "wait_for_read",
            "location": 24,
            "return": [
                "bool",
                "float",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "socks": [
                    "int",
                    "str"
                ],
                "timeout": [
                    "int",
                    "str"
                ]
            }
        },
        "wait_for_write": {
            "name": "wait_for_write",
            "location": 31,
            "return": [
                "bool",
                "float",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "socks": [
                    "int",
                    "str"
                ],
                "timeout": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "requests3-master/requests3/core/_http/util/__init__.py": {},
    "requests3-master/requests3/core/_http/_async/connection.py": {
        "_headers_to_native_string": {
            "name": "_headers_to_native_string",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "headers": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "list"
                ]
            }
        },
        "_stringify_headers": {
            "name": "_stringify_headers",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "headers": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "_read_readable": {
            "name": "_read_readable",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "readable": [
                    "str",
                    "List[Tuple[int, int]]",
                    "bool",
                    "deoplete.util.UserContext"
                ]
            }
        },
        "_make_body_iterable": {
            "name": "_make_body_iterable",
            "location": 97,
            "return": [
                "int",
                "List[Callable]",
                "List[str]"
            ],
            "arguments": {
                "body": [
                    "str",
                    "Optional[str]",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                    "datetime.date"
                ]
            }
        },
        "_request_bytes_iterable": {
            "name": "_request_bytes_iterable",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "aiohttp.web.Request",
                    "dict",
                    "int"
                ],
                "state_machine": [
                    "int",
                    "bytes",
                    "aiocometd.transports.base.Headers",
                    "str",
                    "dict"
                ]
            }
        },
        "_response_from_h11": {
            "name": "_response_from_h11",
            "location": 148,
            "return": [
                "Optional[str]",
                "Dict[str, Any]",
                "dict",
                "flask.Response"
            ],
            "arguments": {
                "h11_response": [
                    "Dict[str, Any]",
                    "Sequence",
                    "Type['Declared']",
                    "dict",
                    "List[Dict[str, Any]]"
                ],
                "body_object": [
                    "int",
                    "str",
                    "requests.Response",
                    "flask.Response",
                    "dict",
                    "MutableMapping",
                    "Tuple[int, int]"
                ]
            }
        },
        "_build_tunnel_request": {
            "name": "_build_tunnel_request",
            "location": 165,
            "return": [
                "int",
                "List[str]",
                "dict",
                "Dict[str, str]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "host": [
                    "str",
                    "int"
                ],
                "port": [
                    "str",
                    "int"
                ],
                "headers": [
                    "str",
                    "dict",
                    "Optional[dict]",
                    "Mapping[str, str]",
                    "Dict[str, str]"
                ]
            }
        },
        "_start_http_request.consume_bytes": {
            "name": "consume_bytes",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "Dict[str, Any]",
                    "bytes",
                    "dict",
                    "OrderedDict",
                    "str"
                ]
            }
        },
        "HTTP1Connection.__init__": {
            "name": "__init__",
            "location": 283,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "host": [
                    "Union[float, Tuple[float, float]]",
                    "Callable",
                    "List[str]",
                    "int"
                ],
                "port": [
                    "Union[float, Tuple[float, float]]",
                    "Callable",
                    "List[str]",
                    "int"
                ],
                "backend": [
                    "int",
                    "Dict[str, Tuple[str, int, int]]",
                    "str",
                    "Dict[str, Tuple[str, str, Any]]",
                    "Dict[int, str]",
                    "bool"
                ],
                "socket_options": [
                    "str",
                    "bool",
                    "Optional[Callable]",
                    "Optional[Dict[str, Any]]"
                ],
                "source_address": [
                    "bool",
                    "List[str]",
                    "str"
                ],
                "tunnel_host": [
                    "Union[float, Tuple[float, float]]",
                    "Callable",
                    "List[str]",
                    "int"
                ],
                "tunnel_port": [
                    "bool",
                    "float",
                    "list",
                    "Dict[str, Any]",
                    "static_frame.core.util.DtypesSpecifier"
                ],
                "tunnel_headers": [
                    "Union[float, Tuple[float, float]]",
                    "Callable",
                    "List[str]",
                    "int"
                ]
            }
        },
        "HTTP1Connection.close": {
            "name": "close",
            "location": 437,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTP1Connection.is_dropped": {
            "name": "is_dropped",
            "location": 446,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTP1Connection._reset": {
            "name": "_reset",
            "location": 464,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTP1Connection.complete": {
            "name": "complete",
            "location": 482,
            "return": [
                "int",
                "list",
                "List[Dict[str, Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTP1Connection.__aiter__": {
            "name": "__aiter__",
            "location": 491,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTP1Connection.next": {
            "name": "next",
            "location": 494,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "requests3-master/requests3/core/_http/_async/connectionpool.py": {
        "_add_transport_headers": {
            "name": "_add_transport_headers",
            "location": 59,
            "return": [
                "str",
                "Sequence[Any]",
                "Union[tuple, list]"
            ],
            "arguments": {
                "headers": [
                    "str",
                    "bool",
                    "apistar.http.Request"
                ]
            }
        },
        "_build_context": {
            "name": "_build_context",
            "location": 77,
            "return": [
                "bool"
            ],
            "arguments": {
                "context": [
                    "Optional[float]",
                    "int",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "dict"
                ],
                "keyfile": [
                    "int",
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "certfile": [
                    "int",
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "cert_reqs": [
                    "bool",
                    "Optional[int]",
                    "str"
                ],
                "ca_certs": [
                    "int",
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "ca_cert_dir": [
                    "int",
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "ssl_version": [
                    "bool",
                    "Optional[int]",
                    "Iterable[int]"
                ]
            }
        },
        "connection_from_url": {
            "name": "connection_from_url",
            "location": 824,
            "return": [
                "str",
                "bool",
                "List[Dict]",
                "Mapping[str, Any]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "int"
                ]
            }
        },
        "_ipv6_host": {
            "name": "_ipv6_host",
            "location": 853,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "host": [
                    "str"
                ]
            }
        },
        "ConnectionPool.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "int"
                ],
                "port": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ConnectionPool.__str__": {
            "name": "__str__",
            "location": 117,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionPool.__enter__": {
            "name": "__enter__",
            "location": 120,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionPool.__exit__": {
            "name": "__exit__",
            "location": 123,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "ConnectionPool.close": {
            "name": "close",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPConnectionPool.__init__": {
            "name": "__init__",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "Optional[str]",
                    "float"
                ],
                "port": [
                    "str",
                    "Optional[str]",
                    "float"
                ],
                "timeout": [
                    "bool"
                ],
                "maxsize": [
                    "bool",
                    "Exception",
                    "Optional[dict]",
                    "str",
                    "Optional[Mapping]"
                ],
                "block": [
                    "bool",
                    "Exception",
                    "Optional[dict]",
                    "str",
                    "Optional[Mapping]"
                ],
                "headers": [
                    "bool",
                    "str",
                    "Optional[bool]"
                ],
                "retries": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "_proxy": [
                    "bool",
                    "Exception",
                    "Optional[dict]",
                    "str",
                    "Optional[Mapping]"
                ],
                "_proxy_headers": [
                    "bool",
                    "Exception",
                    "Optional[dict]",
                    "str",
                    "Optional[Mapping]"
                ]
            }
        },
        "HTTPConnectionPool._new_conn": {
            "name": "_new_conn",
            "location": 241,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPConnectionPool._get_timeout": {
            "name": "_get_timeout",
            "location": 327,
            "return": [
                "str",
                "dict",
                "List[str]",
                "Callable[..., T]",
                "Callable[[str], str]"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "str",
                    "bool",
                    "Callable",
                    "Tuple[int, int]",
                    "NamedTuple"
                ]
            }
        },
        "HTTPConnectionPool._raise_timeout": {
            "name": "_raise_timeout",
            "location": 340,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "err": [
                    "str",
                    "Iterable[str]",
                    "Optional[int]",
                    "Optional"
                ],
                "url": [
                    "str",
                    "float",
                    "bool"
                ],
                "timeout_value": [
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "HTTPConnectionPool._absolute_url": {
            "name": "_absolute_url",
            "location": 434,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "HTTPConnectionPool.close": {
            "name": "close",
            "location": 437,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPConnectionPool.is_same_host": {
            "name": "is_same_host",
            "location": 454,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "HTTPSConnectionPool.__init__": {
            "name": "__init__",
            "location": 712,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "host": [
                    "Union[int, str]",
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "Dict[str, str]",
                    "Union[str, List[str], Tuple[str, ...]]"
                ],
                "port": [
                    "Union[int, str]",
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "Dict[str, str]",
                    "Union[str, List[str], Tuple[str, ...]]"
                ],
                "timeout": [
                    "Union[int, str]",
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "Dict[str, str]",
                    "Union[str, List[str], Tuple[str, ...]]"
                ],
                "maxsize": [
                    "Union[int, str]",
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "Dict[str, str]",
                    "Union[str, List[str], Tuple[str, ...]]"
                ],
                "block": [
                    "Union[int, str]",
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "Dict[str, str]",
                    "Union[str, List[str], Tuple[str, ...]]"
                ],
                "headers": [
                    "Union[int, str]",
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "Dict[str, str]",
                    "Union[str, List[str], Tuple[str, ...]]"
                ],
                "retries": [
                    "Union[int, str]",
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "Dict[str, str]",
                    "Union[str, List[str], Tuple[str, ...]]"
                ],
                "_proxy": [
                    "Union[int, str]",
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "Dict[str, str]",
                    "Union[str, List[str], Tuple[str, ...]]"
                ],
                "_proxy_headers": [
                    "Union[int, str]",
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "Dict[str, str]",
                    "Union[str, List[str], Tuple[str, ...]]"
                ],
                "key_file": [
                    "Dict[str, str]",
                    "List[Optional[str]]",
                    "Optional[str]",
                    "bool",
                    "dict",
                    "str"
                ],
                "cert_file": [
                    "Dict[str, str]",
                    "List[Optional[str]]",
                    "Optional[str]",
                    "bool",
                    "dict",
                    "str"
                ],
                "cert_reqs": [
                    "str",
                    "Optional[Mapping[str, Any]]"
                ],
                "ca_certs": [
                    "str",
                    "Optional[Mapping[str, Any]]"
                ],
                "ssl_version": [
                    "Dict[str, str]",
                    "List[Optional[str]]",
                    "Optional[str]",
                    "bool",
                    "dict",
                    "str"
                ],
                "assert_hostname": [
                    "Optional[bool]",
                    "str",
                    "tuple"
                ],
                "assert_fingerprint": [
                    "Optional[bool]",
                    "str",
                    "tuple"
                ],
                "ca_cert_dir": [
                    "Dict[str, str]",
                    "List[Optional[str]]",
                    "Optional[str]",
                    "bool",
                    "dict",
                    "str"
                ],
                "ssl_context": [
                    "Dict[str, str]",
                    "List[Optional[str]]",
                    "Optional[str]",
                    "bool",
                    "dict",
                    "str"
                ]
            }
        },
        "HTTPSConnectionPool._new_conn": {
            "name": "_new_conn",
            "location": 764,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPConnectionPool.urlopen.drain_and_release_conn": {
            "name": "drain_and_release_conn",
            "location": 645,
            "return": [
                ""
            ],
            "arguments": {
                "response": [
                    "str",
                    "Tuple[str, int]"
                ]
            }
        }
    },
    "requests3-master/requests3/core/_http/_async/poolmanager.py": {
        "_default_key_normalizer": {
            "name": "_default_key_normalizer",
            "location": 59,
            "return": [
                "str",
                "List[str]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "key_class": [
                    "dict",
                    "T"
                ],
                "request_context": [
                    "bytes",
                    "str"
                ]
            }
        },
        "proxy_from_url": {
            "name": "proxy_from_url",
            "location": 425,
            "return": [
                "bool",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[List]"
                ]
            }
        },
        "PoolManager.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "num_pools": [
                    "str",
                    "dict",
                    "bool",
                    "List[Dict[str, Any]]",
                    "List[cmk.base.api.agent_based.type_defs.CheckPlugin]"
                ],
                "headers": [
                    "bool",
                    "Exception",
                    "Optional[Any]",
                    "bytes"
                ],
                "backend": [
                    "str",
                    "Tuple[int, int]",
                    "int",
                    "Dict[str, str]",
                    "bool",
                    "bytes"
                ]
            }
        },
        "PoolManager.__enter__": {
            "name": "__enter__",
            "location": 154,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PoolManager.__exit__": {
            "name": "__exit__",
            "location": 157,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "PoolManager._new_pool": {
            "name": "_new_pool",
            "location": 162,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "scheme": [
                    "str"
                ],
                "host": [
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "port": [
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "request_context": [
                    "bytes",
                    "bool"
                ]
            }
        },
        "PoolManager.clear": {
            "name": "clear",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PoolManager.connection_from_host": {
            "name": "connection_from_host",
            "location": 195,
            "return": [
                "dict",
                "Optional[str]",
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]",
                "bytes",
                "Tuple[Dict, int]"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "int",
                    "str",
                    "bytearray",
                    "bool"
                ],
                "port": [
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, Any]]",
                    "Tuple[int, int]",
                    "MutableMapping",
                    "Dict[str, str]",
                    "dict"
                ],
                "scheme": [
                    "int",
                    "str",
                    "bytearray",
                    "bool"
                ],
                "pool_kwargs": [
                    "int",
                    "str",
                    "bytearray",
                    "bool"
                ]
            }
        },
        "PoolManager.connection_from_context": {
            "name": "connection_from_context",
            "location": 216,
            "return": [
                "dict",
                "Dict[str, str]",
                "Dict[str, Any]",
                "Counter"
            ],
            "arguments": {
                "self": [],
                "request_context": []
            }
        },
        "PoolManager.connection_from_pool_key": {
            "name": "connection_from_pool_key",
            "location": 228,
            "return": [
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": [],
                "pool_key": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Mapping[str, str]"
                ],
                "request_context": [
                    "str",
                    "Sequence[int]",
                    "bytes"
                ]
            }
        },
        "PoolManager.connection_from_url": {
            "name": "connection_from_url",
            "location": 251,
            "return": [
                "List[str]",
                "int",
                "dict",
                "Dict[str, str]",
                "Dict[str, Any]",
                "bytes",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ],
                "pool_kwargs": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "PoolManager._merge_pool_kwargs": {
            "name": "_merge_pool_kwargs",
            "location": 267,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "override": [
                    "Dict[str, float]",
                    "Mapping",
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, int]"
                ]
            }
        },
        "ProxyManager.__init__": {
            "name": "__init__",
            "location": 363,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "proxy_url": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "num_pools": [
                    "str",
                    "Dict[str, str]"
                ],
                "headers": [
                    "str",
                    "Dict[str, str]"
                ],
                "proxy_headers": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "ProxyManager.connection_from_host": {
            "name": "connection_from_host",
            "location": 390,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "int",
                    "dict"
                ],
                "port": [
                    "str",
                    "int",
                    "dict"
                ],
                "scheme": [
                    "str",
                    "int",
                    "dict"
                ],
                "pool_kwargs": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "ProxyManager._set_proxy_headers": {
            "name": "_set_proxy_headers",
            "location": 400,
            "return": [
                "str",
                "Dict[str, Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "bytes",
                    "Dict[str, Any]"
                ],
                "headers": [
                    "dict"
                ]
            }
        },
        "ProxyManager.urlopen": {
            "name": "urlopen",
            "location": 413,
            "return": [
                "str",
                "Dict[str, int]",
                "Iterable[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Optional[str]"
                ],
                "url": [
                    "str",
                    "Dict[str, str]"
                ],
                "redirect": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "requests3-master/requests3/core/_http/_async/response.py": {
        "_get_decoder": {
            "name": "_get_decoder",
            "location": 67,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "mode": [
                    "str",
                    "List[int]",
                    "Optional[Any]",
                    "Optional[int]",
                    "bool",
                    "Iterable"
                ]
            }
        },
        "DeflateDecoder.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DeflateDecoder.__getattr__": {
            "name": "__getattr__",
            "location": 25,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "DeflateDecoder.decompress": {
            "name": "decompress",
            "location": 28,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "List[List[Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "GzipDecoder.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GzipDecoder.__getattr__": {
            "name": "__getattr__",
            "location": 57,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "GzipDecoder.decompress": {
            "name": "decompress",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "bytes"
                ]
            }
        },
        "HTTPResponse.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "body": [
                    "str",
                    "bool"
                ],
                "headers": [
                    "Dict[str, str]",
                    "Optional[Set[int]]",
                    "int",
                    "dict",
                    "Tuple[bytes, bytes]"
                ],
                "status": [
                    "str",
                    "bool",
                    "bytes",
                    "tuple",
                    "Optional[Dict[str, Any]]",
                    "Optional[Sequence[str]]"
                ],
                "version": [
                    "str",
                    "bool",
                    "bytes",
                    "tuple",
                    "Optional[Dict[str, Any]]",
                    "Optional[Sequence[str]]"
                ],
                "reason": [
                    "str",
                    "bool",
                    "bytes",
                    "tuple",
                    "Optional[Dict[str, Any]]",
                    "Optional[Sequence[str]]"
                ],
                "strict": [
                    "str",
                    "bool",
                    "bytes",
                    "tuple",
                    "Optional[Dict[str, Any]]",
                    "Optional[Sequence[str]]"
                ],
                "preload_content": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "bytes",
                    "Dict[str, str]"
                ],
                "decode_content": [
                    "str",
                    "int",
                    "dict",
                    "bool"
                ],
                "original_response": [
                    "str",
                    "bytes",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ],
                "pool": [
                    "str",
                    "bool",
                    "bytes",
                    "tuple",
                    "Optional[Dict[str, Any]]",
                    "Optional[Sequence[str]]"
                ],
                "connection": [
                    "str",
                    "bool",
                    "bytes",
                    "tuple",
                    "Optional[Dict[str, Any]]",
                    "Optional[Sequence[str]]"
                ],
                "retries": [
                    "str",
                    "bool",
                    "bytes",
                    "tuple",
                    "Optional[Dict[str, Any]]",
                    "Optional[Sequence[str]]"
                ],
                "request_method": [
                    "bool",
                    "dict",
                    "List[int]",
                    "List[str]",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "HTTPResponse.get_redirect_location": {
            "name": "get_redirect_location",
            "location": 144,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse.data": {
            "name": "data",
            "location": 165,
            "return": [
                "str",
                "Sequence[str]",
                "MutableMapping[str, Any]",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse.connection": {
            "name": "connection",
            "location": 174,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse.tell": {
            "name": "tell",
            "location": 177,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse._init_decoder": {
            "name": "_init_decoder",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse._decode": {
            "name": "_decode",
            "location": 195,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "str"
                ],
                "decode_content": [
                    "str",
                    "Dict[str, str]",
                    "io.BytesIO",
                    "bool",
                    "List[str]",
                    "TextIO"
                ],
                "flush_decoder": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "HTTPResponse._flush_decoder": {
            "name": "_flush_decoder",
            "location": 214,
            "return": [
                "int",
                "bytearray",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse._error_catcher": {
            "name": "_error_catcher",
            "location": 226,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse.from_base": {
            "name": "from_base",
            "location": 375,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "ResponseCls": [
                    "str"
                ],
                "r": [
                    "str"
                ]
            }
        },
        "HTTPResponse.getheaders": {
            "name": "getheaders",
            "location": 400,
            "return": [
                "dict",
                "int",
                "str",
                "bytes",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse.getheader": {
            "name": "getheader",
            "location": 403,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, str]"
                ],
                "default": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "HTTPResponse.info": {
            "name": "info",
            "location": 407,
            "return": [
                "int",
                "Dict[str, Union[str, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse.close": {
            "name": "close",
            "location": 411,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse.closed": {
            "name": "closed",
            "location": 420,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse.fileno": {
            "name": "fileno",
            "location": 431,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse.readable": {
            "name": "readable",
            "location": 445,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse.readinto": {
            "name": "readinto",
            "location": 449,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "List[str]",
                    "List[bytes]",
                    "List['cirq.Circuit']",
                    "bytes",
                    "int",
                    "Dict[int, bool]",
                    "Tuple[bool]"
                ]
            }
        }
    },
    "requests3-master/requests3/core/_http/_async/__init__.py": {},
    "requests3-master/requests3/core/_http/_backends/sync_backend.py": {
        "SyncBackend.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "connect_timeout": [
                    "int",
                    "Optional[int]",
                    "Union[int, float]",
                    "Optional[float]"
                ],
                "read_timeout": [
                    "int",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "SyncBackend.connect": {
            "name": "connect",
            "location": 19,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "int",
                    "Optional[int]",
                    "qcodes.datasesqlite.connection.ConnectionPlus"
                ],
                "port": [
                    "str",
                    "int",
                    "Optional[int]",
                    "qcodes.datasesqlite.connection.ConnectionPlus"
                ],
                "source_address": [
                    "str",
                    "int",
                    "Optional[int]",
                    "qcodes.datasesqlite.connection.ConnectionPlus"
                ],
                "socket_options": [
                    "str",
                    "int",
                    "Optional[int]",
                    "qcodes.datasesqlite.connection.ConnectionPlus"
                ]
            }
        },
        "SyncSocket.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sock": [
                    "int",
                    "Dict[str, Any]",
                    "List[int]",
                    "Optional[List[Any]]"
                ],
                "read_timeout": [
                    "int",
                    "float",
                    "Optional[float]"
                ]
            }
        },
        "SyncSocket.start_tls": {
            "name": "start_tls",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "server_hostname": [
                    "int"
                ],
                "ssl_context": [
                    "int"
                ]
            }
        },
        "SyncSocket.getpeercert": {
            "name": "getpeercert",
            "location": 46,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "binary": [
                    "str",
                    "float"
                ]
            }
        },
        "SyncSocket._wait": {
            "name": "_wait",
            "location": 49,
            "return": [
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "readable": [
                    "int",
                    "Callable",
                    "str"
                ],
                "writable": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "SyncSocket.receive_some": {
            "name": "receive_some",
            "location": 65,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyncSocket.send_and_receive_for_a_while": {
            "name": "send_and_receive_for_a_while",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "produce_bytes": [
                    "int",
                    "Tuple[int, int]",
                    "List[float]"
                ],
                "consume_bytes": [
                    "int"
                ]
            }
        },
        "SyncSocket.forceful_close": {
            "name": "forceful_close",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SyncSocket.is_readable": {
            "name": "is_readable",
            "location": 126,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SyncSocket.set_readable_watch_state": {
            "name": "set_readable_watch_state",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "enabled": [
                    "str",
                    "bool",
                    "Dict[str, BinaryIO]",
                    "float"
                ]
            }
        }
    },
    "requests3-master/requests3/core/_http/_backends/trio_backend.py": {
        "TrioBackend.__len__": {
            "name": "__len__",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrioBackend.__gt__": {
            "name": "__gt__",
            "location": 26,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "TrioSocket.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "TrioSocket.getpeercert": {
            "name": "getpeercert",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "binary": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TrioSocket._socket": {
            "name": "_socket",
            "location": 76,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrioSocket.forceful_close": {
            "name": "forceful_close",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TrioSocket.is_readable": {
            "name": "is_readable",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrioSocket.set_readable_watch_state": {
            "name": "set_readable_watch_state",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "enabled": [
                    "str",
                    "bool",
                    "Dict[str, BinaryIO]",
                    "float"
                ]
            }
        }
    },
    "requests3-master/requests3/core/_http/_backends/twisted_backend.py": {
        "TwistedBackend.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "reactor": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "float"
                ]
            }
        },
        "TwistedSocketProtocol.connectionMade": {
            "name": "connectionMade",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TwistedSocketProtocol._signal": {
            "name": "_signal",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event": [
                    "int",
                    "bool",
                    "str",
                    "dict"
                ]
            }
        },
        "TwistedSocketProtocol.dataReceived": {
            "name": "dataReceived",
            "location": 93,
            "return": [
                "Union[tuple, list]",
                "Iterable[Hashable]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TwistedSocketProtocol.connectionLost": {
            "name": "connectionLost",
            "location": 102,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TwistedSocketProtocol.pauseProducing": {
            "name": "pauseProducing",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TwistedSocketProtocol.resumeProducing": {
            "name": "resumeProducing",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TwistedSocketProtocol.stopProducing": {
            "name": "stopProducing",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TwistedSocketProtocol.handshakeCompleted": {
            "name": "handshakeCompleted",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TwistedSocketProtocol.is_readable": {
            "name": "is_readable",
            "location": 147,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwistedSocketProtocol.set_readable_watch_state": {
            "name": "set_readable_watch_state",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "enabled": [
                    "str"
                ]
            }
        },
        "DoubleError.__init__": {
            "name": "__init__",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc1": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "float"
                ],
                "exc2": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "float"
                ]
            }
        },
        "DoubleError.__str__": {
            "name": "__str__",
            "location": 164,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwistedSocket.__init__": {
            "name": "__init__",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "protocol": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "float"
                ]
            }
        },
        "TwistedSocket.getpeercert": {
            "name": "getpeercert",
            "location": 175,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "binary": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TwistedSocket.forceful_close": {
            "name": "forceful_close",
            "location": 255,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TwistedSocket.is_readable": {
            "name": "is_readable",
            "location": 258,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TwistedSocket.set_readable_watch_state": {
            "name": "set_readable_watch_state",
            "location": 261,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "enabled": [
                    "int",
                    "dict",
                    "Tuple[float, float]"
                ]
            }
        },
        "TwistedSocketProtocol._wait_for.cleanup": {
            "name": "cleanup",
            "location": 84,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TwistedSocket.send_and_receive_for_a_while.send_loop_errback": {
            "name": "send_loop_errback",
            "location": 216,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "failure": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TwistedSocket.send_and_receive_for_a_while.receive_loop_allback": {
            "name": "receive_loop_allback",
            "location": 223,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "result": [
                    "bool",
                    "Exception"
                ]
            }
        }
    },
    "requests3-master/requests3/core/_http/_backends/_common.py": {
        "is_readable": {
            "name": "is_readable",
            "location": 18,
            "return": [
                "str",
                "bool",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "sock": [
                    "str",
                    "Optional[List[str]]",
                    "bool",
                    "deoplete.util.UserContext"
                ]
            }
        }
    },
    "requests3-master/requests3/core/_http/_backends/__init__.py": {},
    "requests3-master/requests3/core/_http/_sync/connection.py": {
        "_headers_to_native_string": {
            "name": "_headers_to_native_string",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "headers": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "list"
                ]
            }
        },
        "_stringify_headers": {
            "name": "_stringify_headers",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "headers": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "_read_readable": {
            "name": "_read_readable",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "readable": [
                    "str",
                    "List[Tuple[int, int]]",
                    "bool",
                    "deoplete.util.UserContext"
                ]
            }
        },
        "_make_body_iterable": {
            "name": "_make_body_iterable",
            "location": 97,
            "return": [
                "int",
                "List[Callable]",
                "List[str]"
            ],
            "arguments": {
                "body": [
                    "str",
                    "Optional[str]",
                    "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                    "datetime.date"
                ]
            }
        },
        "_request_bytes_iterable": {
            "name": "_request_bytes_iterable",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "aiohttp.web.Request",
                    "dict",
                    "int"
                ],
                "state_machine": [
                    "int",
                    "bytes",
                    "aiocometd.transports.base.Headers",
                    "str",
                    "dict"
                ]
            }
        },
        "_response_from_h11": {
            "name": "_response_from_h11",
            "location": 148,
            "return": [
                "Optional[str]",
                "Dict[str, Any]",
                "dict",
                "flask.Response"
            ],
            "arguments": {
                "h11_response": [
                    "Dict[str, Any]",
                    "Sequence",
                    "Type['Declared']",
                    "dict",
                    "List[Dict[str, Any]]"
                ],
                "body_object": [
                    "int",
                    "str",
                    "requests.Response",
                    "flask.Response",
                    "dict",
                    "MutableMapping",
                    "Tuple[int, int]"
                ]
            }
        },
        "_build_tunnel_request": {
            "name": "_build_tunnel_request",
            "location": 165,
            "return": [
                "int",
                "List[str]",
                "dict",
                "Dict[str, str]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "host": [
                    "str",
                    "int"
                ],
                "port": [
                    "str",
                    "int"
                ],
                "headers": [
                    "str",
                    "dict",
                    "Optional[dict]",
                    "Mapping[str, str]",
                    "Dict[str, str]"
                ]
            }
        },
        "_start_http_request": {
            "name": "_start_http_request",
            "location": 178,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "request": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "state_machine": [
                    "str"
                ],
                "conn": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "_read_until_event": {
            "name": "_read_until_event",
            "location": 246,
            "return": [
                "dict",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "state_machine": [
                    "float"
                ],
                "conn": [
                    "Set[str]",
                    "dict"
                ]
            }
        },
        "_start_http_request.next_bytes_to_send": {
            "name": "next_bytes_to_send",
            "location": 201,
            "return": [
                "Union[str, List[str]]",
                "dict",
                "bytes"
            ],
            "arguments": {}
        },
        "_start_http_request.consume_bytes": {
            "name": "consume_bytes",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "Dict[str, Any]",
                    "bytes",
                    "dict",
                    "OrderedDict",
                    "str"
                ]
            }
        },
        "HTTP1Connection.__init__": {
            "name": "__init__",
            "location": 283,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "host": [
                    "Union[float, Tuple[float, float]]",
                    "Callable",
                    "List[str]",
                    "int"
                ],
                "port": [
                    "Union[float, Tuple[float, float]]",
                    "Callable",
                    "List[str]",
                    "int"
                ],
                "backend": [
                    "int",
                    "Dict[str, Tuple[str, int, int]]",
                    "str",
                    "Dict[str, Tuple[str, str, Any]]",
                    "Dict[int, str]",
                    "bool"
                ],
                "socket_options": [
                    "str",
                    "bool",
                    "Optional[Callable]",
                    "Optional[Dict[str, Any]]"
                ],
                "source_address": [
                    "bool",
                    "List[str]",
                    "str"
                ],
                "tunnel_host": [
                    "Union[float, Tuple[float, float]]",
                    "Callable",
                    "List[str]",
                    "int"
                ],
                "tunnel_port": [
                    "bool",
                    "float",
                    "list",
                    "Dict[str, Any]",
                    "static_frame.core.util.DtypesSpecifier"
                ],
                "tunnel_headers": [
                    "Union[float, Tuple[float, float]]",
                    "Callable",
                    "List[str]",
                    "int"
                ]
            }
        },
        "HTTP1Connection._wrap_socket": {
            "name": "_wrap_socket",
            "location": 310,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "bool",
                    "bytes"
                ],
                "ssl_context": [
                    "bool",
                    "bytes"
                ],
                "fingerprint": [
                    "dict",
                    "str",
                    "int"
                ],
                "assert_hostname": [
                    "int"
                ]
            }
        },
        "HTTP1Connection.send_request": {
            "name": "send_request",
            "location": 354,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "FrozenSet[bytes]",
                    "fastapi.Request"
                ],
                "read_timeout": [
                    "List[str]",
                    "Dict[str, Any]",
                    "List[Tuple[str, str]]",
                    "int"
                ]
            }
        },
        "HTTP1Connection._tunnel": {
            "name": "_tunnel",
            "location": 361,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "str",
                    "dict",
                    "List[List[int]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "HTTP1Connection.connect": {
            "name": "connect",
            "location": 383,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": [],
                "ssl_context": [
                    "Tuple[str, int]",
                    "float"
                ],
                "fingerprint": [
                    "pymatgen.util.Vector3Like",
                    "List[pymatgen.util.Vector3Like]",
                    "float",
                    "datetime"
                ],
                "assert_hostname": [
                    "pymatgen.util.Vector3Like",
                    "List[pymatgen.util.Vector3Like]",
                    "float",
                    "datetime"
                ],
                "connect_timeout": [
                    "int",
                    "str",
                    "base.IntOrParameter"
                ]
            }
        },
        "HTTP1Connection.close": {
            "name": "close",
            "location": 431,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTP1Connection.is_dropped": {
            "name": "is_dropped",
            "location": 440,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTP1Connection._reset": {
            "name": "_reset",
            "location": 458,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTP1Connection.complete": {
            "name": "complete",
            "location": 476,
            "return": [
                "int",
                "list",
                "List[Dict[str, Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTP1Connection.__iter__": {
            "name": "__iter__",
            "location": 485,
            "return": [
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTP1Connection.next": {
            "name": "next",
            "location": 488,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTP1Connection.__next__": {
            "name": "__next__",
            "location": 491,
            "return": [
                "int",
                "Dict[str, str]",
                "Dict[str, Any]",
                "Union[Dict, List]",
                "bool",
                "List[int]",
                "Union[Dict, Tuple]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "requests3-master/requests3/core/_http/_sync/connectionpool.py": {
        "_add_transport_headers": {
            "name": "_add_transport_headers",
            "location": 59,
            "return": [
                "str",
                "Sequence[Any]",
                "Union[tuple, list]"
            ],
            "arguments": {
                "headers": [
                    "str",
                    "bool",
                    "apistar.http.Request"
                ]
            }
        },
        "_build_context": {
            "name": "_build_context",
            "location": 77,
            "return": [
                "bool"
            ],
            "arguments": {
                "context": [
                    "Optional[float]",
                    "int",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "dict"
                ],
                "keyfile": [
                    "int",
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "certfile": [
                    "int",
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "cert_reqs": [
                    "bool",
                    "Optional[int]",
                    "str"
                ],
                "ca_certs": [
                    "int",
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "ca_cert_dir": [
                    "int",
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "ssl_version": [
                    "bool",
                    "Optional[int]",
                    "Iterable[int]"
                ]
            }
        },
        "connection_from_url": {
            "name": "connection_from_url",
            "location": 824,
            "return": [
                "str",
                "bool",
                "List[Dict]",
                "Mapping[str, Any]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "int"
                ]
            }
        },
        "_ipv6_host": {
            "name": "_ipv6_host",
            "location": 853,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "host": [
                    "str"
                ]
            }
        },
        "ConnectionPool.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "int"
                ],
                "port": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ConnectionPool.__str__": {
            "name": "__str__",
            "location": 117,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionPool.__enter__": {
            "name": "__enter__",
            "location": 120,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionPool.__exit__": {
            "name": "__exit__",
            "location": 123,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "ConnectionPool.close": {
            "name": "close",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPConnectionPool.__init__": {
            "name": "__init__",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "Optional[str]",
                    "float"
                ],
                "port": [
                    "str",
                    "Optional[str]",
                    "float"
                ],
                "timeout": [
                    "bool"
                ],
                "maxsize": [
                    "bool",
                    "Exception",
                    "Optional[dict]",
                    "str",
                    "Optional[Mapping]"
                ],
                "block": [
                    "bool",
                    "Exception",
                    "Optional[dict]",
                    "str",
                    "Optional[Mapping]"
                ],
                "headers": [
                    "bool",
                    "str",
                    "Optional[bool]"
                ],
                "retries": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "_proxy": [
                    "bool",
                    "Exception",
                    "Optional[dict]",
                    "str",
                    "Optional[Mapping]"
                ],
                "_proxy_headers": [
                    "bool",
                    "Exception",
                    "Optional[dict]",
                    "str",
                    "Optional[Mapping]"
                ]
            }
        },
        "HTTPConnectionPool._new_conn": {
            "name": "_new_conn",
            "location": 241,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPConnectionPool._get_conn": {
            "name": "_get_conn",
            "location": 261,
            "return": [
                "int",
                "str",
                "Tuple[str, str]",
                "Set[str]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "int",
                    "str"
                ]
            }
        },
        "HTTPConnectionPool._put_conn": {
            "name": "_put_conn",
            "location": 293,
            "return": [],
            "arguments": {
                "self": [],
                "conn": [
                    "str",
                    "Mapping[str, str]",
                    "int",
                    "bool"
                ]
            }
        },
        "HTTPConnectionPool._start_conn": {
            "name": "_start_conn",
            "location": 321,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "int",
                    "Optional[float]",
                    "Optional[int]",
                    "Union[int, float]"
                ],
                "connect_timeout": [
                    "int",
                    "Optional[float]",
                    "Optional[int]",
                    "Union[int, float]"
                ]
            }
        },
        "HTTPConnectionPool._get_timeout": {
            "name": "_get_timeout",
            "location": 327,
            "return": [
                "str",
                "dict",
                "List[str]",
                "Callable[..., T]",
                "Callable[[str], str]"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "str",
                    "bool",
                    "Callable",
                    "Tuple[int, int]",
                    "NamedTuple"
                ]
            }
        },
        "HTTPConnectionPool._raise_timeout": {
            "name": "_raise_timeout",
            "location": 340,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "err": [
                    "str",
                    "Iterable[str]",
                    "Optional[int]",
                    "Optional"
                ],
                "url": [
                    "str",
                    "float",
                    "bool"
                ],
                "timeout_value": [
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "HTTPConnectionPool._make_request": {
            "name": "_make_request",
            "location": 365,
            "return": [
                "dict",
                "Dict[str, Union[int, str]]",
                "Optional[Dict[str, Any]]",
                "Optional[Dict[str, str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "bool",
                    "Callable",
                    "Optional[str]"
                ],
                "method": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "Optional[dict]",
                    "Optional[MutableMapping]",
                    "Dict[str, str]"
                ],
                "url": [
                    "dict",
                    "str",
                    "Optional[dict]"
                ],
                "timeout": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "body": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "int"
                ],
                "headers": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "HTTPConnectionPool._absolute_url": {
            "name": "_absolute_url",
            "location": 434,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "HTTPConnectionPool.close": {
            "name": "close",
            "location": 437,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "base.ConfigOptions",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPConnectionPool.is_same_host": {
            "name": "is_same_host",
            "location": 454,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "HTTPConnectionPool.urlopen": {
            "name": "urlopen",
            "location": 472,
            "return": [
                "List[str]",
                "int",
                "Optional[str]",
                "Dict[str, Any]",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "dict",
                    "Union[str, Dict[str, Any]]",
                    "Optional[int]",
                    "Literal"
                ],
                "url": [
                    "str",
                    "Dict[str, str]"
                ],
                "body": [
                    "int",
                    "bool",
                    "float",
                    "str"
                ],
                "headers": [
                    "int",
                    "bool",
                    "float",
                    "str"
                ],
                "retries": [
                    "str",
                    "dict",
                    "Union[str, Dict[str, Any]]"
                ],
                "timeout": [
                    "int",
                    "bool",
                    "float",
                    "str"
                ],
                "pool_timeout": [
                    "int",
                    "bool",
                    "float",
                    "str"
                ],
                "body_pos": [
                    "int",
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "HTTPSConnectionPool.__init__": {
            "name": "__init__",
            "location": 712,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "host": [
                    "Union[int, str]",
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "Dict[str, str]",
                    "Union[str, List[str], Tuple[str, ...]]"
                ],
                "port": [
                    "Union[int, str]",
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "Dict[str, str]",
                    "Union[str, List[str], Tuple[str, ...]]"
                ],
                "timeout": [
                    "Union[int, str]",
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "Dict[str, str]",
                    "Union[str, List[str], Tuple[str, ...]]"
                ],
                "maxsize": [
                    "Union[int, str]",
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "Dict[str, str]",
                    "Union[str, List[str], Tuple[str, ...]]"
                ],
                "block": [
                    "Union[int, str]",
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "Dict[str, str]",
                    "Union[str, List[str], Tuple[str, ...]]"
                ],
                "headers": [
                    "Union[int, str]",
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "Dict[str, str]",
                    "Union[str, List[str], Tuple[str, ...]]"
                ],
                "retries": [
                    "Union[int, str]",
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "Dict[str, str]",
                    "Union[str, List[str], Tuple[str, ...]]"
                ],
                "_proxy": [
                    "Union[int, str]",
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "Dict[str, str]",
                    "Union[str, List[str], Tuple[str, ...]]"
                ],
                "_proxy_headers": [
                    "Union[int, str]",
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "Dict[str, str]",
                    "Union[str, List[str], Tuple[str, ...]]"
                ],
                "key_file": [
                    "Dict[str, str]",
                    "List[Optional[str]]",
                    "Optional[str]",
                    "bool",
                    "dict",
                    "str"
                ],
                "cert_file": [
                    "Dict[str, str]",
                    "List[Optional[str]]",
                    "Optional[str]",
                    "bool",
                    "dict",
                    "str"
                ],
                "cert_reqs": [
                    "str",
                    "Optional[Mapping[str, Any]]"
                ],
                "ca_certs": [
                    "str",
                    "Optional[Mapping[str, Any]]"
                ],
                "ssl_version": [
                    "Dict[str, str]",
                    "List[Optional[str]]",
                    "Optional[str]",
                    "bool",
                    "dict",
                    "str"
                ],
                "assert_hostname": [
                    "Optional[bool]",
                    "str",
                    "tuple"
                ],
                "assert_fingerprint": [
                    "Optional[bool]",
                    "str",
                    "tuple"
                ],
                "ca_cert_dir": [
                    "Dict[str, str]",
                    "List[Optional[str]]",
                    "Optional[str]",
                    "bool",
                    "dict",
                    "str"
                ],
                "ssl_context": [
                    "Dict[str, str]",
                    "List[Optional[str]]",
                    "Optional[str]",
                    "bool",
                    "dict",
                    "str"
                ]
            }
        },
        "HTTPSConnectionPool._new_conn": {
            "name": "_new_conn",
            "location": 764,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPSConnectionPool._start_conn": {
            "name": "_start_conn",
            "location": 802,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "conn": [],
                "connect_timeout": []
            }
        },
        "HTTPConnectionPool.urlopen.drain_and_release_conn": {
            "name": "drain_and_release_conn",
            "location": 645,
            "return": [
                ""
            ],
            "arguments": {
                "response": [
                    "str",
                    "Tuple[str, int]"
                ]
            }
        }
    },
    "requests3-master/requests3/core/_http/_sync/poolmanager.py": {
        "_default_key_normalizer": {
            "name": "_default_key_normalizer",
            "location": 59,
            "return": [
                "str",
                "List[str]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "key_class": [
                    "dict",
                    "T"
                ],
                "request_context": [
                    "bytes",
                    "str"
                ]
            }
        },
        "proxy_from_url": {
            "name": "proxy_from_url",
            "location": 425,
            "return": [
                "bool",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[List]"
                ]
            }
        },
        "PoolManager.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "num_pools": [
                    "str",
                    "dict",
                    "bool",
                    "List[Dict[str, Any]]",
                    "List[cmk.base.api.agent_based.type_defs.CheckPlugin]"
                ],
                "headers": [
                    "bool",
                    "Exception",
                    "Optional[Any]",
                    "bytes"
                ],
                "backend": [
                    "str",
                    "Tuple[int, int]",
                    "int",
                    "Dict[str, str]",
                    "bool",
                    "bytes"
                ]
            }
        },
        "PoolManager.__enter__": {
            "name": "__enter__",
            "location": 154,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PoolManager.__exit__": {
            "name": "__exit__",
            "location": 157,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "PoolManager._new_pool": {
            "name": "_new_pool",
            "location": 162,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "scheme": [
                    "str"
                ],
                "host": [
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "port": [
                    "bool",
                    "int",
                    "Optional[str]"
                ],
                "request_context": [
                    "bytes",
                    "bool"
                ]
            }
        },
        "PoolManager.clear": {
            "name": "clear",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PoolManager.connection_from_host": {
            "name": "connection_from_host",
            "location": 195,
            "return": [
                "dict",
                "Optional[str]",
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]",
                "bytes",
                "Tuple[Dict, int]"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "int",
                    "str",
                    "bytearray",
                    "bool"
                ],
                "port": [
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, Any]]",
                    "Tuple[int, int]",
                    "MutableMapping",
                    "Dict[str, str]",
                    "dict"
                ],
                "scheme": [
                    "int",
                    "str",
                    "bytearray",
                    "bool"
                ],
                "pool_kwargs": [
                    "int",
                    "str",
                    "bytearray",
                    "bool"
                ]
            }
        },
        "PoolManager.connection_from_context": {
            "name": "connection_from_context",
            "location": 216,
            "return": [
                "dict",
                "Dict[str, str]",
                "Dict[str, Any]",
                "Counter"
            ],
            "arguments": {
                "self": [],
                "request_context": []
            }
        },
        "PoolManager.connection_from_pool_key": {
            "name": "connection_from_pool_key",
            "location": 228,
            "return": [
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": [],
                "pool_key": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Mapping[str, str]"
                ],
                "request_context": [
                    "str",
                    "Sequence[int]",
                    "bytes"
                ]
            }
        },
        "PoolManager.connection_from_url": {
            "name": "connection_from_url",
            "location": 251,
            "return": [
                "List[str]",
                "int",
                "dict",
                "Dict[str, str]",
                "Dict[str, Any]",
                "bytes",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ],
                "pool_kwargs": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "PoolManager._merge_pool_kwargs": {
            "name": "_merge_pool_kwargs",
            "location": 267,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "override": [
                    "Dict[str, float]",
                    "Mapping",
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, int]"
                ]
            }
        },
        "PoolManager.urlopen": {
            "name": "urlopen",
            "location": 287,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "url": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "redirect": [
                    "Optional[str]",
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "ProxyManager.__init__": {
            "name": "__init__",
            "location": 363,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "proxy_url": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "num_pools": [
                    "str",
                    "Dict[str, str]"
                ],
                "headers": [
                    "str",
                    "Dict[str, str]"
                ],
                "proxy_headers": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "ProxyManager.connection_from_host": {
            "name": "connection_from_host",
            "location": 390,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "int",
                    "dict"
                ],
                "port": [
                    "str",
                    "int",
                    "dict"
                ],
                "scheme": [
                    "str",
                    "int",
                    "dict"
                ],
                "pool_kwargs": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "ProxyManager._set_proxy_headers": {
            "name": "_set_proxy_headers",
            "location": 400,
            "return": [
                "str",
                "Dict[str, Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "bytes",
                    "Dict[str, Any]"
                ],
                "headers": [
                    "dict"
                ]
            }
        },
        "ProxyManager.urlopen": {
            "name": "urlopen",
            "location": 413,
            "return": [
                "str",
                "Dict[str, int]",
                "Iterable[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Optional[str]"
                ],
                "url": [
                    "str",
                    "Dict[str, str]"
                ],
                "redirect": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "requests3-master/requests3/core/_http/_sync/response.py": {
        "_get_decoder": {
            "name": "_get_decoder",
            "location": 67,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "mode": [
                    "str",
                    "List[int]",
                    "Optional[Any]",
                    "Optional[int]",
                    "bool",
                    "Iterable"
                ]
            }
        },
        "DeflateDecoder.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DeflateDecoder.__getattr__": {
            "name": "__getattr__",
            "location": 25,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "DeflateDecoder.decompress": {
            "name": "decompress",
            "location": 28,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "List[List[Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "GzipDecoder.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GzipDecoder.__getattr__": {
            "name": "__getattr__",
            "location": 57,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "GzipDecoder.decompress": {
            "name": "decompress",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "bytes"
                ]
            }
        },
        "HTTPResponse.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "body": [
                    "str",
                    "bool"
                ],
                "headers": [
                    "Dict[str, str]",
                    "Optional[Set[int]]",
                    "int",
                    "dict",
                    "Tuple[bytes, bytes]"
                ],
                "status": [
                    "str",
                    "bool",
                    "bytes",
                    "tuple",
                    "Optional[Dict[str, Any]]",
                    "Optional[Sequence[str]]"
                ],
                "version": [
                    "str",
                    "bool",
                    "bytes",
                    "tuple",
                    "Optional[Dict[str, Any]]",
                    "Optional[Sequence[str]]"
                ],
                "reason": [
                    "str",
                    "bool",
                    "bytes",
                    "tuple",
                    "Optional[Dict[str, Any]]",
                    "Optional[Sequence[str]]"
                ],
                "strict": [
                    "str",
                    "bool",
                    "bytes",
                    "tuple",
                    "Optional[Dict[str, Any]]",
                    "Optional[Sequence[str]]"
                ],
                "preload_content": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "bytes",
                    "Dict[str, str]"
                ],
                "decode_content": [
                    "str",
                    "int",
                    "dict",
                    "bool"
                ],
                "original_response": [
                    "str",
                    "bytes",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ],
                "pool": [
                    "str",
                    "bool",
                    "bytes",
                    "tuple",
                    "Optional[Dict[str, Any]]",
                    "Optional[Sequence[str]]"
                ],
                "connection": [
                    "str",
                    "bool",
                    "bytes",
                    "tuple",
                    "Optional[Dict[str, Any]]",
                    "Optional[Sequence[str]]"
                ],
                "retries": [
                    "str",
                    "bool",
                    "bytes",
                    "tuple",
                    "Optional[Dict[str, Any]]",
                    "Optional[Sequence[str]]"
                ],
                "request_method": [
                    "bool",
                    "dict",
                    "List[int]",
                    "List[str]",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "HTTPResponse.get_redirect_location": {
            "name": "get_redirect_location",
            "location": 144,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse.release_conn": {
            "name": "release_conn",
            "location": 157,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse.data": {
            "name": "data",
            "location": 165,
            "return": [
                "str",
                "Sequence[str]",
                "MutableMapping[str, Any]",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse.connection": {
            "name": "connection",
            "location": 174,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse.tell": {
            "name": "tell",
            "location": 177,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse._init_decoder": {
            "name": "_init_decoder",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse._decode": {
            "name": "_decode",
            "location": 195,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "bytes",
                    "str"
                ],
                "decode_content": [
                    "str",
                    "Dict[str, str]",
                    "io.BytesIO",
                    "bool",
                    "List[str]",
                    "TextIO"
                ],
                "flush_decoder": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "HTTPResponse._flush_decoder": {
            "name": "_flush_decoder",
            "location": 214,
            "return": [
                "int",
                "bytearray",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse._error_catcher": {
            "name": "_error_catcher",
            "location": 226,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse.read": {
            "name": "read",
            "location": 275,
            "return": [
                "str",
                "bytes",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "amt": [
                    "Optional[str]",
                    "str",
                    "dict",
                    "bool"
                ],
                "decode_content": [
                    "str",
                    "IO[bytes]"
                ],
                "cache_content": [
                    "bool",
                    "str",
                    "List[str]",
                    "int",
                    "Optional[bool]"
                ]
            }
        },
        "HTTPResponse.stream": {
            "name": "stream",
            "location": 337,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "decode_content": [
                    "Optional[str]",
                    "dict",
                    "Optional[Dict]",
                    "str"
                ]
            }
        },
        "HTTPResponse.from_base": {
            "name": "from_base",
            "location": 375,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "ResponseCls": [
                    "str"
                ],
                "r": [
                    "str"
                ]
            }
        },
        "HTTPResponse.getheaders": {
            "name": "getheaders",
            "location": 400,
            "return": [
                "dict",
                "int",
                "str",
                "bytes",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse.getheader": {
            "name": "getheader",
            "location": 403,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, str]"
                ],
                "default": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "HTTPResponse.info": {
            "name": "info",
            "location": 407,
            "return": [
                "int",
                "Dict[str, Union[str, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse.close": {
            "name": "close",
            "location": 411,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse.closed": {
            "name": "closed",
            "location": 420,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse.fileno": {
            "name": "fileno",
            "location": 431,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse.readable": {
            "name": "readable",
            "location": 445,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPResponse.readinto": {
            "name": "readinto",
            "location": 449,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "b": [
                    "List[str]",
                    "List[bytes]",
                    "List['cirq.Circuit']",
                    "bytes",
                    "int",
                    "Dict[int, bool]",
                    "Tuple[bool]"
                ]
            }
        }
    },
    "requests3-master/requests3/core/_http/_sync/__init__.py": {},
    "requests3-master/requests3/toolbelt/exceptions.py": {},
    "requests3-master/requests3/toolbelt/sessions.py": {
        "BaseUrlSession.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "base_url": [
                    "str",
                    "Optional[str]",
                    "Optional[Callable[[str], Any]]"
                ]
            }
        },
        "BaseUrlSession.request": {
            "name": "request",
            "location": 61,
            "return": [
                "Dict[str, str]",
                "str",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "BaseUrlSession.create_url": {
            "name": "create_url",
            "location": 66,
            "return": [
                "str",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        }
    },
    "requests3-master/requests3/toolbelt/streaming_iterator.py": {
        "StreamingIterator.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "Sized",
                    "bytearray"
                ],
                "iterator": [
                    "str",
                    "Optional[int]",
                    "int",
                    "Optional[str]"
                ],
                "encoding": [
                    "str",
                    "bytes"
                ]
            }
        },
        "StreamingIterator.read": {
            "name": "read",
            "location": 77,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "bytearray",
                    "bytes",
                    "float"
                ]
            }
        },
        "_IteratorAsBinaryFile.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "iterator": [
                    "int",
                    "bool",
                    "float"
                ],
                "encoding": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "_IteratorAsBinaryFile._get_bytes": {
            "name": "_get_bytes",
            "location": 93,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "_IteratorAsBinaryFile._load_bytes": {
            "name": "_load_bytes",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "float",
                    "Tuple[int, int]"
                ]
            }
        },
        "_IteratorAsBinaryFile.read": {
            "name": "read",
            "location": 108,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "Tuple[int]",
                    "Tuple[int, int]"
                ]
            }
        }
    },
    "requests3-master/requests3/toolbelt/_compat.py": {
        "HTTPHeaderDict.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "requests.Response",
                    "Optional[Dict[str, str]]",
                    "Optional[str]",
                    "bool",
                    "Optional[dict]"
                ]
            }
        },
        "HTTPHeaderDict.__setitem__": {
            "name": "__setitem__",
            "location": 126,
            "return": [
                "bytes",
                "str",
                "Callable",
                "OrderedDict"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "KT",
                    "asyncio.Queue"
                ],
                "val": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "HTTPHeaderDict.__getitem__": {
            "name": "__getitem__",
            "location": 130,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "float",
                    "bool",
                    "Hashable",
                    "Union[float, int]"
                ]
            }
        },
        "HTTPHeaderDict.__delitem__": {
            "name": "__delitem__",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str",
                    "int",
                    "float",
                    "tuple"
                ]
            }
        },
        "HTTPHeaderDict.__contains__": {
            "name": "__contains__",
            "location": 137,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "HTTPHeaderDict.__eq__": {
            "name": "__eq__",
            "location": 140,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "HTTPHeaderDict.__ne__": {
            "name": "__ne__",
            "location": 149,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "HTTPHeaderDict.__len__": {
            "name": "__len__",
            "location": 158,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPHeaderDict.__iter__": {
            "name": "__iter__",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPHeaderDict.pop": {
            "name": "pop",
            "location": 166,
            "return": [
                "str",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "default": [
                    "str",
                    "bytes",
                    "int",
                    "List[Tuple[int, int]]",
                    "Optional[str]"
                ]
            }
        },
        "HTTPHeaderDict.discard": {
            "name": "discard",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "HTTPHeaderDict.add": {
            "name": "add",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "KT"
                ],
                "val": [
                    "str",
                    "bytes",
                    "slice",
                    "static_frame.core.util.GetItemKeyType"
                ]
            }
        },
        "HTTPHeaderDict.extend": {
            "name": "extend",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPHeaderDict.getlist": {
            "name": "getlist",
            "location": 243,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "float",
                    "bool",
                    "Hashable",
                    "Union[float, int]"
                ]
            }
        },
        "HTTPHeaderDict.__repr__": {
            "name": "__repr__",
            "location": 261,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPHeaderDict._copy_from": {
            "name": "_copy_from",
            "location": 264,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict[str, Any]",
                    "Callable",
                    "str"
                ]
            }
        },
        "HTTPHeaderDict.copy": {
            "name": "copy",
            "location": 272,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPHeaderDict.iteritems": {
            "name": "iteritems",
            "location": 277,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPHeaderDict.itermerged": {
            "name": "itermerged",
            "location": 284,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPHeaderDict.items": {
            "name": "items",
            "location": 290,
            "return": [
                "List[Dict]",
                "str",
                "List[str]",
                "List[int]",
                "List[List[Any]]",
                "Sequence[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPHeaderDict.from_httplib": {
            "name": "from_httplib",
            "location": 294,
            "return": [
                "int",
                "dict",
                "Dict[str, float]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "bytes",
                    "type"
                ],
                "message": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "bytes",
                    "type"
                ]
            }
        }
    },
    "requests3-master/requests3/toolbelt/__init__.py": {},
    "requests3-master/requests3/toolbelt/adapters/appengine.py": {
        "monkeypatch": {
            "name": "monkeypatch",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "validate_certificate": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_check_version": {
            "name": "_check_version",
            "location": 216,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "AppEngineMROHack.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AppEngineAdapter.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "validate_certificate": [
                    "dict",
                    "int"
                ]
            }
        },
        "AppEngineAdapter.init_poolmanager": {
            "name": "init_poolmanager",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "connections": [
                    "bool",
                    "float",
                    "int",
                    "str"
                ],
                "maxsize": [
                    "bool",
                    "float",
                    "int",
                    "str"
                ],
                "block": [
                    "bool",
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "InsecureAppEngineAdapter.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_AppEnginePoolManager.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "validate_certificate": []
            }
        },
        "_AppEnginePoolManager.connection_from_url": {
            "name": "connection_from_url",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "_AppEnginePoolManager.clear": {
            "name": "clear",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_AppEngineConnection.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "appengine_manager": [
                    "str",
                    "Callable",
                    "bool"
                ],
                "url": [
                    "dict",
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "_AppEngineConnection.urlopen": {
            "name": "urlopen",
            "location": 152,
            "return": [
                "str",
                "Iterable[int]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "bool",
                    "Optional[Mapping[str, str]]"
                ],
                "url": [
                    "str",
                    "bool",
                    "Optional[Mapping[str, str]]"
                ],
                "body": [
                    "str",
                    "bool",
                    "Optional[Mapping[str, str]]"
                ],
                "headers": [
                    "str",
                    "bool",
                    "Optional[Mapping[str, str]]"
                ],
                "retries": [
                    "str",
                    "bool",
                    "Optional[Mapping[str, str]]"
                ],
                "redirect": [
                    "str",
                    "bool",
                    "Optional[Mapping[str, str]]"
                ],
                "assert_same_host": [
                    "Optional[bool]",
                    "bool",
                    "List[str]"
                ],
                "timeout": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "List[tuple]"
                ],
                "pool_timeout": [
                    "Optional[bool]",
                    "bool",
                    "List[str]"
                ],
                "release_conn": [
                    "Optional[bool]",
                    "bool",
                    "List[str]"
                ]
            }
        }
    },
    "requests3-master/requests3/toolbelt/adapters/fingerprint.py": {
        "FingerprintAdapter.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fingerprint": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "FingerprintAdapter.init_poolmanager": {
            "name": "init_poolmanager",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "connections": [],
                "maxsize": [],
                "block": []
            }
        }
    },
    "requests3-master/requests3/toolbelt/adapters/host_header_ssl.py": {
        "HostHeaderSSLAdapter.send": {
            "name": "send",
            "location": 27,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "requests3-master/requests3/toolbelt/adapters/socket_options.py": {
        "SocketOptionsAdapter.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SocketOptionsAdapter.init_poolmanager": {
            "name": "init_poolmanager",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "connections": [
                    "Optional[Callable]",
                    "bool",
                    "Hashable"
                ],
                "maxsize": [
                    "Optional[Callable]",
                    "bool",
                    "Hashable"
                ],
                "block": [
                    "Optional[Callable]",
                    "bool",
                    "Hashable"
                ]
            }
        },
        "TCPKeepAliveAdapter.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "requests3-master/requests3/toolbelt/adapters/source.py": {
        "SourceAddressAdapter.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source_address": [
                    "str"
                ]
            }
        },
        "SourceAddressAdapter.init_poolmanager": {
            "name": "init_poolmanager",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "connections": [
                    "Callable",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict",
                    "int"
                ],
                "maxsize": [
                    "Callable",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict",
                    "int"
                ],
                "block": [
                    "Callable",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict",
                    "int"
                ]
            }
        },
        "SourceAddressAdapter.proxy_manager_for": {
            "name": "proxy_manager_for",
            "location": 66,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "requests3-master/requests3/toolbelt/adapters/ssl.py": {
        "SSLAdapter.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ssl_version": [
                    "bool",
                    "tuple",
                    "int",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "SSLAdapter.init_poolmanager": {
            "name": "init_poolmanager",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "connections": [
                    "int",
                    "float"
                ],
                "maxsize": [
                    "int",
                    "float"
                ],
                "block": [
                    "int",
                    "float"
                ]
            }
        },
        "SSLAdapter.proxy_manager_for": {
            "name": "proxy_manager_for",
            "location": 65,
            "return": [
                "str",
                "int",
                "Dict[str, str]",
                "Iterable[Iterable[T]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "requests3-master/requests3/toolbelt/adapters/x509.py": {
        "check_cert_dates": {
            "name": "check_cert_dates",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "cert": [
                    "int",
                    "str",
                    "List[float]"
                ]
            }
        },
        "create_ssl_context": {
            "name": "create_ssl_context",
            "location": 150,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "cert_byes": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "pk_bytes": [
                    "str",
                    "bytes",
                    "dict",
                    "memoryview",
                    "int"
                ],
                "password": [
                    "str",
                    "bytes",
                    "dict",
                    "memoryview",
                    "int"
                ],
                "encoding": [
                    "str"
                ]
            }
        },
        "X509Adapter.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "X509Adapter.init_poolmanager": {
            "name": "init_poolmanager",
            "location": 118,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "X509Adapter.proxy_manager_for": {
            "name": "proxy_manager_for",
            "location": 123,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "X509Adapter._check_version": {
            "name": "_check_version",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "requests3-master/requests3/toolbelt/adapters/__init__.py": {},
    "requests3-master/requests3/toolbelt/auth/guess.py": {
        "GuessAuth.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "GuessAuth._handle_basic_auth_401": {
            "name": "_handle_basic_auth_401",
            "location": 18,
            "return": [
                "Set[str]",
                "List[Match]",
                "List[str]",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "dict",
                    "bytes"
                ],
                "kwargs": []
            }
        },
        "GuessAuth._handle_digest_auth_401": {
            "name": "_handle_digest_auth_401",
            "location": 40,
            "return": [
                "str",
                "bool",
                "Mapping"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "Tuple[int, int, int]",
                    "str",
                    "List[Tuple[float, float]]",
                    "tuple",
                    "bool"
                ],
                "kwargs": []
            }
        },
        "GuessAuth.handle_401": {
            "name": "handle_401",
            "location": 58,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "bool",
                    "dict",
                    "Callable",
                    "Dict[str, str]",
                    "bytes"
                ]
            }
        },
        "GuessAuth.__call__": {
            "name": "__call__",
            "location": 69,
            "return": [
                "bool",
                "\"Flow\"",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "GuessProxyAuth.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "Mapping[str, Any]",
                    "Dict[str, str]",
                    "List[str]",
                    "dict",
                    "int",
                    "bool"
                ],
                "password": [
                    "str",
                    "Mapping[str, Any]",
                    "Dict[str, str]",
                    "List[str]",
                    "dict",
                    "int",
                    "bool"
                ],
                "proxy_username": [
                    "bytes",
                    "str",
                    "bool",
                    "int",
                    "List[int]"
                ],
                "proxy_password": [
                    "bytes",
                    "str",
                    "bool",
                    "int",
                    "List[int]"
                ]
            }
        },
        "GuessProxyAuth._handle_basic_auth_407": {
            "name": "_handle_basic_auth_407",
            "location": 96,
            "return": [
                "Set[str]",
                "List[Match]",
                "List[str]",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "dict",
                    "bytes"
                ],
                "kwargs": []
            }
        },
        "GuessProxyAuth._handle_digest_auth_407": {
            "name": "_handle_digest_auth_407",
            "location": 116,
            "return": [
                "str",
                "int",
                "bool",
                "List[Dict]"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "int",
                    "str",
                    "Callable",
                    "list"
                ],
                "kwargs": []
            }
        },
        "GuessProxyAuth.handle_407": {
            "name": "handle_407",
            "location": 128,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "bool",
                    "dict",
                    "Callable",
                    "Dict[str, str]",
                    "bytes"
                ]
            }
        },
        "GuessProxyAuth.__call__": {
            "name": "__call__",
            "location": 137,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "requests3-master/requests3/toolbelt/auth/handler.py": {
        "AuthHandler.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "strategies": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "AuthHandler.__call__": {
            "name": "__call__",
            "location": 58,
            "return": [
                "List[float]",
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Callable"
                ]
            }
        },
        "AuthHandler.__repr__": {
            "name": "__repr__",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthHandler._make_uniform": {
            "name": "_make_uniform",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthHandler._key_from_url": {
            "name": "_key_from_url",
            "location": 73,
            "return": [
                "str",
                "Dict[str, Any]",
                "List[str]",
                "int",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "url": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "AuthHandler.add_strategy": {
            "name": "add_strategy",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "str",
                    "Match[str]",
                    "Callable"
                ],
                "strategy": [
                    "int"
                ]
            }
        },
        "AuthHandler.get_strategy_for": {
            "name": "get_strategy_for",
            "location": 101,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ]
            }
        },
        "AuthHandler.remove_strategy": {
            "name": "remove_strategy",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "str",
                    "int",
                    "bool",
                    "Callable"
                ]
            }
        },
        "NullAuthStrategy.__repr__": {
            "name": "__repr__",
            "location": 138,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NullAuthStrategy.__call__": {
            "name": "__call__",
            "location": 141,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "T",
                    "float"
                ]
            }
        }
    },
    "requests3-master/requests3/toolbelt/auth/http_proxy_digest.py": {
        "HTTPProxyDigestAuth.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPProxyDigestAuth.stale_rejects": {
            "name": "stale_rejects",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Collection[str]",
                    "Iterable[object]",
                    "bool",
                    "complex",
                    "float",
                    "int"
                ]
            }
        },
        "HTTPProxyDigestAuth.init_per_thread_state": {
            "name": "init_per_thread_state",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPProxyDigestAuth.handle_407": {
            "name": "handle_407",
            "location": 50,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "int",
                    "Deque[int]"
                ]
            }
        },
        "HTTPProxyDigestAuth.__call__": {
            "name": "__call__",
            "location": 96,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        }
    },
    "requests3-master/requests3/toolbelt/auth/_digest_auth_compat.py": {
        "_ThreadingDescriptor.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "prop": [
                    "int",
                    "bool",
                    "str",
                    "Sequence[T]",
                    "List[Tuple[int, float]]"
                ],
                "default": [
                    "int",
                    "bool",
                    "str",
                    "Sequence[T]",
                    "List[Tuple[int, float]]"
                ]
            }
        },
        "_ThreadingDescriptor.__get__": {
            "name": "__get__",
            "location": 10,
            "return": [
                "dict",
                "bytes",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "int"
                ],
                "objtype": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "_ThreadingDescriptor.__set__": {
            "name": "__set__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int",
                    "float",
                    "bytes"
                ],
                "value": [
                    "str",
                    "int",
                    "float",
                    "bytes"
                ]
            }
        }
    },
    "requests3-master/requests3/toolbelt/auth/__init__.py": {},
    "requests3-master/requests3/toolbelt/cookies/forgetful.py": {
        "ForgetfulCookieJar.set_cookie": {
            "name": "set_cookie",
            "location": 6,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "requests3-master/requests3/toolbelt/cookies/__init__.py": {},
    "requests3-master/requests3/toolbelt/downloadutils/stream.py": {
        "_get_filename": {
            "name": "_get_filename",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "content_disposition": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_download_file_path": {
            "name": "get_download_file_path",
            "location": 27,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "response": [
                    "str",
                    "dict",
                    "Optional[Dict[str, bytes]]"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "stream_response_to_file": {
            "name": "stream_response_to_file",
            "location": 70,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "response": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]",
                    "Union[str, List[str]]"
                ],
                "path": [
                    "Optional[Sequence[str]]",
                    "Dict[str, float]"
                ],
                "chunksize": [
                    "Dict[str, int]",
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        }
    },
    "requests3-master/requests3/toolbelt/downloadutils/tee.py": {
        "_tee": {
            "name": "_tee",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "response": [
                    "str",
                    "IO[bytes]",
                    "bytes"
                ],
                "callback": [
                    "int",
                    "str",
                    "bool"
                ],
                "chunksize": [
                    "str",
                    "IO[bytes]",
                    "bytes"
                ],
                "decode_content": [
                    "str",
                    "IO[bytes]",
                    "bytes"
                ]
            }
        },
        "tee": {
            "name": "tee",
            "location": 15,
            "return": [
                "str",
                "Dict[str, dict]",
                "List[str]",
                "Dict[str, Any]",
                "Tuple[str, Optional[int]]"
            ],
            "arguments": {
                "response": [
                    "str",
                    "dict",
                    "Optional[str]"
                ],
                "fileobject": [
                    "bytes",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "chunksize": [
                    "str",
                    "dict",
                    "Optional[str]"
                ],
                "decode_content": [
                    "str",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "tee_to_file": {
            "name": "tee_to_file",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "response": [
                    "Dict[str, str]",
                    "str",
                    "Callable[..., Awaitable[dict]]",
                    "List[str]",
                    "bytes",
                    "Tuple[int, int]"
                ],
                "filename": [
                    "str"
                ],
                "chunksize": [
                    "Dict[str, str]",
                    "str",
                    "Callable[..., Awaitable[dict]]",
                    "List[str]",
                    "bytes",
                    "Tuple[int, int]"
                ],
                "decode_content": [
                    "Dict[str, str]",
                    "str",
                    "Callable[..., Awaitable[dict]]",
                    "List[str]",
                    "bytes",
                    "Tuple[int, int]"
                ]
            }
        },
        "tee_to_bytearray": {
            "name": "tee_to_bytearray",
            "location": 92,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, dict]",
                "List[str]",
                "Dict[str, Any]",
                "Tuple[str, Optional[int]]"
            ],
            "arguments": {
                "response": [
                    "str",
                    "Callable[..., Awaitable[dict]]",
                    "Tuple[int, int]"
                ],
                "bytearr": [
                    "dict",
                    "int"
                ],
                "chunksize": [
                    "str",
                    "Callable[..., Awaitable[dict]]",
                    "Tuple[int, int]"
                ],
                "decode_content": [
                    "str",
                    "Callable[..., Awaitable[dict]]",
                    "Tuple[int, int]"
                ]
            }
        }
    },
    "requests3-master/requests3/toolbelt/downloadutils/__init__.py": {},
    "requests3-master/requests3/toolbelt/multipart/decoder.py": {
        "_split_on_find": {
            "name": "_split_on_find",
            "location": 17,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "content": [
                    "str",
                    "int",
                    "float",
                    "Optional[str]"
                ],
                "bound": [
                    "str",
                    "int",
                    "float",
                    "Optional[str]"
                ]
            }
        },
        "_header_parser": {
            "name": "_header_parser",
            "location": 30,
            "return": [
                "bool",
                "float",
                "Optional[bool]"
            ],
            "arguments": {
                "string": [
                    "str"
                ],
                "encoding": [
                    "str",
                    "list",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "BodyPart.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "content": [
                    "bytes",
                    "Dict[str, Any]",
                    "List[str]",
                    "str"
                ],
                "encoding": [
                    "str",
                    "bool",
                    "bytes",
                    "BinaryIO"
                ]
            }
        },
        "BodyPart.text": {
            "name": "text",
            "location": 66,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipartDecoder.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "Dict[str, str]",
                    "bool",
                    "bytes"
                ],
                "content_type": [
                    "str"
                ],
                "encoding": [
                    "str",
                    "int",
                    "dict",
                    "Union[bool, int, str]",
                    "Set[str]",
                    "bool"
                ]
            }
        },
        "MultipartDecoder._find_boundary": {
            "name": "_find_boundary",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipartDecoder._fix_first_part": {
            "name": "_fix_first_part",
            "location": 124,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Dict[str, Callable[[], Any]]",
                "Union[int, float, complex]",
                "list"
            ],
            "arguments": {
                "part": [
                    "dict",
                    "List[str]"
                ],
                "boundary_marker": [
                    "List[int]",
                    "int",
                    "Union[List[float], List[int]]"
                ]
            }
        },
        "MultipartDecoder._parse_body": {
            "name": "_parse_body",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str"
                ]
            }
        },
        "MultipartDecoder.from_response": {
            "name": "from_response",
            "location": 150,
            "return": [
                "dict",
                "Dict[str, Union[str, Set]]"
            ],
            "arguments": {
                "cls": [
                    "requests.Response",
                    "Dict[str, Any]",
                    "Callable",
                    "bytes"
                ],
                "response": [
                    "dict",
                    "Dict[str, Any]",
                    "requests.Response",
                    "str"
                ],
                "encoding": [
                    "requests.Response",
                    "Dict[str, Any]",
                    "Callable",
                    "bytes"
                ]
            }
        },
        "MultipartDecoder._parse_body.body_part": {
            "name": "body_part",
            "location": 134,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "part": [
                    "str",
                    "bool",
                    "Mapping[str, Any]"
                ]
            }
        },
        "MultipartDecoder._parse_body.test_part": {
            "name": "test_part",
            "location": 138,
            "return": [
                "str"
            ],
            "arguments": {
                "part": [
                    "str",
                    "Sequence[str]"
                ]
            }
        }
    },
    "requests3-master/requests3/toolbelt/multipart/encoder.py": {
        "IDENTITY": {
            "name": "IDENTITY",
            "location": 320,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "monitor": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "encode_with": {
            "name": "encode_with",
            "location": 408,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str",
                    "Optional[bytes]",
                    "Union[str, Iterable[str]]"
                ],
                "encoding": [
                    "str"
                ]
            }
        },
        "readable_data": {
            "name": "readable_data",
            "location": 421,
            "return": [
                "bool",
                "IO[bytes]",
                "BinaryIO",
                "Dict[str, Any]",
                "dict",
                "tuple"
            ],
            "arguments": {
                "data": [
                    "Dict[str, Any]",
                    "bytes",
                    "int",
                    "dict",
                    "bool"
                ],
                "encoding": [
                    "dict",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "total_len": {
            "name": "total_len",
            "location": 429,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "o": [
                    "Collection[int]",
                    "int",
                    "List[Tuple[int, int]]",
                    "List[int]",
                    "str"
                ]
            }
        },
        "reset": {
            "name": "reset",
            "location": 450,
            "return": [
                ""
            ],
            "arguments": {
                "buffer": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "coerce_data": {
            "name": "coerce_data",
            "location": 463,
            "return": [
                "Union[str, IO]",
                "bytes"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Dict[str, Any]",
                    "bytes",
                    "Optional[MutableMapping]",
                    "dict"
                ],
                "encoding": [
                    "bytes",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "to_list": {
            "name": "to_list",
            "location": 478,
            "return": [
                "List[str]",
                "List[List[Any]]",
                "Optional[Union[str, Any]]",
                "str"
            ],
            "arguments": {
                "fields": [
                    "Mapping",
                    "T",
                    "int",
                    "dict",
                    "str"
                ]
            }
        },
        "MultipartEncoder.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fields": [
                    "int",
                    "List[int]",
                    "dict",
                    "str",
                    "frozenset",
                    "AbstractSet[str]"
                ],
                "boundary": [
                    "str"
                ],
                "encoding": [
                    "str",
                    "int"
                ]
            }
        },
        "MultipartEncoder.len": {
            "name": "len",
            "location": 133,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipartEncoder.__repr__": {
            "name": "__repr__",
            "location": 152,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipartEncoder._calculate_length": {
            "name": "_calculate_length",
            "location": 155,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipartEncoder._calculate_load_amount": {
            "name": "_calculate_load_amount",
            "location": 170,
            "return": [
                "str",
                "bytearray",
                "List[int]",
                "int",
                "Union[int, str]"
            ],
            "arguments": {
                "self": [],
                "read_size": [
                    "int",
                    "Optional[int]",
                    "Tuple[int]",
                    "List[float]"
                ]
            }
        },
        "MultipartEncoder._load": {
            "name": "_load",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "str"
                ]
            }
        },
        "MultipartEncoder._next_part": {
            "name": "_next_part",
            "location": 212,
            "return": [
                "int",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipartEncoder._iter_fields": {
            "name": "_iter_fields",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipartEncoder._prepare_parts": {
            "name": "_prepare_parts",
            "location": 243,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipartEncoder._write": {
            "name": "_write",
            "location": 253,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "bytes_to_write": [
                    "list",
                    "Dict[str, bool]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "MultipartEncoder._write_boundary": {
            "name": "_write_boundary",
            "location": 262,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipartEncoder._write_closing_boundary": {
            "name": "_write_closing_boundary",
            "location": 266,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipartEncoder._write_headers": {
            "name": "_write_headers",
            "location": 273,
            "return": [
                "bool",
                "str",
                "List[str]",
                "Mapping[str, Any]",
                "Union[str, Dict]"
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "MultipartEncoder.content_type": {
            "name": "content_type",
            "location": 278,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipartEncoder.to_string": {
            "name": "to_string",
            "location": 281,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipartEncoder.read": {
            "name": "read",
            "location": 301,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "bytearray"
                ]
            }
        },
        "MultipartEncoderMonitor.__init__": {
            "name": "__init__",
            "location": 375,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "encoder": [
                    "str",
                    "int",
                    "Optional[str]",
                    "List[str]",
                    "Tuple[int]"
                ],
                "callback": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "MultipartEncoderMonitor.from_fields": {
            "name": "from_fields",
            "location": 390,
            "return": [
                "str",
                "Callable",
                "T",
                "int"
            ],
            "arguments": {
                "cls": [
                    "Iterable[str]",
                    "List[List[str]]"
                ],
                "fields": [
                    "bool"
                ],
                "boundary": [
                    "bool"
                ],
                "encoding": [
                    "bool"
                ],
                "callback": [
                    "Iterable[str]",
                    "List[List[str]]"
                ]
            }
        },
        "MultipartEncoderMonitor.content_type": {
            "name": "content_type",
            "location": 395,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipartEncoderMonitor.to_string": {
            "name": "to_string",
            "location": 398,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipartEncoderMonitor.read": {
            "name": "read",
            "location": 401,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "List[bytes]"
                ]
            }
        },
        "Part.__init__": {
            "name": "__init__",
            "location": 485,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "int",
                    "Dict[str, str]",
                    "str",
                    "float",
                    "List[int]",
                    "Tuple[str, List[str]]"
                ],
                "body": [
                    "int",
                    "str",
                    "List[str]",
                    "List[int]",
                    "Callable"
                ]
            }
        },
        "Part.from_field": {
            "name": "from_field",
            "location": 492,
            "return": [
                "Dict[str, Tuple[Any, Any]]",
                "Callable[[], None]",
                "dict",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Union[int, str, bool]",
                    "bool"
                ],
                "field": [
                    "str",
                    "Mapping[str, str]",
                    "bool"
                ],
                "encoding": [
                    "str",
                    "Mapping[str, str]",
                    "bool"
                ]
            }
        },
        "Part.bytes_left_to_write": {
            "name": "bytes_left_to_write",
            "location": 498,
            "return": [
                "str",
                "Mapping[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Part.write_to": {
            "name": "write_to",
            "location": 510,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "List[List[int]]",
                    "List[int]",
                    "list",
                    "bool",
                    "bytes",
                    "int"
                ],
                "size": [
                    "int",
                    "str",
                    "float",
                    "List[str]"
                ]
            }
        },
        "CustomBytesIO.__init__": {
            "name": "__init__",
            "location": 535,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "buffer": [
                    "str",
                    "Dict[str, str]",
                    "bool",
                    "IO",
                    "Optional[str]"
                ],
                "encoding": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "CustomBytesIO._get_end": {
            "name": "_get_end",
            "location": 539,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomBytesIO.len": {
            "name": "len",
            "location": 547,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomBytesIO.append": {
            "name": "append",
            "location": 551,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "bytes": [
                    "str",
                    "int",
                    "bool",
                    "float",
                    "bytes"
                ]
            }
        },
        "CustomBytesIO.smart_truncate": {
            "name": "smart_truncate",
            "location": 556,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FileWrapper.__init__": {
            "name": "__init__",
            "location": 569,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file_object": [
                    "str",
                    "Union[str, os.PathLike]"
                ]
            }
        },
        "FileWrapper.len": {
            "name": "len",
            "location": 573,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileWrapper.read": {
            "name": "read",
            "location": 576,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "length": [
                    "Optional[int]",
                    "List[int]",
                    "Optional[str]",
                    "List[str]",
                    "tuple",
                    "List[Dict[str, Any]]",
                    "Set[int]",
                    "List[float]",
                    "list"
                ]
            }
        },
        "FileFromURLWrapper.__init__": {
            "name": "__init__",
            "location": 626,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file_url": [
                    "str",
                    "List[str]",
                    "List[Tuple[str, str, str]]",
                    "Union[str, TextIO]"
                ],
                "session": [
                    "dict",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "FileFromURLWrapper._request_for_file": {
            "name": "_request_for_file",
            "location": 632,
            "return": [
                "dict",
                "Dict[str, Any]",
                "List[str]",
                "List[Dict[str, Any]]",
                "List[Tuple[str, str, int]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "file_url": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "FileFromURLWrapper.read": {
            "name": "read",
            "location": 650,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "chunk_size": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "requests3-master/requests3/toolbelt/multipart/__init__.py": {},
    "requests3-master/requests3/toolbelt/threaded/pool.py": {
        "_identity": {
            "name": "_identity",
            "location": 219,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "session_obj": [
                    "str",
                    "list",
                    "Iterable"
                ]
            }
        },
        "Pool.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "job_queue": [
                    "int",
                    "Optional[str]",
                    "Dict[str, str]",
                    "List[str]",
                    "str",
                    "Dict[str, Dict[str, str]]"
                ],
                "initializer": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Iterable[str]"
                ],
                "auth_generator": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Iterable[str]"
                ],
                "num_processes": [
                    "int",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Dict[str, Any]]",
                    "str"
                ],
                "session": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Iterable[str]"
                ]
            }
        },
        "Pool._new_session": {
            "name": "_new_session",
            "location": 58,
            "return": [
                "bool",
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pool.from_exceptions": {
            "name": "from_exceptions",
            "location": 62,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "str"
                ],
                "exceptions": [
                    "str",
                    "Iterable[Tuple[int, int]]",
                    "Type[T]",
                    "T"
                ]
            }
        },
        "Pool.from_urls": {
            "name": "from_urls",
            "location": 84,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "bool",
                    "Dict[str, Any]",
                    "Optional[Dict]"
                ],
                "urls": [
                    "str",
                    "bool"
                ],
                "request_kwargs": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "Pool.exceptions": {
            "name": "exceptions",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Pool.get_exception": {
            "name": "get_exception",
            "location": 119,
            "return": [
                "Optional[str]",
                "str",
                "Optional[Dict]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pool.get_response": {
            "name": "get_response",
            "location": 131,
            "return": [
                "Optional[bool]",
                "int",
                "Dict[Any, bool]",
                "Optional[dict]",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pool.responses": {
            "name": "responses",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Pool.join_all": {
            "name": "join_all",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadProxy.__getattr__": {
            "name": "__getattr__",
            "location": 163,
            "return": [
                "str",
                "Union[Callable, str]"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "dict",
                    "MutableMapping"
                ]
            }
        },
        "ThreadResponse.__init__": {
            "name": "__init__",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request_kwargs": [
                    "Dict[str, str]"
                ],
                "response": [
                    "str",
                    "bool"
                ]
            }
        },
        "ThreadException.__init__": {
            "name": "__init__",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request_kwargs": [
                    "Dict[str, str]"
                ],
                "exception": [
                    "Tuple[int, int]",
                    "str",
                    "List[str]",
                    "Sequence[str]"
                ]
            }
        }
    },
    "requests3-master/requests3/toolbelt/threaded/thread.py": {
        "SessionThread.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "initialized_session": [
                    "str",
                    "Dict[str, str]",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "bool"
                ],
                "job_queue": [
                    "Mapping[str, Any]",
                    "List[str]",
                    "List[int]",
                    "str",
                    "Tuple[int, int]"
                ],
                "response_queue": [
                    "str",
                    "bool",
                    "Optional[float]"
                ],
                "exception_queue": [
                    "str",
                    "Dict[str, str]",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "bool"
                ]
            }
        },
        "SessionThread._create_worker": {
            "name": "_create_worker",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SessionThread._handle_request": {
            "name": "_handle_request",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "kwargs": []
            }
        },
        "SessionThread._make_request": {
            "name": "_make_request",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SessionThread.is_alive": {
            "name": "is_alive",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SessionThread.join": {
            "name": "join",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "requests3-master/requests3/toolbelt/threaded/__init__.py": {
        "map": {
            "name": "map",
            "location": 66,
            "return": [
                "Optional[str]",
                "List[str]",
                "Dict[str, Any]",
                "\"Cake\""
            ],
            "arguments": {
                "requests": [
                    "dict",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "requests3-master/requests3/toolbelt/utils/deprecated.py": {
        "get_encodings_from_content": {
            "name": "get_encodings_from_content",
            "location": 17,
            "return": [
                "str",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "content": [
                    "str",
                    "dict",
                    "BinaryIO"
                ]
            }
        },
        "get_unicode_from_response": {
            "name": "get_unicode_from_response",
            "location": 39,
            "return": [
                "str",
                "int",
                "Dict[str, str]",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "response": [
                    "requests.Response"
                ]
            }
        }
    },
    "requests3-master/requests3/toolbelt/utils/dump.py": {
        "_get_proxy_information": {
            "name": "_get_proxy_information",
            "location": 21,
            "return": [
                "Optional[int]",
                "bool",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "dict"
            ],
            "arguments": {
                "response": [
                    "requests.Response"
                ]
            }
        },
        "_format_header": {
            "name": "_format_header",
            "location": 33,
            "return": [
                "Dict[str, Any]",
                "str",
                "bytes",
                "Dict[str, Dict[str, Any]]",
                "dict",
                "int"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int",
                    "bool",
                    "Union[bytes, bytearray]",
                    "Optional[str]"
                ],
                "value": [
                    "str",
                    "int",
                    "bool",
                    "Union[bytes, bytearray]",
                    "Optional[str]"
                ]
            }
        },
        "_build_request_path": {
            "name": "_build_request_path",
            "location": 37,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "dict",
                    "bytes",
                    "Dict[str, Any]",
                    "bool"
                ],
                "proxy_info": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "_dump_request_data": {
            "name": "_dump_request_data",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "int",
                    "bytes"
                ],
                "prefixes": [
                    "str",
                    "Optional[str]"
                ],
                "bytearr": [
                    "str",
                    "Dict[str, str]"
                ],
                "proxy_info": [
                    "bytes",
                    "int"
                ]
            }
        },
        "_dump_response_data": {
            "name": "_dump_response_data",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "response": [
                    "requests.Response"
                ],
                "prefixes": [
                    "List[dict]",
                    "Dict[str, Any]",
                    "Tuple[int, float]",
                    "str",
                    "dict"
                ],
                "bytearr": [
                    "dict",
                    "requests.Response",
                    "Sequence",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "_coerce_to_bytes": {
            "name": "_coerce_to_bytes",
            "location": 111,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "dump_response": {
            "name": "dump_response",
            "location": 118,
            "return": [
                "dict",
                "bytes",
                "str",
                "Dict[str, Union[str, bool]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "response": [],
                "request_prefix": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "bool",
                    "Dict[str, Any]"
                ],
                "response_prefix": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "bool",
                    "Dict[str, Any]"
                ],
                "data_array": [
                    "Sequence[int]",
                    "Optional[Tuple[int, int]]",
                    "Optional[bool]",
                    "Optional[Sequence[str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "dump_all": {
            "name": "dump_all",
            "location": 162,
            "return": [
                "str",
                "bytes",
                "Callable",
                "Optional[float]"
            ],
            "arguments": {
                "response": [
                    "List[str]",
                    "dict"
                ],
                "request_prefix": [
                    "str",
                    "Mapping[str, str]",
                    "Optional[MutableMapping]"
                ],
                "response_prefix": [
                    "str",
                    "Mapping[str, str]",
                    "Optional[MutableMapping]"
                ]
            }
        },
        "PrefixSettings.__new__": {
            "name": "__new__",
            "location": 15,
            "return": [
                "Iterable[str]",
                "IO[str]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "requests.Response",
                    "Optional[str]"
                ],
                "request": [
                    "dict"
                ],
                "response": [
                    "dict"
                ]
            }
        }
    },
    "requests3-master/requests3/toolbelt/utils/formdata.py": {
        "urlencode": {
            "name": "urlencode",
            "location": 10,
            "return": [
                "bool",
                "str",
                "List[Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "query": [
                    "list",
                    "List[str]"
                ]
            }
        },
        "_to_kv_list": {
            "name": "_to_kv_list",
            "location": 91,
            "return": [
                "Optional[Union[str, Any]]",
                "bool"
            ],
            "arguments": {
                "dict_or_list": [
                    "List[str]",
                    "T",
                    "Dict[str, List['WantedGallery']]",
                    "Dict[str, Any]",
                    "dict",
                    "int"
                ]
            }
        },
        "_is_two_tuple": {
            "name": "_is_two_tuple",
            "location": 97,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "item": [
                    "list",
                    "List[int]",
                    "int",
                    "T"
                ]
            }
        },
        "_expand_query_values": {
            "name": "_expand_query_values",
            "location": 101,
            "return": [
                "dict",
                "str",
                "int",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "original_query_list": [
                    "int",
                    "str",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        }
    },
    "requests3-master/requests3/toolbelt/utils/user_agent.py": {
        "user_agent": {
            "name": "user_agent",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "version": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "extras": [
                    "str",
                    "Optional[str]",
                    "Callable[[Any], bool]"
                ]
            }
        },
        "_implementation_tuple": {
            "name": "_implementation_tuple",
            "location": 100,
            "return": [
                "MutableMapping[str, Any]",
                "List[Dict[str, Any]]",
                "int",
                "bool",
                "bytes"
            ],
            "arguments": {}
        },
        "_implementation_string": {
            "name": "_implementation_string",
            "location": 135,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "_platform_tuple": {
            "name": "_platform_tuple",
            "location": 139,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "UserAgentBuilder.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "int",
                    "str"
                ],
                "version": [
                    "int",
                    "str"
                ]
            }
        },
        "UserAgentBuilder.build": {
            "name": "build",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserAgentBuilder.include_extras": {
            "name": "include_extras",
            "location": 73,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "extras": [
                    "List[int]",
                    "bytes",
                    "Dict[str, str]",
                    "str",
                    "Iterable[T]",
                    "Union[List[str], List[int]]"
                ]
            }
        },
        "UserAgentBuilder.include_implementation": {
            "name": "include_implementation",
            "location": 85,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserAgentBuilder.include_system": {
            "name": "include_system",
            "location": 94,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "requests3-master/requests3/toolbelt/utils/__init__.py": {},
    "requests3-master/tests/compat.py": {
        "u": {
            "name": "u",
            "location": 5,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "s": [
                    "AnyStr",
                    "Union[bytes, bytearray]",
                    "Iterable[T]",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "requests3-master/tests/conftest.py": {
        "httpbin": {
            "name": "httpbin",
            "location": 5,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "httpbin": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "httpbin.gen": {
            "name": "gen",
            "location": 6,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "requests3-master/tests/test_help.py": {
        "test_system_ssl_py26": {
            "name": "test_system_ssl_py26",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_system_ssl": {
            "name": "test_system_ssl",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_idna_without_version_attribute": {
            "name": "test_idna_without_version_attribute",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_idna_with_version_attribute": {
            "name": "test_idna_with_version_attribute",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "mocker": [
                    "Callable",
                    "str"
                ]
            }
        },
        "VersionedPackage.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "version": [
                    "int",
                    "float",
                    "Sequence[int]",
                    "Union[str, float]"
                ]
            }
        }
    },
    "requests3-master/tests/test_hooks.py": {
        "hook": {
            "name": "hook",
            "location": 7,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "test_hooks": {
            "name": "test_hooks",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "hooks_list": [
                    "float",
                    "Optional[str]",
                    "Dict[str, int]",
                    "int",
                    "bool",
                    "Tuple[int]"
                ],
                "result": [
                    "float",
                    "Optional[str]",
                    "Dict[str, int]",
                    "int",
                    "bool",
                    "Tuple[int]"
                ]
            }
        },
        "test_default_hooks": {
            "name": "test_default_hooks",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "requests3-master/tests/test_requests.py": {
        "test_json_encodes_as_bytes": {
            "name": "test_json_encodes_as_bytes",
            "location": 2255,
            "return": [],
            "arguments": {}
        },
        "test_requests_are_updated_each_time": {
            "name": "test_requests_are_updated_each_time",
            "location": 2267,
            "return": [],
            "arguments": {
                "httpbin": []
            }
        },
        "test_proxy_env_vars_override_default": {
            "name": "test_proxy_env_vars_override_default",
            "location": 2294,
            "return": [],
            "arguments": {
                "var": [],
                "url": [],
                "proxy": []
            }
        },
        "test_data_argument_accepts_tuples": {
            "name": "test_data_argument_accepts_tuples",
            "location": 2315,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "test_prepared_copy": {
            "name": "test_prepared_copy",
            "location": 2350,
            "return": [],
            "arguments": {
                "kwargs": []
            }
        },
        "TestRequests.test_entry_points": {
            "name": "test_entry_points",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_invalid_url": {
            "name": "test_invalid_url",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "exception": [],
                "url": []
            }
        },
        "TestRequests.test_basic_building": {
            "name": "test_basic_building",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_no_content_length": {
            "name": "test_no_content_length",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": [],
                "method": []
            }
        },
        "TestRequests.test_no_body_content_length": {
            "name": "test_no_body_content_length",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": [],
                "method": []
            }
        },
        "TestRequests.test_empty_content_length": {
            "name": "test_empty_content_length",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": [],
                "method": []
            }
        },
        "TestRequests.test_override_content_length": {
            "name": "test_override_content_length",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_path_is_not_double_encoded": {
            "name": "test_path_is_not_double_encoded",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_params_are_added_before_fragment": {
            "name": "test_params_are_added_before_fragment",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "expected": []
            }
        },
        "TestRequests.test_params_original_order_is_preserved_by_default": {
            "name": "test_params_original_order_is_preserved_by_default",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_params_bytes_are_encoded": {
            "name": "test_params_bytes_are_encoded",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_binary_put": {
            "name": "test_binary_put",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_whitespaces_are_removed_from_url": {
            "name": "test_whitespaces_are_removed_from_url",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_mixed_case_scheme_acceptable": {
            "name": "test_mixed_case_scheme_acceptable",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": [],
                "scheme": []
            }
        },
        "TestRequests.test_HTTP_200_OK_GET_ALTERNATIVE": {
            "name": "test_HTTP_200_OK_GET_ALTERNATIVE",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_HTTP_302_ALLOW_REDIRECT_GET": {
            "name": "test_HTTP_302_ALLOW_REDIRECT_GET",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_HTTP_307_ALLOW_REDIRECT_POST": {
            "name": "test_HTTP_307_ALLOW_REDIRECT_POST",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_HTTP_307_ALLOW_REDIRECT_POST_WITH_SEEKABLE": {
            "name": "test_HTTP_307_ALLOW_REDIRECT_POST_WITH_SEEKABLE",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_HTTP_302_TOO_MANY_REDIRECTS": {
            "name": "test_HTTP_302_TOO_MANY_REDIRECTS",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_HTTP_302_TOO_MANY_REDIRECTS_WITH_PARAMS": {
            "name": "test_HTTP_302_TOO_MANY_REDIRECTS_WITH_PARAMS",
            "location": 201,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_http_301_changes_post_to_get": {
            "name": "test_http_301_changes_post_to_get",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_http_301_doesnt_change_head_to_get": {
            "name": "test_http_301_doesnt_change_head_to_get",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_http_302_changes_post_to_get": {
            "name": "test_http_302_changes_post_to_get",
            "location": 229,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_http_302_doesnt_change_head_to_get": {
            "name": "test_http_302_doesnt_change_head_to_get",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_http_303_changes_post_to_get": {
            "name": "test_http_303_changes_post_to_get",
            "location": 243,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_http_303_doesnt_change_head_to_get": {
            "name": "test_http_303_doesnt_change_head_to_get",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_header_and_body_removal_on_redirect": {
            "name": "test_header_and_body_removal_on_redirect",
            "location": 257,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_transfer_enc_removal_on_redirect": {
            "name": "test_transfer_enc_removal_on_redirect",
            "location": 274,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_fragment_maintained_on_redirect": {
            "name": "test_fragment_maintained_on_redirect",
            "location": 298,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_HTTP_200_OK_GET_WITH_PARAMS": {
            "name": "test_HTTP_200_OK_GET_WITH_PARAMS",
            "location": 306,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_HTTP_200_OK_GET_WITH_MIXED_PARAMS": {
            "name": "test_HTTP_200_OK_GET_WITH_MIXED_PARAMS",
            "location": 314,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_set_cookie_on_301": {
            "name": "test_set_cookie_on_301",
            "location": 320,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_cookie_sent_on_redirect": {
            "name": "test_cookie_sent_on_redirect",
            "location": 326,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_cookie_removed_on_expire": {
            "name": "test_cookie_removed_on_expire",
            "location": 332,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_cookie_quote_wrapped": {
            "name": "test_cookie_quote_wrapped",
            "location": 345,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_cookie_persists_via_api": {
            "name": "test_cookie_persists_via_api",
            "location": 350,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_request_cookie_overrides_session_cookie": {
            "name": "test_request_cookie_overrides_session_cookie",
            "location": 356,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_request_cookies_not_persisted": {
            "name": "test_request_cookies_not_persisted",
            "location": 364,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_generic_cookiejar_works": {
            "name": "test_generic_cookiejar_works",
            "location": 370,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_param_cookiejar_works": {
            "name": "test_param_cookiejar_works",
            "location": 381,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_cookielib_cookiejar_on_redirect": {
            "name": "test_cookielib_cookiejar_on_redirect",
            "location": 389,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_requests_in_history_are_not_overridden": {
            "name": "test_requests_in_history_are_not_overridden",
            "location": 421,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_history_is_always_a_list": {
            "name": "test_history_is_always_a_list",
            "location": 427,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_headers_on_session_with_None_are_not_sent": {
            "name": "test_headers_on_session_with_None_are_not_sent",
            "location": 435,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_headers_preserve_order": {
            "name": "test_headers_preserve_order",
            "location": 443,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_user_agent_transfers": {
            "name": "test_user_agent_transfers",
            "location": 464,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": [],
                "key": []
            }
        },
        "TestRequests.test_HTTP_200_OK_HEAD": {
            "name": "test_HTTP_200_OK_HEAD",
            "location": 471,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_HTTP_200_OK_PUT": {
            "name": "test_HTTP_200_OK_PUT",
            "location": 475,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_BASICAUTH_TUPLE_HTTP_200_OK_GET": {
            "name": "test_BASICAUTH_TUPLE_HTTP_200_OK_GET",
            "location": 479,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_set_basicauth": {
            "name": "test_set_basicauth",
            "location": 499,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": [],
                "username": [],
                "password": []
            }
        },
        "TestRequests.test_basicauth_encodes_byte_strings": {
            "name": "test_basicauth_encodes_byte_strings",
            "location": 508,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_errors": {
            "name": "test_errors",
            "location": 527,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "exception": []
            }
        },
        "TestRequests.test_proxy_error": {
            "name": "test_proxy_error",
            "location": 532,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_proxy_error_on_bad_url": {
            "name": "test_proxy_error_on_bad_url",
            "location": 538,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": [],
                "httpbin_secure": []
            }
        },
        "TestRequests.test_basicauth_with_netrc": {
            "name": "test_basicauth_with_netrc",
            "location": 551,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_DIGEST_HTTP_200_OK_GET": {
            "name": "test_DIGEST_HTTP_200_OK_GET",
            "location": 584,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_DIGEST_AUTH_RETURNS_COOKIE": {
            "name": "test_DIGEST_AUTH_RETURNS_COOKIE",
            "location": 602,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_DIGEST_AUTH_SETS_SESSION_COOKIES": {
            "name": "test_DIGEST_AUTH_SETS_SESSION_COOKIES",
            "location": 613,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_DIGEST_STREAM": {
            "name": "test_DIGEST_STREAM",
            "location": 623,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_DIGESTAUTH_WRONG_HTTP_401_GET": {
            "name": "test_DIGESTAUTH_WRONG_HTTP_401_GET",
            "location": 635,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_DIGESTAUTH_QUOTES_QOP_VALUE": {
            "name": "test_DIGESTAUTH_QUOTES_QOP_VALUE",
            "location": 652,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_POSTBIN_GET_POST_FILES": {
            "name": "test_POSTBIN_GET_POST_FILES",
            "location": 661,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_invalid_files_input": {
            "name": "test_invalid_files_input",
            "location": 679,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_POSTBIN_SEEKED_OBJECT_WITH_NO_ITER": {
            "name": "test_POSTBIN_SEEKED_OBJECT_WITH_NO_ITER",
            "location": 688,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_POSTBIN_GET_POST_FILES_WITH_DATA": {
            "name": "test_POSTBIN_GET_POST_FILES_WITH_DATA",
            "location": 730,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_post_with_custom_mapping": {
            "name": "test_post_with_custom_mapping",
            "location": 748,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_conflicting_post_params": {
            "name": "test_conflicting_post_params",
            "location": 774,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_request_ok_set": {
            "name": "test_request_ok_set",
            "location": 780,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_status_raising": {
            "name": "test_status_raising",
            "location": 784,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_decompress_gzip": {
            "name": "test_decompress_gzip",
            "location": 792,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_unicode_get": {
            "name": "test_unicode_get",
            "location": 804,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": [],
                "url": [],
                "params": []
            }
        },
        "TestRequests.test_unicode_header_name": {
            "name": "test_unicode_header_name",
            "location": 807,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_pyopenssl_redirect": {
            "name": "test_pyopenssl_redirect",
            "location": 813,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin_secure": [],
                "httpbin_ca_bundle": []
            }
        },
        "TestRequests.test_invalid_ca_certificate_path": {
            "name": "test_invalid_ca_certificate_path",
            "location": 816,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin_secure": []
            }
        },
        "TestRequests.test_invalid_ssl_certificate_files": {
            "name": "test_invalid_ssl_certificate_files",
            "location": 822,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin_secure": []
            }
        },
        "TestRequests.test_http_with_certificate": {
            "name": "test_http_with_certificate",
            "location": 832,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_https_warnings": {
            "name": "test_https_warnings",
            "location": 836,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin_secure": [],
                "httpbin_ca_bundle": []
            }
        },
        "TestRequests.test_certificate_failure": {
            "name": "test_certificate_failure",
            "location": 857,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin_secure": []
            }
        },
        "TestRequests.test_urlencoded_get_query_multivalued_param": {
            "name": "test_urlencoded_get_query_multivalued_param",
            "location": 866,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_form_encoded_post_query_multivalued_element": {
            "name": "test_form_encoded_post_query_multivalued_element",
            "location": 872,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_different_encodings_dont_break_post": {
            "name": "test_different_encodings_dont_break_post",
            "location": 878,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_unicode_multipart_post": {
            "name": "test_unicode_multipart_post",
            "location": 892,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": [],
                "data": []
            }
        },
        "TestRequests.test_unicode_multipart_post_fieldnames": {
            "name": "test_unicode_multipart_post_fieldnames",
            "location": 898,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_unicode_method_name": {
            "name": "test_unicode_method_name",
            "location": 908,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_unicode_method_name_with_request_object": {
            "name": "test_unicode_method_name_with_request_object",
            "location": 914,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_non_prepared_request_error": {
            "name": "test_non_prepared_request_error",
            "location": 925,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_custom_content_type": {
            "name": "test_custom_content_type",
            "location": 933,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_hook_receives_request_arguments": {
            "name": "test_hook_receives_request_arguments",
            "location": 944,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_session_hooks_are_used_with_no_request_hooks": {
            "name": "test_session_hooks_are_used_with_no_request_hooks",
            "location": 954,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_session_hooks_are_overridden_by_request_hooks": {
            "name": "test_session_hooks_are_overridden_by_request_hooks",
            "location": 963,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_prepared_request_hook": {
            "name": "test_prepared_request_hook",
            "location": 973,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_prepared_from_session": {
            "name": "test_prepared_from_session",
            "location": 987,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_prepare_request_with_bytestring_url": {
            "name": "test_prepare_request_with_bytestring_url",
            "location": 1005,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_request_with_bytestring_host": {
            "name": "test_request_with_bytestring_host",
            "location": 1011,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_links": {
            "name": "test_links",
            "location": 1021,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_cookie_parameters": {
            "name": "test_cookie_parameters",
            "location": 1045,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_cookie_as_dict_keeps_len": {
            "name": "test_cookie_as_dict_keeps_len",
            "location": 1063,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_cookie_as_dict_keeps_items": {
            "name": "test_cookie_as_dict_keeps_items",
            "location": 1083,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_cookie_as_dict_keys": {
            "name": "test_cookie_as_dict_keys",
            "location": 1102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_cookie_as_dict_values": {
            "name": "test_cookie_as_dict_values",
            "location": 1118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_cookie_as_dict_items": {
            "name": "test_cookie_as_dict_items",
            "location": 1134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_cookie_duplicate_names_different_domains": {
            "name": "test_cookie_duplicate_names_different_domains",
            "location": 1150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_cookie_duplicate_names_raises_cookie_conflict_error": {
            "name": "test_cookie_duplicate_names_raises_cookie_conflict_error",
            "location": 1171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_cookie_policy_copy": {
            "name": "test_cookie_policy_copy",
            "location": 1182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_time_elapsed_blank": {
            "name": "test_time_elapsed_blank",
            "location": 1190,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_empty_response_has_content_none": {
            "name": "test_empty_response_has_content_none",
            "location": 1196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_response_is_iterable": {
            "name": "test_response_is_iterable",
            "location": 1200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_response_decode_unicode": {
            "name": "test_response_decode_unicode",
            "location": 1212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_response_reason_unicode": {
            "name": "test_response_reason_unicode",
            "location": 1231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_response_reason_unicode_fallback": {
            "name": "test_response_reason_unicode_fallback",
            "location": 1240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_response_chunk_size_type": {
            "name": "test_response_chunk_size_type",
            "location": 1252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_request_and_response_are_pickleable": {
            "name": "test_request_and_response_are_pickleable",
            "location": 1271,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_prepared_request_is_pickleable": {
            "name": "test_prepared_request_is_pickleable",
            "location": 1283,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_prepared_request_with_file_is_pickleable": {
            "name": "test_prepared_request_with_file_is_pickleable",
            "location": 1297,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_prepared_request_with_hook_is_pickleable": {
            "name": "test_prepared_request_with_hook_is_pickleable",
            "location": 1313,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_cannot_send_unprepared_requests": {
            "name": "test_cannot_send_unprepared_requests",
            "location": 1329,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_http_error": {
            "name": "test_http_error",
            "location": 1334,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_session_pickling": {
            "name": "test_session_pickling",
            "location": 1344,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_fixes_1329": {
            "name": "test_fixes_1329",
            "location": 1354,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_uppercase_scheme_redirect": {
            "name": "test_uppercase_scheme_redirect",
            "location": 1365,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_transport_adapter_ordering": {
            "name": "test_transport_adapter_ordering",
            "location": 1372,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_session_get_adapter_prefix_matching": {
            "name": "test_session_get_adapter_prefix_matching",
            "location": 1410,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_session_get_adapter_prefix_matching_mixed_case": {
            "name": "test_session_get_adapter_prefix_matching_mixed_case",
            "location": 1428,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_session_get_adapter_prefix_matching_is_case_insensitive": {
            "name": "test_session_get_adapter_prefix_matching_is_case_insensitive",
            "location": 1438,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_header_remove_is_case_insensitive": {
            "name": "test_header_remove_is_case_insensitive",
            "location": 1448,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_params_are_merged_case_sensitive": {
            "name": "test_params_are_merged_case_sensitive",
            "location": 1455,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_long_authinfo_in_url": {
            "name": "test_long_authinfo_in_url",
            "location": 1461,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_header_keys_are_native": {
            "name": "test_header_keys_are_native",
            "location": 1470,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_header_validation": {
            "name": "test_header_validation",
            "location": 1480,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_header_value_not_str": {
            "name": "test_header_value_not_str",
            "location": 1489,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_header_no_return_chars": {
            "name": "test_header_no_return_chars",
            "location": 1510,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_header_no_leading_space": {
            "name": "test_header_no_leading_space",
            "location": 1528,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_can_send_objects_with_files": {
            "name": "test_can_send_objects_with_files",
            "location": 1543,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": [],
                "files": []
            }
        },
        "TestRequests.test_can_send_file_object_with_non_string_filename": {
            "name": "test_can_send_file_object_with_non_string_filename",
            "location": 1550,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_autoset_header_values_are_native": {
            "name": "test_autoset_header_values_are_native",
            "location": 1558,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_nonhttp_schemes_dont_check_URLs": {
            "name": "test_nonhttp_schemes_dont_check_URLs",
            "location": 1566,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_auth_is_stripped_on_http_downgrade": {
            "name": "test_auth_is_stripped_on_http_downgrade",
            "location": 1577,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": [],
                "httpbin_secure": [],
                "httpbin_ca_bundle": []
            }
        },
        "TestRequests.test_auth_is_retained_for_redirect_on_host": {
            "name": "test_auth_is_retained_for_redirect_on_host",
            "location": 1587,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_should_strip_auth_host_change": {
            "name": "test_should_strip_auth_host_change",
            "location": 1594,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_should_strip_auth_http_downgrade": {
            "name": "test_should_strip_auth_http_downgrade",
            "location": 1598,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_should_strip_auth_https_upgrade": {
            "name": "test_should_strip_auth_https_upgrade",
            "location": 1602,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_should_strip_auth_port_change": {
            "name": "test_should_strip_auth_port_change",
            "location": 1611,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_should_strip_auth_default_port": {
            "name": "test_should_strip_auth_default_port",
            "location": 1622,
            "return": [],
            "arguments": {
                "self": [],
                "old_uri": [],
                "new_uri": []
            }
        },
        "TestRequests.test_manual_redirect_with_partial_body_read": {
            "name": "test_manual_redirect_with_partial_body_read",
            "location": 1626,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_prepare_body_position_non_stream": {
            "name": "test_prepare_body_position_non_stream",
            "location": 1645,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_rewind_body": {
            "name": "test_rewind_body",
            "location": 1650,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_rewind_partially_read_body": {
            "name": "test_rewind_partially_read_body",
            "location": 1663,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_rewind_body_no_seek": {
            "name": "test_rewind_body_no_seek",
            "location": 1677,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_rewind_body_failed_seek": {
            "name": "test_rewind_body_failed_seek",
            "location": 1697,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_rewind_body_failed_tell": {
            "name": "test_rewind_body_failed_tell",
            "location": 1720,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests._patch_adapter_gzipped_redirect": {
            "name": "_patch_adapter_gzipped_redirect",
            "location": 1740,
            "return": [],
            "arguments": {
                "self": [],
                "session": [],
                "url": []
            }
        },
        "TestRequests.test_redirect_with_wrong_gzipped_header": {
            "name": "test_redirect_with_wrong_gzipped_header",
            "location": 1754,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_basic_auth_str_is_always_native": {
            "name": "test_basic_auth_str_is_always_native",
            "location": 1765,
            "return": [],
            "arguments": {
                "self": [],
                "username": [],
                "password": [],
                "auth_str": []
            }
        },
        "TestRequests.test_requests_history_is_saved": {
            "name": "test_requests_history_is_saved",
            "location": 1770,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_json_param_post_content_type_works": {
            "name": "test_json_param_post_content_type_works",
            "location": 1778,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_json_param_post_should_not_override_data_param": {
            "name": "test_json_param_post_should_not_override_data_param",
            "location": 1787,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_response_iter_lines": {
            "name": "test_response_iter_lines",
            "location": 1794,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_response_context_manager": {
            "name": "test_response_context_manager",
            "location": 1802,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_unconsumed_session_response_closes_connection": {
            "name": "test_unconsumed_session_response_closes_connection",
            "location": 1808,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_response_iter_lines_reentrant": {
            "name": "test_response_iter_lines_reentrant",
            "location": 1818,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_session_close_proxy_clear": {
            "name": "test_session_close_proxy_clear",
            "location": 1826,
            "return": [],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestRequests.test_proxy_auth": {
            "name": "test_proxy_auth",
            "location": 1837,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_proxy_auth_empty_pass": {
            "name": "test_proxy_auth_empty_pass",
            "location": 1842,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_response_json_when_content_is_None": {
            "name": "test_response_json_when_content_is_None",
            "location": 1847,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_response_without_release_conn": {
            "name": "test_response_without_release_conn",
            "location": 1858,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_empty_stream_with_auth_does_not_set_content_length_header": {
            "name": "test_empty_stream_with_auth_does_not_set_content_length_header",
            "location": 1868,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_stream_with_auth_does_not_set_transfer_encoding_header": {
            "name": "test_stream_with_auth_does_not_set_transfer_encoding_header",
            "location": 1880,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_chunked_upload_does_not_set_content_length_header": {
            "name": "test_chunked_upload_does_not_set_content_length_header",
            "location": 1892,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestRequests.test_custom_redirect_mixin": {
            "name": "test_custom_redirect_mixin",
            "location": 1903,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestCaseInsensitiveDict.test_init": {
            "name": "test_init",
            "location": 1955,
            "return": [],
            "arguments": {
                "self": [],
                "cid": []
            }
        },
        "TestCaseInsensitiveDict.test_docstring_example": {
            "name": "test_docstring_example",
            "location": 1960,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInsensitiveDict.test_len": {
            "name": "test_len",
            "location": 1966,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInsensitiveDict.test_getitem": {
            "name": "test_getitem",
            "location": 1971,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInsensitiveDict.test_fixes_649": {
            "name": "test_fixes_649",
            "location": 1976,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInsensitiveDict.test_delitem": {
            "name": "test_delitem",
            "location": 1987,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInsensitiveDict.test_contains": {
            "name": "test_contains",
            "location": 1994,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInsensitiveDict.test_get": {
            "name": "test_get",
            "location": 2003,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInsensitiveDict.test_update": {
            "name": "test_update",
            "location": 2012,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInsensitiveDict.test_update_retains_unchanged": {
            "name": "test_update_retains_unchanged",
            "location": 2023,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInsensitiveDict.test_iter": {
            "name": "test_iter",
            "location": 2028,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInsensitiveDict.test_equality": {
            "name": "test_equality",
            "location": 2033,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInsensitiveDict.test_setdefault": {
            "name": "test_setdefault",
            "location": 2042,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInsensitiveDict.test_lower_items": {
            "name": "test_lower_items",
            "location": 2047,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInsensitiveDict.test_preserve_key_case": {
            "name": "test_preserve_key_case",
            "location": 2056,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInsensitiveDict.test_preserve_last_key_case": {
            "name": "test_preserve_last_key_case",
            "location": 2066,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInsensitiveDict.test_copy": {
            "name": "test_copy",
            "location": 2078,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMorselToCookieExpires.test_expires_valid_str": {
            "name": "test_expires_valid_str",
            "location": 2092,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMorselToCookieExpires.test_expires_invalid_int": {
            "name": "test_expires_invalid_int",
            "location": 2105,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "exception": []
            }
        },
        "TestMorselToCookieExpires.test_expires_none": {
            "name": "test_expires_none",
            "location": 2112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMorselToCookieMaxAge.test_max_age_valid_int": {
            "name": "test_max_age_valid_int",
            "location": 2125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMorselToCookieMaxAge.test_max_age_invalid_str": {
            "name": "test_max_age_invalid_str",
            "location": 2133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTimeout.test_stream_timeout": {
            "name": "test_stream_timeout",
            "location": 2144,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "TestTimeout.test_invalid_timeout": {
            "name": "test_invalid_timeout",
            "location": 2155,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": [],
                "timeout": [],
                "error_text": []
            }
        },
        "TestTimeout.test_none_timeout": {
            "name": "test_none_timeout",
            "location": 2165,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": [],
                "timeout": []
            }
        },
        "TestTimeout.test_read_timeout": {
            "name": "test_read_timeout",
            "location": 2182,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": [],
                "timeout": []
            }
        },
        "TestTimeout.test_connect_timeout": {
            "name": "test_connect_timeout",
            "location": 2194,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "TestTimeout.test_total_timeout_connect": {
            "name": "test_total_timeout_connect",
            "location": 2207,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "TestTimeout.test_encoded_methods": {
            "name": "test_encoded_methods",
            "location": 2214,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": []
            }
        },
        "RedirectSession.__init__": {
            "name": "__init__",
            "location": 2224,
            "return": [],
            "arguments": {
                "self": [],
                "order_of_redirects": []
            }
        },
        "RedirectSession.send": {
            "name": "send",
            "location": 2231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedirectSession.build_response": {
            "name": "build_response",
            "location": 2235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedirectSession._build_raw": {
            "name": "_build_raw",
            "location": 2249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPreparingURLs.test_preparing_url": {
            "name": "test_preparing_url",
            "location": 2399,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "expected": []
            }
        },
        "TestPreparingURLs.test_preparing_bad_url": {
            "name": "test_preparing_bad_url",
            "location": 2422,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "TestPreparingURLs.test_redirecting_to_bad_url": {
            "name": "test_redirecting_to_bad_url",
            "location": 2433,
            "return": [],
            "arguments": {
                "self": [],
                "httpbin": [],
                "url": [],
                "exception": []
            }
        },
        "TestPreparingURLs.test_url_mutation": {
            "name": "test_url_mutation",
            "location": 2462,
            "return": [],
            "arguments": {
                "self": [],
                "input": [],
                "expected": []
            }
        },
        "TestPreparingURLs.test_parameters_for_nonstandard_schemes": {
            "name": "test_parameters_for_nonstandard_schemes",
            "location": 2498,
            "return": [],
            "arguments": {
                "self": [],
                "input": [],
                "params": [],
                "expected": []
            }
        },
        "TestRequests.test_hook_receives_request_arguments.hook": {
            "name": "hook",
            "location": 945,
            "return": [],
            "arguments": {
                "resp": []
            }
        },
        "TestRequests.test_prepared_request_hook.hook": {
            "name": "hook",
            "location": 974,
            "return": [],
            "arguments": {
                "resp": []
            }
        },
        "TestRequests.test_response_is_iterable.read_mock": {
            "name": "read_mock",
            "location": 1205,
            "return": [],
            "arguments": {
                "amt": [],
                "decode_content": []
            }
        },
        "TestRequests._patch_adapter_gzipped_redirect.build_response": {
            "name": "build_response",
            "location": 1745,
            "return": [],
            "arguments": {}
        },
        "TestPreparingURLs.test_preparing_url.normalize_percent_encode": {
            "name": "normalize_percent_encode",
            "location": 2401,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "TestRequests.test_basicauth_with_netrc.get_netrc_auth_mock": {
            "name": "get_netrc_auth_mock",
            "location": 559,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "TestRequests.test_POSTBIN_SEEKED_OBJECT_WITH_NO_ITER.TestStream.__init__": {
            "name": "__init__",
            "location": 691,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "TestRequests.test_POSTBIN_SEEKED_OBJECT_WITH_NO_ITER.TestStream.__len__": {
            "name": "__len__",
            "location": 696,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_POSTBIN_SEEKED_OBJECT_WITH_NO_ITER.TestStream.read": {
            "name": "read",
            "location": 699,
            "return": [],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "TestRequests.test_POSTBIN_SEEKED_OBJECT_WITH_NO_ITER.TestStream.tell": {
            "name": "tell",
            "location": 708,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_POSTBIN_SEEKED_OBJECT_WITH_NO_ITER.TestStream.seek": {
            "name": "seek",
            "location": 711,
            "return": [],
            "arguments": {
                "self": [],
                "offset": [],
                "where": []
            }
        },
        "TestRequests.test_post_with_custom_mapping.CustomMapping.__init__": {
            "name": "__init__",
            "location": 750,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_post_with_custom_mapping.CustomMapping.__delitem__": {
            "name": "__delitem__",
            "location": 753,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "TestRequests.test_post_with_custom_mapping.CustomMapping.__getitem__": {
            "name": "__getitem__",
            "location": 756,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "TestRequests.test_post_with_custom_mapping.CustomMapping.__setitem__": {
            "name": "__setitem__",
            "location": 759,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "TestRequests.test_post_with_custom_mapping.CustomMapping.__iter__": {
            "name": "__iter__",
            "location": 762,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_post_with_custom_mapping.CustomMapping.__len__": {
            "name": "__len__",
            "location": 765,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_prepared_from_session.DummyAuth.__call__": {
            "name": "__call__",
            "location": 989,
            "return": [],
            "arguments": {
                "self": [],
                "r": []
            }
        },
        "TestRequests.test_rewind_body_no_seek.BadFileObj.__init__": {
            "name": "__init__",
            "location": 1679,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "TestRequests.test_rewind_body_no_seek.BadFileObj.tell": {
            "name": "tell",
            "location": 1682,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_rewind_body_no_seek.BadFileObj.__iter__": {
            "name": "__iter__",
            "location": 1685,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_rewind_body_failed_seek.BadFileObj.__init__": {
            "name": "__init__",
            "location": 1699,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "TestRequests.test_rewind_body_failed_seek.BadFileObj.tell": {
            "name": "tell",
            "location": 1702,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_rewind_body_failed_seek.BadFileObj.seek": {
            "name": "seek",
            "location": 1705,
            "return": [],
            "arguments": {
                "self": [],
                "pos": [],
                "whence": []
            }
        },
        "TestRequests.test_rewind_body_failed_seek.BadFileObj.__iter__": {
            "name": "__iter__",
            "location": 1708,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_rewind_body_failed_tell.BadFileObj.__init__": {
            "name": "__init__",
            "location": 1722,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "TestRequests.test_rewind_body_failed_tell.BadFileObj.tell": {
            "name": "tell",
            "location": 1725,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_rewind_body_failed_tell.BadFileObj.__iter__": {
            "name": "__iter__",
            "location": 1728,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequests.test_custom_redirect_mixin.CustomRedirectSession.get_redirect_target": {
            "name": "get_redirect_target",
            "location": 1926,
            "return": [],
            "arguments": {
                "self": [],
                "resp": []
            }
        }
    },
    "requests3-master/tests/test_structures.py": {
        "TestCaseInsensitiveDict.setup": {
            "name": "setup",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInsensitiveDict.test_list": {
            "name": "test_list",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInsensitiveDict.test_getitem": {
            "name": "test_getitem",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Dict[str, Any]",
                    "str",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "T"
                ]
            }
        },
        "TestCaseInsensitiveDict.test_delitem": {
            "name": "test_delitem",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "TestCaseInsensitiveDict.test_lower_items": {
            "name": "test_lower_items",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInsensitiveDict.test_repr": {
            "name": "test_repr",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInsensitiveDict.test_copy": {
            "name": "test_copy",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCaseInsensitiveDict.test_instance_equality": {
            "name": "test_instance_equality",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Callable"
                ],
                "result": [
                    "Callable"
                ]
            }
        },
        "TestHTTPHeaderDictCompatibility.setup": {
            "name": "setup",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHTTPHeaderDict.setup": {
            "name": "setup",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHTTPHeaderDict.test_item_access": {
            "name": "test_item_access",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHTTPHeaderDict.test_equality": {
            "name": "test_equality",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHTTPHeaderDict.test_lower_items": {
            "name": "test_lower_items",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHTTPHeaderDict.test_copy": {
            "name": "test_copy",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHTTPHeaderDict.test_get_and_set_list": {
            "name": "test_get_and_set_list",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHTTPHeaderDict.test_add": {
            "name": "test_add",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHTTPHeaderDict.test_extend": {
            "name": "test_extend",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "Union[str, Iterable[str]]",
                    "Optional[dict]"
                ],
                "as_arg": [
                    "int",
                    "bool"
                ],
                "animal_arg_is_ordered": [
                    "int",
                    "bool"
                ]
            }
        },
        "TestHTTPHeaderDict.test_extend_type_checking": {
            "name": "test_extend_type_checking",
            "location": 208,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHTTPHeaderDict.test_repr": {
            "name": "test_repr",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLookupDict.setup": {
            "name": "setup",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLookupDict.test_repr": {
            "name": "test_repr",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLookupDict.test_getitem": {
            "name": "test_getitem",
            "location": 244,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "bool",
                    "Hashable"
                ],
                "value": [
                    "str",
                    "bytes",
                    "bool",
                    "Hashable"
                ]
            }
        },
        "TestLookupDict.test_get": {
            "name": "test_get",
            "location": 248,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Tuple[str]",
                    "Dict[str, int]"
                ],
                "value": [
                    "str",
                    "Tuple[str]",
                    "Dict[str, int]"
                ]
            }
        }
    },
    "requests3-master/tests/test_utils.py": {
        "test_get_auth_from_url": {
            "name": "test_get_auth_from_url",
            "location": 392,
            "return": [],
            "arguments": {
                "url": [],
                "auth": []
            }
        },
        "test_requote_uri_with_unquoted_percents": {
            "name": "test_requote_uri_with_unquoted_percents",
            "location": 411,
            "return": [],
            "arguments": {
                "uri": [],
                "expected": []
            }
        },
        "test_unquote_unreserved": {
            "name": "test_unquote_unreserved",
            "location": 425,
            "return": [],
            "arguments": {
                "uri": [],
                "expected": []
            }
        },
        "test_dotted_netmask": {
            "name": "test_dotted_netmask",
            "location": 432,
            "return": [],
            "arguments": {
                "mask": [],
                "expected": []
            }
        },
        "test_select_proxies": {
            "name": "test_select_proxies",
            "location": 472,
            "return": [],
            "arguments": {
                "url": [],
                "expected": [],
                "proxies": []
            }
        },
        "test_parse_dict_header": {
            "name": "test_parse_dict_header",
            "location": 484,
            "return": [],
            "arguments": {
                "value": [],
                "expected": []
            }
        },
        "test_get_encoding_from_headers": {
            "name": "test_get_encoding_from_headers",
            "location": 499,
            "return": [],
            "arguments": {
                "value": [],
                "expected": []
            }
        },
        "test_iter_slices": {
            "name": "test_iter_slices",
            "location": 507,
            "return": [],
            "arguments": {
                "value": [],
                "length": []
            }
        },
        "test_parse_header_links": {
            "name": "test_parse_header_links",
            "location": 534,
            "return": [],
            "arguments": {
                "value": [],
                "expected": []
            }
        },
        "test_prepend_scheme_if_needed": {
            "name": "test_prepend_scheme_if_needed",
            "location": 545,
            "return": [],
            "arguments": {
                "value": [],
                "expected": []
            }
        },
        "test_urldefragauth": {
            "name": "test_urldefragauth",
            "location": 560,
            "return": [],
            "arguments": {
                "url": [],
                "expected": []
            }
        },
        "test_should_bypass_proxies": {
            "name": "test_should_bypass_proxies",
            "location": 577,
            "return": [],
            "arguments": {
                "url": [],
                "expected": [],
                "monkeypatch": []
            }
        },
        "test_add_dict_to_cookiejar": {
            "name": "test_add_dict_to_cookiejar",
            "location": 593,
            "return": [],
            "arguments": {
                "cookiejar": []
            }
        },
        "test_unicode_is_ascii": {
            "name": "test_unicode_is_ascii",
            "location": 606,
            "return": [],
            "arguments": {
                "value": [],
                "expected": []
            }
        },
        "test_should_bypass_proxies_no_proxy": {
            "name": "test_should_bypass_proxies_no_proxy",
            "location": 623,
            "return": [],
            "arguments": {
                "url": [],
                "expected": [],
                "monkeypatch": []
            }
        },
        "test_should_bypass_proxies_win_registry": {
            "name": "test_should_bypass_proxies_win_registry",
            "location": 648,
            "return": [],
            "arguments": {
                "url": [],
                "expected": [],
                "override": [],
                "monkeypatch": []
            }
        },
        "test_set_environ": {
            "name": "test_set_environ",
            "location": 694,
            "return": [],
            "arguments": {
                "env_name": [],
                "value": []
            }
        },
        "test_set_environ_raises_exception": {
            "name": "test_set_environ_raises_exception",
            "location": 702,
            "return": [],
            "arguments": {}
        },
        "TestSuperLen.test_io_streams": {
            "name": "test_io_streams",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "stream": [],
                "value": []
            }
        },
        "TestSuperLen.test_super_len_correctly_calculates_len_of_partially_read_file": {
            "name": "test_super_len_correctly_calculates_len_of_partially_read_file",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSuperLen.test_super_len_handles_files_raising_weird_errors_in_tell": {
            "name": "test_super_len_handles_files_raising_weird_errors_in_tell",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "error": []
            }
        },
        "TestSuperLen.test_super_len_tell_ioerror": {
            "name": "test_super_len_tell_ioerror",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "error": []
            }
        },
        "TestSuperLen.test_string": {
            "name": "test_string",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSuperLen.test_file": {
            "name": "test_file",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "tmpdir": [],
                "mode": [],
                "warnings_num": [],
                "recwarn": []
            }
        },
        "TestSuperLen.test_super_len_with__len__": {
            "name": "test_super_len_with__len__",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSuperLen.test_super_len_with_no__len__": {
            "name": "test_super_len_with_no__len__",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSuperLen.test_super_len_with_tell": {
            "name": "test_super_len_with_tell",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSuperLen.test_super_len_with_fileno": {
            "name": "test_super_len_with_fileno",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSuperLen.test_super_len_with_no_matches": {
            "name": "test_super_len_with_no_matches",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestToKeyValList.test_valid": {
            "name": "test_valid",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "expected": []
            }
        },
        "TestToKeyValList.test_invalid": {
            "name": "test_invalid",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnquoteHeaderValue.test_valid": {
            "name": "test_valid",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "expected": []
            }
        },
        "TestUnquoteHeaderValue.test_is_filename": {
            "name": "test_is_filename",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetEnvironProxies.no_proxy": {
            "name": "no_proxy",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "monkeypatch": []
            }
        },
        "TestGetEnvironProxies.test_bypass": {
            "name": "test_bypass",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "TestGetEnvironProxies.test_not_bypass": {
            "name": "test_not_bypass",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "TestGetEnvironProxies.test_bypass_no_proxy_keyword": {
            "name": "test_bypass_no_proxy_keyword",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "TestGetEnvironProxies.test_not_bypass_no_proxy_keyword": {
            "name": "test_not_bypass_no_proxy_keyword",
            "location": 211,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "monkeypatch": []
            }
        },
        "TestIsIPv4Address.test_valid": {
            "name": "test_valid",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIsIPv4Address.test_invalid": {
            "name": "test_invalid",
            "location": 224,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "TestIsValidCIDR.test_valid": {
            "name": "test_valid",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIsValidCIDR.test_invalid": {
            "name": "test_invalid",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "TestAddressInNetwork.test_valid": {
            "name": "test_valid",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAddressInNetwork.test_invalid": {
            "name": "test_invalid",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGuessFilename.test_guess_filename_invalid": {
            "name": "test_guess_filename_invalid",
            "location": 256,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "TestGuessFilename.test_guess_filename_valid": {
            "name": "test_guess_filename_valid",
            "location": 263,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "expected_type": []
            }
        },
        "TestExtractZippedPaths.test_unzipped_paths_unchanged": {
            "name": "test_unzipped_paths_unchanged",
            "location": 274,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "TestExtractZippedPaths.test_zipped_paths_extracted": {
            "name": "test_zipped_paths_extracted",
            "location": 277,
            "return": [],
            "arguments": {
                "self": [],
                "tmpdir": []
            }
        },
        "TestContentEncodingDetection.test_none": {
            "name": "test_none",
            "location": 292,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContentEncodingDetection.test_pragmas": {
            "name": "test_pragmas",
            "location": 309,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "TestContentEncodingDetection.test_precedence": {
            "name": "test_precedence",
            "location": 314,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGuessJSONUTF.test_encoded": {
            "name": "test_encoded",
            "location": 337,
            "return": [],
            "arguments": {
                "self": [],
                "encoding": []
            }
        },
        "TestGuessJSONUTF.test_bad_utf_like_encoding": {
            "name": "test_bad_utf_like_encoding",
            "location": 341,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGuessJSONUTF.test_guess_by_bom": {
            "name": "test_guess_by_bom",
            "location": 353,
            "return": [],
            "arguments": {
                "self": [],
                "encoding": [],
                "expected": []
            }
        },
        "test_should_bypass_proxies_win_registry.OpenKey": {
            "name": "OpenKey",
            "location": 664,
            "return": [],
            "arguments": {
                "key": [],
                "subkey": []
            }
        },
        "test_should_bypass_proxies_win_registry.QueryValueEx": {
            "name": "QueryValueEx",
            "location": 667,
            "return": [],
            "arguments": {
                "key": [],
                "value_name": []
            }
        },
        "test_should_bypass_proxies_win_registry.RegHandle.Close": {
            "name": "Close",
            "location": 658,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSuperLen.test_super_len_handles_files_raising_weird_errors_in_tell.BoomFile.__len__": {
            "name": "__len__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSuperLen.test_super_len_handles_files_raising_weird_errors_in_tell.BoomFile.tell": {
            "name": "tell",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSuperLen.test_super_len_tell_ioerror.NoLenBoomFile.tell": {
            "name": "tell",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSuperLen.test_super_len_tell_ioerror.NoLenBoomFile.seek": {
            "name": "seek",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "offset": [],
                "whence": []
            }
        },
        "TestSuperLen.test_super_len_with_no__len__.LenFile.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "requests3-master/tests/utils.py": {
        "override_environ": {
            "name": "override_environ",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "requests3-master/tests/__init__.py": {},
    "requests3-master/tests/testserver/server.py": {
        "consume_socket_content": {
            "name": "consume_socket_content",
            "location": 7,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "sock": [
                    "List[str]",
                    "int",
                    "bool",
                    "str",
                    "List[dict]"
                ],
                "timeout": [
                    "int",
                    "tuple",
                    "Optional[Set[str]]",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "Server.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "str",
                    "float",
                    "bytes"
                ],
                "host": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]"
                ],
                "port": [
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]"
                ],
                "requests_to_handle": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ],
                "wait_to_close_event": [
                    "float",
                    "Dict[str, Any]"
                ]
            }
        },
        "Server.text_response_server": {
            "name": "text_response_server",
            "location": 46,
            "return": [
                "float",
                "str",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Sequence[int]",
                    "List[str]",
                    "Optional[List[str]]",
                    "Optional[bool]",
                    "str"
                ],
                "text": [
                    "bool",
                    "Sequence[int]",
                    "List[str]",
                    "Optional[List[str]]",
                    "Optional[bool]",
                    "str"
                ],
                "request_timeout": [
                    "bool",
                    "Sequence[int]",
                    "List[str]",
                    "Optional[List[str]]",
                    "Optional[bool]",
                    "str"
                ]
            }
        },
        "Server.basic_response_server": {
            "name": "basic_response_server",
            "location": 58,
            "return": [
                "Mapping[str, Any]",
                "Dict[str, bool]",
                "Exception",
                "Optional[Dict[str, str]]",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "Optional[Exception]",
                    "dict"
                ]
            }
        },
        "Server.run": {
            "name": "run",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Server._create_socket_and_bind": {
            "name": "_create_socket_and_bind",
            "location": 77,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server._close_server_sock_ignore_errors": {
            "name": "_close_server_sock_ignore_errors",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Server._handle_requests": {
            "name": "_handle_requests",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Server._accept_connection": {
            "name": "_accept_connection",
            "location": 98,
            "return": [
                "Optional[str]",
                "str",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server.__enter__": {
            "name": "__enter__",
            "location": 111,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server.__exit__": {
            "name": "__exit__",
            "location": 116,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "Type[Exception]",
                    "Type[BaseException]",
                    "BaseException"
                ],
                "exc_value": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "traceback": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        },
        "Server.text_response_server.text_response_handler": {
            "name": "text_response_handler",
            "location": 48,
            "return": [
                "str",
                "Dict[Any, Tuple[Any, Any]]",
                "int",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "sock": [
                    "List[List[str]]",
                    "dict",
                    "list"
                ]
            }
        }
    },
    "requests3-master/tests/testserver/__init__.py": {}
}
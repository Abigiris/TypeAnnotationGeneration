{
    "resttest-master/setup.py": {},
    "resttest-master/resttest/main.py": {
        "main": {
            "name": "main",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "RestTest.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RestTest.get_port": {
            "name": "get_port",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RestTest.run": {
            "name": "run",
            "location": 23,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "str",
                    "bool",
                    "bytes",
                    "type",
                    "Optional[float]"
                ],
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "RestTest._run_test_case": {
            "name": "_run_test_case",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "str",
                    "bytes"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "RestTest._run_all": {
            "name": "_run_all",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "str",
                    "bytes",
                    "Dict[str, Any]",
                    "list"
                ]
            }
        }
    },
    "resttest-master/resttest/models.py": {
        "Env.fromdict": {
            "name": "fromdict",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict"
                ],
                "port": [
                    "str",
                    "Optional[Dict]",
                    "dict"
                ],
                "raw": [
                    "str",
                    "bytes",
                    "IO",
                    "MutableMapping",
                    "IO[bytes]"
                ]
            }
        },
        "Request.fromdict": {
            "name": "fromdict",
            "location": 26,
            "return": [
                "bytes",
                "dict",
                "Dict[str, Any]",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "Optional[Union[Any, str]]",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "raw": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "Optional[Union[Any, str]]",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Response.fromdict": {
            "name": "fromdict",
            "location": 41,
            "return": [
                "str",
                "\"Task\"",
                "bool",
                "Tuple[int, int]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Set[str]",
                    "int",
                    "Dict[str, Any]"
                ],
                "raw": [
                    "str",
                    "Set[str]",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "EnvUpdate.fromdict": {
            "name": "fromdict",
            "location": 51,
            "return": [
                "Dict[str, float]",
                "int",
                "float",
                "Dict[str, Dict[str, float]]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Iterable[bytes]"
                ],
                "raw": [
                    "Iterable[bytes]"
                ]
            }
        },
        "TestCase.fromdict": {
            "name": "fromdict",
            "location": 63,
            "return": [
                "str",
                "List[str]",
                "Sequence",
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "raw": [
                    "dict",
                    "str",
                    "bool",
                    "Dict[str, Union[str, bool]]"
                ]
            }
        }
    },
    "resttest-master/resttest/__init__.py": {},
    "resttest-master/resttest/service/random_port.py": {
        "get_random_port": {
            "name": "get_random_port",
            "location": 6,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "_find_unused_port": {
            "name": "_find_unused_port",
            "location": 19,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {}
        }
    },
    "resttest-master/resttest/service/reader.py": {
        "Reader.read_env": {
            "name": "read_env",
            "location": 18,
            "return": [
                "resttest.models.Env"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "int",
                    "bool",
                    "Iterable[dict]",
                    "dict"
                ]
            }
        },
        "Reader.read_test_case": {
            "name": "read_test_case",
            "location": 22,
            "return": [
                "resttest.models.TestCase"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "Reader.read_test_cases": {
            "name": "read_test_cases",
            "location": 26,
            "return": [
                "typing.List[resttest.models.TestCase]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileReader.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_dir": [
                    "str"
                ]
            }
        },
        "FileReader.read_env": {
            "name": "read_env",
            "location": 34,
            "return": [
                "Dict[str, str]",
                "List[str]",
                "str",
                "Mapping[str, str]",
                "\"jinja2.Environment\""
            ],
            "arguments": {
                "self": [],
                "port": [
                    "int",
                    "str",
                    "float",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "FileReader.read_test_case": {
            "name": "read_test_case",
            "location": 38,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "FileReader.read_test_cases": {
            "name": "read_test_cases",
            "location": 43,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileReader._read_file": {
            "name": "_read_file",
            "location": 47,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Iterable[int]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "FileReader._append_suffix": {
            "name": "_append_suffix",
            "location": 52,
            "return": [
                "bool",
                "str",
                "Type",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "FileReader._get_test_case_names": {
            "name": "_get_test_case_names",
            "location": 57,
            "return": [
                "str",
                "bool",
                "docker.models.containers.Container",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileReader._sort_filenames": {
            "name": "_sort_filenames",
            "location": 65,
            "return": [
                "List[str]",
                "bool",
                "Optional[str]",
                "List[Tuple[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "filenames": [
                    "str"
                ]
            }
        },
        "FileReader._number_filenames": {
            "name": "_number_filenames",
            "location": 70,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Dict[str, Any]]",
                "Dict[str, str]",
                "Callable[[Dict], None]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "filenames": [
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "resttest-master/resttest/service/rpc_service.py": {
        "make_request": {
            "name": "make_request",
            "location": 14,
            "return": [
                "Optional[str]",
                "str",
                "flask.Response"
            ],
            "arguments": {
                "req": [
                    "resttesmodels.Request"
                ],
                "env": [
                    "resttesmodels.Env",
                    "Callable",
                    "list"
                ]
            }
        },
        "_make_path": {
            "name": "_make_path",
            "location": 20,
            "return": [
                "str",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "req": [
                    "resttesmodels.Request",
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "MutableMapping[str, Any]",
                    "bool"
                ],
                "env": [
                    "resttesmodels.Env",
                    "Dict[str, List[str]]",
                    "Mapping[str, str]",
                    "Dict[str, Any]",
                    "dict",
                    "Optional[Dict[str, int]]",
                    "bool"
                ]
            }
        },
        "_make_request_without_body": {
            "name": "_make_request_without_body",
            "location": 28,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "Tuple[Dict, int]"
            ],
            "arguments": {
                "req": [
                    "dict",
                    "projects.models.Project",
                    "flask.Response",
                    "Optional[str]"
                ],
                "env": [
                    "bool",
                    "List[str]",
                    "str"
                ]
            }
        },
        "_make_request_with_body": {
            "name": "_make_request_with_body",
            "location": 35,
            "return": [
                "dict",
                "Optional[str]",
                "Dict[str, Any]",
                "bool",
                "str"
            ],
            "arguments": {
                "req": [
                    "dict",
                    "Dict[str, Any]",
                    "resttesmodels.Env",
                    "Exception"
                ],
                "env": [
                    "resttesmodels.Env",
                    "bool"
                ]
            }
        },
        "_make_headers": {
            "name": "_make_headers",
            "location": 45,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Union[str, int]]",
                "dict",
                "Dict[str, Dict[str, str]]",
                "List[dict]",
                "games.models.Game",
                "Dict[str, Type]",
                "str"
            ],
            "arguments": {
                "env": [
                    "resttesmodels.Request",
                    "Dict[str, Any]",
                    "zerver.models.Client"
                ],
                "req": [
                    "resttesmodels.Request",
                    "Dict[str, Any]",
                    "resttesmodels.Env",
                    "zerver.models.Client",
                    "dict",
                    "MutableMapping"
                ]
            }
        },
        "_map_response": {
            "name": "_map_response",
            "location": 52,
            "return": [
                "str",
                "bool",
                "core.models.User",
                "Dict[str, str]",
                "core_lib.core.models.Event",
                "Optional[str]"
            ],
            "arguments": {
                "resp": [
                    "requests.Response",
                    "List[int]",
                    "models.User",
                    "bytes",
                    "Sequence",
                    "int",
                    "Dict[int, int]"
                ]
            }
        }
    },
    "resttest-master/resttest/service/template_util.py": {
        "resolve_dict": {
            "name": "resolve_dict",
            "location": 10,
            "return": [
                "str",
                "Mapping[str, Any]",
                "int",
                "bytes"
            ],
            "arguments": {
                "env": [
                    "resttesmodels.Env",
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ],
                "body": [
                    "dict",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, Any]",
                    "Dict[str, int]",
                    "Dict[str, str]"
                ]
            }
        },
        "resolve_value": {
            "name": "resolve_value",
            "location": 22,
            "return": [
                "int",
                "str",
                "dict",
                "Optional[int]"
            ],
            "arguments": {
                "env": [
                    "resttesmodels.Env",
                    "str",
                    "Optional[\"Node\"]",
                    "dict",
                    "Optional[int]"
                ],
                "val": [
                    "str"
                ]
            }
        }
    },
    "resttest-master/resttest/service/test_service.py": {
        "run_tests": {
            "name": "run_tests",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "test_cases": [
                    "List[resttesmodels.TestCase]",
                    "str",
                    "bool",
                    "List[str]"
                ],
                "env": [
                    "resttesmodels.Env",
                    "Optional[List[str]]",
                    "AbstractSet[\"TemplateObjectVariable\"]",
                    "AbstractSet[\"TemplateActionTypeVariable\"]"
                ]
            }
        },
        "_run_test": {
            "name": "_run_test",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "number": [
                    "int",
                    "bool",
                    "Dict[str, float]",
                    "Optional[str]",
                    "str"
                ],
                "test_case": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "Optional[List[Any]]",
                    "dict",
                    "List[Tuple[str, str]]"
                ],
                "env": [
                    "aiohttp.web.Response",
                    "str"
                ]
            }
        },
        "_assert_response": {
            "name": "_assert_response",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "test_case": [
                    "bytes",
                    "Dict[str, Any]",
                    "int"
                ],
                "actual": [
                    "int",
                    "core.models.MyUser",
                    "bool"
                ],
                "env": [
                    "resttesmodels.Env",
                    "bool",
                    "str"
                ]
            }
        },
        "_assert_body": {
            "name": "_assert_body",
            "location": 40,
            "return": [
                "str",
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]"
            ],
            "arguments": {
                "test_case": [],
                "actual": [
                    "resttesmodels.Response",
                    "bool",
                    "models.Channel",
                    "dict",
                    "str"
                ],
                "env": [
                    "dict",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "_assert_body_content": {
            "name": "_assert_body_content",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "test_case": [
                    "resttesmodels.TestCase",
                    "Dict[str, Any]",
                    "Optional[Dict[str, str]]",
                    "bytes"
                ],
                "expected": [
                    "Dict[str, Any]",
                    "bool",
                    "str",
                    "Dict[str, List[str]]"
                ],
                "actual": [
                    "dict",
                    "Dict[str, Any]",
                    "Optional[Dict]",
                    "Mapping[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "_update_env": {
            "name": "_update_env",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "response_body": [
                    "Dict[str, str]",
                    "resttesmodels.Env",
                    "str",
                    "bytes",
                    "dict"
                ],
                "updates": [
                    "Literal",
                    "Optional[Dict[str, Any]]",
                    "list",
                    "int",
                    "str"
                ],
                "env": [
                    "Dict[str, str]",
                    "resttesmodels.Env",
                    "str",
                    "bytes",
                    "dict"
                ]
            }
        },
        "_fail": {
            "name": "_fail",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "test_case": [
                    "str",
                    "resttesmodels.TestCase",
                    "dict",
                    "Union[str, int, float]",
                    "Optional[Dict]"
                ],
                "msg": [
                    "str",
                    "resttesmodels.TestCase",
                    "dict",
                    "Union[str, int, float]",
                    "Optional[Dict]"
                ]
            }
        },
        "_log_test_time": {
            "name": "_log_test_time",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "start_time": [
                    "int",
                    "List[float]",
                    "float"
                ]
            }
        }
    },
    "resttest-master/resttest/service/__init__.py": {}
}
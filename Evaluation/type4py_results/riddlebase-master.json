{
    "riddlebase-master/manage.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    },
    "riddlebase-master/base/apps.py": {},
    "riddlebase-master/base/views.py": {
        "index": {
            "name": "index",
            "location": 6,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "riddlebase-master/base/__init__.py": {},
    "riddlebase-master/base/migrations/__init__.py": {},
    "riddlebase-master/riddlebase/asgi.py": {},
    "riddlebase-master/riddlebase/settings.py": {},
    "riddlebase-master/riddlebase/urls.py": {},
    "riddlebase-master/riddlebase/wsgi.py": {},
    "riddlebase-master/riddlebase/__init__.py": {},
    "riddlebase-master/riddles/admin.py": {},
    "riddlebase-master/riddles/apps.py": {},
    "riddlebase-master/riddles/models.py": {
        "RiddleCategory.clean": {
            "name": "clean",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RiddleCategory.__str__": {
            "name": "__str__",
            "location": 18,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RiddleType.__str__": {
            "name": "__str__",
            "location": 27,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Riddle.previous_pk": {
            "name": "previous_pk",
            "location": 41,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Riddle.next_pk": {
            "name": "next_pk",
            "location": 45,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Riddle.clean": {
            "name": "clean",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Riddle.get_or_create_state": {
            "name": "get_or_create_state",
            "location": 57,
            "return": [
                "bool",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "core.models.User",
                    "django.contrib.auth.models.User",
                    "dict",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "Riddle.__str__": {
            "name": "__str__",
            "location": 69,
            "return": [
                "str",
                "teams.models.Team"
            ],
            "arguments": {
                "self": []
            }
        },
        "RiddleState.__str__": {
            "name": "__str__",
            "location": 82,
            "return": [
                "str",
                "teams.models.Team"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "riddlebase-master/riddles/urls.py": {},
    "riddlebase-master/riddles/util.py": {
        "is_square": {
            "name": "is_square",
            "location": 1,
            "return": [
                "bool"
            ],
            "arguments": {
                "num": [
                    "int"
                ]
            }
        }
    },
    "riddlebase-master/riddles/views.py": {
        "index": {
            "name": "index",
            "location": 12,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "Callable"
                ]
            }
        },
        "category": {
            "name": "category",
            "location": 16,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ],
                "pk": [
                    "int",
                    "django.http.HttpRequest",
                    "zam_repondeur.models.Team"
                ]
            }
        },
        "riddle_type": {
            "name": "riddle_type",
            "location": 23,
            "return": [
                "bool",
                "keras.models.Model",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ],
                "pk": [
                    "grouper.models.user.User",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "riddle": {
            "name": "riddle",
            "location": 30,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ],
                "pk": [
                    "django.http.HttpRequest",
                    "str",
                    "zam_repondeur.models.Amendement"
                ]
            }
        },
        "check": {
            "name": "check",
            "location": 56,
            "return": [
                "Optional[str]",
                "Dict[str, Any]",
                "str",
                "Dict[str, dict]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "Callable"
                ],
                "pk": [
                    "int",
                    "django.http.HttpRequest",
                    "str",
                    "zam_repondeur.models.Team"
                ]
            }
        }
    },
    "riddlebase-master/riddles/__init__.py": {},
    "riddlebase-master/riddles/migrations/0001_initial.py": {},
    "riddlebase-master/riddles/migrations/__init__.py": {},
    "riddlebase-master/riddles/templatetags/templatetags.py": {
        "index": {
            "name": "index",
            "location": 7,
            "return": [
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "my_list": [
                    "int",
                    "list",
                    "float",
                    "Callable[[int], str]"
                ],
                "i": [
                    "int",
                    "list",
                    "float",
                    "Callable[[int], str]"
                ]
            }
        }
    },
    "riddlebase-master/riddles/templatetags/__init__.py": {},
    "riddlebase-master/riddles/tests/test_util.py": {
        "TestIsSquare.test_0_is_square": {
            "name": "test_0_is_square",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIsSquare.test_1_is_square": {
            "name": "test_1_is_square",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIsSquare.test_4_is_square": {
            "name": "test_4_is_square",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIsSquare.test_9_is_square": {
            "name": "test_9_is_square",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIsSquare.test_81_is_square": {
            "name": "test_81_is_square",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIsSquare.test_2_is_not_square": {
            "name": "test_2_is_not_square",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIsSquare.test_500_is_not_square": {
            "name": "test_500_is_not_square",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIsSquare.test_neg0_is_square": {
            "name": "test_neg0_is_square",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIsSquare.test_neg1_is_not_square": {
            "name": "test_neg1_is_not_square",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIsSquare.test_neg2_is_not_square": {
            "name": "test_neg2_is_not_square",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIsSquare.test_neg81_is_not_square": {
            "name": "test_neg81_is_not_square",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIsSquare.test_neg500_is_not_square": {
            "name": "test_neg500_is_not_square",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDummy.test_dummy": {
            "name": "test_dummy",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "riddlebase-master/riddles/tests/__init__.py": {},
    "riddlebase-master/slither/admin.py": {},
    "riddlebase-master/slither/apps.py": {},
    "riddlebase-master/slither/models.py": {
        "Slither.check_solution": {
            "name": "check_solution",
            "location": 11,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "pattern": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "solution": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "riddlebase-master/slither/urls.py": {},
    "riddlebase-master/slither/views.py": {
        "view_index": {
            "name": "view_index",
            "location": 9,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": [
                    "Dict[str, Any]",
                    "django.http.HttpRequest",
                    "deeplearning.ml4pl.models.log_database.Database",
                    "List[int]"
                ]
            }
        },
        "view_riddle": {
            "name": "view_riddle",
            "location": 15,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "int"
                ],
                "riddle_id": [
                    "int",
                    "str"
                ]
            }
        },
        "rest_check": {
            "name": "rest_check",
            "location": 28,
            "return": [
                "Optional[str]",
                "Dict[str, Any]",
                "str",
                "Dict[str, dict]"
            ],
            "arguments": {
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest"
                ],
                "riddle_id": [
                    "int",
                    "str"
                ]
            }
        },
        "view_creator": {
            "name": "view_creator",
            "location": 40,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "Callable"
                ]
            }
        },
        "rest_create": {
            "name": "rest_create",
            "location": 45,
            "return": [
                "dict",
                "Dict[str, Any]",
                "str",
                "zerver.models.Realm"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "riddlebase-master/slither/__init__.py": {},
    "riddlebase-master/slither/migrations/0001_initial.py": {},
    "riddlebase-master/slither/migrations/__init__.py": {},
    "riddlebase-master/slither/tests/__init__.py": {},
    "riddlebase-master/sudoku/admin.py": {},
    "riddlebase-master/sudoku/apps.py": {},
    "riddlebase-master/sudoku/models.py": {
        "Sudoku.cells": {
            "name": "cells",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sudoku.size": {
            "name": "size",
            "location": 19,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sudoku.solution_as_list": {
            "name": "solution_as_list",
            "location": 23,
            "return": [
                "List[Dict]",
                "List[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sudoku.pattern_as_list": {
            "name": "pattern_as_list",
            "location": 27,
            "return": [
                "List[Dict]",
                "List[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sudoku.solution_as_two_dimensional_array": {
            "name": "solution_as_two_dimensional_array",
            "location": 31,
            "return": [
                "tuple",
                "Tuple[str, str, str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sudoku.check_solution": {
            "name": "check_solution",
            "location": 40,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "pattern": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "solution": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Sudoku.__str__": {
            "name": "__str__",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "riddlebase-master/sudoku/urls.py": {},
    "riddlebase-master/sudoku/views.py": {
        "view_index": {
            "name": "view_index",
            "location": 10,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": [
                    "django.db.models.QuerySet",
                    "django.db.models.query.QuerySet",
                    "grouper.models.base.session.Session",
                    "grouper.models.service_accounServiceAccount",
                    "django.http.HttpRequest",
                    "grouper.models.user.User"
                ]
            }
        },
        "view_riddle": {
            "name": "view_riddle",
            "location": 16,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "str"
                ],
                "sudoku_number": [
                    "int",
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "view_creator": {
            "name": "view_creator",
            "location": 29,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "Callable"
                ]
            }
        },
        "rest_check": {
            "name": "rest_check",
            "location": 35,
            "return": [
                "Optional[str]",
                "Dict[str, Any]",
                "str",
                "Dict[str, dict]"
            ],
            "arguments": {
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest"
                ],
                "riddle_id": [
                    "int",
                    "str"
                ]
            }
        },
        "rest_create": {
            "name": "rest_create",
            "location": 48,
            "return": [
                "dict",
                "Dict[str, Any]",
                "zerver.models.Realm"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "riddlebase-master/sudoku/__init__.py": {},
    "riddlebase-master/sudoku/migrations/0001_initial.py": {},
    "riddlebase-master/sudoku/migrations/__init__.py": {},
    "riddlebase-master/sudoku/tests/__init__.py": {},
    "riddlebase-master/tests/test_riddlebase.py": {
        "test_version": {
            "name": "test_version",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "riddlebase-master/tests/__init__.py": {}
}
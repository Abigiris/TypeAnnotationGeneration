{
    "riemann-keys-master/setup.py": {},
    "riemann-keys-master/riemann_keys/base58.py": {
        "encode": {
            "name": "encode",
            "location": 32,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "data": [
                    "str",
                    "int",
                    "Union[str, type]",
                    "Tuple[int, int]"
                ],
                "checksum": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "decode": {
            "name": "decode",
            "location": 42,
            "return": [
                "raiden.utils.signer.Signer",
                "Dict[str, Any]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "s": [
                    "int",
                    "Callable[[], Any]",
                    "str"
                ],
                "checksum": [
                    "str",
                    "int",
                    "Union[str, Sequence[str]]",
                    "List[Dict[str, Any]]",
                    "bool",
                    "Iterable[list]"
                ]
            }
        },
        "encode_with_checksum": {
            "name": "encode_with_checksum",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "data": [
                    "str",
                    "int",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "decode_with_checksum": {
            "name": "decode_with_checksum",
            "location": 67,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bool",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "has_checksum": {
            "name": "has_checksum",
            "location": 75,
            "return": [
                "bool"
            ],
            "arguments": {
                "base58": [
                    "str",
                    "int"
                ]
            }
        },
        "from_long": {
            "name": "from_long",
            "location": 84,
            "return": [
                "str",
                "bytearray",
                "int",
                "Union[bytes, bytearray]",
                "Optional[Union[str, Any]]",
                "bytes"
            ],
            "arguments": {
                "v": [
                    "Tuple[int, int]",
                    "float",
                    "list",
                    "Optional[str]"
                ],
                "prefix": [
                    "list",
                    "List[str]",
                    "List[Tuple[bool, str]]",
                    "List[List[Any]]"
                ],
                "base": [
                    "Tuple[int, int]",
                    "float",
                    "list",
                    "Optional[str]"
                ],
                "charset": [
                    "Optional[str]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "to_long": {
            "name": "to_long",
            "location": 104,
            "return": [
                "str",
                "int",
                "Iterable[str]",
                "Tuple[str]"
            ],
            "arguments": {
                "base": [
                    "str",
                    "List[str]"
                ],
                "lookup_f": [
                    "str",
                    "List[str]"
                ],
                "s": [
                    "str",
                    "Optional[str]",
                    "Tuple[int, int]"
                ]
            }
        }
    },
    "riemann-keys-master/riemann_keys/bip39.py": {
        "mnemonic_from_entropy": {
            "name": "mnemonic_from_entropy",
            "location": 8,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "entropy": [
                    "int",
                    "list"
                ]
            }
        },
        "segments_to_mnemonic": {
            "name": "segments_to_mnemonic",
            "location": 44,
            "return": [
                "List[Dict]",
                "List[int]",
                "float",
                "List[List[Any]]",
                "list",
                "List[float]",
                "Tuple[int, int, int]",
                "Union[List[float], List[int]]",
                "Tuple[int]"
            ],
            "arguments": {
                "segments": [
                    "float",
                    "int",
                    "List['Photo']",
                    "Union[int, List[int]]",
                    "Iterable[Any]"
                ]
            }
        },
        "root_seed_from_mnemonic": {
            "name": "root_seed_from_mnemonic",
            "location": 56,
            "return": [
                "Dict[str, Any]",
                "int",
                "str"
            ],
            "arguments": {
                "mnemonic": [
                    "str",
                    "Callable",
                    "int"
                ],
                "salt": [
                    "int",
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "network": [
                    "str",
                    "Dict[str, Any]",
                    "Callable",
                    "Optional",
                    "int"
                ]
            }
        },
        "mnemonic_to_bytes": {
            "name": "mnemonic_to_bytes",
            "location": 75,
            "return": [
                "bool"
            ],
            "arguments": {
                "mnemonic": [
                    "str",
                    "bytes"
                ]
            }
        },
        "mnemonic_lookup": {
            "name": "mnemonic_lookup",
            "location": 118,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "value": [
                    "Union[int, bool]",
                    "List[str]",
                    "raiden.utils.BlockSpecification",
                    "int"
                ],
                "value_index": [
                    "str",
                    "int",
                    "bool",
                    "Union[str, int]"
                ],
                "lookup_index": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "import_word_list": {
            "name": "import_word_list",
            "location": 153,
            "return": [
                "List[int]",
                "List[str]",
                "bytes",
                "bool",
                "Sequence[int]",
                "str"
            ],
            "arguments": {}
        },
        "validate_mnemonic": {
            "name": "validate_mnemonic",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "mnemonic": [
                    "int",
                    "bool"
                ]
            }
        },
        "checksum": {
            "name": "checksum",
            "location": 187,
            "return": [
                "str"
            ],
            "arguments": {
                "entropy": [
                    "str",
                    "int"
                ]
            }
        },
        "validate_entropy": {
            "name": "validate_entropy",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "entropy": [
                    "bytes",
                    "str",
                    "IO[str]"
                ]
            }
        }
    },
    "riemann-keys-master/riemann_keys/hdkey.py": {
        "Immutable.__setattr__": {
            "name": "__setattr__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "Immutable._make_immutable": {
            "name": "_make_immutable",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HDKey.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "key_dict": [],
                "_error_on_call": []
            }
        },
        "HDKey.__repr__": {
            "name": "__repr__",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HDKey._child_from_xpub": {
            "name": "_child_from_xpub",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "child_xpub": []
            }
        },
        "HDKey._child_from_xpriv": {
            "name": "_child_from_xpriv",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "child_xpriv": []
            }
        },
        "HDKey._make_child_xpub": {
            "name": "_make_child_xpub",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "child_pubkey": [],
                "index": [],
                "chain_code": []
            }
        },
        "HDKey._make_child_xpriv": {
            "name": "_make_child_xpriv",
            "location": 218,
            "return": [],
            "arguments": {
                "self": [],
                "child_privkey": [],
                "index": [],
                "chain_code": []
            }
        },
        "HDKey._xpriv_to_xpub": {
            "name": "_xpriv_to_xpub",
            "location": 243,
            "return": [],
            "arguments": {
                "xpriv": []
            }
        },
        "HDKey.from_xpub": {
            "name": "from_xpub",
            "location": 274,
            "return": [],
            "arguments": {
                "HDKey": [],
                "xpub": [],
                "path": []
            }
        },
        "HDKey.from_xpriv": {
            "name": "from_xpriv",
            "location": 314,
            "return": [],
            "arguments": {
                "HDKey": [],
                "xpriv": [],
                "path": []
            }
        },
        "HDKey.from_pubkey": {
            "name": "from_pubkey",
            "location": 351,
            "return": [],
            "arguments": {
                "HDKey": [],
                "pubkey": [],
                "network": []
            }
        },
        "HDKey.from_privkey": {
            "name": "from_privkey",
            "location": 381,
            "return": [],
            "arguments": {
                "HDKey": [],
                "privkey": [],
                "network": []
            }
        },
        "HDKey.from_root_seed": {
            "name": "from_root_seed",
            "location": 409,
            "return": [],
            "arguments": {
                "HDKey": [],
                "root_seed": [],
                "network": []
            }
        },
        "HDKey._make_master_xpriv": {
            "name": "_make_master_xpriv",
            "location": 453,
            "return": [],
            "arguments": {
                "privkey": [],
                "chain_code": [],
                "network": []
            }
        },
        "HDKey.from_entropy": {
            "name": "from_entropy",
            "location": 479,
            "return": [],
            "arguments": {
                "HDKey": [],
                "entropy": [],
                "salt": [],
                "network": []
            }
        },
        "HDKey.from_mnemonic": {
            "name": "from_mnemonic",
            "location": 500,
            "return": [],
            "arguments": {
                "HDKey": [],
                "mnemonic": [],
                "salt": [],
                "network": []
            }
        },
        "HDKey._parse_derivation": {
            "name": "_parse_derivation",
            "location": 519,
            "return": [],
            "arguments": {
                "derivation_path": []
            }
        },
        "HDKey.derive_path": {
            "name": "derive_path",
            "location": 546,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "HDKey._normalize_index": {
            "name": "_normalize_index",
            "location": 575,
            "return": [],
            "arguments": {
                "idx": []
            }
        },
        "HDKey.derive_child": {
            "name": "derive_child",
            "location": 592,
            "return": [],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "HDKey.sign": {
            "name": "sign",
            "location": 660,
            "return": [],
            "arguments": {
                "self": [],
                "msg": [],
                "hash_func": []
            }
        },
        "HDKey.sign_hash": {
            "name": "sign_hash",
            "location": 679,
            "return": [],
            "arguments": {
                "self": [],
                "digest": []
            }
        },
        "HDKey.verify": {
            "name": "verify",
            "location": 693,
            "return": [],
            "arguments": {
                "self": [],
                "sig": [],
                "msg": [],
                "hash_func": []
            }
        },
        "HDKey.verify_hash": {
            "name": "verify_hash",
            "location": 713,
            "return": [],
            "arguments": {
                "self": [],
                "sig": [],
                "digest": [],
                "warn": []
            }
        }
    },
    "riemann-keys-master/riemann_keys/utils.py": {
        "rmd160": {
            "name": "rmd160",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "msg": [
                    "bytes",
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "sha256": {
            "name": "sha256",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "hash160": {
            "name": "hash160",
            "location": 55,
            "return": [
                "Callable",
                "bytes",
                "T",
                "int",
                "IO"
            ],
            "arguments": {
                "msg": [
                    "bytes",
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "hash256": {
            "name": "hash256",
            "location": 64,
            "return": [
                "Callable",
                "bytes",
                "T",
                "int",
                "IO"
            ],
            "arguments": {
                "msg": [
                    "bytes",
                    "Callable",
                    "T",
                    "int",
                    "IO"
                ]
            }
        }
    },
    "riemann-keys-master/riemann_keys/__init__.py": {},
    "riemann-keys-master/riemann_keys/data/english.py": {},
    "riemann-keys-master/riemann_keys/data/__init__.py": {},
    "riemann-keys-master/riemann_keys/examples/example.py": {},
    "riemann-keys-master/riemann_keys/tests/bip39_test_vectors.py": {},
    "riemann-keys-master/riemann_keys/tests/test_bip39.py": {
        "TestBip39.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBip39.test_mnemonic_to_bytes": {
            "name": "test_mnemonic_to_bytes",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBip39.test_import_word_list": {
            "name": "test_import_word_list",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBip39.test_validate_mnemonic": {
            "name": "test_validate_mnemonic",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBip39.test_segments_to_mnemoinc": {
            "name": "test_segments_to_mnemoinc",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBip39.test_root_seed_from_mnemonic": {
            "name": "test_root_seed_from_mnemonic",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBip39.test_mnemonic_lookup": {
            "name": "test_mnemonic_lookup",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBip39.test_checksum": {
            "name": "test_checksum",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBip39.test_mnemonic_from_entropy": {
            "name": "test_mnemonic_from_entropy",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "riemann-keys-master/riemann_keys/tests/test_hdkey.py": {
        "TestImmutable.test_set_attr": {
            "name": "test_set_attr",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHDKey.setUp": {
            "name": "setUp",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHDKey.test_init_error": {
            "name": "test_init_error",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHDKey.test_from_root_seed": {
            "name": "test_from_root_seed",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHDKey.test_from_entropy": {
            "name": "test_from_entropy",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHDKey.test_from_mnemonic": {
            "name": "test_from_mnemonic",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHDKey.test_public_key_generation": {
            "name": "test_public_key_generation",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHDKey.test_private_key_generation": {
            "name": "test_private_key_generation",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHDKey.test_xpub_generation": {
            "name": "test_xpub_generation",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHDKey.test_xpriv_generation": {
            "name": "test_xpriv_generation",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHDKey.test_fingerprint_generation": {
            "name": "test_fingerprint_generation",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHDKey.test_node_path_derivation": {
            "name": "test_node_path_derivation",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHDKey.test_public_keys_when_derived": {
            "name": "test_public_keys_when_derived",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHDKey.test_private_keys_when_derived": {
            "name": "test_private_keys_when_derived",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHDKey.test_xpub_when_derived": {
            "name": "test_xpub_when_derived",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHDKey.test_xpriv_when_derived": {
            "name": "test_xpriv_when_derived",
            "location": 259,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHDKey.test_fingerprint_when_derived": {
            "name": "test_fingerprint_when_derived",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHDKey.test_public_derivation": {
            "name": "test_public_derivation",
            "location": 285,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHDKey.test_public_derivation_with_path": {
            "name": "test_public_derivation_with_path",
            "location": 296,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHDKey.test_child_from_xpub": {
            "name": "test_child_from_xpub",
            "location": 308,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHDKey.test_child_from_xpriv": {
            "name": "test_child_from_xpriv",
            "location": 313,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHDKey.test_from_pubkey": {
            "name": "test_from_pubkey",
            "location": 321,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHDKey.test_parse_derivation_error": {
            "name": "test_parse_derivation_error",
            "location": 326,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHDKey.test_derive_path_unknown": {
            "name": "test_derive_path_unknown",
            "location": 331,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHDKey.test_derive_path_not_descendent": {
            "name": "test_derive_path_not_descendent",
            "location": 337,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHDKey.test_normalize_index": {
            "name": "test_normalize_index",
            "location": 344,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHDKey.test_derive_child_hardened_no_privkey": {
            "name": "test_derive_child_hardened_no_privkey",
            "location": 358,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHDKey.test_derive_child_hardened_no_chaincode": {
            "name": "test_derive_child_hardened_no_chaincode",
            "location": 365,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHDKey.test_derive_child_invalid_result": {
            "name": "test_derive_child_invalid_result",
            "location": 373,
            "return": [],
            "arguments": {
                "self": [],
                "mock_tweak": []
            }
        },
        "TestHDKey.test_sign_errors": {
            "name": "test_sign_errors",
            "location": 381,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "riemann-keys-master/riemann_keys/tests/__init__.py": {}
}
{
    "riemann-ledger-master/setup.py": {},
    "riemann-ledger-master/ledger/blue.py": {
        "make_apdu": {
            "name": "make_apdu",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "command": [
                    "int",
                    "bytes",
                    "dict",
                    "str"
                ],
                "p1": [
                    "int",
                    "bytes",
                    "dict",
                    "str"
                ],
                "p2": [
                    "int",
                    "bytes",
                    "dict",
                    "str"
                ],
                "data": [
                    "int",
                    "bytes",
                    "dict",
                    "str"
                ],
                "response_len": [
                    "int",
                    "bytes",
                    "dict",
                    "str"
                ]
            }
        },
        "derivation_path_to_apdu_data": {
            "name": "derivation_path_to_apdu_data",
            "location": 81,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[TextIO]"
                ]
            }
        },
        "Ledger.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "debug": [
                    "bool",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "int"
                ]
            }
        },
        "Ledger.open": {
            "name": "open",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Ledger.close": {
            "name": "close",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ledger.__enter__": {
            "name": "__enter__",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ledger.__exit__": {
            "name": "__exit__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ledger.exchange_sync": {
            "name": "exchange_sync",
            "location": 49,
            "return": [
                "metrics_backend.utils.Address",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "riemann-ledger-master/ledger/btc.py": {
        "_parse_public_key_response": {
            "name": "_parse_public_key_response",
            "location": 15,
            "return": [],
            "arguments": {
                "response": []
            }
        },
        "_transaction_start_packet": {
            "name": "_transaction_start_packet",
            "location": 84,
            "return": [],
            "arguments": {
                "chunk": []
            }
        },
        "_transaction_continue_packet": {
            "name": "_transaction_continue_packet",
            "location": 93,
            "return": [],
            "arguments": {
                "chunk": []
            }
        },
        "_output_continue_packet": {
            "name": "_output_continue_packet",
            "location": 102,
            "return": [],
            "arguments": {
                "chunk": []
            }
        },
        "_output_final_packet": {
            "name": "_output_final_packet",
            "location": 109,
            "return": [],
            "arguments": {
                "chunk": []
            }
        },
        "_packetize_version_and_vin_length": {
            "name": "_packetize_version_and_vin_length",
            "location": 117,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "_packetize_input": {
            "name": "_packetize_input",
            "location": 124,
            "return": [],
            "arguments": {
                "tx_in": [],
                "prevout_info": []
            }
        },
        "_packetize_input_for_signing": {
            "name": "_packetize_input_for_signing",
            "location": 140,
            "return": [],
            "arguments": {
                "tx_in": [],
                "prevout_info": []
            }
        },
        "_packetize_vout": {
            "name": "_packetize_vout",
            "location": 167,
            "return": [],
            "arguments": {
                "tx_outs": []
            }
        },
        "_transaction_final_packet": {
            "name": "_transaction_final_packet",
            "location": 190,
            "return": [],
            "arguments": {
                "lock_time": [],
                "path": [],
                "sighash_type": []
            }
        },
        "_signable": {
            "name": "_signable",
            "location": 254,
            "return": [],
            "arguments": {
                "key": [],
                "prevout_info": []
            }
        },
        "_unmask_sig": {
            "name": "_unmask_sig",
            "location": 282,
            "return": [],
            "arguments": {
                "sig": []
            }
        }
    },
    "riemann-ledger-master/ledger/eth.py": {
        "_parse_public_key_response": {
            "name": "_parse_public_key_response",
            "location": 10,
            "return": [
                "bytes",
                "list",
                "dict"
            ],
            "arguments": {
                "response": []
            }
        },
        "_packetize_data": {
            "name": "_packetize_data",
            "location": 55,
            "return": [
                "str",
                "int",
                "Generator",
                "bool"
            ],
            "arguments": {
                "derivation_data": [
                    "str",
                    "bytes",
                    "List[int]",
                    "Dict[str, Any]"
                ],
                "ser_tx": [
                    "str",
                    "dict",
                    "List[int]",
                    "bytes"
                ]
            }
        }
    },
    "riemann-ledger-master/ledger/ledger_types.py": {},
    "riemann-ledger-master/ledger/utils.py": {
        "asyncify": {
            "name": "asyncify",
            "location": 25,
            "return": [
                "bool",
                "Optional[bool]",
                "Optional[str]",
                "Optional[Sequence[str]]",
                "Optional[Callable]"
            ],
            "arguments": {
                "function": []
            }
        },
        "parse_derivation": {
            "name": "parse_derivation",
            "location": 34,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "derivation_path": [
                    "str",
                    "bytes",
                    "Iterable[str]"
                ]
            }
        },
        "compress_pubkey": {
            "name": "compress_pubkey",
            "location": 63,
            "return": [
                "Union[bytes, bytearray]",
                "str",
                "bytes",
                "int",
                "bool"
            ],
            "arguments": {
                "pubkey": [
                    "int",
                    "bool"
                ]
            }
        },
        "make_child_xpub": {
            "name": "make_child_xpub",
            "location": 75,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "derivation": [
                    "float",
                    "str",
                    "Optional[List[str]]",
                    "type"
                ],
                "parent_or_none": [
                    "Optional[float]",
                    "Optional[Callable[[bool], None]]",
                    "Optional[int]"
                ],
                "child": [
                    "asyncio.AbstractEventLoop",
                    "bool"
                ],
                "mainnet": [
                    "bool",
                    "str",
                    "type",
                    "Dict[str, Dict]"
                ]
            }
        }
    },
    "riemann-ledger-master/ledger/__init__.py": {}
}
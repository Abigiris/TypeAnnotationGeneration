{
    "rinokeras-master/conftest.py": {},
    "rinokeras-master/setup.py": {},
    "rinokeras-master/docs/source/conf.py": {},
    "rinokeras-master/examples/rl.py": {},
    "rinokeras-master/examples/supervised.py": {
        "SupervisedExperiment.build_model": {
            "name": "build_model",
            "location": 10,
            "return": [
                "bool",
                "int",
                "Dict[str, Any]",
                "Dict[str, Tuple[int, int]]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "tensorflow.data.Dataset",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "SupervisedExperiment.loss_function": {
            "name": "loss_function",
            "location": 14,
            "return": [
                "Sequence[Any]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "bytes",
                    "str",
                    "float"
                ],
                "outputs": [
                    "str",
                    "Optional[List]",
                    "bytes"
                ]
            }
        }
    },
    "rinokeras-master/research/qanet_squad.py": {
        "loss": {
            "name": "loss",
            "location": 44,
            "return": [
                "List[int]",
                "multinedb.models.workspace.Workspace",
                "Dict[str, numpy.ndarray]",
                "base_site.nubank.models.NubankCards"
            ],
            "arguments": {
                "logits": [
                    "Union[zerver.models.UserProfile, zilencer.models.RemoteZulipServer]",
                    "int",
                    "str",
                    "Callable",
                    "list",
                    "bytes"
                ],
                "labels_st": [
                    "Union[zerver.models.UserProfile, zilencer.models.RemoteZulipServer]",
                    "int",
                    "str",
                    "Callable",
                    "list",
                    "bytes"
                ],
                "labels_et": [
                    "Union[zerver.models.UserProfile, zilencer.models.RemoteZulipServer]",
                    "int",
                    "str",
                    "Callable",
                    "list",
                    "bytes"
                ]
            }
        },
        "compute_accuracy": {
            "name": "compute_accuracy",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "logits": [
                    "int",
                    "tuple",
                    "List[List[str]]"
                ],
                "labels_st": [
                    "List[List[str]]",
                    "allennlp.models.semantic_parsing.wikitables.wikitables_decoder_state.WikiTablesDecoderState",
                    "numpy.ndarray",
                    "tuple",
                    "numpy.array"
                ],
                "labels_et": [
                    "List[List[str]]",
                    "allennlp.models.semantic_parsing.wikitables.wikitables_decoder_state.WikiTablesDecoderState",
                    "numpy.ndarray",
                    "tuple",
                    "numpy.array"
                ]
            }
        },
        "PredictionNet.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word_embed_matrix": [
                    "int",
                    "Tuple[int, int, int]"
                ],
                "char_embed_matrix": [
                    "int",
                    "Tuple[int, int, int]"
                ],
                "num_choices": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "PredictionNet.call": {
            "name": "call",
            "location": 35,
            "return": [
                "bool",
                "Dict[str, Any]",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "List['cirq.Qid']",
                    "int",
                    "bool",
                    "Iterable[int]"
                ],
                "training": [
                    "List['cirq.Qid']",
                    "int",
                    "bool",
                    "Iterable[int]"
                ]
            }
        }
    },
    "rinokeras-master/research/resnet_cifar10.py": {
        "loss": {
            "name": "loss",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "logits": [
                    "bool",
                    "str"
                ],
                "labels": [
                    "bool",
                    "str"
                ]
            }
        },
        "compute_accuracy": {
            "name": "compute_accuracy",
            "location": 38,
            "return": [
                "int",
                "List[str]",
                "List[int]"
            ],
            "arguments": {
                "logits": [
                    "List[List[str]]",
                    "List[int]",
                    "int"
                ],
                "labels": [
                    "zerver.models.Realm",
                    "Union[tensorflow.Tensor, Any]",
                    "Sequence[Sequence[str]]",
                    "Sequence[str]",
                    "dict",
                    "str"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "PredictionNet.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "use_layer_norm": [
                    "bool",
                    "float"
                ]
            }
        },
        "PredictionNet.call": {
            "name": "call",
            "location": 28,
            "return": [
                "bool",
                "Dict[str, Any]",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "bool",
                    "str"
                ],
                "training": [
                    "dict"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/__init__.py": {},
    "rinokeras-master/rinokeras/compat/distributed.py": {
        "_call_for_each_device_v112": {
            "name": "_call_for_each_device_v112",
            "location": 9,
            "return": [
                "bool",
                "Optional[str]",
                "Dict[str, Any]",
                "Optional[Callable[[bool], None]]",
                "str"
            ],
            "arguments": {
                "strategy": [
                    "Union",
                    "list",
                    "Dict[str, Any]",
                    "Callable",
                    "Type"
                ]
            }
        },
        "_call_for_each_device_v113": {
            "name": "_call_for_each_device_v113",
            "location": 11,
            "return": [
                "bool",
                "Optional[str]",
                "Dict[str, Any]",
                "Optional[Callable[[bool], None]]",
                "str"
            ],
            "arguments": {
                "strategy": [
                    "Union",
                    "list",
                    "Dict[str, Any]",
                    "Callable",
                    "Type"
                ]
            }
        },
        "_reduce_v112": {
            "name": "_reduce_v112",
            "location": 15,
            "return": [
                "Callable"
            ],
            "arguments": {
                "strategy": [
                    "tuple",
                    "List[str]",
                    "bool",
                    "str",
                    "Callable"
                ]
            }
        },
        "_reduce_v113": {
            "name": "_reduce_v113",
            "location": 19,
            "return": [
                "Callable"
            ],
            "arguments": {
                "strategy": [
                    "tuple",
                    "List[str]",
                    "bool",
                    "str",
                    "Callable"
                ]
            }
        },
        "_num_devices_v112": {
            "name": "_num_devices_v112",
            "location": 41,
            "return": [
                "int",
                "str",
                "bool",
                "List[Dict]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "strategy": [
                    "int"
                ]
            }
        },
        "_num_devices_v113": {
            "name": "_num_devices_v113",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "strategy": [
                    "int"
                ]
            }
        },
        "_reduce_op_112.MEAN": {
            "name": "MEAN",
            "location": 27,
            "return": [
                "bool",
                "Callable[[KT, VT], bool]",
                "Dict[int, Tuple[int, int]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_reduce_op_112.SUM": {
            "name": "SUM",
            "location": 30,
            "return": [
                "bool",
                "Callable[[KT, VT], bool]",
                "Dict[int, Tuple[int, int]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_reduce_op_113.MEAN": {
            "name": "MEAN",
            "location": 35,
            "return": [
                "Optional[int]",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_reduce_op_113.SUM": {
            "name": "SUM",
            "location": 38,
            "return": [
                "Optional[int]",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rinokeras-master/rinokeras/compat/py34_utils.py": {
        "merge_dicts": {
            "name": "merge_dicts",
            "location": 5,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "int"
                ],
                "y": [
                    "dict",
                    "Union[Dict, None]",
                    "Callable"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/compat/py35_utils.py": {
        "merge_dicts": {
            "name": "merge_dicts",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ],
                "y": [
                    "int",
                    "float",
                    "str",
                    "Union[float, int]"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/compat/utils.py": {
        "tf2": {
            "name": "tf2",
            "location": 8,
            "return": [
                "float",
                "List[int]",
                "List[dict]",
                "bytes"
            ],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/compat/__init__.py": {},
    "rinokeras-master/rinokeras/core/__init__.py": {},
    "rinokeras-master/rinokeras/core/torch/__init__.py": {},
    "rinokeras-master/rinokeras/core/torch/functional/attention.py": {
        "attention_map": {
            "name": "attention_map",
            "location": 16,
            "return": [
                "Dict[str, Any]",
                "bytes",
                "Sequence[str]",
                "str"
            ],
            "arguments": {
                "queries": [
                    "dict",
                    "int",
                    "Optional[str]",
                    "str",
                    "bool"
                ],
                "keys": [
                    "dict",
                    "int",
                    "Optional[str]",
                    "str",
                    "bool"
                ],
                "values": [
                    "int",
                    "float",
                    "list",
                    "str"
                ],
                "mask": [
                    "torch.Tensor",
                    "Optional[float]",
                    "Optional[Dict[str, Any]]"
                ],
                "dropout": [
                    "Optional[float]",
                    "int",
                    "bool",
                    "float"
                ],
                "return_attention_weights": [
                    "bool",
                    "Callable",
                    "str"
                ],
                "similarity_metric": [
                    "dict",
                    "int",
                    "Optional[str]",
                    "str",
                    "bool"
                ],
                "attention_function": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "split_heads": {
            "name": "split_heads",
            "location": 41,
            "return": [
                "str",
                "Mapping[str, Any]",
                "torch.Tensor",
                "int"
            ],
            "arguments": {
                "input_tensor": [
                    "str",
                    "int",
                    "Iterable[str]",
                    "Callable[[List], List[str]]"
                ],
                "n_heads": [
                    "str",
                    "int"
                ]
            }
        },
        "combine_heads": {
            "name": "combine_heads",
            "location": 51,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "input_tensor": [
                    "torch.Tensor",
                    "Coroutine",
                    "bool"
                ]
            }
        },
        "multi_head_attention_map": {
            "name": "multi_head_attention_map",
            "location": 57,
            "return": [
                "dict",
                "Awaitable",
                "str"
            ],
            "arguments": {
                "queries": [
                    "torch.Tensor",
                    "Optional[Dict[str, Any]]",
                    "Union[int, float]",
                    "Tuple[int, int]",
                    "static_frame.core.util.DtypesSpecifier"
                ],
                "keys": [
                    "torch.Tensor",
                    "bool",
                    "torch.FloatTensor",
                    "Optional[int]",
                    "Dict[str, str]"
                ],
                "values": [
                    "torch.Tensor",
                    "Optional[Sequence[int]]",
                    "bytes",
                    "starfish.core.imagestack.imagestack.ImageStack",
                    "Optional[int]"
                ],
                "n_heads": [
                    "int",
                    "IO"
                ],
                "mask": [
                    "str",
                    "bool",
                    "torch.Tensor",
                    "Optional[float]",
                    "\"RequestMonitoring\"",
                    "\"Quantile\""
                ],
                "dropout": [
                    "str",
                    "bool",
                    "torch.Tensor",
                    "Optional[float]",
                    "\"RequestMonitoring\"",
                    "\"Quantile\""
                ],
                "return_attention_weights": [
                    "str",
                    "bool",
                    "torch.Tensor",
                    "Optional[float]",
                    "\"RequestMonitoring\"",
                    "\"Quantile\""
                ],
                "similarity_metric": [
                    "str",
                    "bool",
                    "torch.Tensor",
                    "Optional[float]",
                    "\"RequestMonitoring\"",
                    "\"Quantile\""
                ],
                "attention_function": [
                    "str",
                    "bool",
                    "torch.Tensor",
                    "Optional[float]",
                    "\"RequestMonitoring\"",
                    "\"Quantile\""
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/torch/functional/masking.py": {
        "apply_attention_mask": {
            "name": "apply_attention_mask",
            "location": 6,
            "return": [
                "MutableMapping[str, Any]",
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "inputs": [
                    "Sequence[float]",
                    "int",
                    "List[int]",
                    "tuple",
                    "list",
                    "Sequence[T]",
                    "bytearray"
                ],
                "mask": [
                    "torch.Tensor",
                    "Collection[int]",
                    "bytes",
                    "tuple"
                ],
                "hadamard": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "convert_sequence_mask_to_attention_mask": {
            "name": "convert_sequence_mask_to_attention_mask",
            "location": 29,
            "return": [
                "torch.Tensor",
                "List[int]",
                "Union[str, int, float]",
                "str",
                "Union[int, float]"
            ],
            "arguments": {
                "sequence": [
                    "torch.Tensor",
                    "List[int]",
                    "Union[str, int, float]",
                    "str",
                    "Union[int, float]"
                ],
                "sequence_mask": [
                    "torch.Tensor",
                    "Union[Tuple, torch.Size]",
                    "torch.distributions.Distribution",
                    "int",
                    "list",
                    "bool"
                ]
            }
        },
        "convert_sequence_length_to_sequence_mask": {
            "name": "convert_sequence_length_to_sequence_mask",
            "location": 36,
            "return": [
                "torch.Tensor",
                "List[int]",
                "Union[str, int, float]",
                "str",
                "Union[int, float]"
            ],
            "arguments": {
                "sequence": [
                    "torch.Tensor",
                    "List[int]",
                    "Union[str, int, float]",
                    "str",
                    "Union[int, float]"
                ],
                "sequence_lengths": [
                    "torch.Tensor"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/torch/functional/position_embedding.py": {
        "position_embed": {
            "name": "position_embed",
            "location": 8,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "inputs": [
                    "int",
                    "Collection[int]"
                ],
                "start": [
                    "int"
                ],
                "concat": [
                    "bool",
                    "int",
                    "str"
                ],
                "base": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/torch/functional/residual.py": {
        "residual": {
            "name": "residual",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "layer": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "highway": {
            "name": "highway",
            "location": 13,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "layer": [
                    "int",
                    "Callable",
                    "str"
                ],
                "inputs": [
                    "int",
                    "Callable",
                    "str"
                ],
                "gate_weights": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/torch/functional/similarity.py": {
        "scaled_dot_product_similarity": {
            "name": "scaled_dot_product_similarity",
            "location": 5,
            "return": [
                "int",
                "Tuple[str, int]",
                "bytearray",
                "Optional[str]"
            ],
            "arguments": {
                "querys": [
                    "dict",
                    "int",
                    "list",
                    "numpy.ndarray"
                ],
                "keys": [
                    "dict",
                    "int",
                    "list",
                    "numpy.ndarray"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/torch/functional/__init__.py": {},
    "rinokeras-master/rinokeras/core/torch/losses/sequence.py": {
        "sequence_loss": {
            "name": "sequence_loss",
            "location": 5,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "inputs": [
                    "float",
                    "int",
                    "bool",
                    "str"
                ],
                "sequence_lengths": [
                    "float",
                    "int",
                    "torch.nn.modules.rnn.GRUCell"
                ],
                "outputs": [
                    "str",
                    "List[Tuple[str, str]]",
                    "Optional[bool]",
                    "float",
                    "bytes"
                ],
                "vocab_size": [
                    "str",
                    "List[Tuple[str, str]]",
                    "Optional[bool]",
                    "float",
                    "bytes"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/torch/losses/__init__.py": {},
    "rinokeras-master/rinokeras/core/torch/models/__init__.py": {},
    "rinokeras-master/rinokeras/core/torch/models/transformer/__init__.py": {},
    "rinokeras-master/rinokeras/core/torch/modules/activations.py": {
        "GatedTanh.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_units": [
                    "float",
                    "Callable",
                    "int",
                    "bytes"
                ],
                "output_units": [
                    "str"
                ]
            }
        },
        "GatedTanh.forward": {
            "name": "forward",
            "location": 20,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rinokeras-master/rinokeras/core/torch/modules/attention.py": {
        "LuongAttention.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_dim": [
                    "dict"
                ],
                "target_dim": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "output_units": [
                    "int",
                    "bool",
                    "str"
                ],
                "stddev": [
                    "str",
                    "pynn.nn.NeuralNetwork",
                    "Iterable[Iterable]",
                    "Iterable",
                    "float",
                    "bytes",
                    "bool"
                ]
            }
        },
        "LuongAttention.forward": {
            "name": "forward",
            "location": 28,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "source_hidden_sequence": [
                    "str",
                    "int",
                    "Optional[Dict]"
                ],
                "target_hidden": [
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ServiceName",
                    "int"
                ]
            }
        },
        "LocalLuongAttention.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_dim": [
                    "dict"
                ],
                "target_dim": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "output_units": [
                    "int",
                    "bool",
                    "str"
                ],
                "stddev": [
                    "str",
                    "pynn.nn.NeuralNetwork",
                    "Iterable[Iterable]",
                    "Iterable",
                    "float",
                    "bytes",
                    "bool"
                ]
            }
        },
        "LocalLuongAttention.forward": {
            "name": "forward",
            "location": 46,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "source_hidden_sequence": [
                    "str",
                    "Optional[Dict]",
                    "dict"
                ],
                "target_hidden": [
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ServiceName",
                    "int"
                ],
                "positions": [
                    "Union[int, str]",
                    "int",
                    "Dict[str, torch.LongTensor]",
                    "cmk.utils.type_defs.SourceType"
                ]
            }
        },
        "AttentionQKVProjection.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query_input_dim": [
                    "str",
                    "float"
                ],
                "key_input_dim": [
                    "str",
                    "bool",
                    "bytes",
                    "Exception"
                ],
                "value_input_dim": [
                    "float",
                    "Optional[str]",
                    "Optional[float]",
                    "bool",
                    "dict",
                    "Optional[Dict[str, str]]",
                    "int"
                ],
                "key_dim": [
                    "List[str]",
                    "Optional[str]",
                    "Set[str]",
                    "dict",
                    "bool",
                    "str"
                ],
                "value_dim": [
                    "bool",
                    "Optional[float]"
                ],
                "project_value": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "AttentionQKVProjection.forward": {
            "name": "forward",
            "location": 90,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "query_antecedent": [
                    "int",
                    "float",
                    "bool",
                    "Optional[str]"
                ],
                "key_antecedent": [
                    "bytes",
                    "int",
                    "Callable",
                    "list",
                    "str"
                ],
                "value_antecedent": [
                    "bool",
                    "str",
                    "float",
                    "utils.mssql_counters.Section"
                ]
            }
        },
        "TrilinearSimilarity.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query_input_dim": [
                    "str",
                    "Optional[str]"
                ],
                "context_input_dim": [
                    "str",
                    "Optional[str]"
                ],
                "dropout": [
                    "bool",
                    "int",
                    "List[cmk.utils.type_defs.HostName]"
                ]
            }
        },
        "TrilinearSimilarity.forward": {
            "name": "forward",
            "location": 107,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "T",
                    "core.I.CanonicalStorage",
                    "Sequence[core.ICanonicalSource]",
                    "dict"
                ],
                "query": [
                    "Set[str]",
                    "float",
                    "int"
                ]
            }
        },
        "MultiHeadAttention.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query_input_dim": [
                    "int",
                    "str",
                    "bool"
                ],
                "key_input_dim": [
                    "int",
                    "List[str]",
                    "bool",
                    "bytes",
                    "str"
                ],
                "value_input_dim": [
                    "Optional[int]",
                    "int",
                    "str",
                    "Sequence[int]"
                ],
                "n_heads": [
                    "int",
                    "float",
                    "pynn.nn.NeuralNetwork",
                    "Iterable[Iterable]",
                    "Iterable"
                ],
                "dropout": [
                    "int",
                    "bytes",
                    "float"
                ],
                "key_dim": [
                    "str",
                    "int",
                    "Optional[\"Address\"]",
                    "bool",
                    "List[str]"
                ],
                "value_dim": [
                    "bool",
                    "float",
                    "Sequence[str]",
                    "int"
                ],
                "attention_function": [
                    "int",
                    "float",
                    "pynn.nn.NeuralNetwork",
                    "Iterable[Iterable]",
                    "Iterable"
                ],
                "project_value": [
                    "int",
                    "Optional[int]",
                    "bytes",
                    "Callable[[str, str], float]",
                    "static_frame.core.index.Index"
                ],
                "similarity_metric": [
                    "int",
                    "float",
                    "pynn.nn.NeuralNetwork",
                    "Iterable[Iterable]",
                    "Iterable"
                ]
            }
        },
        "MultiHeadAttention.forward": {
            "name": "forward",
            "location": 172,
            "return": [
                "dict",
                "Awaitable",
                "str"
            ],
            "arguments": {
                "self": [],
                "query_antecedent": [
                    "bool",
                    "dict",
                    "Optional[Union[Any, Any]]",
                    "core.board.Board",
                    "str"
                ],
                "key_antecedent": [
                    "bool",
                    "dict",
                    "Optional[Union[Any, Any]]",
                    "core.board.Board",
                    "str"
                ],
                "value_antecedent": [
                    "bool",
                    "dict",
                    "Optional[Union[Any, Any]]",
                    "core.board.Board",
                    "str"
                ],
                "mask": [
                    "bool",
                    "torch.Tensor",
                    "str",
                    "float",
                    "Mapping",
                    "Dict[str, float]"
                ],
                "return_attention_weights": [
                    "bool",
                    "torch.Tensor",
                    "str",
                    "float",
                    "Mapping",
                    "Dict[str, float]"
                ]
            }
        },
        "SelfAttention.__init__": {
            "name": "__init__",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dim": [
                    "List[str]",
                    "core.board.Board",
                    "Tuple[int, int]",
                    "bool"
                ],
                "n_heads": [
                    "List[str]",
                    "core.board.Board",
                    "Tuple[int, int]",
                    "bool"
                ],
                "dropout": [
                    "List[str]",
                    "core.board.Board",
                    "Tuple[int, int]",
                    "bool"
                ],
                "key_dim": [
                    "List[str]",
                    "core.board.Board",
                    "Tuple[int, int]",
                    "bool"
                ],
                "value_dim": [
                    "List[str]",
                    "core.board.Board",
                    "Tuple[int, int]",
                    "bool"
                ],
                "attention_function": [
                    "List[str]",
                    "core.board.Board",
                    "Tuple[int, int]",
                    "bool"
                ],
                "project_value": [
                    "List[str]",
                    "core.board.Board",
                    "Tuple[int, int]",
                    "bool"
                ],
                "similarity_metric": [
                    "List[str]",
                    "core.board.Board",
                    "Tuple[int, int]",
                    "bool"
                ]
            }
        },
        "SelfAttention.forward": {
            "name": "forward",
            "location": 221,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "input_sequence": [
                    "bool"
                ],
                "mask": [
                    "bool"
                ],
                "return_attention_weights": [
                    "bool"
                ]
            }
        },
        "ContextQueryAttention.__init__": {
            "name": "__init__",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "query_input_dim": [
                    "int",
                    "raiden.utils.TokenAmount",
                    "bool",
                    "core.base.setup.Settings",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "str"
                ],
                "context_input_dim": [
                    "int",
                    "raiden.utils.TokenAmount",
                    "bool",
                    "core.base.setup.Settings",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "str"
                ],
                "dropout": [
                    "int",
                    "List[str]",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "ContextQueryAttention.forward": {
            "name": "forward",
            "location": 242,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "utils.types.Id",
                    "jgikbase.idmapping.core.user.AuthsourceID",
                    "str",
                    "Union[int, float]"
                ],
                "query": [
                    "int",
                    "jgikbase.idmapping.core.object_id.NamespaceID"
                ],
                "mask": [
                    "torch.Tensor",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "StridedCachedLWSelfAttention.__init__": {
            "name": "__init__",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "degree": [
                    "int",
                    "list",
                    "Tuple[float, float]"
                ],
                "stride": [
                    "int",
                    "list",
                    "Tuple[float, float]"
                ],
                "model_dim": [
                    "int",
                    "list",
                    "Tuple[float, float]"
                ],
                "n_heads": [
                    "int",
                    "list",
                    "Tuple[float, float]"
                ]
            }
        },
        "StridedCachedLWSelfAttention.get_causal_mask": {
            "name": "get_causal_mask",
            "location": 283,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "sequence": [
                    "str",
                    "qutebrowser.utils.usertypes.Backend"
                ]
            }
        },
        "StridedCachedLWSelfAttention.forward": {
            "name": "forward",
            "location": 289,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "bool",
                    "dict",
                    "int"
                ],
                "sequence_mask": [
                    "Optional[\"Outcome\"]",
                    "Optional[float]"
                ],
                "cache": [
                    "Type",
                    "utils.Node"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/torch/modules/conv.py": {},
    "rinokeras-master/rinokeras/core/torch/modules/dropout.py": {
        "LayerDropout.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layer": [
                    "int",
                    "bool",
                    "float"
                ],
                "dropout_probability": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "LayerDropout.forward": {
            "name": "forward",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rinokeras-master/rinokeras/core/torch/modules/norm.py": {},
    "rinokeras-master/rinokeras/core/torch/modules/residual.py": {
        "Residual.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "layer": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Residual.forward": {
            "name": "forward",
            "location": 15,
            "return": [
                "List[str]",
                "int",
                "List[List[str]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "tuple",
                    "List[str]",
                    "Dict[str, Any]",
                    "list",
                    "str",
                    "Callable"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/torch/modules/__init__.py": {},
    "rinokeras-master/rinokeras/core/torch/utils/data.py": {
        "batch": {
            "name": "batch",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "Union[float, List[float]]",
                    "Sequence"
                ],
                "n": [
                    "int",
                    "list"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/torch/utils/numbers.py": {},
    "rinokeras-master/rinokeras/core/torch/utils/tensor.py": {
        "get_variable": {
            "name": "get_variable",
            "location": 7,
            "return": [
                "float",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "get_parameter": {
            "name": "get_parameter",
            "location": 28,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/core/torch/utils/__init__.py": {},
    "rinokeras-master/rinokeras/core/v1x/__init__.py": {},
    "rinokeras-master/rinokeras/core/v1x/common/attention.py": {
        "LuongAttention.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "local": [
                    "int",
                    "bool",
                    "float"
                ],
                "stddev": [
                    "int",
                    "bool",
                    "float"
                ],
                "regularizer": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "LuongAttention.build": {
            "name": "build",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_shape": [
                    "str"
                ]
            }
        },
        "LuongAttention.call": {
            "name": "call",
            "location": 32,
            "return": [
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str"
                ]
            }
        },
        "AttentionQKVProjection.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key_depth": [
                    "Optional[Union['Part', str]]",
                    "Optional[List]",
                    "Optional[str]",
                    "bool"
                ],
                "value_depth": [
                    "bool",
                    "str",
                    "Optional[\"GraphQLFieldResolver\"]",
                    "Optional[dict]",
                    "Callable"
                ],
                "project_value": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "List[object]",
                    "List[Tuple[int, int]]",
                    "List[str]"
                ],
                "kernel_initializer": [
                    "bool"
                ],
                "kernel_regularizer": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "float"
                ],
                "bias_regularizer": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "float"
                ],
                "activity_regularizer": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "float"
                ]
            }
        },
        "AttentionQKVProjection.call": {
            "name": "call",
            "location": 105,
            "return": [
                "T",
                "bool",
                "\"Namespace\"",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "int",
                    "Type",
                    "str"
                ]
            }
        },
        "TrilinearSimilarity.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dropout": [
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "kernel_initializer": [
                    "int",
                    "bool",
                    "float"
                ],
                "regularizer": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "TrilinearSimilarity.build": {
            "name": "build",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_shapes": [
                    "str",
                    "dict"
                ]
            }
        },
        "TrilinearSimilarity.call": {
            "name": "call",
            "location": 165,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "SupportsInt",
                    "Callable[[str], str]",
                    "Optional[abilian.core.models.Model]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "ScaledDotProductSimilarity.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ScaledDotProductSimilarity.call": {
            "name": "call",
            "location": 208,
            "return": [
                "dict",
                "Iterator[int]",
                "Tuple[str, int, str]",
                "int",
                "float",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "int",
                    "tensorflow.Tensor",
                    "bool",
                    "Callable",
                    "tuple"
                ]
            }
        },
        "ApplyAttentionMask.__init__": {
            "name": "__init__",
            "location": 226,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hadamard": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ApplyAttentionMask.call": {
            "name": "call",
            "location": 230,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Callable",
                    "int",
                    "float"
                ],
                "mask": [
                    "Iterable[Any]"
                ]
            }
        },
        "AttentionMap.__init__": {
            "name": "__init__",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "similarity_metric": [
                    "Callable",
                    "bool",
                    "int",
                    "Optional[bool]",
                    "Dict[str, Any]"
                ],
                "attention_function": [
                    "Dict[str, Tuple[str, str, Any]]",
                    "Dict[str, Tuple[str, int, int]]",
                    "bool",
                    "int",
                    "str",
                    "Dict[int, str]"
                ],
                "dropout": [
                    "Optional[int]",
                    "Optional[Any]",
                    "Optional[Type[Any]]",
                    "bool",
                    "Optional[str]",
                    "int",
                    "Optional[bool]"
                ]
            }
        },
        "AttentionMap.call": {
            "name": "call",
            "location": 283,
            "return": [
                "Sequence[int]",
                "List[float]",
                "Union[tuple, list]",
                "str"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Exception",
                    "Callable",
                    "type",
                    "Type[T]",
                    "dict",
                    "Optional[Dict[str, str]]"
                ],
                "mask": [
                    "str",
                    "DefaultDict[int, List[Any]]",
                    "OrderedDict"
                ],
                "return_attention_weights": [
                    "dict",
                    "Exception",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "MultiHeadAttentionMap.__init__": {
            "name": "__init__",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "similarity_metric": [
                    "int",
                    "bool",
                    "float",
                    "Optional[int]"
                ],
                "n_heads": [
                    "int",
                    "bool",
                    "float",
                    "Optional[int]"
                ],
                "attention_function": [
                    "int",
                    "bool",
                    "float",
                    "Optional[int]"
                ],
                "dropout": [
                    "int",
                    "bool",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "MultiHeadAttentionMap.build": {
            "name": "build",
            "location": 329,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_shape": [
                    "bool",
                    "list",
                    "Iterable[str]"
                ]
            }
        },
        "MultiHeadAttentionMap.call": {
            "name": "call",
            "location": 333,
            "return": [
                "Callable",
                "List[float]",
                "str"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Exception",
                    "Callable",
                    "type",
                    "Type[T]",
                    "dict",
                    "Optional[Dict[str, str]]"
                ],
                "mask": [
                    "str",
                    "T"
                ],
                "return_attention_weights": [
                    "dict",
                    "Exception",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "MultiHeadAttentionMap._split_heads": {
            "name": "_split_heads",
            "location": 353,
            "return": [
                "Callable[[T], bool]",
                "str",
                "List[Tuple]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "tensor": [
                    "int",
                    "bytes",
                    "str",
                    "dict"
                ]
            }
        },
        "MultiHeadAttentionMap._combine_heads": {
            "name": "_combine_heads",
            "location": 363,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "tensor": [
                    "int",
                    "IO[str]",
                    "tuple",
                    "str",
                    "bool"
                ]
            }
        },
        "MultiHeadAttention.__init__": {
            "name": "__init__",
            "location": 379,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "similarity_metric": [
                    "str",
                    "Union[float, str]",
                    "dict",
                    "Optional[str]",
                    "float"
                ],
                "n_heads": [
                    "int",
                    "bool",
                    "Optional[float]",
                    "Optional[Dict]",
                    "Optional[int]"
                ],
                "dropout": [
                    "str",
                    "bytes",
                    "List[int]"
                ],
                "key_size": [
                    "Optional[int]",
                    "int",
                    "bytes"
                ],
                "value_size": [
                    "bool",
                    "Tuple[int, int]",
                    "int",
                    "str",
                    "bytes",
                    "Tuple[int, int, int]"
                ],
                "attention_function": [
                    "float",
                    "bytes",
                    "int"
                ],
                "project_value": [
                    "bool",
                    "Tuple[bool, float]",
                    "Optional[str]",
                    "int",
                    "List[str]"
                ],
                "kernel_initializer": [
                    "int",
                    "bool",
                    "Dict[str, Optional[str]]",
                    "dict",
                    "bytes",
                    "Dict[str, Any]",
                    "str"
                ],
                "kernel_regularizer": [
                    "int",
                    "bool",
                    "Dict[str, Optional[str]]",
                    "dict",
                    "bytes",
                    "Dict[str, Any]",
                    "str"
                ],
                "bias_regularizer": [
                    "int",
                    "bool",
                    "Dict[str, Optional[str]]",
                    "dict",
                    "bytes",
                    "Dict[str, Any]",
                    "str"
                ],
                "activity_regularizer": [
                    "int",
                    "bool",
                    "Dict[str, Optional[str]]",
                    "dict",
                    "bytes",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "MultiHeadAttention.build": {
            "name": "build",
            "location": 423,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_shapes": [
                    "List[str]",
                    "bool",
                    "bytes",
                    "int",
                    "AbstractSet[str]",
                    "type"
                ]
            }
        },
        "MultiHeadAttention.call": {
            "name": "call",
            "location": 443,
            "return": [
                "Callable",
                "List[float]",
                "str"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "list",
                    "str",
                    "List[Tuple]",
                    "List[str]"
                ],
                "mask": [
                    "Callable",
                    "tensorflow.Tensor",
                    "Callable[..., T]"
                ],
                "return_attention_weights": [
                    "Callable",
                    "tensorflow.Tensor",
                    "Callable[..., T]"
                ]
            }
        },
        "MultiHeadAttention.get_base_config": {
            "name": "get_base_config",
            "location": 464,
            "return": [
                "Dict[str, Any]",
                "List[str]",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiHeadAttention.get_config": {
            "name": "get_config",
            "location": 484,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiHeadAttention.from_config": {
            "name": "from_config",
            "location": 491,
            "return": [
                "Optional[dict]",
                "str",
                "Dict[str, str]",
                "Optional[Dict]",
                "OrderedDict"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Type[T]",
                    "Dict[str, Any]"
                ],
                "config": [
                    "bool",
                    "Type[T]",
                    "Dict[str, Any]"
                ]
            }
        },
        "SelfAttention.__init__": {
            "name": "__init__",
            "location": 501,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "similarity_metric": [
                    "int",
                    "str",
                    "bytes",
                    "Tuple[int, int]"
                ],
                "n_heads": [
                    "int",
                    "str",
                    "bytes",
                    "Tuple[int, int]"
                ],
                "dropout": [
                    "int",
                    "str",
                    "bytes",
                    "Tuple[int, int]"
                ]
            }
        },
        "SelfAttention.call": {
            "name": "call",
            "location": 509,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "int",
                    "Dict[str, Any]"
                ],
                "mask": [
                    "int",
                    "Dict[str, Any]"
                ],
                "return_attention_weights": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "SelfAttention.get_config": {
            "name": "get_config",
            "location": 512,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SelfAttention.from_config": {
            "name": "from_config",
            "location": 519,
            "return": [
                "Optional[dict]",
                "str",
                "Dict[str, str]",
                "Optional[Dict]",
                "OrderedDict"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Type[T]",
                    "Dict[str, Any]"
                ],
                "config": [
                    "bool",
                    "Type[T]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ContextQueryAttention.__init__": {
            "name": "__init__",
            "location": 524,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "similarity_metric": [
                    "int",
                    "bool",
                    "float"
                ],
                "dropout": [
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "kernel_initializer": [
                    "int",
                    "bool",
                    "float"
                ],
                "regularizer": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ContextQueryAttention.call": {
            "name": "call",
            "location": 542,
            "return": [
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "SupportsInt",
                    "Callable[[str], str]",
                    "Optional[abilian.core.models.Model]",
                    "Mapping[str, Any]"
                ],
                "mask": [
                    "str",
                    "Callable[[KT, VT], bool]"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/common/distributions.py": {
        "Pd.call": {
            "name": "call",
            "location": 14,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "logits": [
                    "dict"
                ],
                "greedy": [
                    "dict"
                ]
            }
        },
        "Pd.logp_actions": {
            "name": "logp_actions",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "actions": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Pd.neglogp": {
            "name": "neglogp",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "actions": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Pd.prob_actions": {
            "name": "prob_actions",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "actions": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Pd.entropy": {
            "name": "entropy",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoricalPd.call": {
            "name": "call",
            "location": 34,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "logits": [
                    "tartare.core.contexContext",
                    "bool"
                ],
                "greedy": [
                    "dict"
                ]
            }
        },
        "CategoricalPd.logp_actions": {
            "name": "logp_actions",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "actions": [
                    "graphx.core.entities.Edge",
                    "bytes",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "CategoricalPd.entropy": {
            "name": "entropy",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiagGaussianPd.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action_shape": [
                    "numpy.array",
                    "Tuple[int, int]",
                    "List[List[T]]",
                    "list",
                    "str"
                ],
                "noise_shape": [
                    "int",
                    "bool",
                    "float"
                ],
                "initial_logstd": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DiagGaussianPd.build": {
            "name": "build",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_shape": [
                    "bool",
                    "list",
                    "Iterable[str]"
                ]
            }
        },
        "DiagGaussianPd.call": {
            "name": "call",
            "location": 92,
            "return": [
                "Tuple[Tuple[int, Any]]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "logits": [
                    "tensorflow.Tensor",
                    "blurr.core.schema_loader.SchemaLoader",
                    "Dict[str, Any]",
                    "numpy.ndarray",
                    "Optional[str]"
                ],
                "greedy": [
                    "IO",
                    "List[str]",
                    "dict",
                    "prosodia.core.grammar.Language"
                ]
            }
        },
        "DiagGaussianPd.logp_actions": {
            "name": "logp_actions",
            "location": 96,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "actions": [
                    "T"
                ]
            }
        },
        "DiagGaussianPd.entropy": {
            "name": "entropy",
            "location": 102,
            "return": [
                "float",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiagGaussianPd.std": {
            "name": "std",
            "location": 107,
            "return": [
                "bool",
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DiagGaussianPd.logstd": {
            "name": "logstd",
            "location": 111,
            "return": [
                "bool",
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/common/gcn.py": {
        "GraphConvolutionalLayer.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "units": [
                    "int",
                    "Optional[int]",
                    "bool",
                    "str",
                    "Union[bool, str]"
                ],
                "activation": [
                    "bool",
                    "str",
                    "Dict[str, int]",
                    "Dict[str, str]",
                    "Dict[str, dict]"
                ],
                "use_bias": [
                    "bool",
                    "Optional[bool]"
                ],
                "kernel_initializer": [
                    "bool",
                    "str",
                    "Dict[str, str]",
                    "Tuple[Literal, Literal]"
                ],
                "bias_initializer": [
                    "bool",
                    "str",
                    "Dict[str, str]",
                    "Tuple[Literal, Literal]"
                ],
                "kernel_regularizer": [
                    "bool",
                    "str",
                    "Dict[str, str]",
                    "Tuple[Literal, Literal]"
                ],
                "bias_regularizer": [
                    "bool",
                    "str",
                    "Dict[str, str]",
                    "Tuple[Literal, Literal]"
                ],
                "activity_regularizer": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "int",
                    "Optional[List[Any]]"
                ],
                "kernel_constraint": [
                    "bool",
                    "str",
                    "Dict[str, str]",
                    "Tuple[Literal, Literal]"
                ],
                "bias_constraint": [
                    "bool",
                    "str",
                    "Dict[str, str]",
                    "Tuple[Literal, Literal]"
                ]
            }
        },
        "GraphConvolutionalLayer.build": {
            "name": "build",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_shape": [
                    "float",
                    "str",
                    "Iterable[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "GraphConvolutionalLayer.call": {
            "name": "call",
            "location": 65,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Callable",
                    "int",
                    "float"
                ],
                "adj_matrix": [
                    "Callable",
                    "int",
                    "float"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/common/losses.py": {},
    "rinokeras-master/rinokeras/core/v1x/common/optimizers.py": {},
    "rinokeras-master/rinokeras/core/v1x/common/rnn.py": {
        "EagerLSTMCell.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "units": [
                    "float",
                    "Tuple[float, float]",
                    "str",
                    "bool"
                ]
            }
        },
        "EagerLSTMCell.call": {
            "name": "call",
            "location": 27,
            "return": [
                "Union['IndexBase', 'Series']",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "int"
                ],
                "states": [
                    "tensorflow.Tensor",
                    "Tuple[int]",
                    "List[int]"
                ],
                "training": [
                    "BaseException"
                ],
                "mask": [
                    "BaseException"
                ]
            }
        },
        "EagerLSTM.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "units": [
                    "Set[str]",
                    "bool",
                    "Optional[str]",
                    "Sequence[int]",
                    "Union[float, Sequence[float]]",
                    "int"
                ],
                "return_sequences": [
                    "str",
                    "int",
                    "bool",
                    "List[str]"
                ],
                "return_state": [
                    "Callable[[], str]",
                    "bool",
                    "List[str]",
                    "Union[float, str]",
                    "float",
                    "List[\"DictDataLoader\"]"
                ],
                "return_all_states": [
                    "Callable[[], str]",
                    "bool",
                    "List[str]",
                    "Union[float, str]",
                    "float",
                    "List[\"DictDataLoader\"]"
                ]
            }
        },
        "EagerLSTM.call": {
            "name": "call",
            "location": 61,
            "return": [
                "tuple",
                "Callable",
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "training": [
                    "tuple"
                ],
                "mask": [
                    "tuple"
                ],
                "initial_state": [
                    "Dict[str, Any]"
                ]
            }
        },
        "EagerBidirectionalLSTM.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "units": [
                    "List[str]",
                    "bool",
                    "Optional[List[int]]"
                ],
                "return_sequences": [
                    "Optional[float]"
                ],
                "return_state": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "EagerBidirectionalLSTM.call": {
            "name": "call",
            "location": 108,
            "return": [
                "Match",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "bool",
                    "tensorflow.Tensor",
                    "tuple",
                    "List[\"libkol.Item\"]"
                ],
                "training": [
                    "dict"
                ],
                "mask": [
                    "dict"
                ]
            }
        },
        "FixedLengthDecoder.__init__": {
            "name": "__init__",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "units": [
                    "str",
                    "List[str]",
                    "List[int]",
                    "float",
                    "list"
                ],
                "output_size": [
                    "int",
                    "bytes",
                    "str"
                ],
                "output_layer": [
                    "bool",
                    "set",
                    "str"
                ],
                "attention": [
                    "List[str]",
                    "int",
                    "List[List[int]]",
                    "bytes"
                ]
            }
        },
        "FixedLengthDecoder.call": {
            "name": "call",
            "location": 136,
            "return": [
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Dict[int, Any]",
                    "List[int]"
                ],
                "seq_len": [
                    "Callable",
                    "int",
                    "float"
                ],
                "target_inputs": [
                    "float"
                ]
            }
        },
        "EagerLSTMCell.__init__.bias_initializer": {
            "name": "bias_initializer",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/common/__init__.py": {},
    "rinokeras-master/rinokeras/core/v1x/common/layers/activations.py": {
        "GatedTanh.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_units": [
                    "int"
                ],
                "kernel_regularizer": [
                    "int"
                ],
                "bias_regularizer": [
                    "int"
                ],
                "activity_regularizer": [
                    "int"
                ]
            }
        },
        "GatedTanh.call": {
            "name": "call",
            "location": 26,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Callable",
                    "int",
                    "float"
                ]
            }
        },
        "GatedTanh.get_config": {
            "name": "get_config",
            "location": 29,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/common/layers/autoregressive.py": {
        "RandomGaussNoise.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "noise_shape": [
                    "int",
                    "bool",
                    "float"
                ],
                "initial_logstd": [
                    "int",
                    "bool",
                    "float"
                ],
                "dtype": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "RandomGaussNoise.build": {
            "name": "build",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_shape": [
                    "float",
                    "bool",
                    "tensorflow.Tensor",
                    "int",
                    "str"
                ]
            }
        },
        "RandomGaussNoise.call": {
            "name": "call",
            "location": 35,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Optional[int]",
                    "bool",
                    "str",
                    "Tuple[str]",
                    "float"
                ]
            }
        },
        "RandomGaussNoise.logstd": {
            "name": "logstd",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomGaussNoise.std": {
            "name": "std",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomGaussNoise.get_config": {
            "name": "get_config",
            "location": 47,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CouplingLayer.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_units": [
                    "int",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "dict"
                ],
                "layer": [
                    "int"
                ]
            }
        },
        "CouplingLayer.call": {
            "name": "call",
            "location": 63,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "int",
                    "str"
                ],
                "reverse": [
                    "dict"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/common/layers/conv.py": {
        "NormedConvStack.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dimension": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "filters": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "kernel_size": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "layer_norm": [
                    "bool",
                    "Optional[int]",
                    "int"
                ],
                "activation": [
                    "bool",
                    "int",
                    "List['cirq.Circuit']",
                    "str"
                ]
            }
        },
        "NormedConvStack.call": {
            "name": "call",
            "location": 30,
            "return": [
                "bool",
                "Sequence['cirq.Qid']",
                "Callable",
                "Callable[[], Dict[str, object]]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "tensorflow.Tensor",
                    "str",
                    "int"
                ],
                "mask": [
                    "Optional[str]",
                    "Optional[\"Outcome\"]"
                ]
            }
        },
        "PaddedConv.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dimension": [
                    "int",
                    "str",
                    "float"
                ],
                "filters": [
                    "int",
                    "str",
                    "float"
                ],
                "kernel_size": [
                    "int",
                    "str",
                    "float"
                ],
                "dilation_rate": [
                    "int",
                    "str",
                    "float"
                ],
                "activation": [
                    "int",
                    "str",
                    "float"
                ],
                "dropout": [
                    "Optional[str]",
                    "Optional[float]",
                    "Callable",
                    "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                    "bool",
                    "Optional[Any]",
                    "Optional[List[str]]"
                ]
            }
        },
        "PaddedConv.call": {
            "name": "call",
            "location": 68,
            "return": [
                "bool",
                "tensorflow.Tensor"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "bool",
                    "tensorflow.Tensor",
                    "pathpy.core.network.Network"
                ],
                "mask": [
                    "Optional[str]",
                    "type"
                ]
            }
        },
        "GLUActivation.call": {
            "name": "call",
            "location": 79,
            "return": [
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "Optional[Union[str, Any]]",
                    "bool",
                    "callable",
                    "int"
                ]
            }
        },
        "ResidualBlock.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dimension": [
                    "int",
                    "str",
                    "Optional[float]"
                ],
                "filters": [
                    "int",
                    "str",
                    "Optional[float]"
                ],
                "kernel_size": [
                    "int",
                    "str",
                    "Optional[float]"
                ],
                "activation": [
                    "int",
                    "str",
                    "Optional[float]"
                ],
                "dilation_rate": [
                    "int",
                    "str",
                    "Optional[float]"
                ],
                "layer_norm": [
                    "bool",
                    "Optional[int]",
                    "int"
                ],
                "dropout": [
                    "int",
                    "str",
                    "Optional[float]"
                ],
                "add_checkpoint": [
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "ResidualBlock.call": {
            "name": "call",
            "location": 106,
            "return": [
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "bool",
                    "Callable",
                    "Exception"
                ]
            }
        },
        "GroupedConvolution.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cardinality": [
                    "int",
                    "List[str]",
                    "Optional[float]"
                ],
                "n_filters": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "kernel_size": [
                    "int",
                    "Tuple[int, int]",
                    "str",
                    "List[str]"
                ],
                "stride": [
                    "int",
                    "Tuple[int, int]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "GroupedConvolution.call": {
            "name": "call",
            "location": 134,
            "return": [
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "IO"
                ]
            }
        },
        "PaddedConv.__init__.get_activation": {
            "name": "get_activation",
            "location": 52,
            "return": [
                "bool",
                "str",
                "dict"
            ],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/core/v1x/common/layers/dropout.py": {
        "LayerDropout.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rate": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "LayerDropout.call": {
            "name": "call",
            "location": 28,
            "return": [
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "layer_outputs": [
                    "int",
                    "bool",
                    "float"
                ],
                "layer_inputs": [
                    "int",
                    "bool",
                    "float"
                ],
                "training": [
                    "Optional[Tuple[int, int]]"
                ]
            }
        },
        "LayerDropout.get_config": {
            "name": "get_config",
            "location": 38,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/common/layers/inversion.py": {
        "DenseTranspose.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "other_layer": [
                    "int",
                    "float",
                    "Union[str, float]",
                    "tuple"
                ]
            }
        },
        "DenseTranspose.call": {
            "name": "call",
            "location": 29,
            "return": [
                "Type",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ]
            }
        },
        "EmbeddingTranspose.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embedding_layer": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "EmbeddingTranspose.call": {
            "name": "call",
            "location": 40,
            "return": [
                "Optional[Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "bool"
                ]
            }
        },
        "InvertibleDense.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InvertibleDense.build": {
            "name": "build",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_shape": [
                    "int",
                    "float",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "InvertibleDense.call": {
            "name": "call",
            "location": 64,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "inputs": [],
                "reverse": [
                    "Callable",
                    "int",
                    "float"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/common/layers/masking.py": {
        "BERTRandomReplaceMask.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "percentage": [
                    "str",
                    "int",
                    "float",
                    "List[Tuple[int, str]]",
                    "Optional[str]"
                ],
                "mask_token": [
                    "int",
                    "bool",
                    "Union[int, Tuple[int, int]]"
                ],
                "n_symbols": [
                    "bool",
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "BERTRandomReplaceMask.call": {
            "name": "call",
            "location": 38,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "float",
                    "int"
                ],
                "mask": [
                    "int",
                    "List[str]",
                    "bool"
                ],
                "n_symbols": [
                    "Optional[str]",
                    "Optional[int]",
                    "str",
                    "int"
                ]
            }
        },
        "BERTRandomReplaceMask.get_config": {
            "name": "get_config",
            "location": 92,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/common/layers/normalization.py": {
        "LayerNorm.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "axis": [
                    "str",
                    "List[str]",
                    "Optional[Any]",
                    "bool",
                    "list"
                ],
                "eps": [
                    "int",
                    "bool",
                    "float"
                ],
                "trainable": [
                    "float",
                    "int",
                    "Callable"
                ]
            }
        },
        "LayerNorm.build": {
            "name": "build",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_shape": [
                    "str",
                    "dict",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "LayerNorm.call": {
            "name": "call",
            "location": 44,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "tensorflow.Tensor",
                    "float",
                    "str"
                ]
            }
        },
        "LayerNorm.get_config": {
            "name": "get_config",
            "location": 52,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WeightNormDense.build": {
            "name": "build",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_shape": [
                    "str",
                    "Mapping[str, Any]",
                    "Iterable[str]",
                    "dict"
                ]
            }
        },
        "WeightNormDense.call": {
            "name": "call",
            "location": 71,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "inputs": []
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/common/layers/position_embedding.py": {
        "PositionEmbedding.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "concat": [
                    "int",
                    "bool",
                    "float"
                ],
                "reproject_embedding": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "PositionEmbedding.build": {
            "name": "build",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_shape": [
                    "float",
                    "bytes",
                    "int",
                    "Dict[str, Any]",
                    "str",
                    "bytearray"
                ]
            }
        },
        "PositionEmbedding.call": {
            "name": "call",
            "location": 43,
            "return": [
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "int",
                    "raiden.utils.Address"
                ],
                "start": [
                    "float",
                    "Optional[int]",
                    "int",
                    "raiden.utils.Address"
                ]
            }
        },
        "PositionEmbedding.compute_output_shape": {
            "name": "compute_output_shape",
            "location": 79,
            "return": [
                "str",
                "Tuple[int]",
                "List[bytes]",
                "Iterable[float]",
                "int"
            ],
            "arguments": {
                "self": [],
                "input_shape": [
                    "float",
                    "str",
                    "Iterable[str]",
                    "dict",
                    "Callable",
                    "tensorflow.estimator.Estimator"
                ]
            }
        },
        "PositionEmbedding.get_config": {
            "name": "get_config",
            "location": 87,
            "return": [
                "Dict[str, str]",
                "dict",
                "Dict[int, Any]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PositionEmbedding2D.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "concat": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "PositionEmbedding2D.build": {
            "name": "build",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_shape": [
                    "int",
                    "bytes",
                    "List[List[T]]"
                ]
            }
        },
        "PositionEmbedding2D.call": {
            "name": "call",
            "location": 116,
            "return": [
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "int",
                    "str",
                    "float"
                ],
                "start": [
                    "bool",
                    "AsyncIterator[T]",
                    "AsyncIterable[T]"
                ]
            }
        },
        "PositionEmbedding3D.__init__": {
            "name": "__init__",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "concat": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "PositionEmbedding3D.build": {
            "name": "build",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_shape": [
                    "float",
                    "bytes",
                    "int",
                    "Dict[str, Any]",
                    "str",
                    "bytearray"
                ]
            }
        },
        "PositionEmbedding3D.call": {
            "name": "call",
            "location": 185,
            "return": [
                "List[float]",
                "Union[tuple, list]",
                "Iterable[Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "int",
                    "bytes"
                ],
                "start": [
                    "bool",
                    "AsyncIterator[T]",
                    "AsyncIterable[T]"
                ]
            }
        },
        "LearnedEmbedding.__init__": {
            "name": "__init__",
            "location": 240,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "concat": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "LearnedEmbedding.build": {
            "name": "build",
            "location": 244,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_shape": [
                    "bool"
                ]
            }
        },
        "LearnedEmbedding.call": {
            "name": "call",
            "location": 250,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Type['Frame']",
                    "bool",
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "LearnedEmbedding.get_config": {
            "name": "get_config",
            "location": 266,
            "return": [
                "Dict[str, str]",
                "dict",
                "Dict[int, Any]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/common/layers/residual.py": {
        "Residual.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layer": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Residual.call": {
            "name": "call",
            "location": 20,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "bool",
                    "Union",
                    "dict"
                ]
            }
        },
        "Residual.get_config": {
            "name": "get_config",
            "location": 26,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Highway.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layer": [
                    "int",
                    "bool",
                    "float"
                ],
                "activation": [
                    "int",
                    "bool",
                    "float"
                ],
                "gate_bias": [
                    "int",
                    "bool",
                    "float"
                ],
                "dropout": [
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "kernel_regularizer": [
                    "int",
                    "bool",
                    "float"
                ],
                "bias_regularizer": [
                    "int",
                    "bool",
                    "float"
                ],
                "activity_regularizer": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Highway.build": {
            "name": "build",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_shape": [
                    "bool"
                ]
            }
        },
        "Highway.call": {
            "name": "call",
            "location": 70,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Callable",
                    "int",
                    "float"
                ]
            }
        },
        "Highway.get_config": {
            "name": "get_config",
            "location": 77,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/common/layers/stack.py": {
        "Stack.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layers": [
                    "list",
                    "str",
                    "Optional[str]",
                    "Iterable[T]",
                    "T",
                    "Optional[Sequence[Any]]"
                ]
            }
        },
        "Stack.add": {
            "name": "add",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "layer": [
                    "T"
                ]
            }
        },
        "Stack.call": {
            "name": "call",
            "location": 33,
            "return": [
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Callable",
                    "int",
                    "float"
                ]
            }
        },
        "Stack.get_config": {
            "name": "get_config",
            "location": 45,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.from_config": {
            "name": "from_config",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Sequence[Any]",
                    "Dict[str, str]"
                ],
                "cfg": [
                    "str",
                    "bool",
                    "Sequence[Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "LayerDropoutStack.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layers": [
                    "list",
                    "str",
                    "Optional[str]",
                    "Iterable[T]",
                    "T",
                    "Optional[Sequence[Any]]"
                ],
                "layer_dropout": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "LayerDropoutStack.add": {
            "name": "add",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "layer": [
                    "T"
                ]
            }
        },
        "LayerDropoutStack.call": {
            "name": "call",
            "location": 71,
            "return": [
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Callable",
                    "int",
                    "float"
                ]
            }
        },
        "LayerDropoutStack.get_config": {
            "name": "get_config",
            "location": 78,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LayerDropoutStack.from_config": {
            "name": "from_config",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Sequence[Any]",
                    "Dict[str, str]"
                ],
                "cfg": [
                    "str",
                    "bool",
                    "Sequence[Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "Conv2DStack.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filters": [
                    "Sequence[int]",
                    "Optional[List[Any]]",
                    "List[int]"
                ],
                "kernel_size": [
                    "Sequence[int]",
                    "int",
                    "Optional[int]"
                ],
                "strides": [
                    "Sequence[int]",
                    "int",
                    "List[int]",
                    "Dict[int, str]"
                ],
                "batch_norm": [
                    "Optional[dict]",
                    "List['cirq.Circuit']",
                    "Optional[List[str]]",
                    "str",
                    "float",
                    "int",
                    "Optional[str]"
                ],
                "activation": [
                    "List[\"DeliveryItem\"]",
                    "Optional[Sequence[str]]",
                    "bool",
                    "int"
                ],
                "padding": [
                    "List[\"DeliveryItem\"]",
                    "bool",
                    "Optional[Sequence[str]]",
                    "int"
                ],
                "flatten_output": [
                    "int",
                    "Tuple[str]",
                    "bool",
                    "Tuple[int, int]"
                ]
            }
        },
        "Conv2DStack.get_config": {
            "name": "get_config",
            "location": 121,
            "return": [
                "int",
                "str",
                "Dict[str, str]",
                "Dict[str, Any]",
                "Dict[str, Dict[str, Any]]",
                "Optional[dict]",
                "Dict[int, Dict[str, float]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deconv2DStack.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filters": [
                    "Sequence[int]",
                    "Optional[List[Any]]",
                    "List[int]"
                ],
                "kernel_size": [
                    "Sequence[int]",
                    "int",
                    "Optional[int]"
                ],
                "strides": [
                    "Sequence[int]",
                    "int",
                    "List[int]",
                    "Dict[int, str]"
                ],
                "batch_norm": [
                    "Optional[dict]",
                    "List['cirq.Circuit']",
                    "Optional[List[str]]",
                    "str",
                    "float",
                    "int",
                    "Optional[str]"
                ],
                "activation": [
                    "List[\"DeliveryItem\"]",
                    "Optional[Sequence[str]]",
                    "bool",
                    "int"
                ],
                "padding": [
                    "List[\"DeliveryItem\"]",
                    "str",
                    "int",
                    "Optional[Sequence[str]]",
                    "Optional[List[\"DeliveryItem\"]]",
                    "Optional[List[float]]"
                ],
                "flatten_output": [
                    "int",
                    "Tuple[str]",
                    "bool",
                    "Tuple[int, int]"
                ]
            }
        },
        "Deconv2DStack.get_config": {
            "name": "get_config",
            "location": 171,
            "return": [
                "int",
                "str",
                "Dict[str, str]",
                "Dict[str, Any]",
                "Dict[str, Dict[str, Any]]",
                "Optional[dict]",
                "Dict[int, Dict[str, float]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DenseStack.__init__": {
            "name": "__init__",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "layers": [
                    "bool",
                    "int"
                ],
                "batch_norm": [
                    "List[str]",
                    "bytes",
                    "bool",
                    "float",
                    "int"
                ],
                "activation": [
                    "Tuple[int]",
                    "float",
                    "bool",
                    "Optional[Sequence[str]]",
                    "int"
                ],
                "output_activation": [
                    "Optional[int]",
                    "int",
                    "Optional[str]",
                    "bool",
                    "str",
                    "Optional[Mapping[str, str]]"
                ],
                "use_weight_norm": [
                    "bool",
                    "int",
                    "Dict[Tuple[int, ...], int]"
                ]
            }
        },
        "DenseStack.get_config": {
            "name": "get_config",
            "location": 229,
            "return": [
                "int",
                "str",
                "Dict[str, str]",
                "Dict[str, Any]",
                "Dict[str, Dict[str, Any]]",
                "Optional[dict]",
                "Dict[int, Dict[str, float]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/common/layers/__init__.py": {},
    "rinokeras-master/rinokeras/core/v1x/models/glow.py": {
        "EvenOddInvertibleDense.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "out_size": [
                    "int",
                    "Sequence[int]",
                    "bool",
                    "str"
                ]
            }
        },
        "EvenOddInvertibleDense.call": {
            "name": "call",
            "location": 25,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "int",
                    "Callable[[Any, Any], bool]",
                    "gluonts.model.common.Tensor"
                ],
                "reverse": [
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "EvenOddCouplingLayer.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "out_size": [
                    "int",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray",
                    "bytes"
                ],
                "n_heads": [
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray",
                    "Optional[int]",
                    "List[str]",
                    "Optional[float]"
                ],
                "filter_size": [
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray",
                    "Optional[int]",
                    "List[str]",
                    "Optional[float]"
                ],
                "hidden_size": [
                    "int",
                    "Optional[float]"
                ],
                "dropout": [
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray",
                    "Optional[int]",
                    "List[str]",
                    "Optional[float]"
                ],
                "layer_dropout": [
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray",
                    "Optional[int]",
                    "List[str]",
                    "Optional[float]"
                ],
                "kernel_regularizer": [
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray",
                    "Optional[int]",
                    "List[str]",
                    "Optional[float]"
                ]
            }
        },
        "EvenOddCouplingLayer.call": {
            "name": "call",
            "location": 61,
            "return": [
                "str",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Iterable[float]",
                    "str",
                    "List[T]",
                    "numpy.ndarray",
                    "float"
                ],
                "encoder_outputs": [
                    "bytes",
                    "gluonts.model.common.Tensor",
                    "int",
                    "float",
                    "Union[int, slice]"
                ],
                "reverse": [
                    "str",
                    "List[int]",
                    "int",
                    "Optional[float]"
                ],
                "encoder_mask": [
                    "bytes",
                    "int",
                    "str",
                    "bool"
                ],
                "decoder_mask": [
                    "int",
                    "float",
                    "Optional[starfish.core.imagestack.imagestack.ImageStack]",
                    "Iterable[Any]",
                    "Optional[bytes]",
                    "str"
                ]
            }
        },
        "EvenOddCouplingLayer.get_cross_attention_mask": {
            "name": "get_cross_attention_mask",
            "location": 101,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "encoder_output": [
                    "str",
                    "Optional[int]",
                    "int",
                    "Callable",
                    "numpy.ndarray"
                ],
                "decoder_input": [
                    "str",
                    "float",
                    "bool",
                    "list"
                ],
                "encoder_mask": [
                    "Optional[str]",
                    "front_end.models.workflow_binding.WorkflowBinding",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "babel.core.Locale"
                ],
                "decoder_mask": [
                    "Any",
                    "Optional[Dict[str, Any]]",
                    "front_end.models.workflow_binding.WorkflowBinding",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TransformerGlowModel.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "discrete": [
                    "int",
                    "bool",
                    "Optional[float]",
                    "model.Model"
                ],
                "n_symbols": [
                    "Optional[int]",
                    "bool",
                    "Optional[str]",
                    "int",
                    "static_frame.core.util.PathSpecifier",
                    "Optional[bool]",
                    "Union[str, Tuple[str, str]]"
                ],
                "out_size": [
                    "int"
                ],
                "output_activation": [
                    "int",
                    "Union[numpy.ndarray, numpy.void]",
                    "float",
                    "bool"
                ],
                "n_layers": [
                    "float",
                    "bool",
                    "int",
                    "str"
                ],
                "n_heads": [
                    "float",
                    "bool",
                    "int",
                    "str"
                ],
                "d_model": [
                    "int",
                    "numpy.ndarray",
                    "zerver.models.UserProfile",
                    "model.Model",
                    "bool"
                ],
                "d_filter": [
                    "str",
                    "float",
                    "dict",
                    "int",
                    "list",
                    "Iterable[float]"
                ],
                "n_flows": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "dropout": [
                    "Optional[int]",
                    "Optional[float]",
                    "int",
                    "float"
                ],
                "layer_dropout": [
                    "int",
                    "numpy.ndarray",
                    "Union[float, List[float]]"
                ],
                "embedding_initializer": [
                    "int",
                    "bool",
                    "str",
                    "numpy.ndarray",
                    "models.Stop"
                ],
                "use_preembedded_vectors": [
                    "bool",
                    "int",
                    "str",
                    "float",
                    "dict",
                    "Sequence[int]"
                ],
                "kernel_regularizer": [
                    "int",
                    "bool",
                    "str",
                    "numpy.ndarray",
                    "models.Stop"
                ],
                "bias_regularizer": [
                    "int",
                    "bool",
                    "str",
                    "numpy.ndarray",
                    "models.Stop"
                ],
                "activity_regularizer": [
                    "int",
                    "bool",
                    "str",
                    "numpy.ndarray",
                    "models.Stop"
                ]
            }
        },
        "TransformerGlowModel.call": {
            "name": "call",
            "location": 173,
            "return": [
                "numpy.ndarray",
                "tuple",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str"
                ],
                "source_mask": [
                    "int",
                    "server.models.Bike",
                    "str"
                ],
                "target_mask": [
                    "str"
                ]
            }
        },
        "TransformerGlowModel.predict": {
            "name": "predict",
            "location": 203,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str"
                ],
                "source_mask": [
                    "str",
                    "fonduer.parser.models.table.Cell",
                    "int"
                ],
                "target_mask": [
                    "str",
                    "int"
                ]
            }
        },
        "TransformerGlowModel.get_cross_attention_mask": {
            "name": "get_cross_attention_mask",
            "location": 224,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "encoder_output": [
                    "str",
                    "Optional[int]",
                    "int",
                    "Callable",
                    "numpy.ndarray"
                ],
                "decoder_input": [
                    "str",
                    "float",
                    "bool",
                    "list"
                ],
                "encoder_mask": [
                    "Optional[str]",
                    "front_end.models.workflow_binding.WorkflowBinding",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "babel.core.Locale"
                ],
                "decoder_mask": [
                    "Any",
                    "Optional[Dict[str, Any]]",
                    "front_end.models.workflow_binding.WorkflowBinding",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TransformerGlowExperiment.__init__": {
            "name": "__init__",
            "location": 248,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sigma": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "TransformerGlowExperiment.loss_function": {
            "name": "loss_function",
            "location": 253,
            "return": [
                "str",
                "bool",
                "int",
                "Tuple[float, float, float]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "List[str]",
                    "Sequence[Tuple[int, int]]",
                    "dict",
                    "Sequence[str]"
                ],
                "outputs": [
                    "Sequence[int]",
                    "Set[str]",
                    "List[dict]",
                    "Union[str, List]",
                    "Callable"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/models/masked_rmc.py": {
        "RMCFeedForward.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mem_slots": [
                    "int",
                    "bool",
                    "Union[int, float]",
                    "float"
                ],
                "filter_size": [
                    "int",
                    "str",
                    "list",
                    "Optional[int]",
                    "tensorflow.Tensor",
                    "Tuple[int, int]"
                ],
                "hidden_size": [
                    "int",
                    "str",
                    "list",
                    "Optional[int]",
                    "tensorflow.Tensor",
                    "Tuple[int, int]"
                ],
                "dropout": [
                    "int",
                    "str",
                    "list",
                    "Optional[int]",
                    "tensorflow.Tensor",
                    "Tuple[int, int]"
                ],
                "kernel_regularizer": [
                    "int",
                    "str",
                    "list",
                    "Optional[int]",
                    "tensorflow.Tensor",
                    "Tuple[int, int]"
                ],
                "bias_regularizer": [
                    "int",
                    "str",
                    "list",
                    "Optional[int]",
                    "tensorflow.Tensor",
                    "Tuple[int, int]"
                ],
                "activity_regularizer": [
                    "int",
                    "str",
                    "list",
                    "Optional[int]",
                    "tensorflow.Tensor",
                    "Tuple[int, int]"
                ]
            }
        },
        "RMCFeedForward.call": {
            "name": "call",
            "location": 35,
            "return": [
                "Pattern",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "bytes",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "MaskedRelationalMemoryCoreCell.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mem_slots": [
                    "int"
                ],
                "mem_size": [
                    "int"
                ],
                "n_heads": [
                    "int",
                    "float",
                    "Collection[int]",
                    "nevergrad.common.Optional[int]"
                ],
                "input_dim": [
                    "float",
                    "int",
                    "str",
                    "bool"
                ],
                "forget_bias": [
                    "float",
                    "int",
                    "str",
                    "bool"
                ],
                "input_bias": [
                    "float",
                    "int",
                    "str",
                    "bool"
                ],
                "dropout": [
                    "int",
                    "float"
                ],
                "gate_style": [
                    "float",
                    "int",
                    "str",
                    "bool"
                ],
                "treat_input_as_sequence": [
                    "float",
                    "int",
                    "str",
                    "bool"
                ],
                "use_cross_attention": [
                    "bool",
                    "str"
                ],
                "kernel_regularizer": [
                    "int",
                    "float"
                ],
                "bias_regularizer": [
                    "int",
                    "float"
                ],
                "activity_regularizer": [
                    "int",
                    "float"
                ]
            }
        },
        "MaskedRelationalMemoryCoreCell.get_initial_state": {
            "name": "get_initial_state",
            "location": 103,
            "return": [
                "tuple",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Optional[int]",
                    "Optional[List[Any]]",
                    "Optional[str]",
                    "int",
                    "float"
                ],
                "batch_size": [
                    "int",
                    "Optional[int]",
                    "Callable[[str], int]",
                    "Union[int, None]"
                ],
                "dtype": [
                    "Optional[bytes]",
                    "int",
                    "float",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "MaskedRelationalMemoryCoreCell._calculate_gate_size": {
            "name": "_calculate_gate_size",
            "location": 135,
            "return": [
                "int",
                "str",
                "List[float]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "MaskedRelationalMemoryCoreCell.create_gates": {
            "name": "create_gates",
            "location": 149,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "bool",
                    "float"
                ],
                "memory": [
                    "bool",
                    "float"
                ]
            }
        },
        "MaskedRelationalMemoryCoreCell.build": {
            "name": "build",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_shape": [
                    "bool",
                    "list",
                    "Iterable[str]"
                ]
            }
        },
        "MaskedRelationalMemoryCoreCell.call": {
            "name": "call",
            "location": 188,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Set[str]"
                ],
                "states": [
                    "int"
                ]
            }
        },
        "RelationalMemoryCore.__init__": {
            "name": "__init__",
            "location": 251,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mem_slots": [
                    "int",
                    "float",
                    "Dict[str, Tuple[str, int, int]]",
                    "Optional[int]"
                ],
                "mem_size": [
                    "int",
                    "float",
                    "Dict[str, Tuple[str, int, int]]",
                    "Optional[int]"
                ],
                "n_heads": [
                    "int",
                    "float",
                    "Dict[str, Tuple[str, int, int]]",
                    "Optional[int]"
                ],
                "forget_bias": [
                    "int",
                    "float",
                    "Dict[str, Tuple[str, int, int]]",
                    "Optional[int]"
                ],
                "input_bias": [
                    "int",
                    "float",
                    "Dict[str, Tuple[str, int, int]]",
                    "Optional[int]"
                ],
                "dropout": [
                    "int",
                    "float",
                    "Dict[str, Tuple[str, int, int]]",
                    "Optional[int]"
                ],
                "gate_style": [
                    "int",
                    "float",
                    "Dict[str, Tuple[str, int, int]]",
                    "Optional[int]"
                ],
                "treat_input_as_sequence": [
                    "int",
                    "float",
                    "Dict[str, Tuple[str, int, int]]",
                    "Optional[int]"
                ],
                "use_cross_attention": [
                    "int",
                    "float",
                    "Dict[str, Tuple[str, int, int]]",
                    "Optional[int]"
                ],
                "kernel_regularizer": [
                    "int",
                    "float",
                    "Dict[str, Tuple[str, int, int]]",
                    "Optional[int]"
                ],
                "bias_regularizer": [
                    "int",
                    "float",
                    "Dict[str, Tuple[str, int, int]]",
                    "Optional[int]"
                ],
                "activity_regularizer": [
                    "int",
                    "float",
                    "Dict[str, Tuple[str, int, int]]",
                    "Optional[int]"
                ],
                "return_sequences": [
                    "int",
                    "bool",
                    "Optional[float]",
                    "float"
                ],
                "return_state": [
                    "int",
                    "bool",
                    "Optional[float]",
                    "float"
                ],
                "go_backwards": [
                    "int",
                    "bool",
                    "Optional[float]",
                    "float"
                ],
                "stateful": [
                    "int",
                    "bool",
                    "Optional[float]",
                    "float"
                ],
                "unroll": [
                    "int",
                    "bool",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "RelationalMemoryCore.mem_slots": {
            "name": "mem_slots",
            "location": 279,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelationalMemoryCore.mem_size": {
            "name": "mem_size",
            "location": 283,
            "return": [
                "str",
                "bytes",
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelationalMemoryCore.n_heads": {
            "name": "n_heads",
            "location": 287,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/models/rmc.py": {
        "RMCFeedForward.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mem_slots": [
                    "int",
                    "float"
                ],
                "filter_size": [
                    "int",
                    "bool",
                    "float"
                ],
                "hidden_size": [
                    "int",
                    "bool",
                    "float"
                ],
                "dropout": [
                    "int",
                    "bool",
                    "float"
                ],
                "kernel_initializer": [
                    "int",
                    "bool",
                    "float"
                ],
                "kernel_regularizer": [
                    "int",
                    "bool",
                    "float"
                ],
                "bias_regularizer": [
                    "int",
                    "bool",
                    "float"
                ],
                "activity_regularizer": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "RMCFeedForward.call": {
            "name": "call",
            "location": 40,
            "return": [
                "Pattern",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "bytes",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "RMCBlock.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mem_slots": [
                    "Optional[str]",
                    "bool",
                    "Optional[bool]"
                ],
                "n_heads": [
                    "Tuple[int, int, bytearray]",
                    "Dict[str, Any]"
                ],
                "filter_size": [
                    "int",
                    "Optional[tensorflow.keras.initializers.Initializer]",
                    "Optional[int]",
                    "str",
                    "float",
                    "Tuple[int]"
                ],
                "hidden_size": [
                    "int",
                    "Optional[tensorflow.keras.initializers.Initializer]",
                    "Optional[int]",
                    "str",
                    "float",
                    "Tuple[int]"
                ],
                "key_size": [
                    "float",
                    "bool",
                    "str",
                    "int"
                ],
                "dropout": [
                    "int",
                    "numpy.ndarray",
                    "List[str]",
                    "float"
                ],
                "layer_dropout": [
                    "int",
                    "bool",
                    "List[int]",
                    "Optional[numpy.ndarray]"
                ],
                "kernel_initializer": [
                    "float",
                    "bool",
                    "str",
                    "int"
                ],
                "kernel_regularizer": [
                    "Tuple[int, int, bytearray]",
                    "Dict[str, Any]"
                ],
                "bias_regularizer": [
                    "Tuple[int, int, bytearray]",
                    "Dict[str, Any]"
                ],
                "activity_regularizer": [
                    "Tuple[int, int, bytearray]",
                    "Dict[str, Any]"
                ]
            }
        },
        "RMCBlock.call": {
            "name": "call",
            "location": 111,
            "return": [
                "str",
                "Dict[str, Any]",
                "Callable",
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "memory_cells": [
                    "int",
                    "Dict[str, str]",
                    "boucanpy.core.api_token.ApiTokenRepo",
                    "str",
                    "Optional[Union[Any, Any]]",
                    "dict",
                    "Dict[int, dict]",
                    "bool"
                ],
                "rmc_inputs": [
                    "int",
                    "bool",
                    "Dict[str, str]",
                    "boucanpy.core.api_token.ApiTokenRepo",
                    "str",
                    "Dict[int, dict]",
                    "Optional[Union[Any, Any]]"
                ],
                "cross_attention_mask": [
                    "int",
                    "bool",
                    "Dict[str, str]",
                    "boucanpy.core.api_token.ApiTokenRepo",
                    "str",
                    "Dict[int, dict]",
                    "Optional[Union[Any, Any]]"
                ],
                "return_self_attention_weights": [
                    "Optional[Sequence[Any]]",
                    "Optional[Tuple[int, ...]]",
                    "Optional[int]"
                ],
                "return_cross_attention_weights": [
                    "Optional[Sequence[Any]]",
                    "Optional[Tuple[int, ...]]",
                    "Optional[int]"
                ]
            }
        },
        "RelationalMemoryCoreCell.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mem_slots": [
                    "int",
                    "float",
                    "Optional[int]"
                ],
                "mem_size": [
                    "int",
                    "Optional[tensorflow.keras.initializers.Initializer]",
                    "Optional[int]",
                    "str",
                    "float"
                ],
                "n_heads": [
                    "int",
                    "float",
                    "starfish.core.morphology.binary_mask.BinaryMaskCollection"
                ],
                "key_size": [
                    "Optional[numpy.ndarray]"
                ],
                "forget_bias": [
                    "bytes",
                    "bool",
                    "Optional[dict]",
                    "int",
                    "apps.common.coininfo.CoinInfo",
                    "List[int]"
                ],
                "input_bias": [
                    "bytes",
                    "bool",
                    "Optional[dict]",
                    "int",
                    "apps.common.coininfo.CoinInfo",
                    "List[int]"
                ],
                "dropout": [
                    "Optional[numpy.ndarray]"
                ],
                "layer_norm": [
                    "bytes",
                    "bool",
                    "Optional[dict]",
                    "int",
                    "apps.common.coininfo.CoinInfo",
                    "List[int]"
                ],
                "gate_style": [
                    "bytes",
                    "bool",
                    "Optional[dict]",
                    "int",
                    "apps.common.coininfo.CoinInfo",
                    "List[int]"
                ],
                "treat_input_as_sequence": [
                    "bytes",
                    "bool",
                    "Optional[dict]",
                    "int",
                    "apps.common.coininfo.CoinInfo",
                    "List[int]"
                ],
                "use_cross_attention": [
                    "bool"
                ],
                "return_attention_weights": [
                    "bool",
                    "int",
                    "Mapping[str, Any]",
                    "str"
                ],
                "kernel_initializer": [
                    "numpy.ndarray",
                    "int",
                    "str",
                    "Optional[float]",
                    "Optional[tensorflow.keras.initializers.Initializer]"
                ],
                "kernel_regularizer": [
                    "Optional[numpy.ndarray]"
                ],
                "bias_regularizer": [
                    "Optional[numpy.ndarray]"
                ],
                "activity_regularizer": [
                    "Optional[numpy.ndarray]"
                ]
            }
        },
        "RelationalMemoryCoreCell.get_initial_state": {
            "name": "get_initial_state",
            "location": 233,
            "return": [
                "tuple",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Optional[int]",
                    "Optional[List[Any]]",
                    "Optional[str]",
                    "int",
                    "float"
                ],
                "batch_size": [
                    "int",
                    "Optional[int]",
                    "Callable[[str], int]",
                    "Union[int, None]"
                ],
                "dtype": [
                    "Optional[bytes]",
                    "int",
                    "float",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "RelationalMemoryCoreCell.get_initial_state_numpy": {
            "name": "get_initial_state_numpy",
            "location": 265,
            "return": [
                "int",
                "str",
                "bool",
                "Callable",
                "float"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "RelationalMemoryCoreCell._calculate_gate_size": {
            "name": "_calculate_gate_size",
            "location": 275,
            "return": [
                "int",
                "str",
                "List[float]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelationalMemoryCoreCell.create_gates": {
            "name": "create_gates",
            "location": 289,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "bool",
                    "float"
                ],
                "memory": [
                    "bool",
                    "float"
                ]
            }
        },
        "RelationalMemoryCoreCell.build": {
            "name": "build",
            "location": 325,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_shape": [
                    "bool",
                    "list",
                    "Iterable[str]"
                ]
            }
        },
        "RelationalMemoryCoreCell.call": {
            "name": "call",
            "location": 328,
            "return": [
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Set[str]"
                ],
                "states": [
                    "int"
                ]
            }
        },
        "RelationalMemoryCore.__init__": {
            "name": "__init__",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mem_slots": [
                    "int",
                    "bool",
                    "Optional[tensorflow.keras.regularizers.Regularizer]",
                    "str",
                    "Optional[float]",
                    "Optional[tensorflow.keras.initializers.Initializer]"
                ],
                "mem_size": [
                    "int",
                    "bool",
                    "Optional[tensorflow.keras.regularizers.Regularizer]",
                    "str",
                    "Optional[float]",
                    "Optional[tensorflow.keras.initializers.Initializer]"
                ],
                "n_heads": [
                    "int",
                    "bool",
                    "Optional[tensorflow.keras.regularizers.Regularizer]",
                    "str",
                    "Optional[float]",
                    "Optional[tensorflow.keras.initializers.Initializer]"
                ],
                "key_size": [
                    "int",
                    "bool",
                    "Optional[tensorflow.keras.regularizers.Regularizer]",
                    "str",
                    "Optional[float]",
                    "Optional[tensorflow.keras.initializers.Initializer]"
                ],
                "forget_bias": [
                    "int",
                    "bool",
                    "Optional[tensorflow.keras.regularizers.Regularizer]",
                    "str",
                    "Optional[float]",
                    "Optional[tensorflow.keras.initializers.Initializer]"
                ],
                "input_bias": [
                    "int",
                    "bool",
                    "Optional[tensorflow.keras.regularizers.Regularizer]",
                    "str",
                    "Optional[float]",
                    "Optional[tensorflow.keras.initializers.Initializer]"
                ],
                "dropout": [
                    "int",
                    "bool",
                    "Optional[tensorflow.keras.regularizers.Regularizer]",
                    "str",
                    "Optional[float]",
                    "Optional[tensorflow.keras.initializers.Initializer]"
                ],
                "layer_norm": [
                    "int",
                    "bool",
                    "Optional[tensorflow.keras.regularizers.Regularizer]",
                    "str",
                    "Optional[float]",
                    "Optional[tensorflow.keras.initializers.Initializer]"
                ],
                "gate_style": [
                    "int",
                    "bool",
                    "Optional[tensorflow.keras.regularizers.Regularizer]",
                    "str",
                    "Optional[float]",
                    "Optional[tensorflow.keras.initializers.Initializer]"
                ],
                "treat_input_as_sequence": [
                    "int",
                    "bool",
                    "Optional[tensorflow.keras.regularizers.Regularizer]",
                    "str",
                    "Optional[float]",
                    "Optional[tensorflow.keras.initializers.Initializer]"
                ],
                "use_cross_attention": [
                    "int",
                    "bool",
                    "Optional[tensorflow.keras.regularizers.Regularizer]",
                    "str",
                    "Optional[float]",
                    "Optional[tensorflow.keras.initializers.Initializer]"
                ],
                "return_attention_weights": [
                    "int",
                    "bool",
                    "Optional[tensorflow.keras.regularizers.Regularizer]",
                    "str",
                    "Optional[float]",
                    "Optional[tensorflow.keras.initializers.Initializer]"
                ],
                "kernel_initializer": [
                    "int",
                    "bool",
                    "Optional[tensorflow.keras.regularizers.Regularizer]",
                    "str",
                    "Optional[float]",
                    "Optional[tensorflow.keras.initializers.Initializer]"
                ],
                "kernel_regularizer": [
                    "int",
                    "bool",
                    "Optional[tensorflow.keras.regularizers.Regularizer]",
                    "str",
                    "Optional[float]",
                    "Optional[tensorflow.keras.initializers.Initializer]"
                ],
                "bias_regularizer": [
                    "int",
                    "bool",
                    "Optional[tensorflow.keras.regularizers.Regularizer]",
                    "str",
                    "Optional[float]",
                    "Optional[tensorflow.keras.initializers.Initializer]"
                ],
                "activity_regularizer": [
                    "int",
                    "bool",
                    "Optional[tensorflow.keras.regularizers.Regularizer]",
                    "str",
                    "Optional[float]",
                    "Optional[tensorflow.keras.initializers.Initializer]"
                ],
                "return_sequences": [
                    "bool",
                    "Optional[float]",
                    "int"
                ],
                "return_state": [
                    "bool",
                    "Optional[float]",
                    "int"
                ],
                "go_backwards": [
                    "bool",
                    "Optional[float]",
                    "int"
                ],
                "stateful": [
                    "bool",
                    "Optional[float]",
                    "int"
                ],
                "unroll": [
                    "bool",
                    "Optional[float]",
                    "int"
                ]
            }
        },
        "RelationalMemoryCore.get_initial_state_numpy": {
            "name": "get_initial_state_numpy",
            "location": 441,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "RelationalMemoryCore.mem_slots": {
            "name": "mem_slots",
            "location": 445,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelationalMemoryCore.mem_size": {
            "name": "mem_size",
            "location": 449,
            "return": [
                "str",
                "bytes",
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "RelationalMemoryCore.n_heads": {
            "name": "n_heads",
            "location": 453,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/models/__init__.py": {},
    "rinokeras-master/rinokeras/core/v1x/models/qanet/qanet.py": {
        "QANet.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d_model": [
                    "int",
                    "numpy.ndarray"
                ],
                "n_heads": [
                    "list",
                    "Optional[float]",
                    "int",
                    "numpy.ndarray"
                ],
                "d_filter": [
                    "Optional[str]",
                    "int",
                    "Optional[int]"
                ],
                "char_limit": [
                    "int",
                    "bool",
                    "str",
                    "float"
                ],
                "dropout": [
                    "int"
                ],
                "n_symbols": [
                    "Optional[int]",
                    "numpy.ndarray",
                    "int",
                    "Optional[float]"
                ],
                "n_symbols_out": [
                    "int",
                    "tuple"
                ],
                "n_chars": [
                    "int",
                    "Optional[int]",
                    "Optional[float]",
                    "str",
                    "numpy.ndarray"
                ],
                "word_embed_matrix": [
                    "numpy.ndarray",
                    "Optional[int]",
                    "int",
                    "Optional[List[int]]",
                    "Optional[float]",
                    "str"
                ],
                "char_embed_matrix": [
                    "Optional[int]",
                    "numpy.ndarray",
                    "int",
                    "Optional[str]",
                    "str",
                    "Optional[List[int]]"
                ],
                "kernel_regularizer": [
                    "int"
                ],
                "bias_regularizer": [
                    "int"
                ],
                "activity_regularizer": [
                    "int"
                ]
            }
        },
        "QANet.call": {
            "name": "call",
            "location": 132,
            "return": [
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "dict"
                ],
                "mask": [
                    "Callable",
                    "int",
                    "float"
                ]
            }
        },
        "QANet._convert_padding_masks_to_context_query_mask": {
            "name": "_convert_padding_masks_to_context_query_mask",
            "location": 179,
            "return": [
                "Dict[str, int]",
                "Optional[int]",
                "bool",
                "numpy.ndarray",
                "Model",
                "rflx.model.Model"
            ],
            "arguments": {
                "self": [],
                "query_mask": [
                    "Optional[str]",
                    "str",
                    "T",
                    "List[int]",
                    "int"
                ],
                "context_mask": [
                    "Optional[str]",
                    "str",
                    "T",
                    "List[int]",
                    "int"
                ]
            }
        },
        "QANet.get_config": {
            "name": "get_config",
            "location": 182,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QANet.from_config": {
            "name": "from_config",
            "location": 203,
            "return": [
                "Sequence[int]",
                "numpy.ndarray",
                "int",
                "Set[str]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "list",
                    "List[Dict[str, str]]",
                    "Iterable[Iterable[str]]",
                    "Iterable[Any]"
                ],
                "config": [
                    "Optional[int]"
                ]
            }
        },
        "QANet.call.get_mask_and_length": {
            "name": "get_mask_and_length",
            "location": 147,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "array": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/models/qanet/qanet_attention.py": {
        "QANetSelfAttention.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_heads": [
                    "int"
                ],
                "dropout": [
                    "int"
                ],
                "kernel_regularizer": [
                    "int"
                ],
                "bias_regularizer": [
                    "int"
                ],
                "activity_regularizer": [
                    "int"
                ]
            }
        },
        "QANetSelfAttention.call": {
            "name": "call",
            "location": 41,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Callable",
                    "int",
                    "float"
                ],
                "mask": [
                    "Callable",
                    "int",
                    "float"
                ]
            }
        },
        "QANetSelfAttention.get_config": {
            "name": "get_config",
            "location": 55,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QANetSelfAttention.from_config": {
            "name": "from_config",
            "location": 69,
            "return": [
                "Optional[dict]",
                "str",
                "Dict[str, str]",
                "Optional[Dict]",
                "OrderedDict"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Type[T]",
                    "Dict[str, Any]"
                ],
                "config": [
                    "bool",
                    "Type[T]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/models/qanet/qanet_embedding.py": {
        "QANetInputEmbedding.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d_model": [
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "word_embed_initializer": [
                    "int",
                    "str"
                ],
                "char_embed_initializer": [
                    "int",
                    "str",
                    "bytes",
                    "float"
                ],
                "dropout": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "batch_norm": [
                    "bool",
                    "Optional[str]",
                    "float",
                    "str",
                    "Union[int, str]",
                    "Union[None, str, Pattern[str]]"
                ],
                "kernel_regularizer": [
                    "int",
                    "Tuple[int, int, int]",
                    "float"
                ],
                "bias_regularizer": [
                    "int",
                    "Tuple[int, int, int]",
                    "float"
                ],
                "activity_regularizer": [
                    "int",
                    "Tuple[int, int, int]",
                    "float"
                ]
            }
        },
        "QANetInputEmbedding.call": {
            "name": "call",
            "location": 81,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Callable",
                    "int",
                    "float"
                ]
            }
        },
        "QANetInputEmbedding.get_config": {
            "name": "get_config",
            "location": 124,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QANetInputEmbedding.from_config": {
            "name": "from_config",
            "location": 141,
            "return": [
                "Sequence[int]",
                "numpy.ndarray",
                "int",
                "Set[str]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "list",
                    "List[Dict[str, str]]",
                    "Iterable[Iterable[str]]",
                    "Iterable[Any]"
                ],
                "config": [
                    "Optional[int]"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/models/qanet/qanet_encoder.py": {
        "QANetEncoderBlock.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_conv": [
                    "int",
                    "Optional[int]",
                    "bool",
                    "float"
                ],
                "n_heads": [
                    "nevergrad.common.Optional[int]",
                    "float",
                    "int",
                    "str",
                    "bool",
                    "tuple"
                ],
                "filter_size": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "bool"
                ],
                "hidden_size": [
                    "int",
                    "bytes",
                    "str"
                ],
                "kernel_size": [
                    "int",
                    "bytes",
                    "str"
                ],
                "dropout": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "layer_dropout": [
                    "int",
                    "Optional[int]",
                    "bool",
                    "float"
                ],
                "kernel_regularizer": [
                    "int",
                    "str",
                    "Dict[str, float]",
                    "dict",
                    "Dict[str, Any]"
                ],
                "bias_regularizer": [
                    "int",
                    "str",
                    "Dict[str, float]",
                    "dict",
                    "Dict[str, Any]"
                ],
                "activity_regularizer": [
                    "int",
                    "str",
                    "Dict[str, float]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "QANetEncoderBlock.call": {
            "name": "call",
            "location": 57,
            "return": [
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Callable",
                    "int",
                    "float"
                ],
                "mask": [
                    "Optional[str]",
                    "type"
                ]
            }
        },
        "QANetEncoderBlock.get_config": {
            "name": "get_config",
            "location": 86,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QANetEncoderBlock.from_config": {
            "name": "from_config",
            "location": 105,
            "return": [
                "Optional[dict]",
                "str",
                "Dict[str, str]",
                "Optional[Dict]",
                "OrderedDict"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Type[T]",
                    "Dict[str, Any]"
                ],
                "config": [
                    "bool",
                    "Type[T]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/models/qanet/qanet_ff.py": {
        "QANetFeedForward.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filter_size": [
                    "int",
                    "Optional[int]"
                ],
                "hidden_size": [
                    "int",
                    "Optional[int]"
                ],
                "dropout": [
                    "Optional[str]",
                    "float",
                    "Optional[float]",
                    "Optional[int]",
                    "Optional[List[int]]",
                    "bool",
                    "Optional[List[str]]"
                ],
                "kernel_regularizer": [
                    "int",
                    "List[str]",
                    "List[int]"
                ],
                "bias_regularizer": [
                    "int",
                    "List[str]",
                    "List[int]"
                ],
                "activity_regularizer": [
                    "int",
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "QANetFeedForward.call": {
            "name": "call",
            "location": 49,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Callable",
                    "int",
                    "float"
                ]
            }
        },
        "QANetFeedForward.get_config": {
            "name": "get_config",
            "location": 62,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QANetFeedForward.from_config": {
            "name": "from_config",
            "location": 77,
            "return": [
                "Optional[dict]",
                "str",
                "Dict[str, str]",
                "Optional[Dict]",
                "OrderedDict"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Type[T]",
                    "Dict[str, Any]"
                ],
                "config": [
                    "bool",
                    "Type[T]",
                    "Dict[str, Any]"
                ]
            }
        },
        "QANetConvBlock.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filters": [
                    "int"
                ],
                "kernel_size": [
                    "int",
                    "bool",
                    "tensorflow.Tensor"
                ],
                "dropout": [
                    "Optional[float]",
                    "Optional[bytes]",
                    "Optional[int]",
                    "Optional[bool]"
                ],
                "kernel_regularizer": [
                    "int",
                    "Set[Tuple[str, ...]]",
                    "float",
                    "List[str]"
                ],
                "bias_regularizer": [
                    "Dict[str, int]",
                    "str",
                    "int"
                ],
                "activity_regularizer": [
                    "Dict[str, int]",
                    "str",
                    "int"
                ]
            }
        },
        "QANetConvBlock.call": {
            "name": "call",
            "location": 119,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Callable",
                    "int",
                    "float"
                ],
                "mask": [
                    "Optional[\"Outcome\"]"
                ]
            }
        },
        "QANetConvBlock.get_config": {
            "name": "get_config",
            "location": 138,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QANetConvBlock.from_config": {
            "name": "from_config",
            "location": 153,
            "return": [
                "Optional[dict]",
                "str",
                "Dict[str, str]",
                "Optional[Dict]",
                "OrderedDict"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Type[T]",
                    "Dict[str, Any]"
                ],
                "config": [
                    "bool",
                    "Type[T]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/models/qanet/__init__.py": {},
    "rinokeras-master/rinokeras/core/v1x/models/resnet/resnet.py": {
        "ResidualBlock.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cardinality": [
                    "int",
                    "Set[Tuple[str, ...]]",
                    "Optional[int]"
                ],
                "n_filters_in": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "n_filters_out": [
                    "int",
                    "float",
                    "str"
                ],
                "kernel_size": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "stride": [
                    "float",
                    "bool",
                    "str",
                    "int"
                ],
                "use_layernorm": [
                    "bool",
                    "Set[int]"
                ],
                "activation_fn": [
                    "str",
                    "bool",
                    "List[int]",
                    "List[str]",
                    "Optional[str]"
                ],
                "project_shortcut": [
                    "dict",
                    "Sequence[str]",
                    "Dict[str, Dict[str, Any]]",
                    "List[float]",
                    "Dict[str, List[Any]]",
                    "List[str]",
                    "str",
                    "Dict[str, Dict[str, str]]"
                ],
                "alpha": [
                    "float",
                    "int",
                    "nevergrad.common.Optional[int]"
                ]
            }
        },
        "ResidualBlock.call": {
            "name": "call",
            "location": 44,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Callable",
                    "int",
                    "float"
                ]
            }
        },
        "ResNeXt50.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "use_layer_norm": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/models/resnet/__init__.py": {},
    "rinokeras-master/rinokeras/core/v1x/models/rmc/masked_rmc.py": {},
    "rinokeras-master/rinokeras/core/v1x/models/rmc/rmc.py": {},
    "rinokeras-master/rinokeras/core/v1x/models/rmc/rmc_cell.py": {},
    "rinokeras-master/rinokeras/core/v1x/models/rmc/__init__.py": {},
    "rinokeras-master/rinokeras/core/v1x/models/transformer/transformer.py": {
        "Transformer.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_dummy": [
                    "tuple",
                    "Optional[int]",
                    "int",
                    "Optional[List[Any]]",
                    "Optional[str]",
                    "Optional[numpy.ndarray]"
                ],
                "n_layers": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "n_heads": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "d_model": [
                    "int"
                ],
                "d_filter": [
                    "int",
                    "Optional[float]",
                    "bool"
                ],
                "discrete": [
                    "float",
                    "str",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "n_symbols_in": [
                    "bool",
                    "str",
                    "Callable",
                    "Optional[str]"
                ],
                "n_symbols_out": [
                    "Optional[Callable]",
                    "Optional[bool]",
                    "int"
                ],
                "out_size": [
                    "int",
                    "Union[str, Tuple[str, str]]"
                ],
                "output_activation": [
                    "int",
                    "List[int]",
                    "str"
                ],
                "multiply_with_embedding_transpose": [
                    "int",
                    "list",
                    "float"
                ],
                "output_layer": [
                    "int",
                    "Optional[int]",
                    "float",
                    "Callable"
                ],
                "dropout": [
                    "Optional[int]"
                ],
                "layer_dropout": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "embedding_initializer": [
                    "int",
                    "bool"
                ],
                "use_preembedded_vectors": [],
                "share_source_target_embedding": [
                    "Dict[str, Tuple[int, int]]",
                    "int",
                    "bool",
                    "Set[str]",
                    "List[str]",
                    "Dict[str, str]",
                    "str"
                ],
                "concat_position_encoding": [
                    "int",
                    "str",
                    "bool"
                ],
                "position_encoding_expands_dims": [
                    "str",
                    "bool",
                    "int"
                ],
                "encoder_use_position_encoding": [
                    "int",
                    "bool",
                    "str"
                ],
                "use_weight_norm": [
                    "int",
                    "Optional[float]",
                    "list"
                ],
                "kernel_regularizer": [
                    "Dict[int, Dict[int, Any]]",
                    "int"
                ],
                "bias_regularizer": [
                    "Dict[int, Dict[int, Any]]",
                    "int"
                ],
                "activity_regularizer": [
                    "Dict[int, Dict[int, Any]]",
                    "int"
                ]
            }
        },
        "Transformer.test_decode": {
            "name": "test_decode",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "source_sequence": [
                    "Optional[str]"
                ],
                "max_seq_len": [
                    "int"
                ],
                "encoder_mask": [
                    "Optional[str]"
                ],
                "initial_input": [
                    "int"
                ],
                "preembed_hook": [
                    "bool",
                    "Callable[[str], None]",
                    "str"
                ]
            }
        },
        "Transformer.beam_decode": {
            "name": "beam_decode",
            "location": 212,
            "return": [
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "source_sequence": [
                    "int",
                    "bool",
                    "numpy.ndarray"
                ],
                "max_seq_len": [
                    "int",
                    "numpy.ndarray",
                    "bool",
                    "str"
                ],
                "encoder_mask": [
                    "int",
                    "bool",
                    "numpy.ndarray"
                ],
                "initial_input": [
                    "int",
                    "numpy.ndarray",
                    "bool",
                    "str"
                ],
                "n_beams": [
                    "int",
                    "numpy.ndarray",
                    "bool",
                    "str"
                ]
            }
        },
        "Transformer.call": {
            "name": "call",
            "location": 220,
            "return": [
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "BaseException",
                    "List[T]",
                    "Iterable[T]"
                ],
                "mask": [
                    "Optional[int]"
                ],
                "shift_target_sequence_right": [
                    "int",
                    "callable",
                    "bool",
                    "list"
                ],
                "mask_future": [
                    "int",
                    "callable",
                    "bool",
                    "list"
                ]
            }
        },
        "Transformer.get_config": {
            "name": "get_config",
            "location": 269,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transformer.from_config": {
            "name": "from_config",
            "location": 310,
            "return": [
                "Union[str, IO]",
                "str",
                "core.D.VersionedIdentifier",
                "IO[str]",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "bool",
                    "int",
                    "list"
                ],
                "config": [
                    "Optional[Iterable[str]]",
                    "core.Config",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/models/transformer/transformer_attention.py": {
        "TransformerSelfAttention.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_heads": [
                    "bool",
                    "float",
                    "int"
                ],
                "dropout": [
                    "Optional[tensorflow.keras.regularizers.Regularizer]",
                    "bool",
                    "Optional[tensorflow.keras.initializers.Initializer]",
                    "float",
                    "int"
                ],
                "key_size": [
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "use_residual_norm": [
                    "bool"
                ],
                "kernel_initializer": [
                    "Optional[tensorflow.keras.regularizers.Regularizer]",
                    "bool",
                    "Optional[tensorflow.keras.initializers.Initializer]",
                    "int",
                    "Optional[float]",
                    "float"
                ],
                "kernel_regularizer": [
                    "Optional[tensorflow.keras.regularizers.Regularizer]",
                    "bool",
                    "Optional[tensorflow.keras.initializers.Initializer]",
                    "int",
                    "Optional[float]",
                    "float"
                ],
                "bias_regularizer": [
                    "Optional[tensorflow.keras.regularizers.Regularizer]",
                    "bool",
                    "Optional[tensorflow.keras.initializers.Initializer]",
                    "int",
                    "Optional[float]",
                    "float"
                ],
                "activity_regularizer": [
                    "Optional[tensorflow.keras.regularizers.Regularizer]",
                    "bool",
                    "Optional[tensorflow.keras.initializers.Initializer]",
                    "int",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "TransformerSelfAttention.call": {
            "name": "call",
            "location": 44,
            "return": [
                "Callable",
                "List[float]",
                "str"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Optional[dict]",
                    "Dict[str, Any]",
                    "str",
                    "int"
                ],
                "mask": [
                    "bytes",
                    "str"
                ],
                "return_attention_weights": [
                    "bytes",
                    "str"
                ]
            }
        },
        "TransformerSelfAttention.get_config": {
            "name": "get_config",
            "location": 58,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformerSelfAttention.from_config": {
            "name": "from_config",
            "location": 76,
            "return": [
                "Optional[dict]",
                "str",
                "Dict[str, str]",
                "Optional[Dict]",
                "OrderedDict"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Type[T]",
                    "Dict[str, Any]"
                ],
                "config": [
                    "bool",
                    "Type[T]",
                    "Dict[str, Any]"
                ]
            }
        },
        "TransformerMultiAttention.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_heads": [
                    "Dict[Any, int]",
                    "gluonts.model.common.Tensor",
                    "bytes",
                    "bool",
                    "boucanpy.core.api_token.ApiTokenRepo",
                    "int",
                    "Sequence[int]"
                ],
                "dropout": [
                    "bool",
                    "Optional[int]",
                    "float",
                    "int",
                    "List[str]"
                ],
                "key_size": [
                    "int",
                    "bool"
                ],
                "use_residual_norm": [
                    "bool"
                ],
                "kernel_initializer": [
                    "bool",
                    "Tuple[int, int]",
                    "int",
                    "tuple",
                    "float"
                ],
                "kernel_regularizer": [
                    "bool",
                    "Tuple[int, int]",
                    "int",
                    "tuple",
                    "float"
                ],
                "bias_regularizer": [
                    "bool",
                    "Tuple[int, int]",
                    "int",
                    "tuple",
                    "float"
                ],
                "activity_regularizer": [
                    "bool",
                    "Tuple[int, int]",
                    "int",
                    "tuple",
                    "float"
                ]
            }
        },
        "TransformerMultiAttention.call": {
            "name": "call",
            "location": 112,
            "return": [
                "Callable",
                "List[float]",
                "str"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "bytes",
                    "type",
                    "str",
                    "T",
                    "Exception"
                ],
                "mask": [
                    "keras.Model"
                ],
                "return_attention_weights": [
                    "keras.Model"
                ]
            }
        },
        "TransformerMultiAttention.get_config": {
            "name": "get_config",
            "location": 127,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformerMultiAttention.from_config": {
            "name": "from_config",
            "location": 145,
            "return": [
                "Optional[dict]",
                "str",
                "Dict[str, str]",
                "Optional[Dict]",
                "OrderedDict"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Type[T]",
                    "Dict[str, Any]"
                ],
                "config": [
                    "bool",
                    "Type[T]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/models/transformer/transformer_decoder.py": {
        "TransformerDecoderBlock.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_heads": [
                    "int",
                    "bool",
                    "Optional[\"GraphLogger\"]"
                ],
                "filter_size": [
                    "int",
                    "float",
                    "Optional[tensorflow.keras.initializers.Initializer]",
                    "Optional[int]",
                    "str"
                ],
                "hidden_size": [
                    "int",
                    "float",
                    "Optional[tensorflow.keras.initializers.Initializer]",
                    "Optional[int]",
                    "str"
                ],
                "dropout": [
                    "int",
                    "bool",
                    "Optional[\"GraphLogger\"]"
                ],
                "layer_dropout": [
                    "float",
                    "int",
                    "bool",
                    "str"
                ],
                "use_weight_norm": [
                    "Tuple[int, int]",
                    "str",
                    "bool",
                    "\"Vec3\""
                ],
                "kernel_initializer": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "Dict[str, Optional[str]]",
                    "bool",
                    "Dict[str, int]"
                ],
                "kernel_regularizer": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "Dict[str, Optional[str]]",
                    "bool",
                    "Dict[str, int]"
                ],
                "bias_regularizer": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "Dict[str, Optional[str]]",
                    "bool",
                    "Dict[str, int]"
                ],
                "activity_regularizer": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "Dict[str, Optional[str]]",
                    "bool",
                    "Dict[str, int]"
                ]
            }
        },
        "TransformerDecoderBlock.call": {
            "name": "call",
            "location": 87,
            "return": [
                "Callable",
                "List[float]",
                "str"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "bool",
                    "Hashable",
                    "List[str]",
                    "allennlp.common.util.JsonDict"
                ],
                "mask": []
            }
        },
        "TransformerDecoderBlock.get_config": {
            "name": "get_config",
            "location": 148,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformerDecoderBlock.from_config": {
            "name": "from_config",
            "location": 168,
            "return": [
                "Optional[dict]",
                "str",
                "Dict[str, str]",
                "Optional[Dict]",
                "OrderedDict"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Type[T]",
                    "Dict[str, Any]"
                ],
                "config": [
                    "bool",
                    "Type[T]",
                    "Dict[str, Any]"
                ]
            }
        },
        "TransformerDecoder.__init__": {
            "name": "__init__",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embedding_layer": [
                    "Optional[int]",
                    "int",
                    "str"
                ],
                "output_layer": [
                    "int",
                    "List[str]"
                ],
                "n_layers": [
                    "int"
                ],
                "n_heads": [
                    "int"
                ],
                "d_model": [
                    "int",
                    "bool"
                ],
                "d_filter": [
                    "int",
                    "Optional[float]",
                    "bool"
                ],
                "dropout": [
                    "bool",
                    "str",
                    "pymatgen.core.structure.Structure"
                ],
                "layer_dropout": [
                    "int"
                ],
                "use_weight_norm": [
                    "int",
                    "bool",
                    "Optional[float]"
                ],
                "kernel_initializer": [
                    "str",
                    "bool",
                    "Dict[int, dict]",
                    "Union[int, str]"
                ],
                "kernel_regularizer": [
                    "str",
                    "bool",
                    "Dict[int, dict]",
                    "Union[int, str]"
                ],
                "bias_regularizer": [
                    "str",
                    "bool",
                    "Dict[int, dict]",
                    "Union[int, str]"
                ],
                "activity_regularizer": [
                    "str",
                    "bool",
                    "Dict[int, dict]",
                    "Union[int, str]"
                ]
            }
        },
        "TransformerDecoder.call": {
            "name": "call",
            "location": 224,
            "return": [
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "IO[bytes]"
                ],
                "mask": [],
                "mask_future": [],
                "shift_target_sequence_right": [
                    "dict"
                ],
                "seqpos": [
                    "Iterable[Any]"
                ],
                "cache": [
                    "Optional[bytes]",
                    "tensorflow.Tensor",
                    "Optional[str]"
                ]
            }
        },
        "TransformerDecoder.fast_decode": {
            "name": "fast_decode",
            "location": 294,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "encoder_output": [
                    "bool",
                    "float",
                    "Type[BaseException]"
                ],
                "max_seq_len": [
                    "int",
                    "float"
                ],
                "output_size": [
                    "Sequence[float]",
                    "int",
                    "Optional[Callable[[List], Any]]",
                    "Optional[int]",
                    "List[int]"
                ],
                "output_dtype": [
                    "bool",
                    "float",
                    "Type[BaseException]"
                ],
                "encoder_mask": [
                    "bool",
                    "float",
                    "Type[BaseException]"
                ],
                "initial_input": [
                    "int"
                ],
                "preembed_hook": [
                    "bool",
                    "float",
                    "Type[BaseException]"
                ],
                "stopping_criterion": [
                    "bool",
                    "float",
                    "Type[BaseException]"
                ]
            }
        },
        "TransformerDecoder.tile_for_beams": {
            "name": "tile_for_beams",
            "location": 383,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "tensor": [
                    "int",
                    "bool",
                    "Iterable[T]"
                ],
                "n_beams": [
                    "int",
                    "bool",
                    "Iterable[T]"
                ]
            }
        },
        "TransformerDecoder.fast_beam_decode": {
            "name": "fast_beam_decode",
            "location": 390,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "encoder_output": [
                    "Optional[List[int]]"
                ],
                "max_seq_len": [
                    "bool",
                    "Union[int, float]",
                    "float",
                    "int"
                ],
                "batch_size": [
                    "int",
                    "nevergrad.common.Optional[int]",
                    "Optional[int]"
                ],
                "n_beams": [
                    "List[int]",
                    "float",
                    "int",
                    "Callable[[str, str], float]"
                ],
                "output_dtype": [
                    "int",
                    "nevergrad.common.Optional[int]"
                ],
                "initial_input": [
                    "int",
                    "Optional[float]",
                    "Optional[int]"
                ],
                "preembed_hook": [
                    "bool",
                    "float",
                    "int"
                ],
                "stopping_criterion": [
                    "bool",
                    "float",
                    "int"
                ],
                "encoder_mask": [
                    "Optional[int]",
                    "List[str]",
                    "Optional[str]",
                    "bool"
                ],
                "sample": [
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "TransformerDecoder.get_initial_cache": {
            "name": "get_initial_cache",
            "location": 545,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "str",
                    "int",
                    "List[List[int]]"
                ]
            }
        },
        "TransformerDecoder.get_config": {
            "name": "get_config",
            "location": 555,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformerDecoder.from_config": {
            "name": "from_config",
            "location": 584,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "config": [
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "TransformerDecoder.fast_decode.decoding_step": {
            "name": "decoding_step",
            "location": 320,
            "return": [],
            "arguments": {
                "seqpos": [],
                "inputs": [],
                "cache": [],
                "output_sequence": [],
                "is_finished": []
            }
        },
        "TransformerDecoder.fast_beam_decode.decoding_step": {
            "name": "decoding_step",
            "location": 396,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "seqpos": [
                    "int",
                    "str",
                    "bytes"
                ],
                "inputs": [
                    "Optional[int]",
                    "float",
                    "Optional[float]",
                    "str",
                    "Optional[str]"
                ],
                "cache": [
                    "Optional[float]",
                    "List[str]",
                    "str",
                    "bool",
                    "int",
                    "Optional[Union[Any, Any]]"
                ],
                "output_sequence": [
                    "float",
                    "int",
                    "str"
                ],
                "is_finished": [
                    "int",
                    "float",
                    "bool",
                    "list"
                ],
                "seq_length": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "Dict[str, Any]",
                    "Union[int, float]"
                ],
                "scores": [
                    "Tuple[int, int]",
                    "int",
                    "float",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "TransformerDecoder.fast_beam_decode.decoding_step.choose_beams": {
            "name": "choose_beams",
            "location": 438,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/core/v1x/models/transformer/transformer_embedding.py": {
        "TransformerInputEmbedding.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embed_size": [
                    "int"
                ],
                "discrete": [
                    "int",
                    "List[int]",
                    "bool",
                    "List[float]"
                ],
                "n_symbols": [
                    "Optional[int]",
                    "Sequence[str]",
                    "Optional[str]",
                    "bool",
                    "str",
                    "Optional[bool]"
                ],
                "dropout": [
                    "int",
                    "List[bytes]",
                    "Optional[str]",
                    "gluonts.core.componenDType",
                    "str"
                ],
                "batch_norm": [
                    "bool",
                    "str",
                    "List[int]",
                    "float",
                    "Dict[int, str]"
                ],
                "n_embed_layers": [
                    "int"
                ],
                "embedding_initializer": [
                    "int",
                    "Optional[float]",
                    "bool",
                    "Optional[str]",
                    "str",
                    "float"
                ],
                "freeze_embeddings": [
                    "bool",
                    "Tuple[int, int]",
                    "Dict[str, Any]",
                    "int",
                    "list"
                ],
                "use_position_encoding": [
                    "bool"
                ],
                "concat_position_encoding": [
                    "int",
                    "List[int]",
                    "bool",
                    "List[float]"
                ],
                "reproject_position_encoding": [
                    "int",
                    "List[int]",
                    "bool",
                    "List[float]"
                ],
                "kernel_regularizer": [
                    "int",
                    "bool"
                ],
                "bias_regularizer": [
                    "int",
                    "bool"
                ],
                "activity_regularizer": [
                    "int",
                    "bool"
                ]
            }
        },
        "TransformerInputEmbedding.call": {
            "name": "call",
            "location": 85,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "int",
                    "dict"
                ],
                "start": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "TransformerInputEmbedding.get_config": {
            "name": "get_config",
            "location": 106,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformerInputEmbedding.from_config": {
            "name": "from_config",
            "location": 131,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Type[T]",
                    "Dict[str, Any]"
                ],
                "config": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/models/transformer/transformer_encoder.py": {
        "TransformerEncoderBlock.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n_heads": [
                    "int",
                    "bool",
                    "Optional[\"GraphLogger\"]"
                ],
                "filter_size": [
                    "int",
                    "float",
                    "Optional[tensorflow.keras.initializers.Initializer]",
                    "Optional[int]",
                    "str"
                ],
                "hidden_size": [
                    "int",
                    "float",
                    "Optional[tensorflow.keras.initializers.Initializer]",
                    "Optional[int]",
                    "str"
                ],
                "conv_kernel_size": [
                    "int",
                    "float",
                    "Optional[tensorflow.keras.initializers.Initializer]",
                    "Optional[int]",
                    "str"
                ],
                "dropout": [
                    "int",
                    "bool",
                    "Optional[\"GraphLogger\"]"
                ],
                "layer_dropout": [
                    "float",
                    "int",
                    "bool",
                    "str"
                ],
                "use_conv": [
                    "int",
                    "Tuple[int]",
                    "str",
                    "float",
                    "Optional[tensorflow.keras.initializers.Initializer]",
                    "Optional[int]"
                ],
                "use_weight_norm": [
                    "Tuple[int, int]",
                    "str",
                    "bool"
                ],
                "kernel_initializer": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, Optional[str]]",
                    "raiden.utils.AdditionalHash",
                    "Dict[str, int]"
                ],
                "kernel_regularizer": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, Optional[str]]",
                    "raiden.utils.AdditionalHash",
                    "Dict[str, int]"
                ],
                "bias_regularizer": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, Optional[str]]",
                    "raiden.utils.AdditionalHash",
                    "Dict[str, int]"
                ],
                "activity_regularizer": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, Optional[str]]",
                    "raiden.utils.AdditionalHash",
                    "Dict[str, int]"
                ]
            }
        },
        "TransformerEncoderBlock.call": {
            "name": "call",
            "location": 72,
            "return": [
                "Callable",
                "List[float]",
                "str"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "float",
                    "int",
                    "str",
                    "Iterable[str]"
                ],
                "mask": [
                    "Callable"
                ],
                "return_attention_weights": [
                    "float",
                    "Optional[Iterable[T]]",
                    "bool",
                    "cmk.utils.type_defs.UserId"
                ]
            }
        },
        "TransformerEncoderBlock.get_config": {
            "name": "get_config",
            "location": 99,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformerEncoderBlock.from_config": {
            "name": "from_config",
            "location": 121,
            "return": [
                "Optional[dict]",
                "str",
                "Dict[str, str]",
                "Optional[Dict]",
                "OrderedDict"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Type[T]",
                    "Dict[str, Any]"
                ],
                "config": [
                    "bool",
                    "Type[T]",
                    "Dict[str, Any]"
                ]
            }
        },
        "TransformerEncoder.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embedding_layer": [
                    "int",
                    "bool"
                ],
                "n_layers": [
                    "float",
                    "int",
                    "Optional[int]"
                ],
                "n_heads": [
                    "float",
                    "int",
                    "Optional[int]"
                ],
                "d_model": [
                    "Dict[str, Any]",
                    "int",
                    "Dict[int, Any]",
                    "str",
                    "Union[int, str]"
                ],
                "d_filter": [
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "conv_kernel_size": [
                    "int",
                    "float",
                    "str"
                ],
                "dropout": [
                    "int",
                    "Tuple[int, int]",
                    "tuple",
                    "float"
                ],
                "layer_dropout": [
                    "float",
                    "int",
                    "Optional[int]"
                ],
                "use_conv": [
                    "bool",
                    "Optional[float]",
                    "int"
                ],
                "use_weight_norm": [
                    "bool",
                    "Optional[int]",
                    "int",
                    "Tuple[int]",
                    "float"
                ],
                "kernel_initializer": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "Exception",
                    "Union[int, str]"
                ],
                "kernel_regularizer": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "Exception",
                    "Union[int, str]"
                ],
                "bias_regularizer": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "Exception",
                    "Union[int, str]"
                ],
                "activity_regularizer": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "Exception",
                    "Union[int, str]"
                ]
            }
        },
        "TransformerEncoder.call": {
            "name": "call",
            "location": 183,
            "return": [
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Tuple[float, float]"
                ],
                "mask": [
                    "Optional[\"Outcome\"]",
                    "Callable"
                ]
            }
        },
        "TransformerEncoder.get_config": {
            "name": "get_config",
            "location": 247,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformerEncoder.from_config": {
            "name": "from_config",
            "location": 274,
            "return": [
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Type[T]",
                    "Dict[str, Any]"
                ],
                "config": [
                    "Optional[Iterable[str]]",
                    "dict",
                    "str"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/models/transformer/transformer_ff.py": {
        "TransformerFeedForward.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filter_size": [
                    "int",
                    "Optional[int]",
                    "List[int]"
                ],
                "hidden_size": [
                    "int",
                    "Optional[int]",
                    "List[int]"
                ],
                "kernel_size": [
                    "int",
                    "bool",
                    "Union[Tuple[int, int], int]",
                    "Tuple[int, int, int]"
                ],
                "dropout": [
                    "int",
                    "Set[int]",
                    "Optional[str]"
                ],
                "use_conv": [
                    "str",
                    "int",
                    "Dict[str, Tuple[str, int, int]]",
                    "Dict[str, Tuple[str, str, Any]]",
                    "Dict[int, str]",
                    "bool"
                ],
                "use_weight_norm": [
                    "bool"
                ],
                "use_residual_norm": [
                    "bool"
                ],
                "kernel_initializer": [
                    "Optional[str]",
                    "core.Game",
                    "Dict[str, int]",
                    "bool",
                    "int"
                ],
                "kernel_regularizer": [
                    "Optional[str]",
                    "core.Game",
                    "Dict[str, int]",
                    "bool",
                    "int"
                ],
                "bias_regularizer": [
                    "Optional[str]",
                    "core.Game",
                    "Dict[str, int]",
                    "bool",
                    "int"
                ],
                "activity_regularizer": [
                    "Optional[str]",
                    "core.Game",
                    "Dict[str, int]",
                    "bool",
                    "int"
                ]
            }
        },
        "TransformerFeedForward.call": {
            "name": "call",
            "location": 60,
            "return": [
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "int"
                ],
                "padding_mask": []
            }
        },
        "TransformerFeedForward.get_config": {
            "name": "get_config",
            "location": 72,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformerFeedForward.from_config": {
            "name": "from_config",
            "location": 93,
            "return": [
                "Optional[dict]",
                "str",
                "Dict[str, str]",
                "Optional[Dict]",
                "OrderedDict"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Type[T]",
                    "Dict[str, Any]"
                ],
                "config": [
                    "bool",
                    "Type[T]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/models/transformer/transformer_utils.py": {
        "shift_target_sequence_right": {
            "name": "shift_target_sequence_right",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "target_sequence": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "check_mask_shapes": {
            "name": "check_mask_shapes",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "encoder_mask": [
                    "Optional[str]",
                    "Optional[complex]"
                ],
                "decoder_mask": [
                    "Optional[str]",
                    "Optional[complex]"
                ]
            }
        },
        "get_future_mask": {
            "name": "get_future_mask",
            "location": 39,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "batch_size": [
                    "int",
                    "Optional[int]",
                    "str",
                    "Optional[str]"
                ],
                "sequence_length": [
                    "int",
                    "Optional[Callable]",
                    "float",
                    "Optional[float]"
                ]
            }
        },
        "get_self_attention_mask": {
            "name": "get_self_attention_mask",
            "location": 58,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "batch_size": [
                    "int",
                    "bool",
                    "str"
                ],
                "sequence_length": [
                    "int",
                    "bool",
                    "str"
                ],
                "decoder_mask": [
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "bool"
                ],
                "mask_future": [
                    "int",
                    "float",
                    "str",
                    "bytes",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "get_cross_attention_mask": {
            "name": "get_cross_attention_mask",
            "location": 71,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "encoder_output": [
                    "str",
                    "Optional[int]",
                    "int",
                    "Callable"
                ],
                "decoder_input": [
                    "str",
                    "float",
                    "bool",
                    "list"
                ],
                "encoder_mask": [
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]"
                ],
                "decoder_mask": [
                    "Any",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/models/transformer/__init__.py": {},
    "rinokeras-master/rinokeras/core/v1x/rl/LSTMPolicy.py": {
        "LSTMPolicy.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "num_outputs": [
                    "Optional[tensorflow.keras.regularizers.Regularizer]",
                    "int",
                    "str",
                    "float",
                    "Optional[float]",
                    "Optional[int]"
                ],
                "fcnet_hiddens": [
                    "Optional[tensorflow.keras.regularizers.Regularizer]",
                    "int",
                    "str",
                    "float",
                    "Optional[float]",
                    "Optional[int]"
                ],
                "fcnet_activation": [
                    "Optional[tensorflow.keras.regularizers.Regularizer]",
                    "int",
                    "str",
                    "float",
                    "Optional[float]",
                    "Optional[int]"
                ],
                "conv_filters": [
                    "Optional[tensorflow.keras.regularizers.Regularizer]",
                    "int",
                    "str",
                    "float",
                    "Optional[float]",
                    "Optional[int]"
                ],
                "conv_activation": [
                    "Optional[tensorflow.keras.regularizers.Regularizer]",
                    "int",
                    "str",
                    "float",
                    "Optional[float]",
                    "Optional[int]"
                ],
                "lstm_cell_size": [
                    "Optional[tensorflow.keras.regularizers.Regularizer]",
                    "int",
                    "str",
                    "float",
                    "Optional[float]",
                    "Optional[int]"
                ],
                "lstm_use_prev_action_reward": [
                    "Optional[tensorflow.keras.regularizers.Regularizer]",
                    "int",
                    "str",
                    "float",
                    "Optional[float]",
                    "Optional[int]"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/rl/MultiModelRayPolicy.py": {
        "register_mm_ray_policy": {
            "name": "register_mm_ray_policy",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "policy_model": [
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "networks": [
                    "Optional[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "register_mm_ray_policy.MMRayPolicy._build_layers_v2": {
            "name": "_build_layers_v2",
            "location": 29,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "input_dict": [
                    "Dict[str, Any]",
                    "dict",
                    "zerver.models.Realm",
                    "int",
                    "zilencer.models.RemoteZulipServer",
                    "src.pip_shims.models.PipVersion"
                ],
                "num_outputs": [
                    "str",
                    "int",
                    "dict"
                ],
                "options": [
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "register_mm_ray_policy.MMRayPolicy.custom_loss": {
            "name": "custom_loss",
            "location": 86,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "policy_loss": [
                    "str",
                    "List[Dict[str, Any]]",
                    "dep_check.models.Dependencies"
                ],
                "loss_inputs": [
                    "str",
                    "Optional[Any]",
                    "Dict[str, List]"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/rl/RayPolicy.py": {
        "ray_policy": {
            "name": "ray_policy",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "model": [
                    "tensorflow.keras.Model",
                    "str",
                    "allennlp.models.Model"
                ]
            }
        },
        "ray_policy.WrappedRayPolicy._build_layers_v2": {
            "name": "_build_layers_v2",
            "location": 18,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "input_dict": [
                    "Dict[str, Any]",
                    "float",
                    "src.pip_shims.models.PipVersion",
                    "int",
                    "numpy.ndarray"
                ],
                "num_outputs": [
                    "str",
                    "Optional[str]",
                    "Sequence[str]"
                ],
                "options": [
                    "str",
                    "Optional[str]",
                    "Sequence[str]"
                ]
            }
        },
        "ray_policy.WrappedRayPolicy.custom_loss": {
            "name": "custom_loss",
            "location": 43,
            "return": [
                "numpy.ndarray",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "policy_loss": [
                    "numpy.ndarray",
                    "bool",
                    "float",
                    "int",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "loss_inputs": [
                    "numpy.ndarray",
                    "bool",
                    "float",
                    "int",
                    "Optional[bool]",
                    "Optional[int]"
                ]
            }
        },
        "ray_policy.WrappedRayPolicy.custom_stats": {
            "name": "custom_stats",
            "location": 49,
            "return": [
                "numpy.ndarray",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/rl/RecurrentPolicy.py": {
        "RecurrentPolicy.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rnn_type": [
                    "str",
                    "bool",
                    "List[Dict]",
                    "int",
                    "Optional[int]"
                ],
                "num_outputs": [
                    "int",
                    "str",
                    "Sequence[int]",
                    "bool"
                ],
                "fcnet_hiddens": [
                    "str",
                    "Sequence[int]",
                    "int",
                    "bool"
                ],
                "fcnet_activation": [
                    "str",
                    "Sequence[int]",
                    "int",
                    "bool"
                ],
                "conv_filters": [
                    "str",
                    "Sequence[int]",
                    "int",
                    "bool"
                ],
                "conv_activation": [
                    "str",
                    "Sequence[int]",
                    "int",
                    "bool"
                ],
                "lstm_cell_size": [
                    "bool",
                    "str",
                    "Iterable[List[str]]",
                    "Iterable[List[Any]]",
                    "float",
                    "int"
                ],
                "lstm_use_prev_action_reward": [
                    "bool",
                    "int",
                    "Tuple[int, int]"
                ],
                "recurrent_args": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "RecurrentPolicy.call": {
            "name": "call",
            "location": 43,
            "return": [
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Sequence[str]",
                    "dict"
                ],
                "seqlens": [
                    "int"
                ],
                "initial_state": [
                    "tensorflow.Tensor"
                ]
            }
        },
        "RecurrentPolicy.get_initial_state": {
            "name": "get_initial_state",
            "location": 66,
            "return": [
                "zerver.models.Realm",
                "zerver.models.UserProfile",
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "dict"
                ]
            }
        },
        "RecurrentPolicy.state_size": {
            "name": "state_size",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/rl/StandardPolicy.py": {
        "StandardPolicy.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "num_outputs": [
                    "int",
                    "Sequence[int]",
                    "bool"
                ],
                "fcnet_hiddens": [
                    "int",
                    "tuple",
                    "float",
                    "Union[int, float]",
                    "Optional[float]"
                ],
                "fcnet_activation": [
                    "int",
                    "tuple",
                    "float",
                    "Union[int, float]",
                    "Optional[float]"
                ],
                "conv_filters": [
                    "Optional[int]",
                    "Optional[str]",
                    "bytes",
                    "int"
                ],
                "conv_activation": [
                    "int",
                    "Union[int, float]",
                    "bool",
                    "Callable"
                ]
            }
        },
        "StandardPolicy.call": {
            "name": "call",
            "location": 54,
            "return": [
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Sequence[str]",
                    "dict"
                ],
                "seqlens": [
                    "BaseException"
                ],
                "initial_state": [
                    "BaseException"
                ]
            }
        },
        "StandardPolicy.custom_loss": {
            "name": "custom_loss",
            "location": 69,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "policy_loss": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "loss_inputs": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "StandardPolicy.recurrent": {
            "name": "recurrent",
            "location": 89,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/rl/__init__.py": {
        "register_rinokeras_policies_with_ray": {
            "name": "register_rinokeras_policies_with_ray",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/core/v1x/train/EagerGraph.py": {
        "EagerGraph.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "optimizer": [
                    "int"
                ],
                "loss_function": [
                    "int"
                ],
                "grads_function": [
                    "int"
                ]
            }
        },
        "EagerGraph.run": {
            "name": "run",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "ops": [
                    "int",
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "EagerGraph.update": {
            "name": "update",
            "location": 38,
            "return": [
                "float",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EagerGraph.loss": {
            "name": "loss",
            "location": 53,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EagerGraph.default_operation": {
            "name": "default_operation",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[bytes]",
                    "Union[None, int, float]",
                    "Optional[Union[str, Any]]",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[IO]"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/train/Experiment.py": {
        "Experiment.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "int"
                ],
                "optimizer": [
                    "bool",
                    "int"
                ],
                "learning_rate": [
                    "bool",
                    "int"
                ],
                "gradient_clipping": [
                    "bool",
                    "int"
                ],
                "gradient_clipping_bounds": [
                    "bool",
                    "int"
                ],
                "return_loss_summaries": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Union[int, float]"
                ],
                "return_variable_summaries": [
                    "bool",
                    "Tuple[float, float]",
                    "type",
                    "Model"
                ],
                "return_grad_summaries": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Union[int, float]"
                ],
                "distribution_strategy": [
                    "bool",
                    "int"
                ],
                "use_memory_saving_gradients": [
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "Experiment.build_model": {
            "name": "build_model",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "bool",
                    "tensorflow.data.Dataset",
                    "str",
                    "list",
                    "Iterable[str]"
                ]
            }
        },
        "Experiment.loss_function": {
            "name": "loss_function",
            "location": 40,
            "return": [
                "int",
                "bool",
                "Iterator"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "List[str]",
                    "Sequence[Tuple[int, int]]",
                    "dict",
                    "Sequence[str]"
                ],
                "outputs": [
                    "List[str]",
                    "Sequence[Tuple[int, int]]",
                    "dict",
                    "Sequence[str]"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/train/memory_saving_gradients.py": {
        "gradients_speed": {
            "name": "gradients_speed",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ys": [
                    "float",
                    "int"
                ],
                "xs": [
                    "float",
                    "int"
                ],
                "grad_ys": [
                    "float",
                    "int"
                ]
            }
        },
        "gradients_memory": {
            "name": "gradients_memory",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ys": [
                    "float",
                    "int"
                ],
                "xs": [
                    "float",
                    "int"
                ],
                "grad_ys": [
                    "float",
                    "int"
                ]
            }
        },
        "gradients_collection": {
            "name": "gradients_collection",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ys": [
                    "float",
                    "int"
                ],
                "xs": [
                    "float",
                    "int"
                ],
                "grad_ys": [
                    "float",
                    "int"
                ]
            }
        },
        "gradients": {
            "name": "gradients",
            "location": 32,
            "return": [
                "dict",
                "str",
                "Dict[str, Any]",
                "List[Dict[str, Any]]",
                "OrderedDict[str, Any]"
            ],
            "arguments": {
                "ys": [
                    "tensorflow.Tensor",
                    "Tuple[tensorflow.Tensor]",
                    "bool",
                    "int",
                    "Iterable",
                    "str"
                ],
                "xs": [
                    "str",
                    "int",
                    "list",
                    "List[int]",
                    "Sequence[int]"
                ],
                "grad_ys": [
                    "tensorflow.Tensor",
                    "Tuple[tensorflow.Tensor]",
                    "bool",
                    "int",
                    "Iterable",
                    "str"
                ],
                "checkpoints": [
                    "tensorflow.Tensor",
                    "Tuple[tensorflow.Tensor]",
                    "bool",
                    "int",
                    "Iterable",
                    "str"
                ]
            }
        },
        "tf_toposort": {
            "name": "tf_toposort",
            "location": 302,
            "return": [
                "str",
                "float",
                "Union[List[str], List[Any]]"
            ],
            "arguments": {
                "ts": [
                    "numpy.ndarray",
                    "list",
                    "Iterable[List[T]]"
                ],
                "within_ops": [
                    "numpy.ndarray",
                    "float",
                    "Callable",
                    "Union[numbers.Real, numpy.ndarray]"
                ]
            }
        },
        "fast_backward_ops": {
            "name": "fast_backward_ops",
            "location": 320,
            "return": [
                "List[Dict]",
                "List[str]",
                "List[int]",
                "str",
                "List[List[Any]]"
            ],
            "arguments": {
                "within_ops": [
                    "numpy.array",
                    "bool",
                    "Optional[numpy.ndarray]",
                    "int",
                    "Dict[int, Dict[int, Any]]"
                ],
                "seed_ops": [
                    "int",
                    "Dict[str, int]",
                    "Sequence[numpy.ndarray]",
                    "Dict[int, Set[int]]",
                    "List[str]"
                ],
                "stop_at_ts": [
                    "Dict[str, int]",
                    "Optional[int]",
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "capture_ops": {
            "name": "capture_ops",
            "location": 326,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_to_op": {
            "name": "_to_op",
            "location": 342,
            "return": [
                "bool",
                "Callable",
                "tuple"
            ],
            "arguments": {
                "tensor_or_op": [
                    "Optional[str]",
                    "bool",
                    "int",
                    "Set[str]"
                ]
            }
        },
        "_to_ops": {
            "name": "_to_ops",
            "location": 347,
            "return": [
                "List[str]",
                "AbstractSet[Type[object]]",
                "str"
            ],
            "arguments": {
                "iterable": [
                    "numpy.ndarray",
                    "float"
                ]
            }
        },
        "_is_iterable": {
            "name": "_is_iterable",
            "location": 352,
            "return": [
                "bool"
            ],
            "arguments": {
                "o": [
                    "numpy.ndarray",
                    "List[int]",
                    "str"
                ]
            }
        },
        "debug_print": {
            "name": "debug_print",
            "location": 360,
            "return": [
                ""
            ],
            "arguments": {
                "s": [
                    "str",
                    "Tuple[Type]",
                    "Dict[str, Any]",
                    "Union[str, Pattern[str]]",
                    "list",
                    "List[str]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "format_ops": {
            "name": "format_ops",
            "location": 372,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "ops": [
                    "str"
                ],
                "sort_outputs": [
                    "bool"
                ]
            }
        },
        "my_add_control_inputs": {
            "name": "my_add_control_inputs",
            "location": 384,
            "return": [
                ""
            ],
            "arguments": {
                "wait_to_do_ops": [
                    "bool",
                    "Optional[List[str]]"
                ],
                "inputs_to_do_before": [
                    "Optional[str]"
                ]
            }
        },
        "gradients._unsparsify": {
            "name": "_unsparsify",
            "location": 281,
            "return": [
                "Dict[str, int]",
                "int",
                "dict"
            ],
            "arguments": {
                "x": [
                    "Awaitable[T]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "gradients.fixdims": {
            "name": "fixdims",
            "location": 98,
            "return": [
                "Optional[str]",
                "Optional[bytes]",
                "str"
            ],
            "arguments": {
                "t": [
                    "bool",
                    "tensorflow.Tensor",
                    "float",
                    "int"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/train/RinokerasGraph.py": {
        "RinokerasGraph.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RinokerasGraph._map_to_placeholders": {
            "name": "_map_to_placeholders",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "placeholders": [
                    "str",
                    "raiden.utils.Any",
                    "List[dict]",
                    "list"
                ],
                "inputs": [
                    "Dict[str, List[str]]",
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "bool"
                ],
                "feed_dict": [
                    "dict",
                    "Dict[str, Any]",
                    "starfish.core.types.SpotFindingResults",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "RinokerasGraph._get_feed_dict": {
            "name": "_get_feed_dict",
            "location": 48,
            "return": [
                "int",
                "Dict[str, Any]",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Optional[int]",
                    "Optional[float]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "RinokerasGraph._run_tensor": {
            "name": "_run_tensor",
            "location": 56,
            "return": [
                "str",
                "int",
                "Set[str]",
                "Mapping[str, int]",
                "bool",
                "\"Parameter\""
            ],
            "arguments": {
                "self": [],
                "ops": [
                    "dict",
                    "str",
                    "Tuple[Optional[float], Optional[float]]"
                ],
                "inputs": [
                    "dict",
                    "Dict[str, Any]",
                    "SendCh[trio.abc.Stream]",
                    "str"
                ],
                "instrumented": [
                    "str",
                    "bool"
                ]
            }
        },
        "RinokerasGraph.add_progress_bar": {
            "name": "add_progress_bar",
            "location": 88,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "data_len": [
                    "Optional[int]",
                    "Optional[str]",
                    "str",
                    "Optional[List[int]]",
                    "List[str]",
                    "Union[None, int, str]",
                    "bool"
                ],
                "epoch_num": [
                    "Optional[int]",
                    "int",
                    "Optional[Union[int, str]]",
                    "str",
                    "Optional[Dict[str, str]]",
                    "Union[str, int]"
                ]
            }
        },
        "RinokerasGraph.update_progress_bar": {
            "name": "update_progress_bar",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "metrics": [
                    "Optional[int]",
                    "Match[str]",
                    "type"
                ],
                "scroll": [
                    "str",
                    "list",
                    "Optional[str]",
                    "List[int]",
                    "bool"
                ],
                "round_metrics": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "RinokerasGraph.initialize": {
            "name": "initialize",
            "location": 122,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RinokerasGraph.__enter__": {
            "name": "__enter__",
            "location": 125,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RinokerasGraph.__exit__": {
            "name": "__exit__",
            "location": 130,
            "return": [
                "bool",
                "Type"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[BaseException]",
                    "Optional[Type[BaseException]]"
                ],
                "exc_value": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "exc_traceback": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        },
        "RinokerasGraph._get_session": {
            "name": "_get_session",
            "location": 137,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RinokerasGraph.run": {
            "name": "run",
            "location": 144,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "ops": [
                    "bool",
                    "str",
                    "List[List[str]]"
                ],
                "inputs": [
                    "bool",
                    "str",
                    "List[List[str]]"
                ],
                "return_outputs": [
                    "bool",
                    "str",
                    "List[List[str]]"
                ]
            }
        },
        "RinokerasGraph.name": {
            "name": "name",
            "location": 151,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RinokerasGraph.summary_collection": {
            "name": "summary_collection",
            "location": 155,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RinokerasGraph.run_epoch": {
            "name": "run_epoch",
            "location": 158,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "data_len": [
                    "int",
                    "float",
                    "str",
                    "tuple"
                ],
                "epoch_num": [
                    "int",
                    "float",
                    "str",
                    "tuple"
                ],
                "summary_writer": [
                    "int",
                    "bool",
                    "Sequence",
                    "str",
                    "Optional[int]"
                ],
                "save_outputs": [
                    "Optional[str]",
                    "Optional[bool]",
                    "str",
                    "Optional[float]",
                    "Optional[Dict]",
                    "dict",
                    "Optional[Sequence[Any]]",
                    "Optional[Sequence[str]]"
                ]
            }
        },
        "RinokerasGraph.run_for_n_steps": {
            "name": "run_for_n_steps",
            "location": 180,
            "return": [
                "bool",
                "bytes",
                "str",
                "List[bytes]"
            ],
            "arguments": {
                "self": [],
                "n_steps": [
                    "float",
                    "int",
                    "str"
                ],
                "epoch_num": [
                    "str",
                    "bool",
                    "dict",
                    "Dict[str, Any]",
                    "int"
                ],
                "summary_writer": [
                    "bool",
                    "int",
                    "float"
                ],
                "save_outputs": [
                    "bool",
                    "int"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/train/TestGraph.py": {
        "TestGraph.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "int",
                    "str"
                ],
                "build_model": [
                    "bool",
                    "Sequence[Optional[Type]]",
                    "List[str]"
                ],
                "loss_function": [
                    "bool",
                    "int",
                    "str"
                ],
                "inputs": [
                    "Tuple[int, int]",
                    "str",
                    "bool"
                ],
                "return_loss_summaries": [
                    "str",
                    "Tuple[float, float]",
                    "bool",
                    "allennlp.models.model.Model"
                ],
                "return_variable_summaries": [
                    "bool"
                ],
                "distribution_strategy": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "TestGraph.from_experiment": {
            "name": "from_experiment",
            "location": 55,
            "return": [
                "str",
                "IO",
                "Exception",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "int"
                ],
                "experiment": [
                    "Dict[str, Any]",
                    "int"
                ],
                "inputs": [
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "TestGraph._distributed_fn": {
            "name": "_distributed_fn",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGraph._reduce_distributed_ops": {
            "name": "_reduce_distributed_ops",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGraph._initialize_graph": {
            "name": "_initialize_graph",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGraph._finalize_graph": {
            "name": "_finalize_graph",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGraph._create_summaries": {
            "name": "_create_summaries",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGraph.initialize": {
            "name": "initialize",
            "location": 121,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGraph.build": {
            "name": "build",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGraph._unpack_losses": {
            "name": "_unpack_losses",
            "location": 139,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "losses": [
                    "train_utils.Losses",
                    "str"
                ]
            }
        },
        "TestGraph.run": {
            "name": "run",
            "location": 159,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "ops": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "inputs": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "return_outputs": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestGraph.loss": {
            "name": "loss",
            "location": 172,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str"
                ],
                "return_outputs": [
                    "bool",
                    "Iterable[boyleworkflow.core.Result]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TestGraph.global_step": {
            "name": "global_step",
            "location": 197,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGraph._distributed_fn.loss_fn": {
            "name": "loss_fn",
            "location": 64,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "inputs": [
                    "tartare.core.models.Job",
                    "str",
                    "List[str]",
                    "Optional[Union[Any, Any]]",
                    "Tuple[str]"
                ]
            }
        },
        "TestGraph._reduce_distributed_ops.reduce_distributed_outputs": {
            "name": "reduce_distributed_outputs",
            "location": 89,
            "return": [
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "output": [
                    "IO",
                    "int",
                    "float",
                    "list",
                    "List[Callable]",
                    "List[str]",
                    "List[int]",
                    "Optional[List[Any]]"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/train/TrainGraph.py": {
        "TrainGraph.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "Callable",
                    "List[str]"
                ],
                "build_model": [
                    "bool",
                    "Callable",
                    "List[str]"
                ],
                "optimizer": [
                    "int",
                    "str",
                    "List[str]",
                    "Callable",
                    "bool"
                ],
                "loss_function": [
                    "bool",
                    "Callable",
                    "List[str]"
                ],
                "inputs": [
                    "bool",
                    "Callable",
                    "List[str]"
                ],
                "learning_rate": [
                    "int",
                    "str",
                    "List[str]",
                    "Callable",
                    "bool"
                ],
                "return_loss_summaries": [
                    "bool",
                    "Callable",
                    "List[str]"
                ],
                "return_variable_summaries": [
                    "bool",
                    "Callable",
                    "List[str]"
                ],
                "return_grad_summaries": [
                    "bool",
                    "str",
                    "list",
                    "allennlp.models.model.Model"
                ],
                "gradient_clip_type": [
                    "str",
                    "int",
                    "TextIO",
                    "bool"
                ],
                "gradient_clip_bounds": [
                    "str",
                    "int",
                    "TextIO",
                    "bool"
                ],
                "distribution_strategy": [
                    "bool",
                    "Callable",
                    "List[str]"
                ],
                "use_memory_saving_gradients": [
                    "bool",
                    "Optional[Callable]",
                    "float"
                ]
            }
        },
        "TrainGraph.from_experiment": {
            "name": "from_experiment",
            "location": 65,
            "return": [
                "str",
                "IO",
                "Exception",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "int"
                ],
                "experiment": [
                    "Dict[str, Any]",
                    "int"
                ],
                "inputs": [
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "TrainGraph._distributed_fn": {
            "name": "_distributed_fn",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainGraph._reduce_distributed_ops": {
            "name": "_reduce_distributed_ops",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainGraph._initialize_graph": {
            "name": "_initialize_graph",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainGraph._finalize_graph": {
            "name": "_finalize_graph",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainGraph._create_summaries": {
            "name": "_create_summaries",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainGraph._get_gradient_clip_function": {
            "name": "_get_gradient_clip_function",
            "location": 153,
            "return": [
                "str",
                "bool",
                "type"
            ],
            "arguments": {
                "self": [],
                "clip_type": [
                    "str",
                    "Sequence[str]",
                    "List[str]",
                    "Optional[Any]",
                    "Type[Exception]",
                    "float",
                    "int"
                ],
                "clip_bounds": [
                    "str",
                    "Sequence[str]",
                    "List[str]",
                    "Optional[Any]",
                    "Type[Exception]",
                    "float",
                    "int"
                ]
            }
        },
        "TrainGraph._get_optimizer": {
            "name": "_get_optimizer",
            "location": 181,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "optimizer": [
                    "str",
                    "int"
                ]
            }
        },
        "TrainGraph.run": {
            "name": "run",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "ops": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "inputs": [
                    "str",
                    "bool"
                ],
                "return_outputs": [
                    "str",
                    "int"
                ]
            }
        },
        "TrainGraph.update": {
            "name": "update",
            "location": 223,
            "return": [
                "wtforms.fields.core.UnboundField",
                "Union[int, float, complex]",
                "list",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "int",
                    "MutableMapping[str, Any]"
                ],
                "return_outputs": [
                    "bool",
                    "List[str]",
                    "List[Tuple[str, Any]]"
                ]
            }
        },
        "TrainGraph.learning_rate": {
            "name": "learning_rate",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "TrainGraph._distributed_fn.loss_fn": {
            "name": "loss_fn",
            "location": 80,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "inputs": [
                    "tartare.core.models.Job",
                    "str",
                    "List[str]",
                    "Optional[Union[Any, Any]]",
                    "Tuple[str]"
                ]
            }
        },
        "TrainGraph._distributed_fn.grads_fn": {
            "name": "grads_fn",
            "location": 87,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "int"
                ]
            }
        },
        "TrainGraph._get_gradient_clip_function.clip_func": {
            "name": "clip_func",
            "location": 156,
            "return": [
                "float",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "grads": [
                    "List[Dict[str, Any]]",
                    "str",
                    "int"
                ]
            }
        },
        "TrainGraph._get_optimizer.momentum_opt": {
            "name": "momentum_opt",
            "location": 188,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "learning_rate": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/train/train_utils.py": {},
    "rinokeras-master/rinokeras/core/v1x/train/__init__.py": {},
    "rinokeras-master/rinokeras/core/v1x/utils/keras.py": {
        "load_distributed": {
            "name": "load_distributed",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "distribution_strategy": [
                    "str",
                    "bool",
                    "Callable[..., str]",
                    "Tuple[List[str], List[str]]"
                ],
                "model": [
                    "str"
                ],
                "filename": [
                    "str",
                    "Callable",
                    "bool",
                    "bytes"
                ],
                "by_name": [
                    "str",
                    "Callable",
                    "bool",
                    "bytes"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/utils/masking.py": {
        "convert_sequence_mask_to_attention_mask": {
            "name": "convert_sequence_mask_to_attention_mask",
            "location": 5,
            "return": [
                "List[int]",
                "Union[str, int, float]",
                "str",
                "Union[int, float]"
            ],
            "arguments": {
                "sequence": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "sequence_mask": [
                    "str",
                    "tuple",
                    "Optional[Union[Any, Any]]",
                    "List[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "convert_padding_mask_to_attention_mask": {
            "name": "convert_padding_mask_to_attention_mask",
            "location": 29,
            "return": [
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "sequence": [
                    "List[int]",
                    "Union[str, int, float]",
                    "str",
                    "Union[int, float]"
                ],
                "padding_mask": [
                    "List[int]",
                    "Union[str, int, float]",
                    "str",
                    "Union[int, float]"
                ]
            }
        },
        "convert_sequence_length_to_sequence_mask": {
            "name": "convert_sequence_length_to_sequence_mask",
            "location": 37,
            "return": [
                "List[int]",
                "Union[str, int, float]",
                "str",
                "Union[int, float]"
            ],
            "arguments": {
                "sequence": [
                    "bytes",
                    "Exception",
                    "bool"
                ],
                "sequence_lengths": [
                    "str",
                    "tuple",
                    "Optional[Union[Any, Any]]",
                    "List[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "convert_to_attention_mask": {
            "name": "convert_to_attention_mask",
            "location": 67,
            "return": [
                "Optional[str]",
                "Optional[float]",
                "Optional[int]"
            ],
            "arguments": {
                "sequence": [
                    "Union[str, int, float]",
                    "str",
                    "List[int]",
                    "float"
                ],
                "mask": [
                    "List[Dict[str, Any]]",
                    "tuple",
                    "Set[str]"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/utils/optim.py": {
        "clip_gradients": {
            "name": "clip_gradients",
            "location": 11,
            "return": [
                "int"
            ],
            "arguments": {
                "grads": [
                    "bool",
                    "int",
                    "Iterable[T]",
                    "Tuple[str, str]",
                    "Optional[List[int]]",
                    "Dict[str, object]"
                ],
                "clip_type": [
                    "Union[float, Tuple[float, float]]",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "clip_bounds": [
                    "Union[float, Tuple[float, float]]",
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "get_optimizer": {
            "name": "get_optimizer",
            "location": 34,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "optimizer": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "clip_gradients.apply_clipping": {
            "name": "apply_clipping",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "g": [
                    "str",
                    "Generator",
                    "Optional[bool]",
                    "Optional[int]",
                    "float"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/utils/schedules.py": {
        "linear_interpolation": {
            "name": "linear_interpolation",
            "location": 6,
            "return": [
                "int",
                "Dict[str, int]",
                "bool"
            ],
            "arguments": {
                "l": [
                    "int",
                    "str",
                    "float"
                ],
                "r": [
                    "int",
                    "str",
                    "float"
                ],
                "alpha": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "LinearSchedule.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "schedule_timesteps": [
                    "int",
                    "bool",
                    "float"
                ],
                "final_p": [
                    "str",
                    "int"
                ],
                "initial_p": [
                    "str",
                    "int"
                ]
            }
        },
        "LinearSchedule.value": {
            "name": "value",
            "location": 28,
            "return": [
                "Union[str, int, float]",
                "float",
                "dict"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "int",
                    "Dict[str, str]",
                    "float"
                ]
            }
        },
        "PiecewiseSchedule.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "endpoints": [
                    "int",
                    "str"
                ],
                "interpolation": [
                    "int",
                    "Union[str, float]",
                    "bool"
                ],
                "outside_value": [
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "PiecewiseSchedule.value": {
            "name": "value",
            "location": 60,
            "return": [
                "str",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "int",
                    "str",
                    "Tuple[float, float]"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/utils/tensors.py": {
        "get_shape": {
            "name": "get_shape",
            "location": 6,
            "return": [
                "bytes",
                "bool"
            ],
            "arguments": {
                "array": [
                    "int",
                    "str",
                    "float",
                    "List[int]",
                    "bool"
                ],
                "dim": [
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        },
        "gather_from_last": {
            "name": "gather_from_last",
            "location": 12,
            "return": [
                "str",
                "int",
                "Callable",
                "float"
            ],
            "arguments": {
                "array": [
                    "float",
                    "bool"
                ],
                "indices": [
                    "int",
                    "Tuple[int, int, int]",
                    "float"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/utils/__init__.py": {},
    "rinokeras-master/rinokeras/core/v1x/utils/metrics/accuracy.py": {
        "accuracy": {
            "name": "accuracy",
            "location": 5,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "labels": [
                    "str",
                    "int"
                ],
                "predictions": [
                    "str",
                    "int"
                ],
                "weights": [
                    "str",
                    "int",
                    "List[int]"
                ],
                "dtype": [
                    "List[Set[int]]"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/utils/metrics/bleu.py": {
        "_masked_bleu_fn_gen": {
            "name": "_masked_bleu_fn_gen",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "weights": [
                    "bool",
                    "int",
                    "List[str]",
                    "Exception"
                ],
                "smoothing_function": [
                    "bool",
                    "int",
                    "List[str]",
                    "Exception"
                ],
                "auto_reweigh": [
                    "bool",
                    "int",
                    "List[str]",
                    "Exception"
                ]
            }
        },
        "bleu1": {
            "name": "bleu1",
            "location": 30,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "reference": [
                    "numpy.array",
                    "bool",
                    "float"
                ],
                "hypothesis": [
                    "numpy.array",
                    "bool",
                    "float"
                ],
                "reference_mask": [
                    "Optional[Dict[str, numpy.ma.MaskedArray]]",
                    "Optional[dict]",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray"
                ],
                "hypothesis_mask": [
                    "Optional[Dict[str, numpy.ma.MaskedArray]]",
                    "Optional[dict]",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray"
                ]
            }
        },
        "bleu2": {
            "name": "bleu2",
            "location": 42,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "reference": [
                    "numpy.array",
                    "bool",
                    "float"
                ],
                "hypothesis": [
                    "numpy.array",
                    "bool",
                    "float"
                ],
                "reference_mask": [
                    "Optional[Dict[str, numpy.ma.MaskedArray]]",
                    "Optional[dict]",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray"
                ],
                "hypothesis_mask": [
                    "Optional[Dict[str, numpy.ma.MaskedArray]]",
                    "Optional[dict]",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray"
                ]
            }
        },
        "bleu3": {
            "name": "bleu3",
            "location": 54,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "reference": [
                    "numpy.array",
                    "bool",
                    "float"
                ],
                "hypothesis": [
                    "numpy.array",
                    "bool",
                    "float"
                ],
                "reference_mask": [
                    "Optional[Dict[str, numpy.ma.MaskedArray]]",
                    "Optional[dict]",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray"
                ],
                "hypothesis_mask": [
                    "Optional[Dict[str, numpy.ma.MaskedArray]]",
                    "Optional[dict]",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray"
                ]
            }
        },
        "bleu4": {
            "name": "bleu4",
            "location": 66,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "reference": [
                    "numpy.array",
                    "bool",
                    "float"
                ],
                "hypothesis": [
                    "numpy.array",
                    "bool",
                    "float"
                ],
                "reference_mask": [
                    "Optional[Dict[str, numpy.ma.MaskedArray]]",
                    "Optional[dict]",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray"
                ],
                "hypothesis_mask": [
                    "Optional[Dict[str, numpy.ma.MaskedArray]]",
                    "Optional[dict]",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray"
                ]
            }
        },
        "_masked_bleu_fn_gen.masked_bleu": {
            "name": "masked_bleu",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "reference": [
                    "numpy.ndarray",
                    "int"
                ],
                "hypothesis": [
                    "numpy.ndarray",
                    "int"
                ],
                "reference_mask": [
                    "numpy.ndarray",
                    "int"
                ],
                "hypothesis_mask": [
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "corpus_bleu": {
            "name": "corpus_bleu",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/core/v1x/utils/metrics/MetricsAccumulator.py": {
        "MetricsAccumulator.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsAccumulator.add": {
            "name": "add",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "metrics": [
                    "Dict[str, float]",
                    "Mapping[str, Any]",
                    "Dict[str, str]",
                    "Dict[str, int]"
                ]
            }
        },
        "MetricsAccumulator.start_timer": {
            "name": "start_timer",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsAccumulator.end_timer": {
            "name": "end_timer",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsAccumulator.get_average": {
            "name": "get_average",
            "location": 25,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Optional[Dict[str, str]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsAccumulator.__iter__": {
            "name": "__iter__",
            "location": 30,
            "return": [
                "IO"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsAccumulator.items": {
            "name": "items",
            "location": 33,
            "return": [
                "str",
                "Optional[str]",
                "Callable",
                "Tuple[int, int]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsAccumulator.__getitem__": {
            "name": "__getitem__",
            "location": 36,
            "return": [
                "str",
                "bool",
                "BaseException",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "MetricsAccumulator.__str__": {
            "name": "__str__",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsAccumulator.nupdates": {
            "name": "nupdates",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/utils/metrics/pyrouge.py": {
        "get_unigram_count": {
            "name": "get_unigram_count",
            "location": 8,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "tokens": [
                    "int",
                    "List[int]",
                    "str"
                ]
            }
        },
        "Rouge.my_lcs_grid": {
            "name": "my_lcs_grid",
            "location": 23,
            "return": [
                "float",
                "Optional[int]",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float",
                    "Union[int, float, str]",
                    "Union[str, float]"
                ]
            }
        },
        "Rouge.my_lcs": {
            "name": "my_lcs",
            "location": 49,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "float",
                    "int"
                ],
                "mask_x": [
                    "bool",
                    "int",
                    "Optional[float]",
                    "str"
                ]
            }
        },
        "Rouge.rouge_l": {
            "name": "rouge_l",
            "location": 68,
            "return": [
                "str",
                "bool",
                "Mapping[str, Any]",
                "Dict[str, Any]",
                "int",
                "Iterable[int]"
            ],
            "arguments": {
                "cand_sents": [
                    "int",
                    "float",
                    "Tuple[int, int]",
                    "str"
                ],
                "ref_sents": [
                    "int",
                    "float",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/utils/metrics/rouge.py": {
        "masked_rouge": {
            "name": "masked_rouge",
            "location": 7,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "reference": [
                    "numpy.ndarray",
                    "int"
                ],
                "hypothesis": [
                    "numpy.ndarray",
                    "int"
                ],
                "reference_mask": [
                    "numpy.ndarray",
                    "int"
                ],
                "hypothesis_mask": [
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "rouge_l": {
            "name": "rouge_l",
            "location": 21,
            "return": [
                "int",
                "Dict[str, int]",
                "str",
                "Generator",
                "bool"
            ],
            "arguments": {
                "reference": [
                    "int",
                    "str",
                    "Container",
                    "numpy.ndarray",
                    "float"
                ],
                "hypothesis": [
                    "int",
                    "str",
                    "Container",
                    "numpy.ndarray",
                    "float"
                ],
                "reference_mask": [
                    "Optional[dict]",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray"
                ],
                "hypothesis_mask": [
                    "Optional[dict]",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/v1x/utils/metrics/__init__.py": {},
    "rinokeras-master/rinokeras/core/v2x/train/__init__.py": {},
    "rinokeras-master/rinokeras/core/v2x/train/experiments/Experiment.py": {
        "Experiment.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Experiment.get_model": {
            "name": "get_model",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Experiment.get_optimizer": {
            "name": "get_optimizer",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Experiment.get_loss_function": {
            "name": "get_loss_function",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Experiment.forward": {
            "name": "forward",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "str"
                ],
                "inputs": [
                    "bool",
                    "str"
                ]
            }
        },
        "Experiment.runner": {
            "name": "runner",
            "location": 27,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rinokeras-master/rinokeras/core/v2x/train/experiments/MINEExperiment.py": {
        "MINEExperiment.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MINEExperiment.runner": {
            "name": "runner",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rinokeras-master/rinokeras/core/v2x/train/experiments/__init__.py": {},
    "rinokeras-master/rinokeras/core/v2x/train/metrics/MetricsAccumulator.py": {
        "MetricsAccumulator.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsAccumulator.add": {
            "name": "add",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "metrics": [
                    "Dict[str, float]",
                    "Mapping[str, Any]",
                    "Dict[str, tensorflow.Tensor]",
                    "Dict[str, str]",
                    "Dict[str, int]"
                ]
            }
        },
        "MetricsAccumulator.start_timer": {
            "name": "start_timer",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsAccumulator.end_timer": {
            "name": "end_timer",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsAccumulator.get_average": {
            "name": "get_average",
            "location": 26,
            "return": [
                "int",
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsAccumulator.__iter__": {
            "name": "__iter__",
            "location": 30,
            "return": [
                "IO"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsAccumulator.items": {
            "name": "items",
            "location": 33,
            "return": [
                "str",
                "Optional[str]",
                "Callable",
                "Tuple[int, int]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsAccumulator.__getitem__": {
            "name": "__getitem__",
            "location": 36,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "MetricsAccumulator.__str__": {
            "name": "__str__",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsAccumulator.nupdates": {
            "name": "nupdates",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rinokeras-master/rinokeras/core/v2x/train/metrics/__init__.py": {},
    "rinokeras-master/rinokeras/core/v2x/train/runners/BaseExperimentRunner.py": {
        "BaseExperimentRunner.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "experiment": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "BaseExperimentRunner.train": {
            "name": "train",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "train_dataset": [
                    "int",
                    "float",
                    "List[numpy.array]",
                    "bool",
                    "Optional[str]"
                ],
                "eval_dataset": [
                    "int",
                    "float",
                    "List[numpy.array]",
                    "bool",
                    "Optional[str]"
                ],
                "n_epochs": [
                    "int",
                    "str",
                    "list"
                ],
                "n_iterations_per_epoch_train": [
                    "numpy.ndarray",
                    "int",
                    "float",
                    "np.ndarray"
                ],
                "n_iterations_per_epoch_eval": [
                    "numpy.ndarray",
                    "int",
                    "float",
                    "np.ndarray"
                ]
            }
        },
        "BaseExperimentRunner.forward": {
            "name": "forward",
            "location": 128,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "int",
                "Iterable[str]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str"
                ]
            }
        },
        "BaseExperimentRunner.model": {
            "name": "model",
            "location": 132,
            "return": [
                "List[str]",
                "int",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseExperimentRunner.loss": {
            "name": "loss",
            "location": 135,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseExperimentRunner.optimizer": {
            "name": "optimizer",
            "location": 138,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseExperimentRunner.train.distributed_train": {
            "name": "distributed_train",
            "location": 66,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "BaseExperimentRunner.train.distributed_eval": {
            "name": "distributed_eval",
            "location": 78,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "BaseExperimentRunner.__init__._built_forward_pass": {
            "name": "_built_forward_pass",
            "location": 31,
            "return": [
                "str",
                "BinaryIO",
                "Dict[str, Any]",
                "tensorflow.Tensor"
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "List[str]",
                    "int",
                    "bytes"
                ],
                "return_outputs": [
                    "bool",
                    "Iterable[boyleworkflow.core.Result]",
                    "dict"
                ]
            }
        },
        "BaseExperimentRunner.__init__.run_train_iteration": {
            "name": "run_train_iteration",
            "location": 40,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "tartare.core.models.Job"
                ]
            }
        },
        "BaseExperimentRunner.__init__.run_eval_iteration": {
            "name": "run_eval_iteration",
            "location": 51,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "tartare.core.models.Job"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/v2x/train/runners/MINEExperimentRunner.py": {
        "MINEEstimator.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MINEEstimator.call": {
            "name": "call",
            "location": 13,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "tensorflow.Tensor",
                    "Type['Payload']",
                    "str"
                ],
                "mask": [
                    "dict"
                ]
            }
        },
        "MINEExperimentRunner.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "experiment": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ],
                "gamma": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ],
                "beta": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "MINEExperimentRunner.__init__._built_forward_pass": {
            "name": "_built_forward_pass",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "inputs": [
                    "str",
                    "List[int]",
                    "Dict[str, List[Any]]",
                    "int",
                    "List[List[str]]",
                    "List[Tuple[bool, str]]"
                ],
                "return_outputs": [
                    "bool",
                    "dict"
                ]
            }
        },
        "MINEExperimentRunner.__init__.run_train_iteration": {
            "name": "run_train_iteration",
            "location": 68,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "inputs": [
                    "str"
                ]
            }
        },
        "MINEExperimentRunner.__init__.run_eval_iteration": {
            "name": "run_eval_iteration",
            "location": 90,
            "return": [
                "Awaitable[T_co]",
                "dict",
                "bool"
            ],
            "arguments": {
                "inputs": [
                    "str"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/core/v2x/train/runners/__init__.py": {},
    "rinokeras-master/rinokeras/layers/__init__.py": {},
    "rinokeras-master/rinokeras/models/qanet.py": {},
    "rinokeras-master/rinokeras/models/resnet.py": {},
    "rinokeras-master/rinokeras/models/transformer.py": {},
    "rinokeras-master/rinokeras/models/__init__.py": {},
    "rinokeras-master/rinokeras/rl/__init__.py": {},
    "rinokeras-master/rinokeras/testing/__init__.py": {},
    "rinokeras-master/rinokeras/testing/torch/functional/test_attention_torch.py": {
        "test_attention_map_base": {
            "name": "test_attention_map_base",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_multi_head_attention_map_base": {
            "name": "test_multi_head_attention_map_base",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/testing/torch/functional/test_masking_torch.py": {
        "test_apply_attention_mask_softmax": {
            "name": "test_apply_attention_mask_softmax",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_apply_attention_mask_hadamard": {
            "name": "test_apply_attention_mask_hadamard",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/testing/torch/functional/test_position_embedding_torch.py": {
        "test_position_embedding_no_concat_1d": {
            "name": "test_position_embedding_no_concat_1d",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_position_embedding_concat_1d": {
            "name": "test_position_embedding_concat_1d",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/testing/torch/utils/tensors.py": {
        "random_mask_tensor": {
            "name": "random_mask_tensor",
            "location": 4,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/testing/torch/utils/__init__.py": {},
    "rinokeras-master/rinokeras/testing/utils/assertions.py": {
        "assert_not_none": {
            "name": "assert_not_none",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "elems": [
                    "list",
                    "List['world.PerceivedNoise']",
                    "Iterable[Any]",
                    "str",
                    "int"
                ]
            }
        },
        "assert_expected_shapes": {
            "name": "assert_expected_shapes",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "elems": [
                    "str",
                    "Deque",
                    "int",
                    "set"
                ],
                "shapes": [
                    "str",
                    "list"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/testing/utils/loading.py": {
        "load_restore_test": {
            "name": "load_restore_test",
            "location": 9,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "Set[str]"
            ],
            "arguments": {
                "output": [
                    "Optional[List[Any]]",
                    "List[Dict[str, Any]]",
                    "dict"
                ],
                "inputs": [
                    "Optional[List[Any]]",
                    "List[Dict[str, Any]]",
                    "dict"
                ],
                "feed": [
                    "Optional[List[Any]]",
                    "List[Dict[str, Any]]",
                    "dict"
                ],
                "weights": [
                    "List[Dict[str, Any]]",
                    "int",
                    "List[str]",
                    "List[\"Issue\"]",
                    "Iterable[int]"
                ],
                "weights_file": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "from_config_test": {
            "name": "from_config_test",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "__cls": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "__obj": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/testing/utils/regression.py": {
        "get_local_file": {
            "name": "get_local_file",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "fpath": [
                    "str"
                ],
                "file__": [
                    "str"
                ]
            }
        },
        "check_regression": {
            "name": "check_regression",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "regression_key": [
                    "int",
                    "BinaryIO",
                    "Callable[..., Dict[str, Any]]",
                    "str",
                    "Optional[str]"
                ],
                "output": [
                    "List[str]",
                    "str"
                ],
                "file__": [
                    "str"
                ],
                "fname": [
                    "str",
                    "int"
                ],
                "debug": [
                    "str",
                    "Union[str, bytes]",
                    "BinaryIO",
                    "float",
                    "Optional[str]"
                ],
                "tol": [
                    "Tuple[int, int]",
                    "str"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/testing/utils/session.py": {
        "run_simple_session_save_weights": {
            "name": "run_simple_session_save_weights",
            "location": 9,
            "return": [
                "str",
                "int",
                "Dict[str, str]",
                "bytes"
            ],
            "arguments": {
                "inputs": [],
                "feed": [],
                "weights": [
                    "Union[str, bytes, int]",
                    "bool"
                ],
                "weights_file": [
                    "Dict[str, Any]",
                    "dict",
                    "Mapping[str, Any]",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "run_simple_session": {
            "name": "run_simple_session",
            "location": 25,
            "return": [
                "str",
                "Iterable[str]",
                "List[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "inputs": [
                    "Dict[str, str]",
                    "dict",
                    "Iterable[str]"
                ],
                "feed": [
                    "Dict[str, str]",
                    "dict",
                    "Iterable[str]"
                ]
            }
        },
        "reset_session": {
            "name": "reset_session",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/testing/utils/tensors.py": {
        "random_tensor": {
            "name": "random_tensor",
            "location": 7,
            "return": [
                "dict",
                "Callable",
                "List[str]",
                "str"
            ],
            "arguments": {
                "shape": [
                    "float",
                    "int"
                ],
                "dtype": [
                    "float",
                    "int"
                ]
            }
        },
        "random_mask_tensor": {
            "name": "random_mask_tensor",
            "location": 11,
            "return": [
                "dict",
                "Callable",
                "List[str]",
                "str"
            ],
            "arguments": {
                "batch_size": [
                    "int",
                    "list"
                ],
                "seqlen": [
                    "int",
                    "list"
                ],
                "dtype": [
                    "int",
                    "list"
                ]
            }
        },
        "random_sequence_tensor": {
            "name": "random_sequence_tensor",
            "location": 15,
            "return": [
                "dict",
                "Callable",
                "List[str]",
                "str"
            ],
            "arguments": {
                "batch_size": [
                    "int",
                    "bool",
                    "Tuple[int]"
                ],
                "seqlen": [
                    "int",
                    "bool",
                    "Tuple[int]"
                ],
                "n_symbols": [
                    "int",
                    "bool",
                    "Tuple[int]"
                ],
                "dtype": [
                    "int",
                    "bool",
                    "Tuple[int]"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/testing/utils/__init__.py": {},
    "rinokeras-master/rinokeras/testing/v1x/test_losses.py": {
        "test_losses": {
            "name": "test_losses",
            "location": 12,
            "return": [],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/testing/v1x/test_optimizers.py": {
        "test_optimizers": {
            "name": "test_optimizers",
            "location": 12,
            "return": [],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/testing/v1x/test_rnn.py": {
        "test_rnn": {
            "name": "test_rnn",
            "location": 12,
            "return": [],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/testing/v1x/test_utils.py": {
        "test_convert_sequence_mask_to_attention_mask": {
            "name": "test_convert_sequence_mask_to_attention_mask",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_convert_sequence_length_to_sequence_mask": {
            "name": "test_convert_sequence_length_to_sequence_mask",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_convert_to_attention_mask_1": {
            "name": "test_convert_to_attention_mask_1",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_convert_to_attention_mask_2": {
            "name": "test_convert_to_attention_mask_2",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/testing/v1x/layers/test_activations.py": {
        "test_gated_tanh": {
            "name": "test_gated_tanh",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/testing/v1x/layers/test_attention.py": {
        "check_from_config": {
            "name": "check_from_config",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "__class": [
                    "str",
                    "Optional[cmk.utils.type_defs.SectionName]"
                ],
                "__obj": [
                    "str",
                    "Optional[cmk.utils.type_defs.SectionName]"
                ]
            }
        },
        "test_luongAttention": {
            "name": "test_luongAttention",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_luongAttention_local": {
            "name": "test_luongAttention_local",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_attentionQKVProjection": {
            "name": "test_attentionQKVProjection",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_trilinearSimilarity": {
            "name": "test_trilinearSimilarity",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_scaledDotProductSimilarity": {
            "name": "test_scaledDotProductSimilarity",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_applyAttentionMask": {
            "name": "test_applyAttentionMask",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_attentionMap": {
            "name": "test_attentionMap",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_multiHeadAttentionMap": {
            "name": "test_multiHeadAttentionMap",
            "location": 247,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_multiHeadAttention": {
            "name": "test_multiHeadAttention",
            "location": 290,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_multiHeadAttention_trilinear": {
            "name": "test_multiHeadAttention_trilinear",
            "location": 332,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_selfAttention": {
            "name": "test_selfAttention",
            "location": 372,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_contextQueryAttention": {
            "name": "test_contextQueryAttention",
            "location": 410,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/testing/v1x/layers/test_autoregressive.py": {
        "test_random_gauss_noise": {
            "name": "test_random_gauss_noise",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_coupling_layer": {
            "name": "test_coupling_layer",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/testing/v1x/layers/test_conv.py": {
        "test_normed_conv_stack_1d": {
            "name": "test_normed_conv_stack_1d",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_normed_conv_stack_2d": {
            "name": "test_normed_conv_stack_2d",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_normed_conv_stack_3d": {
            "name": "test_normed_conv_stack_3d",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_residual_block": {
            "name": "test_residual_block",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_grouped_conv": {
            "name": "test_grouped_conv",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/testing/v1x/layers/test_distributions.py": {
        "test_CategoricalPd": {
            "name": "test_CategoricalPd",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_DiagGaussianPd": {
            "name": "test_DiagGaussianPd",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/testing/v1x/layers/test_dropout.py": {
        "test_layer_dropout": {
            "name": "test_layer_dropout",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/testing/v1x/layers/test_gcn.py": {
        "test_gcn": {
            "name": "test_gcn",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/testing/v1x/layers/test_inversion.py": {
        "test_dense_transpose": {
            "name": "test_dense_transpose",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_embedding_transpose": {
            "name": "test_embedding_transpose",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_invertible_dense": {
            "name": "test_invertible_dense",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/testing/v1x/layers/test_masking.py": {
        "test_bert_random_replace_mask_discrete": {
            "name": "test_bert_random_replace_mask_discrete",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_bert_random_replace_mask_floating": {
            "name": "test_bert_random_replace_mask_floating",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/testing/v1x/layers/test_normalization.py": {
        "test_layer_norm": {
            "name": "test_layer_norm",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_weight_norm_dense": {
            "name": "test_weight_norm_dense",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/testing/v1x/layers/test_position_embedding.py": {
        "test_position_embedding_vanilla": {
            "name": "test_position_embedding_vanilla",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_position_embedding_concat": {
            "name": "test_position_embedding_concat",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_position_embedding_concat_reproject": {
            "name": "test_position_embedding_concat_reproject",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_position_embedding_2d_vanilla": {
            "name": "test_position_embedding_2d_vanilla",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_position_embedding_2d_concat": {
            "name": "test_position_embedding_2d_concat",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_position_embedding_2d_reproject": {
            "name": "test_position_embedding_2d_reproject",
            "location": 237,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_position_embedding_3d_vanilla": {
            "name": "test_position_embedding_3d_vanilla",
            "location": 282,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_position_embedding_3d_concat": {
            "name": "test_position_embedding_3d_concat",
            "location": 327,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_position_embedding_3d_reproject": {
            "name": "test_position_embedding_3d_reproject",
            "location": 372,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_learned_embedding_vanilla": {
            "name": "test_learned_embedding_vanilla",
            "location": 417,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_learned_embedding_concat": {
            "name": "test_learned_embedding_concat",
            "location": 462,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/testing/v1x/layers/test_residual.py": {
        "test_residual": {
            "name": "test_residual",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_highway": {
            "name": "test_highway",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/testing/v1x/layers/test_stack.py": {
        "test_stack": {
            "name": "test_stack",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_layer_dropout_stack": {
            "name": "test_layer_dropout_stack",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_conv2d_stack": {
            "name": "test_conv2d_stack",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_deconv2d_stack": {
            "name": "test_deconv2d_stack",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_dense_stack": {
            "name": "test_dense_stack",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/testing/v1x/models/test_glow.py": {},
    "rinokeras-master/rinokeras/testing/v1x/models/test_masked_rmc.py": {},
    "rinokeras-master/rinokeras/testing/v1x/models/test_resnet.py": {
        "test_residual_block": {
            "name": "test_residual_block",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_resnext50_base": {
            "name": "test_resnext50_base",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/testing/v1x/models/test_rmc.py": {},
    "rinokeras-master/rinokeras/testing/v1x/models/qanet/test_qanet.py": {
        "test_qanet_base": {
            "name": "test_qanet_base",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/testing/v1x/models/qanet/test_qanet_attention.py": {
        "test_qanet_self_attention": {
            "name": "test_qanet_self_attention",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/testing/v1x/models/qanet/test_qanet_embedding.py": {
        "test_qanet_input_embedding": {
            "name": "test_qanet_input_embedding",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/testing/v1x/models/qanet/test_qanet_encoder.py": {
        "test_qanet_encoder_no_mask": {
            "name": "test_qanet_encoder_no_mask",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/testing/v1x/models/qanet/test_qanet_ff.py": {
        "test_qanet_feed_forward": {
            "name": "test_qanet_feed_forward",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_qanet_conv_block": {
            "name": "test_qanet_conv_block",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/testing/v1x/models/transformer/test_transformer.py": {
        "test_transformer_base": {
            "name": "test_transformer_base",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/testing/v1x/models/transformer/test_transformer_attention.py": {
        "test_transformer_self_attention": {
            "name": "test_transformer_self_attention",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_transformer_multi_attention": {
            "name": "test_transformer_multi_attention",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/testing/v1x/models/transformer/test_transformer_decoder.py": {
        "test_transformer_decoder_block_no_mask": {
            "name": "test_transformer_decoder_block_no_mask",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_transformer_decoder_block": {
            "name": "test_transformer_decoder_block",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_transformer_decoder_no_mask": {
            "name": "test_transformer_decoder_no_mask",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_transformer_decoder": {
            "name": "test_transformer_decoder",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_transformer_decoder_fast_decode": {
            "name": "test_transformer_decoder_fast_decode",
            "location": 213,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_transformer_decoder_fast_decode_discrete": {
            "name": "test_transformer_decoder_fast_decode_discrete",
            "location": 260,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_transformer_decoder_fast_beam_decode_discrete": {
            "name": "test_transformer_decoder_fast_beam_decode_discrete",
            "location": 307,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/testing/v1x/models/transformer/test_transformer_embedding.py": {
        "test_transformer_input_embedding_non_discrete": {
            "name": "test_transformer_input_embedding_non_discrete",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/testing/v1x/models/transformer/test_transformer_encoder.py": {
        "test_transformer_encoder_block": {
            "name": "test_transformer_encoder_block",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_transformer_encoder_block_masking": {
            "name": "test_transformer_encoder_block_masking",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_transformer_encoder": {
            "name": "test_transformer_encoder",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_transformer_encoder_masking": {
            "name": "test_transformer_encoder_masking",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_transformer_encoder_masking_with_conv": {
            "name": "test_transformer_encoder_masking_with_conv",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/testing/v1x/models/transformer/test_transformer_ff.py": {
        "test_transformer_feed_forward": {
            "name": "test_transformer_feed_forward",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/testing/v1x/train/test_experiment.py": {},
    "rinokeras-master/rinokeras/testing/v1x/train/test_graph.py": {
        "gpu_setup": {
            "name": "gpu_setup",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "req_gpus": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "get_test_data": {
            "name": "get_test_data",
            "location": 14,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "get_test_model": {
            "name": "get_test_model",
            "location": 19,
            "return": [
                "str",
                "Callable",
                "List[List[int]]"
            ],
            "arguments": {}
        },
        "do_setup": {
            "name": "do_setup",
            "location": 24,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "test_test_graph_one_device_construction": {
            "name": "test_test_graph_one_device_construction",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_test_graph_multi_device_construction": {
            "name": "test_test_graph_multi_device_construction",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_test_graph_one_device_run_step": {
            "name": "test_test_graph_one_device_run_step",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_test_graph_multi_device_run_step": {
            "name": "test_test_graph_multi_device_run_step",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_train_graph_one_device_construction": {
            "name": "test_train_graph_one_device_construction",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_train_graph_multi_device_construction": {
            "name": "test_train_graph_multi_device_construction",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_train_graph_one_device_run_step": {
            "name": "test_train_graph_one_device_run_step",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_train_graph_multi_device_run_step": {
            "name": "test_train_graph_multi_device_run_step",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_train_graph_multi_device_run_multi_step": {
            "name": "test_train_graph_multi_device_run_multi_step",
            "location": 216,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "gpu_setup.get_available_gpus": {
            "name": "get_available_gpus",
            "location": 7,
            "return": [
                "List[str]",
                "Iterable[str]",
                "List[Tuple[str, Any]]",
                "str"
            ],
            "arguments": {}
        },
        "do_setup.build_model": {
            "name": "build_model",
            "location": 26,
            "return": [
                "List[src.autoks.core.gp_model.GPModel]",
                "Pattern"
            ],
            "arguments": {
                "inputs": [
                    "bool"
                ]
            }
        },
        "do_setup.loss_function": {
            "name": "loss_function",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "inputs": [
                    "List[str]",
                    "Sequence[Tuple[int, int]]",
                    "dict",
                    "Sequence[str]"
                ],
                "outputs": [
                    "List[str]",
                    "Sequence[Tuple[int, int]]",
                    "dict",
                    "Sequence[str]"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/testing/v2x/test_basic.py": {
        "test_absolute_truth": {
            "name": "test_absolute_truth",
            "location": 2,
            "return": [],
            "arguments": {}
        }
    },
    "rinokeras-master/rinokeras/testing/v2x/train/test_ExperimentRunner.py": {
        "test_ExperimentRunner_sequential": {
            "name": "test_ExperimentRunner_sequential",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestExperiment.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperiment.get_model": {
            "name": "get_model",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperiment.get_loss_function": {
            "name": "get_loss_function",
            "location": 28,
            "return": [
                "Optional[str]",
                "Callable[[Union, Union], Tuple[Any, ...],]",
                "Type[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperiment.get_optimizer": {
            "name": "get_optimizer",
            "location": 35,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExperiment.forward": {
            "name": "forward",
            "location": 38,
            "return": [
                "numpy.ndarray",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Union['Contributor', 'Coverage']",
                    "Optional[float]"
                ],
                "inputs": [
                    "Union['Contributor', 'Coverage']",
                    "Optional[float]"
                ]
            }
        },
        "test_ExperimentRunner_sequential.scale": {
            "name": "scale",
            "location": 51,
            "return": [
                "str",
                "Union[str, List[str]]",
                "numpy.ndarray"
            ],
            "arguments": {
                "image": [
                    "numpy.ndarray",
                    "tensorflow.Tensor"
                ],
                "label": [
                    "numpy.array",
                    "BinaryIO",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestExperiment.get_loss_function.loss_function": {
            "name": "loss_function",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "model_outputs": [
                    "bool",
                    "bytes",
                    "List[str]"
                ],
                "inputs": [
                    "bool",
                    "bytes",
                    "List[str]"
                ]
            }
        }
    },
    "rinokeras-master/rinokeras/torch/functional.py": {},
    "rinokeras-master/rinokeras/torch/losses.py": {},
    "rinokeras-master/rinokeras/torch/models.py": {},
    "rinokeras-master/rinokeras/torch/modules.py": {},
    "rinokeras-master/rinokeras/torch/__init__.py": {},
    "rinokeras-master/rinokeras/torch/utils/data.py": {},
    "rinokeras-master/rinokeras/train/__init__.py": {},
    "rinokeras-master/rinokeras/utils/__init__.py": {},
    "rinokeras-master/scripts/benchmarking/benchmark_attention.py": {}
}
{
    "rise-py-master/setup.py": {},
    "rise-py-master/examples/01_summary.py": {},
    "rise-py-master/examples/02_account_overview.py": {
        "parse_address": {
            "name": "parse_address",
            "location": 17,
            "return": [
                "Optional[str]",
                "type",
                "Optional[List[Any]]",
                "list"
            ],
            "arguments": {
                "val": [
                    "int"
                ]
            }
        },
        "tx_summary_string": {
            "name": "tx_summary_string",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "tx": [
                    "int",
                    "bytearray"
                ]
            }
        }
    },
    "rise-py-master/examples/03_raffle.py": {
        "sleep_for": {
            "name": "sleep_for",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "seconds": [
                    "str",
                    "float",
                    "Tuple['cirq.Qid']"
                ],
                "msg": [
                    "str",
                    "float",
                    "Tuple['cirq.Qid']"
                ]
            }
        }
    },
    "rise-py-master/risesdk/__init__.py": {},
    "rise-py-master/risesdk/api/accounts.py": {
        "AccountInfo.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "int",
                    "Optional[int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "AccountsAPI.get_account": {
            "name": "get_account",
            "location": 35,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "dict",
                    "bytes",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "str"
                ],
                "public_key": [
                    "dict",
                    "bytes",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "AccountsAPI.get_account_delegates": {
            "name": "get_account_delegates",
            "location": 52,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "dict",
                    "str",
                    "Dict[str, Dict]",
                    "OrderedDict",
                    "bool"
                ]
            }
        }
    },
    "rise-py-master/risesdk/api/base.py": {
        "BaseAPI.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "base_url": [
                    "str",
                    "dict",
                    "Optional[dict]"
                ],
                "session": [
                    "bool",
                    "str"
                ]
            }
        },
        "BaseAPI._get": {
            "name": "_get",
            "location": 18,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "params": [
                    "str",
                    "Dict[str, Any]",
                    "Union[str, bytes]",
                    "dict"
                ]
            }
        },
        "BaseAPI._put": {
            "name": "_put",
            "location": 26,
            "return": [
                "dict",
                "str",
                "Dict[str, Any]",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "Optional[Union[Dict, str, int, bytes]]"
                ],
                "data": [
                    "str",
                    "int",
                    "Optional[Dict[str, str]]",
                    "Optional[MutableMapping[Any, Any]]",
                    "Optional[dict]",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "BaseAPI._post": {
            "name": "_post",
            "location": 34,
            "return": [
                "bool",
                "int",
                "Dict[str, Any]",
                "Dict[int, dict]",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Optional[Union[Dict, str, int, bytes]]",
                    "bool"
                ],
                "data": [
                    "str",
                    "int",
                    "Optional[dict]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Optional[MutableMapping[Any, Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "BaseAPI.__build_url": {
            "name": "__build_url",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "BaseAPI.__process_response": {
            "name": "__process_response",
            "location": 45,
            "return": [
                "dict",
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "self": [],
                "resp": [
                    "str",
                    "Callable",
                    "int",
                    "Callable[[Any], Awaitable[None]]",
                    "dict"
                ]
            }
        }
    },
    "rise-py-master/risesdk/api/blocks.py": {
        "BlockInfo.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "str",
                    "int"
                ]
            }
        },
        "BlocksResult.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "dict",
                    "str",
                    "bytes",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "IO[bytes]",
                    "bool"
                ]
            }
        },
        "FeesInfo.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "int",
                    "str"
                ]
            }
        },
        "FeesResult.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "int"
                ]
            }
        },
        "StatusResult.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "bool",
                    "int",
                    "bytes",
                    "float"
                ]
            }
        },
        "BlocksAPI.get_blocks": {
            "name": "get_blocks",
            "location": 109,
            "return": [
                "str",
                "bool",
                "BaseException",
                "Exception",
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "Optional[int]",
                    "dict",
                    "Optional[str]",
                    "int"
                ],
                "offset": [
                    "Optional[int]",
                    "dict",
                    "Optional[str]",
                    "int"
                ],
                "order_by": [
                    "Optional[int]",
                    "dict",
                    "Optional[str]",
                    "int"
                ],
                "generator_public_key": [
                    "Optional[int]",
                    "dict",
                    "Optional[str]",
                    "int"
                ],
                "previous_block_id": [
                    "Optional[int]",
                    "dict",
                    "Optional[str]",
                    "int"
                ],
                "height": [
                    "Optional[int]",
                    "dict",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "BlocksAPI.get_block": {
            "name": "get_block",
            "location": 128,
            "return": [
                "bool",
                "Optional[float]",
                "Optional[str]",
                "Optional[List[Any]]",
                "Optional[List[str]]",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "block_id": [
                    "str"
                ]
            }
        },
        "BlocksAPI.get_fees": {
            "name": "get_fees",
            "location": 140,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "height": [
                    "str"
                ]
            }
        },
        "BlocksAPI.get_status": {
            "name": "get_status",
            "location": 146,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rise-py-master/risesdk/api/client.py": {
        "Client.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "base_url": [
                    "dict",
                    "Union['HTMLSession', 'AsyncHTMLSession']"
                ],
                "session": [
                    "dict",
                    "Union['HTMLSession', 'AsyncHTMLSession']"
                ]
            }
        }
    },
    "rise-py-master/risesdk/api/delegates.py": {
        "DelegateInfo.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "bytes",
                    "str"
                ]
            }
        },
        "DelegatesResult.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "DelegateForgingResult.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "int",
                    "OrderedDict"
                ]
            }
        },
        "VoterInfo.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "int",
                    "Iterable[int]",
                    "str",
                    "bytes"
                ]
            }
        },
        "NextForgersResult.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "base.colored_grid.ColoredGrid",
                    "bool"
                ]
            }
        },
        "ForgingStatusResult.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "Collection[T]",
                    "Optional[List[Any]]",
                    "int"
                ]
            }
        },
        "DelegatesAPI.get_delegates": {
            "name": "get_delegates",
            "location": 120,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "str"
                ],
                "offset": [
                    "str"
                ],
                "order_by": [
                    "str"
                ]
            }
        },
        "DelegatesAPI.get_forged_by_account": {
            "name": "get_forged_by_account",
            "location": 133,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "generator_public_key": [
                    "str",
                    "Dict[str, int]",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "start_time": [
                    "str",
                    "Dict[str, int]",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "end_time": [
                    "str",
                    "Dict[str, int]",
                    "Optional[float]",
                    "Optional[str]"
                ]
            }
        },
        "DelegatesAPI.get_delegate": {
            "name": "get_delegate",
            "location": 146,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "bool",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "public_key": [
                    "dict",
                    "Dict[str, str]",
                    "str"
                ],
                "username": [
                    "dict",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "DelegatesAPI.get_voters": {
            "name": "get_voters",
            "location": 163,
            "return": [
                "FrozenSet[str]",
                "List[str]",
                "int",
                "bool",
                "Counter",
                "Optional[T]",
                "str"
            ],
            "arguments": {
                "self": [],
                "public_key": [
                    "str",
                    "Dict[str, Any]",
                    "risesdk.protocol.PublicKey",
                    "List[str]"
                ]
            }
        },
        "DelegatesAPI.search_delegates": {
            "name": "search_delegates",
            "location": 169,
            "return": [
                "List[str]",
                "int",
                "Optional[dict]",
                "List[float]",
                "list",
                "bool"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Mapping[str, str]"
                ],
                "limit": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Mapping[str, str]"
                ]
            }
        },
        "DelegatesAPI.get_delegate_count": {
            "name": "get_delegate_count",
            "location": 180,
            "return": [
                "str",
                "List[Tuple[str, str]]",
                "set",
                "Dict[str, int]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DelegatesAPI.get_next_forgers": {
            "name": "get_next_forgers",
            "location": 184,
            "return": [
                "str",
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "str"
                ]
            }
        },
        "DelegatesAPI.get_forging_status": {
            "name": "get_forging_status",
            "location": 193,
            "return": [
                "dict",
                "Optional[Dict[str, Any]]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "public_key": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "DelegatesAPI.enable_forging": {
            "name": "enable_forging",
            "location": 202,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "secret_passphrase": [
                    "Optional[risesdk.protocol.PublicKey]",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "public_key": [
                    "Optional[risesdk.protocol.PublicKey]",
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "DelegatesAPI.disable_forging": {
            "name": "disable_forging",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "secret_passphrase": [
                    "Optional[risesdk.protocol.PublicKey]",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "public_key": [
                    "Optional[risesdk.protocol.PublicKey]",
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "rise-py-master/risesdk/api/transactions.py": {
        "TransactionInfo.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "PendingTransactionInfo.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "str",
                    "Optional[BaseException]",
                    "bytes",
                    "float"
                ]
            }
        },
        "TransactionsResult.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "PendingTransactionsResult.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "int",
                    "str"
                ]
            }
        },
        "TransactionsCountResult.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "str",
                    "int"
                ]
            }
        },
        "TransactionsAPI.get_transactions": {
            "name": "get_transactions",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "block_id": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "and__block_id": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "type_cls": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "and__type_cls": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "sender": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "and__sender": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "sender_public_key": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "and__sender_public_key": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "recipient": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "and__recipient": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "sender_public_keys": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "senders": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "recipients": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "from_height": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "and__from_height": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "to_height": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "and__to_height": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "from_timestamp": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "and__from_timestamp": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "to_timestamp": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "and__to_timestamp": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "min_amount": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "and__min_amount": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "max_amount": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "and__max_amount": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "min_confirmations": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "and__min_confirmations": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "limit": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "offset": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "order_by": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[str]"
                ]
            }
        },
        "TransactionsAPI.add_transactions": {
            "name": "add_transactions",
            "location": 153,
            "return": [
                "str",
                "bytes",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransactionsAPI.get_transaction_count": {
            "name": "get_transaction_count",
            "location": 179,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransactionsAPI.get_transaction": {
            "name": "get_transaction",
            "location": 183,
            "return": [
                "Optional[List[str]]",
                "List[str]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "tx_id": [
                    "str",
                    "int"
                ]
            }
        },
        "TransactionsAPI.get_queued_transactions": {
            "name": "get_queued_transactions",
            "location": 195,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "sender_public_key": [
                    "str",
                    "dict",
                    "Callable",
                    "bytes",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "address": [
                    "str",
                    "dict",
                    "Callable",
                    "bytes",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "TransactionsAPI.get_queued_transaction": {
            "name": "get_queued_transaction",
            "location": 206,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "tx_id": [
                    "str",
                    "Union[str, int]",
                    "int"
                ]
            }
        },
        "TransactionsAPI.get_unconfirmed_transactions": {
            "name": "get_unconfirmed_transactions",
            "location": 218,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "sender_public_key": [
                    "str",
                    "dict",
                    "Callable",
                    "bytes",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "address": [
                    "str",
                    "dict",
                    "Callable",
                    "bytes",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "TransactionsAPI.get_unconfirmed_transaction": {
            "name": "get_unconfirmed_transaction",
            "location": 229,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "tx_id": [
                    "str",
                    "Union[str, int]",
                    "int"
                ]
            }
        }
    },
    "rise-py-master/risesdk/api/__init__.py": {},
    "rise-py-master/risesdk/protocol/primitives.py": {
        "Timestamp.__new__": {
            "name": "__new__",
            "location": 20,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "list",
                    "bool",
                    "tuple",
                    "dict"
                ]
            }
        },
        "Timestamp.now": {
            "name": "now",
            "location": 27,
            "return": [
                "str",
                "bool",
                "Iterable[str]",
                "List[str]"
            ],
            "arguments": {}
        },
        "Timestamp.from_datetime": {
            "name": "from_datetime",
            "location": 34,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "datetime.datetime",
                "float"
            ],
            "arguments": {
                "dt": [
                    "datetime.datetime",
                    "str",
                    "datetime.date.time"
                ]
            }
        },
        "Timestamp.to_datetime": {
            "name": "to_datetime",
            "location": 41,
            "return": [
                "int",
                "datetime.datetime",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Amount.__new__": {
            "name": "__new__",
            "location": 57,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "list",
                    "bool",
                    "tuple",
                    "dict"
                ]
            }
        },
        "Amount.from_unit": {
            "name": "from_unit",
            "location": 66,
            "return": [
                "str",
                "Type[T]",
                "Union[dict, list]",
                "Iterable[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "value": [
                    "float",
                    "dict",
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "Amount.to_unit": {
            "name": "to_unit",
            "location": 79,
            "return": [
                "float",
                "dict",
                "decimal.Decimal",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Address.__new__": {
            "name": "__new__",
            "location": 99,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "bytes",
                    "int",
                    "dict"
                ],
                "address": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "bytes",
                    "int",
                    "dict"
                ]
            }
        },
        "Address.to_bytes": {
            "name": "to_bytes",
            "location": 105,
            "return": [
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Signature.__new__": {
            "name": "__new__",
            "location": 114,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "list",
                    "bool",
                    "tuple",
                    "dict"
                ]
            }
        },
        "PublicKey.__new__": {
            "name": "__new__",
            "location": 126,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "list",
                    "bool",
                    "tuple",
                    "dict"
                ]
            }
        },
        "PublicKey.derive_address": {
            "name": "derive_address",
            "location": 132,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PublicKey.verify": {
            "name": "verify",
            "location": 137,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "signature": [
                    "int",
                    "bytes",
                    "List[int]"
                ],
                "message": [
                    "bytes",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "SecretKey.__new__": {
            "name": "__new__",
            "location": 152,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "list",
                    "bool",
                    "tuple",
                    "dict"
                ]
            }
        },
        "SecretKey.generate": {
            "name": "generate",
            "location": 159,
            "return": [
                "str",
                "bytes",
                "Callable[[T], Any]"
            ],
            "arguments": {
                "entropy": [
                    "bool",
                    "bytes",
                    "int"
                ]
            }
        },
        "SecretKey.from_passphrase": {
            "name": "from_passphrase",
            "location": 170,
            "return": [
                "str",
                "Dict[str, Set[str]]",
                "bytes",
                "dict"
            ],
            "arguments": {
                "passphrase": [
                    "str",
                    "IO[str]"
                ]
            }
        },
        "SecretKey.derive_public_key": {
            "name": "derive_public_key",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SecretKey.sign": {
            "name": "sign",
            "location": 195,
            "return": [
                "int",
                "decimal.Decimal",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bytes",
                    "Callable[[bytes], bytes]",
                    "dict",
                    "str"
                ]
            }
        }
    },
    "rise-py-master/risesdk/protocol/transactions.py": {
        "transaction_type": {
            "name": "transaction_type",
            "location": 9,
            "return": [
                "str",
                "Callable[..., T]",
                "Exception",
                "List[str]"
            ],
            "arguments": {
                "type_id": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "transaction_type.decorator": {
            "name": "decorator",
            "location": 13,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "Union[int, str]",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "BaseTx.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sender_public_key": [
                    "bytes",
                    "Optional[bool]"
                ],
                "fee": [
                    "bool",
                    "bytes",
                    "Union[Callable, str]",
                    "str"
                ],
                "timestamp": [
                    "Optional[float]",
                    "Optional[int]",
                    "Optional[bool]"
                ],
                "requester_public_key": [
                    "bytes",
                    "Optional[bool]"
                ],
                "signature": [
                    "bool",
                    "bytes",
                    "Union[Callable, str]",
                    "str"
                ],
                "second_signature": [
                    "bool",
                    "bytes",
                    "Union[Callable, str]",
                    "str"
                ],
                "signatures": [
                    "Optional[str]",
                    "bool",
                    "float",
                    "str"
                ]
            }
        },
        "BaseTx._type_id": {
            "name": "_type_id",
            "location": 57,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "list",
                    "Dict[str, Any]",
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "BaseTx.derive_id": {
            "name": "derive_id",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTx._asset_bytes": {
            "name": "_asset_bytes",
            "location": 73,
            "return": [
                "builtins.bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTx._asset_json": {
            "name": "_asset_json",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTx._recipient": {
            "name": "_recipient",
            "location": 81,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTx._amount": {
            "name": "_amount",
            "location": 85,
            "return": [
                "Sequence[int]",
                "int",
                "bytes",
                "dict",
                "List[List[int]]",
                "Union[int, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseTx.to_bytes": {
            "name": "to_bytes",
            "location": 88,
            "return": [
                "str",
                "bytearray",
                "bytes",
                "Union[bytes, bytearray]",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "skip_signature": [
                    "int",
                    "bool",
                    "bytes"
                ],
                "skip_second_signature": [
                    "int",
                    "bool",
                    "bytes"
                ]
            }
        },
        "BaseTx.parse_json": {
            "name": "parse_json",
            "location": 119,
            "return": [
                "bool",
                "str",
                "int",
                "Dict[str, Any]",
                "Iterator[Crypto.PublicKey.ECC.EccKey]"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "str",
                    "Optional[Dict]",
                    "dict",
                    "bytes",
                    "T"
                ]
            }
        },
        "BaseTx.from_json": {
            "name": "from_json",
            "location": 150,
            "return": [
                "str",
                "dict",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "dict",
                    "Optional[int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "BaseTx.to_json": {
            "name": "to_json",
            "location": 162,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "float",
                "bool",
                "Dict[str, List[Callable]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendTx.__init__": {
            "name": "__init__",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sender_public_key": [
                    "Optional[risesdk.protocol.primitives.Signature]",
                    "Optional[risesdk.protocol.primitives.PublicKey]",
                    "Optional[List[risesdk.protocol.primitives.Signature]]",
                    "risesdk.protocol.primitives.PublicKey",
                    "risesdk.protocol.primitives.Amount",
                    "Optional[risesdk.protocol.primitives.Timestamp]"
                ],
                "recipient": [
                    "bool",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "int"
                ],
                "amount": [
                    "bool",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "int"
                ],
                "fee": [
                    "Optional[risesdk.protocol.primitives.Signature]",
                    "Optional[risesdk.protocol.primitives.PublicKey]",
                    "Optional[List[risesdk.protocol.primitives.Signature]]",
                    "risesdk.protocol.primitives.PublicKey",
                    "risesdk.protocol.primitives.Amount",
                    "Optional[risesdk.protocol.primitives.Timestamp]"
                ],
                "timestamp": [
                    "Optional[risesdk.protocol.primitives.Signature]",
                    "Optional[risesdk.protocol.primitives.PublicKey]",
                    "Optional[List[risesdk.protocol.primitives.Signature]]",
                    "risesdk.protocol.primitives.PublicKey",
                    "risesdk.protocol.primitives.Amount",
                    "Optional[risesdk.protocol.primitives.Timestamp]"
                ],
                "requester_public_key": [
                    "Optional[risesdk.protocol.primitives.Signature]",
                    "Optional[risesdk.protocol.primitives.PublicKey]",
                    "Optional[List[risesdk.protocol.primitives.Signature]]",
                    "risesdk.protocol.primitives.PublicKey",
                    "risesdk.protocol.primitives.Amount",
                    "Optional[risesdk.protocol.primitives.Timestamp]"
                ],
                "signature": [
                    "Optional[risesdk.protocol.primitives.Signature]",
                    "Optional[risesdk.protocol.primitives.PublicKey]",
                    "Optional[List[risesdk.protocol.primitives.Signature]]",
                    "risesdk.protocol.primitives.PublicKey",
                    "risesdk.protocol.primitives.Amount",
                    "Optional[risesdk.protocol.primitives.Timestamp]"
                ],
                "second_signature": [
                    "Optional[risesdk.protocol.primitives.Signature]",
                    "Optional[risesdk.protocol.primitives.PublicKey]",
                    "Optional[List[risesdk.protocol.primitives.Signature]]",
                    "risesdk.protocol.primitives.PublicKey",
                    "risesdk.protocol.primitives.Amount",
                    "Optional[risesdk.protocol.primitives.Timestamp]"
                ],
                "signatures": [
                    "Optional[risesdk.protocol.primitives.Signature]",
                    "Optional[risesdk.protocol.primitives.PublicKey]",
                    "Optional[List[risesdk.protocol.primitives.Signature]]",
                    "risesdk.protocol.primitives.PublicKey",
                    "risesdk.protocol.primitives.Amount",
                    "Optional[risesdk.protocol.primitives.Timestamp]"
                ]
            }
        },
        "SendTx._asset_bytes": {
            "name": "_asset_bytes",
            "location": 212,
            "return": [
                "str",
                "bytearray",
                "Tuple[float, float]",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendTx._asset_json": {
            "name": "_asset_json",
            "location": 215,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendTx._amount": {
            "name": "_amount",
            "location": 219,
            "return": [
                "Sequence[int]",
                "int",
                "bytes",
                "dict",
                "List[List[int]]",
                "Union[int, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendTx._recipient": {
            "name": "_recipient",
            "location": 223,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendTx.parse_json": {
            "name": "parse_json",
            "location": 227,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "int",
                    "str",
                    "Dict[str, float]",
                    "Dict[str, Any]",
                    "dict",
                    "Callable"
                ]
            }
        },
        "RegisterSecondSignatureTx.__init__": {
            "name": "__init__",
            "location": 244,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sender_public_key": [
                    "Optional[risesdk.protocol.primitives.PublicKey]",
                    "risesdk.protocol.primitives.PublicKey",
                    "Optional[risesdk.protocol.primitives.Signature]",
                    "Optional[List[risesdk.protocol.primitives.Signature]]",
                    "Optional[risesdk.protocol.primitives.Timestamp]",
                    "risesdk.protocol.primitives.Amount"
                ],
                "second_public_key": [
                    "bytes",
                    "Optional[bool]",
                    "str"
                ],
                "fee": [
                    "Optional[risesdk.protocol.primitives.PublicKey]",
                    "risesdk.protocol.primitives.PublicKey",
                    "Optional[risesdk.protocol.primitives.Signature]",
                    "Optional[List[risesdk.protocol.primitives.Signature]]",
                    "Optional[risesdk.protocol.primitives.Timestamp]",
                    "risesdk.protocol.primitives.Amount"
                ],
                "timestamp": [
                    "Optional[risesdk.protocol.primitives.PublicKey]",
                    "risesdk.protocol.primitives.PublicKey",
                    "Optional[risesdk.protocol.primitives.Signature]",
                    "Optional[List[risesdk.protocol.primitives.Signature]]",
                    "Optional[risesdk.protocol.primitives.Timestamp]",
                    "risesdk.protocol.primitives.Amount"
                ],
                "requester_public_key": [
                    "Optional[risesdk.protocol.primitives.PublicKey]",
                    "risesdk.protocol.primitives.PublicKey",
                    "Optional[risesdk.protocol.primitives.Signature]",
                    "Optional[List[risesdk.protocol.primitives.Signature]]",
                    "Optional[risesdk.protocol.primitives.Timestamp]",
                    "risesdk.protocol.primitives.Amount"
                ],
                "signature": [
                    "Optional[risesdk.protocol.primitives.PublicKey]",
                    "risesdk.protocol.primitives.PublicKey",
                    "Optional[risesdk.protocol.primitives.Signature]",
                    "Optional[List[risesdk.protocol.primitives.Signature]]",
                    "Optional[risesdk.protocol.primitives.Timestamp]",
                    "risesdk.protocol.primitives.Amount"
                ],
                "second_signature": [
                    "Optional[risesdk.protocol.primitives.PublicKey]",
                    "risesdk.protocol.primitives.PublicKey",
                    "Optional[risesdk.protocol.primitives.Signature]",
                    "Optional[List[risesdk.protocol.primitives.Signature]]",
                    "Optional[risesdk.protocol.primitives.Timestamp]",
                    "risesdk.protocol.primitives.Amount"
                ],
                "signatures": [
                    "Optional[risesdk.protocol.primitives.PublicKey]",
                    "risesdk.protocol.primitives.PublicKey",
                    "Optional[risesdk.protocol.primitives.Signature]",
                    "Optional[List[risesdk.protocol.primitives.Signature]]",
                    "Optional[risesdk.protocol.primitives.Timestamp]",
                    "risesdk.protocol.primitives.Amount"
                ]
            }
        },
        "RegisterSecondSignatureTx._asset_bytes": {
            "name": "_asset_bytes",
            "location": 266,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegisterSecondSignatureTx._asset_json": {
            "name": "_asset_json",
            "location": 269,
            "return": [
                "List[str]",
                "Callable[[T], T]",
                "bool",
                "Dict[int, Dict[str, Any]]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegisterSecondSignatureTx.parse_json": {
            "name": "parse_json",
            "location": 277,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "T",
                    "Type",
                    "str",
                    "dict"
                ]
            }
        },
        "RegisterDelegateTx.__init__": {
            "name": "__init__",
            "location": 305,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sender_public_key": [
                    "Optional[risesdk.protocol.primitives.PublicKey]",
                    "Optional[risesdk.protocol.primitives.Signature]",
                    "Optional[List[risesdk.protocol.primitives.Signature]]",
                    "risesdk.protocol.primitives.Amount",
                    "risesdk.protocol.primitives.PublicKey",
                    "Optional[risesdk.protocol.primitives.Timestamp]"
                ],
                "username": [
                    "bytes",
                    "bool",
                    "str",
                    "Union[Callable, str]"
                ],
                "fee": [
                    "Optional[risesdk.protocol.primitives.PublicKey]",
                    "Optional[risesdk.protocol.primitives.Signature]",
                    "Optional[List[risesdk.protocol.primitives.Signature]]",
                    "risesdk.protocol.primitives.Amount",
                    "risesdk.protocol.primitives.PublicKey",
                    "Optional[risesdk.protocol.primitives.Timestamp]"
                ],
                "timestamp": [
                    "Optional[risesdk.protocol.primitives.PublicKey]",
                    "Optional[risesdk.protocol.primitives.Signature]",
                    "Optional[List[risesdk.protocol.primitives.Signature]]",
                    "risesdk.protocol.primitives.Amount",
                    "risesdk.protocol.primitives.PublicKey",
                    "Optional[risesdk.protocol.primitives.Timestamp]"
                ],
                "requester_public_key": [
                    "Optional[risesdk.protocol.primitives.PublicKey]",
                    "Optional[risesdk.protocol.primitives.Signature]",
                    "Optional[List[risesdk.protocol.primitives.Signature]]",
                    "risesdk.protocol.primitives.Amount",
                    "risesdk.protocol.primitives.PublicKey",
                    "Optional[risesdk.protocol.primitives.Timestamp]"
                ],
                "signature": [
                    "Optional[risesdk.protocol.primitives.PublicKey]",
                    "Optional[risesdk.protocol.primitives.Signature]",
                    "Optional[List[risesdk.protocol.primitives.Signature]]",
                    "risesdk.protocol.primitives.Amount",
                    "risesdk.protocol.primitives.PublicKey",
                    "Optional[risesdk.protocol.primitives.Timestamp]"
                ],
                "second_signature": [
                    "Optional[risesdk.protocol.primitives.PublicKey]",
                    "Optional[risesdk.protocol.primitives.Signature]",
                    "Optional[List[risesdk.protocol.primitives.Signature]]",
                    "risesdk.protocol.primitives.Amount",
                    "risesdk.protocol.primitives.PublicKey",
                    "Optional[risesdk.protocol.primitives.Timestamp]"
                ],
                "signatures": [
                    "Optional[risesdk.protocol.primitives.PublicKey]",
                    "Optional[risesdk.protocol.primitives.Signature]",
                    "Optional[List[risesdk.protocol.primitives.Signature]]",
                    "risesdk.protocol.primitives.Amount",
                    "risesdk.protocol.primitives.PublicKey",
                    "Optional[risesdk.protocol.primitives.Timestamp]"
                ]
            }
        },
        "RegisterDelegateTx._asset_bytes": {
            "name": "_asset_bytes",
            "location": 327,
            "return": [
                "str",
                "bytearray",
                "Tuple[float, float]",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegisterDelegateTx._asset_json": {
            "name": "_asset_json",
            "location": 330,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RegisterDelegateTx.parse_json": {
            "name": "parse_json",
            "location": 338,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "T",
                    "Type",
                    "str",
                    "dict"
                ]
            }
        },
        "VoteTx.__init__": {
            "name": "__init__",
            "location": 367,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sender_public_key": [
                    "risesdk.protocol.primitives.Amount",
                    "Optional[risesdk.protocol.primitives.PublicKey]",
                    "Optional[risesdk.protocol.primitives.Timestamp]",
                    "Optional[List[risesdk.protocol.primitives.Signature]]",
                    "Optional[risesdk.protocol.primitives.Signature]",
                    "risesdk.protocol.primitives.PublicKey",
                    "bytes"
                ],
                "add_votes": [
                    "str",
                    "List[risesdk.protocol.primitives.PublicKey]"
                ],
                "remove_votes": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "fee": [
                    "risesdk.protocol.primitives.Amount",
                    "Optional[risesdk.protocol.primitives.PublicKey]",
                    "Optional[risesdk.protocol.primitives.Timestamp]",
                    "Optional[List[risesdk.protocol.primitives.Signature]]",
                    "Optional[risesdk.protocol.primitives.Signature]",
                    "risesdk.protocol.primitives.PublicKey",
                    "bytes"
                ],
                "timestamp": [
                    "risesdk.protocol.primitives.Amount",
                    "Optional[risesdk.protocol.primitives.PublicKey]",
                    "Optional[risesdk.protocol.primitives.Timestamp]",
                    "Optional[List[risesdk.protocol.primitives.Signature]]",
                    "Optional[risesdk.protocol.primitives.Signature]",
                    "risesdk.protocol.primitives.PublicKey",
                    "bytes"
                ],
                "requester_public_key": [
                    "risesdk.protocol.primitives.Amount",
                    "Optional[risesdk.protocol.primitives.PublicKey]",
                    "Optional[risesdk.protocol.primitives.Timestamp]",
                    "Optional[List[risesdk.protocol.primitives.Signature]]",
                    "Optional[risesdk.protocol.primitives.Signature]",
                    "risesdk.protocol.primitives.PublicKey",
                    "bytes"
                ],
                "signature": [
                    "risesdk.protocol.primitives.Amount",
                    "Optional[risesdk.protocol.primitives.PublicKey]",
                    "Optional[risesdk.protocol.primitives.Timestamp]",
                    "Optional[List[risesdk.protocol.primitives.Signature]]",
                    "Optional[risesdk.protocol.primitives.Signature]",
                    "risesdk.protocol.primitives.PublicKey",
                    "bytes"
                ],
                "second_signature": [
                    "risesdk.protocol.primitives.Amount",
                    "Optional[risesdk.protocol.primitives.PublicKey]",
                    "Optional[risesdk.protocol.primitives.Timestamp]",
                    "Optional[List[risesdk.protocol.primitives.Signature]]",
                    "Optional[risesdk.protocol.primitives.Signature]",
                    "risesdk.protocol.primitives.PublicKey",
                    "bytes"
                ],
                "signatures": [
                    "risesdk.protocol.primitives.Amount",
                    "Optional[risesdk.protocol.primitives.PublicKey]",
                    "Optional[risesdk.protocol.primitives.Timestamp]",
                    "Optional[List[risesdk.protocol.primitives.Signature]]",
                    "Optional[risesdk.protocol.primitives.Signature]",
                    "risesdk.protocol.primitives.PublicKey",
                    "bytes"
                ]
            }
        },
        "VoteTx._recipient": {
            "name": "_recipient",
            "location": 392,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VoteTx._asset_bytes": {
            "name": "_asset_bytes",
            "location": 395,
            "return": [
                "str",
                "bytearray",
                "Tuple[float, float]",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "VoteTx._asset_json": {
            "name": "_asset_json",
            "location": 403,
            "return": [
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VoteTx.parse_json": {
            "name": "parse_json",
            "location": 413,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "cls": [],
                "data": [
                    "T",
                    "Type",
                    "str",
                    "dict"
                ]
            }
        }
    },
    "rise-py-master/risesdk/protocol/__init__.py": {},
    "rise-py-master/tests/test_api.py": {
        "APITestCase.setUpClass": {
            "name": "setUpClass",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "TestAccountsAPI.test_get_account": {
            "name": "test_get_account",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAccountsAPI.test_get_account_delegates": {
            "name": "test_get_account_delegates",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlocksAPI.test_get_blocks": {
            "name": "test_get_blocks",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlocksAPI.test_get_block": {
            "name": "test_get_block",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlocksAPI.test_get_fees": {
            "name": "test_get_fees",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBlocksAPI.test_get_status": {
            "name": "test_get_status",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDelegatesAPI.test_get_delegates": {
            "name": "test_get_delegates",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDelegatesAPI.test_get_forged_by_account": {
            "name": "test_get_forged_by_account",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDelegatesAPI.test_get_delegate": {
            "name": "test_get_delegate",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDelegatesAPI.test_get_voters": {
            "name": "test_get_voters",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDelegatesAPI.test_search_delegates": {
            "name": "test_search_delegates",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDelegatesAPI.test_get_delegate_count": {
            "name": "test_get_delegate_count",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDelegatesAPI.test_get_next_forgers": {
            "name": "test_get_next_forgers",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDelegatesAPI.test_get_forging_status": {
            "name": "test_get_forging_status",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDelegatesAPI.test_enable_forging": {
            "name": "test_enable_forging",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDelegatesAPI.test_disable_forging": {
            "name": "test_disable_forging",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionsAPI.test_get_transactions": {
            "name": "test_get_transactions",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionsAPI.test_add_transactions": {
            "name": "test_add_transactions",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionsAPI.test_get_transaction_count": {
            "name": "test_get_transaction_count",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionsAPI.test_get_transaction": {
            "name": "test_get_transaction",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionsAPI.test_get_queued_transactions": {
            "name": "test_get_queued_transactions",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionsAPI.test_get_queued_transaction": {
            "name": "test_get_queued_transaction",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionsAPI.test_get_unconfirmed_transactions": {
            "name": "test_get_unconfirmed_transactions",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransactionsAPI.test_get_unconfirmed_transaction": {
            "name": "test_get_unconfirmed_transaction",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rise-py-master/tests/__init__.py": {},
    "rise-py-master/tests/fixtures/__init__.py": {
        "_load": {
            "name": "_load",
            "location": 7,
            "return": [
                "Union[str, IO]",
                "Dict[str, Any]",
                "Callable[[str], T]",
                "Callable",
                "dict",
                "IO[str]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "Fixtures.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rise-py-master/tests/protocol/test_primitives.py": {
        "TestTimestamp.test_negative": {
            "name": "test_negative",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimestamp.test_valid": {
            "name": "test_valid",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimestamp.test_to_datetime": {
            "name": "test_to_datetime",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimestamp.test_from": {
            "name": "test_from",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAmount.test_negative": {
            "name": "test_negative",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAmount.test_upper_bound": {
            "name": "test_upper_bound",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAmount.test_valid": {
            "name": "test_valid",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAmount.test_from_unit": {
            "name": "test_from_unit",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAddress.test_valid": {
            "name": "test_valid",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPublicKey.setUpClass": {
            "name": "setUpClass",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "Type",
                    "float",
                    "int",
                    "Callable"
                ]
            }
        },
        "TestPublicKey.test_invalid": {
            "name": "test_invalid",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPublicKey.test_valid": {
            "name": "test_valid",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPublicKey.test_derive_address": {
            "name": "test_derive_address",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPublicKey.test_verify": {
            "name": "test_verify",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSecretKey.setUpClass": {
            "name": "setUpClass",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "Type",
                    "float",
                    "int",
                    "Callable"
                ]
            }
        },
        "TestSecretKey.test_derive_public_key": {
            "name": "test_derive_public_key",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSecretKey.test_sign": {
            "name": "test_sign",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSecretKey.test_generate": {
            "name": "test_generate",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSignature.test_invalid": {
            "name": "test_invalid",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSignature.test_valid": {
            "name": "test_valid",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rise-py-master/tests/protocol/test_transactions.py": {
        "TestTransactions.setUpClass": {
            "name": "setUpClass",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "Type",
                    "float",
                    "int",
                    "Callable"
                ]
            }
        },
        "TestTransactions.test_tx_fixtures": {
            "name": "test_tx_fixtures",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransactions.test_signing_fixtures": {
            "name": "test_signing_fixtures",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransactions.test_send_from_json": {
            "name": "test_send_from_json",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransactions.test_vote_from_json": {
            "name": "test_vote_from_json",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransactions.test_register_delegate_from_json": {
            "name": "test_register_delegate_from_json",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransactions.test_register_second_signature_from_json": {
            "name": "test_register_second_signature_from_json",
            "location": 196,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rise-py-master/tests/protocol/__init__.py": {}
}
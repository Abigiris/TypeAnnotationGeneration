{
    "rl_algorithms-master/run_lunarlander_continuous_v2.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 19,
            "return": [
                "argparse.Namespace",
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rl_algorithms-master/run_lunarlander_v2.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 19,
            "return": [
                "argparse.Namespace",
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rl_algorithms-master/run_pong_no_frameskip_v4.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 17,
            "return": [
                "argparse.Namespace",
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "env_generator": {
            "name": "env_generator",
            "location": 87,
            "return": [
                "str",
                "int",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "env_name": [
                    "str",
                    "Iterable[str]"
                ],
                "max_episode_steps": [
                    "str",
                    "Iterable[str]"
                ],
                "frame_stack": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "env_generator._thunk": {
            "name": "_thunk",
            "location": 88,
            "return": [
                "int",
                "bool",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "rank": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "rl_algorithms-master/run_reacher_v2.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 19,
            "return": [
                "argparse.Namespace",
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rl_algorithms-master/setup.py": {
        "get_version": {
            "name": "get_version",
            "location": 12,
            "return": [
                "str",
                "Optional[str]",
                "Union[str, Tuple[str, str]]"
            ],
            "arguments": {}
        }
    },
    "rl_algorithms-master/configs/lunarlander_continuous_v2/__init__.py": {},
    "rl_algorithms-master/configs/lunarlander_v2/__init__.py": {},
    "rl_algorithms-master/configs/pong_no_frameskip_v4/__init__.py": {},
    "rl_algorithms-master/configs/reacher_v2/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/registry.py": {
        "build_agent": {
            "name": "build_agent",
            "location": 14,
            "return": [
                "str",
                "Optional[str]",
                "Union[str, bytes]",
                "BinaryIO",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "cfg": [
                    "str"
                ],
                "build_args": [
                    "str"
                ]
            }
        },
        "build_learner": {
            "name": "build_learner",
            "location": 19,
            "return": [
                "str",
                "Optional[str]",
                "Union[str, bytes]",
                "BinaryIO",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "cfg": [
                    "str"
                ],
                "build_args": [
                    "str"
                ]
            }
        },
        "build_backbone": {
            "name": "build_backbone",
            "location": 24,
            "return": [
                "str",
                "Optional[str]",
                "Union[str, bytes]",
                "BinaryIO",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "cfg": [
                    "str"
                ],
                "build_args": [
                    "str"
                ]
            }
        },
        "build_head": {
            "name": "build_head",
            "location": 29,
            "return": [
                "str",
                "Optional[str]",
                "Union[str, bytes]",
                "BinaryIO",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "cfg": [
                    "str"
                ],
                "build_args": [
                    "str"
                ]
            }
        },
        "build_loss": {
            "name": "build_loss",
            "location": 34,
            "return": [
                "str",
                "Optional[str]",
                "Union[str, bytes]",
                "BinaryIO",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "cfg": [
                    "str"
                ],
                "build_args": [
                    "str"
                ]
            }
        },
        "build_her": {
            "name": "build_her",
            "location": 39,
            "return": [
                "str",
                "Optional[str]",
                "Union[str, bytes]",
                "BinaryIO",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "cfg": [
                    "List[dict]",
                    "cmk.base.config.ConfigCache"
                ],
                "build_args": [
                    "List[dict]",
                    "cmk.base.config.ConfigCache"
                ]
            }
        },
        "build_worker": {
            "name": "build_worker",
            "location": 44,
            "return": [
                "str",
                "Optional[str]",
                "Union[str, bytes]",
                "BinaryIO",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "cfg": [
                    "str"
                ],
                "build_args": [
                    "str"
                ]
            }
        },
        "build_logger": {
            "name": "build_logger",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "cfg": [
                    "int"
                ],
                "build_args": [
                    "int"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/a2c/agent.py": {
        "A2CAgent.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "env_info": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "hyper_params": [
                    "Dict[str, Any]",
                    "bool",
                    "Callable"
                ],
                "learner_cfg": [
                    "bool",
                    "list",
                    "Mapping[str, Any]"
                ],
                "log_cfg": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "is_test": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "load_from": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "is_render": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "render_after": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "is_log": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "save_period": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "episode_num": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "max_episode_steps": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "interim_test_num": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ]
            }
        },
        "A2CAgent.select_action": {
            "name": "select_action",
            "location": 94,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "torch.Tensor",
                    "torch.nn.utils.rnn.PackedSequence"
                ]
            }
        },
        "A2CAgent.step": {
            "name": "step",
            "location": 110,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "A2CAgent.write_log": {
            "name": "write_log",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "log_value": [
                    "tuple",
                    "str",
                    "bool",
                    "Callable[..., T]"
                ]
            }
        },
        "A2CAgent.train": {
            "name": "train",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/a2c/learner.py": {
        "A2CLearner.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hyper_params": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[float]",
                    "List[str]"
                ],
                "log_cfg": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[float]",
                    "List[str]"
                ],
                "backbone": [
                    "bool",
                    "str",
                    "int",
                    "float"
                ],
                "head": [
                    "bool",
                    "str",
                    "int",
                    "float"
                ],
                "optim_cfg": [
                    "bool",
                    "str",
                    "int",
                    "float"
                ],
                "env_name": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[float]",
                    "List[str]"
                ],
                "state_size": [
                    "int",
                    "str",
                    "bool",
                    "Union[None, int]"
                ],
                "output_size": [
                    "int",
                    "Optional[int]",
                    "bool",
                    "Union[Tuple[int, int], int]"
                ],
                "is_test": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[float]",
                    "List[str]"
                ],
                "load_from": [
                    "bool",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "A2CLearner._init_network": {
            "name": "_init_network",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "A2CLearner.update_model": {
            "name": "update_model",
            "location": 80,
            "return": [
                "Iterable[str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "experience": [
                    "dict",
                    "bytes"
                ]
            }
        },
        "A2CLearner.save_params": {
            "name": "save_params",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_episode": [
                    "int",
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        },
        "A2CLearner.load_params": {
            "name": "load_params",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "A2CLearner.get_state_dict": {
            "name": "get_state_dict",
            "location": 139,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "A2CLearner.get_policy": {
            "name": "get_policy",
            "location": 143,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/a2c/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/acer/agent.py": {
        "ACERAgent.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "env_info": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "hyper_params": [
                    "Dict[str, Any]",
                    "bool",
                    "dict"
                ],
                "learner_cfg": [
                    "bool",
                    "list",
                    "Mapping[str, Any]"
                ],
                "log_cfg": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "is_test": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "load_from": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "is_render": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "render_after": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "is_log": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "save_period": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "episode_num": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "max_episode_steps": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "interim_test_num": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ]
            }
        },
        "ACERAgent.select_action": {
            "name": "select_action",
            "location": 89,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "torch.Tensor"
                ]
            }
        },
        "ACERAgent.step": {
            "name": "step",
            "location": 98,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "dict",
                    "numpy.ndarray",
                    "str"
                ]
            }
        },
        "ACERAgent.write_log": {
            "name": "write_log",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "log_value": [
                    "int",
                    "Optional[bool]",
                    "List[int]"
                ]
            }
        },
        "ACERAgent.train": {
            "name": "train",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/acer/buffer.py": {
        "ReplayMemory.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "buffer_size": [
                    "int",
                    "torch.LongTensor",
                    "numpy.ndarray"
                ],
                "n_rollout": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "ReplayMemory.add": {
            "name": "add",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "seq_data": [
                    "dict",
                    "list",
                    "str"
                ]
            }
        },
        "ReplayMemory._initialize_buffers": {
            "name": "_initialize_buffers",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state": [
                    "List[int]",
                    "numpy.ndarray",
                    "common.MechanismState",
                    "torch.Tensor",
                    "int"
                ],
                "probs": [
                    "List[int]",
                    "numpy.ndarray",
                    "common.MechanismState",
                    "torch.Tensor",
                    "int"
                ]
            }
        },
        "ReplayMemory.sample": {
            "name": "sample",
            "location": 73,
            "return": [
                "List[str]",
                "dict",
                "str",
                "allennlp.common.util.JsonDict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "on_policy": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ReplayMemory.__len__": {
            "name": "__len__",
            "location": 100,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/acer/learner.py": {
        "ACERLearner.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "backbone": [
                    "bool"
                ],
                "head": [
                    "bool"
                ],
                "optim_cfg": [
                    "bool"
                ],
                "trust_region": [
                    "bool"
                ],
                "hyper_params": [
                    "bool",
                    "str",
                    "Callable",
                    "int"
                ],
                "log_cfg": [
                    "bool",
                    "int",
                    "float",
                    "str"
                ],
                "env_info": [
                    "bool",
                    "float",
                    "Final",
                    "int",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "is_test": [
                    "bool",
                    "int",
                    "float",
                    "str"
                ],
                "load_from": [
                    "bool"
                ]
            }
        },
        "ACERLearner._init_network": {
            "name": "_init_network",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ACERLearner.update_model": {
            "name": "update_model",
            "location": 78,
            "return": [
                "Union[rl_algorithms.common.abstraclearner.TensorTuple, Tuple[rl_algorithms.common.abstraclearner.TensorTuple]]",
                "int",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "experience": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "ACERLearner.q_retrace": {
            "name": "q_retrace",
            "location": 151,
            "return": [
                "trezor.utils.Writer",
                "str"
            ],
            "arguments": {
                "reward": [
                    "int",
                    "List[int]",
                    "Union[int, str]",
                    "str"
                ],
                "done": [
                    "int",
                    "bool"
                ],
                "q_a": [
                    "int",
                    "bool"
                ],
                "v": [
                    "int",
                    "List[int]",
                    "float",
                    "Union[int, slice]"
                ],
                "rho_bar": [
                    "int",
                    "bool"
                ],
                "gamma": [
                    "int",
                    "bool"
                ]
            }
        },
        "ACERLearner.save_params": {
            "name": "save_params",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_episode": [
                    "int",
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        },
        "ACERLearner.load_params": {
            "name": "load_params",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "ACERLearner.get_state_dict": {
            "name": "get_state_dict",
            "location": 191,
            "return": [
                "cmk.utils.type_defs.UserId",
                "str",
                "Dict[int, dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ACERLearner.get_policy": {
            "name": "get_policy",
            "location": 195,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/acer/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/bc/ddpg_agent.py": {
        "BCDDPGAgent._initialize": {
            "name": "_initialize",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BCDDPGAgent._preprocess_state": {
            "name": "_preprocess_state",
            "location": 88,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "BCDDPGAgent._add_transition_to_memory": {
            "name": "_add_transition_to_memory",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "numpy.ndarray",
                    "List[list]",
                    "Iterable"
                ]
            }
        },
        "BCDDPGAgent.write_log": {
            "name": "write_log",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "log_value": [
                    "tuple",
                    "bytes",
                    "bool",
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "BCDDPGAgent.train": {
            "name": "train",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/bc/ddpg_learner.py": {
        "BCDDPGLearner.update_model": {
            "name": "update_model",
            "location": 28,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "experience": [
                    "rl_algorithms.common.abstraclearner.TensorTuple",
                    "Dict[str, Any]"
                ],
                "demos": [
                    "rl_algorithms.common.abstraclearner.TensorTuple",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/bc/her.py": {
        "L1DistanceRewardFn.__call__": {
            "name": "__call__",
            "location": 17,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "transition": [],
                "goal_state": [
                    "numpy.ndarray",
                    "State[np.ndarray]"
                ]
            }
        },
        "LunarLanderContinuousHER.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "reward_fn": [
                    "bool",
                    "str"
                ]
            }
        },
        "LunarLanderContinuousHER.fetch_desired_states_from_demo": {
            "name": "fetch_desired_states_from_demo",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "demo": [
                    "list",
                    "numpy.ndarray",
                    "Set[Optional[str]]",
                    "float",
                    "int"
                ]
            }
        },
        "LunarLanderContinuousHER.get_desired_state": {
            "name": "get_desired_state",
            "location": 55,
            "return": [
                "dict",
                "str",
                "int",
                "Dict[str, Any]",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "LunarLanderContinuousHER._get_final_state": {
            "name": "_get_final_state",
            "location": 59,
            "return": [
                "tuple",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "tuple",
                    "int",
                    "bool"
                ]
            }
        },
        "LunarLanderContinuousHER.generate_demo_transitions": {
            "name": "generate_demo_transitions",
            "location": 63,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "numpy.ndarray",
                "str"
            ],
            "arguments": {
                "self": [],
                "demo": [
                    "str"
                ]
            }
        },
        "ReacherRewardFn.__call__": {
            "name": "__call__",
            "location": 84,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "tuple",
                    "Callable"
                ],
                "_": [
                    "dict"
                ]
            }
        },
        "ReacherHER.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "reward_fn": [
                    "bool",
                    "str"
                ]
            }
        },
        "ReacherHER.fetch_desired_states_from_demo": {
            "name": "fetch_desired_states_from_demo",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_": [
                    "list",
                    "numpy.ndarray"
                ]
            }
        },
        "ReacherHER.get_desired_state": {
            "name": "get_desired_state",
            "location": 115,
            "return": [
                "tuple",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReacherHER._get_final_state": {
            "name": "_get_final_state",
            "location": 122,
            "return": [
                "tuple",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "transition_final": [
                    "tuple",
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "ReacherHER.generate_demo_transitions": {
            "name": "generate_demo_transitions",
            "location": 126,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "demo": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ReacherHER._append_origin_transitions": {
            "name": "_append_origin_transitions",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "origin_transitions": [
                    "str",
                    "list",
                    "tuple",
                    "Callable[[], None]"
                ],
                "transition": [
                    "str",
                    "list",
                    "tuple",
                    "Callable[[], None]"
                ],
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ReacherHER._get_transition": {
            "name": "_get_transition",
            "location": 139,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "bool"
                ],
                "goal_state": [
                    "int"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/bc/sac_agent.py": {
        "BCSACAgent._initialize": {
            "name": "_initialize",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BCSACAgent._preprocess_state": {
            "name": "_preprocess_state",
            "location": 85,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "BCSACAgent._add_transition_to_memory": {
            "name": "_add_transition_to_memory",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "numpy.ndarray",
                    "List[list]",
                    "Iterable"
                ]
            }
        },
        "BCSACAgent.write_log": {
            "name": "write_log",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "log_value": [
                    "tuple",
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "BCSACAgent.train": {
            "name": "train",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/bc/sac_learner.py": {
        "BCSACLearner.update_model": {
            "name": "update_model",
            "location": 19,
            "return": [
                "int",
                "Optional[int]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "experience": [
                    "Tuple[torch.Tensor]",
                    "rl_algorithms.common.abstraclearner.TensorTuple",
                    "Union[rl_algorithms.common.abstraclearner.TensorTuple, Tuple[rl_algorithms.common.abstraclearner.TensorTuple]]",
                    "list",
                    "torch.Tensor"
                ],
                "demos": [
                    "rl_algorithms.common.abstraclearner.TensorTuple",
                    "bool",
                    "List[str]"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/bc/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/common/grad_cam.py": {
        "CAMBaseWrapper.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "CAMBaseWrapper._encode_one_hot": {
            "name": "_encode_one_hot",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "int",
                    "torch.Tensor",
                    "List[int]",
                    "str"
                ]
            }
        },
        "CAMBaseWrapper.forward": {
            "name": "forward",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "str",
                    "Union[tensorflow.Tensor, numpy.ndarray]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "CAMBaseWrapper.backward": {
            "name": "backward",
            "location": 43,
            "return": [
                "torch.Tensor"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "str",
                    "int"
                ]
            }
        },
        "CAMBaseWrapper.generate": {
            "name": "generate",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target_layer": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "CAMBaseWrapper.remove_hook": {
            "name": "remove_hook",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GradCAM.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "model": [
                    "List[str]",
                    "torch.Tensor",
                    "List[Dict[str, Any]]",
                    "Tuple[str, Set[str]]",
                    "str"
                ],
                "candidate_layers": [
                    "bool",
                    "Optional[bool]",
                    "Optional[Type[Exception]]"
                ]
            }
        },
        "GradCAM._find": {
            "name": "_find",
            "location": 102,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "pool": [
                    "OrderedDict",
                    "str",
                    "Dict[str, Any]",
                    "List[dict]"
                ],
                "target_layer": [
                    "str",
                    "float"
                ]
            }
        },
        "GradCAM._compute_grad_weights": {
            "name": "_compute_grad_weights",
            "location": 110,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "grads": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "GradCAM.forward": {
            "name": "forward",
            "location": 114,
            "return": [
                "Optional[int]",
                "str",
                "int",
                "Callable",
                "numpy.ndarray",
                "Optional[str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "GradCAM.generate": {
            "name": "generate",
            "location": 119,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "target_layer": [
                    "List[int]",
                    "Iterable[T]"
                ]
            }
        },
        "GradCAM.__init__.forward_hook": {
            "name": "forward_hook",
            "location": 80,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "GradCAM.__init__.backward_hook": {
            "name": "backward_hook",
            "location": 87,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "GradCAM.__init__.forward_hook.forward_hook_": {
            "name": "forward_hook_",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "_": [
                    "bytes",
                    "numpy.ma.MaskedArray",
                    "Iterable[str]",
                    "torch.Tensor",
                    "List[str]"
                ],
                "__": [
                    "bytes",
                    "numpy.ma.MaskedArray",
                    "Iterable[str]",
                    "torch.Tensor",
                    "List[str]"
                ],
                "output": [
                    "str",
                    "List[str]",
                    "bytes",
                    "dict"
                ]
            }
        },
        "GradCAM.__init__.backward_hook.backward_hook_": {
            "name": "backward_hook_",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "_": [
                    "tuple",
                    "bool",
                    "bytes",
                    "Callable"
                ],
                "__": [
                    "tuple",
                    "bool",
                    "bytes",
                    "Callable"
                ],
                "grad_out": [
                    "dict",
                    "bytes",
                    "numpy.ndarray",
                    "float"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/helper_functions.py": {
        "tanh": {
            "name": "tanh",
            "location": 21,
            "return": [
                "bool",
                "utils.Node",
                "numpy.ndarray"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "identity": {
            "name": "identity",
            "location": 26,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "relu": {
            "name": "relu",
            "location": 31,
            "return": [
                "bool",
                "utils.Node",
                "numpy.ndarray"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "soft_update": {
            "name": "soft_update",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "local": [
                    "torch.nn.Module",
                    "str",
                    "bool",
                    "List[str]"
                ],
                "target": [
                    "torch.nn.Module",
                    "str",
                    "bool",
                    "List[str]"
                ],
                "tau": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "hard_update": {
            "name": "hard_update",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "local": [
                    "torch.nn.Module",
                    "cmk.utils.type_defs.EventRule"
                ],
                "target": [
                    "torch.nn.Module",
                    "cmk.utils.type_defs.EventRule"
                ]
            }
        },
        "set_random_seed": {
            "name": "set_random_seed",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "seed": [
                    "int",
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ],
                "env": [
                    "gym.Env",
                    "str"
                ]
            }
        },
        "make_one_hot": {
            "name": "make_one_hot",
            "location": 55,
            "return": [
                "str",
                "bool",
                "List[Dict]",
                "int"
            ],
            "arguments": {
                "labels": [
                    "str"
                ],
                "c": [
                    "Sequence[T]",
                    "str",
                    "int"
                ]
            }
        },
        "get_n_step_info_from_demo": {
            "name": "get_n_step_info_from_demo",
            "location": 62,
            "return": [
                "str",
                "Optional[str]",
                "list",
                "Callable[[T], List[T]]"
            ],
            "arguments": {
                "demo": [
                    "list",
                    "float",
                    "bool",
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "n_step": [
                    "int",
                    "bytes"
                ],
                "gamma": [
                    "float",
                    "int"
                ]
            }
        },
        "get_n_step_info": {
            "name": "get_n_step_info",
            "location": 88,
            "return": [
                "str",
                "bool",
                "numpy.ndarray",
                "float"
            ],
            "arguments": {
                "n_step_buffer": [
                    "Deque",
                    "int",
                    "List[int]"
                ],
                "gamma": [
                    "int",
                    "float"
                ]
            }
        },
        "numpy2floattensor": {
            "name": "numpy2floattensor",
            "location": 104,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "arrays": [
                    "bool"
                ],
                "device_": [
                    "bytes",
                    "torch.device",
                    "torch.Tensor",
                    "float"
                ]
            }
        },
        "state_dict2numpy": {
            "name": "state_dict2numpy",
            "location": 124,
            "return": [
                "dict",
                "bool",
                "str"
            ],
            "arguments": {
                "state_dict": [
                    "Dict[str, Any]",
                    "dict",
                    "numpy.ndarray",
                    "Dict[Any, Dict[str, Any]]"
                ]
            }
        },
        "smoothen_graph": {
            "name": "smoothen_graph",
            "location": 132,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "scalars": [
                    "int",
                    "Callable",
                    "str"
                ],
                "weight": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "set_cfg_for_intergration_test": {
            "name": "set_cfg_for_intergration_test",
            "location": 150,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "cfg": [
                    "rl_algorithms.utils.config.ConfigDict",
                    "torch.Tensor",
                    "int",
                    "List[List[T]]",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/noise.py": {
        "GaussianNoise.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "action_dim": [
                    "int",
                    "bool",
                    "float"
                ],
                "min_sigma": [
                    "int",
                    "bool",
                    "float"
                ],
                "max_sigma": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "decay_period": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "GaussianNoise.sample": {
            "name": "sample",
            "location": 29,
            "return": [
                "Callable",
                "str",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "int",
                    "float"
                ]
            }
        },
        "OUNoise.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "bytes"
                ],
                "mu": [
                    "int",
                    "bytes"
                ],
                "theta": [
                    "int",
                    "bytes"
                ],
                "sigma": [
                    "int",
                    "bytes"
                ]
            }
        },
        "OUNoise.reset": {
            "name": "reset",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OUNoise.sample": {
            "name": "sample",
            "location": 59,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/saliency_map.py": {
        "make_saliency_dir": {
            "name": "make_saliency_dir",
            "location": 22,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "date_time": [
                    "str"
                ]
            }
        },
        "compute_saliency_maps": {
            "name": "compute_saliency_maps",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "X": [
                    "int",
                    "list",
                    "Union[int, str]"
                ],
                "y": [
                    "bool",
                    "List[str]",
                    "numpy.ndarray",
                    "float",
                    "int",
                    "tuple"
                ],
                "model": [
                    "numpy.ndarray",
                    "bool",
                    "Generator",
                    "str"
                ],
                "device": [
                    "float",
                    "numpy.ndarray",
                    "bool",
                    "List[str]",
                    "int"
                ]
            }
        },
        "save_saliency_maps": {
            "name": "save_saliency_maps",
            "location": 63,
            "return": [
                "str",
                "Dict[str, str]",
                "bool",
                "int"
            ],
            "arguments": {
                "i": [
                    "str",
                    "TextIO",
                    "bool"
                ],
                "X": [
                    "int",
                    "list",
                    "List[str]"
                ],
                "y": [
                    "int",
                    "bool",
                    "Tuple[float, float]",
                    "Callable[[int], bool]",
                    "float",
                    "dict"
                ],
                "model": [
                    "str",
                    "int",
                    "list"
                ],
                "device": [
                    "bool",
                    "int",
                    "Union[\"GenericFixed\", \"Table\"]",
                    "Optional[torch.nn.Module]",
                    "numpy.array",
                    "list",
                    "Sequence[Sequence[float]]"
                ],
                "saliency_map_dir": [
                    "str",
                    "TextIO",
                    "bool"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/common/abstract/agent.py": {
        "Agent.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "dict",
                    "Optional[str]",
                    "gym.Env",
                    "bool",
                    "str"
                ],
                "env_info": [
                    "Optional[bool]",
                    "Callable",
                    "bool",
                    "Optional[str]",
                    "Mapping[str, Any]",
                    "int"
                ],
                "log_cfg": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "is_test": [
                    "dict",
                    "Optional[str]",
                    "gym.Env",
                    "bool",
                    "str"
                ],
                "load_from": [
                    "dict",
                    "Optional[str]",
                    "gym.Env",
                    "bool",
                    "str"
                ],
                "is_render": [
                    "dict",
                    "Optional[str]",
                    "gym.Env",
                    "bool",
                    "str"
                ],
                "render_after": [
                    "dict",
                    "Optional[str]",
                    "gym.Env",
                    "bool",
                    "str"
                ],
                "is_log": [
                    "str",
                    "set"
                ],
                "save_period": [
                    "dict",
                    "Optional[str]",
                    "gym.Env",
                    "bool",
                    "str"
                ],
                "episode_num": [
                    "dict",
                    "Optional[str]",
                    "gym.Env",
                    "bool",
                    "str"
                ],
                "max_episode_steps": [
                    "int",
                    "Dict[str, int]",
                    "bool",
                    "Iterable[str]",
                    "Union[int, Dict[str, int]]",
                    "Dict[str, List[str]]",
                    "Optional[Dict[str, str]]"
                ],
                "interim_test_num": [
                    "bool",
                    "List[str]"
                ]
            }
        },
        "Agent.select_action": {
            "name": "select_action",
            "location": 72,
            "return": [
                "typing.Union[torch.Tensor, numpy.ndarray]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "numpy.ndarray",
                    "common.MechanismState",
                    "str"
                ]
            }
        },
        "Agent.step": {
            "name": "step",
            "location": 76,
            "return": [
                "typing.Tuple[numpy.ndarray, numpy.float64, builtins.bool, builtins.dict]"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Agent.write_log": {
            "name": "write_log",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "log_value": [
                    "tuple",
                    "dict",
                    "str",
                    "bool"
                ]
            }
        },
        "Agent.train": {
            "name": "train",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.set_wandb": {
            "name": "set_wandb",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.interim_test": {
            "name": "interim_test",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.test": {
            "name": "test",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent._test": {
            "name": "_test",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "interim_test": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "Agent.test_with_gradcam": {
            "name": "test_with_gradcam",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Agent.test_with_saliency_map": {
            "name": "test_with_saliency_map",
            "location": 246,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/abstract/architecture.py": {
        "Architecture._spawn": {
            "name": "_spawn",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Architecture.train": {
            "name": "train",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Architecture.test": {
            "name": "test",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/abstract/buffer.py": {
        "BaseBuffer.add": {
            "name": "add",
            "location": 18,
            "return": [
                "typing.Tuple[typing.Any, ...]"
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "BaseBuffer.sample": {
            "name": "sample",
            "location": 22,
            "return": [
                "typing.Tuple[numpy.ndarray, ...]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseBuffer.__len__": {
            "name": "__len__",
            "location": 26,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BufferWrapper.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "base_buffer": [
                    "List[str]",
                    "int",
                    "str",
                    "Optional[str]",
                    "numpy.ndarray",
                    "bool"
                ]
            }
        },
        "BufferWrapper.add": {
            "name": "add",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "int",
                    "VT",
                    "T"
                ]
            }
        },
        "BufferWrapper.sample": {
            "name": "sample",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BufferWrapper.__len__": {
            "name": "__len__",
            "location": 51,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/abstract/distributed_logger.py": {
        "DistributedLogger.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "log_cfg": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "comm_cfg": [
                    "bool",
                    "Union[Callable, str]"
                ],
                "backbone": [
                    "Optional[Set[int]]",
                    "bool",
                    "raiden.utils.TokenAmount",
                    "Optional[str]",
                    "str"
                ],
                "head": [
                    "int",
                    "float",
                    "torch.Tensor"
                ],
                "env_name": [
                    "bool",
                    "str",
                    "Set[str]"
                ],
                "is_atari": [
                    "bool",
                    "Union[Callable, str]"
                ],
                "state_size": [
                    "int",
                    "Optional[int]",
                    "bool"
                ],
                "output_size": [
                    "int",
                    "bool"
                ],
                "max_update_step": [
                    "bool",
                    "Optional[int]",
                    "Type[MutableMapping[Any, Any]]",
                    "dict"
                ],
                "episode_num": [
                    "bool",
                    "Union[Callable, str]"
                ],
                "max_episode_steps": [
                    "int",
                    "Optional[int]",
                    "float",
                    "str"
                ],
                "interim_test_num": [
                    "bool"
                ],
                "is_log": [
                    "float",
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "is_render": [
                    "bool",
                    "Union[Callable, str]"
                ]
            }
        },
        "DistributedLogger._init_env": {
            "name": "_init_env",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DistributedLogger.load_params": {
            "name": "load_params",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "DistributedLogger.init_communication": {
            "name": "init_communication",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DistributedLogger.select_action": {
            "name": "select_action",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state": [
                    "numpy.ndarray",
                    "common.MechanismState",
                    "str"
                ]
            }
        },
        "DistributedLogger.write_log": {
            "name": "write_log",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "log_value": [
                    "tuple",
                    "dict",
                    "str",
                    "bool"
                ]
            }
        },
        "DistributedLogger._preprocess_state": {
            "name": "_preprocess_state",
            "location": 117,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "state": [
                    "torch.device",
                    "numpy.ndarray",
                    "str",
                    "float",
                    "dict"
                ],
                "device": [
                    "torch.device",
                    "numpy.ndarray",
                    "str",
                    "float",
                    "dict"
                ]
            }
        },
        "DistributedLogger.set_wandb": {
            "name": "set_wandb",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DistributedLogger.recv_log_info": {
            "name": "recv_log_info",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DistributedLogger.run": {
            "name": "run",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DistributedLogger.write_worker_log": {
            "name": "write_worker_log",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "worker_logs": [
                    "List[dict]",
                    "bool"
                ],
                "worker_update_interval": [
                    "int",
                    "bool",
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "DistributedLogger.test": {
            "name": "test",
            "location": 214,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "update_step": [
                    "bool",
                    "Optional[float]"
                ],
                "interim_test": [
                    "bool",
                    "Optional[float]"
                ]
            }
        },
        "DistributedLogger._test": {
            "name": "_test",
            "location": 222,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "update_step": [
                    "int",
                    "float",
                    "torch.nn.modules.rnn.GRUCell",
                    "Optional[float]",
                    "Optional[int]",
                    "numpy.ndarray"
                ],
                "interim_test": [
                    "bool",
                    "str"
                ]
            }
        },
        "DistributedLogger.synchronize": {
            "name": "synchronize",
            "location": 263,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_dict": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/abstract/distributed_worker.py": {
        "BaseDistributedWorker.select_action": {
            "name": "select_action",
            "location": 27,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "numpy.ndarray",
                    "common.MechanismState",
                    "str"
                ]
            }
        },
        "BaseDistributedWorker.step": {
            "name": "step",
            "location": 31,
            "return": [
                "typing.Tuple[numpy.ndarray, numpy.float64, builtins.bool, builtins.dict]"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "BaseDistributedWorker.synchronize": {
            "name": "synchronize",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "new_state_dict": [
                    "Dict[str, numpy.ndarray]",
                    "Callable",
                    "Union[eth.rlp.transactions.BaseTransaction, eth.utils.spoof.SpoofTransaction]"
                ]
            }
        },
        "BaseDistributedWorker._synchronize": {
            "name": "_synchronize",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "network": [
                    "rl_algorithms.common.networks.brain.Brain",
                    "int",
                    "str"
                ],
                "new_state_dict": [
                    "Dict[str, Any]",
                    "Dict[str, Tuple[int, int]]",
                    "List[bytes]",
                    "object",
                    "bool"
                ]
            }
        },
        "DistributedWorker.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rank": [
                    "bool",
                    "int",
                    "float",
                    "Union[torch.Tensor, float, Tuple[float, float], List[float]]"
                ],
                "device": [
                    "bool",
                    "int",
                    "float",
                    "Union[torch.Tensor, float, Tuple[float, float], List[float]]"
                ],
                "hyper_params": [
                    "bool",
                    "int",
                    "float",
                    "Union[torch.Tensor, float, Tuple[float, float], List[float]]"
                ],
                "env_name": [
                    "str",
                    "bool",
                    "float"
                ],
                "is_atari": [
                    "bool",
                    "int",
                    "float",
                    "Union[torch.Tensor, float, Tuple[float, float], List[float]]"
                ],
                "max_episode_steps": [
                    "int",
                    "Optional[int]",
                    "float",
                    "str"
                ]
            }
        },
        "DistributedWorker._init_env": {
            "name": "_init_env",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DistributedWorker.load_params": {
            "name": "load_params",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "DistributedWorker.select_action": {
            "name": "select_action",
            "location": 104,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "numpy.ndarray",
                    "common.MechanismState",
                    "str"
                ]
            }
        },
        "DistributedWorker.step": {
            "name": "step",
            "location": 108,
            "return": [
                "typing.Tuple[numpy.ndarray, numpy.float64, builtins.bool, builtins.dict]"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DistributedWorker.compute_priorities": {
            "name": "compute_priorities",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "experience": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DistributedWorker.synchronize": {
            "name": "synchronize",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "new_state_dict": [
                    "Dict[str, numpy.ndarray]",
                    "Callable",
                    "Union[eth.rlp.transactions.BaseTransaction, eth.utils.spoof.SpoofTransaction]"
                ]
            }
        },
        "DistributedWorker._preprocess_state": {
            "name": "_preprocess_state",
            "location": 121,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "state": [
                    "torch.device",
                    "numpy.ndarray",
                    "str",
                    "float",
                    "dict"
                ],
                "device": [
                    "torch.device",
                    "numpy.ndarray",
                    "str",
                    "float",
                    "dict"
                ]
            }
        },
        "DistributedWorkerWrapper.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "worker": [
                    "int",
                    "bool",
                    "float"
                ],
                "comm_cfg": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DistributedWorkerWrapper.init_communication": {
            "name": "init_communication",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DistributedWorkerWrapper.select_action": {
            "name": "select_action",
            "location": 138,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "numpy.ndarray",
                    "int",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "DistributedWorkerWrapper.step": {
            "name": "step",
            "location": 142,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "DistributedWorkerWrapper.synchronize": {
            "name": "synchronize",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "new_state_dict": [
                    "float",
                    "Dict[str, numpy.ndarray]",
                    "str",
                    "Tuple[int, int]",
                    "raiden.utils.Tuple[raiden.utils.Tuple[raiden.utils.TokenAddress, raiden.utils.ProportionalFeeAmount], ...]"
                ]
            }
        },
        "DistributedWorkerWrapper.collect_data": {
            "name": "collect_data",
            "location": 151,
            "return": [
                "typing.Dict[builtins.str, numpy.ndarray]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DistributedWorkerWrapper.run": {
            "name": "run",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DistributedWorkerWrapper.preprocess_nstep": {
            "name": "preprocess_nstep",
            "location": 158,
            "return": [
                "raiden.utils.signer.Signer",
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "nstepqueue": [
                    "Deque",
                    "Collection[int]",
                    "bytes",
                    "Callable[..., bool]",
                    "int"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/abstract/her.py": {
        "HER.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "reward_fn": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "HER.fetch_desired_states_from_demo": {
            "name": "fetch_desired_states_from_demo",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "demo": [
                    "list",
                    "numpy.ndarray"
                ]
            }
        },
        "HER.get_desired_state": {
            "name": "get_desired_state",
            "location": 37,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "HER.generate_demo_transitions": {
            "name": "generate_demo_transitions",
            "location": 41,
            "return": [
                "builtins.list"
            ],
            "arguments": {
                "self": [],
                "demo": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "HER._get_final_state": {
            "name": "_get_final_state",
            "location": 45,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "tuple",
                    "int",
                    "bool"
                ]
            }
        },
        "HER._append_origin_transitions": {
            "name": "_append_origin_transitions",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "origin_transitions": [
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "transition": [
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "desired_state": [
                    "int",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "HER._append_new_transitions": {
            "name": "_append_new_transitions",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "new_transitions": [
                    "numpy.ndarray",
                    "list",
                    "List[List[int]]",
                    "int",
                    "List[Union[int, float]]",
                    "List[Tuple[str, int]]"
                ],
                "transition": [
                    "numpy.ndarray",
                    "list",
                    "List[List[int]]",
                    "int",
                    "List[Union[int, float]]",
                    "List[Tuple[str, int]]"
                ],
                "final_state": [
                    "numpy.ndarray",
                    "list",
                    "List[List[int]]",
                    "int",
                    "List[Union[int, float]]",
                    "List[Tuple[str, int]]"
                ]
            }
        },
        "HER._get_transition": {
            "name": "_get_transition",
            "location": 60,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "bool"
                ],
                "goal_state": []
            }
        },
        "HER.generate_transitions": {
            "name": "generate_transitions",
            "location": 73,
            "return": [
                "str",
                "int",
                "List[str]",
                "numpy.ndarray",
                "OrderedDict"
            ],
            "arguments": {
                "self": [],
                "transitions": [
                    "int",
                    "numpy.random.RandomState"
                ],
                "desired_state": [
                    "Optional[str]",
                    "List[List[str]]",
                    "List[int]",
                    "str",
                    "Sequence[str]"
                ],
                "success_score": [
                    "Optional[str]",
                    "List[List[str]]",
                    "List[int]",
                    "str",
                    "Sequence[str]"
                ],
                "is_demo": [
                    "Optional[str]",
                    "List[List[str]]",
                    "List[int]",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "HER.__str__": {
            "name": "__str__",
            "location": 98,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/abstract/learner.py": {
        "BaseLearner.update_model": {
            "name": "update_model",
            "location": 25,
            "return": [
                "builtins.tuple"
            ],
            "arguments": {
                "self": [],
                "experience": [
                    "int"
                ]
            }
        },
        "BaseLearner.save_params": {
            "name": "save_params",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_episode": [
                    "int",
                    "bool"
                ]
            }
        },
        "BaseLearner.load_params": {
            "name": "load_params",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "BaseLearner.get_state_dict": {
            "name": "get_state_dict",
            "location": 40,
            "return": [
                "typing.Union[collections.OrderedDict, typing.Tuple[collections.OrderedDict]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Learner.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hyper_params": [
                    "bool",
                    "Optional[str]",
                    "dict",
                    "int"
                ],
                "log_cfg": [
                    "bytes",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "str",
                    "int"
                ],
                "env_name": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "is_test": [
                    "bool"
                ]
            }
        },
        "Learner._init_network": {
            "name": "_init_network",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Learner.update_model": {
            "name": "update_model",
            "location": 80,
            "return": [
                "builtins.tuple"
            ],
            "arguments": {
                "self": [],
                "experience": [
                    "int"
                ]
            }
        },
        "Learner.save_params": {
            "name": "save_params",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_episode": [
                    "int",
                    "bool"
                ]
            }
        },
        "Learner._save_params": {
            "name": "_save_params",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "params": [
                    "dict",
                    "str"
                ],
                "n_episode": [
                    "int",
                    "Union[int, str]"
                ]
            }
        },
        "Learner.load_params": {
            "name": "load_params",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Learner.get_state_dict": {
            "name": "get_state_dict",
            "location": 104,
            "return": [
                "typing.Union[collections.OrderedDict, typing.Tuple[collections.OrderedDict]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Learner.get_policy": {
            "name": "get_policy",
            "location": 108,
            "return": [
                "torch.nn.Module"
            ],
            "arguments": {
                "self": []
            }
        },
        "LearnerWrapper.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "learner": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "LearnerWrapper.update_model": {
            "name": "update_model",
            "location": 119,
            "return": [
                "Sequence[int]",
                "torch.nn.modules.linear.Linear",
                "int",
                "List[List[int]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "experience": [
                    "int",
                    "str",
                    "bool",
                    "torch.Tensor"
                ]
            }
        },
        "LearnerWrapper.save_params": {
            "name": "save_params",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_episode": [
                    "int"
                ]
            }
        },
        "LearnerWrapper.load_params": {
            "name": "load_params",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "List[Dict]",
                    "list"
                ]
            }
        },
        "LearnerWrapper.get_state_dict": {
            "name": "get_state_dict",
            "location": 128,
            "return": [
                "dict",
                "Exception",
                "Optional[Dict[str, Any]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DistributedLearnerWrapper.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "learner": [
                    "str"
                ],
                "comm_cfg": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DistributedLearnerWrapper.init_communication": {
            "name": "init_communication",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DistributedLearnerWrapper.update_model": {
            "name": "update_model",
            "location": 149,
            "return": [
                "Sequence[int]",
                "torch.nn.modules.linear.Linear",
                "int",
                "List[List[int]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "experience": [
                    "int",
                    "str",
                    "bool",
                    "torch.Tensor"
                ]
            }
        },
        "DistributedLearnerWrapper.save_params": {
            "name": "save_params",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_update_step": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "DistributedLearnerWrapper.load_params": {
            "name": "load_params",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "List[Dict]",
                    "list"
                ]
            }
        },
        "DistributedLearnerWrapper.get_policy": {
            "name": "get_policy",
            "location": 161,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DistributedLearnerWrapper.get_state_dict": {
            "name": "get_state_dict",
            "location": 165,
            "return": [
                "dict",
                "Exception",
                "Optional[Dict[str, Any]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DistributedLearnerWrapper.run": {
            "name": "run",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/abstract/reward_fn.py": {
        "RewardFn.__call__": {
            "name": "__call__",
            "location": 19,
            "return": [
                "numpy.float64"
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "tuple",
                    "numpy.ndarray",
                    "BaseException"
                ],
                "goal_state": [
                    "tuple",
                    "numpy.ndarray",
                    "BaseException"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/abstract/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/common/apex/architecture.py": {
        "ApeX.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "gym.Env",
                    "Mapping[str, str]",
                    "Callable",
                    "dict",
                    "bool"
                ],
                "env_info": [
                    "bool",
                    "Callable",
                    "Dict[str, Any]",
                    "rl_algorithms.utils.config.ConfigDict",
                    "instark.application.domain.common.Tenant"
                ],
                "hyper_params": [
                    "str",
                    "gym.Env",
                    "Mapping[str, str]",
                    "Callable",
                    "dict",
                    "bool"
                ],
                "learner_cfg": [
                    "str",
                    "gym.Env",
                    "Mapping[str, str]",
                    "Callable",
                    "dict",
                    "bool"
                ],
                "worker_cfg": [
                    "str",
                    "gym.Env",
                    "Mapping[str, str]",
                    "Callable",
                    "dict",
                    "bool"
                ],
                "logger_cfg": [
                    "str",
                    "gym.Env",
                    "Mapping[str, str]",
                    "Callable",
                    "dict",
                    "bool"
                ],
                "comm_cfg": [
                    "str",
                    "gym.Env",
                    "Mapping[str, str]",
                    "Callable",
                    "dict",
                    "bool"
                ],
                "log_cfg": [
                    "str"
                ],
                "is_test": [
                    "str",
                    "gym.Env",
                    "Mapping[str, str]",
                    "Callable",
                    "dict",
                    "bool"
                ],
                "load_from": [
                    "str",
                    "gym.Env",
                    "Mapping[str, str]",
                    "Callable",
                    "dict",
                    "bool"
                ],
                "is_render": [
                    "str",
                    "gym.Env",
                    "Mapping[str, str]",
                    "Callable",
                    "dict",
                    "bool"
                ],
                "render_after": [
                    "str",
                    "gym.Env",
                    "Mapping[str, str]",
                    "Callable",
                    "dict",
                    "bool"
                ],
                "is_log": [
                    "vimiv.utils.log.LazyLogger",
                    "str"
                ],
                "save_period": [
                    "str",
                    "gym.Env",
                    "Mapping[str, str]",
                    "Callable",
                    "dict",
                    "bool"
                ],
                "episode_num": [
                    "str",
                    "gym.Env",
                    "Mapping[str, str]",
                    "Callable",
                    "dict",
                    "bool"
                ],
                "max_episode_steps": [
                    "int",
                    "Optional[Tuple[int, int]]"
                ],
                "interim_test_num": [
                    "bool",
                    "str"
                ]
            }
        },
        "ApeX._spawn": {
            "name": "_spawn",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApeX.train": {
            "name": "train",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApeX.test": {
            "name": "test",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/apex/learner.py": {
        "ApeXLearnerWrapper.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "learner": [
                    "int",
                    "Optional[Union[int, float]]",
                    "bool",
                    "str"
                ],
                "comm_cfg": [
                    "str",
                    "int"
                ]
            }
        },
        "ApeXLearnerWrapper.init_communication": {
            "name": "init_communication",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApeXLearnerWrapper.recv_replay_data": {
            "name": "recv_replay_data",
            "location": 64,
            "return": [
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "IO[bytes]",
                "bool",
                "dict",
                "Optional[Dict[str, Any]]",
                "str",
                "Dict[str, List[int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApeXLearnerWrapper.send_new_priorities": {
            "name": "send_new_priorities",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "indices": [
                    "int",
                    "str"
                ],
                "priorities": [
                    "int",
                    "str"
                ]
            }
        },
        "ApeXLearnerWrapper.publish_params": {
            "name": "publish_params",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "update_step": [
                    "bytes",
                    "int",
                    "str",
                    "Dict[str, annofabcli.common.RGB]",
                    "bool"
                ],
                "np_state_dict": [
                    "bytes",
                    "int",
                    "str",
                    "Dict[str, annofabcli.common.RGB]",
                    "bool"
                ]
            }
        },
        "ApeXLearnerWrapper.send_info_to_logger": {
            "name": "send_info_to_logger",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "np_state_dict": [
                    "str",
                    "Optional[bytes]",
                    "List[Dict[str, Any]]",
                    "Optional[int]",
                    "Union[Dict, List]"
                ],
                "step_info": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "ApeXLearnerWrapper.run": {
            "name": "run",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/apex/worker.py": {
        "ApeXWorkerWrapper.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "worker": [
                    "str",
                    "int"
                ],
                "comm_cfg": [
                    "str",
                    "int"
                ]
            }
        },
        "ApeXWorkerWrapper.init_communication": {
            "name": "init_communication",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApeXWorkerWrapper.send_data_to_buffer": {
            "name": "send_data_to_buffer",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "replay_data": [
                    "dict",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Dict[str, str]",
                    "Tuple[int, int]"
                ]
            }
        },
        "ApeXWorkerWrapper.recv_params_from_learner": {
            "name": "recv_params_from_learner",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApeXWorkerWrapper.compute_priorities": {
            "name": "compute_priorities",
            "location": 81,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "experience": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ApeXWorkerWrapper.collect_data": {
            "name": "collect_data",
            "location": 85,
            "return": [
                "str",
                "int",
                "Generator",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApeXWorkerWrapper.run": {
            "name": "run",
            "location": 133,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApeXWorkerWrapper.compute_mean_scores": {
            "name": "compute_mean_scores",
            "location": 146,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "scores": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/apex/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/common/buffer/distillation_buffer.py": {
        "DistillationBuffer.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "str",
                    "Optional[Any]",
                    "bytes",
                    "bool",
                    "Mapping[str, str]",
                    "int"
                ],
                "dataset_path": [
                    "str"
                ]
            }
        },
        "DistillationBuffer.reset_dataloader": {
            "name": "reset_dataloader",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DistillationBuffer.sample_for_diltillation": {
            "name": "sample_for_diltillation",
            "location": 61,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "DistillationDataset.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dataset_path": [
                    "str",
                    "Callable[[str], None]"
                ]
            }
        },
        "DistillationDataset.__len__": {
            "name": "__len__",
            "location": 108,
            "return": [
                "Union[str, IO]",
                "IO[str]",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DistillationDataset.__getitem__": {
            "name": "__getitem__",
            "location": 112,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "List[str]",
                    "bytearray",
                    "int",
                    "list",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/buffer/gail_buffer.py": {
        "GAILBuffer.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dataset_path": [
                    "str"
                ]
            }
        },
        "GAILBuffer.load_demo": {
            "name": "load_demo",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dataset_path": [
                    "str"
                ]
            }
        },
        "GAILBuffer.add": {
            "name": "add",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GAILBuffer.sample": {
            "name": "sample",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int",
                    "list",
                    "Iterator[str]"
                ],
                "indices": [
                    "int",
                    "Union[numpy.ndarray, numpy.void]"
                ]
            }
        },
        "GAILBuffer.__len__": {
            "name": "__len__",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/buffer/replay_buffer.py": {
        "ReplayBuffer.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "max_len": [
                    "int",
                    "Tuple[int, int]",
                    "Union[None, int]"
                ],
                "batch_size": [
                    "int",
                    "Tuple[int, int]",
                    "str",
                    "Union[Tuple[int, int], int]"
                ],
                "gamma": [
                    "int",
                    "numpy.ndarray",
                    "bool",
                    "Optional[List[Any]]",
                    "float"
                ],
                "n_step": [
                    "int",
                    "float",
                    "bool",
                    "torch.Tensor",
                    "numpy.ndarray"
                ],
                "demo": [
                    "int",
                    "numpy.ndarray",
                    "torch.utils.data.Dataset",
                    "Sequence[T]",
                    "List[int]"
                ]
            }
        },
        "ReplayBuffer.add": {
            "name": "add",
            "location": 92,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "str",
                    "list"
                ]
            }
        },
        "ReplayBuffer.extend": {
            "name": "extend",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "transitions": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ReplayBuffer.sample": {
            "name": "sample",
            "location": 136,
            "return": [
                "str",
                "int",
                "List[str]",
                "allennlp.common.util.JsonDict",
                "dict",
                "IO[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "indices": [
                    "Optional[bool]",
                    "Set[str]",
                    "List[int]",
                    "Optional[numpy.ndarray]",
                    "int",
                    "torch.LongTensor"
                ]
            }
        },
        "ReplayBuffer._initialize_buffers": {
            "name": "_initialize_buffers",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "torch.Tensor",
                    "gluonts.model.common.Tensor"
                ],
                "action": [
                    "torch.Tensor",
                    "int",
                    "str"
                ]
            }
        },
        "ReplayBuffer.__len__": {
            "name": "__len__",
            "location": 164,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecurrentReplayBuffer.__init__": {
            "name": "__init__",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "max_len": [
                    "int",
                    "Union[None, int]"
                ],
                "batch_size": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "Union[None, int]"
                ],
                "sequence_size": [
                    "int",
                    "str",
                    "Union[Tuple[int, int], int]"
                ],
                "overlap_size": [
                    "int",
                    "str",
                    "Union[Tuple[int, int], int]"
                ],
                "gamma": [
                    "bool",
                    "float",
                    "Dict[str, Tuple[str, int, int]]",
                    "Dict[str, Tuple[str, str, Any]]"
                ],
                "n_step": [
                    "int",
                    "float",
                    "Union[Tuple[int, int], int]"
                ],
                "demo": [
                    "numpy.ndarray",
                    "int",
                    "List[int]",
                    "Callable"
                ]
            }
        },
        "RecurrentReplayBuffer.add": {
            "name": "add",
            "location": 243,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "rl_algorithms.common.abstraclearner.TensorTuple",
                    "Callable[..., bool]"
                ]
            }
        },
        "RecurrentReplayBuffer.sample": {
            "name": "sample",
            "location": 296,
            "return": [
                "str",
                "int",
                "List[str]",
                "allennlp.common.util.JsonDict",
                "dict",
                "IO[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "indices": [
                    "Optional[bool]",
                    "Set[str]",
                    "List[int]",
                    "Optional[numpy.ndarray]",
                    "int",
                    "torch.LongTensor"
                ]
            }
        },
        "RecurrentReplayBuffer._initialize_local_buffers": {
            "name": "_initialize_local_buffers",
            "location": 311,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RecurrentReplayBuffer._overlap_local_buffers": {
            "name": "_overlap_local_buffers",
            "location": 329,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RecurrentReplayBuffer._initialize_buffers": {
            "name": "_initialize_buffers",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "numpy.ndarray",
                    "torch.Tensor",
                    "List[int]",
                    "list",
                    "Sequence[Sequence[str]]",
                    "Sequence[Tuple[str, int]]",
                    "State[np.ndarray]"
                ],
                "action": [
                    "int",
                    "Optional[Awaitable[None]]",
                    "dict",
                    "Optional[str]"
                ],
                "hidden": [
                    "torch.Tensor",
                    "List[int]",
                    "bytes",
                    "numpy.ndarray"
                ]
            }
        },
        "RecurrentReplayBuffer.__len__": {
            "name": "__len__",
            "location": 371,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/buffer/segment_tree.py": {
        "SegmentTree.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "capacity": [
                    "float",
                    "int",
                    "bool"
                ],
                "operation": [
                    "bool",
                    "int",
                    "List[str]"
                ],
                "init_value": [
                    "int",
                    "float",
                    "set",
                    "bool",
                    "Callable[[List], bool]"
                ]
            }
        },
        "SegmentTree._operate_helper": {
            "name": "_operate_helper",
            "location": 37,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "list"
                ],
                "end": [
                    "int",
                    "float",
                    "Dict[int, List[Any]]",
                    "Collection[\"Issue\"]"
                ],
                "node": [
                    "int",
                    "Optional[int]",
                    "Optional[bool]"
                ],
                "node_start": [
                    "int",
                    "List[str]",
                    "str"
                ],
                "node_end": [
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        },
        "SegmentTree.operate": {
            "name": "operate",
            "location": 55,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "str",
                    "set",
                    "T",
                    "int"
                ],
                "end": [
                    "int",
                    "str",
                    "set",
                    "T"
                ]
            }
        },
        "SegmentTree.__setitem__": {
            "name": "__setitem__",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "Callable"
                ],
                "val": [
                    "int",
                    "str",
                    "dict",
                    "set",
                    "IO[str]"
                ]
            }
        },
        "SegmentTree.__getitem__": {
            "name": "__getitem__",
            "location": 73,
            "return": [
                "float",
                "str",
                "int",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "SumSegmentTree.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "capacity": [
                    "IO",
                    "List['Node']"
                ]
            }
        },
        "SumSegmentTree.sum": {
            "name": "sum",
            "location": 99,
            "return": [
                "Iterable[List[T]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "str",
                    "int"
                ],
                "end": [
                    "str",
                    "int"
                ]
            }
        },
        "SumSegmentTree.retrieve": {
            "name": "retrieve",
            "location": 103,
            "return": [
                "str",
                "bool",
                "Optional[Any]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "upperbound": [
                    "str",
                    "Tuple['cirq.Qid']"
                ]
            }
        },
        "MinSegmentTree.__init__": {
            "name": "__init__",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "capacity": [
                    "int",
                    "float",
                    "dict"
                ]
            }
        },
        "MinSegmentTree.min": {
            "name": "min",
            "location": 140,
            "return": [
                "Iterable[List[T]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "str",
                    "int"
                ],
                "end": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/buffer/wrapper.py": {
        "PrioritizedBufferWrapper.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "base_buffer": [
                    "int",
                    "bool",
                    "List[bytes]",
                    "Optional[str]"
                ],
                "alpha": [
                    "int"
                ],
                "epsilon_d": [
                    "float",
                    "int",
                    "numpy.ndarray",
                    "str",
                    "Optional[List[Any]]"
                ]
            }
        },
        "PrioritizedBufferWrapper.add": {
            "name": "add",
            "location": 77,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "int",
                    "str",
                    "torch.Tensor"
                ]
            }
        },
        "PrioritizedBufferWrapper._sample_proportional": {
            "name": "_sample_proportional",
            "location": 92,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int",
                    "Sized",
                    "str"
                ]
            }
        },
        "PrioritizedBufferWrapper.sample": {
            "name": "sample",
            "location": 113,
            "return": [
                "numpy.ndarray",
                "str",
                "trezor.utils.Writer",
                "torch.FloatTensor",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "beta": [
                    "list",
                    "Sequence['cirq.Qid']",
                    "List[Dict]",
                    "List[int]",
                    "List['cirq.Qid']",
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "PrioritizedBufferWrapper.update_priorities": {
            "name": "update_priorities",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "indices": [
                    "list",
                    "numpy.ndarray",
                    "str",
                    "bytes"
                ],
                "priorities": [
                    "list",
                    "numpy.ndarray",
                    "str",
                    "bytes"
                ]
            }
        },
        "ApeXBufferWrapper.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "per_buffer": [
                    "str"
                ],
                "hyper_params": [
                    "int",
                    "bool",
                    "float"
                ],
                "comm_cfg": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ApeXBufferWrapper.init_communication": {
            "name": "init_communication",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApeXBufferWrapper.recv_worker_data": {
            "name": "recv_worker_data",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApeXBufferWrapper.send_batch_to_learner": {
            "name": "send_batch_to_learner",
            "location": 208,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApeXBufferWrapper.update_priority_beta": {
            "name": "update_priority_beta",
            "location": 221,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApeXBufferWrapper.run": {
            "name": "run",
            "location": 226,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/buffer/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/common/env/atari_wrappers.py": {
        "make_atari": {
            "name": "make_atari",
            "location": 307,
            "return": [
                "int",
                "bool",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "env_id": [
                    "str",
                    "int",
                    "Pattern[str]",
                    "Union[str, bytes]"
                ],
                "max_episode_steps": [
                    "int",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "wrap_deepmind": {
            "name": "wrap_deepmind",
            "location": 317,
            "return": [
                "int",
                "bool",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "env": [
                    "IO",
                    "List[str]"
                ],
                "episode_life": [
                    "bool"
                ],
                "clip_rewards": [
                    "bool"
                ],
                "frame_stack": [
                    "bool"
                ],
                "scale": [
                    "bool"
                ]
            }
        },
        "wrap_pytorch": {
            "name": "wrap_pytorch",
            "location": 335,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "env": [
                    "str",
                    "type"
                ]
            }
        },
        "atari_env_generator": {
            "name": "atari_env_generator",
            "location": 339,
            "return": [
                "Dict[str, str]",
                "List[str]",
                "str",
                "Mapping[str, str]",
                "\"jinja2.Environment\""
            ],
            "arguments": {
                "env_id": [
                    "int",
                    "str"
                ],
                "max_episode_steps": [
                    "int",
                    "str"
                ],
                "frame_stack": [
                    "str",
                    "int"
                ],
                "scale": [
                    "str",
                    "int"
                ]
            }
        },
        "TimeLimit.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "max_episode_steps": [
                    "int"
                ]
            }
        },
        "TimeLimit.step": {
            "name": "step",
            "location": 26,
            "return": [
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "ac": [
                    "str",
                    "dict"
                ]
            }
        },
        "TimeLimit.reset": {
            "name": "reset",
            "location": 35,
            "return": [
                "int",
                "bool",
                "Optional[AbstractSet[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoopResetEnv.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str"
                ],
                "noop_max": [
                    "gym.Env",
                    "str",
                    "Mapping[str, str]",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "NoopResetEnv.reset": {
            "name": "reset",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoopResetEnv.step": {
            "name": "step",
            "location": 70,
            "return": [
                "int",
                "bool",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "ac": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "FireResetEnv.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "FireResetEnv.reset": {
            "name": "reset",
            "location": 82,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FireResetEnv.step": {
            "name": "step",
            "location": 93,
            "return": [
                "int",
                "bool",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "ac": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "EpisodicLifeEnv.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str"
                ]
            }
        },
        "EpisodicLifeEnv.step": {
            "name": "step",
            "location": 107,
            "return": [
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "dict"
                ]
            }
        },
        "EpisodicLifeEnv.reset": {
            "name": "reset",
            "location": 122,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MaxAndSkipEnv.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "dict",
                    "bool",
                    "int",
                    "str",
                    "Dict[str, Any]"
                ],
                "skip": [
                    "gym.Env",
                    "str",
                    "Mapping[str, str]",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "MaxAndSkipEnv.step": {
            "name": "step",
            "location": 145,
            "return": [
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "dict"
                ]
            }
        },
        "MaxAndSkipEnv.reset": {
            "name": "reset",
            "location": 165,
            "return": [
                "int",
                "bool",
                "Optional[AbstractSet[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClipRewardEnv.__init__": {
            "name": "__init__",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "ClipRewardEnv.reward": {
            "name": "reward",
            "location": 173,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "reward": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "WarpFrame.__init__": {
            "name": "__init__",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "bool",
                    "Optional[Dict]"
                ],
                "width": [
                    "int",
                    "float",
                    "str",
                    "Optional[int]"
                ],
                "height": [
                    "int",
                    "float"
                ],
                "grayscale": [
                    "int",
                    "Optional[str]",
                    "bool",
                    "Dict[str, Any]",
                    "List[str]",
                    "MutableMapping[str, str]"
                ]
            }
        },
        "WarpFrame.observation": {
            "name": "observation",
            "location": 194,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "int",
                    "Optional[int]",
                    "float",
                    "dict"
                ]
            }
        },
        "FrameStack.__init__": {
            "name": "__init__",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "bool",
                    "float"
                ],
                "k": [
                    "int",
                    "str"
                ]
            }
        },
        "FrameStack.reset": {
            "name": "reset",
            "location": 227,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrameStack.step": {
            "name": "step",
            "location": 234,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "dict"
                ]
            }
        },
        "FrameStack._get_ob": {
            "name": "_get_ob",
            "location": 239,
            "return": [
                "List[str]",
                "bytes",
                "Optional[str]",
                "List[float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScaledFloatFrame.__init__": {
            "name": "__init__",
            "location": 245,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "str",
                    "int",
                    "type",
                    "bool"
                ]
            }
        },
        "ScaledFloatFrame.observation": {
            "name": "observation",
            "location": 251,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "observation": [
                    "float",
                    "numpy.ndarray",
                    "Union[numpy.ndarray, numpy.void]",
                    "int",
                    "str"
                ]
            }
        },
        "LazyFrames.__init__": {
            "name": "__init__",
            "location": 258,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "frames": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "LazyFrames._force": {
            "name": "_force",
            "location": 269,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyFrames.__array__": {
            "name": "__array__",
            "location": 275,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "dtype": [
                    "float",
                    "Optional[int]",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "LazyFrames.__len__": {
            "name": "__len__",
            "location": 281,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LazyFrames.__getitem__": {
            "name": "__getitem__",
            "location": 284,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "Iterator"
                ]
            }
        },
        "ImageToPyTorch.__init__": {
            "name": "__init__",
            "location": 293,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "List[str]",
                    "List[dict]",
                    "Dict[str, Any]",
                    "List[Tuple[str, str]]",
                    "MutableMapping[str, str]"
                ]
            }
        },
        "ImageToPyTorch.observation": {
            "name": "observation",
            "location": 303,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "observation": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/env/multiprocessing_env.py": {
        "tile_images": {
            "name": "tile_images",
            "location": 13,
            "return": [
                "int",
                "numpy.ndarray"
            ],
            "arguments": {
                "img_nhwc": [
                    "Dict[str, Any]",
                    "List[List[Any]]"
                ]
            }
        },
        "worker": {
            "name": "worker",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "remote": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "AbstractSet"
                ],
                "parent_remote": [
                    "bool",
                    "float",
                    "Dict[str, int]",
                    "Optional[List[str]]"
                ],
                "env_fn_wrapper": [
                    "bool",
                    "Optional[str]",
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        },
        "VecEnv.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "num_envs": [
                    "int",
                    "Optional[int]"
                ],
                "observation_space": [
                    "int",
                    "Union[str, float]",
                    "float"
                ],
                "action_space": [
                    "int",
                    "Union[str, float]",
                    "float"
                ]
            }
        },
        "VecEnv.reset": {
            "name": "reset",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VecEnv.step_async": {
            "name": "step_async",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "actions": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "VecEnv.step_wait": {
            "name": "step_wait",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VecEnv.close_extras": {
            "name": "close_extras",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VecEnv.close": {
            "name": "close",
            "location": 125,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecEnv.step": {
            "name": "step",
            "location": 133,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "actions": [
                    "str",
                    "OrderedDict",
                    "DefaultDict[int, List[Any]]"
                ]
            }
        },
        "VecEnv.render": {
            "name": "render",
            "location": 141,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "VecEnv.get_images": {
            "name": "get_images",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VecEnv.unwrapped": {
            "name": "unwrapped",
            "location": 160,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecEnv.get_viewer": {
            "name": "get_viewer",
            "location": 167,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecEnvWrapper.__init__": {
            "name": "__init__",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "venv": [
                    "int",
                    "numpy.ndarray"
                ],
                "observation_space": [
                    "int"
                ],
                "action_space": [
                    "int"
                ]
            }
        },
        "VecEnvWrapper.step_async": {
            "name": "step_async",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "actions": [
                    "str",
                    "OrderedDict",
                    "DefaultDict[int, List[Any]]"
                ]
            }
        },
        "VecEnvWrapper.reset": {
            "name": "reset",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VecEnvWrapper.step_wait": {
            "name": "step_wait",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VecEnvWrapper.close": {
            "name": "close",
            "location": 201,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VecEnvWrapper.render": {
            "name": "render",
            "location": 204,
            "return": [
                "str",
                "int",
                "dict",
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "str",
                    "Type[\"SerializationDialect\"]",
                    "int",
                    "bool"
                ]
            }
        },
        "VecEnvWrapper.get_images": {
            "name": "get_images",
            "location": 207,
            "return": [
                "float",
                "str",
                "AbstractSet[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudpickleWrapper.__init__": {
            "name": "__init__",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "CloudpickleWrapper.__getstate__": {
            "name": "__getstate__",
            "location": 220,
            "return": [
                "bool",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "CloudpickleWrapper.__setstate__": {
            "name": "__setstate__",
            "location": 223,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ob": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "SubprocVecEnv.__init__": {
            "name": "__init__",
            "location": 233,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env_fns": [
                    "gym.Env",
                    "Optional[bool]",
                    "str",
                    "type",
                    "Callable"
                ]
            }
        },
        "SubprocVecEnv.step_async": {
            "name": "step_async",
            "location": 264,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "actions": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "SubprocVecEnv.step_wait": {
            "name": "step_wait",
            "location": 270,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubprocVecEnv.reset": {
            "name": "reset",
            "location": 277,
            "return": [
                "str",
                "int",
                "tuple",
                "List[str]",
                "list",
                "Union[List[str], str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubprocVecEnv.sample": {
            "name": "sample",
            "location": 283,
            "return": [
                "str",
                "int",
                "tuple",
                "List[str]",
                "list",
                "Union[List[str], str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubprocVecEnv.close_extras": {
            "name": "close_extras",
            "location": 289,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SubprocVecEnv.get_images": {
            "name": "get_images",
            "location": 299,
            "return": [
                "int",
                "str",
                "Tuple[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubprocVecEnv._assert_not_closed": {
            "name": "_assert_not_closed",
            "location": 306,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/env/normalizers.py": {
        "ActionNormalizer.action": {
            "name": "action",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "numpy.ndarray"
                ]
            }
        },
        "ActionNormalizer.reverse_action": {
            "name": "reverse_action",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/env/utils.py": {
        "set_env": {
            "name": "set_env",
            "location": 17,
            "return": [
                "Optional[Dict[str, str]]",
                "Dict[str, str]",
                "MutableMapping",
                "tuple"
            ],
            "arguments": {
                "env": [
                    "int",
                    "bool",
                    "str",
                    "Type",
                    "Tuple[str]"
                ],
                "max_episode_steps": [
                    "int",
                    "bool",
                    "str",
                    "Type"
                ],
                "env_wrappers": [
                    "Dict[str, str]",
                    "List[Tuple[str, str]]",
                    "bool"
                ]
            }
        },
        "env_generator": {
            "name": "env_generator",
            "location": 36,
            "return": [
                "str",
                "int",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "env_name": [
                    "bool"
                ],
                "max_episode_steps": [
                    "bool"
                ],
                "env_wrappers": [
                    "bool"
                ]
            }
        },
        "make_envs": {
            "name": "make_envs",
            "location": 50,
            "return": [
                "bool",
                "Iterable[int]",
                "int",
                "str"
            ],
            "arguments": {
                "env_gen": [
                    "int"
                ],
                "n_envs": [
                    "int"
                ]
            }
        },
        "env_generator._thunk": {
            "name": "_thunk",
            "location": 41,
            "return": [
                "int",
                "bool",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "rank": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/env/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/common/networks/brain.py": {
        "Brain.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "backbone_cfg": [
                    "List[str]",
                    "str",
                    "int",
                    "Callable"
                ],
                "head_cfg": [
                    "int",
                    "rl_algorithms.utils.config.ConfigDict",
                    "str"
                ],
                "shared_backbone": [
                    "Optional[bool]",
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "Brain.forward": {
            "name": "forward",
            "location": 49,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "torch.Tensor"
                ]
            }
        },
        "Brain.forward_": {
            "name": "forward_",
            "location": 56,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "torch.Tensor",
                    "float",
                    "bool",
                    "torch.FloatTensor"
                ],
                "n_tau_samples": [
                    "int"
                ]
            }
        },
        "Brain.calculate_fc_input_size": {
            "name": "calculate_fc_input_size",
            "location": 65,
            "return": [
                "str",
                "int",
                "torch.Tensor",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "state_dim": [
                    "tuple",
                    "dict",
                    "int",
                    "Dict[str, Any]",
                    "torch.device"
                ]
            }
        },
        "GRUBrain.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "backbone_cfg": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "head_cfg": [
                    "int",
                    "bytes",
                    "tuple",
                    "dict"
                ],
                "gru_cfg": [
                    "int",
                    "rl_algorithms.utils.config.ConfigDict",
                    "str",
                    "bool"
                ]
            }
        },
        "GRUBrain.forward": {
            "name": "forward",
            "location": 99,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "torch.Tensor",
                    "common.SVGBoundaries",
                    "Tuple[int, int]",
                    "Optional[str]"
                ],
                "hidden": [
                    "common.SVGBoundaries",
                    "bool"
                ],
                "prev_action": [
                    "torch.Tensor",
                    "int"
                ],
                "prev_reward": [
                    "torch.Tensor",
                    "int"
                ]
            }
        },
        "GRUBrain.forward_": {
            "name": "forward_",
            "location": 157,
            "return": [
                "int",
                "float",
                "str",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "Tuple[int, int]",
                    "Optional[str]",
                    "torch.LongTensor",
                    "float"
                ],
                "hidden": [
                    "List[float]",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]"
                ],
                "prev_action": [
                    "int",
                    "Optional[Any]",
                    "Optional[Mapping[str, Any]]",
                    "raiden.utils.BlockNumber",
                    "bool",
                    "str"
                ],
                "prev_reward": [
                    "int",
                    "Optional[Any]",
                    "Optional[Mapping[str, Any]]",
                    "raiden.utils.BlockNumber",
                    "bool",
                    "str"
                ],
                "n_tau_samples": [
                    "int",
                    "Union[int, float]",
                    "str",
                    "raiden.utils.BlockNumber"
                ]
            }
        },
        "GRUBrain.calculate_fc_input_size": {
            "name": "calculate_fc_input_size",
            "location": 218,
            "return": [
                "str",
                "int",
                "torch.Tensor",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "state_dim": [
                    "tuple",
                    "dict",
                    "int",
                    "Dict[str, Any]",
                    "torch.device"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/networks/heads.py": {
        "init_layer_uniform": {
            "name": "init_layer_uniform",
            "location": 23,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "layer": [
                    "str",
                    "Tuple[int, int]",
                    "bool"
                ],
                "init_w": [
                    "str",
                    "Tuple[int, int]",
                    "bool"
                ]
            }
        },
        "MLP.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "configs": [
                    "int"
                ],
                "hidden_activation": [
                    "Optional[\"ShippingInfo\"]",
                    "bool",
                    "Mapping[str, Any]",
                    "str"
                ],
                "linear_layer": [
                    "int",
                    "float",
                    "bool"
                ],
                "use_output_layer": [
                    "bool",
                    "int",
                    "Dict[str, int]",
                    "Callable[[str, str], float]",
                    "List[int]"
                ],
                "n_category": [
                    "float",
                    "dict",
                    "bool",
                    "str",
                    "List[int]",
                    "int",
                    "List[float]"
                ],
                "init_fn": [
                    "int",
                    "bytes"
                ]
            }
        },
        "MLP.forward": {
            "name": "forward",
            "location": 91,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "torch.Tensor"
                ]
            }
        },
        "GaussianDist.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "configs": [
                    "str",
                    "type",
                    "int",
                    "bool",
                    "float",
                    "Optional[float]"
                ],
                "hidden_activation": [
                    "int",
                    "str",
                    "bool",
                    "Callable",
                    "Optional[str]"
                ],
                "mu_activation": [
                    "bool",
                    "int",
                    "Optional[Any]",
                    "Union[float, Tuple[float, float]]",
                    "float"
                ],
                "log_std_min": [
                    "str",
                    "bool",
                    "Callable[..., None]",
                    "IO"
                ],
                "log_std_max": [
                    "str",
                    "bool",
                    "Callable[..., None]",
                    "IO"
                ],
                "init_fn": [
                    "int",
                    "bool",
                    "str",
                    "Optional[Any]",
                    "List[str]"
                ]
            }
        },
        "GaussianDist.get_dist_params": {
            "name": "get_dist_params",
            "location": 148,
            "return": [
                "str",
                "Tuple[str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "Iterable[str]",
                    "Optional[float]",
                    "Union[str, type]",
                    "int"
                ]
            }
        },
        "GaussianDist.forward": {
            "name": "forward",
            "location": 167,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "bool",
                    "Union[str, int]",
                    "raiden.utils.BlockNumber",
                    "int"
                ]
            }
        },
        "TanhGaussianDistParams.__init__": {
            "name": "__init__",
            "location": 184,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TanhGaussianDistParams.forward": {
            "name": "forward",
            "location": 188,
            "return": [
                "List[Dict[str, Any]]",
                "BaseException",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "List[Tuple[str, str]]",
                    "dict"
                ],
                "epsilon": [
                    "str",
                    "Callable[[str], int]",
                    "float",
                    "int",
                    "IO[str]",
                    "bytes"
                ]
            }
        },
        "CategoricalDist.__init__": {
            "name": "__init__",
            "location": 213,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "configs": [
                    "float",
                    "int"
                ],
                "hidden_activation": [
                    "float",
                    "int"
                ]
            }
        },
        "CategoricalDist.forward": {
            "name": "forward",
            "location": 225,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "utils.CWLObjectType"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/networks/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/common/networks/backbones/cnn.py": {
        "CNNLayer.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_size": [
                    "int",
                    "List[int]"
                ],
                "output_size": [
                    "int",
                    "List[int]"
                ],
                "kernel_size": [
                    "int",
                    "List[int]"
                ],
                "stride": [
                    "int",
                    "List[int]"
                ],
                "padding": [
                    "int",
                    "List[int]"
                ],
                "pre_activation_fn": [
                    "list",
                    "float",
                    "bool",
                    "List[List[int]]",
                    "str",
                    "List[int]"
                ],
                "activation_fn": [
                    "list",
                    "float",
                    "bool",
                    "List[List[int]]",
                    "str",
                    "List[int]"
                ],
                "post_activation_fn": [
                    "list",
                    "str",
                    "List[str]",
                    "Dict[int, str]",
                    "Dict[str, List[int]]",
                    "Dict[str, int]",
                    "Pattern[str]",
                    "Dict[int, float]"
                ]
            }
        },
        "CNNLayer.forward": {
            "name": "forward",
            "location": 50,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "Union[int, float]"
                ]
            }
        },
        "CNN.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "configs": [
                    "bytes",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "CNN.forward": {
            "name": "forward",
            "location": 73,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "list",
                    "float"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/networks/backbones/resnet.py": {
        "BasicBlock.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "in_planes": [
                    "int",
                    "float",
                    "List[int]"
                ],
                "planes": [
                    "int",
                    "float",
                    "List[int]"
                ],
                "stride": [
                    "int",
                    "float",
                    "List[int]",
                    "bool",
                    "str"
                ],
                "expansion": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "BasicBlock.forward": {
            "name": "forward",
            "location": 63,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "torch.Tensor",
                    "float"
                ]
            }
        },
        "Bottleneck.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "in_planes": [
                    "bool",
                    "int",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]",
                    "List[int]"
                ],
                "planes": [
                    "torch.Tensor",
                    "int",
                    "Hashable"
                ],
                "stride": [
                    "int",
                    "float",
                    "List[int]"
                ],
                "expansion": [
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "Bottleneck.forward": {
            "name": "forward",
            "location": 119,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "torch.Tensor",
                    "float"
                ]
            }
        },
        "ResNet.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "configs": [
                    "int"
                ]
            }
        },
        "ResNet._make_layer": {
            "name": "_make_layer",
            "location": 175,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "int",
                    "dict",
                    "str",
                    "float",
                    "bool",
                    "list"
                ],
                "planes": [
                    "int",
                    "dict",
                    "str",
                    "float",
                    "bool",
                    "list"
                ],
                "num_blocks": [
                    "int"
                ],
                "stride": [
                    "int"
                ]
            }
        },
        "ResNet.forward": {
            "name": "forward",
            "location": 183,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "list",
                    "torch.Tensor",
                    "int"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/common/networks/backbones/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/ddpg/agent.py": {
        "DDPGAgent.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "bool",
                    "Callable"
                ],
                "env_info": [
                    "bool",
                    "Callable"
                ],
                "hyper_params": [
                    "bool",
                    "Union[List, numpy.ndarray, pymatgen.core.lattice.Lattice]",
                    "str",
                    "Iterable['adi.Instance']"
                ],
                "learner_cfg": [
                    "bool",
                    "Union[List, numpy.ndarray, pymatgen.core.lattice.Lattice]",
                    "str",
                    "Iterable['adi.Instance']"
                ],
                "noise_cfg": [
                    "str",
                    "bool",
                    "List[str]",
                    "dict",
                    "nucypher.cli.config.GroupGeneralConfig"
                ],
                "log_cfg": [
                    "bool",
                    "Callable"
                ],
                "is_test": [
                    "bool",
                    "Callable"
                ],
                "load_from": [
                    "bool",
                    "Callable"
                ],
                "is_render": [
                    "bool",
                    "Callable"
                ],
                "render_after": [
                    "bool",
                    "Callable"
                ],
                "is_log": [
                    "bool",
                    "Callable"
                ],
                "save_period": [
                    "bool",
                    "Callable"
                ],
                "episode_num": [
                    "bool",
                    "Callable"
                ],
                "max_episode_steps": [
                    "bool",
                    "Callable"
                ],
                "interim_test_num": [
                    "bool",
                    "Callable"
                ]
            }
        },
        "DDPGAgent._initialize": {
            "name": "_initialize",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DDPGAgent.select_action": {
            "name": "select_action",
            "location": 121,
            "return": [
                "bool",
                "AbstractSet[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "numpy.ndarray",
                    "list"
                ]
            }
        },
        "DDPGAgent._preprocess_state": {
            "name": "_preprocess_state",
            "location": 143,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "torch.device",
                    "numpy.ndarray",
                    "str",
                    "float",
                    "dict"
                ]
            }
        },
        "DDPGAgent.step": {
            "name": "step",
            "location": 148,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "Dict[str, AsyncGenerator]",
                    "int"
                ]
            }
        },
        "DDPGAgent._add_transition_to_memory": {
            "name": "_add_transition_to_memory",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "str",
                    "T",
                    "int",
                    "VT"
                ]
            }
        },
        "DDPGAgent.write_log": {
            "name": "write_log",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "log_value": [
                    "tuple",
                    "bytes",
                    "bool",
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "DDPGAgent.pretrain": {
            "name": "pretrain",
            "location": 196,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DDPGAgent.train": {
            "name": "train",
            "location": 200,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/ddpg/learner.py": {
        "DDPGLearner.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hyper_params": [
                    "bool",
                    "raiden.utils.BlockTimeout",
                    "str"
                ],
                "log_cfg": [
                    "bool",
                    "raiden.utils.BlockTimeout",
                    "str"
                ],
                "backbone": [
                    "bool",
                    "int",
                    "Union[int, Tuple[int, int]]",
                    "Callable[[str], bool]",
                    "List[int]"
                ],
                "head": [
                    "bool",
                    "int",
                    "Union[int, Tuple[int, int]]",
                    "Callable[[str], bool]",
                    "List[int]"
                ],
                "optim_cfg": [
                    "bool",
                    "int",
                    "Union[int, Tuple[int, int]]",
                    "Callable[[str], bool]",
                    "List[int]"
                ],
                "noise_cfg": [
                    "bool",
                    "int",
                    "Union[int, Tuple[int, int]]",
                    "Callable[[str], bool]",
                    "List[int]"
                ],
                "env_name": [
                    "bool",
                    "raiden.utils.BlockTimeout",
                    "str"
                ],
                "state_size": [
                    "int",
                    "List[str]",
                    "Tuple[int, int]",
                    "Optional[int]"
                ],
                "output_size": [
                    "int",
                    "List[str]",
                    "float"
                ],
                "is_test": [
                    "bool",
                    "raiden.utils.BlockTimeout",
                    "str"
                ],
                "load_from": [
                    "bool",
                    "int",
                    "Union[int, Tuple[int, int]]",
                    "Callable[[str], bool]",
                    "List[int]"
                ]
            }
        },
        "DDPGLearner._init_network": {
            "name": "_init_network",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DDPGLearner.update_model": {
            "name": "update_model",
            "location": 96,
            "return": [
                "int",
                "Optional[int]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "experience": [
                    "Tuple[torch.Tensor]",
                    "rl_algorithms.common.abstraclearner.TensorTuple",
                    "Union[rl_algorithms.common.abstraclearner.TensorTuple, Tuple[rl_algorithms.common.abstraclearner.TensorTuple]]",
                    "list",
                    "torch.Tensor"
                ]
            }
        },
        "DDPGLearner.save_params": {
            "name": "save_params",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_episode": [
                    "int",
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        },
        "DDPGLearner.load_params": {
            "name": "load_params",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "DDPGLearner.get_state_dict": {
            "name": "get_state_dict",
            "location": 160,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DDPGLearner.get_policy": {
            "name": "get_policy",
            "location": 164,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/ddpg/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/distillation/dqn_agent.py": {
        "DistillationDQNAgent._initialize": {
            "name": "_initialize",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DistillationDQNAgent.make_distillation_dir": {
            "name": "make_distillation_dir",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DistillationDQNAgent.get_action_and_q": {
            "name": "get_action_and_q",
            "location": 78,
            "return": [
                "int",
                "str",
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "numpy.ndarray",
                    "numpy.random.RandomState",
                    "list"
                ]
            }
        },
        "DistillationDQNAgent.step": {
            "name": "step",
            "location": 89,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "bool",
                    "float",
                    "torch.optim.Optimizer",
                    "str",
                    "int",
                    "Callable"
                ],
                "q_values": [
                    "bytes",
                    "Sequence[str]",
                    "List[float]"
                ]
            }
        },
        "DistillationDQNAgent._test": {
            "name": "_test",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "interim_test": [
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "DistillationDQNAgent.update_distillation": {
            "name": "update_distillation",
            "location": 194,
            "return": [
                "str",
                "int",
                "float",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "DistillationDQNAgent.add_expert_q": {
            "name": "add_expert_q",
            "location": 216,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DistillationDQNAgent.train": {
            "name": "train",
            "location": 238,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/distillation/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/dqn/agent.py": {
        "DQNAgent.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "env_info": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "hyper_params": [
                    "bool",
                    "rl_algorithms.utils.config.ConfigDict",
                    "float",
                    "Dict[str, Any]"
                ],
                "learner_cfg": [
                    "Dict[str, Any]",
                    "recidiviz.common.ingest_metadata.IngestMetadata",
                    "Optional[float]",
                    "float",
                    "bool",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "log_cfg": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "is_test": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "load_from": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "is_render": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "render_after": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "is_log": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "save_period": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "episode_num": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "max_episode_steps": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "interim_test_num": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ]
            }
        },
        "DQNAgent._initialize": {
            "name": "_initialize",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DQNAgent.select_action": {
            "name": "select_action",
            "location": 144,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "numpy.ndarray",
                    "list",
                    "State[np.ndarray]"
                ]
            }
        },
        "DQNAgent._preprocess_state": {
            "name": "_preprocess_state",
            "location": 159,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "torch.device",
                    "numpy.ndarray",
                    "str",
                    "float",
                    "dict"
                ]
            }
        },
        "DQNAgent.step": {
            "name": "step",
            "location": 164,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "Dict[str, AsyncGenerator]",
                    "int"
                ]
            }
        },
        "DQNAgent._add_transition_to_memory": {
            "name": "_add_transition_to_memory",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "DQNAgent.write_log": {
            "name": "write_log",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "log_value": [
                    "tuple",
                    "bytes",
                    "bool",
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "DQNAgent.pretrain": {
            "name": "pretrain",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DQNAgent.sample_experience": {
            "name": "sample_experience",
            "location": 223,
            "return": [
                "str",
                "List[str]",
                "bytes",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "DQNAgent.train": {
            "name": "train",
            "location": 241,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/dqn/distributed_logger.py": {
        "DQNLogger.load_params": {
            "name": "load_params",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "List[str]",
                    "Tuple[str, str]"
                ]
            }
        },
        "DQNLogger.select_action": {
            "name": "select_action",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "T"
                ]
            }
        },
        "DQNLogger.write_log": {
            "name": "write_log",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "log_value": [
                    "dict",
                    "str",
                    "tuple",
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/dqn/distributed_worker.py": {
        "DQNWorker.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rank": [
                    "Optional[int]",
                    "int",
                    "str",
                    "Optional[float]"
                ],
                "device": [
                    "Optional[int]",
                    "int",
                    "str",
                    "Optional[float]"
                ],
                "hyper_params": [
                    "int",
                    "bool",
                    "float",
                    "Optional[int]",
                    "str"
                ],
                "env_name": [
                    "Optional[int]",
                    "int",
                    "str",
                    "Optional[float]"
                ],
                "is_atari": [
                    "Optional[int]",
                    "int",
                    "str",
                    "Optional[float]"
                ],
                "max_episode_steps": [
                    "Optional[int]",
                    "int",
                    "str",
                    "Optional[float]"
                ],
                "loss_type": [
                    "bool",
                    "str"
                ],
                "state_dict": [
                    "bool",
                    "int",
                    "float",
                    "Union[torch.Tensor, float, Tuple[float, float], List[float]]"
                ],
                "backbone": [
                    "bool",
                    "int",
                    "float",
                    "Union[torch.Tensor, float, Tuple[float, float], List[float]]"
                ],
                "head": [
                    "bool",
                    "int",
                    "float",
                    "Union[torch.Tensor, float, Tuple[float, float], List[float]]"
                ],
                "state_size": [
                    "int",
                    "float",
                    "bool"
                ],
                "output_size": [
                    "int",
                    "bool",
                    "List[int]",
                    "List[str]"
                ]
            }
        },
        "DQNWorker._init_networks": {
            "name": "_init_networks",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_dict": [
                    "int",
                    "OrderedDict",
                    "bool",
                    "Optional[Mapping[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "DQNWorker.load_params": {
            "name": "load_params",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Union[Literal, str]"
                ]
            }
        },
        "DQNWorker.select_action": {
            "name": "select_action",
            "location": 80,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "T"
                ]
            }
        },
        "DQNWorker.step": {
            "name": "step",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "dict",
                    "numpy.ndarray",
                    "str"
                ]
            }
        },
        "DQNWorker.compute_priorities": {
            "name": "compute_priorities",
            "location": 106,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "numpy.ndarray",
                "str"
            ],
            "arguments": {
                "self": [],
                "memory": [
                    "Union[bool, numpy.ndarray]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "DQNWorker.synchronize": {
            "name": "synchronize",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "new_state_dict": [
                    "float",
                    "Dict[str, numpy.ndarray]",
                    "str",
                    "Tuple[int, int]",
                    "raiden.utils.Tuple[raiden.utils.Tuple[raiden.utils.TokenAddress, raiden.utils.ProportionalFeeAmount], ...]"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/dqn/learner.py": {
        "DQNLearner.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "loss_type": [
                    "int",
                    "str"
                ],
                "backbone": [
                    "bool",
                    "int",
                    "Tuple[str]",
                    "Optional[dict]"
                ],
                "head": [
                    "bool",
                    "int",
                    "Tuple[str]",
                    "Optional[dict]"
                ],
                "optim_cfg": [
                    "bool",
                    "int",
                    "Tuple[str]",
                    "Optional[dict]"
                ],
                "hyper_params": [
                    "bool",
                    "str",
                    "Callable",
                    "Optional[str]",
                    "type"
                ],
                "log_cfg": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "int",
                    "type"
                ],
                "env_name": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "int",
                    "type"
                ],
                "state_size": [
                    "int",
                    "allennlp.nn.InitializerApplicator",
                    "float",
                    "Dict[str, str]"
                ],
                "output_size": [
                    "int",
                    "bool",
                    "List[str]",
                    "bytes"
                ],
                "is_test": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "int",
                    "type"
                ],
                "load_from": [
                    "bool",
                    "int",
                    "Tuple[str]",
                    "Optional[dict]"
                ]
            }
        },
        "DQNLearner._init_network": {
            "name": "_init_network",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DQNLearner.update_model": {
            "name": "update_model",
            "location": 85,
            "return": [
                "numpy.ndarray",
                "int",
                "float",
                "bool",
                "List[int]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "experience": [
                    "Union[rl_algorithms.common.abstraclearner.TensorTuple, Tuple[rl_algorithms.common.abstraclearner.TensorTuple]]",
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "DQNLearner.save_params": {
            "name": "save_params",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_episode": [
                    "int",
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        },
        "DQNLearner.load_params": {
            "name": "load_params",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "DQNLearner.get_state_dict": {
            "name": "get_state_dict",
            "location": 168,
            "return": [
                "str",
                "int",
                "dict",
                "numpy.array"
            ],
            "arguments": {
                "self": []
            }
        },
        "DQNLearner.get_policy": {
            "name": "get_policy",
            "location": 173,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/dqn/linear.py": {
        "NoisyLinear.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "in_features": [
                    "bool",
                    "str",
                    "int",
                    "numpy.ndarray"
                ],
                "out_features": [
                    "bool",
                    "str",
                    "int",
                    "numpy.ndarray"
                ],
                "std_init": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "NoisyLinear.reset_parameters": {
            "name": "reset_parameters",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NoisyLinear.scale_noise": {
            "name": "scale_noise",
            "location": 67,
            "return": [
                "int",
                "List[int]",
                "str",
                "torch.Tensor"
            ],
            "arguments": {
                "size": [
                    "int",
                    "str"
                ]
            }
        },
        "NoisyLinear.reset_noise": {
            "name": "reset_noise",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NoisyLinear.forward": {
            "name": "forward",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int",
                    "numpy.ndarray",
                    "bytes"
                ]
            }
        },
        "NoisyLinearConstructor.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "std_init": [
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "bool",
                    "int"
                ]
            }
        },
        "NoisyLinearConstructor.__call__": {
            "name": "__call__",
            "location": 107,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "in_features": [
                    "str",
                    "bool",
                    "int"
                ],
                "out_features": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "NoisyMLPHandler.reset_noise": {
            "name": "reset_noise",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/dqn/losses.py": {
        "IQNLoss.__call__": {
            "name": "__call__",
            "location": 24,
            "return": [
                "bool",
                "str",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "rl_algorithms.common.networks.brain.Brain",
                    "int"
                ],
                "target_model": [
                    "rl_algorithms.common.networks.brain.Brain",
                    "dict"
                ],
                "experiences": [
                    "Tuple[torch.Tensor]",
                    "rl_algorithms.common.networks.brain.Brain",
                    "float"
                ],
                "gamma": [
                    "float",
                    "torch.optim.Optimizer"
                ],
                "head_cfg": [
                    "float",
                    "torch.optim.Optimizer"
                ]
            }
        },
        "C51Loss.__call__": {
            "name": "__call__",
            "location": 151,
            "return": [
                "bool",
                "str",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "float",
                    "rl_algorithms.common.networks.brain.Brain"
                ],
                "target_model": [
                    "rl_algorithms.common.networks.brain.Brain",
                    "Iterable[Any]",
                    "dict",
                    "str",
                    "int",
                    "Hashable"
                ],
                "experiences": [
                    "Tuple[torch.Tensor]",
                    "rl_algorithms.common.networks.brain.Brain",
                    "float"
                ],
                "gamma": [
                    "float",
                    "torch.optim.Optimizer"
                ],
                "head_cfg": [
                    "float",
                    "int"
                ]
            }
        },
        "DQNLoss.__call__": {
            "name": "__call__",
            "location": 215,
            "return": [
                "bool",
                "str",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Set[int]"
                ],
                "target_model": [
                    "nevergrad.common.Loss"
                ],
                "experiences": [
                    "Tuple[torch.Tensor]",
                    "rl_algorithms.common.networks.brain.Brain",
                    "float"
                ],
                "gamma": [
                    "raiden.utils.BlockIdentifier",
                    "Iterable[Iterable[T]]",
                    "Callable"
                ],
                "head_cfg": [
                    "rl_algorithms.utils.config.ConfigDict",
                    "Union[float, None]",
                    "T",
                    "str",
                    "Sequence[Union[float, None]]"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/dqn/networks.py": {
        "DuelingMLP.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "configs": [
                    "rl_algorithms.utils.config.ConfigDict",
                    "dict",
                    "int"
                ],
                "hidden_activation": [
                    "str",
                    "Mapping[str, str]",
                    "Union[str, dict]"
                ]
            }
        },
        "DuelingMLP.forward_": {
            "name": "forward_",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "torch.Tensor",
                    "int",
                    "common.SVGBoundaries"
                ]
            }
        },
        "DuelingMLP.forward": {
            "name": "forward",
            "location": 73,
            "return": [
                "str",
                "utils.Node"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "C51DuelingMLP.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "configs": [
                    "rl_algorithms.utils.config.ConfigDict",
                    "bool",
                    "str",
                    "Optional[Tuple[int, ...]]"
                ],
                "hidden_activation": [
                    "int",
                    "gluonts.model.common.Tensor",
                    "str"
                ]
            }
        },
        "C51DuelingMLP.forward_": {
            "name": "forward_",
            "location": 121,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "numpy.ndarray",
                    "torch.Tensor",
                    "int"
                ]
            }
        },
        "C51DuelingMLP.forward": {
            "name": "forward",
            "location": 141,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "torch.Tensor",
                    "Union[numpy.ndarray, List[numpy.ndarray]]",
                    "Iterable[Iterable[float]]",
                    "numpy.ndarray"
                ]
            }
        },
        "IQNMLP.__init__": {
            "name": "__init__",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "configs": [
                    "rl_algorithms.utils.config.ConfigDict",
                    "dict",
                    "int"
                ],
                "hidden_activation": [
                    "str",
                    "apps.common.coininfo.CoinInfo",
                    "Union[str, dict]",
                    "bool"
                ]
            }
        },
        "IQNMLP.forward_": {
            "name": "forward_",
            "location": 187,
            "return": [
                "Optional[int]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "int",
                    "Tuple[int, int]",
                    "torch.Tensor",
                    "str"
                ],
                "n_tau_samples": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "IQNMLP.forward": {
            "name": "forward",
            "location": 216,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Optional[torch.Tensor]",
                    "common.MechanismState",
                    "torch.Tensor",
                    "numpy.ndarray"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/dqn/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/fd/ddpg_agent.py": {
        "DDPGfDAgent._initialize": {
            "name": "_initialize",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DDPGfDAgent._add_transition_to_memory": {
            "name": "_add_transition_to_memory",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "DDPGfDAgent.sample_experience": {
            "name": "sample_experience",
            "location": 96,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DDPGfDAgent.pretrain": {
            "name": "pretrain",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DDPGfDAgent.train": {
            "name": "train",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/fd/ddpg_learner.py": {
        "DDPGfDLearner._get_critic_loss": {
            "name": "_get_critic_loss",
            "location": 29,
            "return": [
                "str",
                "Iterable[int]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "experiences": [
                    "Tuple[torch.Tensor]",
                    "rl_algorithms.common.abstraclearner.TensorTuple",
                    "Union[rl_algorithms.common.abstraclearner.TensorTuple, Tuple[rl_algorithms.common.abstraclearner.TensorTuple]]",
                    "Optional[str]",
                    "int",
                    "str"
                ],
                "gamma": [
                    "float",
                    "str",
                    "bool",
                    "raiden.utils.Dict[str, raiden.utils.Any]",
                    "Optional[str]",
                    "Type",
                    "int"
                ]
            }
        },
        "DDPGfDLearner.update_model": {
            "name": "update_model",
            "location": 50,
            "return": [
                "int",
                "Optional[int]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "experience": [
                    "Union[rl_algorithms.common.abstraclearner.TensorTuple, Tuple[rl_algorithms.common.abstraclearner.TensorTuple]]",
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/fd/dqn_agent.py": {
        "DQfDAgent._initialize": {
            "name": "_initialize",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DQfDAgent._load_demos": {
            "name": "_load_demos",
            "location": 76,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DQfDAgent.write_log": {
            "name": "write_log",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "log_value": [
                    "str",
                    "int"
                ]
            }
        },
        "DQfDAgent.pretrain": {
            "name": "pretrain",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DQfDAgent.train": {
            "name": "train",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/fd/dqn_learner.py": {
        "DQfDLearner.update_model": {
            "name": "update_model",
            "location": 23,
            "return": [
                "int",
                "float",
                "numpy.ndarray",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "experience": [
                    "Union[rl_algorithms.common.abstraclearner.TensorTuple, Tuple[rl_algorithms.common.abstraclearner.TensorTuple]]",
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/fd/sac_agent.py": {
        "SACfDAgent._initialize": {
            "name": "_initialize",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SACfDAgent._add_transition_to_memory": {
            "name": "_add_transition_to_memory",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "SACfDAgent.sample_experience": {
            "name": "sample_experience",
            "location": 94,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SACfDAgent.pretrain": {
            "name": "pretrain",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SACfDAgent.train": {
            "name": "train",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/fd/sac_learner.py": {
        "SACfDLearner.update_model": {
            "name": "update_model",
            "location": 16,
            "return": [
                "int",
                "Optional[int]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "experience": [
                    "Union[rl_algorithms.common.abstraclearner.TensorTuple, Tuple[rl_algorithms.common.abstraclearner.TensorTuple]]",
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/fd/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/gail/agent.py": {
        "GAILPPOAgent.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Optional[bool]",
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "env_info": [
                    "Optional[bool]",
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "hyper_params": [
                    "Optional[bool]",
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "learner_cfg": [
                    "Optional[bool]",
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "log_cfg": [
                    "Optional[bool]",
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "is_test": [
                    "Optional[bool]",
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "load_from": [
                    "Optional[bool]",
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "is_render": [
                    "Optional[bool]",
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "render_after": [
                    "Optional[bool]",
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "is_log": [
                    "Optional[bool]",
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "save_period": [
                    "Optional[bool]",
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "episode_num": [
                    "Optional[bool]",
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "max_episode_steps": [
                    "Optional[bool]",
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "interim_test_num": [
                    "Optional[bool]",
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ]
            }
        },
        "GAILPPOAgent.step": {
            "name": "step",
            "location": 90,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "GAILPPOAgent.write_log": {
            "name": "write_log",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "log_value": [
                    "str",
                    "List[float]",
                    "Optional[int]",
                    "List[Dict]"
                ]
            }
        },
        "GAILPPOAgent.train": {
            "name": "train",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/gail/learner.py": {
        "GAILPPOLearner.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hyper_params": [
                    "bool",
                    "int"
                ],
                "log_cfg": [
                    "bool",
                    "int"
                ],
                "backbone": [
                    "bool",
                    "int"
                ],
                "head": [
                    "float",
                    "Optional[torch.nn.Module]",
                    "int",
                    "Optional[int]",
                    "bool",
                    "Sequence[int]"
                ],
                "optim_cfg": [
                    "bool",
                    "int"
                ],
                "env_name": [
                    "bool",
                    "int"
                ],
                "state_size": [
                    "str",
                    "Optional[int]",
                    "Optional[float]",
                    "Callable[[], None]",
                    "float",
                    "int",
                    "gluonts.model.common.Tensor"
                ],
                "output_size": [
                    "int",
                    "str",
                    "dict"
                ],
                "is_test": [
                    "bool",
                    "int"
                ],
                "load_from": [
                    "bool",
                    "int"
                ]
            }
        },
        "GAILPPOLearner._init_network": {
            "name": "_init_network",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GAILPPOLearner.update_model": {
            "name": "update_model",
            "location": 119,
            "return": [
                "Union[rl_algorithms.common.abstraclearner.TensorTuple, Tuple[rl_algorithms.common.abstraclearner.TensorTuple]]",
                "int",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "experience": [
                    "rl_algorithms.common.abstraclearner.TensorTuple",
                    "int",
                    "Pattern"
                ],
                "epsilon": [
                    "raiden.utils.Any",
                    "int"
                ]
            }
        },
        "GAILPPOLearner.save_params": {
            "name": "save_params",
            "location": 247,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_episode": [
                    "int",
                    "List[str]",
                    "str",
                    "rl_algorithms.utils.config.ConfigDict"
                ]
            }
        },
        "GAILPPOLearner.load_params": {
            "name": "load_params",
            "location": 259,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Union[Literal, str]"
                ]
            }
        },
        "GAILPPOLearner.get_state_dict": {
            "name": "get_state_dict",
            "location": 270,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GAILPPOLearner.set_demo_memory": {
            "name": "set_demo_memory",
            "location": 278,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "demo_memory": [
                    "bool",
                    "float"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/gail/networks.py": {
        "Discriminator.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "backbone_cfg": [
                    "List[str]",
                    "str",
                    "int",
                    "Callable"
                ],
                "head_cfg": [
                    "int",
                    "rl_algorithms.utils.config.ConfigDict",
                    "str"
                ],
                "action_embedder_cfg": [
                    "int",
                    "rl_algorithms.utils.config.ConfigDict",
                    "str",
                    "allennlp.nn.activations.Activation"
                ],
                "shared_backbone": [
                    "Optional[bool]",
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "Discriminator.forward": {
            "name": "forward",
            "location": 50,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "state_action": [
                    "int",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "Discriminator.forward_action_embedder": {
            "name": "forward_action_embedder",
            "location": 60,
            "return": [
                "bool",
                "utils.Node"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "Discriminator.calculate_fc_input_size": {
            "name": "calculate_fc_input_size",
            "location": 66,
            "return": [
                "str",
                "int",
                "torch.Tensor",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "state_dim": [
                    "tuple",
                    "dict",
                    "int",
                    "Dict[str, Any]",
                    "torch.device"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/gail/utils.py": {
        "compute_gail_reward": {
            "name": "compute_gail_reward",
            "location": 4,
            "return": [
                "torch.nn.Module"
            ],
            "arguments": {
                "discriminator_score": [
                    "int",
                    "float",
                    "Dict[str, List[str]]",
                    "Union[None, int, str]",
                    "str"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/gail/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/ppo/agent.py": {
        "PPOAgent.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "env_info": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "hyper_params": [
                    "bool",
                    "float"
                ],
                "learner_cfg": [
                    "bool",
                    "list",
                    "Mapping[str, Any]"
                ],
                "log_cfg": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "is_test": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "load_from": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "is_render": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "render_after": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "is_log": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "save_period": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "episode_num": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "max_episode_steps": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "interim_test_num": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ]
            }
        },
        "PPOAgent.make_parallel_env": {
            "name": "make_parallel_env",
            "location": 125,
            "return": [
                "Mapping[str, str]",
                "\"jinja2.Environment\"",
                "List[int]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "max_episode_steps": [
                    "int",
                    "torch.nn.Module",
                    "Set[int]",
                    "Optional[int]"
                ],
                "n_workers": [
                    "int",
                    "Iterable[List[str]]",
                    "list",
                    "float",
                    "Tuple[int]"
                ]
            }
        },
        "PPOAgent.select_action": {
            "name": "select_action",
            "location": 133,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "PPOAgent.step": {
            "name": "step",
            "location": 161,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "PPOAgent.decay_epsilon": {
            "name": "decay_epsilon",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "t": [
                    "int"
                ]
            }
        },
        "PPOAgent.write_log": {
            "name": "write_log",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "log_value": [
                    "tuple",
                    "str",
                    "bytearray",
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "PPOAgent.train": {
            "name": "train",
            "location": 213,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/ppo/learner.py": {
        "PPOLearner.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hyper_params": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[float]",
                    "List[str]"
                ],
                "log_cfg": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[float]",
                    "List[str]"
                ],
                "backbone": [
                    "bool",
                    "str",
                    "int",
                    "float"
                ],
                "head": [
                    "bool",
                    "str",
                    "int",
                    "float"
                ],
                "optim_cfg": [
                    "bool",
                    "str",
                    "int",
                    "float"
                ],
                "env_name": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[float]",
                    "List[str]"
                ],
                "state_size": [
                    "int",
                    "str",
                    "bool",
                    "Union[None, int]"
                ],
                "output_size": [
                    "int",
                    "Optional[int]",
                    "bool",
                    "Union[Tuple[int, int], int]"
                ],
                "is_test": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[float]",
                    "List[str]"
                ],
                "load_from": [
                    "bool",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "PPOLearner._init_network": {
            "name": "_init_network",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PPOLearner.update_model": {
            "name": "update_model",
            "location": 99,
            "return": [
                "Union[rl_algorithms.common.abstraclearner.TensorTuple, Tuple[rl_algorithms.common.abstraclearner.TensorTuple]]",
                "int",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "experience": [
                    "rl_algorithms.common.abstraclearner.TensorTuple",
                    "int",
                    "Pattern"
                ],
                "epsilon": [
                    "raiden.utils.Any",
                    "int"
                ]
            }
        },
        "PPOLearner.save_params": {
            "name": "save_params",
            "location": 202,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_episode": [
                    "int",
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        },
        "PPOLearner.load_params": {
            "name": "load_params",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "PPOLearner.get_state_dict": {
            "name": "get_state_dict",
            "location": 223,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PPOLearner.get_policy": {
            "name": "get_policy",
            "location": 227,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/ppo/utils.py": {
        "compute_gae": {
            "name": "compute_gae",
            "location": 18,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "set",
                "Dict[str, Any]",
                "list",
                "bool"
            ],
            "arguments": {
                "next_value": [
                    "Optional[bool]",
                    "bool",
                    "str",
                    "Optional[int]",
                    "List[str]"
                ],
                "rewards": [
                    "List[numpy.array]",
                    "int"
                ],
                "masks": [
                    "int",
                    "list",
                    "float",
                    "Optional[int]",
                    "Dict[str, Any]",
                    "str",
                    "bool"
                ],
                "values": [
                    "float",
                    "numpy.ndarray"
                ],
                "gamma": [
                    "int",
                    "list",
                    "float",
                    "Optional[int]",
                    "Dict[str, Any]",
                    "str",
                    "bool"
                ],
                "tau": [
                    "float",
                    "bool",
                    "Tuple[int, int, int]",
                    "int",
                    "Optional[str]",
                    "List[Tuple[int, float]]",
                    "List['cirq.Circuit']"
                ]
            }
        },
        "ppo_iter": {
            "name": "ppo_iter",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "epoch": [
                    "int",
                    "List[str]",
                    "bool",
                    "float",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "mini_batch_size": [
                    "int",
                    "str",
                    "Union[Tuple[int, int], int]"
                ],
                "states": [
                    "int",
                    "Callable[[str], None]",
                    "torch.Tensor",
                    "numpy.ndarray",
                    "Hashable"
                ],
                "actions": [
                    "torch.Tensor",
                    "int",
                    "Dict[str, torch.LongTensor]"
                ],
                "values": [
                    "torch.Tensor",
                    "int",
                    "Dict[str, torch.LongTensor]"
                ],
                "log_probs": [
                    "torch.Tensor",
                    "int",
                    "Dict[str, torch.LongTensor]"
                ],
                "returns": [
                    "torch.Tensor",
                    "int",
                    "Dict[str, torch.LongTensor]"
                ],
                "advantages": [
                    "torch.Tensor",
                    "int",
                    "Dict[str, torch.LongTensor]"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/ppo/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/recurrent/dqn_agent.py": {
        "R2D1Agent._initialize": {
            "name": "_initialize",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "R2D1Agent.select_action": {
            "name": "select_action",
            "location": 73,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "numpy.ndarray"
                ],
                "hidden_state": [
                    "numpy.ndarray",
                    "float",
                    "Sequence",
                    "int",
                    "list",
                    "Dict[str, float]"
                ],
                "prev_action": [
                    "numpy.ndarray",
                    "float",
                    "Sequence",
                    "int",
                    "list",
                    "Dict[str, float]"
                ],
                "prev_reward": [
                    "numpy.ndarray",
                    "float",
                    "Sequence",
                    "int",
                    "list",
                    "Dict[str, float]"
                ]
            }
        },
        "R2D1Agent._add_transition_to_memory": {
            "name": "_add_transition_to_memory",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "R2D1Agent.step": {
            "name": "step",
            "location": 106,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "numpy.array",
                    "torch.Tensor"
                ],
                "hidden_state": [
                    "Dict[str, numpy.ndarray]",
                    "torch.Tensor"
                ]
            }
        },
        "R2D1Agent.sample_experience": {
            "name": "sample_experience",
            "location": 127,
            "return": [
                "str",
                "List[str]",
                "bytes",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "R2D1Agent.train": {
            "name": "train",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "R2D1Agent._test": {
            "name": "_test",
            "location": 235,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "interim_test": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "int"
                ]
            }
        },
        "R2D1Agent.test_with_saliency_map": {
            "name": "test_with_saliency_map",
            "location": 287,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/recurrent/learner.py": {
        "R2D1Learner.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "loss_type": [
                    "int",
                    "str"
                ],
                "backbone": [
                    "bool",
                    "int",
                    "Optional[dict]",
                    "Callable",
                    "Dict[str, List[Any]]",
                    "Tuple[str]"
                ],
                "head": [
                    "bool",
                    "int",
                    "Optional[dict]",
                    "Callable",
                    "Dict[str, List[Any]]",
                    "Tuple[str]"
                ],
                "gru": [
                    "bool",
                    "int",
                    "Optional[dict]",
                    "Callable",
                    "Dict[str, List[Any]]",
                    "Tuple[str]"
                ],
                "optim_cfg": [
                    "bool",
                    "int",
                    "Optional[dict]",
                    "Callable",
                    "Dict[str, List[Any]]",
                    "Tuple[str]"
                ],
                "hyper_params": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Callable",
                    "type"
                ],
                "log_cfg": [
                    "str",
                    "Optional[str]",
                    "int",
                    "type"
                ],
                "env_name": [
                    "str",
                    "Optional[str]",
                    "int",
                    "type"
                ],
                "state_size": [
                    "int",
                    "allennlp.nn.InitializerApplicator",
                    "float",
                    "Dict[str, str]"
                ],
                "output_size": [
                    "int",
                    "bool",
                    "List[str]"
                ],
                "is_test": [
                    "str",
                    "Optional[str]",
                    "int",
                    "type"
                ],
                "load_from": [
                    "bool",
                    "int",
                    "Optional[dict]",
                    "Callable",
                    "Dict[str, List[Any]]",
                    "Tuple[str]"
                ]
            }
        },
        "R2D1Learner._init_network": {
            "name": "_init_network",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "R2D1Learner.update_model": {
            "name": "update_model",
            "location": 84,
            "return": [
                "numpy.ndarray",
                "int",
                "float",
                "bool",
                "List[int]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "experience": [
                    "Union[rl_algorithms.common.abstraclearner.TensorTuple, Tuple[rl_algorithms.common.abstraclearner.TensorTuple]]",
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "R2D1Learner.save_params": {
            "name": "save_params",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_episode": [
                    "int",
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        },
        "R2D1Learner.load_params": {
            "name": "load_params",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "R2D1Learner.get_state_dict": {
            "name": "get_state_dict",
            "location": 170,
            "return": [
                "dict",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "R2D1Learner.get_policy": {
            "name": "get_policy",
            "location": 174,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/recurrent/losses.py": {
        "R2D1DQNLoss.__call__": {
            "name": "__call__",
            "location": 25,
            "return": [
                "str",
                "Union[List[str], List[Any]]",
                "Dict[str, Any]",
                "int",
                "float",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "rl_algorithms.common.networks.brain.Brain",
                    "bool",
                    "raiden.utils.BlockSpecification"
                ],
                "target_model": [
                    "rl_algorithms.common.networks.brain.Brain",
                    "int",
                    "float",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "raiden.utils.TokenAmount"
                ],
                "experiences": [
                    "Tuple[torch.Tensor]",
                    "int",
                    "bool",
                    "Callable"
                ],
                "gamma": [
                    "bool",
                    "int",
                    "str",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "head_cfg": [
                    "rl_algorithms.utils.config.ConfigDict",
                    "int",
                    "List[int]"
                ],
                "burn_in_step": [
                    "Tuple[torch.Tensor]",
                    "int",
                    "bool",
                    "Callable"
                ]
            }
        },
        "R2D1C51Loss.__call__": {
            "name": "__call__",
            "location": 110,
            "return": [
                "bool",
                "str",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "rl_algorithms.common.networks.brain.Brain",
                    "Tuple[torch.Tensor]",
                    "int",
                    "bool"
                ],
                "target_model": [
                    "rl_algorithms.common.networks.brain.Brain",
                    "raiden.utils.TokenAmount",
                    "int",
                    "gluonts.model.common.Tensor",
                    "raiden.utils.Address"
                ],
                "experiences": [
                    "Tuple[torch.Tensor]",
                    "int",
                    "bool",
                    "Callable"
                ],
                "gamma": [
                    "float",
                    "bool"
                ],
                "head_cfg": [
                    "rl_algorithms.utils.config.ConfigDict",
                    "int",
                    "float"
                ],
                "burn_in_step": [
                    "Tuple[torch.Tensor]",
                    "int",
                    "bool",
                    "Callable"
                ]
            }
        },
        "R2D1IQNLoss.__call__": {
            "name": "__call__",
            "location": 236,
            "return": [
                "bool",
                "str",
                "int",
                "utils.Node",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "rl_algorithms.common.networks.brain.Brain",
                    "Tuple[torch.Tensor]",
                    "int",
                    "bool"
                ],
                "target_model": [
                    "rl_algorithms.common.networks.brain.Brain",
                    "int",
                    "float",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "raiden.utils.TokenAmount"
                ],
                "experiences": [
                    "Tuple[torch.Tensor]",
                    "int",
                    "bool",
                    "Callable"
                ],
                "gamma": [
                    "float",
                    "bool"
                ],
                "head_cfg": [
                    "rl_algorithms.utils.config.ConfigDict",
                    "int",
                    "float"
                ],
                "burn_in_step": [
                    "Tuple[torch.Tensor]",
                    "int",
                    "bool",
                    "Callable"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/recurrent/utils.py": {
        "infer_leading_dims": {
            "name": "infer_leading_dims",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tensor": [
                    "int",
                    "Callable",
                    "str"
                ],
                "dim": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "restore_leading_dims": {
            "name": "restore_leading_dims",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "tensors": [
                    "int",
                    "torch.Tensor"
                ],
                "lead_dim": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "first_dim": [
                    "int",
                    "torch.Tensor"
                ],
                "second_dim": [
                    "int",
                    "torch.Tensor"
                ]
            }
        },
        "valid_from_done": {
            "name": "valid_from_done",
            "location": 63,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "done": [
                    "float",
                    "torch.Tensor",
                    "list",
                    "List[float]"
                ]
            }
        },
        "slice_r2d1_arguments": {
            "name": "slice_r2d1_arguments",
            "location": 78,
            "return": [
                "bool",
                "Optional[List[int]]",
                "str",
                "int"
            ],
            "arguments": {
                "experiences": [
                    "tuple",
                    "int",
                    "bool",
                    "List[str]",
                    "Exception",
                    "Optional[float]"
                ],
                "burn_in_step": [
                    "int"
                ],
                "output_size": [
                    "Tuple[int, int]",
                    "int",
                    "List[int]",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/recurrent/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/sac/agent.py": {
        "SACAgent.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "env_info": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "hyper_params": [
                    "bool",
                    "Union[List, numpy.ndarray, pymatgen.core.lattice.Lattice]",
                    "str",
                    "Iterable['adi.Instance']",
                    "Optional[str]",
                    "int"
                ],
                "learner_cfg": [
                    "bool",
                    "Union[List, numpy.ndarray, pymatgen.core.lattice.Lattice]",
                    "str",
                    "Iterable['adi.Instance']",
                    "Optional[str]",
                    "int"
                ],
                "log_cfg": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "is_test": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "load_from": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "is_render": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "render_after": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "is_log": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "save_period": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "episode_num": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "max_episode_steps": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ],
                "interim_test_num": [
                    "bool",
                    "Callable",
                    "rl_algorithms.utils.config.ConfigDict"
                ]
            }
        },
        "SACAgent._initialize": {
            "name": "_initialize",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SACAgent.select_action": {
            "name": "select_action",
            "location": 109,
            "return": [
                "slice",
                "rl_algorithms.common.networks.brain.Brain",
                "Iterable[Any]",
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "numpy.ndarray",
                    "torch.Tensor",
                    "list"
                ]
            }
        },
        "SACAgent._preprocess_state": {
            "name": "_preprocess_state",
            "location": 130,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "torch.device",
                    "numpy.ndarray",
                    "str",
                    "float",
                    "dict"
                ]
            }
        },
        "SACAgent.step": {
            "name": "step",
            "location": 135,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "Dict[str, AsyncGenerator]",
                    "int"
                ]
            }
        },
        "SACAgent._add_transition_to_memory": {
            "name": "_add_transition_to_memory",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "transition": [
                    "str",
                    "T",
                    "int",
                    "VT"
                ]
            }
        },
        "SACAgent.write_log": {
            "name": "write_log",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "log_value": [
                    "tuple",
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "SACAgent.pretrain": {
            "name": "pretrain",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SACAgent.train": {
            "name": "train",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/sac/learner.py": {
        "SACLearner.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hyper_params": [
                    "str",
                    "bool",
                    "int",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "log_cfg": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[float]",
                    "List[str]"
                ],
                "backbone": [
                    "bool",
                    "str",
                    "int",
                    "float"
                ],
                "head": [
                    "bool",
                    "str",
                    "int",
                    "float"
                ],
                "optim_cfg": [
                    "float",
                    "raiden.utils.TokenAmount",
                    "str"
                ],
                "env_name": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[float]",
                    "List[str]"
                ],
                "state_size": [
                    "int",
                    "str",
                    "bool",
                    "Union[Tuple[int, int], int]"
                ],
                "output_size": [
                    "int",
                    "float",
                    "bool",
                    "List[float]",
                    "str"
                ],
                "is_test": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[float]",
                    "List[str]"
                ],
                "load_from": [
                    "bool",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "SACLearner._init_network": {
            "name": "_init_network",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SACLearner.update_model": {
            "name": "update_model",
            "location": 122,
            "return": [
                "int",
                "Optional[int]",
                "numpy.ndarray",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "experience": [
                    "Tuple[torch.Tensor]",
                    "rl_algorithms.common.abstraclearner.TensorTuple",
                    "Union[rl_algorithms.common.abstraclearner.TensorTuple, Tuple[rl_algorithms.common.abstraclearner.TensorTuple]]",
                    "list",
                    "torch.Tensor"
                ]
            }
        },
        "SACLearner.save_params": {
            "name": "save_params",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_episode": [
                    "int",
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        },
        "SACLearner.load_params": {
            "name": "load_params",
            "location": 230,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "SACLearner.get_state_dict": {
            "name": "get_state_dict",
            "location": 250,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SACLearner.get_policy": {
            "name": "get_policy",
            "location": 254,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/sac/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/td3/agent.py": {
        "TD3Agent.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "env": [
                    "bool",
                    "Callable"
                ],
                "env_info": [
                    "bool",
                    "Callable"
                ],
                "hyper_params": [
                    "int",
                    "gym.Env",
                    "float",
                    "Tuple[int, int]",
                    "torch.Tensor",
                    "Iterable[str]"
                ],
                "learner_cfg": [
                    "bool",
                    "list"
                ],
                "noise_cfg": [
                    "bool",
                    "str",
                    "float"
                ],
                "log_cfg": [
                    "bool",
                    "Callable"
                ],
                "is_test": [
                    "bool",
                    "Callable"
                ],
                "load_from": [
                    "bool",
                    "Callable"
                ],
                "is_render": [
                    "bool",
                    "Callable"
                ],
                "render_after": [
                    "bool",
                    "Callable"
                ],
                "is_log": [
                    "bool",
                    "Callable"
                ],
                "save_period": [
                    "bool",
                    "Callable"
                ],
                "episode_num": [
                    "bool",
                    "Callable"
                ],
                "max_episode_steps": [
                    "bool",
                    "Callable"
                ],
                "interim_test_num": [
                    "bool",
                    "Callable"
                ]
            }
        },
        "TD3Agent.select_action": {
            "name": "select_action",
            "location": 115,
            "return": [
                "bool",
                "AbstractSet[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "numpy.ndarray"
                ]
            }
        },
        "TD3Agent.step": {
            "name": "step",
            "location": 136,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "TD3Agent.write_log": {
            "name": "write_log",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "log_value": [
                    "tuple",
                    "Dict[str, Any]",
                    "dict",
                    "str"
                ]
            }
        },
        "TD3Agent.train": {
            "name": "train",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/td3/learner.py": {
        "TD3Learner.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hyper_params": [
                    "bool",
                    "raiden.utils.BlockTimeout",
                    "str"
                ],
                "log_cfg": [
                    "bool",
                    "raiden.utils.BlockTimeout",
                    "str"
                ],
                "backbone": [
                    "bool",
                    "int",
                    "Union[int, Tuple[int, int]]",
                    "Callable[[str], bool]",
                    "List[int]"
                ],
                "head": [
                    "bool",
                    "int",
                    "Union[int, Tuple[int, int]]",
                    "Callable[[str], bool]",
                    "List[int]"
                ],
                "optim_cfg": [
                    "bool",
                    "int",
                    "Union[int, Tuple[int, int]]",
                    "Callable[[str], bool]",
                    "List[int]"
                ],
                "noise_cfg": [
                    "bool",
                    "int",
                    "torch.Tensor",
                    "Dict[str, int]"
                ],
                "env_name": [
                    "bool",
                    "raiden.utils.BlockTimeout",
                    "str"
                ],
                "state_size": [
                    "int",
                    "List[str]",
                    "Tuple[int, int]",
                    "Optional[int]"
                ],
                "output_size": [
                    "int",
                    "float",
                    "List[str]"
                ],
                "is_test": [
                    "bool",
                    "raiden.utils.BlockTimeout",
                    "str"
                ],
                "load_from": [
                    "bool",
                    "int",
                    "Union[int, Tuple[int, int]]",
                    "Callable[[str], bool]",
                    "List[int]"
                ]
            }
        },
        "TD3Learner._init_network": {
            "name": "_init_network",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TD3Learner.update_model": {
            "name": "update_model",
            "location": 122,
            "return": [
                "int",
                "Optional[int]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "experience": [
                    "Tuple[torch.Tensor]",
                    "rl_algorithms.common.abstraclearner.TensorTuple",
                    "Union[rl_algorithms.common.abstraclearner.TensorTuple, Tuple[rl_algorithms.common.abstraclearner.TensorTuple]]",
                    "list",
                    "torch.Tensor"
                ]
            }
        },
        "TD3Learner.save_params": {
            "name": "save_params",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n_episode": [
                    "int",
                    "bytes",
                    "str",
                    "bool"
                ]
            }
        },
        "TD3Learner.load_params": {
            "name": "load_params",
            "location": 202,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "TD3Learner.get_state_dict": {
            "name": "get_state_dict",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TD3Learner.get_policy": {
            "name": "get_policy",
            "location": 225,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/td3/__init__.py": {},
    "rl_algorithms-master/rl_algorithms/utils/config.py": {
        "add_args": {
            "name": "add_args",
            "location": 34,
            "return": [],
            "arguments": {
                "parser": [],
                "cfg": [
                    "dict",
                    "OrderedDict",
                    "Dict[str, Any]"
                ],
                "prefix": []
            }
        },
        "ConfigDict.__missing__": {
            "name": "__missing__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "ConfigDict.__getattr__": {
            "name": "__getattr__",
            "location": 12,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ConfigDict.__setitem__": {
            "name": "__setitem__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "list",
                    "List[str]"
                ],
                "value": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "YamlConfig.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config_paths": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "YamlConfig._yaml_to_config_dict": {
            "name": "_yaml_to_config_dict",
            "location": 63,
            "return": [
                "dict",
                "Mapping"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "YamlConfig.get_config_dict": {
            "name": "get_config_dict",
            "location": 73,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/utils/registry.py": {
        "build_from_cfg": {
            "name": "build_from_cfg",
            "location": 51,
            "return": [
                "str",
                "int",
                "Callable[..., None]"
            ],
            "arguments": {
                "cfg": [
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "Callable"
                ],
                "registry": [
                    "str",
                    "Optional[str]",
                    "T",
                    "dict",
                    "list"
                ],
                "default_args": [
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "Optional[Mapping[str, str]]",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "build_ray_obj_from_cfg": {
            "name": "build_ray_obj_from_cfg",
            "location": 83,
            "return": [
                "str",
                "Optional[bool]",
                "int"
            ],
            "arguments": {
                "cfg": [
                    "List[Dict]",
                    "Dict[str, Any]",
                    "int",
                    "Iterable['Event']",
                    "List[Dict[str, Any]]"
                ],
                "registry": [
                    "str",
                    "Optional[str]",
                    "Dict[int, Tuple[int, int]]"
                ],
                "default_args": [
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "Optional[Mapping[str, str]]",
                    "Optional[MutableMapping]",
                    "Mapping[str, Any]",
                    "Sequence[str]",
                    "int"
                ]
            }
        },
        "Registry.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "Registry.__repr__": {
            "name": "__repr__",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Registry.name": {
            "name": "name",
            "location": 20,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Registry.module_dict": {
            "name": "module_dict",
            "location": 24,
            "return": [
                "Optional[Dict]",
                "cmk.utils.type_defs.UserId",
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Registry.get": {
            "name": "get",
            "location": 27,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "dict",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "Registry._register_module": {
            "name": "_register_module",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "module_class": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "Registry.register_module": {
            "name": "register_module",
            "location": 46,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "IO[bytes]",
                    "Set[str]",
                    "IO[str]"
                ]
            }
        }
    },
    "rl_algorithms-master/rl_algorithms/utils/__init__.py": {},
    "rl_algorithms-master/tests/test_cnn_cfg.py": {
        "test_brain": {
            "name": "test_brain",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cnn_with_config": {
            "name": "test_cnn_with_config",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_resnet_with_config": {
            "name": "test_resnet_with_config",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rl_algorithms-master/tests/test_config_registry.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 11,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {
                "args": []
            }
        },
        "test_config_registry": {
            "name": "test_config_registry",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rl_algorithms-master/tests/test_helper_funcion.py": {
        "generate_dummy_buffer": {
            "name": "generate_dummy_buffer",
            "location": 10,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "maxlen": [
                    "int",
                    "Dict[str, Tuple[int, int]]"
                ],
                "index": [
                    "int",
                    "List[List[str]]",
                    "str"
                ]
            }
        },
        "check_case1": {
            "name": "check_case1",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "maxlen": [
                    "str",
                    "bytearray",
                    "Tuple[numpy.ndarray]"
                ]
            }
        },
        "check_case2": {
            "name": "check_case2",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "maxlen": [
                    "random.Random",
                    "int",
                    "bytes"
                ]
            }
        },
        "check_case3": {
            "name": "check_case3",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "maxlen": [
                    "int",
                    "str",
                    "numpy.ndarray"
                ]
            }
        },
        "test_get_n_step_info": {
            "name": "test_get_n_step_info",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "maxlen": [
                    "str",
                    "numpy.ndarray",
                    "Iterable[Any]",
                    "List[int]"
                ]
            }
        }
    },
    "rl_algorithms-master/tests/buffer/test_distillation_buffer.py": {
        "gen_test_data": {
            "name": "gen_test_data",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "num_files": [
                    "int",
                    "str"
                ]
            }
        },
        "check_multiple_data_load": {
            "name": "check_multiple_data_load",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "num_files": [
                    "str",
                    "List[str]",
                    "IO",
                    "int",
                    "Union[str, bytes, int]",
                    "bytes"
                ]
            }
        },
        "check_mixture_data_assert": {
            "name": "check_mixture_data_assert",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "num_files": [
                    "bool",
                    "str",
                    "IO",
                    "Optional[str]"
                ]
            }
        },
        "delete_path": {
            "name": "delete_path",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "test_distillation_buffer": {
            "name": "test_distillation_buffer",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rl_algorithms-master/tests/buffer/test_prioritized_buffer.py": {
        "generate_prioritized_buffer": {
            "name": "generate_prioritized_buffer",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "buffer_length": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "bool",
                    "float"
                ],
                "batch_size": [
                    "int",
                    "Tuple[int, int]",
                    "float",
                    "numpy.ndarray",
                    "Optional[int]"
                ],
                "idx_lst": [
                    "int",
                    "float",
                    "tuple",
                    "Union[str, float]",
                    "str",
                    "bool"
                ],
                "prior_lst": [
                    "int",
                    "float",
                    "tuple",
                    "Union[str, float]",
                    "str",
                    "bool"
                ]
            }
        },
        "sample_dummy": {
            "name": "sample_dummy",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "prioritized_buffer": [
                    "int",
                    "bytes",
                    "Optional[int]",
                    "str"
                ],
                "times": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "check_prioritized": {
            "name": "check_prioritized",
            "location": 44,
            "return": [
                "List[int]",
                "numpy.ndarray",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "prop_lst": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ],
                "sampled_lst": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "test_prioritized": {
            "name": "test_prioritized",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "buffer_length": [
                    "int",
                    "bool",
                    "float"
                ],
                "batch_size": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "rl_algorithms-master/tests/buffer/test_uniform_buffer.py": {
        "generate_transition": {
            "name": "generate_transition",
            "location": 9,
            "return": [
                "Optional[int]",
                "int",
                "float",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "idx": [
                    "str",
                    "Tuple[int]",
                    "List[T]",
                    "T",
                    "List[str]",
                    "int"
                ]
            }
        },
        "generate_sample_idx": {
            "name": "generate_sample_idx",
            "location": 19,
            "return": [
                "bool",
                "str",
                "Optional[Any]",
                "List[str]"
            ],
            "arguments": {
                "buffer": [
                    "int",
                    "List[str]",
                    "Union[float, str]",
                    "float"
                ]
            }
        },
        "check_uniform": {
            "name": "check_uniform",
            "location": 27,
            "return": [
                "List[int]",
                "numpy.ndarray",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "lst": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "test_uniform_sample": {
            "name": "test_uniform_sample",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "buffer_length": [
                    "int",
                    "float",
                    "Optional[Tuple[int, ...]]"
                ],
                "batch_size": [
                    "int",
                    "float",
                    "Optional[Tuple[int, ...]]"
                ]
            }
        }
    },
    "rl_algorithms-master/tests/integration/test_run_agent.py": {
        "check_run_env": {
            "name": "check_run_env",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "config_root": [
                    "str"
                ],
                "run_file": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "check_save_path": {
            "name": "check_save_path",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "save_path": [
                    "str",
                    "dict"
                ]
            }
        },
        "test_run_lunarlander_continuous": {
            "name": "test_run_lunarlander_continuous",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_run_lunarlander": {
            "name": "test_run_lunarlander",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_run_pong_no_frame_skip": {
            "name": "test_run_pong_no_frame_skip",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rl_algorithms-master/tests/integration/test_run_apex.py": {
        "check_run_apex": {
            "name": "check_run_apex",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "config_root": [
                    "str",
                    "Optional[str]"
                ],
                "run_file": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "check_save_path": {
            "name": "check_save_path",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "save_path": [
                    "str",
                    "dict"
                ]
            }
        },
        "test_run_pong_no_frame_skip": {
            "name": "test_run_pong_no_frame_skip",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rl_algorithms-master/tests/integration/test_run_distillation_agent.py": {
        "check_distillation_agent": {
            "name": "check_distillation_agent",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "bool",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Set[str]"
                ],
                "run_file": [
                    "bool",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Set[str]"
                ]
            }
        },
        "delete_path": {
            "name": "delete_path",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "test_distillation": {
            "name": "test_distillation",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {}
        }
    }
}
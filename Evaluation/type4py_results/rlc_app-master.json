{
    "rlc_app-master/manage.py": {},
    "rlc_app-master/test_runner.py": {
        "MyFileWatcher.on_any_event": {
            "name": "on_any_event",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "rlc_app-master/backend/settings.py": {},
    "rlc_app-master/backend/urls.py": {},
    "rlc_app-master/backend/wsgi.py": {},
    "rlc_app-master/backend/__init__.py": {},
    "rlc_app-master/backend/api/admin.py": {},
    "rlc_app-master/backend/api/authentication.py": {
        "ExpiringTokenAuthentication.authenticate_credentials": {
            "name": "authenticate_credentials",
            "location": 28,
            "return": [
                "List[Callable]",
                "int",
                "salon.models.Stylist",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "Dict[str, str]",
                    "dict",
                    "bytes"
                ]
            }
        }
    },
    "rlc_app-master/backend/api/errors.py": {
        "CustomError.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "detail": [
                    "str",
                    "Type[T]",
                    "dict"
                ]
            }
        }
    },
    "rlc_app-master/backend/api/exception_handler.py": {
        "custom_exception_handler": {
            "name": "custom_exception_handler",
            "location": 20,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "dict",
                "str",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "exc": [
                    "Dict[str, Any]"
                ],
                "context": [
                    "Exception",
                    "dict"
                ]
            }
        }
    },
    "rlc_app-master/backend/api/permissions.py": {
        "UpdateOwnProfile.has_object_permission": {
            "name": "has_object_permission",
            "location": 24,
            "return": [
                "bool",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "rest_framework.requesRequest"
                ],
                "view": [
                    "dict"
                ],
                "obj": [
                    "Union[dict, list]",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "EditRecord.has_permission": {
            "name": "has_permission",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": []
            }
        },
        "OnlySuperuser.has_permission": {
            "name": "has_permission",
            "location": 39,
            "return": [
                "dict",
                "Dict[str, Tuple[Any, Any]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "rest_framework.requesRequest",
                    "Set[str]",
                    "str"
                ],
                "view": []
            }
        },
        "EditPermissions.has_permission": {
            "name": "has_permission",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "rest_framework.requesRequest",
                    "Union[dict, list]",
                    "str"
                ],
                "view": []
            }
        },
        "OriginCountry.has_permission": {
            "name": "has_permission",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "rest_framework.requesRequest",
                    "dict"
                ],
                "view": []
            }
        },
        "GetOrSuperuser.has_permission": {
            "name": "has_permission",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "rest_framework.requesRequest",
                    "dict"
                ],
                "view": []
            }
        }
    },
    "rlc_app-master/backend/api/urls.py": {},
    "rlc_app-master/backend/api/__init__.py": {},
    "rlc_app-master/backend/api/management/__init__.py": {},
    "rlc_app-master/backend/api/management/commands/add_permissions.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser",
                    "bool"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rlc_app-master/backend/api/management/commands/create_dummy_data.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "parser": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Command.get_and_create_dummy_user": {
            "name": "get_and_create_dummy_user",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "rlc": []
            }
        },
        "Command.get_and_create_users": {
            "name": "get_and_create_users",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "rlc": []
            }
        },
        "Command.create_groups": {
            "name": "create_groups",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "rlc": [],
                "main_user": [],
                "users": []
            }
        },
        "Command.get_permission": {
            "name": "get_permission",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "permission": []
            }
        },
        "Command.add_permission_to_group": {
            "name": "add_permission_to_group",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "group": [],
                "rlc": [],
                "permission_name": []
            }
        },
        "Command.get_and_create_clients": {
            "name": "get_and_create_clients",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "rlc": []
            }
        },
        "Command.get_and_create_records": {
            "name": "get_and_create_records",
            "location": 311,
            "return": [],
            "arguments": {
                "self": [],
                "clients": [],
                "consultants": [],
                "rlc": []
            }
        },
        "Command.get_and_create_client": {
            "name": "get_and_create_client",
            "location": 454,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "rlc": []
            }
        },
        "Command.create_the_best_record_ever": {
            "name": "create_the_best_record_ever",
            "location": 479,
            "return": [],
            "arguments": {
                "self": [],
                "main_user": [],
                "clients": [],
                "consultants": [],
                "rlc": []
            }
        }
    },
    "rlc_app-master/backend/api/management/commands/create_new_rlc.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 34,
            "return": [
                "app.models.Article"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rlc_app-master/backend/api/management/commands/populate_db.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rlc_app-master/backend/api/management/commands/populate_deploy_db.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser",
                    "bool"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rlc_app-master/backend/api/management/commands/populate_test_db.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser",
                    "bool"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.add_admin_account": {
            "name": "add_admin_account",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Command.add_standard_account": {
            "name": "add_standard_account",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rlc_app-master/backend/api/management/commands/reset_db.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser",
                    "bool"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rlc_app-master/backend/api/management/commands/_factories.py": {
        "UserFactory.rlcs": {
            "name": "rlcs",
            "location": 34,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "create": [
                    "int",
                    "Tuple[int, str]",
                    "Iterator[int]",
                    "Iterable[int]"
                ],
                "extracted": [
                    "list",
                    "Dict[str, float]",
                    "dict"
                ]
            }
        },
        "RecordFactory.tags": {
            "name": "tags",
            "location": 70,
            "return": [
                "bytes",
                "Union[tuple, list]"
            ],
            "arguments": {
                "self": [],
                "create": [
                    "int",
                    "bool"
                ],
                "extracted": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[Sequence[str]]",
                    "List[str]"
                ]
            }
        },
        "RecordFactory.working_on_users": {
            "name": "working_on_users",
            "location": 77,
            "return": [
                "float",
                "str",
                "DefaultDict",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "create": [
                    "Type[T]",
                    "List[Dict[str, Any]]",
                    "int",
                    "bool",
                    "list",
                    "Type[tuple]"
                ],
                "extracted": [
                    "set"
                ]
            }
        },
        "GroupFactory.group_members": {
            "name": "group_members",
            "location": 97,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "create": [
                    "int",
                    "Tuple[int, str]",
                    "Iterator[int]",
                    "Iterable[int]"
                ],
                "extracted": [
                    "list",
                    "Dict[str, float]",
                    "dict"
                ]
            }
        }
    },
    "rlc_app-master/backend/api/management/commands/_fixtures.py": {
        "Fixtures.create_example_static_users": {
            "name": "create_example_static_users",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "Fixtures.create_example_record_tags": {
            "name": "create_example_record_tags",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "Fixtures.create_example_origin_countries": {
            "name": "create_example_origin_countries",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "Fixtures.create_real_origin_countries": {
            "name": "create_real_origin_countries",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "Fixtures.create_example_permissions": {
            "name": "create_example_permissions",
            "location": 104,
            "return": [],
            "arguments": {}
        },
        "Fixtures.create_rlcs": {
            "name": "create_rlcs",
            "location": 116,
            "return": [],
            "arguments": {}
        },
        "Fixtures.create_real_permissions": {
            "name": "create_real_permissions",
            "location": 124,
            "return": [],
            "arguments": {}
        },
        "Fixtures.create_real_permissions_no_duplicates": {
            "name": "create_real_permissions_no_duplicates",
            "location": 130,
            "return": [],
            "arguments": {}
        },
        "Fixtures.create_real_tags": {
            "name": "create_real_tags",
            "location": 137,
            "return": [],
            "arguments": {}
        },
        "Fixtures.create_real_document_tags": {
            "name": "create_real_document_tags",
            "location": 153,
            "return": [],
            "arguments": {}
        },
        "Fixtures.create_real_starting_rlcs": {
            "name": "create_real_starting_rlcs",
            "location": 166,
            "return": [],
            "arguments": {}
        },
        "Fixtures.create_real_groups": {
            "name": "create_real_groups",
            "location": 174,
            "return": [],
            "arguments": {
                "rlcs": []
            }
        },
        "Fixtures.create_good_example_records": {
            "name": "create_good_example_records",
            "location": 184,
            "return": [],
            "arguments": {}
        },
        "Fixtures.create_handmade_examples": {
            "name": "create_handmade_examples",
            "location": 194,
            "return": [],
            "arguments": {}
        },
        "AddMethods.add_user": {
            "name": "add_user",
            "location": 1548,
            "return": [],
            "arguments": {
                "user": []
            }
        },
        "AddMethods.add_rlc": {
            "name": "add_rlc",
            "location": 1575,
            "return": [],
            "arguments": {
                "rlc": []
            }
        },
        "AddMethods.add_permission": {
            "name": "add_permission",
            "location": 1596,
            "return": [],
            "arguments": {
                "permission": []
            }
        },
        "AddMethods.add_record_tag": {
            "name": "add_record_tag",
            "location": 1617,
            "return": [],
            "arguments": {
                "tag": []
            }
        },
        "AddMethods.add_record_document_tag": {
            "name": "add_record_document_tag",
            "location": 1636,
            "return": [],
            "arguments": {
                "tag": []
            }
        },
        "AddMethods.add_country": {
            "name": "add_country",
            "location": 1646,
            "return": [],
            "arguments": {
                "country": []
            }
        },
        "AddMethods.add_to_rlc": {
            "name": "add_to_rlc",
            "location": 1666,
            "return": [],
            "arguments": {
                "user_id": [],
                "rlc_id": []
            }
        },
        "AddMethods.add_group": {
            "name": "add_group",
            "location": 1682,
            "return": [],
            "arguments": {
                "group": [],
                "rlc_id": []
            }
        },
        "AddMethods.add_group_in_rlc": {
            "name": "add_group_in_rlc",
            "location": 1689,
            "return": [],
            "arguments": {
                "group": [],
                "rlc_id": []
            }
        },
        "AddMethods.add_group_not_in_rlc": {
            "name": "add_group_not_in_rlc",
            "location": 1702,
            "return": [],
            "arguments": {
                "group": []
            }
        },
        "AddMethods.add_client": {
            "name": "add_client",
            "location": 1715,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "AddMethods.add_record": {
            "name": "add_record",
            "location": 1725,
            "return": [],
            "arguments": {
                "record": []
            }
        },
        "AddMethods.generate_date": {
            "name": "generate_date",
            "location": 1741,
            "return": [],
            "arguments": {
                "information": []
            }
        },
        "AddMethods.generate_datetime": {
            "name": "generate_datetime",
            "location": 1746,
            "return": [],
            "arguments": {
                "information": []
            }
        }
    },
    "rlc_app-master/backend/api/management/commands/__init__.py": {},
    "rlc_app-master/backend/api/migrations/0001_initial.py": {},
    "rlc_app-master/backend/api/migrations/0002_auto_20190206_1302.py": {},
    "rlc_app-master/backend/api/migrations/0003_forgotpasswordlinks_ip_address.py": {},
    "rlc_app-master/backend/api/migrations/0004_auto_20190212_0750.py": {},
    "rlc_app-master/backend/api/migrations/0005_newuserrequest.py": {},
    "rlc_app-master/backend/api/migrations/0006_auto_20190408_2005.py": {},
    "rlc_app-master/backend/api/migrations/0007_useractivationlink_activated.py": {},
    "rlc_app-master/backend/api/migrations/0008_auto_20190411_1633.py": {},
    "rlc_app-master/backend/api/migrations/__init__.py": {},
    "rlc_app-master/backend/api/models/forgot_password.py": {
        "generate_link_id": {
            "name": "generate_link_id",
            "location": 23,
            "return": [
                "int",
                "str",
                "Union[str, int]"
            ],
            "arguments": {}
        },
        "ForgotPasswordLinks.__str__": {
            "name": "__str__",
            "location": 41,
            "return": [
                "str",
                "Optional[str]",
                "dict",
                "Callable",
                "Dict[str, Union[str, Set]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rlc_app-master/backend/api/models/group.py": {
        "GroupQuerySet.get_visible_groups_for_user": {
            "name": "get_visible_groups_for_user",
            "location": 24,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "tracim.models.User",
                    "str",
                    "core.models.User",
                    "contests.models.User",
                    "django.db.models.query.QuerySet",
                    "dict",
                    "asgard.models.user.User"
                ]
            }
        },
        "Group.__str__": {
            "name": "__str__",
            "location": 50,
            "return": [
                "str",
                "IO",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rlc_app-master/backend/api/models/has_permission.py": {
        "HasPermissionQuerySet.check_if_already_existing": {
            "name": "check_if_already_existing",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "val": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "HasPermissionManager.get_query_set": {
            "name": "get_query_set",
            "location": 28,
            "return": [
                "str",
                "Optional[List[str]]",
                "audiopyle.lib.models.file_meta.CompressedAudioFileMeta",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasPermissionManager.__getattr__": {
            "name": "__getattr__",
            "location": 31,
            "return": [
                "bool",
                "str",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Iterable[T]",
                    "str",
                    "List[T]",
                    "int"
                ]
            }
        },
        "HasPermission.__str__": {
            "name": "__str__",
            "location": 56,
            "return": [
                "str",
                "dict",
                "models.Name",
                "Optional[str]",
                "taxonomy.db.models.Taxon",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "HasPermission.already_existing": {
            "name": "already_existing",
            "location": 64,
            "return": [
                "bool"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "core.models.Model",
                    "Optional[Dict]"
                ]
            }
        },
        "HasPermission.validate_values": {
            "name": "validate_values",
            "location": 84,
            "return": [
                "bool"
            ],
            "arguments": {
                "data": [
                    "int",
                    "bytes"
                ]
            }
        },
        "HasPermission._check_key_with_value_in_data": {
            "name": "_check_key_with_value_in_data",
            "location": 100,
            "return": [
                "bool",
                "dict",
                "Union[None, bool]",
                "int"
            ],
            "arguments": {
                "data": [
                    "Dict[str, str]",
                    "str",
                    "dict",
                    "int",
                    "Dict[str, Any]",
                    "Dict[str, float]"
                ],
                "key": [
                    "Dict[str, str]",
                    "str",
                    "dict",
                    "int",
                    "Dict[str, Any]",
                    "Dict[str, float]"
                ]
            }
        }
    },
    "rlc_app-master/backend/api/models/language.py": {
        "Language.__str__": {
            "name": "__str__",
            "location": 24,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rlc_app-master/backend/api/models/new_user_request.py": {
        "NewUserRequest.__str__": {
            "name": "__str__",
            "location": 37,
            "return": [
                "bool",
                "int",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rlc_app-master/backend/api/models/permission.py": {
        "Permission.__str__": {
            "name": "__str__",
            "location": 23,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Permission.get_groups_with_permission_from_rlc": {
            "name": "get_groups_with_permission_from_rlc",
            "location": 26,
            "return": [
                "Dict[str, Any]",
                "amundsen_application.models.user.User",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "rlc": [
                    "zerver.models.Realm",
                    "str",
                    "bool",
                    "contengroups.Group",
                    "List[jinete.models.Stop]"
                ]
            }
        },
        "Permission.get_users_with_permission_from_rlc": {
            "name": "get_users_with_permission_from_rlc",
            "location": 32,
            "return": [
                "Optional[str]",
                "Optional[Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "rlc": [
                    "str",
                    "Dict[str, Any]",
                    "List[django.db.models.query.QuerySet]"
                ]
            }
        },
        "Permission.get_rlc_permissions_with_special_permission": {
            "name": "get_rlc_permissions_with_special_permission",
            "location": 38,
            "return": [
                "bool",
                "Optional[Callable]",
                "int"
            ],
            "arguments": {
                "self": [],
                "rlc": [
                    "str",
                    "int",
                    "models.Person.Person",
                    "server.models.User",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "rlc_app-master/backend/api/models/rlc.py": {
        "Rlc.__str__": {
            "name": "__str__",
            "location": 34,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rlc.get_consultants": {
            "name": "get_consultants",
            "location": 37,
            "return": [
                "str",
                "app.models.User",
                "bool",
                "Dict[str, Dict[str, Any]]",
                "abilian.core.models.subjects.User",
                "services.user.transfer.models.User"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rlc_app-master/backend/api/models/user.py": {
        "UserProfileManager.create_user": {
            "name": "create_user",
            "location": 29,
            "return": [
                "zam_repondeur.models.Lecture",
                "core.models.UserPreferences",
                "set",
                "int",
                "bool",
                "django.db.models.QuerySet"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str",
                    "int",
                    "topicdb.core.models.language.Language"
                ],
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "password": [
                    "str",
                    "float",
                    "Optional[str]"
                ]
            }
        },
        "UserProfileManager.create_superuser": {
            "name": "create_superuser",
            "location": 41,
            "return": [
                "core.models.User",
                "lms.lmsdb.models.User",
                "lms.lmsdb.models.Solution",
                "zam_repondeur.models.Lecture",
                "aiolambda.Maybe[auth.user.User]"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str",
                    "int"
                ],
                "name": [
                    "str",
                    "int"
                ],
                "password": [
                    "str",
                    "int"
                ]
            }
        },
        "UserProfileManager.get_users_with_special_permission": {
            "name": "get_users_with_special_permission",
            "location": 52,
            "return": [
                "List[Dict[str, Any]]",
                "str",
                "bool",
                "dict",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "permission": [
                    "dict"
                ],
                "from_rlc": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Dict[str, str]]"
                ],
                "for_user": [
                    "Optional[str]",
                    "int",
                    "Optional[Iterable[str]]",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ],
                "for_group": [
                    "Optional[str]",
                    "int",
                    "Optional[Iterable[str]]",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ],
                "for_rlc": [
                    "Optional[str]",
                    "int",
                    "Optional[Iterable[str]]",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "UserProfile.get_full_name": {
            "name": "get_full_name",
            "location": 127,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserProfile.get_short_name": {
            "name": "get_short_name",
            "location": 130,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserProfile.__str__": {
            "name": "__str__",
            "location": 133,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserProfile.__get_as_user_permissions": {
            "name": "__get_as_user_permissions",
            "location": 136,
            "return": [
                "List[str]",
                "List[Dict]",
                "str",
                "List[List[Any]]",
                "list",
                "List[float]",
                "Optional[Type]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserProfile.__get_as_group_member_permissions": {
            "name": "__get_as_group_member_permissions",
            "location": 142,
            "return": [
                "list",
                "List[str]",
                "str",
                "List[Dict]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserProfile.__get_as_rlc_member_permissions": {
            "name": "__get_as_rlc_member_permissions",
            "location": 149,
            "return": [
                "list",
                "List[str]",
                "str",
                "List[Dict]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserProfile.get_all_user_permissions": {
            "name": "get_all_user_permissions",
            "location": 155,
            "return": [
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserProfile.__get_as_user_special_permissions": {
            "name": "__get_as_user_special_permissions",
            "location": 165,
            "return": [
                "str",
                "List[Dict]",
                "Union[str, List[Any]]",
                "Optional[str]",
                "list",
                "List[str]",
                "List[models.User]"
            ],
            "arguments": {
                "self": [],
                "permission_id": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "UserProfile.__get_as_group_member_special_permissions": {
            "name": "__get_as_group_member_special_permissions",
            "location": 174,
            "return": [
                "str",
                "List[Dict]",
                "List[str]",
                "list",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "permission": [
                    "str",
                    "int",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "UserProfile.__get_as_rlc_member_special_permissions": {
            "name": "__get_as_rlc_member_special_permissions",
            "location": 178,
            "return": [
                "str",
                "List[Dict]",
                "List[str]",
                "list",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "permission": [
                    "int",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "UserProfile.get_overall_special_permissions": {
            "name": "get_overall_special_permissions",
            "location": 181,
            "return": [
                "str",
                "zerver.models.Realm",
                "Optional[Any]",
                "medtagger.database.models.Scan",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "permission": [
                    "str",
                    "db.models.Name",
                    "int",
                    "viewer.models.Gallery",
                    "set"
                ]
            }
        },
        "UserProfile.__has_as_user_permission": {
            "name": "__has_as_user_permission",
            "location": 187,
            "return": [
                "Optional[Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "permission": [
                    "int",
                    "bool",
                    "List[int]",
                    "str"
                ],
                "for_user": [
                    "int",
                    "bool",
                    "List[int]",
                    "str"
                ],
                "for_group": [
                    "int",
                    "bool",
                    "List[int]",
                    "str"
                ],
                "for_rlc": [
                    "int",
                    "bool",
                    "List[int]",
                    "str"
                ]
            }
        },
        "UserProfile.__has_as_group_member_permission": {
            "name": "__has_as_group_member_permission",
            "location": 193,
            "return": [
                "Optional[Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "permission": [
                    "int"
                ],
                "for_user": [
                    "int"
                ],
                "for_group": [
                    "int"
                ],
                "for_rlc": [
                    "int"
                ]
            }
        },
        "UserProfile.__has_as_rlc_member_permission": {
            "name": "__has_as_rlc_member_permission",
            "location": 200,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "permission": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "for_user": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "for_group": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "for_rlc": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "UserProfile.has_permission": {
            "name": "has_permission",
            "location": 209,
            "return": [
                "bool",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "permission": [
                    "str",
                    "Optional[Iterable[Any]]",
                    "bool",
                    "int"
                ],
                "for_user": [
                    "Optional[str]",
                    "int",
                    "Mapping"
                ],
                "for_group": [
                    "Optional[str]",
                    "int",
                    "Mapping"
                ],
                "for_rlc": [
                    "Optional[str]",
                    "int",
                    "Mapping"
                ]
            }
        }
    },
    "rlc_app-master/backend/api/models/user_activation_link.py": {
        "generate_link_id": {
            "name": "generate_link_id",
            "location": 23,
            "return": [
                "int",
                "str",
                "Union[str, int]"
            ],
            "arguments": {}
        },
        "UserActivationLink.__str__": {
            "name": "__str__",
            "location": 41,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Union[str, Set]]",
                "django.db.models.Model"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rlc_app-master/backend/api/models/__init__.py": {},
    "rlc_app-master/backend/api/serializers/forgot_password.py": {},
    "rlc_app-master/backend/api/serializers/group.py": {},
    "rlc_app-master/backend/api/serializers/has_permission.py": {
        "HasPermissionSerializer.validate": {
            "name": "validate",
            "location": 32,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Tuple[int, str, bytearray]",
                    "Optional[Exception]",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "HasPermissionSerializer.create": {
            "name": "create",
            "location": 37,
            "return": [
                "Dict[str, Dict[str, int]]",
                "bool",
                "Dict[str, Any]",
                "list"
            ],
            "arguments": {
                "self": [],
                "validated_data": [
                    "dict",
                    "Dict[str, float]",
                    "story.models.Story",
                    "services.shop.order.models.order_evenOrderEvenData"
                ]
            }
        },
        "HasPermissionSerializer.update": {
            "name": "update",
            "location": 51,
            "return": [
                "float",
                "zam_repondeur.models.Amendement",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "bool",
                    "dict",
                    "str",
                    "int",
                    "Optional[Any]"
                ],
                "validated_data": [
                    "dict",
                    "story.models.Author",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "rlc_app-master/backend/api/serializers/language.py": {},
    "rlc_app-master/backend/api/serializers/new_user_request.py": {},
    "rlc_app-master/backend/api/serializers/permission.py": {},
    "rlc_app-master/backend/api/serializers/rlc.py": {},
    "rlc_app-master/backend/api/serializers/user.py": {
        "UserProfileCreatorSerializer.create": {
            "name": "create",
            "location": 81,
            "return": [
                "core.models.User",
                "lms.lmsdb.models.User",
                "lms.lmsdb.models.Solution",
                "zam_repondeur.models.Lecture"
            ],
            "arguments": {
                "self": [],
                "validated_data": [
                    "str",
                    "Dict[str, Any]",
                    "MutableMapping[str, Any]",
                    "dict",
                    "core_lib.core.models.Event"
                ]
            }
        }
    },
    "rlc_app-master/backend/api/serializers/user_activation_link.py": {},
    "rlc_app-master/backend/api/serializers/__init__.py": {},
    "rlc_app-master/backend/api/tests/fixtures.py": {
        "CreateFixtures.create_sample_countries": {
            "name": "create_sample_countries",
            "location": 24,
            "return": [
                "List[Dict]",
                "str",
                "list",
                "List[int]",
                "Union[str, List[Any]]",
                "bool",
                "List[str]"
            ],
            "arguments": {}
        },
        "CreateFixtures.create_sample_users": {
            "name": "create_sample_users",
            "location": 32,
            "return": [
                "List[str]",
                "str",
                "List[T]",
                "List[int]"
            ],
            "arguments": {}
        },
        "CreateFixtures.create_sample_clients": {
            "name": "create_sample_clients",
            "location": 39,
            "return": [
                "Callable[[Optional, Optional, str], None]",
                "str",
                "app.models.Question",
                "app.models.Position",
                "int"
            ],
            "arguments": {}
        },
        "CreateFixtures.create_sample_records": {
            "name": "create_sample_records",
            "location": 50,
            "return": [
                "str",
                "List[Dict]",
                "List[str]",
                "bool",
                "List[int]"
            ],
            "arguments": {}
        },
        "CreateFixtures.create_sample_groups": {
            "name": "create_sample_groups",
            "location": 62,
            "return": [
                "str",
                "List[Dict]",
                "List[str]",
                "bool",
                "List[int]"
            ],
            "arguments": {}
        },
        "CreateFixtures.create_sample_permissions": {
            "name": "create_sample_permissions",
            "location": 70,
            "return": [
                "str",
                "List[str]",
                "List[float]",
                "List[List[Any]]"
            ],
            "arguments": {}
        },
        "CreateFixtures.create_sample_has_permissions": {
            "name": "create_sample_has_permissions",
            "location": 78,
            "return": [
                "str",
                "List[Dict]",
                "Optional[Type]",
                "dict",
                "list"
            ],
            "arguments": {}
        },
        "CreateFixtures.create_sample_rlcs": {
            "name": "create_sample_rlcs",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "CreateFixtures.add_group": {
            "name": "add_group",
            "location": 101,
            "return": [
                "int",
                "Optional[str]",
                "datetime.datetime"
            ],
            "arguments": {
                "id": [
                    "str",
                    "bytes"
                ],
                "name": [
                    "str",
                    "bytes"
                ],
                "visible": [
                    "str",
                    "bytes"
                ],
                "members": [
                    "str",
                    "int"
                ]
            }
        },
        "CreateFixtures.add_groups": {
            "name": "add_groups",
            "location": 117,
            "return": [
                "int",
                "Type",
                "str",
                "Optional[List[str]]"
            ],
            "arguments": {
                "groups": [
                    "str",
                    "bytes",
                    "esm.models.Manifest",
                    "List[str]"
                ]
            }
        },
        "CreateFixtures.add_record": {
            "name": "add_record",
            "location": 129,
            "return": [
                "int",
                "Optional[str]",
                "datetime.datetime"
            ],
            "arguments": {
                "id": [
                    "Optional[datetime.datetime]",
                    "datetime.datetime",
                    "int",
                    "str"
                ],
                "first": [
                    "Optional[datetime.datetime]",
                    "datetime.datetime",
                    "int",
                    "str"
                ],
                "last": [
                    "Optional[datetime.datetime]",
                    "datetime.datetime",
                    "int",
                    "str"
                ],
                "token": [
                    "Optional[datetime.datetime]",
                    "datetime.datetime",
                    "int",
                    "str"
                ],
                "note": [
                    "Optional[datetime.datetime]",
                    "datetime.datetime",
                    "int",
                    "str"
                ],
                "state": [
                    "Optional[datetime.datetime]",
                    "datetime.datetime",
                    "int",
                    "str"
                ],
                "client": [
                    "Optional[datetime.datetime]",
                    "datetime.datetime",
                    "int",
                    "str"
                ],
                "working": [
                    "bool",
                    "int",
                    "str",
                    "Mapping",
                    "Sequence"
                ]
            }
        },
        "CreateFixtures.add_records": {
            "name": "add_records",
            "location": 150,
            "return": [
                "int",
                "Type",
                "str",
                "Optional[List[str]]"
            ],
            "arguments": {
                "records": [
                    "str",
                    "bytes",
                    "esm.models.Manifest",
                    "List[str]"
                ]
            }
        },
        "CreateFixtures.add_client": {
            "name": "add_client",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "id": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "note": [
                    "str"
                ],
                "phone_number": [
                    "str"
                ],
                "birthday": [
                    "str"
                ],
                "origin": [
                    "str"
                ]
            }
        },
        "CreateFixtures.add_clients": {
            "name": "add_clients",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "clients": [
                    "str",
                    "bool",
                    "int",
                    "Optional[Dict]",
                    "List[int]"
                ]
            }
        },
        "CreateFixtures.add_user": {
            "name": "add_user",
            "location": 170,
            "return": [
                "core.models.User",
                "core.models.UserPreferences",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "id": [
                    "Optional[str]",
                    "str",
                    "Optional[Callable[[], None]]",
                    "Optional[Callable[[], bool]]",
                    "Sequence[str]",
                    "bool"
                ],
                "email": [
                    "Optional[str]",
                    "str",
                    "Optional[Callable[[], None]]",
                    "Optional[Callable[[], bool]]",
                    "Sequence[str]",
                    "bool"
                ],
                "name": [
                    "Optional[str]",
                    "str",
                    "Optional[Callable[[], None]]",
                    "Optional[Callable[[], bool]]",
                    "Sequence[str]",
                    "bool"
                ],
                "password": [
                    "Optional[str]",
                    "str",
                    "Optional[Callable[[], None]]",
                    "Optional[Callable[[], bool]]",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "CreateFixtures.add_users": {
            "name": "add_users",
            "location": 184,
            "return": [
                ""
            ],
            "arguments": {
                "users": [
                    "List[zerver.models.UserProfile]",
                    "models.characters.character_base.Character",
                    "excars.models.user.User",
                    "Optional[Dict[str, str]]",
                    "core.models.User"
                ]
            }
        },
        "CreateFixtures.add_country": {
            "name": "add_country",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "id": [
                    "str",
                    "Optional[Collection[str]]",
                    "Optional[bool]",
                    "Sequence[str]"
                ],
                "name": [
                    "str",
                    "Optional[Collection[str]]",
                    "Optional[bool]",
                    "Sequence[str]"
                ],
                "state": [
                    "str",
                    "Optional[Collection[str]]",
                    "Optional[bool]",
                    "Sequence[str]"
                ]
            }
        },
        "CreateFixtures.add_countries": {
            "name": "add_countries",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {
                "countries": [
                    "str",
                    "bytes",
                    "esm.models.Manifest",
                    "List[str]"
                ]
            }
        },
        "CreateFixtures.add_permission": {
            "name": "add_permission",
            "location": 199,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Dict[str, Tuple[int, int]]",
                "app.models.Article"
            ],
            "arguments": {
                "id": [
                    "Optional[str]",
                    "str",
                    "Optional[Callable[[], None]]",
                    "Optional[Callable[[], bool]]",
                    "Sequence[str]",
                    "bool"
                ],
                "name": [
                    "Optional[str]",
                    "str",
                    "Optional[Callable[[], None]]",
                    "Optional[Callable[[], bool]]",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "CreateFixtures.add_permissions": {
            "name": "add_permissions",
            "location": 211,
            "return": [
                "Tuple[int, int]",
                "Type",
                "Type[object]",
                "int"
            ],
            "arguments": {
                "permissions": [
                    "str",
                    "Iterable[bytes]",
                    "bool",
                    "Collection[str]",
                    "Iterable[str]",
                    "Type[T]"
                ]
            }
        },
        "CreateFixtures.add_has_permission": {
            "name": "add_has_permission",
            "location": 226,
            "return": [
                "str",
                "float",
                "bool",
                "int",
                "Type[T]",
                "List[int]"
            ],
            "arguments": {
                "id": [
                    "Sequence[int]",
                    "int",
                    "bool",
                    "float"
                ],
                "permission": [
                    "Sequence[int]",
                    "int",
                    "bool",
                    "float"
                ],
                "user_has": [
                    "Sequence[int]",
                    "int",
                    "bool",
                    "float"
                ],
                "group_has": [
                    "Sequence[int]",
                    "int",
                    "bool",
                    "float"
                ],
                "rlc_has": [
                    "Sequence[int]",
                    "int",
                    "bool",
                    "float"
                ],
                "for_user": [
                    "Sequence[int]",
                    "int",
                    "bool",
                    "float"
                ],
                "for_group": [
                    "Sequence[int]",
                    "int",
                    "bool",
                    "float"
                ],
                "for_rlc": [
                    "Sequence[int]",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "CreateFixtures.add_has_permissions": {
            "name": "add_has_permissions",
            "location": 249,
            "return": [
                ""
            ],
            "arguments": {
                "has_permissions": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "Type[T]"
                ]
            }
        },
        "CreateFixtures.add_rlc": {
            "name": "add_rlc",
            "location": 256,
            "return": [
                "int",
                "Optional[str]",
                "datetime.datetime"
            ],
            "arguments": {
                "id": [
                    "str",
                    "bytes"
                ],
                "name": [
                    "str",
                    "bytes"
                ],
                "members": [
                    "str",
                    "Optional[int]",
                    "Sequence[int]",
                    "bool",
                    "Optional[str]"
                ],
                "uni": [
                    "str",
                    "bytes"
                ],
                "umbrella": [
                    "str",
                    "bytes"
                ],
                "notes": [
                    "str",
                    "bytes"
                ]
            }
        },
        "CreateFixtures.add_rlcs": {
            "name": "add_rlcs",
            "location": 276,
            "return": [
                ""
            ],
            "arguments": {
                "rlcs": [
                    "str",
                    "bytes",
                    "esm.models.Manifest",
                    "List[str]"
                ]
            }
        },
        "CreateFixtures.add_group_to_rlc": {
            "name": "add_group_to_rlc",
            "location": 281,
            "return": [
                ""
            ],
            "arguments": {
                "group": [
                    "bool",
                    "bytes",
                    "audiopyle.lib.models.resulFeatureMeta",
                    "dict"
                ],
                "rlc": [
                    "bool",
                    "bytes",
                    "audiopyle.lib.models.resulFeatureMeta",
                    "dict"
                ]
            }
        },
        "CreateFixtures.add_groups_to_rlcs": {
            "name": "add_groups_to_rlcs",
            "location": 291,
            "return": [
                ""
            ],
            "arguments": {
                "pairs": [
                    "int",
                    "str",
                    "List[str]",
                    "bool",
                    "Type"
                ]
            }
        },
        "CreateFixtures.add_tag": {
            "name": "add_tag",
            "location": 296,
            "return": [
                "str"
            ],
            "arguments": {
                "id": [
                    "str",
                    "Dict[str, Any]"
                ],
                "name": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "CreateFixtures.add_tags": {
            "name": "add_tags",
            "location": 308,
            "return": [
                "List[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "tags": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "List[int]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "rlc_app-master/backend/api/tests/groups_test.py": {
        "GroupsTests.setUp": {
            "name": "setUp",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupsTests.test_create_group_success": {
            "name": "test_create_group_success",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rlc_app-master/backend/api/tests/has_permission.py": {
        "HasPermissionTests.setUp": {
            "name": "setUp",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HasPermissionTests.test_create_hasPermission_success_user_user": {
            "name": "test_create_hasPermission_success_user_user",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HasPermissionTests.test_create_hasPermission_success_user_group": {
            "name": "test_create_hasPermission_success_user_group",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HasPermissionTests.test_create_hasPermission_success_group_user": {
            "name": "test_create_hasPermission_success_group_user",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HasPermissionTests.test_create_hasPermission_success_group_group": {
            "name": "test_create_hasPermission_success_group_group",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HasPermissionTests.test_create_hasPermission_error_double_has": {
            "name": "test_create_hasPermission_error_double_has",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HasPermissionTests.test_create_hasPermission_error_double_for": {
            "name": "test_create_hasPermission_error_double_for",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HasPermissionTests.test_create_hasPermission_error_doubled": {
            "name": "test_create_hasPermission_error_doubled",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rlc_app-master/backend/api/tests/permissions_test.py": {
        "PermissionTests.setUp": {
            "name": "setUp",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PermissionTests.test_create_new_permission_success": {
            "name": "test_create_new_permission_success",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PermissionTests.test_create_new_permission_error_double": {
            "name": "test_create_new_permission_error_double",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rlc_app-master/backend/api/tests/regex_test.py": {
        "RegexTests.setUp": {
            "name": "setUp",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RegexTests.test_array": {
            "name": "test_array",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "values": [
                    "float",
                    "str",
                    "Dict[int, Dict[str, Any]]",
                    "List[str]",
                    "Optional[Callable]",
                    "int"
                ],
                "method_to_check": [
                    "dict",
                    "str"
                ]
            }
        },
        "RegexTests.test_is_storage_folder_success": {
            "name": "test_is_storage_folder_success",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RegexTests.test_is_storage_folder_error": {
            "name": "test_is_storage_folder_error",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RegexTests.test_is_phone_number_success": {
            "name": "test_is_phone_number_success",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rlc_app-master/backend/api/tests/rlcs_test.py": {
        "RlcsTest.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RlcsTest.test_list_rlcs_without_authentication": {
            "name": "test_list_rlcs_without_authentication",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rlc_app-master/backend/api/tests/statics.py": {
        "StaticTestMethods.force_authentication": {
            "name": "force_authentication",
            "location": 23,
            "return": [
                "bool",
                "int",
                "str",
                "dict"
            ],
            "arguments": {}
        },
        "StaticTestMethods.force_authentication_with_user": {
            "name": "force_authentication_with_user",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "user": [
                    "zerver.models.UserProfile",
                    "str",
                    "Dict[str, Any]",
                    "django.contrib.auth.models.User"
                ]
            }
        }
    },
    "rlc_app-master/backend/api/tests/storage_test.py": {
        "StorageTest.setUp": {
            "name": "setUp",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "StorageTest.test_generate_download_url": {
            "name": "test_generate_download_url",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rlc_app-master/backend/api/tests/users_test.py": {
        "UsersTests.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersTests.fixtures_has_permissions": {
            "name": "fixtures_has_permissions",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "UsersTests.checkArrays": {
            "name": "checkArrays",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "testRef": [
                    "list",
                    "bool",
                    "List[Tuple[int, int, int]]"
                ],
                "real": [
                    "list",
                    "bool",
                    "List[Tuple[int, int, int]]"
                ],
                "toGet": [
                    "int",
                    "List[bool]",
                    "float",
                    "str",
                    "Dict[str, Any]",
                    "Optional[float]"
                ]
            }
        },
        "UsersTests.test_create_new_user_success": {
            "name": "test_create_new_user_success",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersTests.test_create_new_user_full_success": {
            "name": "test_create_new_user_full_success",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersTests.test_create_new_user_error_no_email": {
            "name": "test_create_new_user_error_no_email",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersTests.test_create_new_user_error_wrong_email": {
            "name": "test_create_new_user_error_wrong_email",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersTests.test_create_new_user_error_no_name": {
            "name": "test_create_new_user_error_no_name",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersTests.test_create_new_user_error_no_password": {
            "name": "test_create_new_user_error_no_password",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersTests.test_create_new_user_error_double_email": {
            "name": "test_create_new_user_error_double_email",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersTests.test_show_all_profiles_error_unauthenticated": {
            "name": "test_show_all_profiles_error_unauthenticated",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersTests.test_create_multiple_users_success": {
            "name": "test_create_multiple_users_success",
            "location": 202,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersTests.test_show_all_profiles_success": {
            "name": "test_show_all_profiles_success",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersTests.test_edit_patch_own_profile_success": {
            "name": "test_edit_patch_own_profile_success",
            "location": 213,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersTests.test_edit_patch_own_profile_success_postal_code": {
            "name": "test_edit_patch_own_profile_success_postal_code",
            "location": 222,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersTests.test_edit_patch_own_profile_error_no_name": {
            "name": "test_edit_patch_own_profile_error_no_name",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersTests.test_edit_patch_own_profile_wrong_email": {
            "name": "test_edit_patch_own_profile_wrong_email",
            "location": 240,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersTests.test_edit_foreign_profile": {
            "name": "test_edit_foreign_profile",
            "location": 249,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersTests.test_get_auth_token_success": {
            "name": "test_get_auth_token_success",
            "location": 262,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersTests.test_get_as_user_permissions": {
            "name": "test_get_as_user_permissions",
            "location": 272,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersTests.test_get_overall_permissions": {
            "name": "test_get_overall_permissions",
            "location": 280,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersTests.test_get_overall_special_permissions": {
            "name": "test_get_overall_special_permissions",
            "location": 291,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersTests.test_has_permission": {
            "name": "test_has_permission",
            "location": 299,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersTests.test_get_users_with_special_permissions": {
            "name": "test_get_users_with_special_permissions",
            "location": 312,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rlc_app-master/backend/api/tests/__init__.py": {},
    "rlc_app-master/backend/api/views/forgot_password.py": {
        "get_client_ip": {
            "name": "get_client_ip",
            "location": 29,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "request": [
                    "Union[dict, list]",
                    "dict"
                ]
            }
        },
        "ForgotPasswordUnauthenticatedViewSet.post": {
            "name": "post",
            "location": 47,
            "return": [
                "dict",
                "List[str]",
                "int",
                "Optional[Dict[str, Any]]",
                "bool",
                "str",
                "Dict[str, str]",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "str"
                ]
            }
        },
        "ResetPasswordViewSet.post": {
            "name": "post",
            "location": 78,
            "return": [
                "dict",
                "List[str]",
                "int",
                "Optional[Dict[str, Any]]",
                "bool",
                "str",
                "Dict[str, str]",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "Optional[int]",
                    "dict"
                ],
                "id": [
                    "str",
                    "Union[int, str]",
                    "int",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "rlc_app-master/backend/api/views/group.py": {
        "GroupViewSet.get_queryset": {
            "name": "get_queryset",
            "location": 43,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupViewSet.get_serializer_class": {
            "name": "get_serializer_class",
            "location": 55,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupViewSet.perform_create": {
            "name": "perform_create",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "serializer": [
                    "str"
                ]
            }
        },
        "GroupViewSet.create": {
            "name": "create",
            "location": 65,
            "return": [
                "Optional[str]",
                "Dict[str, Any]",
                "int",
                "flask.wrappers.Response"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "GroupViewSet.retrieve": {
            "name": "retrieve",
            "location": 79,
            "return": [
                "dict",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "GroupMemberViewSet.post": {
            "name": "post",
            "location": 86,
            "return": [
                "int",
                "Dict[str, Any]",
                "jumeaux.models.Request"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "rlc_app-master/backend/api/views/has_permission.py": {
        "HasPermissionViewSet.update": {
            "name": "update",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "int"
                ]
            }
        },
        "HasPermissionViewSet.destroy": {
            "name": "destroy",
            "location": 39,
            "return": [
                "Union[tonga.models.records.base.BaseRecord, tonga.models.store.store_record.StoreRecord]",
                "dict",
                "float"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "HasPermissionViewSet.create": {
            "name": "create",
            "location": 61,
            "return": [
                "Dict[str, Any]",
                "app.models.dto.LoginResponse",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "HasPermissionStaticsViewSet.get": {
            "name": "get",
            "location": 79,
            "return": [
                "int",
                "bytes",
                "tartare.core.models.Job",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "django.http.HttpResponse",
                    "app.models.dto.LoginResponse"
                ]
            }
        },
        "UserHasPermissionsViewSet.get": {
            "name": "get",
            "location": 94,
            "return": [
                "bool",
                "str",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]",
                "medtagger.database.models.Slice"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "rlc_app-master/backend/api/views/language.py": {},
    "rlc_app-master/backend/api/views/new_user_request.py": {
        "NewUserRequestViewSet.list": {
            "name": "list",
            "location": 34,
            "return": [
                "str",
                "dict",
                "werkzeug.wrappers.Response",
                "bool",
                "\"User\""
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "NewUserRequestAdmitViewSet.post": {
            "name": "post",
            "location": 42,
            "return": [
                "List[Dict[str, Any]]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "rest_framework.requesRequest"
                ]
            }
        }
    },
    "rlc_app-master/backend/api/views/other.py": {
        "SendEmailViewSet.post": {
            "name": "post",
            "location": 41,
            "return": [
                "dict",
                "List[str]",
                "int",
                "Optional[Dict[str, Any]]",
                "bool",
                "str",
                "Dict[str, str]",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "rest_framework.requesRequest"
                ]
            }
        },
        "GetRlcsViewSet.get": {
            "name": "get",
            "location": 55,
            "return": [
                "int",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "rest_framework.requesRequest",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        }
    },
    "rlc_app-master/backend/api/views/permission.py": {
        "PermissionViewSet.retrieve": {
            "name": "retrieve",
            "location": 45,
            "return": [
                "int",
                "Dict[str, str]",
                "List[str]",
                "Optional[bytes]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "PermissionsForGroupViewSet.get": {
            "name": "get",
            "location": 72,
            "return": [
                "int",
                "bytes",
                "tartare.core.models.Job",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest"
                ],
                "pk": [
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest"
                ]
            }
        }
    },
    "rlc_app-master/backend/api/views/rlc.py": {
        "RlcViewSet.perform_create": {
            "name": "perform_create",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "serializer": [
                    "str"
                ]
            }
        }
    },
    "rlc_app-master/backend/api/views/storage.py": {
        "StorageUploadViewSet.get": {
            "name": "get",
            "location": 39,
            "return": [
                "str",
                "Mapping"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "rest_framework.requesRequest",
                    "dict"
                ]
            }
        },
        "StorageUploadViewSet.post": {
            "name": "post",
            "location": 50,
            "return": [
                "bytes",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str"
                ]
            }
        },
        "StorageDownloadViewSet.get": {
            "name": "get",
            "location": 74,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict"
                ]
            }
        }
    },
    "rlc_app-master/backend/api/views/user.py": {
        "UserProfileViewSet.list": {
            "name": "list",
            "location": 49,
            "return": [
                "int",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "Dict[str, Any]",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "UserProfileViewSet.retrieve": {
            "name": "retrieve",
            "location": 67,
            "return": [
                "dict",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ],
                "pk": [
                    "int",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "str",
                    "Optional[django.http.HttpRequest]",
                    "rest_framework.requesRequest",
                    "cmk.gui.http.Request"
                ]
            }
        },
        "UserProfileViewSet.update": {
            "name": "update",
            "location": 88,
            "return": [
                "Dict[str, Any]",
                "List[Dict[str, Any]]",
                "app.models.dto.LoginResponse"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "UserProfileCreatorViewSet.create": {
            "name": "create",
            "location": 126,
            "return": [
                "Dict[str, Any]",
                "app.models.dto.LoginResponse",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "LoginViewSet.create": {
            "name": "create",
            "location": 173,
            "return": [
                "Dict[str, Any]",
                "List[Dict[str, Any]]",
                "app.models.dto.LoginResponse"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "rest_framework.requesRequest"
                ]
            }
        },
        "LoginViewSet.get": {
            "name": "get",
            "location": 201,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "LoginViewSet.get_login_data": {
            "name": "get_login_data",
            "location": 206,
            "return": [
                "IO",
                "int",
                "lark.Token",
                "dict"
            ],
            "arguments": {
                "token": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "LoginViewSet.get_statics": {
            "name": "get_statics",
            "location": 221,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "user": [
                    "users.models.JustfixUser",
                    "zerver.models.UserProfile",
                    "django.contrib.auth.models.User",
                    "bool",
                    "set"
                ]
            }
        },
        "LoginViewSet.check_if_user_active": {
            "name": "check_if_user_active",
            "location": 235,
            "return": [
                ""
            ],
            "arguments": {
                "user_email": [
                    "str",
                    "models.Taxonomy.Id",
                    "Optional[str]"
                ]
            }
        },
        "LogoutViewSet.post": {
            "name": "post",
            "location": 250,
            "return": [
                "dict",
                "List[str]",
                "int",
                "Optional[Dict[str, Any]]",
                "bool",
                "str",
                "Dict[str, str]",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict",
                    "django.http.HttpRequest"
                ]
            }
        },
        "InactiveUsersViewSet.get": {
            "name": "get",
            "location": 256,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]",
                "models.Dashboard",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "InactiveUsersViewSet.post": {
            "name": "post",
            "location": 263,
            "return": [
                "Dict[str, Any]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "rlc_app-master/backend/api/views/user_activation_link.py": {
        "UserActivationLinkViewSet.post": {
            "name": "post",
            "location": 35,
            "return": [
                "dict",
                "int",
                "Dict[str, str]",
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "int",
                    "str",
                    "List[str]"
                ],
                "id": [
                    "str",
                    "authentication.session.models.current_user.CurrentUser",
                    "transfer.models.BadgeID",
                    "int",
                    "bool"
                ]
            }
        },
        "CheckUserActivationLinkViewSet.get": {
            "name": "get",
            "location": 59,
            "return": [
                "int",
                "bytes",
                "bool",
                "Dict[str, Dict[str, str]]",
                "Dict[str, int]",
                "Dict[str, Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "int",
                    "str",
                    "List[str]"
                ],
                "id": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        }
    },
    "rlc_app-master/backend/api/views/__init__.py": {},
    "rlc_app-master/backend/recordmanagement/admin.py": {},
    "rlc_app-master/backend/recordmanagement/apps.py": {},
    "rlc_app-master/backend/recordmanagement/urls.py": {},
    "rlc_app-master/backend/recordmanagement/__init__.py": {},
    "rlc_app-master/backend/recordmanagement/migrations/0001_initial.py": {},
    "rlc_app-master/backend/recordmanagement/migrations/0002_auto_20190206_1302.py": {},
    "rlc_app-master/backend/recordmanagement/migrations/0003_auto_20190411_1633.py": {},
    "rlc_app-master/backend/recordmanagement/migrations/0004_auto_20190414_1953.py": {},
    "rlc_app-master/backend/recordmanagement/migrations/0005_client_from_rlc.py": {},
    "rlc_app-master/backend/recordmanagement/migrations/__init__.py": {},
    "rlc_app-master/backend/recordmanagement/models/client.py": {
        "Client.__str__": {
            "name": "__str__",
            "location": 35,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rlc_app-master/backend/recordmanagement/models/origin_country.py": {
        "OriginCountry.__str__": {
            "name": "__str__",
            "location": 30,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rlc_app-master/backend/recordmanagement/models/record.py": {
        "RecordQuerySet.get_full_access_records": {
            "name": "get_full_access_records",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "zerver.models.UserProfile",
                    "asgard.models.accounAccount",
                    "asgard.models.user.User",
                    "zerver.models.Stream",
                    "zerver.models.Recipient",
                    "str"
                ]
            }
        },
        "RecordQuerySet.get_no_access_records": {
            "name": "get_no_access_records",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "zerver.models.UserProfile",
                    "Optional[zerver.models.UserProfile]",
                    "zerver.models.Stream",
                    "django.contrib.auth.models.User",
                    "str",
                    "List[zerver.models.UserProfile]"
                ]
            }
        },
        "RecordQuerySet.filter_by_rlc": {
            "name": "filter_by_rlc",
            "location": 40,
            "return": [
                "int",
                "List[zerver.models.DefaultStreamGroup]",
                "Dict[str, Tuple[int, int]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "rlc": [
                    "float",
                    "Callable[[None], bool]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "Record.__str__": {
            "name": "__str__",
            "location": 98,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Record.user_has_permission": {
            "name": "user_has_permission",
            "location": 101,
            "return": [
                "zerver.models.Realm",
                "daylighdb.models.Photo",
                "daylighdb.models.User"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "zerver.models.UserProfile",
                    "django.contrib.auth.models.User",
                    "asgard.models.accounAccount",
                    "users.models.JustfixUser",
                    "str",
                    "app.models.user.User"
                ]
            }
        },
        "Record.get_notification_emails": {
            "name": "get_notification_emails",
            "location": 112,
            "return": [
                "str",
                "Union[str, int]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rlc_app-master/backend/recordmanagement/models/record_document.py": {
        "RecordDocument.__str__": {
            "name": "__str__",
            "location": 37,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecordDocument.get_filekey": {
            "name": "get_filekey",
            "location": 40,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rlc_app-master/backend/recordmanagement/models/record_document_tag.py": {
        "RecordDocumentTag.__str__": {
            "name": "__str__",
            "location": 24,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rlc_app-master/backend/recordmanagement/models/record_message.py": {
        "RecordMessage.__str__": {
            "name": "__str__",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rlc_app-master/backend/recordmanagement/models/record_permission.py": {
        "RecordPermission.__str__": {
            "name": "__str__",
            "location": 41,
            "return": [
                "str",
                "zerver.models.Realm",
                "Dict[str, Any]",
                "Mapping"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rlc_app-master/backend/recordmanagement/models/record_tag.py": {
        "RecordTag.__str__": {
            "name": "__str__",
            "location": 23,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rlc_app-master/backend/recordmanagement/models/__init__.py": {},
    "rlc_app-master/backend/recordmanagement/serializers/client.py": {},
    "rlc_app-master/backend/recordmanagement/serializers/origin_country.py": {},
    "rlc_app-master/backend/recordmanagement/serializers/record.py": {},
    "rlc_app-master/backend/recordmanagement/serializers/record_document.py": {},
    "rlc_app-master/backend/recordmanagement/serializers/record_document_tag.py": {},
    "rlc_app-master/backend/recordmanagement/serializers/record_message.py": {},
    "rlc_app-master/backend/recordmanagement/serializers/record_permission.py": {},
    "rlc_app-master/backend/recordmanagement/serializers/record_tag.py": {},
    "rlc_app-master/backend/recordmanagement/serializers/__init__.py": {},
    "rlc_app-master/backend/recordmanagement/tests/clients_test.py": {
        "ClientsTests.setUp": {
            "name": "setUp",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientsTests.test_create_client_success": {
            "name": "test_create_client_success",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientsTests.test_create_client_error_unauthenticated": {
            "name": "test_create_client_error_unauthenticated",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientsTests.test_create_client_error_double_name": {
            "name": "test_create_client_error_double_name",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientsTests.test_create_client_error_no_name": {
            "name": "test_create_client_error_no_name",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientsTests.test_create_client_error_empty_name": {
            "name": "test_create_client_error_empty_name",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientsTests.test_create_client_error_wrong_phone_number_too_short": {
            "name": "test_create_client_error_wrong_phone_number_too_short",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientsTests.test_create_client_error_wrong_phone_number_too_long": {
            "name": "test_create_client_error_wrong_phone_number_too_long",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientsTests.test_create_client_error_wrong_birthday_format": {
            "name": "test_create_client_error_wrong_birthday_format",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientsTests.test_create_client_error_wrong_birthday_date": {
            "name": "test_create_client_error_wrong_birthday_date",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientsTests.test_create_client_error_wrong_country": {
            "name": "test_create_client_error_wrong_country",
            "location": 204,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientsTests.test_show_all_clients_unauthenticated": {
            "name": "test_show_all_clients_unauthenticated",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientsTests.test_create_multiple_clients_success": {
            "name": "test_create_multiple_clients_success",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ClientsTests.test_edit_put_succcess": {
            "name": "test_edit_put_succcess",
            "location": 230,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rlc_app-master/backend/recordmanagement/tests/origin_countries_test.py": {
        "OriginCountriesTests.setUp": {
            "name": "setUp",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OriginCountriesTests.test_create_originCountry_success": {
            "name": "test_create_originCountry_success",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OriginCountriesTests.test_create_originCountry_error_duplicate_name": {
            "name": "test_create_originCountry_error_duplicate_name",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OriginCountriesTests.test_create_originCountry_error_no_state": {
            "name": "test_create_originCountry_error_no_state",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OriginCountriesTests.test_create_originCountry_error_not_existing_state": {
            "name": "test_create_originCountry_error_not_existing_state",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OriginCountriesTests.test_create_originCountry_error_state_too_long": {
            "name": "test_create_originCountry_error_state_too_long",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OriginCountriesTests.test_create_unauthenticated": {
            "name": "test_create_unauthenticated",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OriginCountriesTests.test_create_multiple_originCountries": {
            "name": "test_create_multiple_originCountries",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OriginCountriesTests.test_edit_put_originCountry_success": {
            "name": "test_edit_put_originCountry_success",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OriginCountriesTests.test_edit_put_originCountry_error_wrong_state": {
            "name": "test_edit_put_originCountry_error_wrong_state",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OriginCountriesTests.test_edit_put_originCountry_error_state_missing": {
            "name": "test_edit_put_originCountry_error_state_missing",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OriginCountriesTests.test_edit_patch_originCountry_success": {
            "name": "test_edit_patch_originCountry_success",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OriginCountriesTests.test_edit_patch_originCountry_error_wrong_state": {
            "name": "test_edit_patch_originCountry_error_wrong_state",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OriginCountriesTests.test_get_all_countries_success": {
            "name": "test_get_all_countries_success",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OriginCountriesTests.test_get_all_countries_error_unauthenticated": {
            "name": "test_get_all_countries_error_unauthenticated",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rlc_app-master/backend/recordmanagement/tests/records_test.py": {
        "RecordTests.setUp": {
            "name": "setUp",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RecordTests.create_samples": {
            "name": "create_samples",
            "location": 36,
            "return": [
                "str",
                "Callable",
                "Optional[List[str]]",
                "django.tesTestCase"
            ],
            "arguments": {}
        },
        "RecordTests.create_first_record": {
            "name": "create_first_record",
            "location": 56,
            "return": [
                "django.db.models.Model",
                "abilian.core.models.subjects.User",
                "bob_emploi.frontend.api.user_pb2.EmailSent",
                "int",
                "zam_repondeur.models.Lecture"
            ],
            "arguments": {
                "self": []
            }
        },
        "RecordTests.test_create_record_new_client_success": {
            "name": "test_create_record_new_client_success",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RecordTests.test_list_just_own_rlc_records": {
            "name": "test_list_just_own_rlc_records",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RecordTests.test_list_no_record_from_other_rlc": {
            "name": "test_list_no_record_from_other_rlc",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RecordTests.test_retrieve_record_success": {
            "name": "test_retrieve_record_success",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RecordTests.test_retrieve_record_wrong_rlc_error": {
            "name": "test_retrieve_record_wrong_rlc_error",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RecordTests.test_user_has_permission": {
            "name": "test_user_has_permission",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RecordTests.test_user_has_permission_record_permissions": {
            "name": "test_user_has_permission_record_permissions",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rlc_app-master/backend/recordmanagement/tests/__init__.py": {},
    "rlc_app-master/backend/recordmanagement/views/client.py": {
        "ClientsViewSet.perform_create": {
            "name": "perform_create",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "serializer": [
                    "str"
                ]
            }
        },
        "GetClientsFromBirthday.post": {
            "name": "post",
            "location": 34,
            "return": [
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "rest_framework.requesRequest"
                ]
            }
        }
    },
    "rlc_app-master/backend/recordmanagement/views/origin_country.py": {},
    "rlc_app-master/backend/recordmanagement/views/record.py": {
        "RecordsListViewSet.list": {
            "name": "list",
            "location": 37,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        },
        "RecordsListViewSet.create": {
            "name": "create",
            "location": 84,
            "return": [
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "RecordsListViewSet.retrieve": {
            "name": "retrieve",
            "location": 101,
            "return": [
                "dict",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "zam_repondeur.models.Team",
                    "str",
                    "dict",
                    "rest_framework.requesRequest"
                ],
                "pk": [
                    "grouper.models.user.User",
                    "grouper.models.base.session.Session",
                    "rest_framework.requesRequest",
                    "django.http.HttpRequest"
                ]
            }
        },
        "RecordViewSet.post": {
            "name": "post",
            "location": 118,
            "return": [
                "dict",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile",
                    "str"
                ]
            }
        },
        "RecordViewSet.get": {
            "name": "get",
            "location": 162,
            "return": [
                "Optional[str]",
                "int",
                "django.http.HttpResponse",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "str",
                    "django.http.HttpRequest",
                    "Mapping[str, str]"
                ],
                "id": [
                    "authentication.session.models.current_user.CurrentUser",
                    "zerver.models.Attachment",
                    "datetime.datetime"
                ]
            }
        },
        "RecordViewSet.patch": {
            "name": "patch",
            "location": 199,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "str",
                "Dict[str, dict]",
                "Tuple[str, Optional[int]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "Optional[int]",
                    "zerver.models.UserProfile",
                    "django.http.HttpRequest"
                ],
                "id": [
                    "authentication.session.models.current_user.CurrentUser",
                    "zerver.models.Attachment",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "RecordViewSet.delete": {
            "name": "delete",
            "location": 259,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "int",
                    "List[str]",
                    "str"
                ],
                "id": [
                    "bool",
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "rlc_app-master/backend/recordmanagement/views/record_document.py": {
        "RecordDocumentViewSet.post": {
            "name": "post",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest"
                ]
            }
        },
        "RecordDocumentUploadViewSet.get": {
            "name": "get",
            "location": 42,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "django.http.HttpRequest"
                ],
                "id": [
                    "str",
                    "Dict[str, Any]",
                    "datetime.datetime",
                    "models.Book",
                    "int",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "RecordDocumentUploadViewSet.post": {
            "name": "post",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest"
                ]
            }
        },
        "RecordDocumentByRecordViewSet.get": {
            "name": "get",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "int",
                    "str",
                    "List[str]"
                ],
                "id": [
                    "bool",
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "RecordDocumentByRecordViewSet.post": {
            "name": "post",
            "location": 70,
            "return": [
                "bool",
                "dict",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Callable",
                    "Dict[str, taskiapplication.models.task.Task]",
                    "Dict[str, Any]",
                    "Iterable[Callable]"
                ],
                "id": [
                    "authentication.session.models.current_user.CurrentUser"
                ]
            }
        },
        "RecordDocumentDownloadAllViewSet.get": {
            "name": "get",
            "location": 104,
            "return": [
                "int",
                "Dict[str, str]",
                "str",
                "bool",
                "pathpy.core.network.Network"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "str",
                    "Optional[int]",
                    "bytes",
                    "Optional[str]"
                ],
                "id": [
                    "authentication.session.models.current_user.CurrentUser",
                    "zerver.models.Attachment",
                    "datetime.datetime"
                ]
            }
        }
    },
    "rlc_app-master/backend/recordmanagement/views/record_document_tag.py": {
        "RecordDocumentTagByDocumentViewSet.post": {
            "name": "post",
            "location": 33,
            "return": [
                "List[Dict[str, Any]]",
                "List[Callable]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "bool",
                    "dict"
                ],
                "id": [
                    "str",
                    "zerver.models.UserProfile",
                    "int",
                    "excars.models.user.User",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "rlc_app-master/backend/recordmanagement/views/record_message.py": {
        "RecordMessageByRecordViewSet.post": {
            "name": "post",
            "location": 34,
            "return": [
                "dict",
                "List[str]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "int",
                    "zerver.models.UserProfile",
                    "float"
                ],
                "id": [
                    "authentication.session.models.current_user.CurrentUser",
                    "Dict[str, Any]",
                    "zerver.models.Attachment",
                    "Optional[str]",
                    "List['Product']",
                    "bytes"
                ]
            }
        },
        "RecordMessageByRecordViewSet.get": {
            "name": "get",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bool",
                    "int",
                    "str",
                    "List[str]"
                ],
                "id": [
                    "bool",
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "rlc_app-master/backend/recordmanagement/views/record_permission.py": {
        "RecordPermissionRequestViewSet.post": {
            "name": "post",
            "location": 36,
            "return": [
                "List[Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict",
                    "contests.models.User",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "zerver.models.UserProfile"
                ],
                "id": [
                    "authentication.session.models.current_user.CurrentUser",
                    "Dict[str, Any]",
                    "zerver.models.Attachment",
                    "Optional[str]",
                    "List['Product']",
                    "bytes"
                ]
            }
        },
        "RecordPermissionAdmitViewSet.get": {
            "name": "get",
            "location": 58,
            "return": [
                "Optional[str]",
                "Dict[str, Any]",
                "int",
                "bool",
                "List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "RecordPermissionAdmitViewSet.post": {
            "name": "post",
            "location": 72,
            "return": [
                "List[Dict[str, Any]]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "rlc_app-master/backend/recordmanagement/views/record_tag.py": {},
    "rlc_app-master/backend/recordmanagement/views/statics.py": {
        "StaticViewSet.get": {
            "name": "get",
            "location": 25,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        }
    },
    "rlc_app-master/backend/recordmanagement/views/__init__.py": {},
    "rlc_app-master/backend/shared/storage_generator.py": {
        "generate_presigned_post": {
            "name": "generate_presigned_post",
            "location": 31,
            "return": [
                "Mapping[str, Any]",
                "bool",
                "float"
            ],
            "arguments": {
                "file_name": [
                    "Optional[str]",
                    "str",
                    "IO[str]"
                ],
                "file_type": [
                    "str",
                    "Optional[str]"
                ],
                "file_dir": [
                    "str"
                ]
            }
        },
        "generate_presigned_url": {
            "name": "generate_presigned_url",
            "location": 65,
            "return": [
                "bytes",
                "str",
                "django.http.HttpRequest",
                "Iterable",
                "Callable"
            ],
            "arguments": {
                "filekey": [
                    "str"
                ]
            }
        },
        "check_file_and_get_information": {
            "name": "check_file_and_get_information",
            "location": 90,
            "return": [
                "str",
                "Mapping",
                "bool",
                "Sequence[Sequence[Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "file_dir": [
                    "str",
                    "Callable[[str], None]"
                ],
                "filekey": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "download_file": {
            "name": "download_file",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "source_file": [
                    "str"
                ],
                "dest_file": [
                    "str"
                ]
            }
        },
        "zip_files_and_create_response": {
            "name": "zip_files_and_create_response",
            "location": 124,
            "return": [
                "str",
                "Union[int, float, complex]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "file_names": [
                    "str",
                    "int"
                ],
                "zip_file_name": [
                    "bool",
                    "str"
                ]
            }
        },
        "CachedS3Boto3Storage.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CachedS3Boto3Storage.save": {
            "name": "save",
            "location": 151,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Callable[[str], bool]",
                    "Callable[[List], bool]",
                    "Dict[str, Any]",
                    "Callable"
                ],
                "content": [
                    "str",
                    "Callable[[str], bool]",
                    "Callable[[List], bool]",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        }
    },
    "rlc_app-master/backend/shared/tests/storage_folder_test.py": {
        "StorageFolderTests.setUp": {
            "name": "setUp",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "rlc_app-master/backend/shared/tests/__init__.py": {},
    "rlc_app-master/backend/static/date_utils.py": {
        "parse_date": {
            "name": "parse_date",
            "location": 20,
            "return": [
                "str",
                "datetime.datetime",
                "datetime.date"
            ],
            "arguments": {
                "date_str": [
                    "str"
                ]
            }
        }
    },
    "rlc_app-master/backend/static/emails.py": {
        "EmailSender.send_email_notification": {
            "name": "send_email_notification",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "email_addresses": [
                    "str",
                    "bool"
                ],
                "subject": [
                    "str",
                    "bool"
                ],
                "text": [
                    "str",
                    "bool"
                ]
            }
        },
        "EmailSender.send_html_email": {
            "name": "send_html_email",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "email_addresses": [
                    "str",
                    "bytes",
                    "List[Dict[str, Any]]"
                ],
                "subject": [
                    "str",
                    "bytes",
                    "List[Dict[str, Any]]"
                ],
                "html_content": [
                    "str",
                    "Tuple[str, str]"
                ],
                "text_alternative": [
                    "str",
                    "bytes",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "EmailSender.send_user_activation_email": {
            "name": "send_user_activation_email",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "user": [
                    "str"
                ],
                "link": [
                    "str",
                    "bytes"
                ]
            }
        },
        "EmailSender.send_record_new_message_notification_email": {
            "name": "send_record_new_message_notification_email",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "record": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "EmailSender.test_send": {
            "name": "test_send",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "email": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ]
            }
        }
    },
    "rlc_app-master/backend/static/env_getter.py": {
        "get_website_base_url": {
            "name": "get_website_base_url",
            "location": 22,
            "return": [
                "bool",
                "str",
                "list",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "get_env_variable": {
            "name": "get_env_variable",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "variable_name": [
                    "str"
                ]
            }
        }
    },
    "rlc_app-master/backend/static/error_codes.py": {},
    "rlc_app-master/backend/static/frontend_links.py": {
        "FrontendLinks.get_record_link": {
            "name": "get_record_link",
            "location": 23,
            "return": [
                "str",
                "List[bytes]",
                "int"
            ],
            "arguments": {
                "record": [
                    "str"
                ]
            }
        },
        "FrontendLinks.get_user_activation_link": {
            "name": "get_user_activation_link",
            "location": 27,
            "return": [
                "bool",
                "List[bytes]",
                "List[str]"
            ],
            "arguments": {
                "activation_link": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "rlc_app-master/backend/static/permissions.py": {
        "get_all_permissions": {
            "name": "get_all_permissions",
            "location": 33,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {}
        }
    },
    "rlc_app-master/backend/static/regex_validators.py": {
        "is_storage_folder_of_record": {
            "name": "is_storage_folder_of_record",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "dir": [
                    "str"
                ]
            }
        },
        "is_phone_number": {
            "name": "is_phone_number",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "phone_number": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "rlc_app-master/backend/static/storage_folders.py": {
        "get_storage_folder_record_document": {
            "name": "get_storage_folder_record_document",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "rlc_id": [
                    "str",
                    "int"
                ],
                "record_id": [
                    "str",
                    "int"
                ]
            }
        },
        "user_has_permission": {
            "name": "user_has_permission",
            "location": 27,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "file_dir": [
                    "str",
                    "Optional[str]"
                ],
                "user": [
                    "str",
                    "Optional[bytes]"
                ]
            }
        }
    },
    "rlc_app-master/backend/static/string_generator.py": {
        "generate_random_string": {
            "name": "generate_random_string",
            "location": 20,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "length": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "rlc_app-master/backend/static/__init__.py": {}
}
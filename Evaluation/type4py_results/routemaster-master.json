{
    "routemaster-master/dev.py": {
        "app_from_config": {
            "name": "app_from_config",
            "location": 13,
            "return": [
                "dict",
                "_vendor.traitlets.config.Config",
                "Optional[str]",
                "Dict[str, Any]",
                "str",
                "Optional[dict]"
            ],
            "arguments": {
                "config_path": [
                    "bool",
                    "str",
                    "List[str]",
                    "BinaryIO",
                    "dict"
                ]
            }
        },
        "app_from_config.InteractiveApp.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "app_from_config.InteractiveApp.session": {
            "name": "session",
            "location": 38,
            "return": [
                "dict",
                "Exception",
                "Dict[str, Any]",
                "str",
                "Dict[str, Union[str, Set]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "routemaster-master/setup.py": {},
    "routemaster-master/version.py": {
        "find_git_root": {
            "name": "find_git_root",
            "location": 21,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "test": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "get_version": {
            "name": "get_version",
            "location": 30,
            "return": [
                "str",
                "Tuple[str]",
                "dict",
                "Exception"
            ],
            "arguments": {}
        }
    },
    "routemaster-master/plugins/conftest.py": {},
    "routemaster-master/plugins/routemaster-prometheus/setup.py": {},
    "routemaster-master/plugins/routemaster-prometheus/version.py": {
        "find_git_root": {
            "name": "find_git_root",
            "location": 21,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "test": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "get_version": {
            "name": "get_version",
            "location": 30,
            "return": [
                "str",
                "Tuple[str]",
                "dict",
                "Exception"
            ],
            "arguments": {}
        }
    },
    "routemaster-master/plugins/routemaster-prometheus/routemaster_prometheus/__init__.py": {
        "_clear_directory": {
            "name": "_clear_directory",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "PrometheusLogger.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PrometheusLogger.init_flask": {
            "name": "init_flask",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "flask_app": [
                    "Optional[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "PrometheusLogger.process_cron": {
            "name": "process_cron",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_machine": [
                    "bool",
                    "str",
                    "bytes",
                    "Tuple[Sequence]"
                ],
                "state": [
                    "bool",
                    "str",
                    "bytes",
                    "Tuple[Sequence]"
                ],
                "fn_name": [
                    "bool",
                    "str",
                    "bytes",
                    "Tuple[Sequence]"
                ]
            }
        },
        "PrometheusLogger.process_webhook": {
            "name": "process_webhook",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_machine": [
                    "int",
                    "Callable[[List], List[str]]",
                    "Sequence[Tuple[str, int]]"
                ],
                "state": [
                    "int",
                    "Callable[[List], List[str]]",
                    "Sequence[Tuple[str, int]]"
                ]
            }
        },
        "PrometheusLogger.process_feed": {
            "name": "process_feed",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_machine": [
                    "bool",
                    "int"
                ],
                "state": [
                    "bool",
                    "int"
                ],
                "feed_url": [
                    "bool",
                    "int"
                ]
            }
        },
        "PrometheusLogger.feed_response": {
            "name": "feed_response",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_machine": [
                    "Optional[int]",
                    "str",
                    "int",
                    "Optional[float]"
                ],
                "state": [
                    "Optional[int]",
                    "str",
                    "int",
                    "Optional[float]"
                ],
                "feed_url": [
                    "Optional[int]",
                    "str",
                    "int",
                    "Optional[float]"
                ],
                "response": [
                    "Optional[int]",
                    "str",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "PrometheusLogger.webhook_response": {
            "name": "webhook_response",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_machine": [
                    "Optional[dict]",
                    "Optional[str]",
                    "str"
                ],
                "state": [
                    "Optional[dict]",
                    "Optional[str]",
                    "str"
                ],
                "response": [
                    "Optional[dict]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "PrometheusLogger.process_request_started": {
            "name": "process_request_started",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "int",
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "PrometheusLogger.process_request_finished": {
            "name": "process_request_finished",
            "location": 158,
            "return": [
                "Iterable[Type]",
                "str"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "str",
                    "Type",
                    "Optional[str]",
                    "int",
                    "Optional[bool]"
                ]
            }
        },
        "PrometheusLogger.init_flask.get_metrics": {
            "name": "get_metrics",
            "location": 93,
            "return": [
                "int",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {}
        }
    },
    "routemaster-master/plugins/routemaster-sentry/setup.py": {},
    "routemaster-master/plugins/routemaster-sentry/version.py": {
        "find_git_root": {
            "name": "find_git_root",
            "location": 21,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "test": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "get_version": {
            "name": "get_version",
            "location": 30,
            "return": [
                "str",
                "Tuple[str]",
                "dict",
                "Exception"
            ],
            "arguments": {}
        }
    },
    "routemaster-master/plugins/routemaster-sentry/routemaster_sentry/__init__.py": {
        "SentryLogger.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SentryLogger.init_flask": {
            "name": "init_flask",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "flask_app": [
                    "dict",
                    "flask.Flask"
                ]
            }
        },
        "SentryLogger.process_cron": {
            "name": "process_cron",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_machine": [
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "state": [
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "fn_name": [
                    "bool",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "SentryLogger.process_webhook": {
            "name": "process_webhook",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_machine": [
                    "int",
                    "Callable[[List], List[str]]",
                    "Sequence[Tuple[str, int]]"
                ],
                "state": [
                    "int",
                    "Callable[[List], List[str]]",
                    "Sequence[Tuple[str, int]]"
                ]
            }
        },
        "SentryLogger.process_feed": {
            "name": "process_feed",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_machine": [
                    "bool",
                    "int"
                ],
                "state": [
                    "bool",
                    "int"
                ],
                "feed_url": [
                    "bool",
                    "int"
                ]
            }
        },
        "SentryLogger.exception": {
            "name": "exception",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "routemaster-master/plugins/routemaster-statsd/setup.py": {},
    "routemaster-master/plugins/routemaster-statsd/version.py": {
        "find_git_root": {
            "name": "find_git_root",
            "location": 21,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "test": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "get_version": {
            "name": "get_version",
            "location": 30,
            "return": [
                "str",
                "Tuple[str]",
                "dict",
                "Exception"
            ],
            "arguments": {}
        }
    },
    "routemaster-master/plugins/routemaster-statsd/routemaster_statsd/__init__.py": {
        "StatsDLogger.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "StatsDLogger.init_flask": {
            "name": "init_flask",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "flask_app": [
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "StatsDLogger.process_cron": {
            "name": "process_cron",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_machine": [
                    "bool",
                    "int",
                    "Type",
                    "Optional[AbstractSet[str]]",
                    "Dict[str, Tuple[int, int]]",
                    "Union[None, str, List[str], Dict[str, str]]"
                ],
                "state": [
                    "bool",
                    "int",
                    "Type",
                    "Optional[AbstractSet[str]]",
                    "Dict[str, Tuple[int, int]]",
                    "Union[None, str, List[str], Dict[str, str]]"
                ],
                "fn_name": [
                    "bool",
                    "int",
                    "Type",
                    "Optional[AbstractSet[str]]",
                    "Dict[str, Tuple[int, int]]",
                    "Union[None, str, List[str], Dict[str, str]]"
                ]
            }
        },
        "StatsDLogger.process_webhook": {
            "name": "process_webhook",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_machine": [
                    "int",
                    "Callable[[List], List[str]]",
                    "Sequence[Tuple[str, int]]"
                ],
                "state": [
                    "int",
                    "Callable[[List], List[str]]",
                    "Sequence[Tuple[str, int]]"
                ]
            }
        },
        "StatsDLogger.process_feed": {
            "name": "process_feed",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_machine": [
                    "bool",
                    "int"
                ],
                "state": [
                    "bool",
                    "int"
                ],
                "feed_url": [
                    "bool",
                    "int"
                ]
            }
        },
        "StatsDLogger.feed_response": {
            "name": "feed_response",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_machine": [
                    "str",
                    "Dict[str, str]",
                    "Dict[int, List[Any]]",
                    "Optional[str]",
                    "dict"
                ],
                "state": [
                    "str",
                    "Dict[str, str]",
                    "Dict[int, List[Any]]",
                    "Optional[str]",
                    "dict"
                ],
                "feed_url": [
                    "str",
                    "Dict[str, str]",
                    "Dict[int, List[Any]]",
                    "Optional[str]",
                    "dict"
                ],
                "response": [
                    "str",
                    "Dict[str, str]",
                    "Dict[int, List[Any]]",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "StatsDLogger.webhook_response": {
            "name": "webhook_response",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_machine": [
                    "dict",
                    "str",
                    "Optional[T]"
                ],
                "state": [
                    "dict",
                    "str",
                    "Optional[T]"
                ],
                "response": [
                    "dict",
                    "str",
                    "Optional[T]"
                ]
            }
        },
        "StatsDLogger.process_request_started": {
            "name": "process_request_started",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "int",
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "StatsDLogger.process_request_finished": {
            "name": "process_request_finished",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "int",
                    "bytes",
                    "tuple",
                    "Sequence[str]",
                    "Optional[str]",
                    "bool",
                    "Optional[Callable]"
                ]
            }
        }
    },
    "routemaster-master/plugins/tests/test_logging_plugins.py": {
        "test_logger": {
            "name": "test_logger",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "int",
                    "str",
                    "flask.Flask"
                ],
                "klass": [
                    "int",
                    "str",
                    "flask.Flask"
                ],
                "kwargs": []
            }
        },
        "test_prometheus_logger_wipes_directory_on_startup": {
            "name": "test_prometheus_logger_wipes_directory_on_startup",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "test_prometheus_logger_metrics": {
            "name": "test_prometheus_logger_metrics",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "routemaster_serve_subprocess": [
                    "bool"
                ]
            }
        },
        "test_prometheus_logger_ignores_metrics_path": {
            "name": "test_prometheus_logger_ignores_metrics_path",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "routemaster_serve_subprocess": [
                    "int",
                    "pathlib.Path",
                    "Dict[str, Sequence[Any]]"
                ]
            }
        },
        "test_prometheus_logger_validates_metrics_path": {
            "name": "test_prometheus_logger_validates_metrics_path",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "app": []
            }
        },
        "test_logger.root": {
            "name": "root",
            "location": 50,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "routemaster-master/routemaster/app.py": {
        "App.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "sphinx.config.Config",
                    "model.Config",
                    "virgene.config.Config",
                    "config.Config"
                ]
            }
        },
        "App.initialise": {
            "name": "initialise",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "App.session": {
            "name": "session",
            "location": 59,
            "return": [
                "dict",
                "Exception",
                "str",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.set_rollback": {
            "name": "set_rollback",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "App.new_session": {
            "name": "new_session",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "App.get_webhook_runner": {
            "name": "get_webhook_runner",
            "location": 102,
            "return": [
                "str",
                "bool",
                "Union[int, List]"
            ],
            "arguments": {
                "self": [],
                "state_machine": [
                    "str",
                    "Sequence[str]",
                    "List[db.setup.Category]",
                    "FrozenSet[str]",
                    "Callable"
                ]
            }
        }
    },
    "routemaster-master/routemaster/cli.py": {
        "main": {
            "name": "main",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "Optional[str]",
                    "click.Context"
                ],
                "config_files": [
                    "str",
                    "TextIO",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "validate": {
            "name": "validate",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": []
            }
        },
        "serve": {
            "name": "serve",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "click.Context",
                    "Callable",
                    "click.core.Context"
                ],
                "bind": [
                    "click.Context",
                    "bool"
                ],
                "debug": [
                    "click.Context",
                    "bool"
                ],
                "workers": [
                    "click.Context",
                    "bool"
                ]
            }
        },
        "_validate_config": {
            "name": "_validate_config",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "routemaster.app.App",
                    "flaskapp.App",
                    "app.App"
                ]
            }
        },
        "serve.post_fork": {
            "name": "post_fork",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "routemaster-master/routemaster/conftest.py": {
        "get_test_app": {
            "name": "get_test_app",
            "location": 258,
            "return": [],
            "arguments": {}
        },
        "client": {
            "name": "client",
            "location": 273,
            "return": [],
            "arguments": {
                "custom_app": []
            }
        },
        "app": {
            "name": "app",
            "location": 282,
            "return": [],
            "arguments": {}
        },
        "custom_app": {
            "name": "custom_app",
            "location": 288,
            "return": [],
            "arguments": {}
        },
        "app_env": {
            "name": "app_env",
            "location": 294,
            "return": [],
            "arguments": {}
        },
        "database_creation": {
            "name": "database_creation",
            "location": 310,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "database_clear": {
            "name": "database_clear",
            "location": 318,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "create_label": {
            "name": "create_label",
            "location": 331,
            "return": [],
            "arguments": {
                "app": [],
                "mock_test_feed": []
            }
        },
        "delete_label": {
            "name": "delete_label",
            "location": 351,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "create_deleted_label": {
            "name": "create_deleted_label",
            "location": 367,
            "return": [],
            "arguments": {
                "create_label": [],
                "delete_label": []
            }
        },
        "mock_webhook": {
            "name": "mock_webhook",
            "location": 381,
            "return": [],
            "arguments": {}
        },
        "mock_test_feed": {
            "name": "mock_test_feed",
            "location": 395,
            "return": [],
            "arguments": {}
        },
        "assert_history": {
            "name": "assert_history",
            "location": 417,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "set_metadata": {
            "name": "set_metadata",
            "location": 435,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "make_context": {
            "name": "make_context",
            "location": 452,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "version": {
            "name": "version",
            "location": 485,
            "return": [],
            "arguments": {}
        },
        "current_state": {
            "name": "current_state",
            "location": 494,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "unused_tcp_port": {
            "name": "unused_tcp_port",
            "location": 510,
            "return": [],
            "arguments": {}
        },
        "routemaster_serve_subprocess": {
            "name": "routemaster_serve_subprocess",
            "location": 518,
            "return": [],
            "arguments": {
                "unused_tcp_port": []
            }
        },
        "TestApp.__init__": {
            "name": "__init__",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "TestApp.session": {
            "name": "session",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "create_label._create": {
            "name": "_create",
            "location": 334,
            "return": [],
            "arguments": {
                "name": [],
                "state_machine_name": [],
                "metadata": []
            }
        },
        "delete_label._delete": {
            "name": "_delete",
            "location": 356,
            "return": [],
            "arguments": {
                "name": [],
                "state_machine_name": []
            }
        },
        "create_deleted_label._create_and_delete": {
            "name": "_create_and_delete",
            "location": 372,
            "return": [],
            "arguments": {
                "name": [],
                "state_machine_name": []
            }
        },
        "mock_webhook._mock": {
            "name": "_mock",
            "location": 384,
            "return": [],
            "arguments": {
                "result": []
            }
        },
        "mock_test_feed._mock": {
            "name": "_mock",
            "location": 398,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "assert_history._assert": {
            "name": "_assert",
            "location": 419,
            "return": [],
            "arguments": {
                "entries": []
            }
        },
        "set_metadata._inner": {
            "name": "_inner",
            "location": 437,
            "return": [],
            "arguments": {
                "label": [],
                "update": []
            }
        },
        "make_context._inner": {
            "name": "_inner",
            "location": 454,
            "return": [],
            "arguments": {}
        },
        "current_state._inner": {
            "name": "_inner",
            "location": 496,
            "return": [],
            "arguments": {
                "label": []
            }
        },
        "routemaster_serve_subprocess._inner": {
            "name": "_inner",
            "location": 526,
            "return": [],
            "arguments": {}
        },
        "make_context._inner.feed_logging_context": {
            "name": "feed_logging_context",
            "location": 460,
            "return": [],
            "arguments": {
                "feed_url": []
            }
        }
    },
    "routemaster-master/routemaster/context.py": {
        "Context.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Context.lookup": {
            "name": "lookup",
            "location": 36,
            "return": [
                "bytearray",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Sequence[str]",
                    "str"
                ]
            }
        },
        "Context._lookup_metadata": {
            "name": "_lookup_metadata",
            "location": 51,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Context._lookup_feed_data": {
            "name": "_lookup_feed_data",
            "location": 54,
            "return": [
                "str",
                "tuple",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Sequence[str]",
                    "str"
                ]
            }
        },
        "Context._lookup_history": {
            "name": "_lookup_history",
            "location": 58,
            "return": [
                "Callable",
                "int",
                "dict",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Sequence[str]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Context.property_handler": {
            "name": "property_handler",
            "location": 68,
            "return": [
                "Dict[str, int]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "property_name": [
                    "str",
                    "Dict[str, Any]"
                ],
                "value": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Context._pre_warm_feeds": {
            "name": "_pre_warm_feeds",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "int",
                    "float"
                ],
                "accessed_variables": [
                    "Iterable[str]",
                    "str",
                    "List[str]",
                    "Sequence[int]",
                    "bool",
                    "int"
                ],
                "logging_context": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "routemaster-master/routemaster/cron.py": {
        "process_job": {
            "name": "process_job",
            "location": 74,
            "return": [
                "Union[tuple, list]",
                "ops.Gate",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "_configure_schedule_for_state": {
            "name": "_configure_schedule_for_state",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "scheduler": [
                    "Dict[\"core.Edge\", \"state.State\"]",
                    "Union[int, str]"
                ],
                "processor": [
                    "Dict[\"core.Edge\", \"state.State\"]",
                    "Union[int, str]"
                ],
                "state": [
                    "str",
                    "Callable"
                ]
            }
        },
        "configure_schedule": {
            "name": "configure_schedule",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "routemaster.app.App",
                    "abilian.app.Application",
                    "dict"
                ],
                "scheduler": [],
                "processor": []
            }
        },
        "CronProcessor.__call__": {
            "name": "__call__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateSpecificCronProcessor.__call__": {
            "name": "__call__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "process_job._iter_labels_until_terminating": {
            "name": "_iter_labels_until_terminating",
            "location": 88,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "state_machine": [
                    "routemaster.config.StateMachine",
                    "routemaster.config.State",
                    "bool",
                    "int",
                    "dict"
                ],
                "state": [
                    "routemaster.config.StateMachine",
                    "routemaster.config.State",
                    "bool",
                    "int",
                    "dict"
                ]
            }
        },
        "CronThread.__init__": {
            "name": "__init__",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "app.App"
                ]
            }
        },
        "CronThread.run": {
            "name": "run",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CronThread.stop": {
            "name": "stop",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CronThread.is_terminating": {
            "name": "is_terminating",
            "location": 221,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "routemaster-master/routemaster/cron_processors.py": {
        "_logger_for_type": {
            "name": "_logger_for_type",
            "location": 23,
            "return": [
                "Mapping[str, Any]",
                "str",
                "List[Dict[str, object]]",
                "Mapping",
                "bool"
            ],
            "arguments": {
                "type_": [
                    "Type[Any]",
                    "type",
                    "Sequence[Any]",
                    "Type",
                    "Callable",
                    "Union[str, List[str]]"
                ]
            }
        },
        "ProcessingSpecificCronProcessor.__call__": {
            "name": "__call__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimezoneAwareProcessor.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "processor": [
                    "int",
                    "bool",
                    "float"
                ],
                "trigger": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "TimezoneAwareProcessor.__call__": {
            "name": "__call__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimezoneAwareProcessor.__repr__": {
            "name": "__repr__",
            "location": 95,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetadataTimezoneAwareProcessor.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "processor": [
                    "int",
                    "bool",
                    "float"
                ],
                "trigger": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "MetadataTimezoneAwareProcessor.__call__": {
            "name": "__call__",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MetadataTimezoneAwareProcessor.__repr__": {
            "name": "__repr__",
            "location": 171,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "routemaster-master/routemaster/feeds.py": {
        "feeds_for_state_machine": {
            "name": "feeds_for_state_machine",
            "location": 11,
            "return": [
                "str",
                "bool",
                "Callable"
            ],
            "arguments": {
                "state_machine": [
                    "Dict[str, Dict[str, int]]",
                    "str",
                    "List[Tuple[int, int]]",
                    "Set[int]",
                    "Hashable"
                ]
            }
        },
        "_get_feed_session": {
            "name": "_get_feed_session",
            "location": 27,
            "return": [
                "int",
                "dict",
                "Exception"
            ],
            "arguments": {}
        },
        "Feed.__post_init__": {
            "name": "__post_init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Feed.prefetch": {
            "name": "prefetch",
            "location": 45,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str"
                ],
                "log_response": [
                    "bytes",
                    "int",
                    "Callable"
                ]
            }
        },
        "Feed.lookup": {
            "name": "lookup",
            "location": 62,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "list"
                ]
            }
        }
    },
    "routemaster-master/routemaster/gunicorn_application.py": {
        "GunicornWSGIApplication.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "bool"
                ]
            }
        },
        "GunicornWSGIApplication.load_config": {
            "name": "load_config",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GunicornWSGIApplication.load": {
            "name": "load",
            "location": 45,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "routemaster-master/routemaster/middleware.py": {
        "middleware": {
            "name": "middleware",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "list",
                    "tuple",
                    "Callable[[], None]"
                ]
            }
        },
        "wrap_application": {
            "name": "wrap_application",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "app": [],
                "wsgi": []
            }
        },
        "session_middleware": {
            "name": "session_middleware",
            "location": 43,
            "return": [
                "bool",
                "List[Dict]",
                "Mapping[str, Any]",
                "str",
                "Dict[int, Dict[str, Any]]"
            ],
            "arguments": {
                "app": [
                    "routemaster.utils.WSGICallable",
                    "routemaster.app.App",
                    "flaskapp.App",
                    "asyncworker.App",
                    "Callable"
                ],
                "wsgi": [
                    "routemaster.utils.WSGICallable",
                    "routemaster.app.App",
                    "flaskapp.App",
                    "asyncworker.App",
                    "Callable"
                ]
            }
        },
        "logging_middleware": {
            "name": "logging_middleware",
            "location": 64,
            "return": [
                "str",
                "List[bytes]",
                "Iterable[float]",
                "int",
                "float"
            ],
            "arguments": {
                "app": [
                    "routemaster.app.App",
                    "routemaster.utils.WSGICallable",
                    "Callable"
                ],
                "wsgi": [
                    "routemaster.app.App",
                    "routemaster.utils.WSGICallable",
                    "Callable"
                ]
            }
        },
        "session_middleware.inner": {
            "name": "inner",
            "location": 45,
            "return": [],
            "arguments": {
                "environ": [],
                "start_response": []
            }
        },
        "logging_middleware.inner": {
            "name": "inner",
            "location": 66,
            "return": [
                "typing.Iterable[builtins.bytes]"
            ],
            "arguments": {
                "environ": [
                    "Callable",
                    "Dict[str, Any]",
                    "rouver.types.WSGIEnvironment"
                ],
                "start_response": [
                    "rouver.types.StartResponse",
                    "StartResponse"
                ]
            }
        },
        "session_middleware.inner.wrapped_start_response": {
            "name": "wrapped_start_response",
            "location": 49,
            "return": [],
            "arguments": {
                "status": [],
                "headers": [],
                "exc_info": []
            }
        },
        "logging_middleware.inner.wrapped_start_response": {
            "name": "wrapped_start_response",
            "location": 73,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "Dict[str, Tuple[Any, Any]]",
                "Union[Dict, Tuple]"
            ],
            "arguments": {
                "status": [
                    "str",
                    "int",
                    "dict",
                    "Dict[str, str]",
                    "Optional[str]",
                    "List[Tuple[str, str]]",
                    "Optional[bytes]",
                    "Optional[int]"
                ],
                "headers": [
                    "Dict[str, str]",
                    "int",
                    "str",
                    "bytes"
                ],
                "exc_info": [
                    "Optional[Any]",
                    "Dict[str, str]",
                    "Callable[..., None]",
                    "List[bytes]",
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "routemaster-master/routemaster/text_utils.py": {
        "join_comma_or": {
            "name": "join_comma_or",
            "location": 5,
            "return": [
                "str",
                "dict",
                "List[Dict[str, Any]]",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "items": [
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        }
    },
    "routemaster-master/routemaster/timezones.py": {
        "get_known_timezones": {
            "name": "get_known_timezones",
            "location": 12,
            "return": [
                "str",
                "List[str]",
                "Callable",
                "OrderedDict"
            ],
            "arguments": {}
        }
    },
    "routemaster-master/routemaster/time_utils.py": {
        "time_appears_in_range": {
            "name": "time_appears_in_range",
            "location": 6,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "when": [
                    "datetime.datetime",
                    "datetime.date",
                    "datetime.time"
                ],
                "start": [
                    "datetime.datetime",
                    "datetime.date",
                    "SupportsInt",
                    "Optional[int]"
                ],
                "end": [
                    "datetime.datetime",
                    "datetime.date",
                    "SupportsInt",
                    "Optional[int]"
                ]
            }
        }
    },
    "routemaster-master/routemaster/utils.py": {
        "dict_merge": {
            "name": "dict_merge",
            "location": 6,
            "return": [
                "set",
                "Sequence[str]",
                "Callable",
                "str"
            ],
            "arguments": {
                "d1": [
                    "Sequence[Dict[str, Any]]",
                    "str",
                    "Dict[str, Any]",
                    "Optional[dict]",
                    "Sequence[bytes]",
                    "bytes"
                ],
                "d2": [
                    "dict",
                    "int"
                ]
            }
        },
        "get_path": {
            "name": "get_path",
            "location": 26,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "path": [
                    "Sequence[str]",
                    "str",
                    "Tuple[str]"
                ],
                "d": [
                    "Dict[str, Any]",
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "suppress_exceptions": {
            "name": "suppress_exceptions",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "logger": [
                    "str",
                    "Union[None, int, str]"
                ]
            }
        },
        "template_url": {
            "name": "template_url",
            "location": 47,
            "return": [],
            "arguments": {
                "url_template": [
                    "str"
                ],
                "state_machine_name": [
                    "str"
                ],
                "label": [
                    "str"
                ]
            }
        }
    },
    "routemaster-master/routemaster/validation.py": {
        "validate_config": {
            "name": "validate_config",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "meier.config.Config",
                    "bool",
                    "Mapping",
                    "robotica.types.Config",
                    "dict",
                    "Dict[str, str]",
                    "str",
                    "abilian.app.Application",
                    "Dict[str, Any]",
                    "pyramid.config.Configurator"
                ],
                "config": [
                    "str",
                    "Mapping[str, int]",
                    "Callable",
                    "Dict[str, Any]",
                    "types.Config"
                ]
            }
        },
        "_validate_state_machine": {
            "name": "_validate_state_machine",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "django.db.models.QuerySet"
                ],
                "state_machine": []
            }
        },
        "_build_graph": {
            "name": "_build_graph",
            "location": 32,
            "return": [
                "bool"
            ],
            "arguments": {
                "state_machine": [
                    "str",
                    "routemaster.config.StateMachine",
                    "float"
                ]
            }
        },
        "_validate_route_start_to_end": {
            "name": "_validate_route_start_to_end",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "state_machine": [
                    "str",
                    "tuple",
                    "Dict[str, str]"
                ]
            }
        },
        "_validate_unique_state_names": {
            "name": "_validate_unique_state_names",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "state_machine": [
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "_validate_all_states_exist": {
            "name": "_validate_all_states_exist",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "state_machine": [
                    "List[Tuple[int, int]]",
                    "Iterable[T]",
                    "str",
                    "List[int]"
                ]
            }
        },
        "_validate_no_labels_in_nonexistent_states": {
            "name": "_validate_no_labels_in_nonexistent_states",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "state_machine": [
                    "float",
                    "Dict[str, Any]",
                    "bool",
                    "int"
                ],
                "app": [
                    "bool",
                    "sqlalchemy.exdeclarative.DeclarativeMeta",
                    "str"
                ]
            }
        }
    },
    "routemaster-master/routemaster/webhooks.py": {
        "webhook_runner_for_state_machine": {
            "name": "webhook_runner_for_state_machine",
            "location": 77,
            "return": [
                "str",
                "Optional[Union[Dict, str, int, bytes]]"
            ],
            "arguments": {
                "state_machine": [
                    "routemaster.config.StateMachine",
                    "float",
                    "str"
                ]
            }
        },
        "RequestsWebhookRunner.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "webhook_configs": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "RequestsWebhookRunner.__call__": {
            "name": "__call__",
            "location": 36,
            "return": [
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "bytes"
                ],
                "content_type": [
                    "str",
                    "int",
                    "dict"
                ],
                "data": [
                    "bytes",
                    "dict",
                    "Optional[dict]",
                    "Optional[Mapping[str, Any]]",
                    "Callable[..., Awaitable[dict]]",
                    "Tuple[int, int]"
                ],
                "idempotency_token": [
                    "str",
                    "int",
                    "dict"
                ],
                "log_response": [
                    "str",
                    "Optional[\"TrackingData\"]",
                    "Optional[Dict]",
                    "Dict[str, str]",
                    "bool",
                    "dict"
                ]
            }
        },
        "RequestsWebhookRunner._headers_for_url": {
            "name": "_headers_for_url",
            "location": 69,
            "return": [
                "Dict[str, str]",
                "dict",
                "Dict[str, Union[str, int]]",
                "Dict[str, Type]",
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Pattern"
                ]
            }
        }
    },
    "routemaster-master/routemaster/__init__.py": {},
    "routemaster-master/routemaster/__main__.py": {},
    "routemaster-master/routemaster/config/exceptions.py": {},
    "routemaster-master/routemaster/config/loader.py": {
        "yaml_load": {
            "name": "yaml_load",
            "location": 45,
            "return": [],
            "arguments": {
                "stream": []
            }
        },
        "load_config": {
            "name": "load_config",
            "location": 50,
            "return": [],
            "arguments": {
                "yaml": []
            }
        },
        "_schema_validate": {
            "name": "_schema_validate",
            "location": 77,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "load_database_config": {
            "name": "load_database_config",
            "location": 91,
            "return": [],
            "arguments": {}
        },
        "_load_logging_plugins": {
            "name": "_load_logging_plugins",
            "location": 111,
            "return": [],
            "arguments": {
                "yaml_logging_plugins": []
            }
        },
        "_load_state_machine": {
            "name": "_load_state_machine",
            "location": 123,
            "return": [],
            "arguments": {
                "path": [],
                "name": [],
                "yaml_state_machine": []
            }
        },
        "_load_webhook": {
            "name": "_load_webhook",
            "location": 152,
            "return": [],
            "arguments": {
                "yaml": []
            }
        },
        "_load_feed_config": {
            "name": "_load_feed_config",
            "location": 159,
            "return": [],
            "arguments": {
                "yaml": []
            }
        },
        "_load_state": {
            "name": "_load_state",
            "location": 163,
            "return": [],
            "arguments": {
                "path": [],
                "yaml_state": [],
                "feed_names": []
            }
        },
        "_validate_context_lookups": {
            "name": "_validate_context_lookups",
            "location": 181,
            "return": [],
            "arguments": {
                "path": [],
                "lookups": [],
                "feed_names": []
            }
        },
        "_load_action": {
            "name": "_load_action",
            "location": 211,
            "return": [],
            "arguments": {
                "path": [],
                "yaml_state": [],
                "feed_names": []
            }
        },
        "_load_gate": {
            "name": "_load_gate",
            "location": 227,
            "return": [],
            "arguments": {
                "path": [],
                "yaml_state": [],
                "feed_names": []
            }
        },
        "_load_trigger": {
            "name": "_load_trigger",
            "location": 259,
            "return": [],
            "arguments": {
                "path": [],
                "yaml_trigger": []
            }
        },
        "_validate_known_timezone": {
            "name": "_validate_known_timezone",
            "location": 275,
            "return": [],
            "arguments": {
                "path": [],
                "timezone": []
            }
        },
        "_load_time_trigger": {
            "name": "_load_time_trigger",
            "location": 283,
            "return": [],
            "arguments": {
                "path": [],
                "yaml_trigger": []
            }
        },
        "_load_interval_trigger": {
            "name": "_load_interval_trigger",
            "location": 323,
            "return": [],
            "arguments": {
                "path": [],
                "yaml_trigger": []
            }
        },
        "_load_metadata_trigger": {
            "name": "_load_metadata_trigger",
            "location": 342,
            "return": [],
            "arguments": {
                "path": [],
                "yaml_trigger": []
            }
        },
        "_load_next_states": {
            "name": "_load_next_states",
            "location": 352,
            "return": [],
            "arguments": {
                "path": [],
                "yaml_next_states": [],
                "feed_names": []
            }
        },
        "_load_constant_next_state": {
            "name": "_load_constant_next_state",
            "location": 374,
            "return": [],
            "arguments": {
                "path": [],
                "yaml_next_states": []
            }
        },
        "_load_context_next_states": {
            "name": "_load_context_next_states",
            "location": 381,
            "return": [],
            "arguments": {
                "path": [],
                "yaml_next_states": [],
                "feed_names": []
            }
        },
        "_load_context_next_state_option": {
            "name": "_load_context_next_state_option",
            "location": 403,
            "return": [],
            "arguments": {
                "path": [],
                "yaml_option": []
            }
        }
    },
    "routemaster-master/routemaster/config/model.py": {
        "MetadataTrigger.should_trigger_for_update": {
            "name": "should_trigger_for_update",
            "location": 66,
            "return": [
                "str",
                "TextIO",
                "BinaryIO",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "update": [
                    "str",
                    "bytes",
                    "dict",
                    "Tuple[int, int]"
                ]
            }
        },
        "ConstantNextState.next_state_for_label": {
            "name": "next_state_for_label",
            "location": 97,
            "return": [
                "str",
                "int",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "label_context": [
                    "str",
                    "List[str]",
                    "bool",
                    "Set[str]",
                    "Iterable[Any]",
                    "routemaster.state_machine.types.LabelRef"
                ]
            }
        },
        "ConstantNextState.all_destinations": {
            "name": "all_destinations",
            "location": 101,
            "return": [
                "str",
                "object",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextNextStates.next_state_for_label": {
            "name": "next_state_for_label",
            "location": 118,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "label_context": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "ContextNextStates.all_destinations": {
            "name": "all_destinations",
            "location": 126,
            "return": [
                "List[str]",
                "Set[str]",
                "List[int]",
                "int",
                "Tuple[List[Any], List[int]]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "NoNextStates.next_state_for_label": {
            "name": "next_state_for_label",
            "location": 134,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": [],
                "label_context": [
                    "str",
                    "List[str]",
                    "bool",
                    "Set[str]",
                    "Iterable[Any]",
                    "routemaster.state_machine.types.LabelRef"
                ]
            }
        },
        "NoNextStates.all_destinations": {
            "name": "all_destinations",
            "location": 140,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gate.metadata_triggers": {
            "name": "metadata_triggers",
            "location": 161,
            "return": [
                "list",
                "Dict[int, int]",
                "str",
                "Optional[dict]",
                "Set[str]",
                "Sequence[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gate.trigger_on_entry": {
            "name": "trigger_on_entry",
            "location": 166,
            "return": [
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateMachine.get_state": {
            "name": "get_state",
            "location": 208,
            "return": [
                "List[str]",
                "int",
                "list",
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "state_name": [
                    "str"
                ]
            }
        },
        "DatabaseConfig.connstr": {
            "name": "connstr",
            "location": 228,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetadataTrigger.should_trigger_for_update.applies": {
            "name": "applies",
            "location": 68,
            "return": [
                "str",
                "list",
                "Optional[Any]"
            ],
            "arguments": {
                "path": [
                    "Sequence[str]",
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "d": [
                    "Dict[str, Any]",
                    "str",
                    "IO",
                    "Optional[str]"
                ]
            }
        }
    },
    "routemaster-master/routemaster/config/__init__.py": {},
    "routemaster-master/routemaster/config/tests/test_context_trigger_firing.py": {
        "test_context_trigger": {
            "name": "test_context_trigger",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[int]"
                ],
                "update": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "str"
                ],
                "should_trigger": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        }
    },
    "routemaster-master/routemaster/config/tests/test_database_config.py": {
        "test_connection_string_formatting": {
            "name": "test_connection_string_formatting",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "str",
                    "lightbus.config.Config",
                    "pyramid.config.Configurator",
                    "opentrons.config.robot_configs.robot_config"
                ],
                "expected": [
                    "Dict[str, Any]",
                    "str",
                    "lightbus.config.Config",
                    "pyramid.config.Configurator",
                    "opentrons.config.robot_configs.robot_config"
                ]
            }
        }
    },
    "routemaster-master/routemaster/config/tests/test_loading.py": {
        "reset_environment": {
            "name": "reset_environment",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "yaml_data": {
            "name": "yaml_data",
            "location": 41,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "assert_config_error": {
            "name": "assert_config_error",
            "location": 47,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "test_trivial_config": {
            "name": "test_trivial_config",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "test_realistic_config": {
            "name": "test_realistic_config",
            "location": 84,
            "return": [],
            "arguments": {}
        },
        "test_raises_for_invalid_top_level_context_name_in_path": {
            "name": "test_raises_for_invalid_top_level_context_name_in_path",
            "location": 180,
            "return": [],
            "arguments": {}
        },
        "test_raises_for_invalid_top_level_context_name_in_exit_condition": {
            "name": "test_raises_for_invalid_top_level_context_name_in_exit_condition",
            "location": 190,
            "return": [],
            "arguments": {}
        },
        "test_raises_for_invalid_feed_name_in_lookup": {
            "name": "test_raises_for_invalid_feed_name_in_lookup",
            "location": 202,
            "return": [],
            "arguments": {}
        },
        "test_raises_for_action_and_gate_state": {
            "name": "test_raises_for_action_and_gate_state",
            "location": 212,
            "return": [],
            "arguments": {}
        },
        "test_raises_for_neither_action_nor_gate_state": {
            "name": "test_raises_for_neither_action_nor_gate_state",
            "location": 217,
            "return": [],
            "arguments": {}
        },
        "test_raises_for_no_state_machines": {
            "name": "test_raises_for_no_state_machines",
            "location": 222,
            "return": [],
            "arguments": {}
        },
        "test_raises_for_time_and_context_trigger": {
            "name": "test_raises_for_time_and_context_trigger",
            "location": 227,
            "return": [],
            "arguments": {}
        },
        "test_raises_for_neither_time_nor_context_trigger": {
            "name": "test_raises_for_neither_time_nor_context_trigger",
            "location": 232,
            "return": [],
            "arguments": {}
        },
        "test_raises_for_invalid_time_format_in_trigger": {
            "name": "test_raises_for_invalid_time_format_in_trigger",
            "location": 237,
            "return": [],
            "arguments": {}
        },
        "test_raises_for_invalid_timezone_name_in_trigger": {
            "name": "test_raises_for_invalid_timezone_name_in_trigger",
            "location": 242,
            "return": [],
            "arguments": {}
        },
        "test_raises_for_invalid_path_format_in_trigger": {
            "name": "test_raises_for_invalid_path_format_in_trigger",
            "location": 247,
            "return": [],
            "arguments": {}
        },
        "test_raises_for_neither_constant_no_context_next_states": {
            "name": "test_raises_for_neither_constant_no_context_next_states",
            "location": 252,
            "return": [],
            "arguments": {}
        },
        "test_raises_for_invalid_interval_format_in_trigger": {
            "name": "test_raises_for_invalid_interval_format_in_trigger",
            "location": 257,
            "return": [],
            "arguments": {}
        },
        "test_raises_for_nested_kwargs_in_logging_plugin_config": {
            "name": "test_raises_for_nested_kwargs_in_logging_plugin_config",
            "location": 262,
            "return": [],
            "arguments": {}
        },
        "test_next_states_shorthand_results_in_constant_config": {
            "name": "test_next_states_shorthand_results_in_constant_config",
            "location": 267,
            "return": [],
            "arguments": {}
        },
        "test_environment_variables_override_config_file_for_database_config": {
            "name": "test_environment_variables_override_config_file_for_database_config",
            "location": 304,
            "return": [],
            "arguments": {}
        },
        "test_raises_for_unparseable_database_port_in_environment_variable": {
            "name": "test_raises_for_unparseable_database_port_in_environment_variable",
            "location": 407,
            "return": [],
            "arguments": {}
        },
        "test_multiple_feeds_same_name_invalid": {
            "name": "test_multiple_feeds_same_name_invalid",
            "location": 413,
            "return": [],
            "arguments": {}
        },
        "test_example_config_loads": {
            "name": "test_example_config_loads",
            "location": 418,
            "return": [],
            "arguments": {}
        }
    },
    "routemaster-master/routemaster/config/tests/test_next_states.py": {
        "test_constant_next_state": {
            "name": "test_constant_next_state",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_no_next_states_must_not_be_called": {
            "name": "test_no_next_states_must_not_be_called",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_context_next_states": {
            "name": "test_context_next_states",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "make_context": [
                    "str"
                ]
            }
        },
        "test_context_next_states_returns_default_if_no_match": {
            "name": "test_context_next_states_returns_default_if_no_match",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "make_context": []
            }
        }
    },
    "routemaster-master/routemaster/db/initialisation.py": {
        "initialise_db": {
            "name": "initialise_db",
            "location": 8,
            "return": [
                "bool",
                "str",
                "List[str]",
                "Tuple[int, int, int]"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "pyramid.config.Configurator",
                    "Optional[List[str]]",
                    "sphinx.config.Config",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "routemaster-master/routemaster/db/model.py": {
        "Label.__repr__": {
            "name": "__repr__",
            "location": 77,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "History.__repr__": {
            "name": "__repr__",
            "location": 120,
            "return": [
                "str",
                "dict",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "routemaster-master/routemaster/db/__init__.py": {},
    "routemaster-master/routemaster/db/tests/test_model_repr.py": {
        "test_model_is_represented_correctly": {
            "name": "test_model_is_represented_correctly",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "instance": [],
                "representation": []
            }
        }
    },
    "routemaster-master/routemaster/exit_conditions/analysis.py": {
        "find_accessed_keys": {
            "name": "find_accessed_keys",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "instructions": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "routemaster-master/routemaster/exit_conditions/error_display.py": {
        "_find_line_containing": {
            "name": "_find_line_containing",
            "location": 4,
            "return": [
                "int",
                "List[int]",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "source": [
                    "str",
                    "Optional[str]"
                ],
                "index": [
                    "str",
                    "set",
                    "List[str]"
                ]
            }
        },
        "format_parse_error_message": {
            "name": "format_parse_error_message",
            "location": 23,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "routemaster-master/routemaster/exit_conditions/evaluator.py": {
        "_evaluate_to_bool": {
            "name": "_evaluate_to_bool",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "stack": [
                    "str",
                    "Union[int, float]",
                    "List[List[Any]]",
                    "list",
                    "List[List[T]]"
                ],
                "lookup": [
                    "Optional[List]",
                    "Iterable[str]",
                    "Iterable[int]",
                    "bool",
                    "list"
                ],
                "property_handler": [
                    "Optional[List]",
                    "Iterable[str]",
                    "Iterable[int]",
                    "bool",
                    "list"
                ]
            }
        },
        "_evaluate_not": {
            "name": "_evaluate_not",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "stack": [
                    "int",
                    "cirq.ops.Operation",
                    "List[List[Any]]",
                    "List[float]",
                    "List[List[T]]"
                ],
                "lookup": [
                    "Optional[List]",
                    "List[int]",
                    "bool",
                    "list"
                ],
                "property_handler": [
                    "Optional[List]",
                    "List[int]",
                    "bool",
                    "list"
                ]
            }
        },
        "_evaluate_and": {
            "name": "_evaluate_and",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "stack": [
                    "float",
                    "List[float]",
                    "int"
                ],
                "lookup": [
                    "Optional[List]",
                    "List[int]",
                    "bool",
                    "list"
                ],
                "property_handler": [
                    "Optional[List]",
                    "List[int]",
                    "bool",
                    "list"
                ]
            }
        },
        "_evaluate_or": {
            "name": "_evaluate_or",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "stack": [
                    "float",
                    "List[float]",
                    "int"
                ],
                "lookup": [
                    "Optional[List]",
                    "List[int]",
                    "bool",
                    "list"
                ],
                "property_handler": [
                    "Optional[List]",
                    "List[int]",
                    "bool",
                    "list"
                ]
            }
        },
        "_evaluate_literal": {
            "name": "_evaluate_literal",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "stack": [
                    "Callable[[], Any]",
                    "List[Dict[str, Any]]",
                    "list",
                    "str"
                ],
                "lookup": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "property_handler": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "value": [
                    "Callable[[], Any]",
                    "List[Dict[str, Any]]",
                    "list",
                    "str"
                ]
            }
        },
        "_evaluate_lookup": {
            "name": "_evaluate_lookup",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "stack": [
                    "Union[str, bool, None]",
                    "dict",
                    "List[int]",
                    "Sequence[str]"
                ],
                "lookup": [
                    "Union[str, bool, None]",
                    "dict",
                    "List[int]",
                    "Sequence[str]"
                ],
                "property_handler": [
                    "bool",
                    "Dict[str, List[Dict]]",
                    "List[object]",
                    "Optional[bytes]",
                    "Dict[str, Any]"
                ],
                "key": [
                    "Union[str, bool, None]",
                    "dict",
                    "List[int]",
                    "Sequence[str]"
                ]
            }
        },
        "_evaluate_eq": {
            "name": "_evaluate_eq",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "stack": [
                    "float",
                    "List[float]",
                    "int"
                ],
                "lookup": [
                    "Optional[List]",
                    "List[int]",
                    "bool",
                    "list"
                ],
                "property_handler": [
                    "Optional[List]",
                    "List[int]",
                    "bool",
                    "list"
                ]
            }
        },
        "_evaluate_lt": {
            "name": "_evaluate_lt",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "stack": [
                    "float",
                    "List[float]",
                    "int"
                ],
                "lookup": [
                    "Optional[List]",
                    "List[int]",
                    "bool",
                    "list"
                ],
                "property_handler": [
                    "Optional[List]",
                    "List[int]",
                    "bool",
                    "list"
                ]
            }
        },
        "_evaluate_gt": {
            "name": "_evaluate_gt",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "stack": [
                    "float",
                    "List[float]",
                    "int"
                ],
                "lookup": [
                    "Optional[List]",
                    "List[int]",
                    "bool",
                    "list"
                ],
                "property_handler": [
                    "Optional[List]",
                    "List[int]",
                    "bool",
                    "list"
                ]
            }
        },
        "_evaluate_property": {
            "name": "_evaluate_property",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "stack": [
                    "str",
                    "List[str]",
                    "Mapping[str, int]"
                ],
                "lookup": [
                    "bool",
                    "str",
                    "Optional[Set[int]]"
                ],
                "property_handler": [
                    "List[str]",
                    "list",
                    "str",
                    "bool"
                ],
                "property_name": [
                    "List[str]",
                    "list",
                    "str",
                    "bool"
                ],
                "prepositions": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "evaluate": {
            "name": "evaluate",
            "location": 84,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "instructions": [
                    "Optional[List]",
                    "List[int]",
                    "bool",
                    "list"
                ],
                "lookup": [
                    "int",
                    "cirq.Operation"
                ],
                "property_handler": [
                    "int",
                    "cirq.Operation"
                ]
            }
        }
    },
    "routemaster-master/routemaster/exit_conditions/exceptions.py": {
        "ParseError.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "List[Dict[str, Any]]",
                    "bytes",
                    "str",
                    "list",
                    "dict",
                    "List[str]",
                    "Optional[str]"
                ],
                "location": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "routemaster-master/routemaster/exit_conditions/operations.py": {},
    "routemaster-master/routemaster/exit_conditions/parser.py": {
        "_parse_and_expr": {
            "name": "_parse_and_expr",
            "location": 86,
            "return": [
                "typing.Iterator[Instruction]"
            ],
            "arguments": {
                "source": [
                    "List[str]",
                    "Type",
                    "Type[object]",
                    "str"
                ]
            }
        },
        "_parse_or_expr": {
            "name": "_parse_or_expr",
            "location": 100,
            "return": [
                "typing.Iterator[Instruction]"
            ],
            "arguments": {
                "source": [
                    "str"
                ]
            }
        },
        "_parse_base_expr": {
            "name": "_parse_base_expr",
            "location": 114,
            "return": [
                "typing.Iterator[Instruction]"
            ],
            "arguments": {
                "source": [
                    "str"
                ]
            }
        },
        "_parse_value": {
            "name": "_parse_value",
            "location": 194,
            "return": [],
            "arguments": {
                "source": [
                    "str",
                    "dict"
                ]
            }
        },
        "_parse_tokens": {
            "name": "_parse_tokens",
            "location": 254,
            "return": [
                "typing.Iterator[Instruction]"
            ],
            "arguments": {
                "token_stream": [
                    "Sequence[str]",
                    "Callable",
                    "Iterable[str]",
                    "allennlp.data.tokenizers.token.Token",
                    "List[Tuple[int, int]]",
                    "str"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 268,
            "return": [
                "Callable",
                "bool"
            ],
            "arguments": {
                "source": [
                    "str",
                    "dict"
                ]
            }
        },
        "_TokenSource.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterable": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "_TokenSource._advance": {
            "name": "_advance",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TokenSource.try_eat_next": {
            "name": "try_eat_next",
            "location": 41,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TokenSource.match_next": {
            "name": "match_next",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TokenSource.eat_next": {
            "name": "eat_next",
            "location": 56,
            "return": [
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "routemaster-master/routemaster/exit_conditions/peephole.py": {
        "peephole_optimise": {
            "name": "peephole_optimise",
            "location": 80,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "instructions": [
                    "int",
                    "List[int]",
                    "bool"
                ]
            }
        }
    },
    "routemaster-master/routemaster/exit_conditions/prepositions.py": {},
    "routemaster-master/routemaster/exit_conditions/program.py": {
        "ExitConditionProgram.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "ExitConditionProgram.accessed_variables": {
            "name": "accessed_variables",
            "location": 39,
            "return": [
                "typing.Iterable[builtins.str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExitConditionProgram.run": {
            "name": "run",
            "location": 44,
            "return": [
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "set"
                ]
            }
        },
        "ExitConditionProgram.__eq__": {
            "name": "__eq__",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other_program": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "ExitConditionProgram.__hash__": {
            "name": "__hash__",
            "location": 66,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExitConditionProgram.__repr__": {
            "name": "__repr__",
            "location": 75,
            "return": [
                "type",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "routemaster-master/routemaster/exit_conditions/tokenizer.py": {
        "raw_tokenize": {
            "name": "raw_tokenize",
            "location": 154,
            "return": [
                "typing.Iterable[RawToken]"
            ],
            "arguments": {
                "src": [
                    "str",
                    "bool"
                ]
            }
        },
        "_digest_atom": {
            "name": "_digest_atom",
            "location": 208,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "raw_token": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "tokenize": {
            "name": "tokenize",
            "location": 275,
            "return": [
                "typing.Generator[Token, None, None]"
            ],
            "arguments": {
                "src": [
                    "str",
                    "float",
                    "int"
                ]
            }
        }
    },
    "routemaster-master/routemaster/exit_conditions/__init__.py": {},
    "routemaster-master/routemaster/exit_conditions/__main__.py": {},
    "routemaster-master/routemaster/exit_conditions/tests/test_integration.py": {
        "test_evaluate": {
            "name": "test_evaluate",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "program": [
                    "Exception"
                ],
                "expected": [],
                "variables": [],
                "make_context": []
            }
        },
        "test_accessed_variables": {
            "name": "test_accessed_variables",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "program": [
                    "Iterable[Tuple[int, int]]"
                ],
                "expected": [
                    "str"
                ],
                "variables": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_errors": {
            "name": "test_errors",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "source": [
                    "str",
                    "dict",
                    "List[str]"
                ],
                "error": [
                    "str",
                    "bytes"
                ],
                "make_context": [
                    "str",
                    "IO",
                    "Generator",
                    "bytes",
                    "BinaryIO",
                    "Optional[str]"
                ]
            }
        }
    },
    "routemaster-master/routemaster/exit_conditions/tests/test_program.py": {
        "test_program_equality": {
            "name": "test_program_equality",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "test_program_hash": {
            "name": "test_program_hash",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_program_repr": {
            "name": "test_program_repr",
            "location": 15,
            "return": [],
            "arguments": {}
        }
    },
    "routemaster-master/routemaster/exit_conditions/tests/test_tokenizer.py": {
        "test_tokenize_empty": {
            "name": "test_tokenize_empty",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_tokenize_exhaustive": {
            "name": "test_tokenize_exhaustive",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_error_on_invalid_characters": {
            "name": "test_parse_error_on_invalid_characters",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "routemaster-master/routemaster/logging/base.py": {
        "BaseLogger.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "BaseLogger.init_flask": {
            "name": "init_flask",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "flask_app": [
                    "Optional[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "BaseLogger.process_cron": {
            "name": "process_cron",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_machine": [
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "state": [
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "fn_name": [
                    "bool",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "BaseLogger.process_webhook": {
            "name": "process_webhook",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_machine": [
                    "int",
                    "Callable[[List], List[str]]",
                    "Sequence[Tuple[str, int]]"
                ],
                "state": [
                    "int",
                    "Callable[[List], List[str]]",
                    "Sequence[Tuple[str, int]]"
                ]
            }
        },
        "BaseLogger.process_request_started": {
            "name": "process_request_started",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "bytes",
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "BaseLogger.process_request_finished": {
            "name": "process_request_finished",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "bool",
                    "List[str]",
                    "Dict[Tuple[int, int], str]",
                    "Iterable[str]",
                    "Iterable[Any]"
                ],
                "status": [
                    "bool",
                    "List[str]",
                    "Dict[Tuple[int, int], str]",
                    "Iterable[str]",
                    "Iterable[Any]"
                ],
                "headers": [
                    "bool",
                    "List[str]",
                    "Dict[Tuple[int, int], str]",
                    "Iterable[str]",
                    "Iterable[Any]"
                ],
                "exc_info": [
                    "bool",
                    "List[str]",
                    "Dict[Tuple[int, int], str]",
                    "Iterable[str]",
                    "Iterable[Any]"
                ]
            }
        },
        "BaseLogger.webhook_response": {
            "name": "webhook_response",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_machine": [
                    "str",
                    "bool",
                    "list",
                    "List[Dict[str, str]]"
                ],
                "state": [
                    "str",
                    "bool",
                    "list",
                    "List[Dict[str, str]]"
                ],
                "response": [
                    "str",
                    "bool",
                    "list",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "BaseLogger.process_feed": {
            "name": "process_feed",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_machine": [
                    "bool",
                    "int"
                ],
                "state": [
                    "bool",
                    "int"
                ],
                "feed_url": [
                    "bool",
                    "int"
                ]
            }
        },
        "BaseLogger.feed_response": {
            "name": "feed_response",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_machine": [
                    "bool",
                    "Optional[bool]",
                    "list",
                    "str"
                ],
                "state": [
                    "bool",
                    "Optional[bool]",
                    "list",
                    "str"
                ],
                "feed_url": [
                    "bool",
                    "Optional[bool]",
                    "list",
                    "str"
                ],
                "response": [
                    "bool",
                    "Optional[bool]",
                    "list",
                    "str"
                ]
            }
        },
        "BaseLogger.__getattr__": {
            "name": "__getattr__",
            "location": 69,
            "return": [
                "Dict[str, Any]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "BaseLogger._log_handler": {
            "name": "_log_handler",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "routemaster-master/routemaster/logging/plugins.py": {
        "register_loggers": {
            "name": "register_loggers",
            "location": 12,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "config": [
                    "routemaster.config.Config",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "_import_logger": {
            "name": "_import_logger",
            "location": 19,
            "return": [
                "int",
                "bytearray",
                "IO"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "Dict[str, Any]",
                    "Sequence",
                    "Mapping[str, int]",
                    "config.RunningConfig",
                    "pyramid.config.Configurator",
                    "sphinx.config.Config"
                ],
                "logger_config": [
                    "sphinx.config.Config",
                    "str",
                    "Optional[List[str]]",
                    "opentrons.config.robot_configs.robot_config",
                    "_pytesconfig.Config"
                ]
            }
        }
    },
    "routemaster-master/routemaster/logging/python_logger.py": {
        "PythonLogger.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PythonLogger.process_cron": {
            "name": "process_cron",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_machine": [
                    "str",
                    "Optional[List[str]]",
                    "Dict[str, object]",
                    "bool",
                    "Exception"
                ],
                "state": [
                    "str",
                    "Optional[List[str]]",
                    "Dict[str, object]",
                    "bool",
                    "Exception"
                ],
                "fn_name": [
                    "str",
                    "Mapping",
                    "bytes",
                    "Type"
                ]
            }
        },
        "PythonLogger.process_request_finished": {
            "name": "process_request_finished",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "Optional[str]",
                    "bytes",
                    "bool",
                    "dict",
                    "str"
                ]
            }
        },
        "PythonLogger.__getattr__": {
            "name": "__getattr__",
            "location": 62,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Type[BaseException]",
                    "logging.Logger"
                ]
            }
        }
    },
    "routemaster-master/routemaster/logging/split_logger.py": {
        "SplitLogger.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SplitLogger._log_all": {
            "name": "_log_all",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "SplitLogger._log_all_ctx": {
            "name": "_log_all_ctx",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        }
    },
    "routemaster-master/routemaster/logging/__init__.py": {},
    "routemaster-master/routemaster/logging/tests/test_loggers.py": {
        "test_logger": {
            "name": "test_logger",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "routemaster.app.App"
                ],
                "klass": [],
                "kwargs": []
            }
        }
    },
    "routemaster-master/routemaster/logging/tests/test_logging_plugin_system.py": {
        "test_loads_plugins": {
            "name": "test_loads_plugins",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "custom_app": []
            }
        },
        "test_loads_plugin_from_callable": {
            "name": "test_loads_plugin_from_callable",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "custom_app": [
                    "str"
                ]
            }
        },
        "test_raises_for_invalid_plugin_base_class": {
            "name": "test_raises_for_invalid_plugin_base_class",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "custom_app": []
            }
        },
        "test_raises_for_plugin_with_invalid_constructor": {
            "name": "test_raises_for_plugin_with_invalid_constructor",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "custom_app": [
                    "bool"
                ]
            }
        },
        "test_raises_for_plugin_not_on_pythonpath": {
            "name": "test_raises_for_plugin_not_on_pythonpath",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "custom_app": [
                    "bool"
                ]
            }
        },
        "test_raises_for_plugin_in_invalid_format": {
            "name": "test_raises_for_plugin_in_invalid_format",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "custom_app": [
                    "bool"
                ]
            }
        },
        "test_raises_for_plugin_non_existent_class": {
            "name": "test_raises_for_plugin_non_existent_class",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "custom_app": [
                    "bool"
                ]
            }
        },
        "test_raises_for_not_callable_value": {
            "name": "test_raises_for_not_callable_value",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "custom_app": [
                    "bool"
                ]
            }
        }
    },
    "routemaster-master/routemaster/migrations/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "routemaster-master/routemaster/migrations/versions/091a6e84d9ac_initial_state_machine.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "routemaster-master/routemaster/migrations/versions/3a6f69dca9d7_rename_context_to_metadata.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "routemaster-master/routemaster/migrations/versions/3ab04cd7bb80_add_edge_tracking.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "routemaster-master/routemaster/migrations/versions/3d0b226940eb_initial_history.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "routemaster-master/routemaster/migrations/versions/3eb4f3b419c6_create_trigger_to_sync_updated_field.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "routemaster-master/routemaster/migrations/versions/4fe851fbcdc3_initial_label.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "routemaster-master/routemaster/migrations/versions/4ff14db28f2d_rename_labels_table.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "routemaster-master/routemaster/migrations/versions/6fb8896f0729_fix_trigger_timezone_awareness.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "routemaster-master/routemaster/migrations/versions/814a6b555eb9_make_fields_non_nullable_by_default.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "upgrade.set_not_null": {
            "name": "set_not_null",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "table": [
                    "str",
                    "bool"
                ],
                "column": [
                    "str",
                    "bool"
                ],
                "existing_type": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "server_default": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "routemaster-master/routemaster/migrations/versions/9871e5c166b4_drop_data_warehouse_models_for_now.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "routemaster-master/routemaster/migrations/versions/ab899b70c758_timezone_aware_created_and_updated_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "routemaster-master/routemaster/migrations/versions/e1fec9622785_add_metadata_triggers_processed_flag_to_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "routemaster-master/routemaster/migrations/versions/e7d5ad06c0d1_add_updated_field_to_label.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "routemaster-master/routemaster/migrations/versions/ead8463bff97_add_a_deleted_column_to_labels.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "routemaster-master/routemaster/server/endpoints.py": {
        "status": {
            "name": "status",
            "location": 20,
            "return": [
                "str",
                "bool",
                "dict",
                "float",
                "sqlalchemy.orm.query.Query",
                "List[str]"
            ],
            "arguments": {}
        },
        "get_state_machines": {
            "name": "get_state_machines",
            "location": 51,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "get_labels": {
            "name": "get_labels",
            "location": 73,
            "return": [
                "str",
                "Optional[str]",
                "Tuple[str, str]",
                "List[Tuple[str, str]]",
                "Iterable[str]",
                "List[str]",
                "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]"
            ],
            "arguments": {
                "state_machine_name": [
                    "str",
                    "type",
                    "Optional[List[str]]"
                ]
            }
        },
        "get_label": {
            "name": "get_label",
            "location": 103,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "state_machine_name": [
                    "str",
                    "Optional[str]"
                ],
                "label_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "create_label": {
            "name": "create_label",
            "location": 136,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "state_machine_name": [
                    "str",
                    "dict"
                ],
                "label_name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "update_label": {
            "name": "update_label",
            "location": 174,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "state_machine_name": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "label_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "delete_label": {
            "name": "delete_label",
            "location": 220,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "state_machine_name": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "label_name": [
                    "str"
                ]
            }
        },
        "check_loggers": {
            "name": "check_loggers",
            "location": 244,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "routemaster-master/routemaster/server/__init__.py": {},
    "routemaster-master/routemaster/server/tests/test_endpoints.py": {
        "test_root": {
            "name": "test_root",
            "location": 7,
            "return": [],
            "arguments": {
                "client": [],
                "version": []
            }
        },
        "test_root_error_state": {
            "name": "test_root_error_state",
            "location": 16,
            "return": [],
            "arguments": {
                "client": [],
                "version": []
            }
        },
        "test_enumerate_state_machines": {
            "name": "test_enumerate_state_machines",
            "location": 30,
            "return": [],
            "arguments": {
                "client": [],
                "app": []
            }
        },
        "test_create_label": {
            "name": "test_create_label",
            "location": 42,
            "return": [],
            "arguments": {
                "client": [],
                "app": [],
                "mock_test_feed": []
            }
        },
        "test_create_label_404_for_not_found_state_machine": {
            "name": "test_create_label_404_for_not_found_state_machine",
            "location": 69,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_create_label_400_for_invalid_body": {
            "name": "test_create_label_400_for_invalid_body",
            "location": 78,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_create_label_400_for_missing_metadata_key": {
            "name": "test_create_label_400_for_missing_metadata_key",
            "location": 87,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_create_label_409_for_already_existing_label": {
            "name": "test_create_label_409_for_already_existing_label",
            "location": 96,
            "return": [],
            "arguments": {
                "client": [],
                "create_label": []
            }
        },
        "test_update_label": {
            "name": "test_update_label",
            "location": 106,
            "return": [],
            "arguments": {
                "client": [],
                "app": [],
                "create_label": [],
                "mock_webhook": [],
                "mock_test_feed": []
            }
        },
        "test_update_label_404_for_not_found_label": {
            "name": "test_update_label_404_for_not_found_label",
            "location": 125,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_update_label_404_for_not_found_state_machine": {
            "name": "test_update_label_404_for_not_found_state_machine",
            "location": 134,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_update_label_400_for_invalid_body": {
            "name": "test_update_label_400_for_invalid_body",
            "location": 143,
            "return": [],
            "arguments": {
                "client": [],
                "create_label": []
            }
        },
        "test_update_label_400_for_no_metadata": {
            "name": "test_update_label_400_for_no_metadata",
            "location": 153,
            "return": [],
            "arguments": {
                "client": [],
                "app": [],
                "create_label": []
            }
        },
        "test_get_label": {
            "name": "test_get_label",
            "location": 166,
            "return": [],
            "arguments": {
                "client": [],
                "create_label": []
            }
        },
        "test_get_label_has_state": {
            "name": "test_get_label_has_state",
            "location": 173,
            "return": [],
            "arguments": {
                "client": [],
                "create_label": []
            }
        },
        "test_get_label_404_for_not_found_label": {
            "name": "test_get_label_404_for_not_found_label",
            "location": 180,
            "return": [],
            "arguments": {
                "client": [],
                "create_label": []
            }
        },
        "test_get_label_404_for_not_found_state_machine": {
            "name": "test_get_label_404_for_not_found_state_machine",
            "location": 185,
            "return": [],
            "arguments": {
                "client": [],
                "create_label": []
            }
        },
        "test_list_labels_404_for_not_found_state_machine": {
            "name": "test_list_labels_404_for_not_found_state_machine",
            "location": 191,
            "return": [],
            "arguments": {
                "client": [],
                "create_label": []
            }
        },
        "test_list_labels_when_none": {
            "name": "test_list_labels_when_none",
            "location": 196,
            "return": [],
            "arguments": {
                "client": [],
                "create_label": []
            }
        },
        "test_list_labels_includes_link_to_create_labels": {
            "name": "test_list_labels_includes_link_to_create_labels",
            "location": 202,
            "return": [],
            "arguments": {
                "client": [],
                "create_label": []
            }
        },
        "test_list_labels_when_one": {
            "name": "test_list_labels_when_one",
            "location": 211,
            "return": [],
            "arguments": {
                "client": [],
                "create_label": []
            }
        },
        "test_list_labels_when_many": {
            "name": "test_list_labels_when_many",
            "location": 218,
            "return": [],
            "arguments": {
                "client": [],
                "create_label": []
            }
        },
        "test_update_label_moves_label": {
            "name": "test_update_label_moves_label",
            "location": 227,
            "return": [],
            "arguments": {
                "client": [],
                "create_label": [],
                "app": [],
                "mock_webhook": [],
                "mock_test_feed": [],
                "current_state": []
            }
        },
        "test_delete_existing_label": {
            "name": "test_delete_existing_label",
            "location": 243,
            "return": [],
            "arguments": {
                "client": [],
                "app": [],
                "create_label": []
            }
        },
        "test_delete_non_existent_label": {
            "name": "test_delete_non_existent_label",
            "location": 271,
            "return": [],
            "arguments": {
                "client": [],
                "app": []
            }
        },
        "test_delete_label_404_for_not_found_state_machine": {
            "name": "test_delete_label_404_for_not_found_state_machine",
            "location": 286,
            "return": [],
            "arguments": {
                "client": []
            }
        },
        "test_list_labels_excludes_deleted_labels": {
            "name": "test_list_labels_excludes_deleted_labels",
            "location": 294,
            "return": [],
            "arguments": {
                "client": [],
                "create_label": [],
                "create_deleted_label": [],
                "app": []
            }
        },
        "test_get_label_410_for_deleted_label": {
            "name": "test_get_label_410_for_deleted_label",
            "location": 308,
            "return": [],
            "arguments": {
                "client": [],
                "create_deleted_label": [],
                "app": []
            }
        },
        "test_create_label_409_for_deleted_label": {
            "name": "test_create_label_409_for_deleted_label",
            "location": 319,
            "return": [],
            "arguments": {
                "client": [],
                "create_label": []
            }
        },
        "test_update_label_410_for_deleted_label": {
            "name": "test_update_label_410_for_deleted_label",
            "location": 329,
            "return": [],
            "arguments": {
                "client": [],
                "create_deleted_label": [],
                "app": []
            }
        }
    },
    "routemaster-master/routemaster/server/tests/test_propagate_exceptions.py": {
        "test_propagate_exceptions_is_enabled": {
            "name": "test_propagate_exceptions_is_enabled",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "routemaster-master/routemaster/state_machine/actions.py": {
        "process_action": {
            "name": "process_action",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "_calculate_idempotency_token": {
            "name": "_calculate_idempotency_token",
            "location": 98,
            "return": [
                "int",
                "str",
                "Iterable[int]",
                "Optional[str]"
            ],
            "arguments": {
                "label": [
                    "routemaster.state_machine.types.LabelRef",
                    "str",
                    "dict",
                    "Iterable[Any]"
                ],
                "latest_history": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "routemaster-master/routemaster/state_machine/api.py": {
        "list_labels": {
            "name": "list_labels",
            "location": 37,
            "return": [
                "typing.Iterable[routemaster.state_machine.types.LabelRef]"
            ],
            "arguments": {
                "app": [
                    "routemaster.app.App",
                    "routemaster.config.StateMachine",
                    "str"
                ],
                "state_machine": [
                    "routemaster.config.StateMachine",
                    "routemaster.app.App",
                    "Mapping",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_label_state": {
            "name": "get_label_state",
            "location": 50,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "Optional[Any]"
            ],
            "arguments": {
                "app": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ],
                "label": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Callable"
                ]
            }
        },
        "get_label_metadata": {
            "name": "get_label_metadata",
            "location": 56,
            "return": [
                "str",
                "float",
                "db.models.Article",
                "bool",
                "List[db.models.Name]"
            ],
            "arguments": {
                "app": [
                    "Dict[str, Any]"
                ],
                "label": [
                    "Optional[int]",
                    "str",
                    "Type"
                ]
            }
        },
        "create_label": {
            "name": "create_label",
            "location": 73,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "app": [
                    "str"
                ],
                "label": [
                    "str"
                ],
                "metadata": [
                    "routemaster.state_machine.types.Metadata",
                    "dict",
                    "str"
                ]
            }
        },
        "update_metadata_for_label": {
            "name": "update_metadata_for_label",
            "location": 104,
            "return": [
                "set",
                "Iterable[str]",
                "Sequence[str]",
                "float",
                "str"
            ],
            "arguments": {
                "app": [
                    "routemaster.state_machine.types.LabelRef",
                    "routemaster.state_machine.types.Metadata",
                    "routemaster.app.App",
                    "rotkehlchen.db.dbhandler.DBHandler",
                    "rotkehlchen.db.utils.BlockchainAccounts"
                ],
                "label": [
                    "routemaster.state_machine.types.Metadata"
                ],
                "update": [
                    "routemaster.state_machine.types.Metadata",
                    "routemaster.state_machine.types.LabelRef",
                    "routemaster.app.App",
                    "raiden.utils.List[raiden.utils.TokenAddress]"
                ]
            }
        },
        "_process_transitions_for_metadata_update": {
            "name": "_process_transitions_for_metadata_update",
            "location": 157,
            "return": [
                "ops.Gate",
                "Union[tuple, list]",
                "List[int]",
                "str",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "app": [
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "label": [
                    "Optional[str]",
                    "Mapping[str, str]",
                    "Optional[Dict[str, str]]",
                    "dict"
                ],
                "state_machine": [
                    "django.db.models.query.QuerySet",
                    "routemaster.state_machine.types.LabelRef",
                    "metrics_backend.utils.Address",
                    "routemaster.app.App"
                ],
                "state_pending_update": [
                    "routemaster.config.State",
                    "homeassistancore.State",
                    "Dict[int, dict]",
                    "str"
                ]
            }
        },
        "delete_label": {
            "name": "delete_label",
            "location": 192,
            "return": [
                "ops.Gate",
                "List[django.db.models.Model]",
                "mypy.types.Instance",
                "app.models.Article"
            ],
            "arguments": {
                "app": [
                    "db.Db"
                ],
                "label": [
                    "db.Db"
                ]
            }
        },
        "process_cron": {
            "name": "process_cron",
            "location": 243,
            "return": [
                ""
            ],
            "arguments": {
                "process": [
                    "abilian.app.Application",
                    "metrics_backend.utils.Address",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ],
                "get_labels": [
                    "bool",
                    "bytes",
                    "Iterable['Notification']",
                    "\"Namespace\"",
                    "float",
                    "Optional[Any]"
                ],
                "app": [
                    "Optional[Any]",
                    "faustypes.app.AppT",
                    "Callable[[Dict], None]",
                    "dict",
                    "str"
                ],
                "state_machine": [
                    "bool",
                    "Type[T]",
                    "Optional[Any]",
                    "int"
                ],
                "state": []
            }
        },
        "LabelStateProcessor.__call__": {
            "name": "__call__",
            "location": 227,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LabelStateProcessor.__name__": {
            "name": "__name__",
            "location": 238,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "routemaster-master/routemaster/state_machine/exceptions.py": {},
    "routemaster-master/routemaster/state_machine/gates.py": {
        "process_gate": {
            "name": "process_gate",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "routemaster-master/routemaster/state_machine/transitions.py": {
        "process_transitions": {
            "name": "process_transitions",
            "location": 23,
            "return": [
                "Union[tuple, list]",
                "ops.Gate",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "app": [
                    "routemaster.app.App",
                    "routemaster.state_machine.types.LabelRef",
                    "int",
                    "dict",
                    "Dict[str, str]",
                    "str"
                ],
                "label": [
                    "routemaster.app.App",
                    "routemaster.state_machine.types.LabelRef",
                    "int",
                    "dict",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "process_transitions._transition": {
            "name": "_transition",
            "location": 35,
            "return": [
                "bool",
                "float",
                "Optional[str]",
                "game.board.Action",
                "int"
            ],
            "arguments": {}
        }
    },
    "routemaster-master/routemaster/state_machine/types.py": {},
    "routemaster-master/routemaster/state_machine/utils.py": {
        "get_state_machine": {
            "name": "get_state_machine",
            "location": 24,
            "return": [
                "int",
                "App"
            ],
            "arguments": {
                "app": [
                    "str",
                    "bool"
                ],
                "label": [
                    "str",
                    "bool"
                ]
            }
        },
        "choose_next_state": {
            "name": "choose_next_state",
            "location": 32,
            "return": [
                "str",
                "bool",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "state_machine": [
                    "str"
                ],
                "current_state": [
                    "int",
                    "list"
                ],
                "context": [
                    "int",
                    "list"
                ]
            }
        },
        "get_label_metadata": {
            "name": "get_label_metadata",
            "location": 42,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "app": [
                    "app.models.models.User",
                    "Optional[Any]"
                ],
                "label": [
                    "app.models.models.User",
                    "Optional[Any]"
                ],
                "state_machine": [
                    "app.models.models.User",
                    "Optional[Any]"
                ]
            }
        },
        "get_current_state": {
            "name": "get_current_state",
            "location": 54,
            "return": [
                "Dict[str, mypy.build.State]",
                "Optional[str]",
                "str",
                "Optional[Dict[str, Any]]",
                "List[\"InlineContent\"]"
            ],
            "arguments": {
                "app": [
                    "sqlalchemy.Table"
                ],
                "label": [
                    "sqlalchemy.Table"
                ],
                "state_machine": []
            }
        },
        "get_current_history": {
            "name": "get_current_history",
            "location": 67,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "app": [
                    "str",
                    "Iterable[str]",
                    "List[str]",
                    "bool",
                    "dict"
                ],
                "label": [
                    "str",
                    "Iterable[str]",
                    "List[str]",
                    "bool",
                    "dict"
                ]
            }
        },
        "needs_gate_evaluation_for_metadata_change": {
            "name": "needs_gate_evaluation_for_metadata_change",
            "location": 86,
            "return": [
                "bool"
            ],
            "arguments": {
                "app": [
                    "int",
                    "rotkehlchen.db.dbhandler.DBHandler",
                    "rotkehlchen.db.utils.BlockchainAccounts"
                ],
                "state_machine": [
                    "int",
                    "rotkehlchen.db.dbhandler.DBHandler",
                    "rotkehlchen.db.utils.BlockchainAccounts"
                ],
                "label": [
                    "int"
                ],
                "update": [
                    "dict",
                    "int"
                ]
            }
        },
        "lock_label": {
            "name": "lock_label",
            "location": 117,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "app": [
                    "Optional[str]"
                ],
                "label": [
                    "str"
                ]
            }
        },
        "labels_in_state": {
            "name": "labels_in_state",
            "location": 130,
            "return": [
                "bool",
                "int",
                "Dict[str, bool]"
            ],
            "arguments": {
                "app": [
                    "List[List[int]]",
                    "Optional[str]",
                    "str"
                ],
                "state_machine": [
                    "List[List[int]]",
                    "Optional[str]",
                    "str"
                ],
                "state": [
                    "List[List[int]]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "labels_in_state_with_metadata": {
            "name": "labels_in_state_with_metadata",
            "location": 139,
            "return": [
                "bool",
                "int",
                "Dict[str, bool]"
            ],
            "arguments": {
                "app": [
                    "int"
                ],
                "state_machine": [
                    "int"
                ],
                "state": [
                    "int"
                ],
                "path": [
                    "str",
                    "Callable",
                    "bool",
                    "Optional[bool]",
                    "Tuple[str]",
                    "list",
                    "Union[Dict[str, Any], List[Any]]"
                ],
                "values": [
                    "int"
                ]
            }
        },
        "labels_needing_metadata_update_retry_in_gate": {
            "name": "labels_needing_metadata_update_retry_in_gate",
            "location": 167,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "app": [
                    "str"
                ],
                "state_machine": [
                    "str"
                ],
                "state": [
                    "dict",
                    "sqlalchemy.orm.Session",
                    "str",
                    "Dict[str, Tuple[Any, Any, Any]]"
                ]
            }
        },
        "_labels_in_state": {
            "name": "_labels_in_state",
            "location": 187,
            "return": [
                "List[str]",
                "list",
                "Optional[dict]",
                "int"
            ],
            "arguments": {
                "app": [
                    "sqlalchemy.exdeclarative.DeclarativeMeta",
                    "routemaster.app.App",
                    "str"
                ],
                "state_machine": [
                    "sqlalchemy.exdeclarative.DeclarativeMeta",
                    "routemaster.app.App",
                    "str"
                ],
                "state": [
                    "str",
                    "sqlalchemy.orm.scoped_session"
                ],
                "filter_": [
                    "str",
                    "sqlalchemy.orm.scoped_session"
                ]
            }
        },
        "context_for_label": {
            "name": "context_for_label",
            "location": 222,
            "return": [
                "str"
            ],
            "arguments": {
                "label": [
                    "bool"
                ],
                "metadata": [
                    "bool"
                ],
                "state_machine": [
                    "int",
                    "Callable",
                    "str"
                ],
                "state": [
                    "int",
                    "Callable",
                    "str"
                ],
                "history_entry": [
                    "bool"
                ],
                "logger": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "context_for_label.feed_logging_context": {
            "name": "feed_logging_context",
            "location": 240,
            "return": [
                ""
            ],
            "arguments": {
                "feed_url": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "List[str]",
                    "Dict[str, str]",
                    "int"
                ]
            }
        }
    },
    "routemaster-master/routemaster/state_machine/__init__.py": {},
    "routemaster-master/routemaster/state_machine/tests/test_actions.py": {
        "test_actions_are_run_and_states_advanced": {
            "name": "test_actions_are_run_and_states_advanced",
            "location": 13,
            "return": [],
            "arguments": {
                "app": [],
                "create_label": [],
                "mock_webhook": [],
                "assert_history": []
            }
        },
        "test_actions_do_not_advance_state_on_fail": {
            "name": "test_actions_do_not_advance_state_on_fail",
            "location": 46,
            "return": [],
            "arguments": {
                "app": [],
                "create_label": [],
                "mock_webhook": [],
                "assert_history": []
            }
        },
        "test_actions_do_not_advance_if_label_in_wrong_state": {
            "name": "test_actions_do_not_advance_if_label_in_wrong_state",
            "location": 77,
            "return": [],
            "arguments": {
                "app": [],
                "create_label": [],
                "mock_webhook": [],
                "assert_history": []
            }
        },
        "test_actions_retries_use_same_idempotency_token": {
            "name": "test_actions_retries_use_same_idempotency_token",
            "location": 100,
            "return": [],
            "arguments": {
                "app": [],
                "create_label": [],
                "mock_webhook": [],
                "assert_history": []
            }
        },
        "test_different_actions_use_different_idempotency_tokens": {
            "name": "test_different_actions_use_different_idempotency_tokens",
            "location": 162,
            "return": [],
            "arguments": {
                "app": [],
                "create_label": [],
                "mock_webhook": [],
                "assert_history": []
            }
        },
        "test_action_retry_trigger_continues_as_far_as_possible": {
            "name": "test_action_retry_trigger_continues_as_far_as_possible",
            "location": 206,
            "return": [],
            "arguments": {
                "app": [],
                "create_label": [],
                "mock_webhook": [],
                "assert_history": []
            }
        },
        "test_process_action_does_not_work_for_deleted_label": {
            "name": "test_process_action_does_not_work_for_deleted_label",
            "location": 251,
            "return": [],
            "arguments": {
                "app": [],
                "create_deleted_label": [],
                "assert_history": []
            }
        },
        "test_process_action": {
            "name": "test_process_action",
            "location": 271,
            "return": [],
            "arguments": {
                "app": [],
                "create_label": [],
                "mock_webhook": [],
                "assert_history": []
            }
        },
        "test_process_action_leaves_label_in_action_if_webhook_fails": {
            "name": "test_process_action_leaves_label_in_action_if_webhook_fails",
            "location": 302,
            "return": [],
            "arguments": {
                "app": [],
                "create_label": [],
                "mock_webhook": [],
                "assert_history": []
            }
        },
        "test_process_action_fails_retry_works": {
            "name": "test_process_action_fails_retry_works",
            "location": 332,
            "return": [],
            "arguments": {
                "app": [],
                "create_label": [],
                "mock_webhook": [],
                "assert_history": []
            }
        },
        "test_actions_retries_use_same_idempotency_token.persist_token": {
            "name": "persist_token",
            "location": 105,
            "return": [],
            "arguments": {
                "url": [],
                "content_type": [],
                "data": [],
                "token": [],
                "logger": []
            }
        },
        "test_different_actions_use_different_idempotency_tokens.persist_token": {
            "name": "persist_token",
            "location": 167,
            "return": [],
            "arguments": {
                "url": [],
                "content_type": [],
                "data": [],
                "token": [],
                "logger": []
            }
        }
    },
    "routemaster-master/routemaster/state_machine/tests/test_gates.py": {
        "test_wont_process_deleted_label": {
            "name": "test_wont_process_deleted_label",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "app": [],
                "create_deleted_label": [
                    "str",
                    "dict"
                ],
                "assert_history": [
                    "Callable[[int], Tuple]",
                    "bool",
                    "Optional[Iterable[Any]]",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "test_process_gate_eligible": {
            "name": "test_process_gate_eligible",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "app": [],
                "mock_test_feed": [
                    "Callable"
                ],
                "assert_history": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "test_process_gate_not_eligible": {
            "name": "test_process_gate_not_eligible",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "app": [],
                "mock_test_feed": [
                    "Callable"
                ],
                "assert_history": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        }
    },
    "routemaster-master/routemaster/state_machine/tests/test_state_machine.py": {
        "metadata_triggers_processed": {
            "name": "metadata_triggers_processed",
            "location": 18,
            "return": [],
            "arguments": {
                "app": [],
                "label": []
            }
        },
        "test_label_get_state": {
            "name": "test_label_get_state",
            "location": 28,
            "return": [],
            "arguments": {
                "app": [],
                "mock_test_feed": []
            }
        },
        "test_label_get_state_raises_for_unknown_label": {
            "name": "test_label_get_state_raises_for_unknown_label",
            "location": 41,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "test_label_get_state_raises_for_unknown_state_machine": {
            "name": "test_label_get_state_raises_for_unknown_state_machine",
            "location": 47,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "test_state_machine_simple": {
            "name": "test_state_machine_simple",
            "location": 53,
            "return": [],
            "arguments": {
                "app": [],
                "mock_test_feed": []
            }
        },
        "test_update_metadata_for_label_raises_for_unknown_state_machine": {
            "name": "test_update_metadata_for_label_raises_for_unknown_state_machine",
            "location": 72,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "test_state_machine_progresses_on_update": {
            "name": "test_state_machine_progresses_on_update",
            "location": 78,
            "return": [],
            "arguments": {
                "app": [],
                "mock_webhook": [],
                "mock_test_feed": [],
                "current_state": []
            }
        },
        "test_state_machine_progresses_automatically": {
            "name": "test_state_machine_progresses_automatically",
            "location": 102,
            "return": [],
            "arguments": {
                "app": [],
                "mock_webhook": [],
                "mock_test_feed": [],
                "current_state": []
            }
        },
        "test_state_machine_does_not_progress_when_not_eligible": {
            "name": "test_state_machine_does_not_progress_when_not_eligible",
            "location": 116,
            "return": [],
            "arguments": {
                "app": [],
                "mock_test_feed": [],
                "current_state": []
            }
        },
        "test_stays_in_gate_if_gate_processing_fails": {
            "name": "test_stays_in_gate_if_gate_processing_fails",
            "location": 138,
            "return": [],
            "arguments": {
                "app": [],
                "mock_test_feed": [],
                "current_state": []
            }
        },
        "test_concurrent_metadata_update_gate_evaluations_dont_race": {
            "name": "test_concurrent_metadata_update_gate_evaluations_dont_race",
            "location": 164,
            "return": [],
            "arguments": {
                "create_label": [],
                "app": [],
                "assert_history": [],
                "current_state": []
            }
        },
        "test_metadata_update_gate_evaluations_dont_process_subsequent_metadata_triggered_gate": {
            "name": "test_metadata_update_gate_evaluations_dont_process_subsequent_metadata_triggered_gate",
            "location": 195,
            "return": [],
            "arguments": {
                "create_label": [],
                "app": [],
                "assert_history": [],
                "current_state": []
            }
        },
        "test_metadata_update_gate_evaluations_dont_race_processing_subsequent_metadata_triggered_gate": {
            "name": "test_metadata_update_gate_evaluations_dont_race_processing_subsequent_metadata_triggered_gate",
            "location": 215,
            "return": [],
            "arguments": {
                "create_label": [],
                "app": [],
                "assert_history": []
            }
        },
        "test_maintains_updated_field_on_label": {
            "name": "test_maintains_updated_field_on_label",
            "location": 243,
            "return": [],
            "arguments": {
                "app": [],
                "mock_test_feed": []
            }
        },
        "test_continues_after_time_since_entering_gate": {
            "name": "test_continues_after_time_since_entering_gate",
            "location": 277,
            "return": [],
            "arguments": {
                "app": [],
                "current_state": []
            }
        },
        "test_delete_label": {
            "name": "test_delete_label",
            "location": 311,
            "return": [],
            "arguments": {
                "app": [],
                "assert_history": [],
                "mock_test_feed": []
            }
        },
        "test_delete_label_idempotent": {
            "name": "test_delete_label_idempotent",
            "location": 331,
            "return": [],
            "arguments": {
                "app": [],
                "assert_history": [],
                "mock_test_feed": []
            }
        },
        "test_delete_label_only_deletes_target_label": {
            "name": "test_delete_label_only_deletes_target_label",
            "location": 352,
            "return": [],
            "arguments": {
                "app": [],
                "assert_history": [],
                "mock_test_feed": []
            }
        },
        "test_handles_label_state_change_race_condition": {
            "name": "test_handles_label_state_change_race_condition",
            "location": 374,
            "return": [],
            "arguments": {
                "app": [],
                "create_deleted_label": []
            }
        }
    },
    "routemaster-master/routemaster/state_machine/tests/test_state_machine_utils.py": {
        "test_get_current_state": {
            "name": "test_get_current_state",
            "location": 24,
            "return": [],
            "arguments": {
                "app": [],
                "create_label": []
            }
        },
        "test_get_current_state_for_deleted_label": {
            "name": "test_get_current_state_for_deleted_label",
            "location": 32,
            "return": [],
            "arguments": {
                "app": [],
                "create_deleted_label": []
            }
        },
        "test_get_current_state_for_label_in_invalid_state": {
            "name": "test_get_current_state_for_label_in_invalid_state",
            "location": 39,
            "return": [],
            "arguments": {
                "custom_app": [],
                "create_label": []
            }
        },
        "test_get_state_machine": {
            "name": "test_get_state_machine",
            "location": 75,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "test_get_state_machine_not_found": {
            "name": "test_get_state_machine_not_found",
            "location": 81,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "test_needs_gate_evaluation_for_metadata_change": {
            "name": "test_needs_gate_evaluation_for_metadata_change",
            "location": 87,
            "return": [],
            "arguments": {
                "app": [],
                "create_label": []
            }
        },
        "test_needs_gate_evaluation_for_metadata_change_errors_on_deleted_label": {
            "name": "test_needs_gate_evaluation_for_metadata_change_errors_on_deleted_label",
            "location": 113,
            "return": [],
            "arguments": {
                "app": [],
                "create_deleted_label": []
            }
        },
        "test_does_not_need_gate_evaluation_for_metadata_change_with_action": {
            "name": "test_does_not_need_gate_evaluation_for_metadata_change_with_action",
            "location": 129,
            "return": [],
            "arguments": {
                "app": [],
                "create_label": [],
                "mock_webhook": []
            }
        },
        "test_context_for_label_in_gate_created_with_correct_variables": {
            "name": "test_context_for_label_in_gate_created_with_correct_variables",
            "location": 154,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "test_context_for_label_in_action_created_with_correct_variables": {
            "name": "test_context_for_label_in_action_created_with_correct_variables",
            "location": 189,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "test_labels_needing_metadata_update_retry_in_gate": {
            "name": "test_labels_needing_metadata_update_retry_in_gate",
            "location": 220,
            "return": [],
            "arguments": {
                "app": [],
                "mock_test_feed": [],
                "create_label": [],
                "create_deleted_label": [],
                "current_state": []
            }
        },
        "test_labels_in_state": {
            "name": "test_labels_in_state",
            "location": 253,
            "return": [],
            "arguments": {
                "app": [],
                "mock_test_feed": [],
                "mock_webhook": [],
                "create_label": [],
                "create_deleted_label": [],
                "current_state": []
            }
        },
        "test_labels_in_state_with_metadata": {
            "name": "test_labels_in_state_with_metadata",
            "location": 280,
            "return": [],
            "arguments": {
                "app": [],
                "mock_test_feed": [],
                "mock_webhook": [],
                "create_label": [],
                "create_deleted_label": [],
                "current_state": []
            }
        },
        "test_labels_in_state_with_metadata_nested": {
            "name": "test_labels_in_state_with_metadata_nested",
            "location": 313,
            "return": [],
            "arguments": {
                "app": [],
                "mock_test_feed": [],
                "mock_webhook": [],
                "create_label": [],
                "create_deleted_label": [],
                "current_state": []
            }
        }
    },
    "routemaster-master/routemaster/state_machine/tests/test_transitions.py": {
        "test_cannot_infinite_loop": {
            "name": "test_cannot_infinite_loop",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "app": [],
                "create_label": [
                    "Callable"
                ],
                "set_metadata": [
                    "str"
                ]
            }
        },
        "test_stops_on_delete": {
            "name": "test_stops_on_delete",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "app": [],
                "create_label": [
                    "Callable"
                ],
                "set_metadata": [
                    "bool"
                ]
            }
        }
    },
    "routemaster-master/routemaster/tests/test_app.py": {
        "test_app_cannot_rollback_in_no_session": {
            "name": "test_app_cannot_rollback_in_no_session",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "app": []
            }
        },
        "test_explicit_rollback": {
            "name": "test_explicit_rollback",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "app": []
            }
        },
        "test_unhandled_exceptions_rollback": {
            "name": "test_unhandled_exceptions_rollback",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "app": []
            }
        },
        "test_app_caches_webhook_runners": {
            "name": "test_app_caches_webhook_runners",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "routemaster.app.App"
                ]
            }
        },
        "test_no_session_when_not_in_transaction": {
            "name": "test_no_session_when_not_in_transaction",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "app": []
            }
        },
        "test_cannot_nest_sessions": {
            "name": "test_cannot_nest_sessions",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "bool"
                ]
            }
        }
    },
    "routemaster-master/routemaster/tests/test_cli.py": {
        "test_cli_with_no_config_fails": {
            "name": "test_cli_with_no_config_fails",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "app_env": []
            }
        },
        "test_cli_with_trivial_config": {
            "name": "test_cli_with_trivial_config",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "app_env": []
            }
        },
        "test_cli_with_invalid_config_fails": {
            "name": "test_cli_with_invalid_config_fails",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "app_env": []
            }
        },
        "test_cli_with_unloadable_config_fails": {
            "name": "test_cli_with_unloadable_config_fails",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "app_env": []
            }
        },
        "test_cli_with_invalid_config_cannot_serve": {
            "name": "test_cli_with_invalid_config_cannot_serve",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "app_env": []
            }
        }
    },
    "routemaster-master/routemaster/tests/test_context.py": {
        "test_context_does_not_accept_naive_datetimes": {
            "name": "test_context_does_not_accept_naive_datetimes",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "make_context": [
                    "datetime.date.time",
                    "int",
                    "Optional[str]",
                    "datetime.timedelta"
                ]
            }
        },
        "test_finds_path_in_context": {
            "name": "test_finds_path_in_context",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "make_context": []
            }
        },
        "test_returns_none_for_unknown_prefix": {
            "name": "test_returns_none_for_unknown_prefix",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "make_context": [
                    "str"
                ]
            }
        },
        "test_returns_none_for_unknown_metadata_variable": {
            "name": "test_returns_none_for_unknown_metadata_variable",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "make_context": [
                    "str"
                ]
            }
        },
        "test_accesses_variable_in_feed": {
            "name": "test_accesses_variable_in_feed",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "make_context": []
            }
        },
        "test_only_loads_feed_once": {
            "name": "test_only_loads_feed_once",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "make_context": []
            }
        },
        "test_non_existent_feed_is_none": {
            "name": "test_non_existent_feed_is_none",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "make_context": []
            }
        },
        "test_non_existent_history_variable_is_none": {
            "name": "test_non_existent_history_variable_is_none",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "make_context": []
            }
        },
        "test_accessing_prefix_directly_does_not_error": {
            "name": "test_accessing_prefix_directly_does_not_error",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "make_context": [
                    "str"
                ]
            }
        }
    },
    "routemaster-master/routemaster/tests/test_cron.py": {
        "create_app": {
            "name": "create_app",
            "location": 22,
            "return": [],
            "arguments": {
                "custom_app": [],
                "states": []
            }
        },
        "test_action_once_per_minute": {
            "name": "test_action_once_per_minute",
            "location": 34,
            "return": [],
            "arguments": {
                "custom_app": []
            }
        },
        "test_gate_at_fixed_time": {
            "name": "test_gate_at_fixed_time",
            "location": 61,
            "return": [],
            "arguments": {
                "custom_app": []
            }
        },
        "test_gate_at_fixed_time_with_specific_timezone": {
            "name": "test_gate_at_fixed_time_with_specific_timezone",
            "location": 93,
            "return": [],
            "arguments": {
                "custom_app": []
            }
        },
        "test_gate_at_fixed_time_with_specific_timezone_other_time": {
            "name": "test_gate_at_fixed_time_with_specific_timezone_other_time",
            "location": 128,
            "return": [],
            "arguments": {
                "custom_app": []
            }
        },
        "test_gate_at_fixed_time_with_metadata_timezone": {
            "name": "test_gate_at_fixed_time_with_metadata_timezone",
            "location": 163,
            "return": [],
            "arguments": {
                "custom_app": []
            }
        },
        "test_gate_at_fixed_time_with_metadata_timezone_other_time": {
            "name": "test_gate_at_fixed_time_with_metadata_timezone_other_time",
            "location": 198,
            "return": [],
            "arguments": {
                "custom_app": []
            }
        },
        "test_gate_at_interval": {
            "name": "test_gate_at_interval",
            "location": 233,
            "return": [],
            "arguments": {
                "custom_app": []
            }
        },
        "test_gate_metadata_retry": {
            "name": "test_gate_metadata_retry",
            "location": 265,
            "return": [],
            "arguments": {
                "custom_app": []
            }
        },
        "test_cron_job_gracefully_exit_signalling": {
            "name": "test_cron_job_gracefully_exit_signalling",
            "location": 297,
            "return": [],
            "arguments": {
                "custom_app": []
            }
        },
        "test_cron_job_does_not_forward_exceptions": {
            "name": "test_cron_job_does_not_forward_exceptions",
            "location": 333,
            "return": [],
            "arguments": {
                "custom_app": []
            }
        },
        "test_action_once_per_minute.processor": {
            "name": "processor",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "test_gate_at_fixed_time.processor": {
            "name": "processor",
            "location": 70,
            "return": [],
            "arguments": {}
        },
        "test_gate_at_fixed_time_with_specific_timezone.processor": {
            "name": "processor",
            "location": 105,
            "return": [],
            "arguments": {}
        },
        "test_gate_at_fixed_time_with_specific_timezone_other_time.processor": {
            "name": "processor",
            "location": 140,
            "return": [],
            "arguments": {}
        },
        "test_gate_at_fixed_time_with_metadata_timezone.processor": {
            "name": "processor",
            "location": 175,
            "return": [],
            "arguments": {}
        },
        "test_gate_at_fixed_time_with_metadata_timezone_other_time.processor": {
            "name": "processor",
            "location": 210,
            "return": [],
            "arguments": {}
        },
        "test_gate_at_interval.processor": {
            "name": "processor",
            "location": 242,
            "return": [],
            "arguments": {}
        },
        "test_gate_metadata_retry.processor": {
            "name": "processor",
            "location": 274,
            "return": [],
            "arguments": {}
        },
        "test_cron_job_gracefully_exit_signalling.is_terminating": {
            "name": "is_terminating",
            "location": 309,
            "return": [],
            "arguments": {}
        },
        "test_cron_job_gracefully_exit_signalling.processor": {
            "name": "processor",
            "location": 312,
            "return": [],
            "arguments": {
                "app": [],
                "state": [],
                "state_machine": [],
                "label": []
            }
        },
        "test_cron_job_does_not_forward_exceptions.raise_value_error": {
            "name": "raise_value_error",
            "location": 347,
            "return": [],
            "arguments": {}
        },
        "test_cron_job_does_not_forward_exceptions.processor": {
            "name": "processor",
            "location": 351,
            "return": [],
            "arguments": {}
        }
    },
    "routemaster-master/routemaster/tests/test_cron_processors.py": {
        "mock_cron_processors_functools_partial": {
            "name": "mock_cron_processors_functools_partial",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "recently": {
            "name": "recently",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "test_timezone_aware_processor_repr": {
            "name": "test_timezone_aware_processor_repr",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "test_timezone_aware_processor_runs_on_time": {
            "name": "test_timezone_aware_processor_runs_on_time",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "test_timezone_aware_processor_runs_on_time_other_timezone": {
            "name": "test_timezone_aware_processor_runs_on_time_other_timezone",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "test_timezone_aware_processor_doesnt_run_when_timezone_doesnt_match": {
            "name": "test_timezone_aware_processor_doesnt_run_when_timezone_doesnt_match",
            "location": 80,
            "return": [],
            "arguments": {}
        },
        "test_timezone_aware_processor_doesnt_run_at_wrong_time": {
            "name": "test_timezone_aware_processor_doesnt_run_at_wrong_time",
            "location": 93,
            "return": [],
            "arguments": {}
        },
        "test_timezone_aware_processor_runs_if_delayed_since_construction": {
            "name": "test_timezone_aware_processor_runs_if_delayed_since_construction",
            "location": 106,
            "return": [],
            "arguments": {}
        },
        "test_timezone_aware_processor_runs_if_delayed_since_last_run": {
            "name": "test_timezone_aware_processor_runs_if_delayed_since_last_run",
            "location": 119,
            "return": [],
            "arguments": {}
        },
        "test_timezone_aware_processor_doesnt_run_multiple_times": {
            "name": "test_timezone_aware_processor_doesnt_run_multiple_times",
            "location": 136,
            "return": [],
            "arguments": {}
        },
        "test_timezone_aware_processor_doesnt_doesnt_bubble_internal_exceptions": {
            "name": "test_timezone_aware_processor_doesnt_doesnt_bubble_internal_exceptions",
            "location": 156,
            "return": [],
            "arguments": {}
        },
        "test_metadata_timezone_aware_processor_repr": {
            "name": "test_metadata_timezone_aware_processor_repr",
            "location": 185,
            "return": [],
            "arguments": {}
        },
        "test_metadata_timezone_aware_processor_runs_on_time": {
            "name": "test_metadata_timezone_aware_processor_runs_on_time",
            "location": 197,
            "return": [],
            "arguments": {}
        },
        "test_metadata_timezone_aware_processor_runs_on_time_other_timezone": {
            "name": "test_metadata_timezone_aware_processor_runs_on_time_other_timezone",
            "location": 222,
            "return": [],
            "arguments": {}
        },
        "test_metadata_timezone_processor_doesnt_run_at_wrong_time": {
            "name": "test_metadata_timezone_processor_doesnt_run_at_wrong_time",
            "location": 247,
            "return": [],
            "arguments": {}
        },
        "test_metadata_timezone_processor_runs_if_delayed_since_construction": {
            "name": "test_metadata_timezone_processor_runs_if_delayed_since_construction",
            "location": 262,
            "return": [],
            "arguments": {}
        },
        "test_metadata_timezone_processor_runs_if_delayed_since_last_run": {
            "name": "test_metadata_timezone_processor_runs_if_delayed_since_last_run",
            "location": 287,
            "return": [],
            "arguments": {}
        },
        "test_metadata_timezone_processor_doesnt_run_multiply": {
            "name": "test_metadata_timezone_processor_doesnt_run_multiply",
            "location": 317,
            "return": [],
            "arguments": {}
        },
        "test_metadata_timezone_processor_doesnt_bubble_internal_exceptions": {
            "name": "test_metadata_timezone_processor_doesnt_bubble_internal_exceptions",
            "location": 344,
            "return": [],
            "arguments": {}
        }
    },
    "routemaster-master/routemaster/tests/test_feeds.py": {
        "test_feeds_for_state_machine": {
            "name": "test_feeds_for_state_machine",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_fetch_only_once": {
            "name": "test_fetch_only_once",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lookup": {
            "name": "test_lookup",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lookup_fails_on_unfetched_feed": {
            "name": "test_lookup_fails_on_unfetched_feed",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_equality": {
            "name": "test_equality",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "routemaster-master/routemaster/tests/test_gunicorn_application.py": {
        "test_gunicorn_application_can_be_constructed": {
            "name": "test_gunicorn_application_can_be_constructed",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "debug": [
                    "int"
                ]
            }
        }
    },
    "routemaster-master/routemaster/tests/test_layering.py": {
        "build_dependency_graph": {
            "name": "build_dependency_graph",
            "location": 85,
            "return": [],
            "arguments": {}
        },
        "test_layers_are_acyclic": {
            "name": "test_layers_are_acyclic",
            "location": 96,
            "return": [],
            "arguments": {}
        },
        "test_layers": {
            "name": "test_layers",
            "location": 116,
            "return": [],
            "arguments": {}
        }
    },
    "routemaster-master/routemaster/tests/test_middleware.py": {
        "test_session_middleware": {
            "name": "test_session_middleware",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "app": []
            }
        },
        "test_session_middleware_commits_transaction": {
            "name": "test_session_middleware_commits_transaction",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "routemaster.app.App"
                ]
            }
        },
        "test_session_middleware_rolls_back_transaction": {
            "name": "test_session_middleware_rolls_back_transaction",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "routemaster.app.App"
                ]
            }
        },
        "test_session_middleware.server": {
            "name": "server",
            "location": 9,
            "return": [],
            "arguments": {
                "environ": [],
                "start_response": []
            }
        },
        "test_session_middleware_commits_transaction.server": {
            "name": "server",
            "location": 23,
            "return": [],
            "arguments": {
                "environ": [],
                "start_response": []
            }
        },
        "test_session_middleware_rolls_back_transaction.server": {
            "name": "server",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "environ": [],
                "start_response": []
            }
        }
    },
    "routemaster-master/routemaster/tests/test_text_utils.py": {
        "test_join_comma_or_no_items": {
            "name": "test_join_comma_or_no_items",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_join_comma_or_single_item": {
            "name": "test_join_comma_or_single_item",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_join_comma_or_two_items": {
            "name": "test_join_comma_or_two_items",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_join_comma_or_three_items": {
            "name": "test_join_comma_or_three_items",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_join_comma_or_four_items": {
            "name": "test_join_comma_or_four_items",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "routemaster-master/routemaster/tests/test_timezones.py": {
        "test_smoke_get_known_timezones": {
            "name": "test_smoke_get_known_timezones",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "routemaster-master/routemaster/tests/test_time_utils.py": {
        "test_rejects_instantaneous_range": {
            "name": "test_rejects_instantaneous_range",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rejects_negative_range": {
            "name": "test_rejects_negative_range",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_time_appears_in_same_day_range": {
            "name": "test_time_appears_in_same_day_range",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_time_doesnt_appear_in_same_day_range_when_before": {
            "name": "test_time_doesnt_appear_in_same_day_range_when_before",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_time_doesnt_appear_in_same_day_range_when_after": {
            "name": "test_time_doesnt_appear_in_same_day_range_when_after",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_time_appears_in_cross_day_range_later_first_day": {
            "name": "test_time_appears_in_cross_day_range_later_first_day",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_time_appears_in_cross_day_range_early_second_day": {
            "name": "test_time_appears_in_cross_day_range_early_second_day",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_time_doesnt_appear_in_cross_day_range": {
            "name": "test_time_doesnt_appear_in_cross_day_range",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_time_appears_in_multi_day_range_later_first_day": {
            "name": "test_time_appears_in_multi_day_range_later_first_day",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_time_appears_in_multi_day_range_early_last_day": {
            "name": "test_time_appears_in_multi_day_range_early_last_day",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_time_appears_in_multi_day_range_when_appears_outside": {
            "name": "test_time_appears_in_multi_day_range_when_appears_outside",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_time_appears_in_same_day_range_different_timezones": {
            "name": "test_time_appears_in_same_day_range_different_timezones",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_time_doesnt_appear_in_same_day_range_when_before_different_timezones": {
            "name": "test_time_doesnt_appear_in_same_day_range_when_before_different_timezones",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_time_doesnt_appear_in_same_day_range_when_after_different_timezones": {
            "name": "test_time_doesnt_appear_in_same_day_range_when_after_different_timezones",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "routemaster-master/routemaster/tests/test_utils.py": {
        "test_dict_merge_simple": {
            "name": "test_dict_merge_simple",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_dict_merge_deep": {
            "name": "test_dict_merge_deep",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_dict_merge_d2_priority": {
            "name": "test_dict_merge_d2_priority",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_path": {
            "name": "test_get_path",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_suppress_exceptions": {
            "name": "test_suppress_exceptions",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "routemaster-master/routemaster/tests/test_validation.py": {
        "test_valid": {
            "name": "test_valid",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "backup.config.Config"
                ]
            }
        },
        "test_disconnected_state_machine_invalid": {
            "name": "test_disconnected_state_machine_invalid",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "app": []
            }
        },
        "test_non_unique_states_invalid": {
            "name": "test_non_unique_states_invalid",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "app": []
            }
        },
        "test_no_path_from_start_to_end_state_machine_invalid": {
            "name": "test_no_path_from_start_to_end_state_machine_invalid",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "app": []
            }
        },
        "test_nonexistent_node_destination_invalid": {
            "name": "test_nonexistent_node_destination_invalid",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "app": []
            }
        },
        "test_label_in_deleted_state_invalid": {
            "name": "test_label_in_deleted_state_invalid",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "bool",
                    "Optional[str]",
                    "str"
                ],
                "create_label": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_label_in_deleted_state_on_per_state_machine_basis": {
            "name": "test_label_in_deleted_state_on_per_state_machine_basis",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "Optional[str]",
                    "str"
                ],
                "create_label": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_example_config_is_valid": {
            "name": "test_example_config_is_valid",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "routemaster-master/routemaster/tests/test_webhook_runner.py": {
        "test_requests_webhook_runner_handles_200_as_success": {
            "name": "test_requests_webhook_runner_handles_200_as_success",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_requests_webhook_runner_handles_204_as_success": {
            "name": "test_requests_webhook_runner_handles_204_as_success",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_requests_webhook_runner_handles_410_as_failure": {
            "name": "test_requests_webhook_runner_handles_410_as_failure",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_requests_webhook_runner_handles_other_failure_modes_as_retry": {
            "name": "test_requests_webhook_runner_handles_other_failure_modes_as_retry",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "status": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "test_requests_webhook_runner_handles_timeout_as_retry": {
            "name": "test_requests_webhook_runner_handles_timeout_as_retry",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_requests_webhook_runner_passes_post_data_through": {
            "name": "test_requests_webhook_runner_passes_post_data_through",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_requests_webhook_runner_for_state_machine_uses_webhook_config": {
            "name": "test_requests_webhook_runner_for_state_machine_uses_webhook_config",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "routemaster.app.App"
                ]
            }
        },
        "test_requests_webhook_runner_for_state_machine_does_not_apply_headers_for_non_matching_url": {
            "name": "test_requests_webhook_runner_for_state_machine_does_not_apply_headers_for_non_matching_url",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "routemaster.app.App"
                ]
            }
        },
        "test_requests_webhook_runner_passes_idempotency_token_through": {
            "name": "test_requests_webhook_runner_passes_idempotency_token_through",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_requests_webhook_runner_handles_timeout_as_retry.raise_retry": {
            "name": "raise_retry",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "routemaster-master/test_data/plugins/logger_plugin.py": {
        "dynamic_logger": {
            "name": "dynamic_logger",
            "location": 30,
            "return": [
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "config": [
                    "str",
                    "float",
                    "set",
                    "int"
                ]
            }
        },
        "TestLogger.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]"
                ]
            }
        },
        "InvalidLogger.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NoArgsLogger.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
{
    "rtv-downloader-master/get_info_rtv.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rtv-downloader-master/get_info_youtubedl.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rtv-downloader-master/setup.py": {},
    "rtv-downloader-master/rtv/cli.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rtv-downloader-master/rtv/exceptions.py": {},
    "rtv-downloader-master/rtv/onetab.py": {
        "get_urls_from_onetab": {
            "name": "get_urls_from_onetab",
            "location": 5,
            "return": [
                "Tuple[int, int]",
                "bool",
                "List[str]",
                "List[Tuple[str, str, str, str]]"
            ],
            "arguments": {
                "onetab": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "rtv-downloader-master/rtv/options.py": {
        "parse_options": {
            "name": "parse_options",
            "location": 24,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]"
            ],
            "arguments": {}
        }
    },
    "rtv-downloader-master/rtv/rtvdownloader.py": {
        "RTVdownloader.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RTVdownloader.load": {
            "name": "load",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "urls": [
                    "Iterable[str]",
                    "str",
                    "list",
                    "Optional[Mapping[str, str]]"
                ]
            }
        },
        "RTVdownloader.download": {
            "name": "download",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rtv-downloader-master/rtv/utils.py": {
        "suppress_stdout": {
            "name": "suppress_stdout",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "validate_url": {
            "name": "validate_url",
            "location": 43,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "url": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "get_domain_name": {
            "name": "get_domain_name",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Callable[[str], str]"
                ]
            }
        },
        "clean_video_data": {
            "name": "clean_video_data",
            "location": 98,
            "return": [
                "Dict[str, List[int]]",
                "Optional[float]",
                "dict",
                "str",
                "int",
                "Optional[Dict[str, Any]]",
                "bytes",
                "float"
            ],
            "arguments": {
                "_data": [
                    "Mapping[str, Union[int, slice]]",
                    "dict",
                    "bytes",
                    "str",
                    "MutableMapping",
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "clean_title": {
            "name": "clean_title",
            "location": 122,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "title": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "clean_filename": {
            "name": "clean_filename",
            "location": 146,
            "return": [
                "bool",
                "str",
                "Set[str]",
                "Optional[str]",
                "list"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "file_exists": {
            "name": "file_exists",
            "location": 162,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "get_ext": {
            "name": "get_ext",
            "location": 176,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "delete_duplicates": {
            "name": "delete_duplicates",
            "location": 193,
            "return": [
                "List[str]",
                "Optional[bool]",
                "Set[str]",
                "str",
                "dict",
                "list"
            ],
            "arguments": {
                "seq": [
                    "str",
                    "Dict[str, int]",
                    "List[str]",
                    "Iterable[dict]",
                    "float"
                ]
            }
        },
        "DevNull.write": {
            "name": "write",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DevNull.flush": {
            "name": "flush",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rtv-downloader-master/rtv/video.py": {
        "Field.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.__get__": {
            "name": "__get__",
            "location": 11,
            "return": [
                "str",
                "int",
                "Optional[cmk.utils.type_defs.HostAddress]",
                "dict",
                "bool",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[Dict]",
                    "bool"
                ],
                "owner": [
                    "Type['Signature']",
                    "Type[Any]"
                ]
            }
        },
        "Field.__set__": {
            "name": "__set__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "bool",
                    "str",
                    "int",
                    "Optional[type]"
                ],
                "value": [
                    "bool",
                    "str",
                    "int",
                    "Optional[type]"
                ]
            }
        },
        "Meta.__new__": {
            "name": "__new__",
            "location": 21,
            "return": [
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "mcs": [
                    "Mapping",
                    "str",
                    "Set[str]"
                ],
                "name": [
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "Any"
                ],
                "bases": [
                    "Mapping",
                    "str",
                    "Set[str]"
                ],
                "class_dict": [
                    "Type",
                    "str"
                ]
            }
        },
        "Video.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "dict",
                    "bool",
                    "Union[bytes, bytearray, memoryview]"
                ]
            }
        },
        "Video.download": {
            "name": "download",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Video.print_data": {
            "name": "print_data",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Video.__str__": {
            "name": "__str__",
            "location": 46,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Video.__repr__": {
            "name": "__repr__",
            "location": 49,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rtv-downloader-master/rtv/__init__.py": {},
    "rtv-downloader-master/rtv/__version__.py": {},
    "rtv-downloader-master/rtv/downloaders/common.py": {
        "VideoDownloader.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "video": [
                    "str",
                    "int",
                    "bool"
                ],
                "quality": [
                    "str",
                    "Optional[str]"
                ],
                "download_dir": [
                    "Optional[str]",
                    "str"
                ],
                "templates": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "VideoDownloader._real_download": {
            "name": "_real_download",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool"
                ]
            }
        },
        "VideoDownloader.download": {
            "name": "download",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoDownloader.render_path": {
            "name": "render_path",
            "location": 37,
            "return": [
                "str",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoDownloader.render_path.UnseenFormatter.get_value": {
            "name": "get_value",
            "location": 45,
            "return": [
                "List[str]",
                "Mapping[int, str]",
                "Dict[int, str]",
                "str",
                "Exception",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "args": [],
                "kwds": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "rtv-downloader-master/rtv/downloaders/youtubedl.py": {
        "YoutubePD._real_download": {
            "name": "_real_download",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool"
                ]
            }
        },
        "YoutubePD._real_download.run": {
            "name": "run",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rtv-downloader-master/rtv/downloaders/__init__.py": {},
    "rtv-downloader-master/rtv/extractors/common.py": {
        "Extractor.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool",
                    "bytes",
                    "int"
                ]
            }
        },
        "Extractor.validate_url": {
            "name": "validate_url",
            "location": 29,
            "return": [
                "Dict[str, Any]",
                "str",
                "Iterable[Tuple[str, str]]",
                "Dict[int, str]",
                "dict",
                "Mapping[int, str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]"
                ],
                "url": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Extractor.load_html": {
            "name": "load_html",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Extractor.get_info": {
            "name": "get_info",
            "location": 40,
            "return": [
                "str",
                "Iterable[Tuple[int, int]]",
                "Callable[[str], str]",
                "bool",
                "Dict[str, 'LabwareDefinition']",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Extractor.update_entries": {
            "name": "update_entries",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "entries": [
                    "bool",
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "List[str]",
                    "List[Dict]"
                ],
                "data": [
                    "dict",
                    "bytes",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "Extractor.extract": {
            "name": "extract",
            "location": 54,
            "return": [
                "Entries"
            ],
            "arguments": {
                "self": []
            }
        },
        "Extractor.run": {
            "name": "run",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericTitleMixin.get_title": {
            "name": "get_title",
            "location": 76,
            "return": [
                "Optional[int]",
                "bool",
                "str",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "dict",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GenericDescriptionMixin.get_description": {
            "name": "get_description",
            "location": 87,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "str",
                "Callable[[], None]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rtv-downloader-master/rtv/extractors/ipla.py": {
        "Ipla.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Ipla._generate_client_id": {
            "name": "_generate_client_id",
            "location": 26,
            "return": [
                "bytes",
                "Callable",
                "Union[Dict, List]",
                "int"
            ],
            "arguments": {
                "length": [
                    "str",
                    "bytes",
                    "float",
                    "int"
                ]
            }
        },
        "Ipla._extract_id": {
            "name": "_extract_id",
            "location": 32,
            "return": [
                "str",
                "int",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ipla._fetch_data": {
            "name": "_fetch_data",
            "location": 41,
            "return": [
                "dict",
                "Dict[str, List[int]]",
                "raiden.utils.signer.Signer",
                "IO[bytes]",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ipla.get_date": {
            "name": "get_date",
            "location": 59,
            "return": [
                "Optional[str]",
                "int",
                "str",
                "datetime.datetime",
                "Sequence[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ipla.get_title": {
            "name": "get_title",
            "location": 72,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ipla.get_showname": {
            "name": "get_showname",
            "location": 78,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ipla.get_real_url": {
            "name": "get_real_url",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ipla.extract": {
            "name": "extract",
            "location": 103,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rtv-downloader-master/rtv/extractors/polsatnews.py": {
        "PolsatNews.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PolsatNews._extract_data": {
            "name": "_extract_data",
            "location": 22,
            "return": [
                "str",
                "int",
                "bytes",
                "List[str]",
                "Union[Dict, Tuple]",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "PolsatNews.get_show_name": {
            "name": "get_show_name",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PolsatNews.get_title": {
            "name": "get_title",
            "location": 37,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PolsatNews.get_date": {
            "name": "get_date",
            "location": 41,
            "return": [
                "Optional[str]",
                "str",
                "datetime.date"
            ],
            "arguments": {
                "self": []
            }
        },
        "PolsatNews.extract": {
            "name": "extract",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rtv-downloader-master/rtv/extractors/polskieradio.py": {
        "PolskieRadio.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PolskieRadio.get_date": {
            "name": "get_date",
            "location": 17,
            "return": [
                "datetime.datetime",
                "datetime.date",
                "str",
                "Optional[datetime.datetime]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PolskieRadio.extract": {
            "name": "extract",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rtv-downloader-master/rtv/extractors/radiozet.py": {
        "RadioZet.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RadioZet.get_entries": {
            "name": "get_entries",
            "location": 19,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RadioZet.get_date": {
            "name": "get_date",
            "location": 50,
            "return": [
                "Optional[str]",
                "int",
                "str",
                "datetime.datetime",
                "Sequence[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "RadioZet.get_title": {
            "name": "get_title",
            "location": 56,
            "return": [
                "str",
                "bool",
                "OrderedDict",
                "bs4.BeautifulSoup",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RadioZet.get_show_name": {
            "name": "get_show_name",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RadioZet.extract": {
            "name": "extract",
            "location": 66,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rtv-downloader-master/rtv/extractors/rmf24.py": {
        "Rmf24.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rmf24.get_date": {
            "name": "get_date",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rmf24.extract_entry": {
            "name": "extract_entry",
            "location": 32,
            "return": [],
            "arguments": {
                "scraped_info": []
            }
        },
        "Rmf24._scrape_entries": {
            "name": "_scrape_entries",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rmf24.extract": {
            "name": "extract",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "rtv-downloader-master/rtv/extractors/tokfm.py": {
        "TokFm.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokFm.get_real_url": {
            "name": "get_real_url",
            "location": 27,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokFm._extract_id": {
            "name": "_extract_id",
            "location": 35,
            "return": [
                "List[str]",
                "str",
                "dict",
                "allennlp.common.util.JsonDict",
                "Iterable[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokFm._process_info": {
            "name": "_process_info",
            "location": 51,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "raw_info": [
                    "dict",
                    "Mapping[str, str]",
                    "str"
                ]
            }
        },
        "TokFm._scrape_info": {
            "name": "_scrape_info",
            "location": 58,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TokFm.extract": {
            "name": "extract",
            "location": 70,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rtv-downloader-master/rtv/extractors/tvn24.py": {
        "Tvn24.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tvn24.get_date": {
            "name": "get_date",
            "location": 18,
            "return": [
                "str",
                "datetime.datetime",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tvn24.extract": {
            "name": "extract",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rtv-downloader-master/rtv/extractors/tvpinfo.py": {
        "TvpInfo.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TvpInfo._extract_id": {
            "name": "_extract_id",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TvpInfo.get_article_url": {
            "name": "get_article_url",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TvpInfo.get_player_url": {
            "name": "get_player_url",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TvpInfo.get_date": {
            "name": "get_date",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TvpInfo.get_title": {
            "name": "get_title",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TvpInfo.get_showname": {
            "name": "get_showname",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TvpInfo.get_description": {
            "name": "get_description",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TvpInfo.extract": {
            "name": "extract",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "rtv-downloader-master/rtv/extractors/tvpparlament.py": {
        "TvpParlament.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TvpParlament._get_json_url": {
            "name": "_get_json_url",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "TvpParlament._fetch_data": {
            "name": "_fetch_data",
            "location": 30,
            "return": [
                "dict",
                "Dict[str, List[int]]",
                "IO[bytes]",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TvpParlament.get_date": {
            "name": "get_date",
            "location": 43,
            "return": [
                "Optional[str]",
                "int",
                "str",
                "datetime.datetime",
                "Sequence[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TvpParlament.get_show_name": {
            "name": "get_show_name",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TvpParlament.extract": {
            "name": "extract",
            "location": 59,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rtv-downloader-master/rtv/extractors/vod.py": {
        "Vod.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Vod.get_date": {
            "name": "get_date",
            "location": 19,
            "return": [
                "datetime.datetime",
                "datetime.date",
                "Optional[datetime.datetime]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vod._extract_headline": {
            "name": "_extract_headline",
            "location": 33,
            "return": [
                "bool",
                "Optional[Sequence[str]]",
                "Optional[Callable]",
                "Optional[Type]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vod.get_show_name": {
            "name": "get_show_name",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vod.get_title": {
            "name": "get_title",
            "location": 53,
            "return": [
                "str",
                "bool",
                "OrderedDict",
                "bs4.BeautifulSoup",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vod.extract": {
            "name": "extract",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rtv-downloader-master/rtv/extractors/vodtvp.py": {
        "VodTVP.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VodTVP.get_date": {
            "name": "get_date",
            "location": 29,
            "return": [
                "datetime.datetime",
                "datetime.date",
                "str",
                "Optional[datetime.datetime]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VodTVP.get_show_name": {
            "name": "get_show_name",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VodTVP.get_title": {
            "name": "get_title",
            "location": 58,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VodTVP.get_description": {
            "name": "get_description",
            "location": 77,
            "return": [
                "str",
                "int",
                "datetime.datetime",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "VodTVP.extract": {
            "name": "extract",
            "location": 89,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rtv-downloader-master/rtv/extractors/wp.py": {
        "Wp.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wp._get_json_url": {
            "name": "_get_json_url",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "mid": [
                    "str"
                ]
            }
        },
        "Wp._fetch_data": {
            "name": "_fetch_data",
            "location": 26,
            "return": [
                "dict",
                "Dict[str, List[int]]",
                "IO[bytes]",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wp.get_title": {
            "name": "get_title",
            "location": 32,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wp.get_description": {
            "name": "get_description",
            "location": 36,
            "return": [
                "str",
                "int",
                "datetime.datetime",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wp.get_tags": {
            "name": "get_tags",
            "location": 40,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wp.get_show_name": {
            "name": "get_show_name",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wp.get_date": {
            "name": "get_date",
            "location": 48,
            "return": [
                "Optional[str]",
                "str",
                "Tuple[str, str]",
                "datetime.date"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wp.quality_comparator": {
            "name": "quality_comparator",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "video_data": [
                    "dict",
                    "Dict[str, str]",
                    "bytes"
                ]
            }
        },
        "Wp.get_real_url": {
            "name": "get_real_url",
            "location": 65,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wp.extract": {
            "name": "extract",
            "location": 71,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wp.quality_comparator.parse_resolution": {
            "name": "parse_resolution",
            "location": 58,
            "return": [
                "Callable"
            ],
            "arguments": {
                "res": [
                    "str",
                    "int",
                    "Union[int, str]"
                ]
            }
        }
    },
    "rtv-downloader-master/rtv/extractors/__init__.py": {},
    "rtv-downloader-master/tests/test_extractors.py": {
        "ExtractorTester.pytest_generate_tests": {
            "name": "pytest_generate_tests",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metafunc": [
                    "bool",
                    "str",
                    "Callable",
                    "float",
                    "common.TestingContext"
                ]
            }
        },
        "ExtractorTester.extractor": {
            "name": "extractor",
            "location": 33,
            "return": [
                "str",
                "Iterator[str]",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "bool"
                ]
            }
        },
        "ExtractorTester.test_url_validation": {
            "name": "test_url_validation",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Optional[Dict]",
                    "Optional[str]",
                    "Optional"
                ]
            }
        },
        "ExtractorTester.test_videos_loaded": {
            "name": "test_videos_loaded",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "extractor": [
                    "rtv.extractors.common.Extractor",
                    "Tuple[int, int]"
                ]
            }
        },
        "ExtractorTester.test_all_videos_have_necessary_data": {
            "name": "test_all_videos_have_necessary_data",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "extractor": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "rtv-downloader-master/tests/test_onetab.py": {
        "test_scraping_urls_from_onetab_link": {
            "name": "test_scraping_urls_from_onetab_link",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "rtv-downloader-master/tests/test_utils.py": {
        "test_deleting_duplicates": {
            "name": "test_deleting_duplicates",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "sequence_type": [
                    "str",
                    "Type[Any]",
                    "bool",
                    "Tuple[str]",
                    "List[str]"
                ]
            }
        },
        "test_extracting_extension_from_url": {
            "name": "test_extracting_extension_from_url",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "url": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "ext": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "test_checking_if_file_exists": {
            "name": "test_checking_if_file_exists",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "str"
                ],
                "filename": [
                    "str"
                ],
                "exists": [
                    "Optional[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "test_cleaning_filename": {
            "name": "test_cleaning_filename",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "dirty_name": [
                    "str",
                    "Dict[str, str]"
                ],
                "name": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "test_cleaning_title": {
            "name": "test_cleaning_title",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "dirty_title": [
                    "str",
                    "float"
                ],
                "title": [
                    "str",
                    "float"
                ]
            }
        },
        "test_cleaning_video_data": {
            "name": "test_cleaning_video_data",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_extracting_domain_name": {
            "name": "test_extracting_domain_name",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "url": [
                    "str",
                    "List[str]",
                    "Sequence[str]",
                    "Set[str]"
                ],
                "domain_name": [
                    "str",
                    "List[str]",
                    "Sequence[str]",
                    "Set[str]"
                ]
            }
        },
        "test_extracting_domain_name_with_wrong_url_raises_error": {
            "name": "test_extracting_domain_name_with_wrong_url_raises_error",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "stdout": {
            "name": "stdout",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_supressing_stdout": {
            "name": "test_supressing_stdout",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "stdout": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "rtv-downloader-master/tests/__init__.py": {},
    "rtv-downloader-master/tests/extractors/test_ipla.py": {},
    "rtv-downloader-master/tests/extractors/test_polsatnews.py": {},
    "rtv-downloader-master/tests/extractors/test_polskieradio.py": {},
    "rtv-downloader-master/tests/extractors/test_radiozet.py": {},
    "rtv-downloader-master/tests/extractors/test_rmf24.py": {},
    "rtv-downloader-master/tests/extractors/test_tokfm.py": {},
    "rtv-downloader-master/tests/extractors/test_tvn24.py": {},
    "rtv-downloader-master/tests/extractors/test_tvpinfo.py": {},
    "rtv-downloader-master/tests/extractors/test_tvpparlament.py": {},
    "rtv-downloader-master/tests/extractors/test_vod.py": {},
    "rtv-downloader-master/tests/extractors/test_vodtvp.py": {},
    "rtv-downloader-master/tests/extractors/test_wp.py": {},
    "rtv-downloader-master/tests/extractors/__init__.py": {}
}
{
    "run_n_jump-master/run_n_jump/camera.py": {
        "camera_bounding_box": {
            "name": "camera_bounding_box",
            "location": 5,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "Camera.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "position": [
                    "int",
                    "bool",
                    "float"
                ],
                "angle": [
                    "List[int]",
                    "int",
                    "list"
                ]
            }
        },
        "Camera.__repr__": {
            "name": "__repr__",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Camera.__str__": {
            "name": "__str__",
            "location": 41,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "run_n_jump-master/run_n_jump/cube.py": {
        "generate_bounding_box": {
            "name": "generate_bounding_box",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "vertices_in": [
                    "int",
                    "List[float]",
                    "list",
                    "List[str]",
                    "float"
                ],
                "normals": [
                    "list",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "cube_asset": {
            "name": "cube_asset",
            "location": 24,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "color": [
                    "math_helper.vec3",
                    "int"
                ]
            }
        },
        "cube": {
            "name": "cube",
            "location": 54,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "size": [
                    "int",
                    "math_helper.vec3",
                    "tuple",
                    "float",
                    "Tuple[float, float]"
                ],
                "position": [
                    "math_helper.vec3",
                    "int",
                    "Optional[List[Any]]",
                    "str"
                ],
                "color": [
                    "int",
                    "math_helper.vec3",
                    "tuple",
                    "float",
                    "Tuple[float, float]"
                ]
            }
        }
    },
    "run_n_jump-master/run_n_jump/debug_ui.py": {
        "create_debug_ui": {
            "name": "create_debug_ui",
            "location": 5,
            "return": [
                "List[str]",
                "bool",
                "Dict[str, Tuple[int, int]]"
            ],
            "arguments": {
                "system_names": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "List[AnyStr]"
                ]
            }
        }
    },
    "run_n_jump-master/run_n_jump/game.py": {
        "place_lights": {
            "name": "place_lights",
            "location": 149,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "current_lights": [
                    "List[List[str]]",
                    "Dict[str, List[Any]]",
                    "int",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "move_light": {
            "name": "move_light",
            "location": 160,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "light": [
                    "Dict[str, Tuple[int, int]]",
                    "float"
                ]
            }
        },
        "Game.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.tick": {
            "name": "tick",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game_data": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, Union[str, bool]]",
                    "bytes",
                    "game_data.GameData"
                ]
            }
        },
        "Game.finish_loading_labyrinth": {
            "name": "finish_loading_labyrinth",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.run_systems": {
            "name": "run_systems",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game_data": [
                    "str",
                    "dict",
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Game.get_query_positions": {
            "name": "get_query_positions",
            "location": 126,
            "return": [
                "bool",
                "Optional[Callable]",
                "str",
                "float",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "game_data": [
                    "dict",
                    "bytes",
                    "IO[bytes]",
                    "Union[str, Dict[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Game.handle_key": {
            "name": "handle_key",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "str",
                    "Union[str, int]",
                    "List[str]",
                    "Union[List, str]",
                    "Optional[str]"
                ],
                "modifiers": [
                    "str",
                    "Type[BaseException]",
                    "int",
                    "float",
                    "Optional[str]"
                ],
                "pressed": [
                    "bool",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[Sequence[str]]",
                    "List[str]",
                    "Exception",
                    "Optional[str]",
                    "Optional[list]"
                ]
            }
        }
    },
    "run_n_jump-master/run_n_jump/game_data.py": {},
    "run_n_jump-master/run_n_jump/helper.py": {
        "Timer.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "str",
                    "Optional[str]"
                ],
                "text": [
                    "str",
                    "bool",
                    "List[int]",
                    "float",
                    "int"
                ]
            }
        },
        "Timer.__enter__": {
            "name": "__enter__",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.__exit__": {
            "name": "__exit__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        }
    },
    "run_n_jump-master/run_n_jump/hot_reload.py": {
        "reload_all": {
            "name": "reload_all",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "whitelist": [
                    "str",
                    "dict"
                ],
                "debug": [
                    "str",
                    "bool"
                ]
            }
        },
        "reload_module": {
            "name": "reload_module",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "module": [
                    "Optional[Dict[str, str]]",
                    "Dict[str, str]",
                    "Callable[[str], bool]"
                ],
                "debug": [
                    "Optional[str]",
                    "list",
                    "dict",
                    "float",
                    "bool"
                ],
                "lists": [
                    "str",
                    "dict",
                    "bool",
                    "Sequence[Tuple[str, str]]"
                ],
                "dicts": [
                    "str",
                    "dict",
                    "bool",
                    "Sequence[Tuple[str, str]]"
                ]
            }
        },
        "update_function": {
            "name": "update_function",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "old": [
                    "str",
                    "bool",
                    "List[str]",
                    "Final",
                    "float"
                ],
                "new": [
                    "str",
                    "bool",
                    "List[str]",
                    "Final",
                    "float"
                ],
                "debug": [
                    "list",
                    "str",
                    "Iterator[Tuple[str, str]]",
                    "Union[str, Iterable[str]]",
                    "bool"
                ]
            }
        },
        "old_update_function": {
            "name": "old_update_function",
            "location": 135,
            "return": [
                "Iterator[Tuple[str, str]]",
                "Optional[bool]",
                "Dict[str, str]",
                "Optional[str]"
            ],
            "arguments": {
                "old": [
                    "str",
                    "bool"
                ],
                "new": [
                    "List[str]",
                    "str"
                ],
                "debug": [
                    "int",
                    "List[int]"
                ],
                "depth": [
                    "int",
                    "List[int]"
                ],
                "visited": [
                    "Optional[List[Any]]",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "update_class": {
            "name": "update_class",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "old": [
                    "str",
                    "int",
                    "Union[str, Pattern]",
                    "dict"
                ],
                "new": [
                    "Type[T]",
                    "Optional[Dict[str, str]]"
                ],
                "debug": [
                    "Dict[str, Any]",
                    "List[str]",
                    "memoryview",
                    "Mapping",
                    "int"
                ]
            }
        },
        "safe_str": {
            "name": "safe_str",
            "location": 240,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "obj": [
                    "bool",
                    "dict",
                    "str",
                    "Union[str, int]"
                ]
            }
        }
    },
    "run_n_jump-master/run_n_jump/labyrinth.py": {
        "load_image": {
            "name": "load_image",
            "location": 16,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "save_image": {
            "name": "save_image",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "arr": [
                    "List[str]",
                    "tuple",
                    "str"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "is_edge_pixel": {
            "name": "is_edge_pixel",
            "location": 34,
            "return": [
                "BaseException",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "arr": [
                    "int",
                    "numpy.ndarray"
                ],
                "row": [
                    "int",
                    "numpy.ndarray"
                ],
                "col": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "mark_edges": {
            "name": "mark_edges",
            "location": 51,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "arr": [
                    "int",
                    "numpy.ndarray",
                    "str"
                ]
            }
        },
        "find_next_black_pixel": {
            "name": "find_next_black_pixel",
            "location": 59,
            "return": [
                "List[int]",
                "int"
            ],
            "arguments": {
                "arr": [
                    "numpy.ndarray",
                    "int"
                ],
                "row": [
                    "int",
                    "Optional[int]",
                    "list"
                ],
                "col": [
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "find_bottom_edge": {
            "name": "find_bottom_edge",
            "location": 73,
            "return": [
                "int",
                "Tuple[int, int]",
                "numpy.matrix"
            ],
            "arguments": {
                "arr": [
                    "numpy.ndarray",
                    "int",
                    "bytes"
                ],
                "start_row": [
                    "numpy.ndarray",
                    "int",
                    "bytes"
                ],
                "col": [
                    "int",
                    "float",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "find_right_edge": {
            "name": "find_right_edge",
            "location": 80,
            "return": [
                "str",
                "Tuple[int]",
                "int",
                "bool",
                "dict",
                "numpy.ndarray"
            ],
            "arguments": {
                "arr": [
                    "numpy.ndarray",
                    "Optional[int]",
                    "float",
                    "bool",
                    "str"
                ],
                "used_pixels": [
                    "list",
                    "bool",
                    "int",
                    "str",
                    "Tuple[str]"
                ],
                "start_row": [
                    "int",
                    "str"
                ],
                "end_row": [
                    "int",
                    "str"
                ],
                "start_col": [
                    "numpy.ndarray",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "add_horizontal_plane": {
            "name": "add_horizontal_plane",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "vertices": [
                    "math_helper.vec2",
                    "int",
                    "Optional[int]",
                    "list",
                    "bool"
                ],
                "normals": [
                    "int",
                    "List[str]",
                    "numpy.array"
                ],
                "indices": [
                    "int",
                    "List[str]",
                    "List[int]",
                    "list",
                    "bool"
                ],
                "normal_direction": [
                    "int",
                    "math_helper.vec2",
                    "numpy.ndarray",
                    "float",
                    "Optional[Iterable[int]]"
                ],
                "start": [
                    "math_helper.vec2",
                    "int",
                    "Optional[int]",
                    "list",
                    "bool"
                ],
                "end": [
                    "math_helper.vec2",
                    "bool",
                    "Union[int, float]",
                    "str",
                    "bytes",
                    "Sequence[Mapping]"
                ]
            }
        },
        "add_floor": {
            "name": "add_floor",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "vertices": [
                    "int",
                    "Optional[int]",
                    "Dict[str, int]"
                ],
                "normals": [
                    "int",
                    "Optional[int]",
                    "Dict[str, int]"
                ],
                "indices": [
                    "int",
                    "Optional[int]",
                    "Dict[str, int]"
                ],
                "start": [
                    "int",
                    "Optional[int]",
                    "Dict[str, int]"
                ],
                "end": [
                    "int",
                    "Optional[int]",
                    "Dict[str, int]"
                ]
            }
        },
        "add_ceiling": {
            "name": "add_ceiling",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "vertices": [
                    "int",
                    "Optional[int]",
                    "Dict[str, int]"
                ],
                "normals": [
                    "int",
                    "Optional[int]",
                    "Dict[str, int]"
                ],
                "indices": [
                    "int",
                    "Optional[int]",
                    "Dict[str, int]"
                ],
                "start": [
                    "int",
                    "Optional[int]",
                    "Dict[str, int]"
                ],
                "end": [
                    "int",
                    "Optional[int]",
                    "Dict[str, int]"
                ]
            }
        },
        "generate_floor_and_ceiling": {
            "name": "generate_floor_and_ceiling",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "arr": [
                    "numpy.ndarray",
                    "Tuple[int, int]",
                    "List[Tuple[int, int]]",
                    "bytes",
                    "float",
                    "int",
                    "bool",
                    "List[str]"
                ],
                "block_offset": [
                    "list",
                    "math_helper.vec2",
                    "List[int]"
                ],
                "vertices": [
                    "list",
                    "math_helper.vec2",
                    "List[int]"
                ],
                "normals": [
                    "list",
                    "math_helper.vec2",
                    "List[int]"
                ],
                "indices": [
                    "list",
                    "math_helper.vec2",
                    "List[int]"
                ]
            }
        },
        "is_edge": {
            "name": "is_edge",
            "location": 138,
            "return": [
                "str",
                "BaseException",
                "bool",
                "dict"
            ],
            "arguments": {
                "arr": [
                    "int",
                    "Dict[int, List[Any]]",
                    "List[int]",
                    "Union[numpy.ndarray, numpy.void]",
                    "list"
                ],
                "row": [
                    "int",
                    "numpy.ndarray",
                    "Optional[numpy.dtype]",
                    "Optional[List[str]]",
                    "Union[int, str]"
                ],
                "col": [
                    "int",
                    "str",
                    "list",
                    "List[int]",
                    "bool"
                ],
                "direction": [
                    "int",
                    "numpy.ndarray",
                    "Optional[numpy.dtype]",
                    "Sequence[str]",
                    "Dict[str, Dict[str, Any]]",
                    "float"
                ]
            }
        },
        "find_next_edge_pixel": {
            "name": "find_next_edge_pixel",
            "location": 147,
            "return": [
                "List[int]",
                "int"
            ],
            "arguments": {
                "arr": [
                    "numpy.ndarray",
                    "int"
                ],
                "row": [
                    "int",
                    "Optional[int]",
                    "list"
                ],
                "col": [
                    "numpy.ndarray",
                    "int"
                ],
                "offset": [
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "find_right_end": {
            "name": "find_right_end",
            "location": 161,
            "return": [
                "str",
                "Tuple[int]",
                "int",
                "bool",
                "dict",
                "numpy.ndarray"
            ],
            "arguments": {
                "arr": [
                    "numpy.ndarray",
                    "int",
                    "Optional[int]"
                ],
                "row": [
                    "int",
                    "dict",
                    "bool",
                    "List[int]",
                    "Union[str, float]"
                ],
                "start_col": [
                    "numpy.ndarray",
                    "int",
                    "Optional[int]"
                ],
                "direction": [
                    "int",
                    "dict",
                    "bool",
                    "List[int]",
                    "Union[str, float]"
                ]
            }
        },
        "add_vertical_plane_x_y": {
            "name": "add_vertical_plane_x_y",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "vertices": [
                    "bool",
                    "Optional[str]",
                    "T",
                    "str"
                ],
                "normals": [
                    "int",
                    "bytes",
                    "str"
                ],
                "indices": [
                    "int",
                    "List[int]",
                    "bool",
                    "str",
                    "List[Tuple[int, int]]",
                    "float"
                ],
                "normal_direction": [
                    "bool",
                    "int",
                    "Optional[List[str]]"
                ],
                "row": [
                    "bool",
                    "Optional[str]",
                    "T",
                    "str"
                ],
                "start_col": [
                    "bool",
                    "Callable",
                    "Optional[Union[int, str]]",
                    "Tuple[str, str]"
                ],
                "end_col": [
                    "str",
                    "int"
                ]
            }
        },
        "generate_horizontal_wall": {
            "name": "generate_horizontal_wall",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "arr": [
                    "numpy.ndarray",
                    "int",
                    "str",
                    "Union[int, str]",
                    "Optional[str]",
                    "Sequence[str]"
                ],
                "block_offset": [
                    "math_helper.vec2",
                    "list",
                    "int",
                    "Optional[int]",
                    "str",
                    "float"
                ],
                "vertices": [
                    "math_helper.vec2",
                    "list",
                    "int",
                    "Optional[int]",
                    "str",
                    "float"
                ],
                "normals": [
                    "math_helper.vec2",
                    "list",
                    "int",
                    "Optional[int]",
                    "str",
                    "float"
                ],
                "indices": [
                    "math_helper.vec2",
                    "list",
                    "int",
                    "Optional[int]",
                    "str",
                    "float"
                ],
                "bounding_boxes": [
                    "list",
                    "int"
                ],
                "direction": [
                    "numpy.ndarray",
                    "int",
                    "str",
                    "Union[int, str]",
                    "Optional[str]",
                    "Sequence[str]"
                ]
            }
        },
        "generate_front": {
            "name": "generate_front",
            "location": 223,
            "return": [
                ""
            ],
            "arguments": {
                "arr": [
                    "List[List[Any]]",
                    "List[str]",
                    "int",
                    "str",
                    "List[int]"
                ],
                "block_offset": [
                    "List[List[Any]]",
                    "List[str]",
                    "int",
                    "str",
                    "List[int]"
                ],
                "vertices": [
                    "List[List[Any]]",
                    "List[str]",
                    "int",
                    "str",
                    "List[int]"
                ],
                "normals": [
                    "List[List[Any]]",
                    "List[str]",
                    "int",
                    "str",
                    "List[int]"
                ],
                "indices": [
                    "List[List[Any]]",
                    "List[str]",
                    "int",
                    "str",
                    "List[int]"
                ],
                "bounding_boxes": [
                    "List[List[Any]]",
                    "List[str]",
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "generate_back": {
            "name": "generate_back",
            "location": 227,
            "return": [
                ""
            ],
            "arguments": {
                "arr": [
                    "List[List[Any]]",
                    "List[str]",
                    "int",
                    "str",
                    "List[int]"
                ],
                "block_offset": [
                    "List[List[Any]]",
                    "List[str]",
                    "int",
                    "str",
                    "List[int]"
                ],
                "vertices": [
                    "List[List[Any]]",
                    "List[str]",
                    "int",
                    "str",
                    "List[int]"
                ],
                "normals": [
                    "List[List[Any]]",
                    "List[str]",
                    "int",
                    "str",
                    "List[int]"
                ],
                "indices": [
                    "List[List[Any]]",
                    "List[str]",
                    "int",
                    "str",
                    "List[int]"
                ],
                "bounding_boxes": [
                    "List[List[Any]]",
                    "List[str]",
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "find_bottom_end": {
            "name": "find_bottom_end",
            "location": 231,
            "return": [
                "int",
                "Tuple[int, int]",
                "numpy.matrix"
            ],
            "arguments": {
                "arr": [
                    "numpy.ndarray",
                    "int",
                    "bytes"
                ],
                "start_row": [
                    "numpy.ndarray",
                    "int",
                    "bytes"
                ],
                "col": [
                    "int",
                    "float",
                    "bool",
                    "List[str]"
                ],
                "direction": [
                    "int",
                    "float",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "add_vertical_plane_z_y": {
            "name": "add_vertical_plane_z_y",
            "location": 238,
            "return": [
                ""
            ],
            "arguments": {
                "vertices": [
                    "int",
                    "Dict[int, str]",
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "List[Optional['Cell']]",
                    "Dict[str, Dict[str, Any]]",
                    "List[List[int]]",
                    "Optional[List[str]]"
                ],
                "normals": [
                    "list",
                    "numpy.array",
                    "str"
                ],
                "indices": [
                    "bool",
                    "List[int]",
                    "int",
                    "float",
                    "str",
                    "List[Tuple[int, int]]"
                ],
                "normal_direction": [
                    "bool",
                    "int",
                    "List['cirq.Circuit']",
                    "str"
                ],
                "start_row": [
                    "Callable",
                    "numpy.ndarray",
                    "List[float]",
                    "List[str]",
                    "Optional[str]"
                ],
                "end_row": [
                    "numpy.array",
                    "List[List[int]]",
                    "List[int]",
                    "Union[str, List[str]]",
                    "List[Optional['Cell']]",
                    "list"
                ],
                "col": [
                    "int",
                    "Dict[int, str]",
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "List[Optional['Cell']]",
                    "Dict[str, Dict[str, Any]]",
                    "List[List[int]]",
                    "Optional[List[str]]"
                ]
            }
        },
        "generate_vertical_wall": {
            "name": "generate_vertical_wall",
            "location": 255,
            "return": [
                ""
            ],
            "arguments": {
                "arr": [
                    "numpy.ndarray",
                    "int",
                    "Optional[str]",
                    "str",
                    "Union[int, str]"
                ],
                "block_offset": [
                    "list",
                    "math_helper.vec2",
                    "int",
                    "set",
                    "str"
                ],
                "vertices": [
                    "list",
                    "math_helper.vec2",
                    "int",
                    "set",
                    "str"
                ],
                "normals": [
                    "list",
                    "math_helper.vec2",
                    "int",
                    "set",
                    "str"
                ],
                "indices": [
                    "list",
                    "math_helper.vec2",
                    "int",
                    "set",
                    "str"
                ],
                "bounding_boxes": [
                    "list",
                    "float",
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "direction": [
                    "numpy.ndarray",
                    "int",
                    "Optional[str]",
                    "str",
                    "Union[int, str]"
                ]
            }
        },
        "generate_left": {
            "name": "generate_left",
            "location": 294,
            "return": [
                ""
            ],
            "arguments": {
                "arr": [
                    "int",
                    "float",
                    "Optional[int]",
                    "bool"
                ],
                "block_offset": [
                    "int",
                    "float",
                    "Optional[int]",
                    "bool"
                ],
                "vertices": [
                    "int",
                    "float",
                    "Optional[int]",
                    "bool"
                ],
                "normals": [
                    "int",
                    "float",
                    "Optional[int]",
                    "bool"
                ],
                "indices": [
                    "int",
                    "float",
                    "Optional[int]",
                    "bool"
                ],
                "bounding_boxes": [
                    "int",
                    "float",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "generate_right": {
            "name": "generate_right",
            "location": 298,
            "return": [
                ""
            ],
            "arguments": {
                "arr": [
                    "int",
                    "float",
                    "Optional[int]",
                    "bool"
                ],
                "block_offset": [
                    "int",
                    "float",
                    "Optional[int]",
                    "bool"
                ],
                "vertices": [
                    "int",
                    "float",
                    "Optional[int]",
                    "bool"
                ],
                "normals": [
                    "int",
                    "float",
                    "Optional[int]",
                    "bool"
                ],
                "indices": [
                    "int",
                    "float",
                    "Optional[int]",
                    "bool"
                ],
                "bounding_boxes": [
                    "int",
                    "float",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "generate_bounding_box": {
            "name": "generate_bounding_box",
            "location": 302,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "size": [
                    "math_helper.vec3",
                    "int",
                    "float",
                    "List[numpy.array]"
                ],
                "position": [
                    "math_helper.vec3",
                    "int",
                    "float",
                    "List[numpy.array]"
                ]
            }
        },
        "create_bounding_box": {
            "name": "create_bounding_box",
            "location": 307,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "vertices": [
                    "numpy.ndarray",
                    "str",
                    "int",
                    "float"
                ],
                "normals": [
                    "bool",
                    "float"
                ],
                "indices": [
                    "str",
                    "Iterator[str]",
                    "bool",
                    "float"
                ],
                "position": [
                    "bool",
                    "float"
                ]
            }
        },
        "generate_vertices": {
            "name": "generate_vertices",
            "location": 351,
            "return": [
                "Tuple[Any, Any, Any]",
                "str",
                "list"
            ],
            "arguments": {
                "arr": [
                    "numpy.ndarray",
                    "Mapping[str, Tuple[float, float, float]]",
                    "int",
                    "float"
                ],
                "block_size": [
                    "int",
                    "bool",
                    "Tuple[int, int]"
                ]
            }
        },
        "labyrinth": {
            "name": "labyrinth",
            "location": 370,
            "return": [
                ""
            ],
            "arguments": {
                "block_size": [
                    "int",
                    "list"
                ]
            }
        },
        "create_labyrinth": {
            "name": "create_labyrinth",
            "location": 384,
            "return": [
                "Optional[bool]",
                "Optional[str]",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "row_offset": [
                    "int",
                    "List[model.SockeyeModel]",
                    "Optional[float]",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "col_offset": [
                    "int",
                    "List[model.SockeyeModel]",
                    "Optional[float]",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "block_size": [
                    "int",
                    "List[model.SockeyeModel]",
                    "Optional[float]",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "vertices": [
                    "int",
                    "List[int]",
                    "float",
                    "List[bool]",
                    "Dict[str, float]",
                    "Dict[str, bool]",
                    "Dict[str, int]"
                ],
                "normals": [
                    "bool",
                    "int",
                    "list",
                    "float",
                    "str"
                ],
                "indices": [
                    "float",
                    "str",
                    "List[int]",
                    "Tuple[Literal, Literal, Literal, Literal]"
                ],
                "bounding_boxes": [
                    "int",
                    "Union[float, int]",
                    "str",
                    "Tuple[float, float]",
                    "List[int]"
                ]
            }
        },
        "create_bounding_box.convert_to_vec3": {
            "name": "convert_to_vec3",
            "location": 335,
            "return": [
                "bool",
                "Match",
                "Tuple[int, Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "arr": [
                    "list",
                    "str",
                    "numpy.ndarray",
                    "[[]]",
                    "bool"
                ]
            }
        }
    },
    "run_n_jump-master/run_n_jump/logging_config.py": {
        "getLogger": {
            "name": "getLogger",
            "location": 7,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "run_n_jump-master/run_n_jump/math_helper.py": {
        "cross": {
            "name": "cross",
            "location": 187,
            "return": [
                "str",
                "numpy.ndarray",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "u": [
                    "int",
                    "Iterable[Any]",
                    "str",
                    "bool",
                    "Match"
                ],
                "v": [
                    "int",
                    "Iterable[Any]",
                    "str",
                    "bool",
                    "Match"
                ]
            }
        },
        "dot": {
            "name": "dot",
            "location": 191,
            "return": [
                "bool",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "u": [
                    "numpy.ndarray",
                    "numpy.dtype",
                    "str",
                    "float",
                    "Match",
                    "int"
                ],
                "v": [
                    "numpy.ndarray",
                    "numpy.dtype",
                    "str",
                    "float",
                    "Match",
                    "int"
                ]
            }
        },
        "identity": {
            "name": "identity",
            "location": 256,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "scale": {
            "name": "scale",
            "location": 265,
            "return": [
                ""
            ],
            "arguments": {
                "m": [
                    "float",
                    "List[int]",
                    "str"
                ],
                "s": [
                    "int",
                    "bool",
                    "str",
                    "numpy.ndarray"
                ]
            }
        },
        "translate": {
            "name": "translate",
            "location": 281,
            "return": [
                ""
            ],
            "arguments": {
                "m": [
                    "Tuple[int, int]"
                ],
                "v": [
                    "int",
                    "Callable",
                    "SupportsInt",
                    "bool"
                ]
            }
        },
        "rotate": {
            "name": "rotate",
            "location": 294,
            "return": [
                ""
            ],
            "arguments": {
                "m": [
                    "numpy.ndarray",
                    "float",
                    "str"
                ],
                "v": [
                    "float",
                    "int",
                    "Iterable[T]"
                ],
                "radians": [
                    "bool",
                    "str",
                    "Optional",
                    "int",
                    "Optional[T]",
                    "float",
                    "T",
                    "Callable[[], T]"
                ]
            }
        },
        "vec2.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "numpy.ndarray",
                    "int"
                ],
                "y": [
                    "int",
                    "Tuple[int, int]",
                    "bool",
                    "str"
                ]
            }
        },
        "vec2.__str__": {
            "name": "__str__",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "vec2.__repr__": {
            "name": "__repr__",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "vec2.rotate": {
            "name": "rotate",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "angle": [
                    "numpy.ndarray"
                ]
            }
        },
        "vec2.__eq__": {
            "name": "__eq__",
            "location": 27,
            "return": [
                "int",
                "List[int]",
                "datetime.datetime",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float"
                ]
            }
        },
        "vec2.__add__": {
            "name": "__add__",
            "location": 32,
            "return": [
                "str",
                "float",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float"
                ]
            }
        },
        "vec2.__sub__": {
            "name": "__sub__",
            "location": 37,
            "return": [
                "str",
                "Optional[int]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "vec2.__mul__": {
            "name": "__mul__",
            "location": 42,
            "return": [
                "Optional[int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "vec2.__truediv__": {
            "name": "__truediv__",
            "location": 47,
            "return": [
                "Optional[int]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "vec2.__getitem__": {
            "name": "__getitem__",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "Iterable[T]",
                    "Type[object]",
                    "Tuple[str, str]",
                    "int"
                ]
            }
        },
        "vec2.__setitem__": {
            "name": "__setitem__",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Iterable[Hashable]",
                    "Optional[str]",
                    "Optional[bytes]"
                ],
                "value": [
                    "str",
                    "float",
                    "KT",
                    "VT",
                    "bytes"
                ]
            }
        },
        "vec2.to_list": {
            "name": "to_list",
            "location": 67,
            "return": [
                "float",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "vec2.length": {
            "name": "length",
            "location": 71,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "vec2.normalize": {
            "name": "normalize",
            "location": 74,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "vec3.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "Union[bytes, bytearray, memoryview]",
                    "int",
                    "numpy.ndarray"
                ],
                "y": [
                    "int",
                    "bool",
                    "str",
                    "List[datetime.date]"
                ],
                "z": [
                    "float",
                    "numpy.ndarray",
                    "int"
                ],
                "arr": [
                    "Optional[numpy.array]",
                    "Optional[Tuple]",
                    "Dict[str, List[float]]"
                ]
            }
        },
        "vec3.__str__": {
            "name": "__str__",
            "location": 95,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "vec3.__repr__": {
            "name": "__repr__",
            "location": 98,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "vec3.__eq__": {
            "name": "__eq__",
            "location": 101,
            "return": [
                "int",
                "List[int]",
                "datetime.datetime",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float"
                ]
            }
        },
        "vec3.__add__": {
            "name": "__add__",
            "location": 106,
            "return": [
                "str",
                "float",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "vec3.__sub__": {
            "name": "__sub__",
            "location": 111,
            "return": [
                "str",
                "Optional[int]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "float"
                ]
            }
        },
        "vec3.__mul__": {
            "name": "__mul__",
            "location": 116,
            "return": [
                "int",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "vec3.__truediv__": {
            "name": "__truediv__",
            "location": 121,
            "return": [
                "int",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "vec3.__getitem__": {
            "name": "__getitem__",
            "location": 126,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "List[str]",
                    "bytes",
                    "Union[str, bytes]"
                ]
            }
        },
        "vec3.__setitem__": {
            "name": "__setitem__",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "MutableMapping[Any, Any]",
                    "bytes"
                ],
                "value": [
                    "str",
                    "Optional[bool]",
                    "int",
                    "Optional[numpy.dtype]"
                ]
            }
        },
        "vec3.__hash__": {
            "name": "__hash__",
            "location": 145,
            "return": [
                "str",
                "int",
                "OrderedDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "vec3.__len__": {
            "name": "__len__",
            "location": 148,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "vec3.length": {
            "name": "length",
            "location": 152,
            "return": [
                "Iterable[str]",
                "dict",
                "Sequence[str]",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "vec3.copy": {
            "name": "copy",
            "location": 155,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "vec3.normalize": {
            "name": "normalize",
            "location": 158,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "vec3.calculate_normal": {
            "name": "calculate_normal",
            "location": 165,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "v1": [
                    "Dict[str, Any]",
                    "T",
                    "Dict[int, str]",
                    "Iterable[Tuple[Any, Any]]",
                    "int"
                ],
                "v2": [
                    "Dict[str, Any]",
                    "T",
                    "Dict[int, str]",
                    "Iterable[Tuple[Any, Any]]",
                    "int"
                ]
            }
        },
        "vec3.to_list": {
            "name": "to_list",
            "location": 170,
            "return": [
                "float",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "vec3.to_vec2": {
            "name": "to_vec2",
            "location": 173,
            "return": [
                "str",
                "int",
                "Iterable[str]",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "component_mapping": [
                    "\"Flow\"",
                    "Dict[str, Any]"
                ]
            }
        },
        "mat4.__init__": {
            "name": "__init__",
            "location": 201,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "arr": [
                    "float",
                    "List[int]",
                    "str",
                    "bool",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "mat4.__eq__": {
            "name": "__eq__",
            "location": 214,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "Type",
                    "Optional[float]",
                    "Union[str, int, float]",
                    "str"
                ]
            }
        },
        "mat4.__str__": {
            "name": "__str__",
            "location": 223,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "mat4.__repr__": {
            "name": "__repr__",
            "location": 226,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "mat4.__mul__": {
            "name": "__mul__",
            "location": 229,
            "return": [
                "List[Dict]",
                "List[int]",
                "float",
                "list",
                "List[List[Any]]",
                "str",
                "List[float]",
                "Tuple[int, int, int]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Callable",
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "mat4.copy": {
            "name": "copy",
            "location": 238,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "mat4.to_list": {
            "name": "to_list",
            "location": 243,
            "return": [
                "str",
                "numpy.ndarray",
                "Callable",
                "Tuple[Sequence]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "column_major": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "timer.__init__": {
            "name": "__init__",
            "location": 328,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "timer.__enter__": {
            "name": "__enter__",
            "location": 332,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "timer.__exit__": {
            "name": "__exit__",
            "location": 335,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        }
    },
    "run_n_jump-master/run_n_jump/model.py": {
        "add_mvp_uniforms": {
            "name": "add_mvp_uniforms",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "uniforms": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "add_light_uniforms": {
            "name": "add_light_uniforms",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "uniforms": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "add_texture_uniform": {
            "name": "add_texture_uniform",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "uniforms": [
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "combine_attributes": {
            "name": "combine_attributes",
            "location": 104,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "vertex_count": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "upload": {
            "name": "upload",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "asset": [
                    "str",
                    "int"
                ],
                "gl_usage": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ]
            }
        },
        "upload_indices": {
            "name": "upload_indices",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "asset": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ],
                "gl_usage": [
                    "int",
                    "bytes",
                    "bool",
                    "str"
                ]
            }
        },
        "upload_vertices": {
            "name": "upload_vertices",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "asset": [
                    "int",
                    "tuple",
                    "bytes"
                ],
                "gl_usage": [
                    "int",
                    "str",
                    "slice"
                ]
            }
        },
        "load_blender_file": {
            "name": "load_blender_file",
            "location": 166,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Union[str, bytes, int]"
                ]
            }
        },
        "get_line_indices": {
            "name": "get_line_indices",
            "location": 214,
            "return": [
                "int",
                "Tuple[bytes]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "triangle_indices": [
                    "list",
                    "List[Tuple[str, int, int]]",
                    "List[str]",
                    "List[List[int]]",
                    "int"
                ]
            }
        },
        "Texture.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexBuffer.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelAsset.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BoundingBox.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelInstance.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelInstance.__repr__": {
            "name": "__repr__",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelInstance.__str__": {
            "name": "__str__",
            "location": 85,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "run_n_jump-master/run_n_jump/quad_tree.py": {
        "get_indentation": {
            "name": "get_indentation",
            "location": 98,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "indentation": [
                    "str",
                    "bool"
                ]
            }
        },
        "print_quad_tree": {
            "name": "print_quad_tree",
            "location": 105,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "tree": [
                    "Type",
                    "str"
                ],
                "indentation": [
                    "str",
                    "bool"
                ]
            }
        },
        "build_quad_tree": {
            "name": "build_quad_tree",
            "location": 121,
            "return": [],
            "arguments": {
                "entities": [
                    "list",
                    "str",
                    "T",
                    "bool"
                ]
            }
        },
        "QuadTree.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "position": [
                    "int",
                    "float",
                    "str"
                ],
                "size": [
                    "int",
                    "float",
                    "str"
                ],
                "max_entities": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "QuadTree.__str__": {
            "name": "__str__",
            "location": 18,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuadTree.__repr__": {
            "name": "__repr__",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuadTree.is_in_tree": {
            "name": "is_in_tree",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "math_helper.vec3",
                    "list"
                ]
            }
        },
        "QuadTree.create_sub_trees": {
            "name": "create_sub_trees",
            "location": 31,
            "return": [
                "bool",
                "int",
                "Dict[int, dict]",
                "Dict[str, Tuple[int, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuadTree.add": {
            "name": "add",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "entity": [
                    "dict",
                    "Sequence[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "QuadTree.overlaps_tree": {
            "name": "overlaps_tree",
            "location": 70,
            "return": [
                "int",
                "Dict[str, int]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "int",
                    "math_helper.vec3",
                    "List[str]",
                    "Union[int, float]"
                ],
                "rectangle": []
            }
        },
        "QuadTree.query": {
            "name": "query",
            "location": 83,
            "return": [
                "bool",
                "str",
                "Union[int, float, complex]",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "str",
                    "bytes"
                ],
                "rectangle": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "run_n_jump-master/run_n_jump/rectangle.py": {
        "rectangular_prism_vertices": {
            "name": "rectangular_prism_vertices",
            "location": 11,
            "return": [
                "Tuple[Any, Any, Any]",
                "str",
                "list"
            ],
            "arguments": {
                "size": [
                    "math_helper.vec3",
                    "int",
                    "float"
                ]
            }
        },
        "rectangular_prism": {
            "name": "rectangular_prism",
            "location": 82,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "color": [
                    "math_helper.vec3",
                    "int"
                ],
                "vertices": [
                    "str",
                    "bool",
                    "tuple"
                ],
                "normals": [
                    "str",
                    "bool",
                    "tuple"
                ],
                "indices": [
                    "str",
                    "List[str]",
                    "Mapping[str, Any]",
                    "Mapping[str, List[str]]"
                ]
            }
        }
    },
    "run_n_jump-master/run_n_jump/shader.py": {
        "Shader.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "vertex_shader_name": [
                    "str",
                    "Set[str]",
                    "Dict[str, 'LabwareDefinition']",
                    "bool"
                ],
                "fragment_shader_name": [
                    "str",
                    "Set[str]",
                    "Dict[str, 'LabwareDefinition']",
                    "bool"
                ],
                "number_of_lights": [
                    "str",
                    "int",
                    "dict",
                    "Optional[str]",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "Shader.compile": {
            "name": "compile",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "number_of_lights": [
                    "int",
                    "str",
                    "Union[str, List[str]]",
                    "List[float]"
                ]
            }
        },
        "Shader.create_shader": {
            "name": "create_shader",
            "location": 53,
            "return": [
                "str",
                "Sequence[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "strings": [
                    "int",
                    "str"
                ],
                "t": [
                    "str",
                    "int",
                    "List[int]",
                    "bytes"
                ]
            }
        },
        "Shader.link": {
            "name": "link",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Shader.bind": {
            "name": "bind",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Shader.unbind": {
            "name": "unbind",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Shader.uniform": {
            "name": "uniform",
            "location": 120,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict",
                    "Dict[str, 'LabwareDefinition']",
                    "List[str]",
                    "Union[str, List[str]]",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "data": [
                    "str",
                    "dict",
                    "logging.Logger"
                ],
                "index": [
                    "dict",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "Shader.uniformf": {
            "name": "uniformf",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "Shader.uniformi": {
            "name": "uniformi",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "Shader.uniform_matrixf": {
            "name": "uniform_matrixf",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ],
                "mat": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "Shader.process_and_convert_to_string_buffer": {
            "name": "process_and_convert_to_string_buffer",
            "location": 190,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "Callable[[List], List[str]]"
                ]
            }
        }
    },
    "run_n_jump-master/run_n_jump/systems.py": {
        "System.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "components": [
                    "Callable",
                    "bool",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[Any]",
                    "Optional[int]"
                ],
                "optional_components": [
                    "bool",
                    "Callable",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[Any]"
                ]
            }
        },
        "System.supports": {
            "name": "supports",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "entity": []
            }
        },
        "System.reset": {
            "name": "reset",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game_data": [
                    "game_data.GameData",
                    "bool",
                    "dict"
                ]
            }
        },
        "System.run": {
            "name": "run",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game_data": [
                    "game_data.GameData",
                    "Optional[bool]",
                    "Dict[str, dict]",
                    "bool"
                ],
                "entity": [
                    "game_data.GameData",
                    "Optional[bool]",
                    "Dict[str, dict]",
                    "bool"
                ]
            }
        },
        "System.__repr__": {
            "name": "__repr__",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "System.__str__": {
            "name": "__str__",
            "location": 43,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GlobalInputSystem.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GlobalInputSystem.run": {
            "name": "run",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game_data": [
                    "game_data.GameData",
                    "dict",
                    "Mapping[str, str]",
                    "Dict[str, Any]"
                ],
                "entity": [
                    "game_data.GameData",
                    "Optional[bool]",
                    "Dict[str, dict]",
                    "bool"
                ]
            }
        },
        "GlobalInputSystem.reset": {
            "name": "reset",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game_data": [
                    "game_data.GameData",
                    "bool",
                    "dict"
                ]
            }
        },
        "DebugUISystem.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DebugUISystem.run": {
            "name": "run",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game_data": [
                    "Dict[str, Any]",
                    "dict",
                    "Type['Declared']",
                    "str",
                    "Type[T]"
                ],
                "entity": [
                    "dict",
                    "List[Dict]",
                    "List[int]"
                ]
            }
        },
        "InputSystem.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InputSystem.run": {
            "name": "run",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game_data": [
                    "game_data.GameData",
                    "Optional[bool]",
                    "Dict[str, dict]",
                    "bool"
                ],
                "entity": [
                    "game_data.GameData",
                    "Optional[bool]",
                    "Dict[str, dict]",
                    "bool"
                ]
            }
        },
        "InputSystem.reset": {
            "name": "reset",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game_data": [
                    "game_data.GameData",
                    "bool",
                    "dict"
                ]
            }
        },
        "MovementInputSystem.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MovementInputSystem.run": {
            "name": "run",
            "location": 105,
            "return": [
                "Iterator[T]",
                "Iterator[str]",
                "Iterator[int]",
                "Iterable[T]"
            ],
            "arguments": {
                "self": [],
                "game_data": [
                    "Dict[str, Any]",
                    "Union[str, Dict[str, Any]]",
                    "game_data.GameData"
                ],
                "entity": [
                    "dict",
                    "List[bytes]",
                    "str"
                ]
            }
        },
        "AccelerationSystem.__init__": {
            "name": "__init__",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AccelerationSystem.run": {
            "name": "run",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game_data": [
                    "game_data.GameData",
                    "Dict[str, Any]",
                    "dict",
                    "bytes"
                ],
                "entity": [
                    "T",
                    "List[List[int]]"
                ]
            }
        },
        "CollisionSystem.__init__": {
            "name": "__init__",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CollisionSystem.project": {
            "name": "project",
            "location": 182,
            "return": [
                "int",
                "float",
                "Callable[[None], bool]",
                "List[str]",
                "logging.LogRecord"
            ],
            "arguments": {
                "box": [
                    "int",
                    "float",
                    "Callable[[None], bool]",
                    "List[str]",
                    "logging.LogRecord"
                ],
                "normal": [
                    "int",
                    "float",
                    "Callable[[None], bool]",
                    "List[str]",
                    "logging.LogRecord"
                ]
            }
        },
        "CollisionSystem.get_overlap": {
            "name": "get_overlap",
            "location": 194,
            "return": [
                "float",
                "int",
                "str",
                "dict",
                "Optional[int]"
            ],
            "arguments": {
                "start1": [
                    "int",
                    "Sequence[int]",
                    "float"
                ],
                "end1": [
                    "int",
                    "float"
                ],
                "start2": [
                    "int",
                    "Sequence[int]"
                ],
                "end2": [
                    "int",
                    "Tuple[int, int]",
                    "float"
                ]
            }
        },
        "CollisionSystem.check_for_overlap": {
            "name": "check_for_overlap",
            "location": 206,
            "return": [
                "bool",
                "Sequence[Callable]",
                "Optional[int]"
            ],
            "arguments": {
                "normals": [
                    "list",
                    "bool",
                    "Optional[List[str]]"
                ],
                "rotation_matrix": [
                    "str",
                    "Optional[float]",
                    "int"
                ],
                "box": [
                    "model.BoundingBox",
                    "bool",
                    "int",
                    "Dict[str, str]"
                ],
                "other": [
                    "model.BoundingBox",
                    "int",
                    "bool",
                    "Tuple[int]",
                    "Dict[str, int]",
                    "float"
                ]
            }
        },
        "CollisionSystem.collides": {
            "name": "collides",
            "location": 227,
            "return": [
                "bool"
            ],
            "arguments": {
                "box": [
                    "model.BoundingBox",
                    "math_helper.mat4",
                    "int",
                    "List[int]"
                ],
                "box_rotation_matrix": [
                    "math_helper.mat4",
                    "model.BoundingBox",
                    "int",
                    "bool",
                    "List[int]"
                ],
                "other": [
                    "model.BoundingBox",
                    "math_helper.mat4",
                    "int",
                    "List[int]"
                ],
                "other_rotation_matrix": [
                    "math_helper.mat4",
                    "int",
                    "float",
                    "Optional[list]",
                    "List['GridQid']"
                ]
            }
        },
        "CollisionSystem.no_collision_possible": {
            "name": "no_collision_possible",
            "location": 241,
            "return": [
                "bool"
            ],
            "arguments": {
                "entity": [
                    "Optional[int]",
                    "int",
                    "float",
                    "str"
                ],
                "other": [
                    "Optional[int]",
                    "int",
                    "float",
                    "str"
                ],
                "box": [
                    "float"
                ],
                "other_box": [
                    "Union[Callable, str]"
                ]
            }
        },
        "CollisionSystem.do_collision_check": {
            "name": "do_collision_check",
            "location": 253,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "Optional[str]",
                    "str"
                ],
                "other": [
                    "str"
                ],
                "box": [
                    "int",
                    "Callable",
                    "bool",
                    "str",
                    "Sequence",
                    "Optional[str]"
                ],
                "other_box": [
                    "int",
                    "Callable",
                    "bool",
                    "str",
                    "Sequence",
                    "Optional[str]"
                ]
            }
        },
        "CollisionSystem.run": {
            "name": "run",
            "location": 284,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game_data": [
                    "game_data.GameData",
                    "dict",
                    "Optional[Dict[str, str]]",
                    "Type[T]",
                    "Dict[str, Any]"
                ],
                "entity": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "CollisionSystem.reset": {
            "name": "reset",
            "location": 298,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game_data": [
                    "game_data.GameData",
                    "bool",
                    "dict"
                ]
            }
        },
        "PositionSystem.__init__": {
            "name": "__init__",
            "location": 306,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PositionSystem.run": {
            "name": "run",
            "location": 310,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game_data": [
                    "game_data.GameData",
                    "Optional[bool]",
                    "Dict[str, dict]",
                    "bool"
                ],
                "entity": [
                    "dict",
                    "T"
                ]
            }
        },
        "RenderSystem.__init__": {
            "name": "__init__",
            "location": 346,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RenderSystem.reset": {
            "name": "reset",
            "location": 351,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game_data": [
                    "game_data.GameData",
                    "bool",
                    "dict"
                ]
            }
        },
        "RenderSystem.run": {
            "name": "run",
            "location": 357,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game_data": [
                    "game_data.GameData",
                    "Dict[str, Any]"
                ],
                "entity": [
                    "game_data.GameData"
                ]
            }
        },
        "RenderSystem.bind_data": {
            "name": "bind_data",
            "location": 380,
            "return": [
                ""
            ],
            "arguments": {
                "entity": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "RenderSystem.draw": {
            "name": "draw",
            "location": 392,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "RenderSystem.bind_texture": {
            "name": "bind_texture",
            "location": 399,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "Sequence[str]",
                    "Optional[str]"
                ]
            }
        },
        "RenderSystem.bind_uniforms": {
            "name": "bind_uniforms",
            "location": 406,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "entity": [
                    "Optional[Any]"
                ],
                "game_data": [
                    "dict",
                    "Dict[str, Any]",
                    "List[dict]",
                    "str"
                ]
            }
        },
        "BoundingBoxRenderSystem.__init__": {
            "name": "__init__",
            "location": 432,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BoundingBoxRenderSystem.run": {
            "name": "run",
            "location": 435,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "game_data": [
                    "game_data.GameData",
                    "dict",
                    "Dict[str, List[Any]]",
                    "Optional[Tuple[str]]"
                ],
                "entity": [
                    "int",
                    "Dict[str, str]",
                    "List[dict]"
                ]
            }
        }
    },
    "run_n_jump-master/run_n_jump/text.py": {
        "load_font": {
            "name": "load_font",
            "location": 14,
            "return": [
                "bool",
                "List[str]",
                "str",
                "dict"
            ],
            "arguments": {
                "font_path": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "size": [
                    "int",
                    "str",
                    "Optional[int]",
                    "List[str]"
                ]
            }
        },
        "generate_vertices": {
            "name": "generate_vertices",
            "location": 53,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int"
                ],
                "font_texture": [
                    "int",
                    "str"
                ]
            }
        },
        "text2d": {
            "name": "text2d",
            "location": 101,
            "return": [
                "dict"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Optional[int]",
                    "Sequence[str]",
                    "IO",
                    "bool"
                ],
                "position": [
                    "math_helper.vec2",
                    "int",
                    "str",
                    "Tuple[float, float]",
                    "float"
                ],
                "color": [
                    "math_helper.vec3",
                    "int",
                    "str"
                ],
                "font_size": [
                    "int",
                    "Tuple[int, int, int]",
                    "Union[List[int], int]"
                ]
            }
        },
        "update_text": {
            "name": "update_text",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "model": [
                    "str",
                    "int"
                ],
                "new_text": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "generate_vertices_for_whole_font": {
            "name": "generate_vertices_for_whole_font",
            "location": 151,
            "return": [
                "float",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {}
        }
    },
    "run_n_jump-master/run_n_jump/__init__.py": {},
    "run_n_jump-master/run_n_jump/__main__.py": {
        "Window.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "width": [
                    "int",
                    "Dict[int, int]",
                    "float",
                    "bool"
                ],
                "height": [
                    "int",
                    "Dict[int, int]",
                    "float",
                    "bool"
                ],
                "resizable": [
                    "int",
                    "Dict[int, int]",
                    "float",
                    "bool"
                ]
            }
        },
        "Window.show_average_time": {
            "name": "show_average_time",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.on_draw": {
            "name": "on_draw",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Window.on_resize": {
            "name": "on_resize",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "width": [
                    "int",
                    "float"
                ],
                "height": [
                    "int",
                    "float"
                ]
            }
        },
        "Window.orthographic_projection": {
            "name": "orthographic_projection",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "width": [
                    "int",
                    "float",
                    "Optional[float]"
                ],
                "height": [
                    "int",
                    "float",
                    "Optional[float]"
                ]
            }
        },
        "Window.perspective_projection": {
            "name": "perspective_projection",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "width": [
                    "int",
                    "Iterator[int]",
                    "float",
                    "Optional[float]"
                ],
                "height": [
                    "int",
                    "Iterator[int]",
                    "float",
                    "Optional[float]"
                ]
            }
        },
        "Window.on_key_press": {
            "name": "on_key_press",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Iterable[str]"
                ],
                "modifiers": [
                    "str",
                    "Mapping[str, List[str]]",
                    "Optional[float]",
                    "Optional[\"InventoryMode\"]",
                    "Optional[\"TaxMode\"]",
                    "Optional[str]"
                ]
            }
        },
        "Window.on_key_release": {
            "name": "on_key_release",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "str",
                    "Optional[str]",
                    "Union[None, str]",
                    "Optional[float]"
                ],
                "modifiers": [
                    "str",
                    "Optional[Callable[[dict], None]]",
                    "int"
                ]
            }
        },
        "Window.on_mouse_motion": {
            "name": "on_mouse_motion",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float"
                ],
                "y": [
                    "float"
                ],
                "dx": [
                    "int",
                    "float",
                    "str",
                    "T"
                ],
                "dy": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        }
    },
    "run_n_jump-master/tests/test_math_helper.py": {
        "Vec3Test.test_add": {
            "name": "test_add",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Vec3Test.test_to_vec2": {
            "name": "test_to_vec2",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Vec3Test.test_spread": {
            "name": "test_spread",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Vec2Test.test_add": {
            "name": "test_add",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Vec2Test.test_spread": {
            "name": "test_spread",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Vec2Test.test_sub": {
            "name": "test_sub",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MethodTest.test_cross_product": {
            "name": "test_cross_product",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MethodTest.test_translate": {
            "name": "test_translate",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MethodTest.test_rotate_around_x": {
            "name": "test_rotate_around_x",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MethodTest.test_rotate_around_y": {
            "name": "test_rotate_around_y",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MethodTest.test_rotate_around_x_and_y": {
            "name": "test_rotate_around_x_and_y",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MethodTest.test_rotate_and_translate": {
            "name": "test_rotate_and_translate",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Mat4Test.test_init": {
            "name": "test_init",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Mat4Test.test_mul_identity": {
            "name": "test_mul_identity",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Mat4Test.test_mul_mat4": {
            "name": "test_mul_mat4",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Mat4Test.test_mul_vec3": {
            "name": "test_mul_vec3",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Mat4Test.test_to_list": {
            "name": "test_to_list",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PerlinTest.test_gradient": {
            "name": "test_gradient",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "run_n_jump-master/tests/test_model.py": {
        "ModelTest.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTest.tearDown": {
            "name": "tearDown",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTest.test_load_model": {
            "name": "test_load_model",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "run_n_jump-master/tests/test_quad_tree.py": {
        "Object.__repr__": {
            "name": "__repr__",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.__str__": {
            "name": "__str__",
            "location": 13,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuadTreeTest.test_is_in_tree": {
            "name": "test_is_in_tree",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "QuadTreeTest.test_print": {
            "name": "test_print",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "QuadTreeTest.test_query": {
            "name": "test_query",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "QuadTreeTest.test_query_recursion": {
            "name": "test_query_recursion",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "QuadTreeTest.test_add": {
            "name": "test_add",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "QuadTreeTest.test_create_sub_trees": {
            "name": "test_create_sub_trees",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "QuadTreeTest.assert_quad_tree": {
            "name": "assert_quad_tree",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tree": [
                    "dict",
                    "bool",
                    "List[dict]",
                    "Union[Dict, List]",
                    "List[str]",
                    "callable"
                ],
                "position": [
                    "dict",
                    "List[str]",
                    "Dict[str, Any]",
                    "str"
                ],
                "size_half": [
                    "Exception",
                    "bytes",
                    "int",
                    "str"
                ],
                "max_entities": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "QuadTreeTest.test_overlaps_tree": {
            "name": "test_overlaps_tree",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "run_n_jump-master/tests/test_systems.py": {
        "CollisionTest.test_project": {
            "name": "test_project",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CollisionTest.test_collides_simple": {
            "name": "test_collides_simple",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CollisionTest.test_collides_simple_position": {
            "name": "test_collides_simple_position",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CollisionTest.test_not_collides_simple_position": {
            "name": "test_not_collides_simple_position",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CollisionTest.test_collides_example": {
            "name": "test_collides_example",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CollisionTest.test_collides_example2": {
            "name": "test_collides_example2",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "run_n_jump-master/tests/test_text.py": {
        "TextTest.test_load_font": {
            "name": "test_load_font",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "run_n_jump-master/tests/__init__.py": {}
}
{
    "s3migrate-master/setup.py": {},
    "s3migrate-master/src/s3migrate/api.py": {
        "_strip_prefix": {
            "name": "_strip_prefix",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [],
                "prefix": []
            }
        },
        "_get_fs_sep_prefix_paths": {
            "name": "_get_fs_sep_prefix_paths",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "_yield_candidates": {
            "name": "_yield_candidates",
            "location": 46,
            "return": [
                "Iterator[Dict[str, str]]"
            ],
            "arguments": {
                "path_fmt": [
                    "str",
                    "bool",
                    "List[str]",
                    "Callable"
                ],
                "fs": [
                    "str",
                    "bool",
                    "Callable"
                ],
                "sep": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "prefix": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "iterformats": {
            "name": "iterformats",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "fmt_in": [
                    "str",
                    "Union[int, str, bool]",
                    "Iterable[Dict[str, Any]]"
                ]
            }
        },
        "iter": {
            "name": "iter",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "fmt_in": [
                    "str",
                    "Union[int, str, bool]"
                ]
            }
        },
        "_bin_op": {
            "name": "_bin_op",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "fs_op_fn_getter": [
                    "bool",
                    "int"
                ],
                "op_description": [
                    "str",
                    "Callable",
                    "Optional[str]"
                ],
                "fmt_in": [
                    "str",
                    "List[str]",
                    "int",
                    "bool"
                ],
                "fmt_out": [
                    "str",
                    "float",
                    "bool"
                ],
                "dryrun": [
                    "bool",
                    "int"
                ]
            }
        },
        "copy": {
            "name": "copy",
            "location": 120,
            "return": [
                "tuple"
            ],
            "arguments": {
                "fmt_in": [
                    "str",
                    "Mapping[str, Any]",
                    "Optional[str]",
                    "bool"
                ],
                "fmt_out": [
                    "str",
                    "Mapping[str, Any]",
                    "Optional[str]",
                    "bool"
                ],
                "dryrun": [
                    "str",
                    "Mapping[str, Any]",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "move": {
            "name": "move",
            "location": 139,
            "return": [
                "tuple"
            ],
            "arguments": {
                "fmt_in": [
                    "str",
                    "Mapping[str, Any]",
                    "Optional[str]",
                    "bool"
                ],
                "fmt_out": [
                    "str",
                    "Mapping[str, Any]",
                    "Optional[str]",
                    "bool"
                ],
                "dryrun": [
                    "str",
                    "Mapping[str, Any]",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "remove": {
            "name": "remove",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "fmt_in": [
                    "str",
                    "type"
                ],
                "dryrun": [
                    "bool",
                    "int"
                ]
            }
        },
        "_bin_op.op_fn": {
            "name": "op_fn",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "path_in": [
                    "str",
                    "bool",
                    "Optional[MutableMapping[str, Any]]",
                    "int"
                ],
                "path_out": [
                    "str",
                    "bool",
                    "Optional[MutableMapping[str, Any]]",
                    "int"
                ],
                "prefix_in": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "prefix_out": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "copy._copy_fn_getter": {
            "name": "_copy_fn_getter",
            "location": 123,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fs": [
                    "int",
                    "bool"
                ]
            }
        },
        "move._move_fn_getter": {
            "name": "_move_fn_getter",
            "location": 142,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "fs": [
                    "TextIO",
                    "bool"
                ]
            }
        },
        "remove.rm": {
            "name": "rm",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "path_in": [
                    "bool",
                    "dict",
                    "str"
                ]
            }
        }
    },
    "s3migrate-master/src/s3migrate/paths.py": {
        "immutable_base": {
            "name": "immutable_base",
            "location": 1,
            "return": [
                "float",
                "bool",
                "Exception"
            ],
            "arguments": {
                "path_fmt": [
                    "str",
                    "Optional[int]",
                    "Iterator[Tuple[str, str]]",
                    "Optional[str]"
                ]
            }
        }
    },
    "s3migrate-master/src/s3migrate/patterns.py": {
        "get_fmt_match_dict": {
            "name": "get_fmt_match_dict",
            "location": 4,
            "return": [
                "str",
                "Optional[str]",
                "Optional[Sequence[str]]"
            ],
            "arguments": {
                "string": [
                    "str",
                    "bool"
                ],
                "fmt_string": [
                    "str"
                ]
            }
        },
        "check_formats_compatible": {
            "name": "check_formats_compatible",
            "location": 12,
            "return": [
                "dict",
                "int",
                "type",
                "bool"
            ],
            "arguments": {
                "fmt_in": [
                    "str"
                ],
                "fmt_out": [
                    "str"
                ]
            }
        },
        "reformat": {
            "name": "reformat",
            "location": 18,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "string_in": [
                    "List[str]",
                    "Dict[str, Any]",
                    "Sequence[str]",
                    "str",
                    "Optional[str]",
                    "bytes",
                    "dict"
                ],
                "fmt_in": [
                    "List[str]",
                    "Dict[str, Any]",
                    "Sequence[str]",
                    "str",
                    "Optional[str]",
                    "bytes",
                    "dict"
                ],
                "fmt_out": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "s3migrate-master/src/s3migrate/__init__.py": {},
    "s3migrate-master/tests/conftest.py": {
        "s3_writable_url": {
            "name": "s3_writable_url",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "monkeypatch": [
                    "bool",
                    "int"
                ]
            }
        },
        "local_writable_url": {
            "name": "local_writable_url",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "memory_writable_url": {
            "name": "memory_writable_url",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "file_tree": {
            "name": "file_tree",
            "location": 49,
            "return": [
                "str",
                "Union[str, int]",
                "int"
            ],
            "arguments": {
                "request": [
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "s3migrate-master/tests/test_api.py": {
        "test_yield_candidates": {
            "name": "test_yield_candidates",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "file_tree": [
                    "Optional[Dict]",
                    "Union[List, set]",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "test_iterformats": {
            "name": "test_iterformats",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "file_tree": [
                    "str",
                    "Optional[Dict]",
                    "Union[List, set]"
                ]
            }
        },
        "test_copy": {
            "name": "test_copy",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "file_tree": [
                    "str",
                    "Optional[Dict]",
                    "Union[List, set]"
                ]
            }
        },
        "test_move": {
            "name": "test_move",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "file_tree": [
                    "str",
                    "Optional[Dict]",
                    "Union[List, set]"
                ]
            }
        },
        "test_remove": {
            "name": "test_remove",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "file_tree": [
                    "str",
                    "Optional[Dict]",
                    "Union[List, set]"
                ]
            }
        }
    },
    "s3migrate-master/tests/test_paths.py": {
        "test_fmt_string_to_regex_pattern": {
            "name": "test_fmt_string_to_regex_pattern",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "path_fmt": [
                    "str",
                    "Callable"
                ],
                "base": [
                    "str",
                    "bool",
                    "dict",
                    "int",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "s3migrate-master/tests/test_patterns.py": {
        "test_get_fmt_match_dict": {
            "name": "test_get_fmt_match_dict",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "fmt_string": [
                    "str",
                    "Dict[str, type]",
                    "Awaitable",
                    "Optional[str]",
                    "Sequence[str]"
                ],
                "string": [
                    "str",
                    "Dict[str, type]",
                    "Awaitable",
                    "Optional[str]",
                    "Sequence[str]"
                ],
                "fmt_dict": [
                    "dict",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "test_check_formats_compatible": {
            "name": "test_check_formats_compatible",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "fmt1": [
                    "str"
                ],
                "fmt2": [
                    "str"
                ],
                "compat": [
                    "str",
                    "Hashable",
                    "Dict[str, int]",
                    "List[str]"
                ]
            }
        },
        "test_reformat": {
            "name": "test_reformat",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "fmt_in": [
                    "str"
                ],
                "fmt_out": [
                    "str"
                ],
                "string_in": [
                    "str"
                ],
                "string_out_expected": [
                    "str",
                    "List[str]",
                    "bool",
                    "\"PNSqlCursor\"",
                    "Hashable"
                ]
            }
        }
    }
}
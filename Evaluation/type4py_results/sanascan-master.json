{
    "sanascan-master/deplicated/lang_model_file_factory.py": {
        "LangModelFileFactory.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "database": [],
                "max_get_size": [],
                "echo": []
            }
        },
        "LangModelFileFactory._sentence_num": {
            "name": "_sentence_num",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LangModelFileFactory._all_sentence_id": {
            "name": "_all_sentence_id",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LangModelFileFactory._sentences_by_id": {
            "name": "_sentences_by_id",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "id_list": []
            }
        },
        "LangModelFileFactory.get_lang_model_file": {
            "name": "get_lang_model_file",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "id_list": [],
                "order": []
            }
        }
    },
    "sanascan-master/deplicated/__init__.py": {},
    "sanascan-master/deplicated/cli_util/cli_engine.py": {
        "SNKCLIEngine.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "description": []
            }
        },
        "SNKCLIEngine._confirm": {
            "name": "_confirm",
            "location": 44,
            "return": [],
            "arguments": {
                "cls": [],
                "self": [],
                "msg": []
            }
        },
        "SNKCLIEngine.confirm": {
            "name": "confirm",
            "location": 58,
            "return": [],
            "arguments": {
                "cls": [],
                "msg": []
            }
        },
        "SNKCLIEngine._delete_mode": {
            "name": "_delete_mode",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SNKCLIEngine._sandbox_mode": {
            "name": "_sandbox_mode",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SNKCLIEngine._non_wrapped_insert_mode": {
            "name": "_non_wrapped_insert_mode",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SNKCLIEngine._long_time_insert_mode": {
            "name": "_long_time_insert_mode",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SNKCLIEngine._insert_mode": {
            "name": "_insert_mode",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SNKCLIEngine.run": {
            "name": "run",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SNKCLIEngine.confirm.decorator": {
            "name": "decorator",
            "location": 59,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "SNKCLIEngine.confirm.decorator.wrapper": {
            "name": "wrapper",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sanascan-master/deplicated/cli_util/db_api.py": {
        "create_engine": {
            "name": "create_engine",
            "location": 16,
            "return": [],
            "arguments": {
                "file_path": [],
                "environment": []
            }
        },
        "limit_select": {
            "name": "limit_select",
            "location": 35,
            "return": [],
            "arguments": {
                "query": [],
                "class_id": []
            }
        },
        "simple_insert": {
            "name": "simple_insert",
            "location": 54,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "bulk_insert": {
            "name": "bulk_insert",
            "location": 69,
            "return": [],
            "arguments": {
                "iterator": [],
                "klass": []
            }
        },
        "bulk_insert._insert": {
            "name": "_insert",
            "location": 70,
            "return": [],
            "arguments": {
                "insert_stmt": [],
                "instances": []
            }
        }
    },
    "sanascan-master/deplicated/cli_util/__init__.py": {},
    "sanascan-master/deplicated/db/model.py": {
        "File.__repr__": {
            "name": "__repr__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Data.__repr__": {
            "name": "__repr__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sentence.__repr__": {
            "name": "__repr__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sanascan-master/deplicated/db/session.py": {
        "database": {
            "name": "database",
            "location": 4,
            "return": [],
            "arguments": {
                "user_name": [],
                "password": [],
                "host_ip": [],
                "db_name": []
            }
        },
        "engine_and_session": {
            "name": "engine_and_session",
            "location": 15,
            "return": [],
            "arguments": {
                "database": [],
                "echo": []
            }
        }
    },
    "sanascan-master/deplicated/db/__init__.py": {},
    "sanascan-master/deplicated/db/migrate/__init__.py": {},
    "sanascan-master/deplicated/db/migrate/versions/001_init_database.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "migrate_engine": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "downgrade": {
            "name": "downgrade",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "migrate_engine": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "sanascan-master/deplicated/db/migrate/versions/__init__.py": {},
    "sanascan-master/deplicated/lang_model/lang_model.py": {
        "LangModel.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "arpa_text": []
            }
        },
        "LangModel._process_arpa_file": {
            "name": "_process_arpa_file",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "arpa_text": []
            }
        },
        "LangModel._split": {
            "name": "_split",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "words": []
            }
        },
        "LangModel._join": {
            "name": "_join",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "words": []
            }
        },
        "LangModel._remove_head": {
            "name": "_remove_head",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "words": []
            }
        },
        "LangModel._remove_tail": {
            "name": "_remove_tail",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "words": []
            }
        },
        "LangModel.score": {
            "name": "score",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "words_arg": []
            }
        }
    },
    "sanascan-master/deplicated/lang_model/__init__.py": {},
    "sanascan-master/deplicated/preprocess/dataset.py": {
        "_rakuten_travel_user_review": {
            "name": "_rakuten_travel_user_review",
            "location": 8,
            "return": [],
            "arguments": {
                "contents": []
            }
        }
    },
    "sanascan-master/deplicated/preprocess/util.py": {
        "_prepare": {
            "name": "_prepare",
            "location": 16,
            "return": [],
            "arguments": {
                "database": []
            }
        },
        "register_single_file": {
            "name": "register_single_file",
            "location": 22,
            "return": [],
            "arguments": {
                "file_path": [],
                "dataset": [],
                "database": []
            }
        },
        "extract_data": {
            "name": "extract_data",
            "location": 44,
            "return": [],
            "arguments": {
                "database": []
            }
        },
        "split_sentence": {
            "name": "split_sentence",
            "location": 61,
            "return": [],
            "arguments": {
                "max": [],
                "database": [],
                "chunk": []
            }
        },
        "split_sentence.iter_sentence": {
            "name": "iter_sentence",
            "location": 64,
            "return": [],
            "arguments": {
                "cleaner": [],
                "mecab": [],
                "max": []
            }
        }
    },
    "sanascan-master/deplicated/preprocess/__init__.py": {},
    "sanascan-master/deplicated/script/data.py": {
        "DataEngine.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataEngine._delete_mode": {
            "name": "_delete_mode",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataEngine._sandbox_mode": {
            "name": "_sandbox_mode",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataEngine._non_wrapped_insert_mode": {
            "name": "_non_wrapped_insert_mode",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataEngine._long_time_insert_mode": {
            "name": "_long_time_insert_mode",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataEngine._non_wrapped_insert_mode.iter_": {
            "name": "iter_",
            "location": 61,
            "return": [],
            "arguments": {}
        }
    },
    "sanascan-master/deplicated/script/exp.py": {
        "ExpEngine.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExpEngine._delete_mode": {
            "name": "_delete_mode",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "ExpEngine._sandbox_mode": {
            "name": "_sandbox_mode",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExpEngine._non_wrapped_insert_mode": {
            "name": "_non_wrapped_insert_mode",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "ExpEngine._long_time_insert_mode": {
            "name": "_long_time_insert_mode",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "ExpEngine._non_wrapped_insert_mode._iterator": {
            "name": "_iterator",
            "location": 50,
            "return": [],
            "arguments": {
                "query": [],
                "mecab": []
            }
        }
    },
    "sanascan-master/deplicated/script/morph.py": {
        "MorphemeEngine.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MorphemeEngine._delete_mode": {
            "name": "_delete_mode",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MorphemeEngine._sentence_query_untill_not_splited": {
            "name": "_sentence_query_untill_not_splited",
            "location": 79,
            "return": [],
            "arguments": {}
        },
        "MorphemeEngine._null_or_equal_condition": {
            "name": "_null_or_equal_condition",
            "location": 97,
            "return": [],
            "arguments": {
                "klass1": [],
                "klass2": [],
                "feature": []
            }
        },
        "MorphemeEngine._query_of_unique_morpheme": {
            "name": "_query_of_unique_morpheme",
            "location": 107,
            "return": [],
            "arguments": {
                "klass": []
            }
        },
        "MorphemeEngine._query_of_splited_sentence": {
            "name": "_query_of_splited_sentence",
            "location": 127,
            "return": [],
            "arguments": {
                "klass": []
            }
        },
        "MorphemeEngine._insert_splited_sentence": {
            "name": "_insert_splited_sentence",
            "location": 146,
            "return": [],
            "arguments": {
                "klass": []
            }
        },
        "MorphemeEngine._copy_to_morphemes_table_from_tmp": {
            "name": "_copy_to_morphemes_table_from_tmp",
            "location": 160,
            "return": [],
            "arguments": {
                "klass": []
            }
        },
        "MorphemeEngine._sandbox_mode": {
            "name": "_sandbox_mode",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MorphemeEngine._non_wrapped_insert_mode": {
            "name": "_non_wrapped_insert_mode",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MorphemeEngine._long_time_insert_mode": {
            "name": "_long_time_insert_mode",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sanascan-master/deplicated/script/seed.py": {
        "SeedEngine.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeedEngine._delete_mode": {
            "name": "_delete_mode",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeedEngine._sandbox_mode": {
            "name": "_sandbox_mode",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeedEngine._non_wrapped_insert_mode": {
            "name": "_non_wrapped_insert_mode",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeedEngine._long_time_insert_mode": {
            "name": "_long_time_insert_mode",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sanascan-master/deplicated/script/sentence.py": {
        "SentenceEngine.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SentenceEngine._delete_mode": {
            "name": "_delete_mode",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SentenceEngine._sandbox_mode": {
            "name": "_sandbox_mode",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SentenceEngine._data_query_untill_not_splited": {
            "name": "_data_query_untill_not_splited",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "sentence_delimiter": []
            }
        },
        "SentenceEngine._non_wrapped_insert_mode": {
            "name": "_non_wrapped_insert_mode",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SentenceEngine._long_time_insert_mode": {
            "name": "_long_time_insert_mode",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SentenceEngine._non_wrapped_insert_mode.iter_": {
            "name": "iter_",
            "location": 79,
            "return": [],
            "arguments": {}
        }
    },
    "sanascan-master/deplicated/script/tmp.py": {
        "SeedEngine.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeedEngine._delete_mode": {
            "name": "_delete_mode",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeedEngine._sandbox_mode": {
            "name": "_sandbox_mode",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeedEngine._non_wrapped_insert_mode": {
            "name": "_non_wrapped_insert_mode",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeedEngine._long_time_insert_mode": {
            "name": "_long_time_insert_mode",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sanascan-master/deplicated/step_count/step_count.py": {
        "_yomi2pos": {
            "name": "_yomi2pos",
            "location": 48,
            "return": [],
            "arguments": {
                "words": []
            }
        },
        "words2step": {
            "name": "words2step",
            "location": 62,
            "return": [],
            "arguments": {
                "words": [],
                "method": []
            }
        },
        "Step.__add__": {
            "name": "__add__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_yomi2pos._mozi2pos": {
            "name": "_mozi2pos",
            "location": 52,
            "return": [],
            "arguments": {
                "mozi": []
            }
        },
        "words2step._pos2step": {
            "name": "_pos2step",
            "location": 68,
            "return": [],
            "arguments": {
                "position": [],
                "table": []
            }
        },
        "words2step._total_steps": {
            "name": "_total_steps",
            "location": 77,
            "return": [],
            "arguments": {
                "positions": [],
                "table": []
            }
        }
    },
    "sanascan-master/deplicated/step_count/__init__.py": {},
    "sanascan-master/sanakin-keep/const.py": {},
    "sanascan-master/sanakin-keep/err.py": {},
    "sanascan-master/sanakin-keep/mapped_classes.py": {
        "Corpus.extract_data": {
            "name": "extract_data",
            "location": 19,
            "return": [
                "str",
                "int",
                "float",
                "dict"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "List[str]",
                    "Iterator[str]",
                    "str"
                ]
            }
        },
        "CorpusFile.readline": {
            "name": "readline",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dir_": [
                    "str"
                ]
            }
        },
        "SentenceDelimiter.split": {
            "name": "split",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int",
                    "Tuple[int, int]",
                    "ebl.corpus.domain.texText"
                ]
            }
        }
    },
    "sanascan-master/sanakin-keep/next_id.py": {
        "NextIdSearchable.next_id": {
            "name": "next_id",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "klass": [
                    "str",
                    "bool",
                    "int"
                ],
                "id_column_name": [
                    "str",
                    "bool",
                    "int"
                ],
                "prefix": [
                    "str",
                    "int",
                    "IO"
                ],
                "size": [
                    "str",
                    "int",
                    "bool",
                    "bytes"
                ]
            }
        }
    },
    "sanascan-master/sanakin-keep/snkmecab.py": {
        "SNKMeCab.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "options": [
                    "dict",
                    "Dict[str, Any]",
                    "OrderedDict"
                ]
            }
        },
        "SNKMeCab.parse": {
            "name": "parse",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        }
    },
    "sanascan-master/sanakin-keep/snksession.py": {
        "_SNKSession.__enter__": {
            "name": "__enter__",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SNKSession.__exit__": {
            "name": "__exit__",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "exc_value": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "traceback": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        },
        "_SNKSession.commit_manager": {
            "name": "commit_manager",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CommitManager.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "snksession": [
                    "float",
                    "bool"
                ]
            }
        },
        "_CommitManager.__enter__": {
            "name": "__enter__",
            "location": 25,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CommitManager.__exit__": {
            "name": "__exit__",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "exc_value": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ],
                "traceback": [
                    "Optional[Type[BaseException]]",
                    "type",
                    "Optional[BaseException]",
                    "Optional[Type]"
                ]
            }
        }
    },
    "sanascan-master/sanakin-keep/__init__.py": {},
    "sanascan-master/sanakin-keep/corpus/base_corpus.py": {
        "BaseCorpus._extract_function": {
            "name": "_extract_function",
            "location": 4,
            "return": [
                "bool",
                "Union[int, float]"
            ],
            "arguments": {
                "self": [],
                "corpus_id": [
                    "str",
                    "int"
                ]
            }
        },
        "BaseCorpus._rakuten_travel_user_review": {
            "name": "_rakuten_travel_user_review",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "sanascan-master/sanakin-keep/corpus/__init__.py": {},
    "sanascan-master/sanakin-keep/corpus_data/base_corpus_data.py": {
        "BaseCorpusData.create_iter": {
            "name": "create_iter",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "klass": [
                    "str"
                ],
                "corpus_file": [
                    "bool"
                ],
                "dir_": [
                    "List[str]",
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "sanascan-master/sanakin-keep/corpus_data/__init__.py": {},
    "sanascan-master/sanakin-keep/corpus_file/base_corpus_file.py": {
        "BaseCorpusFile.create": {
            "name": "create",
            "location": 9,
            "return": [
                "Optional[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "klass": [
                    "str",
                    "Union[str, List[str]]",
                    "bool"
                ],
                "file_path": [
                    "str"
                ]
            }
        },
        "BaseCorpusFile._readline": {
            "name": "_readline",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file_path": []
            }
        }
    },
    "sanascan-master/sanakin-keep/corpus_file/__init__.py": {},
    "sanascan-master/sanakin-keep/lang_model/base_lang_model.py": {
        "BaseLangModel.create": {
            "name": "create",
            "location": 16,
            "return": [],
            "arguments": {
                "klass": [],
                "sentences": [],
                "mecab": [],
                "lang_model_file_dir": []
            }
        },
        "BaseLangModel._process_multi_sentences": {
            "name": "_process_multi_sentences",
            "location": 33,
            "return": [],
            "arguments": {
                "klass": [],
                "multi_sentence": [],
                "mecab": []
            }
        },
        "BaseLangModel._process_single_sentence": {
            "name": "_process_single_sentence",
            "location": 41,
            "return": [],
            "arguments": {
                "klass": [],
                "single_sentence": [],
                "mecab": []
            }
        },
        "_AnalyzeMorp.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "mecab_node": []
            }
        },
        "_AnalyzeMorp.is_symbol": {
            "name": "is_symbol",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AnalyzeMorp.surface": {
            "name": "surface",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AnalyzeMorp.yomi": {
            "name": "yomi",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AnalyzeMorp._conv_kata": {
            "name": "_conv_kata",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "str_": []
            }
        }
    },
    "sanascan-master/sanakin-keep/lang_model/__init__.py": {},
    "sanascan-master/sanakin-keep/sentence/base_sentence.py": {
        "BaseSentence.create_iter": {
            "name": "create_iter",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "klass": [
                    "str",
                    "dict",
                    "List[dict]",
                    "Optional[int]",
                    "Dict[str, Any]"
                ],
                "corpus_data": [
                    "dict",
                    "float",
                    "bytes",
                    "str"
                ],
                "sentence_delimiter": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "List[str]",
                    "bytes"
                ]
            }
        }
    },
    "sanascan-master/sanakin-keep/sentence/__init__.py": {},
    "sanascan-master/sanakin-keep/sentence_delimiter/base_sentence.py": {
        "BaseSentenceDelimiter._split": {
            "name": "_split",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "delimiter_regex": [
                    "str",
                    "int"
                ],
                "text": [
                    "str"
                ]
            }
        }
    },
    "sanascan-master/sanakin-keep/sentence_delimiter/__init__.py": {},
    "sanascan-master/sanascan_backend/setup.py": {},
    "sanascan-master/sanascan_backend/other/read_time.py": {
        "stop_watch": {
            "name": "stop_watch",
            "location": 8,
            "return": [],
            "arguments": {
                "msg": []
            }
        },
        "text_file": {
            "name": "text_file",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "arpa_file": {
            "name": "arpa_file",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "stop_watch.decorater": {
            "name": "decorater",
            "location": 9,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "stop_watch.decorater.wrapper": {
            "name": "wrapper",
            "location": 10,
            "return": [],
            "arguments": {}
        }
    },
    "sanascan-master/sanascan_backend/sanascan_backend/estimator.py": {
        "Estimator.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "lm": []
            }
        },
        "Estimator.add": {
            "name": "add",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Estimator.finish": {
            "name": "finish",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Estimator.reset": {
            "name": "reset",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sanascan-master/sanascan_backend/sanascan_backend/http.py": {
        "CORSMiddleware.process_request": {
            "name": "process_request",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "req": [],
                "resp": []
            }
        },
        "RootResource.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RootResource.on_post": {
            "name": "on_post",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "req": [],
                "resp": []
            }
        },
        "RootResource.__getitem__": {
            "name": "__getitem__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "EIDResouce.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "root_resource": []
            }
        },
        "EIDResouce.on_post": {
            "name": "on_post",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "req": [],
                "resp": []
            }
        },
        "EIDResouce.on_get": {
            "name": "on_get",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "req": [],
                "resp": []
            }
        },
        "EIDResouce.on_delete": {
            "name": "on_delete",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "req": [],
                "resp": []
            }
        }
    },
    "sanascan-master/sanascan_backend/sanascan_backend/key.py": {
        "Key.from_sentence": {
            "name": "from_sentence",
            "location": 46,
            "return": [],
            "arguments": {
                "klass": [],
                "sentence": [],
                "type_": []
            }
        },
        "Key._process_words": {
            "name": "_process_words",
            "location": 55,
            "return": [],
            "arguments": {
                "klass": [],
                "sentence": [],
                "type_": []
            }
        },
        "Key.from_int": {
            "name": "from_int",
            "location": 70,
            "return": [],
            "arguments": {
                "klass": [],
                "arg": []
            }
        },
        "Key.from_str": {
            "name": "from_str",
            "location": 76,
            "return": [],
            "arguments": {
                "klass": [],
                "arg": []
            }
        },
        "Key.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "Key.__eq__": {
            "name": "__eq__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Key.__hash__": {
            "name": "__hash__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Key.__repr__": {
            "name": "__repr__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Key.__str__": {
            "name": "__str__",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Key.__iter__": {
            "name": "__iter__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Key.__add__": {
            "name": "__add__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Key.subsequence_with_end": {
            "name": "subsequence_with_end",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "end": []
            }
        },
        "Key.all_of_subsequence": {
            "name": "all_of_subsequence",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Key.__len__": {
            "name": "__len__",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sanascan-master/sanascan_backend/sanascan_backend/lang_model.py": {
        "LangModel.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "arpa": []
            }
        },
        "LangModel.score": {
            "name": "score",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "sentence": []
            }
        },
        "LangModel._get_word_set": {
            "name": "_get_word_set",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LangModel.create_vocabrary": {
            "name": "create_vocabrary",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LangModel.Data.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "prob": [],
                "backoff": []
            }
        }
    },
    "sanascan-master/sanascan_backend/sanascan_backend/node.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "bool",
                    "int",
                    "Union[Callable, str]",
                    "List[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]"
                ],
                "candidates": [
                    "Optional[int]",
                    "int",
                    "str",
                    "bool"
                ],
                "lang_model": [
                    "bool",
                    "float",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "Node._calc_score": {
            "name": "_calc_score",
            "location": 30,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[T]"
                ],
                "lm": [
                    "Iterable[T]"
                ]
            }
        },
        "RootNode.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EOSNode.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "candidates": [
                    "int",
                    "bool",
                    "List[AnyStr]"
                ],
                "lang_model": [
                    "int",
                    "bool",
                    "List[AnyStr]"
                ]
            }
        }
    },
    "sanascan-master/sanascan_backend/sanascan_backend/srilm.py": {
        "create_count_file": {
            "name": "create_count_file",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "wakati": [
                    "str",
                    "Optional[str]",
                    "Callable[..., bool]",
                    "int"
                ],
                "order": [
                    "str",
                    "Optional[str]",
                    "Callable[..., bool]",
                    "int"
                ],
                "delete": [
                    "str",
                    "bytes",
                    "float"
                ]
            }
        }
    },
    "sanascan-master/sanascan_backend/sanascan_backend/vocabulary.py": {
        "Vocabulary.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "words": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "Vocabulary._add_data": {
            "name": "_add_data",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "key.Key",
                    "Container[str]"
                ],
                "word": [
                    "Key",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Vocabulary.get_by_key": {
            "name": "get_by_key",
            "location": 47,
            "return": [
                "typing.Iterable[ResultOfGetByKey]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "key.Key",
                    "str",
                    "bytes",
                    "Key",
                    "KT",
                    "int"
                ]
            }
        }
    },
    "sanascan-master/sanascan_backend/sanascan_backend/word.py": {
        "Word.from_wakachigaki": {
            "name": "from_wakachigaki",
            "location": 12,
            "return": [
                "Callable",
                "bytes",
                "Optional[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "wakachigaki": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "Word.from_str_of_singleword": {
            "name": "from_str_of_singleword",
            "location": 21,
            "return": [
                "List[str]",
                "Union[bytes, str]",
                "Dict[str, Any]",
                "Iterable[Tuple[str, str]]",
                "int",
                "tuple",
                "Match"
            ],
            "arguments": {
                "klass": [
                    "str",
                    "int",
                    "MutableMapping[str, Any]",
                    "Dict[str, Any]"
                ],
                "arg": [
                    "str",
                    "int"
                ]
            }
        },
        "Word.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "surface": [
                    "int",
                    "bool",
                    "float"
                ],
                "yomi": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Word.__eq__": {
            "name": "__eq__",
            "location": 36,
            "return": [
                "bool",
                "int",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Word.__hash__": {
            "name": "__hash__",
            "location": 45,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word.__tuple__": {
            "name": "__tuple__",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word.__str__": {
            "name": "__str__",
            "location": 51,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word.__repr__": {
            "name": "__repr__",
            "location": 54,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TagWord.is_include": {
            "name": "is_include",
            "location": 62,
            "return": [
                "bool",
                "str",
                "Optional[Callable[[bool], None]]",
                "Optional[str]"
            ],
            "arguments": {
                "klass": [
                    "str",
                    "List[str]"
                ],
                "arg": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "TagWord.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "bool"
                ]
            }
        },
        "TagWord.__str__": {
            "name": "__str__",
            "location": 70,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sentence.from_iter": {
            "name": "from_iter",
            "location": 80,
            "return": [
                "str",
                "Sequence",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "klass": [
                    "Optional[Iterable[str]]",
                    "Iterator[T]"
                ],
                "words": [
                    "Optional[Iterable[str]]",
                    "Iterator[T]"
                ]
            }
        },
        "Sentence.__str__": {
            "name": "__str__",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sentence.format_surfaces": {
            "name": "format_surfaces",
            "location": 88,
            "return": [
                "bool",
                "list",
                "List[Tuple[int, str, str]]",
                "List[Dict[str, Any]]",
                "frozenset",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word.from_wakachigaki._iter": {
            "name": "_iter",
            "location": 13,
            "return": [
                "typing.Iterable[Word]"
            ],
            "arguments": {}
        }
    },
    "sanascan-master/sanascan_backend/sanascan_backend/word_builder.py": {
        "WordBuilder.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WordBuilder.is_symbol": {
            "name": "is_symbol",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WordBuilder.to_word": {
            "name": "to_word",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WordBuilder._formal_surface": {
            "name": "_formal_surface",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WordBuilder._formal_yomi": {
            "name": "_formal_yomi",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WordBuilder._conv_kata": {
            "name": "_conv_kata",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "str_": []
            }
        },
        "BuilderFromMeCab.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "mecab_node": []
            }
        },
        "BuilderFromMeCab.from_plaintext": {
            "name": "from_plaintext",
            "location": 115,
            "return": [],
            "arguments": {
                "klass": [],
                "text": [],
                "mecab": []
            }
        }
    },
    "sanascan-master/sanascan_backend/sanascan_backend/yomi_property.py": {
        "ColNum.create": {
            "name": "create",
            "location": 14,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "klass": [
                    "dict",
                    "float",
                    "Dict[str, Any]"
                ],
                "arg": [
                    "str",
                    "int",
                    "List[int]",
                    "Callable[[int], None]"
                ]
            }
        },
        "Position.create": {
            "name": "create",
            "location": 25,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "klass": [
                    "dict",
                    "float",
                    "Dict[str, Any]"
                ],
                "arg": [
                    "bytes",
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "sanascan-master/sanascan_backend/sanascan_backend/__init__.py": {},
    "sanascan-master/sanascan_backend/sanascan_backend/cejc/parser.py": {
        "BuilderFromCEJC.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "row": []
            }
        },
        "SentenceHeadFrag.__post_init__": {
            "name": "__post_init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SentenceHeadFrag._other_flag": {
            "name": "_other_flag",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SentenceHeadFrag.__call__": {
            "name": "__call__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "input": []
            }
        },
        "SOS.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NotSOS.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SentenceParser.__call__": {
            "name": "__call__",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "input": []
            }
        },
        "CEJC.__call__": {
            "name": "__call__",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "input": []
            }
        }
    },
    "sanascan-master/sanascan_backend/sanascan_backend/cejc/preprocess.py": {
        "create_wakati": {
            "name": "create_wakati",
            "location": 11,
            "return": [
                "str",
                "Dict[str, Any]",
                "Set[str]",
                "List[str]",
                "list"
            ],
            "arguments": {
                "csv_path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        }
    },
    "sanascan-master/sanascan_backend/sanascan_backend/cejc/__init__.py": {},
    "sanascan-master/sanascan_backend/sanascan_backend/evaluation/dp_matching.py": {
        "WordAccuracy.__post_init__": {
            "name": "__post_init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DPMatching.__post_init__": {
            "name": "__post_init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DPMatching.get_node": {
            "name": "get_node",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "pos": []
            }
        },
        "DPMatching.is_match": {
            "name": "is_match",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "pos": []
            }
        },
        "DPMatching.get_accuracy": {
            "name": "get_accuracy",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sanascan-master/sanascan_backend/sanascan_backend/evaluation/node.py": {
        "Node.__post_init__": {
            "name": "__post_init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node._parent_candidates": {
            "name": "_parent_candidates",
            "location": 37,
            "return": [
                "typing.Iterable['Node']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node._calc_matching_score": {
            "name": "_calc_matching_score",
            "location": 41,
            "return": [
                "Callable[[T], bool]",
                "Iterable[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node._calc_score": {
            "name": "_calc_score",
            "location": 47,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Type"
                ]
            }
        },
        "Node.is_root": {
            "name": "is_root",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sanascan-master/sanascan_backend/sanascan_backend/evaluation/position.py": {
        "Position.parent_positions": {
            "name": "parent_positions",
            "location": 13,
            "return": [
                "typing.Iterable['Position']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Position.penalty": {
            "name": "penalty",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Tuple[str, str]",
                    "int",
                    "dict"
                ]
            }
        },
        "Position.is_root": {
            "name": "is_root",
            "location": 32,
            "return": [
                "str",
                "int",
                "dict",
                "Hashable"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sanascan-master/sanascan_backend/sanascan_backend/evaluation/score.py": {
        "Score.__add__": {
            "name": "__add__",
            "location": 11,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str"
                ]
            }
        },
        "Score.__int__": {
            "name": "__int__",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sanascan-master/sanascan_backend/sanascan_backend/evaluation/__init__.py": {},
    "sanascan-master/sanascan_backend/scripts/create_count_files.py": {},
    "sanascan-master/sanascan_backend/scripts/__init__.py": {},
    "sanascan-master/sanascan_backend/stubs/falcon/api.py": {
        "OnGetResource.on_get": {
            "name": "on_get",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "req": [],
                "resp": []
            }
        },
        "OnPostResource.on_post": {
            "name": "on_post",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "req": [],
                "resp": []
            }
        },
        "OnPutResource.on_put": {
            "name": "on_put",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "req": [],
                "resp": []
            }
        },
        "ProcessRequestMiddleware.process_request": {
            "name": "process_request",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "req": [],
                "resp": []
            }
        },
        "API.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "middleware": []
            }
        },
        "API.add_route": {
            "name": "add_route",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "uri_template": [],
                "resource": []
            }
        }
    },
    "sanascan-master/sanascan_backend/stubs/falcon/constants.py": {},
    "sanascan-master/sanascan_backend/stubs/falcon/request.py": {},
    "sanascan-master/sanascan_backend/stubs/falcon/response.py": {
        "Response.append_header": {
            "name": "append_header",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        },
        "Response.set_header": {
            "name": "set_header",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        }
    },
    "sanascan-master/sanascan_backend/stubs/falcon/status_codes.py": {},
    "sanascan-master/sanascan_backend/stubs/falcon/__init__.py": {},
    "sanascan-master/sanascan_backend/stubs/falcon/testing/client.py": {
        "TestClient.simulate_get": {
            "name": "simulate_get",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "TestClient.simulate_post": {
            "name": "simulate_post",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "TestClient.simulate_put": {
            "name": "simulate_put",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        }
    },
    "sanascan-master/sanascan_backend/stubs/falcon/testing/test_case.py": {},
    "sanascan-master/sanascan_backend/stubs/falcon/testing/__init__.py": {},
    "sanascan-master/sanascan_backend/stubs/jaconv/jaconv.py": {
        "normalize": {
            "name": "normalize",
            "location": 1,
            "return": [],
            "arguments": {
                "text": [],
                "mode": [],
                "ignore": []
            }
        },
        "hira2kata": {
            "name": "hira2kata",
            "location": 2,
            "return": [],
            "arguments": {
                "text": [],
                "ignore": []
            }
        }
    },
    "sanascan-master/sanascan_backend/stubs/jaconv/__init__.py": {},
    "sanascan-master/sanascan_backend/stubs/natto/mecab.py": {
        "MeCab.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "MeCab.parse": {
            "name": "parse",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        }
    },
    "sanascan-master/sanascan_backend/stubs/natto/node.py": {
        "MeCabNode.is_eos": {
            "name": "is_eos",
            "location": 4,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sanascan-master/sanascan_backend/stubs/natto/__init__.py": {},
    "sanascan-master/sanascan_backend/tests/test_estimator.py": {
        "TestEstimator.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEstimator.test_estimate": {
            "name": "test_estimate",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEstimator.test_add_side_effect": {
            "name": "test_add_side_effect",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        }
    },
    "sanascan-master/sanascan_backend/tests/test_http.py": {
        "TestHTTP.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHTTP.test_http_estimate": {
            "name": "test_http_estimate",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sanascan-master/sanascan_backend/tests/test_key.py": {
        "TestKey.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestKey.test_from_words_by_colnum": {
            "name": "test_from_words_by_colnum",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestKey.test_from_words_by_position": {
            "name": "test_from_words_by_position",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestKey.test_str": {
            "name": "test_str",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestKey.test_add": {
            "name": "test_add",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestKey.test_subsequence": {
            "name": "test_subsequence",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sanascan-master/sanascan_backend/tests/test_lang_model.py": {
        "TestLangModel.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLangModel.test_score": {
            "name": "test_score",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "TestLangModel.test_vocab": {
            "name": "test_vocab",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "TestLangModel.test_pickle": {
            "name": "test_pickle",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sanascan-master/sanascan_backend/tests/test_node.py": {
        "TestNode.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNode.test_init": {
            "name": "test_init",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sanascan-master/sanascan_backend/tests/test_vocablary.py": {
        "TestVocabulary.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVocabulary.test_have_num_tagword": {
            "name": "test_have_num_tagword",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVocabulary.test_get_by_key": {
            "name": "test_get_by_key",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sanascan-master/sanascan_backend/tests/test_word.py": {
        "TestWord.test_from_str_of_singleword": {
            "name": "test_from_str_of_singleword",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "TestWord.test_str": {
            "name": "test_str",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "TestWord.test_static_to_str": {
            "name": "test_static_to_str",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "TestWord.test_eq": {
            "name": "test_eq",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWord.test_from_sentence": {
            "name": "test_from_sentence",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWord.test_tag_word": {
            "name": "test_tag_word",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sanascan-master/sanascan_backend/tests/use_lang_model.py": {
        "UseLangModel.setUpClass": {
            "name": "setUpClass",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "klass": [
                    "Type[T]",
                    "float",
                    "List[int]",
                    "int"
                ]
            }
        }
    },
    "sanascan-master/sanascan_backend/tests/__init__.py": {},
    "sanascan-master/sanascan_backend/tests/evaluation/test_dp_matching.py": {
        "TestDPMatching._common": {
            "name": "_common",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "ref": [],
                "est": [],
                "s": [],
                "acc": []
            }
        },
        "TestDPMatching.test_dpmatching": {
            "name": "test_dpmatching",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sanascan-master/sanascan_backend/tests/evaluation/__init__.py": {},
    "sanascan-master/sanascan_backend/tests/parser/test_cejc.py": {
        "TestCEJC.test_sos": {
            "name": "test_sos",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCEJC.test_sentence": {
            "name": "test_sentence",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCEJC.test_cejc": {
            "name": "test_cejc",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sanascan-master/sanascan_backend/tests/parser/__init__.py": {}
}
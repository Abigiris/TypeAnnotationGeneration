{
    "seagull-master/setup.py": {},
    "seagull-master/docs/conf.py": {},
    "seagull-master/docs/notebooks/sprator_streamlit/CellularSprites.py": {
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "make_sprite": {
            "name": "make_sprite",
            "location": 123,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "n_sprites": [
                    "int",
                    "float"
                ],
                "n_iters": [
                    "int",
                    "Dict[str, int]",
                    "str"
                ],
                "repro_rate": [
                    "int",
                    "Dict[str, int]",
                    "str"
                ],
                "stasis_rate": [
                    "int",
                    "Dict[str, int]",
                    "str"
                ]
            }
        },
        "custom_rule": {
            "name": "custom_rule",
            "location": 215,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "X": [
                    "numpy.ndarray",
                    "float"
                ],
                "repro_rate": [
                    "bool",
                    "int"
                ],
                "stasis_rate": [
                    "numpy.ndarray",
                    "float",
                    "Iterable[float]"
                ]
            }
        },
        "add_outline": {
            "name": "add_outline",
            "location": 223,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "mat": [
                    "numpy.ndarray",
                    "List[Tuple[str, str]]",
                    "Set[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_gradient": {
            "name": "get_gradient",
            "location": 247,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "mat": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "combine": {
            "name": "combine",
            "location": 261,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "mat_outline": [
                    "List[str]",
                    "str"
                ],
                "mat_gradient": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "get_gradient._remap": {
            "name": "_remap",
            "location": 251,
            "return": [
                "str"
            ],
            "arguments": {
                "new_range": [
                    "Tuple[float, float]"
                ],
                "matrix": [
                    "bool",
                    "str",
                    "Union[int, float]",
                    "numpy.ndarray",
                    "Iterable[str]"
                ]
            }
        }
    },
    "seagull-master/seagull/board.py": {
        "Board.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "numpy.ndarray",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Board.add": {
            "name": "add",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "lifeform": [
                    "int",
                    "List[Tuple[int, int]]",
                    "Union[int, float]"
                ],
                "loc": [
                    "Tuple[int, int]",
                    "float",
                    "bytes",
                    "Sequence[str]",
                    "bytearray",
                    "str"
                ]
            }
        },
        "Board.clear": {
            "name": "clear",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.view": {
            "name": "view",
            "location": 82,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "figsize": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "seagull-master/seagull/rules.py": {
        "conway_classic": {
            "name": "conway_classic",
            "location": 19,
            "return": [
                "numpy.ndarray",
                "str",
                "Iterable[Any]"
            ],
            "arguments": {
                "X": [
                    "float",
                    "int",
                    "numpy.ndarray",
                    "bytes"
                ]
            }
        },
        "life_rule": {
            "name": "life_rule",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "X": [
                    "numpy.ndarray",
                    "float",
                    "numpy.array"
                ],
                "rulestring": [
                    "str",
                    "float"
                ]
            }
        },
        "_parse_rulestring": {
            "name": "_parse_rulestring",
            "location": 51,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "r": [
                    "int",
                    "bool",
                    "str",
                    "Optional[float]"
                ]
            }
        },
        "_count_neighbors": {
            "name": "_count_neighbors",
            "location": 66,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "X": [
                    "float",
                    "int",
                    "numpy.ndarray",
                    "bytes"
                ]
            }
        }
    },
    "seagull-master/seagull/simulator.py": {
        "Simulator.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "board": [
                    "int",
                    "bool",
                    "game.board.Board",
                    "float"
                ]
            }
        },
        "Simulator.run": {
            "name": "run",
            "location": 86,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "str",
                    "int",
                    "bool",
                    "list"
                ],
                "iters": [
                    "str",
                    "int",
                    "bool",
                    "list"
                ]
            }
        },
        "Simulator.compute_statistics": {
            "name": "compute_statistics",
            "location": 115,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "history": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Simulator.get_history": {
            "name": "get_history",
            "location": 146,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "exclude_init": [
                    "Optional[str]",
                    "List[str]",
                    "str",
                    "List[List[int]]",
                    "cmk.utils.type_defs.EventRule"
                ]
            }
        },
        "Simulator.animate": {
            "name": "animate",
            "location": 163,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "figsize": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "interval": []
            }
        },
        "Simulator.animate._animate": {
            "name": "_animate",
            "location": 190,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "i": [
                    "str",
                    "int",
                    "List[int]"
                ],
                "history": [
                    "int",
                    "str",
                    "Type[Callable[..., Any]]",
                    "float"
                ]
            }
        },
        "Simulator.animate._init": {
            "name": "_init",
            "location": 195,
            "return": [
                "int",
                "bool",
                "game.board.Board",
                "float"
            ],
            "arguments": {}
        }
    },
    "seagull-master/seagull/__init__.py": {},
    "seagull-master/seagull/lifeforms/base.py": {
        "Lifeform.layout": {
            "name": "layout",
            "location": 47,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lifeform.size": {
            "name": "size",
            "location": 52,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lifeform.view": {
            "name": "view",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "figsize": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "seagull-master/seagull/lifeforms/custom.py": {
        "Custom.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "X": [
                    "float"
                ]
            }
        },
        "Custom.validate_input_values": {
            "name": "validate_input_values",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "X": [
                    "numpy.ndarray",
                    "int",
                    "float"
                ]
            }
        },
        "Custom.validate_input_shapes": {
            "name": "validate_input_shapes",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "X": [
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "Custom.layout": {
            "name": "layout",
            "location": 68,
            "return": [
                "bool",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "seagull-master/seagull/lifeforms/gliders.py": {
        "Glider.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Glider.layout": {
            "name": "layout",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LightweightSpaceship.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LightweightSpaceship.layout": {
            "name": "layout",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MiddleweightSpaceship.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MiddleweightSpaceship.layout": {
            "name": "layout",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "seagull-master/seagull/lifeforms/growers.py": {
        "Unbounded.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Unbounded.layout": {
            "name": "layout",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "seagull-master/seagull/lifeforms/methuselahs.py": {
        "Century.___init___": {
            "name": "___init___",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Century.layout": {
            "name": "layout",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Thunderbird.___init___": {
            "name": "___init___",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Thunderbird.layout": {
            "name": "layout",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "seagull-master/seagull/lifeforms/oscillators.py": {
        "Blinker.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "length": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Blinker.layout": {
            "name": "layout",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Toad.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Toad.layout": {
            "name": "layout",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pulsar.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Pulsar.layout": {
            "name": "layout",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FigureEight.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FigureEight.layout": {
            "name": "layout",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Beacon.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Beacon.layout": {
            "name": "layout",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pentadecathlon.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Pentadecathlon.layout": {
            "name": "layout",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChaCha.___init___": {
            "name": "___init___",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ChaCha.layout": {
            "name": "layout",
            "location": 114,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "seagull-master/seagull/lifeforms/random.py": {
        "RandomBox.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "shape": [
                    "int",
                    "bool",
                    "float"
                ],
                "seed": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "RandomBox.layout": {
            "name": "layout",
            "location": 32,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "seagull-master/seagull/lifeforms/static.py": {
        "Box.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Box.layout": {
            "name": "layout",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Seed.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Seed.layout": {
            "name": "layout",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Moon.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Moon.layout": {
            "name": "layout",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Kite.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Kite.layout": {
            "name": "layout",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Eater1.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Eater1.layout": {
            "name": "layout",
            "location": 69,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SwitchEngine.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SwitchEngine.layout": {
            "name": "layout",
            "location": 83,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "seagull-master/seagull/lifeforms/wiki.py": {
        "parse_plaintext_layout": {
            "name": "parse_plaintext_layout",
            "location": 69,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "plaintext_str": [
                    "Union[str, list]",
                    "str",
                    "list"
                ]
            }
        },
        "_get_metadata": {
            "name": "_get_metadata",
            "location": 113,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "lines": [
                    "List[str]",
                    "str",
                    "List[Dict[str, Any]]",
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "_load_file_of_url": {
            "name": "_load_file_of_url",
            "location": 159,
            "return": [
                "str",
                "bytes",
                "List[str]",
                "int",
                "Dict[str, Any]",
                "Tuple[str, str]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "norfs.fs.base.Path"
                ]
            }
        },
        "parse_cells": {
            "name": "parse_cells",
            "location": 188,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cells_str": [
                    "str"
                ]
            }
        },
        "cells2rle": {
            "name": "cells2rle",
            "location": 244,
            "return": [
                "Sequence['cirq.Qid']",
                "str",
                "bool",
                "numpy.ndarray"
            ],
            "arguments": {
                "cells_str": [
                    "str",
                    "dict",
                    "BinaryIO",
                    "IO[Any]"
                ]
            }
        },
        "rle2cells": {
            "name": "rle2cells",
            "location": 274,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "rle_str": [
                    "str"
                ]
            }
        },
        "parse_rle": {
            "name": "parse_rle",
            "location": 305,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rle_str": [
                    "str"
                ]
            }
        }
    },
    "seagull-master/seagull/lifeforms/__init__.py": {},
    "seagull-master/seagull/utils/statistics.py": {
        "shannon_entropy": {
            "name": "shannon_entropy",
            "location": 8,
            "return": [
                "int"
            ],
            "arguments": {
                "state": [
                    "dict",
                    "bool",
                    "int"
                ]
            }
        },
        "cell_coverage": {
            "name": "cell_coverage",
            "location": 26,
            "return": [],
            "arguments": {
                "state": [
                    "numpy.ndarray"
                ]
            }
        }
    },
    "seagull-master/seagull/utils/__init__.py": {},
    "seagull-master/tests/test_board.py": {
        "test_board_add": {
            "name": "test_board_add",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_board_add_out_of_bounds": {
            "name": "test_board_add_out_of_bounds",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_board_clear": {
            "name": "test_board_clear",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_board_view": {
            "name": "test_board_view",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "seagull-master/tests/test_lifeforms.py": {
        "test_lifeform_size": {
            "name": "test_lifeform_size",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "lifeform": [
                    "str",
                    "Optional[str]",
                    "Optional[List[int]]",
                    "bool",
                    "Callable[..., str]"
                ],
                "cls": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_lifeform_layout": {
            "name": "test_lifeform_layout",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "lifeform": [
                    "Optional[BinaryIO]",
                    "BinaryIO",
                    "str",
                    "Set[str]",
                    "bool"
                ],
                "cls": [
                    "str",
                    "Iterable[str]",
                    "set",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "test_lifeform_view": {
            "name": "test_lifeform_view",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "lifeform": [
                    "Optional[BinaryIO]",
                    "BinaryIO",
                    "str",
                    "Set[str]",
                    "bool"
                ],
                "cls": [
                    "str",
                    "dict",
                    "int",
                    "List[str]"
                ]
            }
        },
        "test_custom_validate_input_values": {
            "name": "test_custom_validate_input_values",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_custom_validate_input_shape": {
            "name": "test_custom_validate_input_shape",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_plaintext_layout": {
            "name": "test_parse_plaintext_layout",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_plaintext_layout_list": {
            "name": "test_parse_plaintext_layout_list",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_plaintext_layout_letters_error": {
            "name": "test_parse_plaintext_layout_letters_error",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_glider_lifeform": {
            "name": "test_glider_lifeform",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "lifeform": [
                    "List[numpy.ndarray]",
                    "int"
                ]
            }
        },
        "test_lifeform_parse_cells": {
            "name": "test_lifeform_parse_cells",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lifeform_parse_cells_file": {
            "name": "test_lifeform_parse_cells_file",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "Callable"
                ]
            }
        },
        "test_lifeform_parse_cells_url": {
            "name": "test_lifeform_parse_cells_url",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lifeform_parse_rle": {
            "name": "test_lifeform_parse_rle",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lifeform_cells2rle": {
            "name": "test_lifeform_cells2rle",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "seagull-master/tests/test_rules.py": {
        "test_rule_return_shape": {
            "name": "test_rule_return_shape",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "rule_name": [
                    "str"
                ],
                "fn": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "test_rule_return_type": {
            "name": "test_rule_return_type",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "rule_name": [
                    "str"
                ],
                "fn": [
                    "Dict[str, Any]",
                    "int",
                    "str"
                ]
            }
        },
        "test_rulestring_parser_expected_values": {
            "name": "test_rulestring_parser_expected_values",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "rules": [
                    "str"
                ],
                "expected": [
                    "str",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "test_rulestring_should_handle_wrong_inputs_gracefully": {
            "name": "test_rulestring_should_handle_wrong_inputs_gracefully",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "rules": [
                    "str"
                ]
            }
        },
        "test_conway_alive_cell_with_no_neighbor_dies": {
            "name": "test_conway_alive_cell_with_no_neighbor_dies",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_conway_alive_cell_with_one_neighbor_dies": {
            "name": "test_conway_alive_cell_with_one_neighbor_dies",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_conway_alive_cell_with_more_than_3_neighbors_dies": {
            "name": "test_conway_alive_cell_with_more_than_3_neighbors_dies",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_conway_alive_cell_with_2_neighbors_lives": {
            "name": "test_conway_alive_cell_with_2_neighbors_lives",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_conway_alive_cell_with_3_neighbors_lives": {
            "name": "test_conway_alive_cell_with_3_neighbors_lives",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_conway_dead_cell_with_three_live_neighbors_lives": {
            "name": "test_conway_dead_cell_with_three_live_neighbors_lives",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_conway_dead_cell_with_two_live_neighbors_stay_dead": {
            "name": "test_conway_dead_cell_with_two_live_neighbors_stay_dead",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "put_cells_to_board": {
            "name": "put_cells_to_board",
            "location": 112,
            "return": [
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "coords": [
                    "int",
                    "List[Tuple[int, int]]",
                    "float",
                    "numpy.ndarray",
                    "Optional[List[Any]]",
                    "BaseException"
                ]
            }
        }
    },
    "seagull-master/tests/test_simulator.py": {
        "test_simulator_run": {
            "name": "test_simulator_run",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_simulator_get_history_shape": {
            "name": "test_simulator_get_history_shape",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "exclude_init": []
            }
        },
        "test_simulator_animate": {
            "name": "test_simulator_animate",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_simulator_animate_without_run": {
            "name": "test_simulator_animate_without_run",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_compute_statistics": {
            "name": "test_compute_statistics",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_simulator_inplace": {
            "name": "test_simulator_inplace",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "seagull-master/tests/__init__.py": {}
}
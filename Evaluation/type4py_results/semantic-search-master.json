{
    "semantic-search-master/download_punkt.py": {},
    "semantic-search-master/routes.py": {
        "search_one_doc": {
            "name": "search_one_doc",
            "location": 21,
            "return": [
                "dict",
                "str",
                "int",
                "bool"
            ],
            "arguments": {}
        }
    },
    "semantic-search-master/search.py": {
        "search": {
            "name": "search",
            "location": 13,
            "return": [
                "List[str]",
                "bytes",
                "str",
                "int"
            ],
            "arguments": {
                "search_concept": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "bool"
                ],
                "doc": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "bool"
                ],
                "embedding": [
                    "str",
                    "Union[str, List[str]]"
                ],
                "model_id": [
                    "str",
                    "Optional[str]"
                ],
                "config_file": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Dict[str, Dict[str, Any]]",
                    "Optional['SparkSession']"
                ]
            }
        }
    },
    "semantic-search-master/setup.py": {},
    "semantic-search-master/create_model/preprocess.py": {
        "removePageNumbers": {
            "name": "removePageNumbers",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "getFulltextFromPages": {
            "name": "getFulltextFromPages",
            "location": 19,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "pages": [
                    "dict",
                    "Iterable",
                    "str",
                    "Optional[Tuple[str, ...]]"
                ]
            }
        },
        "preprocess": {
            "name": "preprocess",
            "location": 26,
            "return": [
                "bool",
                "pandas.DataFrame",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "sentence": [
                    "int",
                    "list"
                ]
            }
        },
        "generateValidJSON": {
            "name": "generateValidJSON",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        }
    },
    "semantic-search-master/semantic_search/osHelper.py": {
        "loadJSON": {
            "name": "loadJSON",
            "location": 4,
            "return": [
                "str",
                "Callable",
                "Callable[[KT, VT], bool]",
                "dict",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "semantic-search-master/semantic_search/Preprocessor.py": {
        "Preprocessor.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "Dict[str, bool]",
                    "Dict[str, Any]",
                    "Mapping",
                    "Union[str, dict]"
                ]
            }
        },
        "Preprocessor.rm_specialChars": {
            "name": "rm_specialChars",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Preprocessor.rm_numbers": {
            "name": "rm_numbers",
            "location": 17,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "Preprocessor.lower": {
            "name": "lower",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Preprocessor.tokenize": {
            "name": "tokenize",
            "location": 23,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Preprocessor.replace_linebreaks": {
            "name": "replace_linebreaks",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Preprocessor.apply_functions": {
            "name": "apply_functions",
            "location": 32,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "attribute": [
                    "str",
                    "type",
                    "int"
                ]
            }
        },
        "Preprocessor.process": {
            "name": "process",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        }
    },
    "semantic-search-master/semantic_search/SentenceTokenizer.py": {
        "SentenceTokenizer.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "MAX_SENTENCE_LENGTH": [
                    "int",
                    "float",
                    "Optional[int]"
                ],
                "MIN_SENTENCE_LENGTH": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "SentenceTokenizer.setupTokenizer": {
            "name": "setupTokenizer",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SentenceTokenizer.loadTokenizer": {
            "name": "loadTokenizer",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "language": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "SentenceTokenizer.addAbbrevations": {
            "name": "addAbbrevations",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "abbrevations": [
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "SentenceTokenizer.detokenize": {
            "name": "detokenize",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "wordList": [
                    "List[str]",
                    "list",
                    "str",
                    "dict",
                    "List[OrderedDict]",
                    "List[Tuple]"
                ]
            }
        },
        "SentenceTokenizer.splitListAtPunctuationWithVarianz": {
            "name": "splitListAtPunctuationWithVarianz",
            "location": 41,
            "return": [
                "str",
                "List[Dict]",
                "List[str]",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "wordList": [
                    "List[Tuple[int, int]]",
                    "Tuple[int, int]",
                    "int",
                    "Iterable[str]",
                    "Dict[str, int]",
                    "list"
                ],
                "sections": [
                    "int",
                    "List[str]",
                    "bytes",
                    "str"
                ],
                "wordRange": [
                    "int",
                    "list",
                    "List[int]",
                    "numpy.array",
                    "Dict[str, Dict[str, Any]]",
                    "Set[str]"
                ]
            }
        },
        "SentenceTokenizer.insertSpaceAfterPunctuation": {
            "name": "insertSpaceAfterPunctuation",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "SentenceTokenizer.insertNewlineAfterSpeech": {
            "name": "insertNewlineAfterSpeech",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "SentenceTokenizer.insertNewLine": {
            "name": "insertNewLine",
            "location": 69,
            "return": [
                "str",
                "Exception",
                "Dict[str, Any]",
                "Callable[..., T]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ],
                "indicator": [
                    "str"
                ],
                "minimumSentenceLength": [
                    "str"
                ]
            }
        },
        "SentenceTokenizer.splitAtNewline": {
            "name": "splitAtNewline",
            "location": 80,
            "return": [
                "Callable[[T], bool]",
                "str",
                "List[Tuple]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "sentences": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "SentenceTokenizer.splitInChunks": {
            "name": "splitInChunks",
            "location": 84,
            "return": [
                "int",
                "List[int]",
                "List[Dict[str, str]]",
                "Sequence[Any]",
                "List[Tuple[int, str, str]]",
                "list",
                "Dict[str, Any]",
                "Optional[dict]"
            ],
            "arguments": {
                "self": [],
                "sentence": [
                    "int",
                    "Tuple[int]",
                    "float",
                    "str",
                    "List[List[int]]",
                    "List[int]"
                ],
                "MAX_SENTENCE_LENGTH": [
                    "int",
                    "str",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "SentenceTokenizer.flattenList": {
            "name": "flattenList",
            "location": 91,
            "return": [
                "str",
                "List[Dict]",
                "List[int]",
                "List[List[Any]]",
                "list"
            ],
            "arguments": {
                "self": [],
                "listOfElems": [
                    "List[Tuple[str, str]]",
                    "Tuple[str]",
                    "List[str]",
                    "Iterable[str]"
                ]
            }
        },
        "SentenceTokenizer.splitTooLongSentencesAtCharacter": {
            "name": "splitTooLongSentencesAtCharacter",
            "location": 101,
            "return": [
                "str",
                "List[str]",
                "List[Dict]",
                "Union[str, List[Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "sentences": [
                    "str"
                ],
                "character": [
                    "str",
                    "Iterable[int]",
                    "bool",
                    "float"
                ]
            }
        },
        "SentenceTokenizer.splitTooLongSentencesInChunks": {
            "name": "splitTooLongSentencesInChunks",
            "location": 109,
            "return": [
                "List[str]",
                "str",
                "List[Dict]",
                "Union[str, List[Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "sentences": []
            }
        },
        "SentenceTokenizer.filterForLength": {
            "name": "filterForLength",
            "location": 115,
            "return": [
                "List[str]",
                "Tuple[int, int]",
                "str",
                "int",
                "bool",
                "List[type]",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "sentences": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "SentenceTokenizer.tokenize": {
            "name": "tokenize",
            "location": 119,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "type"
                ],
                "maxSentenceLength": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ],
                "minSentenceLength": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ]
            }
        }
    },
    "semantic-search-master/semantic_search/TimeTracker.py": {
        "Logger.log": {
            "name": "log",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int"
                ]
            }
        },
        "TimeTracker.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "do_time_tracking": [
                    "int",
                    "str",
                    "float",
                    "Sequence[int]"
                ],
                "isolated": [
                    "bool",
                    "Iterable[T]",
                    "int",
                    "bytes",
                    "T",
                    "str"
                ]
            }
        },
        "TimeTracker._enter": {
            "name": "_enter",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeTracker._exit": {
            "name": "_exit",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "function_name": [
                    "str"
                ],
                "args": [],
                "kwargs": []
            }
        },
        "TimeTracker.__str__": {
            "name": "__str__",
            "location": 46,
            "return": [
                "float",
                "int",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeTracker.time_track": {
            "name": "time_track",
            "location": 52,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeTracker.time_track._time_track": {
            "name": "_time_track",
            "location": 53,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "function": [
                    "bool",
                    "float",
                    "Optional[Callable]",
                    "List[str]",
                    "Callable[..., T]",
                    "Callable"
                ]
            }
        },
        "TimeTracker.time_track._time_track.wrapped": {
            "name": "wrapped",
            "location": 55,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {}
        }
    },
    "semantic-search-master/semantic_search/WordEmbedding.py": {
        "WordEmbedding.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WordEmbedding.load": {
            "name": "load",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "model_id": [
                    "str"
                ],
                "model_path": [
                    "str",
                    "int"
                ]
            }
        },
        "WordEmbedding.embed_sentence": {
            "name": "embed_sentence",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "sentence": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "window": [
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "WordEmbedding.embed": {
            "name": "embed",
            "location": 41,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "WordEmbedding.embed_sentences": {
            "name": "embed_sentences",
            "location": 45,
            "return": [
                "list",
                "List[T]",
                "List[float]",
                "Tuple[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "sentences": [
                    "str",
                    "bool",
                    "Tuple[str, str]",
                    "bytes"
                ],
                "window": [
                    "str",
                    "bool",
                    "Tuple[str, str]",
                    "bytes"
                ]
            }
        },
        "WordEmbedding.cosine": {
            "name": "cosine",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "vec_1": [
                    "int",
                    "Callable",
                    "str"
                ],
                "vec_2": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "WordEmbedding.sentence_similarity": {
            "name": "sentence_similarity",
            "location": 51,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "evd_emb": [
                    "bool",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "sentence_emb": [
                    "bool",
                    "Optional[bool]",
                    "Optional[int]"
                ]
            }
        },
        "WordEmbedding.similarity": {
            "name": "similarity",
            "location": 56,
            "return": [
                "int",
                "str",
                "list",
                "List[T]",
                "List[float]",
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "evd_emb": [
                    "int",
                    "Callable",
                    "str"
                ],
                "sentences_emb": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "semantic-search-master/semantic_search/__init__.py": {},
    "semantic-search-master/tests/test_Preprocessor.py": {
        "test_Preprocessor.setup": {
            "name": "setup",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Preprocessor.test_init": {
            "name": "test_init",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "test_Preprocessor.test_replaceNewlines": {
            "name": "test_replaceNewlines",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "semantic-search-master/tests/test_routes.py": {
        "TestRoutes.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRoutes.test_search_one_doc": {
            "name": "test_search_one_doc",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
{
    "semeval-2018-task2-master/collapse.py": {},
    "semeval-2018-task2-master/create_matrix_for_model.py": {},
    "semeval-2018-task2-master/final_run.py": {
        "get_p_bar": {
            "name": "get_p_bar",
            "location": 9,
            "return": [
                "str",
                "Set[str]",
                "bool",
                "MutableMapping[str, int]",
                "List[Optional[str]]",
                "List[str]"
            ],
            "arguments": {
                "i": [
                    "int",
                    "float",
                    "Tuple[int, int]"
                ],
                "t": [
                    "int",
                    "float",
                    "Tuple[int, int]"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "model": [
                    "List[str]",
                    "str"
                ],
                "in_fp": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "out_fp": [
                    "str",
                    "int",
                    "Optional[Tuple[int, int]]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "semeval-2018-task2-master/make_sampled_data.py": {},
    "semeval-2018-task2-master/matrix_explorer.py": {
        "get_matrix_and_mapping": {
            "name": "get_matrix_and_mapping",
            "location": 20,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "lang": [
                    "dict"
                ],
                "model": [
                    "str",
                    "float"
                ]
            }
        },
        "index": {
            "name": "index",
            "location": 31,
            "return": [
                "str",
                "float"
            ],
            "arguments": {}
        },
        "hello_world": {
            "name": "hello_world",
            "location": 48,
            "return": [
                "Dict[str, Any]",
                "Callable"
            ],
            "arguments": {
                "lang": [
                    "str"
                ],
                "model": [
                    "str"
                ]
            }
        },
        "get_text": {
            "name": "get_text",
            "location": 72,
            "return": [
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "lang": [
                    "str",
                    "Callable"
                ],
                "model": [
                    "str",
                    "Callable"
                ],
                "gold": [
                    "str",
                    "Optional[str]",
                    "Set[str]"
                ],
                "out": [
                    "str",
                    "Optional[str]",
                    "Set[str]"
                ]
            }
        },
        "reload": {
            "name": "reload",
            "location": 95,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[str, int]"
            ],
            "arguments": {}
        },
        "style": {
            "name": "style",
            "location": 103,
            "return": [
                "str",
                "Dict[str, int]"
            ],
            "arguments": {}
        }
    },
    "semeval-2018-task2-master/parse_output.py": {
        "get_row_str": {
            "name": "get_row_str",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "l": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_score": {
            "name": "get_score",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "l": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "semeval-2018-task2-master/run.py": {
        "count": {
            "name": "count",
            "location": 43,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "data": [
                    "int",
                    "adopy.types.data_like",
                    "Sequence[T]",
                    "list"
                ],
                "label": [
                    "int",
                    "adopy.types.data_like",
                    "Sequence[T]",
                    "list"
                ]
            }
        },
        "load_tweets": {
            "name": "load_tweets",
            "location": 49,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "basepath": [
                    "str",
                    "int"
                ]
            }
        },
        "get_log_file": {
            "name": "get_log_file",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "config_id": [
                    "str",
                    "Optional[str]"
                ],
                "fold": [
                    "str"
                ],
                "recover": [
                    "str",
                    "Iterable[Tuple[str, str]]",
                    "bool",
                    "Callable[[Optional], None]",
                    "Iterable[str]"
                ]
            }
        },
        "get_example_loc": {
            "name": "get_example_loc",
            "location": 123,
            "return": [
                "str"
            ],
            "arguments": {
                "config_id": [
                    "str",
                    "Tuple[str, str]",
                    "List[str]"
                ],
                "fold": [
                    "str"
                ]
            }
        },
        "log_checkpoint": {
            "name": "log_checkpoint",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "config_id": [
                    "str"
                ],
                "fold": [
                    "str",
                    "Callable",
                    "Optional[str]"
                ],
                "iteration": [
                    "str",
                    "Callable",
                    "Optional[str]"
                ],
                "model_path": [
                    "str",
                    "Callable",
                    "Optional[str]"
                ]
            }
        },
        "get_checkpoint": {
            "name": "get_checkpoint",
            "location": 149,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "config_id": [
                    "str",
                    "int"
                ]
            }
        },
        "get_random_sample": {
            "name": "get_random_sample",
            "location": 157,
            "return": [
                "str",
                "Iterable[str]",
                "mypy.types.Type"
            ],
            "arguments": {
                "items": [
                    "mypy.types.Instance",
                    "Dict[str, Any]",
                    "float",
                    "Type[object]",
                    "OrderedDict",
                    "Set[str]",
                    "str"
                ],
                "count": [
                    "str",
                    "int",
                    "List[float]",
                    "List[Dict]"
                ]
            }
        },
        "filter_tweets_by_class": {
            "name": "filter_tweets_by_class",
            "location": 162,
            "return": [
                "list",
                "int",
                "List[str]"
            ],
            "arguments": {
                "tweets": [
                    "str"
                ],
                "emoji": [
                    "str"
                ]
            }
        },
        "get_test_train_sets": {
            "name": "get_test_train_sets",
            "location": 166,
            "return": [
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "tweets": [
                    "int",
                    "bool"
                ],
                "cur_fold": [
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "folds": [
                    "int",
                    "str"
                ],
                "take_fair_training_sample": [
                    "Dict[str, Any]",
                    "int",
                    "bool"
                ]
            }
        },
        "get_class_count": {
            "name": "get_class_count",
            "location": 203,
            "return": [
                "List[str]",
                "str",
                "List[Tuple[str, str]]",
                "Tuple[str]",
                "Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]",
                "Tuple[str, str, str]"
            ],
            "arguments": {
                "tweets": [
                    "str",
                    "int"
                ]
            }
        },
        "score": {
            "name": "score",
            "location": 207,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "model": [
                    "int",
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "scorer": [
                    "OrderedDict",
                    "str",
                    "bool",
                    "Tuple[str]"
                ],
                "data_set": [
                    "Dict[str, Any]",
                    "float"
                ]
            }
        },
        "run_non_nn_model": {
            "name": "run_non_nn_model",
            "location": 221,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "Optional[List[str]]",
                    "str"
                ],
                "fold": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "dict"
                ],
                "save_examples": [
                    "bool",
                    "dict",
                    "str",
                    "Dict[str, str]",
                    "Sequence[str]"
                ]
            }
        },
        "run_nn_model": {
            "name": "run_nn_model",
            "location": 315,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "recover": [
                    "str",
                    "Dict[str, str]"
                ],
                "fold": [
                    "str",
                    "Mapping[str, Any]",
                    "Dict[str, str]"
                ],
                "save_examples": [
                    "bool",
                    "dict",
                    "List[str]",
                    "str",
                    "Dict[str, str]",
                    "Iterable[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 480,
            "return": [
                ""
            ],
            "arguments": {
                "config_fn": [
                    "str",
                    "Optional[str]"
                ],
                "recover": [
                    "bool",
                    "dict",
                    "str"
                ],
                "fold": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "save_examples": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "Optional[str]",
                    "dict",
                    "str",
                    "Optional[int]",
                    "bool"
                ],
                "model": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "json_obj": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "Config.__str__": {
            "name": "__str__",
            "location": 80,
            "return": [
                "str",
                "Optional[str]",
                "Optional[List[str]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.parse_extra_config": {
            "name": "parse_extra_config",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "extra_config": [
                    "bool"
                ]
            }
        },
        "Config.from_json_obj": {
            "name": "from_json_obj",
            "location": 95,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Mapping[str, Any]",
                    "bool",
                    "str"
                ],
                "obj": [
                    "dict"
                ]
            }
        }
    },
    "semeval-2018-task2-master/scorer_semeval18.py": {
        "f1": {
            "name": "f1",
            "location": 10,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "precision": [
                    "float",
                    "int",
                    "str"
                ],
                "recall": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "path_goldstandard": [
                    "str"
                ],
                "path_outputfile": [
                    "str"
                ]
            }
        }
    },
    "semeval-2018-task2-master/hopper/confusion_matrix.py": {
        "get_digits": {
            "name": "get_digits",
            "location": 13,
            "return": [],
            "arguments": {
                "num": []
            }
        },
        "ConfusionMatrix.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "dim": []
            }
        },
        "ConfusionMatrix.add": {
            "name": "add",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "gold": [],
                "out": []
            }
        },
        "ConfusionMatrix.__str__": {
            "name": "__str__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfusionMatrixWithExamples.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "dim": []
            }
        },
        "ConfusionMatrixWithExamples.add": {
            "name": "add",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "gold": [],
                "out": [],
                "text": [],
                "tokens": []
            }
        },
        "ConfusionMatrixWithExamples.dump_json": {
            "name": "dump_json",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "fn": []
            }
        }
    },
    "semeval-2018-task2-master/hopper/model.py": {
        "Tweet.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "bool",
                    "str",
                    "Sequence[Dict[str, str]]",
                    "float",
                    "int"
                ],
                "emoji": [
                    "bool",
                    "str",
                    "Sequence[Dict[str, str]]",
                    "float",
                    "int"
                ]
            }
        },
        "Model.name": {
            "name": "name",
            "location": 20,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.get_extra_configs": {
            "name": "get_extra_configs",
            "location": 24,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "Model.train": {
            "name": "train",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tweets": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Model.predict": {
            "name": "predict",
            "location": 38,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "Model.tokenize": {
            "name": "tokenize",
            "location": 47,
            "return": [
                "typing.List[builtins.str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "Model.save_model": {
            "name": "save_model",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Union[str, bytes, int]",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "Model.load_model": {
            "name": "load_model",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool"
                ]
            }
        },
        "Model.batch_predict": {
            "name": "batch_predict",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "texts": [
                    "str"
                ]
            }
        }
    },
    "semeval-2018-task2-master/hopper/model_char_lstm.py": {
        "CharNNModel.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "maxlen": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "CharNNModel.get_extra_configs": {
            "name": "get_extra_configs",
            "location": 28,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "CharNNModel.tokenize": {
            "name": "tokenize",
            "location": 36,
            "return": [
                "str",
                "Exception",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "CharNNModel.create_model": {
            "name": "create_model",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "maxlen": [
                    "str",
                    "bytes",
                    "list",
                    "Set[str]"
                ],
                "char_count": [
                    "str",
                    "bytes",
                    "list",
                    "Set[str]"
                ],
                "class_count": [
                    "str",
                    "bytes",
                    "list",
                    "Set[str]"
                ]
            }
        },
        "CharNNModel.preprocess_data": {
            "name": "preprocess_data",
            "location": 42,
            "return": [
                "int",
                "Dict[str, Any]",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "tweets": [
                    "List[int]",
                    "bytes",
                    "List[str]",
                    "int"
                ],
                "test_dev_split": [
                    "int",
                    "List[int]",
                    "Sequence[int]",
                    "str",
                    "Union[int, Sequence[int]]"
                ]
            }
        },
        "CharNNModel.process_test_data": {
            "name": "process_test_data",
            "location": 75,
            "return": [
                "int",
                "str",
                "Tuple[int, int, int, int]"
            ],
            "arguments": {
                "self": [],
                "texts": [
                    "str",
                    "Iterable[Tuple[int, int]]"
                ]
            }
        },
        "CharNNModel.train": {
            "name": "train",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tweets": [
                    "Sequence[int]",
                    "bytes"
                ],
                "continue_training": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "epochs": [
                    "int",
                    "torch.nn.utils.rnn.PackedSequence",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "CharNNModel.predict": {
            "name": "predict",
            "location": 104,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "int"
                ]
            }
        },
        "CharNNModel.batch_predict": {
            "name": "batch_predict",
            "location": 109,
            "return": [
                "bool",
                "int",
                "Tuple[int, int]",
                "tuple",
                "List[str]",
                "Union[List[str], str]"
            ],
            "arguments": {
                "self": [],
                "texts": [
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "int"
                ]
            }
        },
        "CharNNModel.save_model": {
            "name": "save_model",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "os.PathLike"
                ]
            }
        },
        "CharNNModel.load_model": {
            "name": "load_model",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Tuple[str, str, str]"
                ]
            }
        },
        "CharLSTMModel.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "maxlen": [
                    "str",
                    "raiden.utils.Address"
                ],
                "embedding_size": [
                    "int",
                    "bool",
                    "Optional[int]",
                    "Tuple[int, int, int]"
                ],
                "lstm_size": [
                    "int",
                    "bool",
                    "Optional[int]",
                    "Tuple[int, int, int]"
                ]
            }
        },
        "CharLSTMModel.get_extra_configs": {
            "name": "get_extra_configs",
            "location": 141,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "CharLSTMModel.create_model": {
            "name": "create_model",
            "location": 146,
            "return": [
                "Model",
                "str",
                "model.Model",
                "GPy.models.GPRegression",
                "base.Model"
            ],
            "arguments": {
                "self": [],
                "maxlen": [
                    "int",
                    "str",
                    "List[int]",
                    "list"
                ],
                "char_count": [
                    "int",
                    "str",
                    "List[int]",
                    "list"
                ],
                "class_count": [
                    "str",
                    "int"
                ]
            }
        },
        "CharBiLSTMModel.__init__": {
            "name": "__init__",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "maxlen": [
                    "str",
                    "raiden.utils.Address"
                ],
                "embedding_size": [
                    "int",
                    "bool",
                    "Optional[int]",
                    "Tuple[int, int, int]"
                ],
                "lstm_size": [
                    "int",
                    "bool",
                    "Optional[int]",
                    "Tuple[int, int, int]"
                ]
            }
        },
        "CharBiLSTMModel.get_extra_configs": {
            "name": "get_extra_configs",
            "location": 164,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "CharBiLSTMModel.create_model": {
            "name": "create_model",
            "location": 169,
            "return": [
                "Model",
                "str",
                "model.Model",
                "GPy.models.GPRegression",
                "base.Model"
            ],
            "arguments": {
                "self": [],
                "maxlen": [
                    "int",
                    "str",
                    "List[int]",
                    "list"
                ],
                "char_count": [
                    "int",
                    "str",
                    "List[int]",
                    "list"
                ],
                "class_count": [
                    "str",
                    "int"
                ]
            }
        },
        "CharCNNModel.create_model": {
            "name": "create_model",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "maxlen": [
                    "str",
                    "bytes",
                    "list",
                    "Set[str]"
                ],
                "char_count": [
                    "str",
                    "bytes",
                    "list",
                    "Set[str]"
                ],
                "class_count": [
                    "str",
                    "bytes",
                    "list",
                    "Set[str]"
                ]
            }
        },
        "CharLSTMCNNModel.__init__": {
            "name": "__init__",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "maxlen": [
                    "int",
                    "Sequence[str]",
                    "bool",
                    "Optional[str]"
                ],
                "embedding_size": [
                    "int",
                    "Tuple[int, int, int]",
                    "Union[Tuple[int, int], int]",
                    "List[float]",
                    "List[str]",
                    "bool"
                ],
                "lstm_size": [
                    "int",
                    "Tuple[int, int, int]",
                    "Union[Tuple[int, int], int]",
                    "List[float]",
                    "List[str]",
                    "bool"
                ],
                "kernel_size": [
                    "int",
                    "Tuple[int, int, int]",
                    "Union[Tuple[int, int], int]",
                    "List[float]",
                    "List[str]",
                    "bool"
                ],
                "filters": [
                    "int",
                    "bool",
                    "bytes"
                ],
                "pool_size": [
                    "int",
                    "Tuple[int, int, int]",
                    "Union[Tuple[int, int], int]",
                    "List[float]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "CharLSTMCNNModel.get_extra_configs": {
            "name": "get_extra_configs",
            "location": 195,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "CharLSTMCNNModel.create_model": {
            "name": "create_model",
            "location": 204,
            "return": [
                "Model",
                "str",
                "model.Model",
                "GPy.models.GPRegression",
                "base.Model"
            ],
            "arguments": {
                "self": [],
                "maxlen": [
                    "int",
                    "str",
                    "List[int]",
                    "list"
                ],
                "char_count": [
                    "int",
                    "str",
                    "List[int]",
                    "list"
                ],
                "class_count": [
                    "str",
                    "set",
                    "List[int]",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "CharBiLSTMCNNModel.__init__": {
            "name": "__init__",
            "location": 226,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "maxlen": [
                    "int",
                    "Sequence[str]",
                    "bool",
                    "Optional[str]"
                ],
                "embedding_size": [
                    "int",
                    "Tuple[int, int, int]",
                    "Union[Tuple[int, int], int]",
                    "List[float]",
                    "List[str]",
                    "bool"
                ],
                "lstm_size": [
                    "int",
                    "Tuple[int, int, int]",
                    "Union[Tuple[int, int], int]",
                    "List[float]",
                    "List[str]",
                    "bool"
                ],
                "kernel_size": [
                    "int",
                    "Tuple[int, int, int]",
                    "Union[Tuple[int, int], int]",
                    "List[float]",
                    "List[str]",
                    "bool"
                ],
                "filters": [
                    "int",
                    "bool",
                    "bytes"
                ],
                "pool_size": [
                    "int",
                    "Tuple[int, int, int]",
                    "Union[Tuple[int, int], int]",
                    "List[float]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "CharBiLSTMCNNModel.get_extra_configs": {
            "name": "get_extra_configs",
            "location": 235,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "CharBiLSTMCNNModel.create_model": {
            "name": "create_model",
            "location": 244,
            "return": [
                "Model",
                "str",
                "model.Model",
                "GPy.models.GPRegression",
                "base.Model"
            ],
            "arguments": {
                "self": [],
                "maxlen": [
                    "int",
                    "str",
                    "List[int]",
                    "list"
                ],
                "char_count": [
                    "int",
                    "str",
                    "List[int]",
                    "list"
                ],
                "class_count": [
                    "str",
                    "set",
                    "List[int]",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        }
    },
    "semeval-2018-task2-master/hopper/model_most_frequent_class.py": {
        "MostFrequentClassModel.train": {
            "name": "train",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tweets": [
                    "list"
                ]
            }
        },
        "MostFrequentClassModel.predict": {
            "name": "predict",
            "location": 17,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "MostFrequentClassModel.tokenize": {
            "name": "tokenize",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "MostFrequentClassModel.save_model": {
            "name": "save_model",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "MostFrequentClassModel.load_model": {
            "name": "load_model",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        }
    },
    "semeval-2018-task2-master/hopper/model_naive_bayes_baselines.py": {
        "NaiveBayesModel.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "classif_alg": [
                    "int",
                    "List[int]",
                    "Callable[[str, str], float]",
                    "List[str]"
                ],
                "k": [
                    "Optional[List[str]]",
                    "bool",
                    "Optional[float]",
                    "Dict[str, str]"
                ]
            }
        },
        "NaiveBayesModel.get_extra_configs": {
            "name": "get_extra_configs",
            "location": 63,
            "return": [
                "str",
                "List[List[int]]",
                "List[str]",
                "bool"
            ],
            "arguments": {}
        },
        "NaiveBayesModel.train": {
            "name": "train",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tweets": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "NaiveBayesModel.predict": {
            "name": "predict",
            "location": 93,
            "return": [
                "bool",
                "Iterable[List[T]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "NaiveBayesModel.tokenize": {
            "name": "tokenize",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "MultinomialNaiveBayesModel.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "k": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "BernoulliNaiveBayesModel.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "k": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "NaiveBayesModel.train.tweet_to_tuple": {
            "name": "tweet_to_tuple",
            "location": 74,
            "return": [
                "Dict[str, int]",
                "Generator",
                "str"
            ],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        }
    },
    "semeval-2018-task2-master/hopper/model_rand.py": {
        "RandModel.train": {
            "name": "train",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tweets": [
                    "str",
                    "int",
                    "List[int]",
                    "bytes",
                    "List[dict]",
                    "List[Tuple[Any, Any]]",
                    "List[tuple]",
                    "List[Tuple[int, int]]",
                    "List['world.PerceivedNoise']",
                    "list"
                ]
            }
        },
        "RandModel.predict": {
            "name": "predict",
            "location": 14,
            "return": [
                "str",
                "int",
                "Exception",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "RandModel.tokenize": {
            "name": "tokenize",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "RandModel.save_model": {
            "name": "save_model",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "RandModel.load_model": {
            "name": "load_model",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "semeval-2018-task2-master/hopper/model_sklearn.py": {
        "SKLearnModel.save_model": {
            "name": "save_model",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "TextIO",
                    "str",
                    "bytes",
                    "Optional[Dict[str, str]]",
                    "List[str]",
                    "int",
                    "dict"
                ]
            }
        },
        "SKLearnModel.load_model": {
            "name": "load_model",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Callable"
                ]
            }
        }
    },
    "semeval-2018-task2-master/hopper/model_svm.py": {
        "SVCModel.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kernel": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "SVCModel.train": {
            "name": "train",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tweets": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "SVCModel.predict": {
            "name": "predict",
            "location": 50,
            "return": [
                "bool",
                "Iterable[List[T]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "SVCModel.tokenize": {
            "name": "tokenize",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "LinearSVCModel.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RBFSVCModel.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LinearSVC2Model.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "balanced": [
                    "bool",
                    "List[int]",
                    "List[str]",
                    "list"
                ],
                "C": [
                    "int",
                    "Optional[int]"
                ],
                "dual": [
                    "int",
                    "Optional[int]"
                ],
                "tol": [
                    "int",
                    "Optional[int]"
                ],
                "max_iter": [
                    "int",
                    "Optional[int]"
                ],
                "loss": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "LinearSVC2Model.get_extra_configs": {
            "name": "get_extra_configs",
            "location": 96,
            "return": [
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "LinearSVC2Model.train": {
            "name": "train",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tweets": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "LinearSVC2Model.predict": {
            "name": "predict",
            "location": 115,
            "return": [
                "bool",
                "Iterable[List[T]]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "SVCModel.train.tweet_to_tuple": {
            "name": "tweet_to_tuple",
            "location": 41,
            "return": [
                "Dict[str, int]",
                "Generator",
                "str"
            ],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        },
        "LinearSVC2Model.train.tweet_to_tuple": {
            "name": "tweet_to_tuple",
            "location": 106,
            "return": [
                "Dict[str, int]",
                "Generator",
                "str"
            ],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        }
    },
    "semeval-2018-task2-master/hopper/model_word_nn.py": {
        "WordNNModel.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "maxlen": [
                    "float",
                    "numpy.ndarray",
                    "int"
                ],
                "maxwords": [
                    "int",
                    "float"
                ],
                "embedding_size": [
                    "int",
                    "Tuple[int, int]",
                    "Union[Tuple[int, int], int]"
                ]
            }
        },
        "WordNNModel.get_extra_configs": {
            "name": "get_extra_configs",
            "location": 37,
            "return": [
                "int",
                "Dict[Optional[str], Set[abilian.services.security.models.Role]]",
                "abilian.core.models.subjects.Principal",
                "str",
                "cmk.utils.type_defs.EventRule",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "WordNNModel.create_model": {
            "name": "create_model",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "maxlen": [
                    "bool",
                    "str"
                ],
                "num_words": [
                    "bool",
                    "str"
                ],
                "class_count": [
                    "bool",
                    "str"
                ]
            }
        },
        "WordNNModel.load_embeddings": {
            "name": "load_embeddings",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WordNNModel.preprocess_data": {
            "name": "preprocess_data",
            "location": 60,
            "return": [
                "int",
                "Dict[str, Any]",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "tweets": [
                    "numpy.ndarray",
                    "List[int]",
                    "Union[numpy.ndarray, slice]",
                    "bytes",
                    "List[numpy.ndarray]",
                    "List[str]",
                    "int"
                ],
                "test_dev_split": [
                    "int",
                    "List[int]",
                    "Sequence[int]",
                    "str",
                    "Union[int, Sequence[int]]"
                ]
            }
        },
        "WordNNModel.process_test_data": {
            "name": "process_test_data",
            "location": 94,
            "return": [
                "int",
                "str",
                "Tuple[int, int, int, int]"
            ],
            "arguments": {
                "self": [],
                "texts": [
                    "str",
                    "Callable"
                ]
            }
        },
        "WordNNModel.train": {
            "name": "train",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tweets": [
                    "Sequence[int]",
                    "bytes"
                ],
                "continue_training": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "epochs": [
                    "int",
                    "torch.nn.utils.rnn.PackedSequence",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "WordNNModel.predict": {
            "name": "predict",
            "location": 114,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "int"
                ]
            }
        },
        "WordNNModel.batch_predict": {
            "name": "batch_predict",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "texts": [
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "int"
                ]
            }
        },
        "WordNNModel.save_model": {
            "name": "save_model",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "os.PathLike"
                ]
            }
        },
        "WordNNModel.load_model": {
            "name": "load_model",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "WordNNModel.tokenize": {
            "name": "tokenize",
            "location": 132,
            "return": [
                "str",
                "Iterable[int]",
                "Callable",
                "core.models.Recipe",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "WordEmbeddingCNNModel.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "maxlen": [
                    "Optional[str]",
                    "int",
                    "numpy.ndarray",
                    "Optional[numpy.ndarray]",
                    "bool"
                ],
                "maxwords": [
                    "Optional[str]",
                    "int",
                    "numpy.ndarray",
                    "Optional[numpy.ndarray]",
                    "bool"
                ],
                "embedding_size": [
                    "int",
                    "float",
                    "bool",
                    "Type[tensorflow.keras.layers.Layer]"
                ],
                "lstm_size": [
                    "int",
                    "Tuple[int, int, int]",
                    "bool",
                    "List[float]",
                    "List[str]",
                    "str"
                ],
                "kernel_size": [
                    "int",
                    "Tuple[int, int, int]",
                    "bool",
                    "List[float]",
                    "List[str]",
                    "str"
                ],
                "filters": [
                    "bool",
                    "int",
                    "Callable[..., None]"
                ],
                "pool_size": [
                    "int",
                    "Tuple[int, int, int]",
                    "bool",
                    "List[float]",
                    "List[str]",
                    "str"
                ],
                "activation": [
                    "bool",
                    "int",
                    "Callable[..., None]"
                ],
                "optimizer": [
                    "bool",
                    "int",
                    "Callable[..., None]"
                ]
            }
        },
        "WordEmbeddingCNNModel.get_extra_configs": {
            "name": "get_extra_configs",
            "location": 149,
            "return": [
                "str",
                "List[List[int]]",
                "List[str]",
                "bool"
            ],
            "arguments": {}
        },
        "WordEmbeddingCNNModel.create_model": {
            "name": "create_model",
            "location": 158,
            "return": [
                "Model",
                "str",
                "model.Model",
                "GPy.models.GPRegression",
                "base.Model"
            ],
            "arguments": {
                "self": [],
                "maxlen": [
                    "int",
                    "tuple",
                    "Sequence[str]",
                    "List[int]"
                ],
                "num_words": [
                    "int",
                    "tuple",
                    "Sequence[str]",
                    "List[int]"
                ],
                "class_count": [
                    "Tuple[int]",
                    "int",
                    "numpy.ndarray"
                ]
            }
        }
    },
    "semeval-2018-task2-master/hopper/scorer.py": {
        "f1": {
            "name": "f1",
            "location": 10,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "precision": [
                    "float",
                    "int",
                    "str"
                ],
                "recall": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "Score.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "macro_f1": [
                    "int",
                    "str",
                    "bool",
                    "List[str]"
                ],
                "micro_f1": [
                    "int",
                    "str",
                    "bool",
                    "List[str]"
                ],
                "p": [
                    "int",
                    "str",
                    "bool",
                    "List[str]"
                ],
                "r": [
                    "int",
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "Score.__str__": {
            "name": "__str__",
            "location": 22,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scorer.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Scorer.add": {
            "name": "add",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "gold": [
                    "Dict[str, str]",
                    "Callable",
                    "int"
                ],
                "out": [
                    "int",
                    "bool"
                ]
            }
        },
        "Scorer.get_score": {
            "name": "get_score",
            "location": 43,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "semeval-2018-task2-master/hopper/__init__.py": {},
    "semeval-2018-task2-master/normalization/normalization.py": {}
}
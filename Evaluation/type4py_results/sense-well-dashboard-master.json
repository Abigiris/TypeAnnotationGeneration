{
    "sense-well-dashboard-master/run.py": {
        "main": {
            "name": "main",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_prereqs": {
            "name": "check_prereqs",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "execute_on_target_environment": {
            "name": "execute_on_target_environment",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "target": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "stop": {
            "name": "stop",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "install": {
            "name": "install",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test": {
            "name": "test",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_types": {
            "name": "check_types",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "catchup": {
            "name": "catchup",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "list_outdated": {
            "name": "list_outdated",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "dependency_tree": {
            "name": "dependency_tree",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "add": {
            "name": "add",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "upgrade": {
            "name": "upgrade",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "remove": {
            "name": "remove",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "deploy_to_heroku": {
            "name": "deploy_to_heroku",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "target": [
                    "int",
                    "float",
                    "bool",
                    "Union[int, float]"
                ]
            }
        }
    },
    "sense-well-dashboard-master/backend/src/app.py": {
        "render_react": {
            "name": "render_react",
            "location": 17,
            "return": [
                "bool",
                "str",
                "Callable"
            ],
            "arguments": {}
        },
        "render_react_asset": {
            "name": "render_react_asset",
            "location": 22,
            "return": [
                "dict",
                "Optional[str]",
                "Mapping[str, Any]",
                "str",
                "bytes"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "api_test": {
            "name": "api_test",
            "location": 27,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "metric_summaries": {
            "name": "metric_summaries",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "community": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "time_series": {
            "name": "time_series",
            "location": 38,
            "return": [
                "Type",
                "str",
                "Type[T]",
                "int",
                "Set[str]"
            ],
            "arguments": {
                "community": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "time_series_post": {
            "name": "time_series_post",
            "location": 44,
            "return": [
                "List[int]"
            ],
            "arguments": {}
        },
        "_generate_report": {
            "name": "_generate_report",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "community_name": [
                    "str"
                ],
                "day_aggregates": [
                    "str",
                    "bool"
                ]
            }
        },
        "return_json": {
            "name": "return_json",
            "location": 67,
            "return": [
                "str",
                "type",
                "Optional[Callable[[dict], None]]"
            ],
            "arguments": {
                "result": [
                    "str",
                    "Optional[str]",
                    "Optional[Match]",
                    "Type",
                    "List[str]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        }
    },
    "sense-well-dashboard-master/backend/src/mock.py": {},
    "sense-well-dashboard-master/backend/src/parser.py": {
        "parse_datapoint_set": {
            "name": "parse_datapoint_set",
            "location": 10,
            "return": [
                "bool",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "datapoints": [
                    "bool",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "_convert_to_pandas": {
            "name": "_convert_to_pandas",
            "location": 18,
            "return": [
                "dict",
                "str",
                "Dict[str, Dict[str, int]]",
                "int"
            ],
            "arguments": {
                "datapoints": [
                    "int"
                ]
            }
        },
        "_group_by_day": {
            "name": "_group_by_day",
            "location": 24,
            "return": [
                "dict",
                "pandas.DataFrame",
                "str",
                "Optional[float]",
                "Dict[str, List[int]]"
            ],
            "arguments": {
                "data_frame": [
                    "pandas.DataFrame",
                    "numpy.ndarray",
                    "bool",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "_get_count_and_sum_per_day": {
            "name": "_get_count_and_sum_per_day",
            "location": 28,
            "return": [
                "List[str]",
                "int",
                "str",
                "tuple"
            ],
            "arguments": {
                "groups": [
                    "str"
                ]
            }
        },
        "_round_and_sort": {
            "name": "_round_and_sort",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "aggregated": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_parse_into_daily_conditions": {
            "name": "_parse_into_daily_conditions",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "aggregated": [
                    "str",
                    "Dict[str, Set[str]]",
                    "int"
                ]
            }
        }
    },
    "sense-well-dashboard-master/backend/src/__init__.py": {},
    "sense-well-dashboard-master/backend/tests/test_parser.py": {
        "TestParser.setUpClass": {
            "name": "setUpClass",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "list",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestParser.test_convert_to_pandas": {
            "name": "test_convert_to_pandas",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_split_days": {
            "name": "test_split_days",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_get_count_and_sum_by_day": {
            "name": "test_get_count_and_sum_by_day",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestParser.test_parse_into_daily_conditions": {
            "name": "test_parse_into_daily_conditions",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sense-well-dashboard-master/backend/tests/__init__.py": {},
    "sense-well-dashboard-master/scripts/backend.py": {
        "main": {
            "name": "main",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_prereqs": {
            "name": "check_prereqs",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_detached": {
            "name": "run_detached",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "stop": {
            "name": "stop",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "install": {
            "name": "install",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "reinstall": {
            "name": "reinstall",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "catchup": {
            "name": "catchup",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_types": {
            "name": "check_types",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test": {
            "name": "test",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "_freeze_requirements": {
            "name": "_freeze_requirements",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "list_outdated": {
            "name": "list_outdated",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "dependency_tree": {
            "name": "dependency_tree",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "add": {
            "name": "add",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "dependencies": []
            }
        },
        "upgrade": {
            "name": "upgrade",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "dependencies": []
            }
        },
        "remove": {
            "name": "remove",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "dependencies": []
            }
        }
    },
    "sense-well-dashboard-master/scripts/deploy.py": {
        "main": {
            "name": "main",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "check_prereqs_installed": {
            "name": "check_prereqs_installed",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "check_remote_added": {
            "name": "check_remote_added",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "check_logged_in": {
            "name": "check_logged_in",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "resolve_git_issues": {
            "name": "resolve_git_issues",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "deploy": {
            "name": "deploy",
            "location": 60,
            "return": [],
            "arguments": {}
        }
    },
    "sense-well-dashboard-master/scripts/frontend.py": {
        "main": {
            "name": "main",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_prereqs_installed": {
            "name": "check_prereqs_installed",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_detached": {
            "name": "run_detached",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "stop": {
            "name": "stop",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "install": {
            "name": "install",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "reinstall": {
            "name": "reinstall",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "build": {
            "name": "build",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "catchup": {
            "name": "catchup",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_types": {
            "name": "check_types",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "list_outdated": {
            "name": "list_outdated",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "add": {
            "name": "add",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "dependencies": []
            }
        },
        "upgrade": {
            "name": "upgrade",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "dependencies": []
            }
        },
        "remove": {
            "name": "remove",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "dependencies": []
            }
        }
    },
    "sense-well-dashboard-master/scripts/scripts_test_runner.py": {
        "main": {
            "name": "main",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_prereqs_installed": {
            "name": "check_prereqs_installed",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "check_types": {
            "name": "check_types",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test": {
            "name": "test",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sense-well-dashboard-master/scripts/__init__.py": {},
    "sense-well-dashboard-master/scripts/tests/test_command_line_args.py": {},
    "sense-well-dashboard-master/scripts/tests/test_git.py": {},
    "sense-well-dashboard-master/scripts/tests/test_heroku.py": {},
    "sense-well-dashboard-master/scripts/tests/test_prereq_checker.py": {
        "ParserTester.assert_raises_parser_error": {
            "name": "assert_raises_parser_error",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "command_map": [
                    "str",
                    "Callable",
                    "BinaryIO"
                ],
                "args": []
            }
        },
        "TestSingleServerParser.assert_backend_and_frontend_raise_error": {
            "name": "assert_backend_and_frontend_raise_error",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "TestSingleServerParser.test_dependency_management_requires_dependencies": {
            "name": "test_dependency_management_requires_dependencies",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSingleServerParser.test_only_dependency_management_allows_variable_arguments": {
            "name": "test_only_dependency_management_allows_variable_arguments",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRunParser.test_execute_on_target_environment_requires_target_action": {
            "name": "test_execute_on_target_environment_requires_target_action",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRunParser.test_dependency_management_requires_target_specification": {
            "name": "test_dependency_management_requires_target_specification",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRunParser.test_dependency_management_requires_dependencies": {
            "name": "test_dependency_management_requires_dependencies",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRunParser.test_only_dependency_management_allows_variable_arguments": {
            "name": "test_only_dependency_management_allows_variable_arguments",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sense-well-dashboard-master/scripts/tests/test_processes.py": {},
    "sense-well-dashboard-master/scripts/tests/test_sys_calls.py": {},
    "sense-well-dashboard-master/scripts/tests/test_venv.py": {},
    "sense-well-dashboard-master/scripts/tests/__init__.py": {},
    "sense-well-dashboard-master/scripts/utils/command_line_args.py": {
        "check_prereqs_installed": {
            "name": "check_prereqs_installed",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "create_parser": {
            "name": "create_parser",
            "location": 26,
            "return": [
                "argparse._SubParsersAction"
            ],
            "arguments": {
                "command_map": [
                    "str"
                ]
            }
        },
        "execute_command": {
            "name": "execute_command",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "command_map": [
                    "tuple",
                    "List[str]",
                    "Dict[str, Any]",
                    "list",
                    "str",
                    "Callable"
                ]
            }
        }
    },
    "sense-well-dashboard-master/scripts/utils/files.py": {
        "check_prereqs_installed": {
            "name": "check_prereqs_installed",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "do_exist": {
            "name": "do_exist",
            "location": 30,
            "return": [
                "List[str]",
                "bool",
                "IO[str]",
                "int",
                "str",
                "pydcop.replication.path_utils.Path"
            ],
            "arguments": {
                "files": [
                    "str",
                    "TextIO",
                    "IO[Any]",
                    "pathlib.Path"
                ]
            }
        },
        "remove": {
            "name": "remove",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "files": [
                    "str",
                    "Sequence[str]",
                    "Awaitable",
                    "Type['GenericList']",
                    "Type['Declared']"
                ]
            }
        },
        "source": {
            "name": "source",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sense-well-dashboard-master/scripts/utils/git.py": {
        "check_prereqs_installed": {
            "name": "check_prereqs_installed",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "is_on_branch": {
            "name": "is_on_branch",
            "location": 31,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "target_branch": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "List[int]",
                    "bytes",
                    "int"
                ]
            }
        },
        "is_remote_added": {
            "name": "is_remote_added",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "remote": [
                    "str"
                ]
            }
        },
        "is_clean_local": {
            "name": "is_clean_local",
            "location": 46,
            "return": [
                "Callable[[], None]",
                "\"TextLine\"",
                "Sequence",
                "Dict[str, Any]",
                "dict",
                "str"
            ],
            "arguments": {}
        },
        "get_current_branch": {
            "name": "get_current_branch",
            "location": 58,
            "return": [
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "get_file_hash": {
            "name": "get_file_hash",
            "location": 65,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "file": [
                    "str"
                ]
            }
        },
        "fast_forward": {
            "name": "fast_forward",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "remote": [],
                "branch": []
            }
        },
        "checkout": {
            "name": "checkout",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "branch": []
            }
        },
        "add": {
            "name": "add",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "files": [
                    "Sequence[str]",
                    "str",
                    "Awaitable",
                    "Type['GenericList']",
                    "Type['Declared']"
                ]
            }
        },
        "commit": {
            "name": "commit",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "message": []
            }
        },
        "push": {
            "name": "push",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "remote": [],
                "remote_branch": []
            }
        },
        "add_remote": {
            "name": "add_remote",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "remote": [
                    "str",
                    "raiden.utils.TokenNetworkAddress"
                ],
                "url": [
                    "str",
                    "raiden.utils.TokenNetworkAddress"
                ]
            }
        },
        "remind_to_commit": {
            "name": "remind_to_commit",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "file_names": [
                    "str"
                ]
            }
        },
        "_generate_commit_reminder": {
            "name": "_generate_commit_reminder",
            "location": 131,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "torch.nn.utils.rnn.PackedSequence"
            ],
            "arguments": {
                "file_names": [
                    "str"
                ]
            }
        }
    },
    "sense-well-dashboard-master/scripts/utils/heroku.py": {
        "check_prereqs_installed": {
            "name": "check_prereqs_installed",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "is_logged_in": {
            "name": "is_logged_in",
            "location": 24,
            "return": [
                "bool",
                "int",
                "tuple",
                "list",
                "List[str]"
            ],
            "arguments": {}
        }
    },
    "sense-well-dashboard-master/scripts/utils/prereq_checker.py": {
        "find_not_installed": {
            "name": "find_not_installed",
            "location": 13,
            "return": [
                "int",
                "str",
                "list",
                "Optional[dict]",
                "List[str]"
            ],
            "arguments": {
                "programs": [
                    "int",
                    "set",
                    "str"
                ]
            }
        },
        "is_program_installed": {
            "name": "is_program_installed",
            "location": 21,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "program": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "check_is_installed": {
            "name": "check_is_installed",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "programs": [
                    "bool"
                ]
            }
        }
    },
    "sense-well-dashboard-master/scripts/utils/process_management.py": {
        "check_prereqs_installed": {
            "name": "check_prereqs_installed",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "find_pid_on_port": {
            "name": "find_pid_on_port",
            "location": 29,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "port": [
                    "Optional[int]",
                    "Tuple[str, int]",
                    "Mapping[str, str]",
                    "int",
                    "str"
                ]
            }
        },
        "kill_process": {
            "name": "kill_process",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "pid": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        }
    },
    "sense-well-dashboard-master/scripts/utils/sys_calls.py": {
        "check_prereqs_installed": {
            "name": "check_prereqs_installed",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "is_windows_environment": {
            "name": "is_windows_environment",
            "location": 25,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "determine_python_executable": {
            "name": "determine_python_executable",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "_modify_for_windows": {
            "name": "_modify_for_windows",
            "location": 45,
            "return": [
                "str",
                "int",
                "Exception"
            ],
            "arguments": {
                "command": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "kwargs": []
            }
        },
        "run": {
            "name": "run",
            "location": 60,
            "return": [
                "Awaitable",
                "Iterable[str]",
                "Callable",
                "bool",
                "Iterable['cirq.Operation']"
            ],
            "arguments": {
                "command": [
                    "List[str]",
                    "str",
                    "Iterable[str]",
                    "list"
                ]
            }
        },
        "run_detached": {
            "name": "run_detached",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "command": [
                    "List[str]",
                    "str",
                    "Iterable[str]",
                    "list"
                ]
            }
        },
        "run_as_shell": {
            "name": "run_as_shell",
            "location": 80,
            "return": [
                "float",
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "command": [
                    "str"
                ]
            }
        },
        "run_python": {
            "name": "run_python",
            "location": 89,
            "return": [
                "Awaitable",
                "Iterable[str]",
                "Callable",
                "bool",
                "Iterable['cirq.Operation']"
            ],
            "arguments": {
                "command": [
                    "List[str]",
                    "str",
                    "Iterable[str]",
                    "list"
                ]
            }
        },
        "get_stdout": {
            "name": "get_stdout",
            "location": 103,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "command": [
                    "str",
                    "List[str]",
                    "Union[str, List[str]]"
                ]
            }
        },
        "get_stdout_as_shell": {
            "name": "get_stdout_as_shell",
            "location": 114,
            "return": [
                "float",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "command": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "sense-well-dashboard-master/scripts/utils/venv.py": {
        "check_prereqs_installed": {
            "name": "check_prereqs_installed",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "activate": {
            "name": "activate",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "is_created": {
            "name": "is_created",
            "location": 35,
            "return": [
                "bytes"
            ],
            "arguments": {}
        },
        "operate_on_all_venv_files": {
            "name": "operate_on_all_venv_files",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "func": [
                    "str",
                    "Type",
                    "float",
                    "bool"
                ]
            }
        },
        "create": {
            "name": "create",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "remove": {
            "name": "remove",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sense-well-dashboard-master/scripts/utils/__init__.py": {}
}
{
    "sertifikatsok-main/api/sertifikatsok/constants.py": {},
    "sertifikatsok-main/api/sertifikatsok/crypto.py": {
        "AppCrlRetriever.get_retriever_for_request": {
            "name": "get_retriever_for_request",
            "location": 52,
            "return": [
                "str",
                "int",
                "Dict[int, datetime.datetime]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppCrlRetriever._get_cached_crl": {
            "name": "_get_cached_crl",
            "location": 59,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "issuer": [
                    "str",
                    "List[cryptography.x509.Certificate]",
                    "bool",
                    "Callable",
                    "float"
                ]
            }
        },
        "AppCrlRetriever._get_from_file": {
            "name": "_get_from_file",
            "location": 73,
            "return": [
                "str",
                "pathlib.Path",
                "List[str]",
                "datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "pathlib.Path"
                ],
                "issuer": [
                    "str",
                    "List[str]",
                    "bool",
                    "List[cryptography.x509.Certificate]"
                ]
            }
        },
        "AppCrlRetriever._validate": {
            "name": "_validate",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "crl": [
                    "datetime.datetime",
                    "Tuple[datetime.datetime, datetime.datetime]",
                    "Optional[datetime.date]",
                    "Optional[datetime.datetime]"
                ],
                "issuer": [
                    "bool"
                ]
            }
        },
        "CertRetriever.create": {
            "name": "create",
            "location": 209,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "enums.Environment",
                    "bool",
                    "int"
                ],
                "env": [
                    "enums.Environment",
                    "bool",
                    "int"
                ]
            }
        },
        "CertRetriever.retrieve": {
            "name": "retrieve",
            "location": 212,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "CertRetriever._load_certificate": {
            "name": "_load_certificate",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "bytes",
                    "str",
                    "Dict[str, Any]",
                    "pathlib.Path",
                    "Optional[Callable[[pathlib.Path], int]]",
                    "Optional[str]"
                ],
                "certs": [
                    "Dict[cryptography.x509.Name, cryptography.x509.Certificate]",
                    "Optional[List[str]]",
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "bool",
                    "Set[str]"
                ]
            }
        },
        "CertRetriever._load_all_certs": {
            "name": "_load_all_certs",
            "location": 234,
            "return": [
                "bool",
                "float",
                "List[str]",
                "Dict[str, List[str]]",
                "str",
                "datetime.timedelta"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str"
                ],
                "env": [
                    "enums.Environment",
                    "List[Dict]",
                    "list",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "CertValidator.errors": {
            "name": "errors",
            "location": 256,
            "return": [
                "Callable[[Union, Union], Tuple[Any, ...],]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "CertValidator._check_date_on_cert": {
            "name": "_check_date_on_cert",
            "location": 324,
            "return": [
                "str",
                "float",
                "\"Selector\"",
                "int",
                "bool"
            ],
            "arguments": {
                "cert": [
                    "cryptography.x509.Certificate",
                    "float",
                    "str",
                    "datetime.timedelta",
                    "int",
                    "datetime.datetime",
                    "cryptography.x509.CertificateRevocationList"
                ]
            }
        },
        "CertValidator._validate_cert_against_issuer": {
            "name": "_validate_cert_against_issuer",
            "location": 332,
            "return": [
                "bool"
            ],
            "arguments": {
                "cert": [
                    "cryptography.x509.Certificate",
                    "asyncio.StreamWriter",
                    "bool",
                    "str"
                ],
                "issuer": [
                    "cryptography.x509.Certificate",
                    "asyncio.StreamWriter",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "sertifikatsok-main/api/sertifikatsok/db.py": {
        "Database.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Database.connect_to_database": {
            "name": "connect_to_database",
            "location": 20,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "database_file": [
                    "str",
                    "dict",
                    "BinaryIO",
                    "List[str]"
                ]
            }
        },
        "Database.insert_certificates": {
            "name": "insert_certificates",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "certs": [],
                "ldap_server": [
                    "str"
                ]
            }
        },
        "Database.find_cert_from_sha1": {
            "name": "find_cert_from_sha1",
            "location": 107,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "hash": [
                    "obj.Environment",
                    "dict",
                    "Dict[str, Any]",
                    "Optional[dict]"
                ],
                "env": [
                    "obj.Environment",
                    "dict",
                    "Dict[str, Any]",
                    "Optional[dict]"
                ]
            }
        },
        "Database.find_cert_from_sha2": {
            "name": "find_cert_from_sha2",
            "location": 139,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "hash": [
                    "obj.Environment",
                    "dict",
                    "Dict[str, Any]",
                    "Optional[dict]"
                ],
                "env": [
                    "obj.Environment",
                    "dict",
                    "Dict[str, Any]",
                    "Optional[dict]"
                ]
            }
        }
    },
    "sertifikatsok-main/api/sertifikatsok/enums.py": {},
    "sertifikatsok-main/api/sertifikatsok/errors.py": {},
    "sertifikatsok-main/api/sertifikatsok/ldap.py": {
        "LdapServer.__repr__": {
            "name": "__repr__",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sertifikatsok-main/api/sertifikatsok/logging.py": {
        "configure_logging": {
            "name": "configure_logging",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "log_level": [
                    "bool",
                    "str"
                ],
                "log_files": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "performance_log": {
            "name": "performance_log",
            "location": 75,
            "return": [
                "str",
                "List[str]",
                "bool",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "id_param": [
                    "str",
                    "bool",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "performance_log_sync": {
            "name": "performance_log_sync",
            "location": 99,
            "return": [
                "str",
                "List[str]",
                "bool",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "id_param": [
                    "str",
                    "bool",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "audit_log": {
            "name": "audit_log",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "Dict[str, Any]"
                ]
            }
        },
        "CorrelationFilter.filter": {
            "name": "filter",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "performance_log.config_decorator": {
            "name": "config_decorator",
            "location": 76,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "performance_log_sync.config_decorator": {
            "name": "config_decorator",
            "location": 100,
            "return": [
                "str",
                "int",
                "bytes",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "func": [
                    "List[dict]",
                    "Iterable[str]",
                    "Callable",
                    "Sequence",
                    "Optional[bool]",
                    "Optional[Exception]",
                    "List[Tuple[str, Any]]"
                ]
            }
        },
        "performance_log_sync.config_decorator.wrapper": {
            "name": "wrapper",
            "location": 102,
            "return": [
                "float",
                "Optional[Callable[[str], bool]]"
            ],
            "arguments": {}
        }
    },
    "sertifikatsok-main/api/sertifikatsok/qcert.py": {
        "QualifiedCertificate.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cert": [
                    "bool",
                    "Iterable[str]",
                    "int",
                    "float",
                    "str"
                ],
                "cert_serial": [
                    "int",
                    "str",
                    "Optional[List[str]]",
                    "bool",
                    "Optional[str]",
                    "Callable"
                ],
                "ldap_server": [
                    "str",
                    "int",
                    "bool"
                ],
                "cert_status": [
                    "int",
                    "str",
                    "Optional[List[str]]",
                    "bool",
                    "Optional[str]",
                    "Callable"
                ],
                "revocation_date": [
                    "int",
                    "datetime.date",
                    "str",
                    "List[int]"
                ]
            }
        },
        "QualifiedCertificate._get_type": {
            "name": "_get_type",
            "location": 73,
            "return": [
                "str",
                "bool",
                "Type",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QualifiedCertificate._get_roles": {
            "name": "_get_roles",
            "location": 95,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "QualifiedCertificate.print_subject": {
            "name": "print_subject",
            "location": 122,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "full": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "QualifiedCertificate.get_orgnumber": {
            "name": "get_orgnumber",
            "location": 163,
            "return": [
                "Optional[List[str]]",
                "Optional[str]",
                "bytes",
                "Callable[[], str]",
                "Optional[List[Any]]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QualifiedCertificate.get_key_info": {
            "name": "get_key_info",
            "location": 212,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "QualifiedCertificate.get_key_usages": {
            "name": "get_key_usages",
            "location": 221,
            "return": [
                "str",
                "bytes",
                "IO",
                "Set[str]",
                "BinaryIO"
            ],
            "arguments": {
                "self": []
            }
        },
        "QualifiedCertificate.get_extended_key_usages": {
            "name": "get_extended_key_usages",
            "location": 234,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "str",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QualifiedCertificateSet.create": {
            "name": "create",
            "location": 270,
            "return": [
                "cmk.utils.type_defs.UserId",
                "int",
                "bool",
                "Iterable[Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable"
                ],
                "certs": [
                    "str",
                    "Callable"
                ]
            }
        },
        "QualifiedCertificateSet.create_sets_from_certs": {
            "name": "create_sets_from_certs",
            "location": 294,
            "return": [
                "int",
                "str",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "cmk.utils.type_defs.ServiceName",
                    "dict"
                ],
                "certs": [
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "QualifiedCertificateSet._get_non_encryption_cert": {
            "name": "_get_non_encryption_cert",
            "location": 352,
            "return": [
                "str"
            ],
            "arguments": {
                "certs": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "QualifiedCertificateSet.valid_to": {
            "name": "valid_to",
            "location": 367,
            "return": [
                "bool",
                "Iterable[int]",
                "Callable[..., Coroutine[Any, Any, Any]]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "QualifiedCertificateSet.valid_from": {
            "name": "valid_from",
            "location": 371,
            "return": [
                "dict",
                "List[cmk.utils.type_defs.HostName]",
                "list",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QualifiedCertificateSet.typ": {
            "name": "typ",
            "location": 375,
            "return": [
                "str",
                "Optional[mimesis.enums.Gender]",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "QualifiedCertificateSet.issuer": {
            "name": "issuer",
            "location": 379,
            "return": [
                "str",
                "list",
                "int",
                "Dict[str, str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QualifiedCertificateSet.subject": {
            "name": "subject",
            "location": 383,
            "return": [
                "str",
                "list",
                "int",
                "Dict[str, str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QualifiedCertificateSet.ldap": {
            "name": "ldap",
            "location": 387,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sertifikatsok-main/api/sertifikatsok/search.py": {
        "SearchParams.create_from_request": {
            "name": "create_from_request",
            "location": 41,
            "return": [
                "list",
                "Tuple[int, int]",
                "Tuple[str, bool]",
                "List[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "dict"
                ],
                "request": [
                    "purplship.core.utils.Element",
                    "httpx.Request",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "LdapSearchParams.create": {
            "name": "create",
            "location": 79,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "Mapping[str, Any]",
                    "raiden.utils.Any",
                    "str",
                    "utils.mssql_counters.Section"
                ],
                "search_params": [],
                "database": [
                    "Dict[str, Tuple[Any, Any]]",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Dict[str, Type[Any]]"
                ]
            }
        },
        "LdapSearchParams._guess_search_params": {
            "name": "_guess_search_params",
            "location": 97,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "str"
                ],
                "search_params": [
                    "Generator",
                    "str",
                    "Optional[List[str]]",
                    "bytes"
                ],
                "database": [
                    "Dict[str, Any]",
                    "rotkehlchen.db.dbhandler.DBHandler",
                    "Callable",
                    "str"
                ]
            }
        },
        "LdapSearchParams._parse_ldap_url": {
            "name": "_parse_ldap_url",
            "location": 197,
            "return": [
                "str",
                "db.models.Taxon",
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "Union[str, List[str], Tuple[str, ...]]",
                    "bool"
                ],
                "search_params": [
                    "list",
                    "str",
                    "List[str]",
                    "dict",
                    "Sequence[Any]"
                ]
            }
        },
        "CertificateSearch.create_from_request": {
            "name": "create_from_request",
            "location": 272,
            "return": [
                "Dict[str, Any]",
                "str",
                "Sequence",
                "dict",
                "List[dict]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[Dict[str, Any]]",
                    "dict"
                ],
                "request": [
                    "starlette.requests.Request",
                    "int",
                    "Callable[..., Coroutine]",
                    "Tuple[int]",
                    "purplship.core.utils.xml.Element"
                ]
            }
        },
        "CertificateSearchResponse.create": {
            "name": "create",
            "location": 434,
            "return": [
                "cmk.utils.type_defs.UserId",
                "dict",
                "Tuple[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Sequence",
                    "qutebrowser.utils.urlmatch.UrlPattern",
                    "bytes"
                ],
                "search": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "CertificateSearchResponse.cacheable": {
            "name": "cacheable",
            "location": 439,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sertifikatsok-main/api/sertifikatsok/serialization.py": {
        "sertifikatsok_serialization": {
            "name": "sertifikatsok_serialization",
            "location": 25,
            "return": [],
            "arguments": {
                "val": []
            }
        },
        "qualified_certificate": {
            "name": "qualified_certificate",
            "location": 31,
            "return": [],
            "arguments": {
                "val": []
            }
        },
        "qualified_certificate_set": {
            "name": "qualified_certificate_set",
            "location": 72,
            "return": [],
            "arguments": {
                "val": []
            }
        },
        "certificate_search": {
            "name": "certificate_search",
            "location": 106,
            "return": [],
            "arguments": {
                "val": []
            }
        },
        "_get_norwegian_cert_status": {
            "name": "_get_norwegian_cert_status",
            "location": 171,
            "return": [],
            "arguments": {
                "cert_status": [],
                "revocation_date": []
            }
        },
        "_get_norwegian_display_name": {
            "name": "_get_norwegian_display_name",
            "location": 187,
            "return": [],
            "arguments": {
                "cert": []
            }
        },
        "_get_norwegian_error_message": {
            "name": "_get_norwegian_error_message",
            "location": 204,
            "return": [],
            "arguments": {
                "error_code": []
            }
        }
    },
    "sertifikatsok-main/api/sertifikatsok/utils.py": {
        "get_subject_order": {
            "name": "get_subject_order",
            "location": 8,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "field": [
                    "str",
                    "Optional[Any]"
                ]
            }
        },
        "create_ldap_filter": {
            "name": "create_ldap_filter",
            "location": 27,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "params": [
                    "str",
                    "int",
                    "Tuple[int, int]"
                ]
            }
        }
    },
    "sertifikatsok-main/api/sertifikatsok/web.py": {
        "run": {
            "name": "run",
            "location": 128,
            "return": [],
            "arguments": {}
        }
    },
    "sertifikatsok-main/api/sertifikatsok/__init__.py": {},
    "sertifikatsok-main/api/sertifikatsok/__main__.py": {},
    "sertifikatsok-main/api/tests/test_qcert.py": {
        "TestQualifiedCertificateSet.test_create_sets_from_certs_buypass": {
            "name": "test_create_sets_from_certs_buypass",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQualifiedCertificateSet.test_create_sets_from_certs_commfides": {
            "name": "test_create_sets_from_certs_commfides",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQualifiedCertificateSet.test_create_sets_from_certs_commfides_encryption_issued_later": {
            "name": "test_create_sets_from_certs_commfides_encryption_issued_later",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQualifiedCertificateSet.test_create_sets_from_certs_commfides_grouped_by_type": {
            "name": "test_create_sets_from_certs_commfides_grouped_by_type",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQualifiedCertificateSet.test_get_non_encryption_cert_seid1": {
            "name": "test_get_non_encryption_cert_seid1",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestQualifiedCertificateSet.test_get_non_encryption_cert_seid2": {
            "name": "test_get_non_encryption_cert_seid2",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sertifikatsok-main/api/tests/test_search.py": {
        "TestLdapSearchParams.database": {
            "name": "database",
            "location": 17,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLdapSearchParams.test_should_auto_detect_url_buypass": {
            "name": "test_should_auto_detect_url_buypass",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "database": [
                    "bool"
                ]
            }
        },
        "TestLdapSearchParams.test_should_auto_detect_url_commfides": {
            "name": "test_should_auto_detect_url_commfides",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "database": [
                    "bool"
                ]
            }
        },
        "TestLdapSearchParams.test_should_auto_detect_url_and_warn_about_wrong_env": {
            "name": "test_should_auto_detect_url_and_warn_about_wrong_env",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "database": []
            }
        },
        "TestLdapSearchParams.test_should_reject_invalid_url": {
            "name": "test_should_reject_invalid_url",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "database": []
            }
        },
        "TestLdapSearchParams.test_should_auto_detect_hex_serial_colon": {
            "name": "test_should_auto_detect_hex_serial_colon",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "database": [
                    "bool",
                    "str"
                ]
            }
        },
        "TestLdapSearchParams.test_should_auto_detect_hex_serial_spaces": {
            "name": "test_should_auto_detect_hex_serial_spaces",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "database": [
                    "bool",
                    "str"
                ]
            }
        },
        "TestLdapSearchParams.test_should_auto_detect_hex_serial_continuous": {
            "name": "test_should_auto_detect_hex_serial_continuous",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "database": [
                    "bool",
                    "str"
                ]
            }
        },
        "TestLdapSearchParams.test_should_auto_detect_sha2_thumbprint": {
            "name": "test_should_auto_detect_sha2_thumbprint",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "database": []
            }
        },
        "TestLdapSearchParams.test_should_auto_detect_sha1_thumbprint": {
            "name": "test_should_auto_detect_sha1_thumbprint",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "database": []
            }
        },
        "TestLdapSearchParams.test_should_auto_detect_thumbprint_handle_unknown": {
            "name": "test_should_auto_detect_thumbprint_handle_unknown",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "database": []
            }
        },
        "TestLdapSearchParams.test_should_auto_detect_org_nr": {
            "name": "test_should_auto_detect_org_nr",
            "location": 216,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "database": [
                    "bool",
                    "str"
                ]
            }
        },
        "TestLdapSearchParams.test_should_auto_detect_personal_serial_number": {
            "name": "test_should_auto_detect_personal_serial_number",
            "location": 233,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "database": [
                    "bool",
                    "str"
                ]
            }
        },
        "TestLdapSearchParams.test_should_auto_detect_email": {
            "name": "test_should_auto_detect_email",
            "location": 253,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "database": [
                    "bool"
                ]
            }
        },
        "TestLdapSearchParams.test_should_fallback_to_cn": {
            "name": "test_should_fallback_to_cn",
            "location": 270,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "database": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "TestLdapSearchParams.test_should_respect_attribute": {
            "name": "test_should_respect_attribute",
            "location": 284,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "database": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "sertifikatsok-main/api/tests/test_utils.py": {
        "test_create_ldap_filter_one_param": {
            "name": "test_create_ldap_filter_one_param",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_create_ldap_filter_one_param_escape": {
            "name": "test_create_ldap_filter_one_param_escape",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_create_ldap_filter_several_params": {
            "name": "test_create_ldap_filter_several_params",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_create_ldap_filter_several_params_escape": {
            "name": "test_create_ldap_filter_several_params_escape",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "sertifikatsok-main/api/tests/__init__.py": {},
    "sertifikatsok-main/misc/diff.py": {},
    "sertifikatsok-main/misc/printSubject.py": {
        "print_subject": {
            "name": "print_subject",
            "location": 21,
            "return": [
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {
                "cert": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "loadCert": {
            "name": "loadCert",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        }
    }
}
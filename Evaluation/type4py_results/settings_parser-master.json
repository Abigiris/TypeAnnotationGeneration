{
    "settings_parser-master/setup.py": {},
    "settings_parser-master/settings_parser/settings.py": {
        "Settings.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values_dict": [
                    "int",
                    "Optional[Dict[str, Any]]",
                    "float",
                    "Optional[Dict]",
                    "Optional[List[str]]",
                    "Optional[AbstractSet]"
                ]
            }
        },
        "Settings.__repr__": {
            "name": "__repr__",
            "location": 45,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.__eq__": {
            "name": "__eq__",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "allennlp.common.util.JsonDict",
                    "dict",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Settings.__ne__": {
            "name": "__ne__",
            "location": 62,
            "return": [
                "Tuple[Any, Any, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "AbstractSet",
                    "AbstractSet[T]",
                    "AbstractSet[Any]"
                ]
            }
        },
        "Settings._get_property": {
            "name": "_get_property",
            "location": 80,
            "return": [
                "str",
                "logging.Handler",
                "Optional[str]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "KT",
                    "VT"
                ]
            }
        },
        "Settings._set_property": {
            "name": "_set_property",
            "location": 88,
            "return": [
                "Set[str]",
                "str"
            ],
            "arguments": {
                "key": [
                    "str",
                    "int",
                    "bytes",
                    "KT",
                    "list"
                ]
            }
        },
        "Settings._del_property": {
            "name": "_del_property",
            "location": 96,
            "return": [
                "type",
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bool",
                    "tuple",
                    "Iterable[T]"
                ]
            }
        },
        "Settings.__setitem__": {
            "name": "__setitem__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ],
                "value": [
                    "str",
                    "T"
                ]
            }
        },
        "Settings.__setattr__": {
            "name": "__setattr__",
            "location": 112,
            "return": [
                "Dict[str, Any]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "Settings.load_from_dict": {
            "name": "load_from_dict",
            "location": 128,
            "return": [
                "List[Dict]",
                "Dict[int, Dict[str, Any]]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "d": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "Settings.settings": {
            "name": "settings",
            "location": 137,
            "return": [
                "Dict[str, str]",
                "Dict[str, Any]",
                "Optional[List[str]]",
                "Dict[str, List[Any]]",
                "dict",
                "Set[str]",
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings._validate_all_values": {
            "name": "_validate_all_values",
            "location": 142,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, float]",
                "int",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "file_dict": [
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Settings.validate": {
            "name": "validate",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "Loader.__init__": {
            "name": "__init__",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Loader.load_settings_file": {
            "name": "load_settings_file",
            "location": 209,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Union[str, bytes]"
                ],
                "file_format": [
                    "str"
                ]
            }
        },
        "Loader._load_yaml_file": {
            "name": "_load_yaml_file",
            "location": 224,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "Loader._no_duplicate_load": {
            "name": "_no_duplicate_load",
            "location": 252,
            "return": [
                "int",
                "Dict[str, float]"
            ],
            "arguments": {
                "stream": [
                    "IO",
                    "str",
                    "dict",
                    "denite.util.UserContext"
                ],
                "Loader": [
                    "int",
                    "float",
                    "dict"
                ]
            }
        },
        "Settings._get_property._get_prop": {
            "name": "_get_prop",
            "location": 82,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings._set_property._set_prop": {
            "name": "_set_prop",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "list",
                    "Tuple[float]"
                ]
            }
        },
        "Settings._del_property._del_prop": {
            "name": "_del_prop",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Loader._no_duplicate_load.no_duplicates_constructor": {
            "name": "no_duplicates_constructor",
            "location": 259,
            "return": [
                "int",
                "Dict[str, float]",
                "str"
            ],
            "arguments": {
                "loader": [
                    "yaml.nodes.MappingNode",
                    "yaml.Node"
                ],
                "node": [
                    "ruamel.yaml.Node",
                    "Set[str]",
                    "Pattern",
                    "bool",
                    "Optional[str]"
                ],
                "deep": [
                    "yaml.nodes.MappingNode",
                    "yaml.Node",
                    "ruamel.yaml.Node"
                ]
            }
        }
    },
    "settings_parser-master/settings_parser/settings_config.py": {
        "f_float.__new__": {
            "name": "__new__",
            "location": 14,
            "return": [
                "int",
                "List[int]",
                "str",
                "float"
            ],
            "arguments": {
                "mcs": [
                    "int",
                    "str",
                    "bool"
                ],
                "x": [
                    "str"
                ]
            }
        }
    },
    "settings_parser-master/settings_parser/util.py": {
        "temp_filename": {
            "name": "temp_filename",
            "location": 21,
            "return": [],
            "arguments": {
                "data": [],
                "mode": []
            }
        },
        "log_exceptions_warnings": {
            "name": "log_exceptions_warnings",
            "location": 36,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "console_logger_level": {
            "name": "console_logger_level",
            "location": 65,
            "return": [],
            "arguments": {
                "level": []
            }
        },
        "no_logging": {
            "name": "no_logging",
            "location": 82,
            "return": [],
            "arguments": {}
        },
        "log_exceptions_warnings.wrapper": {
            "name": "wrapper",
            "location": 39,
            "return": [],
            "arguments": {}
        }
    },
    "settings_parser-master/settings_parser/value.py": {
        "_wrong_type_error_msg": {
            "name": "_wrong_type_error_msg",
            "location": 50,
            "return": [],
            "arguments": {
                "value": [],
                "val_type": [],
                "name": []
            }
        },
        "_clean_type_name": {
            "name": "_clean_type_name",
            "location": 57,
            "return": [],
            "arguments": {
                "val_type": []
            }
        },
        "Value.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "val_type": [],
                "name": [],
                "val_max": [],
                "val_min": [],
                "kind": [],
                "fun": [],
                "len_max": [],
                "len_min": [],
                "expand_args": []
            }
        },
        "Value.__repr__": {
            "name": "__repr__",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Value.__call__": {
            "name": "__call__",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "config_dict": []
            }
        },
        "Value._print_trace": {
            "name": "_print_trace",
            "location": 147,
            "return": [],
            "arguments": {
                "value": [],
                "val_type": []
            }
        },
        "Value._check_val_max_min": {
            "name": "_check_val_max_min",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Value._check_seq_len": {
            "name": "_check_seq_len",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "seq": [],
                "len_max": [],
                "len_min": []
            }
        },
        "Value._cast_to_type": {
            "name": "_cast_to_type",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "val_type": []
            }
        },
        "Value._validate_type_tree": {
            "name": "_validate_type_tree",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "val_type": [],
                "len_max": [],
                "len_min": [],
                "key": []
            }
        },
        "Value.validate": {
            "name": "validate",
            "location": 324,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "NamedValue.__init__": {
            "name": "__init__",
            "location": 343,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "val_type": []
            }
        },
        "NamedValue.validate": {
            "name": "validate",
            "location": 360,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "DictValue.__init__": {
            "name": "__init__",
            "location": 387,
            "return": [],
            "arguments": {
                "self": [],
                "values": [],
                "kind": []
            }
        },
        "DictValue.__repr__": {
            "name": "__repr__",
            "location": 413,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DictValue.__call__": {
            "name": "__call__",
            "location": 416,
            "return": [],
            "arguments": {
                "self": [],
                "config_dict": []
            }
        },
        "DictValue._check_extra_and_exclusive": {
            "name": "_check_extra_and_exclusive",
            "location": 421,
            "return": [],
            "arguments": {
                "self": [],
                "config_dict": []
            }
        },
        "DictValue.validate": {
            "name": "validate",
            "location": 443,
            "return": [],
            "arguments": {
                "self": [],
                "config_dict": []
            }
        }
    },
    "settings_parser-master/settings_parser/__init__.py": {},
    "settings_parser-master/settings_parser/test/test_settings/test_settings.py": {
        "good_settings": {
            "name": "good_settings",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "settings_dict": {
            "name": "settings_dict",
            "location": 34,
            "return": [
                "Dict[str, List[str]]",
                "int",
                "Hashable",
                "List[str]"
            ],
            "arguments": {}
        },
        "test_good_config": {
            "name": "test_good_config",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "good_settings": [
                    "Callable",
                    "bool",
                    "str"
                ],
                "settings_dict": [
                    "str"
                ]
            }
        },
        "test_change_config": {
            "name": "test_change_config",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "settings_dict": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_non_existing_file": {
            "name": "test_non_existing_file",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "settings_dict": [
                    "bytes",
                    "str",
                    "os.PathLike"
                ]
            }
        },
        "test_empty_file": {
            "name": "test_empty_file",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "settings_dict": [
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "test_yaml_error_config": {
            "name": "test_yaml_error_config",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "bad_yaml_data": [
                    "bytes",
                    "str"
                ],
                "settings_dict": [
                    "str",
                    "List[List[int]]",
                    "Optional[Dict[str, Any]]",
                    "Set[str]"
                ]
            }
        },
        "test_not_dict_config": {
            "name": "test_not_dict_config",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "settings_dict": [
                    "str",
                    "Dict[str, str]",
                    "Optional[Dict[str, Any]]",
                    "Set[str]",
                    "bytes",
                    "int"
                ]
            }
        },
        "test_duplicate_key": {
            "name": "test_duplicate_key",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "settings_dict": [
                    "Dict[str, Any]",
                    "str",
                    "Set[str]",
                    "Optional[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "test_extra_value": {
            "name": "test_extra_value",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "settings_dict": [
                    "str",
                    "int",
                    "Set[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "test_missing_value": {
            "name": "test_missing_value",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "settings_dict": [
                    "str"
                ]
            }
        },
        "test_load_from_dict": {
            "name": "test_load_from_dict",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "settings_dict": [
                    "str",
                    "bytes"
                ],
                "good_settings": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "settings_parser-master/settings_parser/test/test_util/test_util.py": {
        "test_log_exceptions_warnings_nothing": {
            "name": "test_log_exceptions_warnings_nothing",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_log_exceptions_warnings_warning": {
            "name": "test_log_exceptions_warnings_warning",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "caplog": [
                    "str"
                ]
            }
        },
        "test_log_exceptions_warnings_exception": {
            "name": "test_log_exceptions_warnings_exception",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "caplog": [
                    "str"
                ]
            }
        },
        "test_log_exceptions_warnings_nothing.raise_nothing": {
            "name": "raise_nothing",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "arg1": [
                    "int",
                    "bytes"
                ],
                "arg2": [
                    "int",
                    "bytes"
                ]
            }
        },
        "test_log_exceptions_warnings_warning.raise_warning": {
            "name": "raise_warning",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "arg1": [
                    "int",
                    "str"
                ],
                "arg2": [
                    "int",
                    "str"
                ]
            }
        },
        "test_log_exceptions_warnings_exception.raise_exception": {
            "name": "raise_exception",
            "location": 40,
            "return": [
                "float",
                "bool",
                "Callable[[None], bool]",
                "List[str]"
            ],
            "arguments": {
                "arg1": [
                    "float",
                    "str",
                    "bool"
                ],
                "arg2": [
                    "float",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "settings_parser-master/settings_parser/test/test_value/test_dictvalue.py": {
        "test_DictValue": {
            "name": "test_DictValue",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_optional": {
            "name": "test_optional",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_exclusive": {
            "name": "test_exclusive",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_nested_DictValue": {
            "name": "test_nested_DictValue",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_DictValue_in_Dict": {
            "name": "test_DictValue_in_Dict",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "settings_parser-master/settings_parser/test/test_value/test_namedvalue.py": {
        "idfn": {
            "name": "idfn",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "T",
                    "bool",
                    "bytes",
                    "Iterable[str]",
                    "static_frame.core.util.IndexConstructor"
                ]
            }
        },
        "test_NamedValue": {
            "name": "test_NamedValue",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "int",
                    "Type",
                    "Dict[str, Any]",
                    "str",
                    "Sequence[Any]",
                    "Iterable[T]",
                    "Callable[..., Awaitable[None]]"
                ]
            }
        }
    },
    "settings_parser-master/settings_parser/test/test_value/test_value.py": {
        "idfn": {
            "name": "idfn",
            "location": 17,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_always_right_casts": {
            "name": "test_always_right_casts",
            "location": 28,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "test_wrong_casts": {
            "name": "test_wrong_casts",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "test_wrong_generics": {
            "name": "test_wrong_generics",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "test_str_to_num": {
            "name": "test_str_to_num",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "test_num_to_str": {
            "name": "test_num_to_str",
            "location": 70,
            "return": [],
            "arguments": {}
        },
        "test_num_to_num": {
            "name": "test_num_to_num",
            "location": 79,
            "return": [],
            "arguments": {}
        },
        "test_max_min_val": {
            "name": "test_max_min_val",
            "location": 97,
            "return": [],
            "arguments": {}
        },
        "test_str_len": {
            "name": "test_str_len",
            "location": 121,
            "return": [],
            "arguments": {}
        },
        "test_simple_unions": {
            "name": "test_simple_unions",
            "location": 136,
            "return": [],
            "arguments": {}
        },
        "test_nested_unions": {
            "name": "test_nested_unions",
            "location": 150,
            "return": [],
            "arguments": {}
        },
        "test_own_types": {
            "name": "test_own_types",
            "location": 171,
            "return": [],
            "arguments": {}
        },
        "test_unknown_type": {
            "name": "test_unknown_type",
            "location": 190,
            "return": [],
            "arguments": {}
        },
        "test_custom_functions": {
            "name": "test_custom_functions",
            "location": 198,
            "return": [],
            "arguments": {}
        },
        "test_argument_expansion": {
            "name": "test_argument_expansion",
            "location": 211,
            "return": [],
            "arguments": {}
        },
        "test_simple_lists": {
            "name": "test_simple_lists",
            "location": 229,
            "return": [],
            "arguments": {}
        },
        "test_simple_list_len": {
            "name": "test_simple_list_len",
            "location": 244,
            "return": [],
            "arguments": {}
        },
        "test_list_len_val": {
            "name": "test_list_len_val",
            "location": 264,
            "return": [],
            "arguments": {}
        },
        "test_tuples": {
            "name": "test_tuples",
            "location": 273,
            "return": [],
            "arguments": {}
        },
        "test_simple_sequences": {
            "name": "test_simple_sequences",
            "location": 284,
            "return": [],
            "arguments": {}
        },
        "test_nested_lists": {
            "name": "test_nested_lists",
            "location": 290,
            "return": [],
            "arguments": {}
        },
        "test_nested_lists_len": {
            "name": "test_nested_lists_len",
            "location": 316,
            "return": [],
            "arguments": {}
        },
        "test_simple_dicts": {
            "name": "test_simple_dicts",
            "location": 346,
            "return": [],
            "arguments": {}
        },
        "test_nested_dicts": {
            "name": "test_nested_dicts",
            "location": 411,
            "return": [],
            "arguments": {}
        },
        "test_dict_with_Value": {
            "name": "test_dict_with_Value",
            "location": 417,
            "return": [],
            "arguments": {}
        },
        "test_own_types.f_float.__new__": {
            "name": "__new__",
            "location": 175,
            "return": [],
            "arguments": {
                "cls": [],
                "x": []
            }
        }
    }
}
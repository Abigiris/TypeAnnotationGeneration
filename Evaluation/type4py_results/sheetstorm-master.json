{
    "sheetstorm-master/manage.py": {},
    "sheetstorm-master/common/constants.py": {},
    "sheetstorm-master/common/convert.py": {
        "timedelta_to_string": {
            "name": "timedelta_to_string",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "bool",
                    "bytes",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Optional[str]]"
                ]
            }
        },
        "convert_string_work_hours_field_to_hour_and_minutes": {
            "name": "convert_string_work_hours_field_to_hour_and_minutes",
            "location": 19,
            "return": [
                "Tuple[bytes]",
                "str",
                "int",
                "Union[int, float]",
                "bytes"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Mapping[str, Any]",
                    "dict",
                    "str",
                    "int",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "sheetstorm-master/common/utils.py": {
        "send_email": {
            "name": "send_email",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "mail_subject": [
                    "str",
                    "int",
                    "django.db.models.QuerySet"
                ],
                "message": [
                    "str",
                    "int",
                    "django.db.models.QuerySet"
                ],
                "addressee": [
                    "str",
                    "int",
                    "django.db.models.QuerySet"
                ]
            }
        },
        "render_confirmation_email": {
            "name": "render_confirmation_email",
            "location": 15,
            "return": [
                "int",
                "Optional[Dict]",
                "models.Dashboard",
                "str",
                "bool"
            ],
            "arguments": {
                "user": [
                    "users.models.CustomUser",
                    "str",
                    "grouper.models.base.session.Session",
                    "zerver.models.Realm",
                    "int",
                    "Dict[str, Any]"
                ],
                "domain": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "sheetstorm-master/common/__init__.py": {},
    "sheetstorm-master/employees/admin.py": {
        "TaskActivities.has_delete_permission": {
            "name": "has_delete_permission",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "Optional[django.db.models.Model]",
                    "django.http.requesHttpRequest",
                    "django.db.models.Model",
                    "dict"
                ],
                "obj": [
                    "django.http.HttpRequest",
                    "Optional[django.db.models.Model]",
                    "django.http.requesHttpRequest",
                    "django.db.models.Model",
                    "dict"
                ]
            }
        }
    },
    "sheetstorm-master/employees/apps.py": {},
    "sheetstorm-master/employees/factories.py": {},
    "sheetstorm-master/employees/forms.py": {
        "ProjectJoinForm.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DurationInput.format_value": {
            "name": "format_value",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[str]",
                    "Exception",
                    "bool",
                    "Optional[int]",
                    "bytes",
                    "Callable",
                    "str"
                ]
            }
        },
        "DurationFieldForm.clean": {
            "name": "clean",
            "location": 54,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Exception"
                ]
            }
        },
        "DurationFieldForm.prepare_value": {
            "name": "prepare_value",
            "location": 60,
            "return": [
                "bool",
                "gluonts.core.componenDType",
                "Callable",
                "Sequence[str]",
                "List[str]",
                "str",
                "int",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "datetime.datetime",
                    "Union[str, datetime.datetime]",
                    "Optional[str]",
                    "datetime.date"
                ]
            }
        },
        "ReportForm.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportForm._set_choices_for_fields_in_report_from": {
            "name": "_set_choices_for_fields_in_report_from",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "author": [
                    "int",
                    "dict",
                    "Dict[str, Any]",
                    "datetime.datetime",
                    "List[app.models.Question]"
                ]
            }
        },
        "ReportForm._set_last_choices_while_creating_new_report_form": {
            "name": "_set_last_choices_while_creating_new_report_form",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "author": [
                    "str",
                    "int",
                    "programl.models.batch_results.BatchResults"
                ]
            }
        },
        "ReportForm._set_choices_from_edited_report": {
            "name": "_set_choices_from_edited_report",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonthSwitchForm.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial_date": [
                    "Optional[datetime.datetime]",
                    "datetime.time",
                    "datetime",
                    "Union[datetime.datetime, str]",
                    "str",
                    "Optional[T]",
                    "T"
                ]
            }
        },
        "MonthSwitchForm.__eq__": {
            "name": "__eq__",
            "location": 153,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AbstractSet[T]",
                    "Set[VT]",
                    "Tuple[float, float, float]"
                ]
            }
        }
    },
    "sheetstorm-master/employees/models.py": {
        "TaskActivityTypeQuerySet.get_active": {
            "name": "get_active",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskActivityType.__str__": {
            "name": "__str__",
            "location": 30,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportQuerySet.get_work_hours_sum_for_all_dates": {
            "name": "get_work_hours_sum_for_all_dates",
            "location": 35,
            "return": [
                "datetime.datetime"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportQuerySet.get_report_work_hours_sum_for_date": {
            "name": "get_report_work_hours_sum_for_date",
            "location": 43,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "for_date": [
                    "datetime.datetime",
                    "str",
                    "Optional[str]",
                    "datetime.date",
                    "Optional[datetime.datetime]"
                ],
                "excluded_id": [
                    "Optional[str]",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "ReportQuerySet.get_work_hours_sum_for_all_authors": {
            "name": "get_work_hours_sum_for_all_authors",
            "location": 52,
            "return": [
                "Dict[str, bool]",
                "int",
                "djmoney.contrib.exchange.models.Rate",
                "zerver.models.Realm",
                "Dict[str, str]",
                "Exception",
                "tartare.core.models.Job"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportQuerySet.get_reports_from_a_particular_month": {
            "name": "get_reports_from_a_particular_month",
            "location": 59,
            "return": [
                "bool",
                "Optional[Any]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "year": [
                    "int",
                    "List[str]",
                    "float",
                    "str",
                    "list"
                ],
                "month": [
                    "int",
                    "List[str]",
                    "float",
                    "str",
                    "list"
                ],
                "author_id": [
                    "Optional[int]",
                    "Set[int]",
                    "Optional[str]",
                    "int",
                    "str",
                    "datetime.datetime",
                    "raiden.utils.TokenAddress"
                ]
            }
        },
        "Report.work_hours_str": {
            "name": "work_hours_str",
            "location": 80,
            "return": [
                "str",
                "Dict[str, str]",
                "int",
                "preacher.core.value.RelativeDatetime"
            ],
            "arguments": {
                "self": []
            }
        },
        "Report.clean": {
            "name": "clean",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sheetstorm-master/employees/urls.py": {},
    "sheetstorm-master/employees/views.py": {
        "MonthNavigationMixin._get_url_from_date": {
            "name": "_get_url_from_date",
            "location": 64,
            "return": [
                "dict",
                "Exception",
                "Iterable[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "date": [
                    "str",
                    "datetime.date"
                ],
                "pk": [
                    "int",
                    "Optional[str]",
                    "str",
                    "dict"
                ]
            }
        },
        "MonthNavigationMixin._get_previous_month_url": {
            "name": "_get_previous_month_url",
            "location": 73,
            "return": [
                "Optional[str]",
                "bool",
                "str",
                "datetime.date",
                "core.models.User",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "self": [],
                "year": [
                    "int",
                    "datetime.timedelta",
                    "datetime.timezone"
                ],
                "month": [
                    "int",
                    "datetime.timedelta",
                    "datetime.timezone"
                ],
                "pk": [
                    "recidiviz.calculator.pipeline.utils.incarceration_period_index.IncarcerationPeriodIndex",
                    "datetime.datetime",
                    "datetime.date",
                    "recidiviz.common.ingest_metadata.IngestMetadata",
                    "Dict[int, dict]"
                ]
            }
        },
        "MonthNavigationMixin._get_next_month_url": {
            "name": "_get_next_month_url",
            "location": 77,
            "return": [
                "Optional[str]",
                "bool",
                "str",
                "datetime.date",
                "core.models.User",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "self": [],
                "year": [
                    "int",
                    "datetime.timedelta",
                    "datetime.timezone"
                ],
                "month": [
                    "int",
                    "datetime.timedelta",
                    "datetime.timezone"
                ],
                "pk": [
                    "recidiviz.calculator.pipeline.utils.incarceration_period_index.IncarcerationPeriodIndex",
                    "datetime.datetime",
                    "datetime.date",
                    "recidiviz.common.ingest_metadata.IngestMetadata",
                    "Dict[int, dict]"
                ]
            }
        },
        "MonthNavigationMixin._get_current_month_url": {
            "name": "_get_current_month_url",
            "location": 81,
            "return": [
                "Optional[str]",
                "bool",
                "str",
                "datetime.date",
                "core.models.User",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "self": [],
                "pk": [
                    "recidiviz.calculator.pipeline.utils.incarceration_period_index.IncarcerationPeriodIndex",
                    "datetime.datetime",
                    "datetime.date",
                    "recidiviz.common.ingest_metadata.IngestMetadata",
                    "Dict[int, dict]"
                ]
            }
        },
        "MonthNavigationMixin._get_title_date": {
            "name": "_get_title_date",
            "location": 86,
            "return": [
                "str",
                "Optional[str]",
                "datetime.datetime",
                "float",
                "int",
                "Sequence[str]"
            ],
            "arguments": {
                "year": [
                    "int",
                    "datetime.timezone",
                    "str",
                    "datetime.timedelta",
                    "datetime.datetime"
                ],
                "month": [
                    "int",
                    "datetime.timezone",
                    "str",
                    "datetime.timedelta",
                    "datetime.datetime"
                ]
            }
        },
        "MonthNavigationMixin._date_out_of_bounds": {
            "name": "_date_out_of_bounds",
            "location": 90,
            "return": [
                "str",
                "recidiviz.common.ingest_metadata.IngestMetadata",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonthNavigationMixin._get_month_navigator_params": {
            "name": "_get_month_navigator_params",
            "location": 103,
            "return": [
                "str",
                "bool",
                "Optional[Dict[str, Any]]",
                "Set[str]",
                "Pattern"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonthNavigationMixin.get_context_data": {
            "name": "get_context_data",
            "location": 135,
            "return": [
                "dict",
                "str",
                "IO[bytes]",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonthNavigationMixin.redirect_to_another_month": {
            "name": "redirect_to_another_month",
            "location": 140,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "scrapy.http.Request",
                    "http.MITMRequest",
                    "models.Workspace"
                ]
            }
        },
        "MonthNavigationMixin.redirect_to_current_month": {
            "name": "redirect_to_current_month",
            "location": 158,
            "return": [
                "str",
                "Optional[List[str]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportList.get_initial": {
            "name": "get_initial",
            "location": 182,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportList.get_queryset": {
            "name": "get_queryset",
            "location": 187,
            "return": [
                "zerver.models.Realm",
                "bool",
                "str",
                "cmk.utils.type_defs.UserId",
                "models.Payment"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportList.get_context_data": {
            "name": "get_context_data",
            "location": 194,
            "return": [
                "dict",
                "str",
                "IO[bytes]",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportList.post": {
            "name": "post",
            "location": 205,
            "return": [
                "core.models.Recipe",
                "Optional[Dict]",
                "List[Dict[str, Any]]",
                "dict",
                "models.Dashboard",
                "Mapping[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "CreateReport.get_initial": {
            "name": "get_initial",
            "location": 229,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateReport.get_context_data": {
            "name": "get_context_data",
            "location": 234,
            "return": [
                "dict",
                "str",
                "IO[bytes]",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateReport.get_success_url": {
            "name": "get_success_url",
            "location": 244,
            "return": [
                "str",
                "dict",
                "int",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateReport.get_success_message": {
            "name": "get_success_message",
            "location": 247,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "cleaned_data": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "Optional[List[Dict]]",
                    "dict",
                    "List[bytes]"
                ]
            }
        },
        "CreateReport._get_initial_date": {
            "name": "_get_initial_date",
            "location": 250,
            "return": [
                "datetime.datetime",
                "int",
                "str",
                "datetime.date",
                "float",
                "recidiviz.calculator.pipeline.utils.incarceration_period_index.IncarcerationPeriodIndex",
                "Optional[str]",
                "Optional[datetime.date]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateReport._get_date_of_report": {
            "name": "_get_date_of_report",
            "location": 268,
            "return": [
                "datetime.datetime",
                "recidiviz.common.ingest_metadata.IngestMetadata",
                "datetime.date"
            ],
            "arguments": {
                "report_queryset": [
                    "str",
                    "Optional[bool]",
                    "bool",
                    "float",
                    "Optional[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "JoinProject.get_initial": {
            "name": "get_initial",
            "location": 291,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "JoinProject.get_context_data": {
            "name": "get_context_data",
            "location": 296,
            "return": [
                "dict",
                "str",
                "IO[bytes]",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": []
            }
        },
        "JoinProject.get_success_url": {
            "name": "get_success_url",
            "location": 303,
            "return": [
                "str",
                "dict",
                "int",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": []
            }
        },
        "JoinProject.form_valid": {
            "name": "form_valid",
            "location": 306,
            "return": [
                "cmk.utils.type_defs.UserId",
                "Sequence[str]",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "str",
                    "int",
                    "django.db.backends.postgresql_psycopg2.schema.DatabaseSchemaEditor"
                ]
            }
        },
        "JoinProject.form_invalid": {
            "name": "form_invalid",
            "location": 314,
            "return": [
                "cmk.utils.type_defs.UserId",
                "bool",
                "dict",
                "Optional[str]",
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ReportDetailBase.get_initial": {
            "name": "get_initial",
            "location": 327,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportDetailBase.get_context_data": {
            "name": "get_context_data",
            "location": 332,
            "return": [
                "dict",
                "str",
                "IO[bytes]",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportDetailBase.get_success_url": {
            "name": "get_success_url",
            "location": 343,
            "return": [
                "str",
                "bool",
                "Optional[Dict[str, str]]",
                "Optional[Union[str, Any]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportDetailBase.form_valid": {
            "name": "form_valid",
            "location": 353,
            "return": [
                "int",
                "List[str]",
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "Dict[str, str]",
                    "cmk.utils.type_defs.ServiceName",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "ReportDetailBase.get_success_message": {
            "name": "get_success_message",
            "location": 359,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "cleaned_data": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "Optional[List[Dict]]",
                    "dict",
                    "List[bytes]"
                ]
            }
        },
        "ReportDetailView.get_initial": {
            "name": "get_initial",
            "location": 384,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportDetailView.get_context_data": {
            "name": "get_context_data",
            "location": 389,
            "return": [
                "dict",
                "str",
                "IO[bytes]",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportDetailView.get_success_url": {
            "name": "get_success_url",
            "location": 397,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportDetailView.get_success_message": {
            "name": "get_success_message",
            "location": 400,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "cleaned_data": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "Optional[List[Dict]]",
                    "dict",
                    "List[bytes]"
                ]
            }
        },
        "ReportDeleteView.get_initial": {
            "name": "get_initial",
            "location": 422,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportDeleteView.get_context_data": {
            "name": "get_context_data",
            "location": 427,
            "return": [
                "dict",
                "str",
                "IO[bytes]",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportDeleteView.get_success_url": {
            "name": "get_success_url",
            "location": 433,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorReportView.get_queryset": {
            "name": "get_queryset",
            "location": 444,
            "return": [
                "str",
                "zerver.models.Realm",
                "Optional[List[str]]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorReportView.get_context_data": {
            "name": "get_context_data",
            "location": 453,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorReportView.get": {
            "name": "get",
            "location": 460,
            "return": [
                "models.Dashboard",
                "str",
                "bool",
                "apistar.http.QueryParam",
                "Callable",
                "Optional[zerver.models.UserProfile]",
                "contests.models.User"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "AuthorReportView.post": {
            "name": "post",
            "location": 465,
            "return": [
                "dict",
                "Optional[Dict]",
                "inspire_mitmproxy.http.MITMRequest",
                "Dict[int, dict]",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest",
                    "Callable"
                ],
                "pk": [
                    "int",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest",
                    "base.Request"
                ],
                "year": [
                    "int",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest",
                    "base.Request"
                ],
                "month": [
                    "int",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest",
                    "base.Request"
                ]
            }
        },
        "BaseProjectReportList.get_context_data": {
            "name": "get_context_data",
            "location": 488,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProjectReportList.get": {
            "name": "get",
            "location": 495,
            "return": [
                "models.Dashboard",
                "str",
                "bool",
                "apistar.http.QueryParam",
                "Callable",
                "Optional[zerver.models.UserProfile]",
                "contests.models.User"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "BaseProjectReportList.post": {
            "name": "post",
            "location": 500,
            "return": [
                "dict",
                "Optional[Dict]",
                "inspire_mitmproxy.http.MITMRequest",
                "Dict[int, dict]",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "Optional[str]",
                    "str",
                    "bool",
                    "django.http.HttpRequest"
                ],
                "pk": [
                    "int",
                    "str"
                ],
                "year": [
                    "int",
                    "str"
                ],
                "month": [
                    "int",
                    "str"
                ],
                "user_pk": [
                    "int",
                    "str"
                ]
            }
        },
        "ProjectReportList.get_queryset": {
            "name": "get_queryset",
            "location": 509,
            "return": [
                "str",
                "zerver.models.Realm",
                "Optional[List[str]]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorReportProjectView.get_queryset": {
            "name": "get_queryset",
            "location": 520,
            "return": [
                "str",
                "zerver.models.Realm",
                "Optional[List[str]]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorReportProjectView.get_context_data": {
            "name": "get_context_data",
            "location": 531,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportUserReportView.get_queryset": {
            "name": "get_queryset",
            "location": 563,
            "return": [
                "str",
                "zerver.models.Realm",
                "Optional[List[str]]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportUserReportView.render_to_response": {
            "name": "render_to_response",
            "location": 572,
            "return": [
                "Optional[str]",
                "List[str]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict",
                    "Dict[str, Any]",
                    "float"
                ]
            }
        },
        "ExportReportsInProjectView.get_queryset": {
            "name": "get_queryset",
            "location": 607,
            "return": [
                "str",
                "zerver.models.Realm",
                "Optional[List[str]]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportReportsInProjectView.render_to_response": {
            "name": "render_to_response",
            "location": 616,
            "return": [
                "Optional[str]",
                "List[str]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict",
                    "Dict[str, Any]",
                    "float"
                ]
            }
        },
        "ExportAuthorReportProjectView.get_queryset": {
            "name": "get_queryset",
            "location": 644,
            "return": [
                "str",
                "zerver.models.Realm",
                "Optional[List[str]]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportAuthorReportProjectView.render_to_response": {
            "name": "render_to_response",
            "location": 655,
            "return": [
                "Optional[str]",
                "List[str]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "dict",
                    "Dict[str, Any]",
                    "float"
                ]
            }
        },
        "LoadTaskActivitiesView.get_context_data": {
            "name": "get_context_data",
            "location": 683,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sheetstorm-master/employees/__init__.py": {},
    "sheetstorm-master/employees/common/constants.py": {},
    "sheetstorm-master/employees/common/exports.py": {
        "set_format_styles_for_main_cells": {
            "name": "set_format_styles_for_main_cells",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "cell": [
                    "openpyxl.cell.Cell",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Optional[int]",
                    "Mapping[str, T]"
                ],
                "is_header": [
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "set_and_fill_cell": {
            "name": "set_and_fill_cell",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "cell": [
                    "openpyxl.cell.Cell",
                    "int",
                    "Optional[List[int]]",
                    "str",
                    "bool"
                ],
                "cell_value": [
                    "str",
                    "Type",
                    "Callable[[Any], None]",
                    "faustypes.models.CoercionHandler",
                    "Optional[Pattern[str]]",
                    "bytes"
                ]
            }
        },
        "set_and_fill_hours_cell": {
            "name": "set_and_fill_hours_cell",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "cell": [
                    "openpyxl.cell.Cell",
                    "float",
                    "list",
                    "bool",
                    "hackathon.utils.utils.DataMessage"
                ],
                "cell_value": [
                    "str",
                    "Optional[str]",
                    "django.utils.timezone.datetime",
                    "bool",
                    "datetime.date",
                    "datetime.datetime",
                    "Optional[int]",
                    "float",
                    "Optional[float]"
                ]
            }
        },
        "set_borders_between_columns": {
            "name": "set_borders_between_columns",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "cell": [
                    "openpyxl.cell.Cell",
                    "Optional[Iterable[T]]",
                    "bool"
                ]
            }
        },
        "separate_days": {
            "name": "separate_days",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "cell": [
                    "openpyxl.cell.Cell",
                    "bool",
                    "str",
                    "zam_repondeur.models.phase.Phase"
                ]
            }
        },
        "get_employee_name": {
            "name": "get_employee_name",
            "location": 68,
            "return": [
                "str",
                "Dict[str, Optional[str]]"
            ],
            "arguments": {
                "author": [
                    "users.models.CustomUser",
                    "str",
                    "tests.models.Customer",
                    "models.Name",
                    "dict"
                ]
            }
        },
        "generate_xlsx_for_single_user": {
            "name": "generate_xlsx_for_single_user",
            "location": 75,
            "return": [
                "int"
            ],
            "arguments": {
                "author": [
                    "users.models.CustomUser",
                    "bool",
                    "float",
                    "models.User",
                    "Optional[str]",
                    "int",
                    "str"
                ]
            }
        },
        "generate_xlsx_for_project": {
            "name": "generate_xlsx_for_project",
            "location": 79,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "project": [
                    "managers.models.Project",
                    "str",
                    "int"
                ]
            }
        },
        "save_work_book_as_csv": {
            "name": "save_work_book_as_csv",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "writer": [
                    "bytes",
                    "List[int]",
                    "bool",
                    "openpyxl.Workbook"
                ],
                "work_book": [
                    "openpyxl.Workbook",
                    "bool",
                    "int",
                    "str"
                ],
                "hours_column_setting": [
                    "employees.common.constants.ColumnSettings",
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "export_all_project_reports_as_one_csv_file": {
            "name": "export_all_project_reports_as_one_csv_file",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "work_book": [
                    "openpyxl.Workbook",
                    "int",
                    "Optional[str]",
                    "List[List[int]]",
                    "str",
                    "Type"
                ],
                "writer": [
                    "str",
                    "dict"
                ]
            }
        },
        "ReportExtractor.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportExtractor.generate_xlsx_for_project": {
            "name": "generate_xlsx_for_project",
            "location": 96,
            "return": [
                "bool",
                "dict",
                "str",
                "Optional[int]",
                "list",
                "int"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "Optional[projects.models.projects.Project]"
                ]
            }
        },
        "ReportExtractor.generate_xlsx_for_single_user": {
            "name": "generate_xlsx_for_single_user",
            "location": 112,
            "return": [
                "int",
                "Tuple[int, int, int, int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "author": [
                    "bool",
                    "str",
                    "zerver.models.Realm",
                    "List[cmk.gui.plugins.visuals.utils.Filter]"
                ]
            }
        },
        "ReportExtractor._fill_report_for_single_user": {
            "name": "_fill_report_for_single_user",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "employee_name": [
                    "str",
                    "cmk.gui.plugins.views.utils.Command"
                ],
                "reports": [
                    "str",
                    "List[str]",
                    "bool",
                    "Iterator[str]"
                ]
            }
        },
        "ReportExtractor._fill_single_report": {
            "name": "_fill_single_report",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "report": [
                    "models.User",
                    "lunch_buddies.models.poll_responses.PollResponse",
                    "int",
                    "datetime.date"
                ]
            }
        },
        "ReportExtractor._prepare_worksheet": {
            "name": "_prepare_worksheet",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "employee_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ReportExtractor._reset_per_sheet_settings": {
            "name": "_reset_per_sheet_settings",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportExtractor._set_xlsx_settings_for_project_report": {
            "name": "_set_xlsx_settings_for_project_report",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportExtractor._set_xlsx_settings_for_user_report": {
            "name": "_set_xlsx_settings_for_user_report",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportExtractor._set_active_worksheet_name": {
            "name": "_set_active_worksheet_name",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "employee_name": [
                    "str",
                    "Optional[bool]",
                    "Mapping[str, Any]",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "ReportExtractor._set_employees_worksheet_active": {
            "name": "_set_employees_worksheet_active",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "employee_name": [
                    "cmk.utils.type_defs.HostName",
                    "int",
                    "str"
                ]
            }
        },
        "ReportExtractor._fill_headers": {
            "name": "_fill_headers",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "employee_name": [
                    "str"
                ]
            }
        },
        "ReportExtractor._set_employee_name_in_worksheet": {
            "name": "_set_employee_name_in_worksheet",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "employee_name": [
                    "str"
                ]
            }
        },
        "ReportExtractor._set_column_width": {
            "name": "_set_column_width",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "col_num": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]",
                    "models.KippoProject"
                ],
                "column_name": [
                    "int",
                    "Optional[int]",
                    "str",
                    "Dict[str,str]"
                ]
            }
        },
        "ReportExtractor._fill_current_report_data": {
            "name": "_fill_current_report_data",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "storage_data": [
                    "dict",
                    "bool",
                    "List[Dict[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ReportExtractor._summarize_user_reports": {
            "name": "_summarize_user_reports",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportExtractor._get_report_date": {
            "name": "_get_report_date",
            "location": 232,
            "return": [
                "str",
                "datetime.datetime",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "current_report": [
                    "employees.models.Report",
                    "int",
                    "datetime.datetime",
                    "Union[str, int]",
                    "float",
                    "Optional[str]"
                ]
            }
        },
        "ReportExtractor._set_row_height": {
            "name": "_set_row_height",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "description": [
                    "str",
                    "Optional[str]",
                    "type",
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "ReportExtractor._set_printing_settings_for_current_sheet": {
            "name": "_set_printing_settings_for_current_sheet",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportExtractor.delete_illigal_characters": {
            "name": "delete_illigal_characters",
            "location": 261,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "description": [
                    "str",
                    "models.scenes.scenes_base.Scene.Constructor",
                    "Optional[bool]"
                ]
            }
        }
    },
    "sheetstorm-master/employees/common/strings.py": {},
    "sheetstorm-master/employees/common/__init__.py": {},
    "sheetstorm-master/employees/migrations/0001_initial.py": {},
    "sheetstorm-master/employees/migrations/0002_auto_20190730_1515.py": {},
    "sheetstorm-master/employees/migrations/0003_auto_20190805_1021.py": {},
    "sheetstorm-master/employees/migrations/0004_auto_20210526_1317.py": {},
    "sheetstorm-master/employees/migrations/0005_auto_20210527_1135.py": {},
    "sheetstorm-master/employees/migrations/__init__.py": {},
    "sheetstorm-master/employees/templatetags/data_display_filters.py": {
        "duration_field_to_string": {
            "name": "duration_field_to_string",
            "location": 14,
            "return": [
                "str",
                "int",
                "tuple",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "data": [
                    "datetime.timedelta",
                    "dict",
                    "allennlp.common.util.JsonDict",
                    "Dict[int, Dict]"
                ]
            }
        },
        "convert_to_month_name": {
            "name": "convert_to_month_name",
            "location": 19,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, str]",
                "bool",
                "int"
            ],
            "arguments": {
                "month_number": [
                    "str"
                ]
            }
        },
        "annotate_no_follow_link_with_css_class": {
            "name": "annotate_no_follow_link_with_css_class",
            "location": 24,
            "return": [
                "bool",
                "Callable",
                "Iterable[int]"
            ],
            "arguments": {
                "html": [
                    "str",
                    "Optional[Tuple[int, int]]"
                ],
                "css_class": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        }
    },
    "sheetstorm-master/employees/templatetags/data_structure_element_selectors.py": {
        "get_key_value": {
            "name": "get_key_value",
            "location": 10,
            "return": [
                "str",
                "float",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "dictionary": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Optional[str]"
                ],
                "index": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        }
    },
    "sheetstorm-master/employees/templatetags/__init__.py": {},
    "sheetstorm-master/employees/tests/test_create_report_view.py": {
        "CreateReportViewTests.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateReportViewTests.test_create_report_view_should_add_new_report_on_post_when_form_is_valid": {
            "name": "test_create_report_view_should_add_new_report_on_post_when_form_is_valid",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateReportViewTests.test_create_report_view_should_redirect_to_report_list_on_post_when_form_is_valid": {
            "name": "test_create_report_view_should_redirect_to_report_list_on_post_when_form_is_valid",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateReportViewTests.test_create_report_view_should_not_redirect_and_create_report_on_submit_when_form_is_invalid": {
            "name": "test_create_report_view_should_not_redirect_and_create_report_on_submit_when_form_is_invalid",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateReportViewTests.test_create_report_form_default_date_should_be_current_date": {
            "name": "test_create_report_form_default_date_should_be_current_date",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "year": [
                    "Dict[str, Any]",
                    "str",
                    "raiden.utils.List[raiden.utils.TokenAddress]"
                ],
                "month": [
                    "Dict[str, Any]",
                    "str",
                    "raiden.utils.List[raiden.utils.TokenAddress]"
                ],
                "day": [
                    "int",
                    "models.User",
                    "Union[str, int]",
                    "Optional[str]",
                    "raiden.utils.ABI"
                ]
            }
        },
        "CreateReportViewTests.test_create_report_form_view_should_contain_only_active_projects_related_to_user": {
            "name": "test_create_report_form_view_should_contain_only_active_projects_related_to_user",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateReportViewTests.test_create_report_form_should_have_empty_project_if_user_is_not_in_any_active_project": {
            "name": "test_create_report_form_should_have_empty_project_if_user_is_not_in_any_active_project",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateReportViewTests.test_create_report_form_projects_field_for_manager_should_contain_only_projects_where_he_is_manager": {
            "name": "test_create_report_form_projects_field_for_manager_should_contain_only_projects_where_he_is_manager",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateReportViewTests.test_create_report_form_view_should_include_only_active_task_activities": {
            "name": "test_create_report_form_view_should_include_only_active_task_activities",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateReportViewTests.test_success_message_should_be_added_on_post_if_form_is_valid": {
            "name": "test_success_message_should_be_added_on_post_if_form_is_valid",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateReportViewTests.test_that_success_message_should_be_displayed_in_template_on_get_after_report_create_if_form_is_valid": {
            "name": "test_that_success_message_should_be_displayed_in_template_on_get_after_report_create_if_form_is_valid",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateReportViewTests.test_that_success_message_should_not_be_added_if_form_is_invalid": {
            "name": "test_that_success_message_should_not_be_added_if_form_is_invalid",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateReportPreferencesTests.setUp": {
            "name": "setUp",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateReportPreferencesTests.test_initial_date_should_be_today_date_for_any_preference_if_user_does_not_have_any_reports": {
            "name": "test_initial_date_should_be_today_date_for_any_preference_if_user_does_not_have_any_reports",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "date_preference": [
                    "datetime.datetime",
                    "datetime.date",
                    "str",
                    "int"
                ]
            }
        },
        "CreateReportPreferencesTests.test_initial_date_should_be_today_for_always_today_preference": {
            "name": "test_initial_date_should_be_today_for_always_today_preference",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "report_date": [
                    "int",
                    "datetime.datetime",
                    "List[str]",
                    "datetime.date",
                    "str",
                    "Optional[List[str]]",
                    "Optional[str]"
                ]
            }
        },
        "CreateReportPreferencesTests.test_initial_date_should_be_date_of_recently_created_report_for_recently_created_report_date_preference": {
            "name": "test_initial_date_should_be_date_of_recently_created_report_for_recently_created_report_date_preference",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "report_date": [
                    "core.models.User",
                    "musictaxonomy.spotify.models.SpotifyUser",
                    "passzero.models.auth_tokens.AuthToken",
                    "str",
                    "float",
                    "pipwatch_api.datastore.models.RequirementsFile"
                ]
            }
        },
        "CreateReportPreferencesTests.test_initial_date_should_be_highest_report_date_for_user_for_last_report_date_preference": {
            "name": "test_initial_date_should_be_highest_report_date_for_user_for_last_report_date_preference",
            "location": 216,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateReportPreferencesTests._assert_initial_date_equal_today": {
            "name": "_assert_initial_date_equal_today",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sheetstorm-master/employees/tests/test_report_detail_and_delete_views.py": {
        "AdminReportViewTests.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AdminReportViewTests.test_admin_report_detail_view_should_display_report_details": {
            "name": "test_admin_report_detail_view_should_display_report_details",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AdminReportViewTests.test_admin_report_detail_view_should_update_report_on_post": {
            "name": "test_admin_report_detail_view_should_update_report_on_post",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectReportDetailTests.setUp": {
            "name": "setUp",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectReportDetailTests.test_project_report_detail_view_should_display_report_details": {
            "name": "test_project_report_detail_view_should_display_report_details",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectReportDetailTests.test_project_report_list_view_should_not_be_accessible_for_unauthenticated_user": {
            "name": "test_project_report_list_view_should_not_be_accessible_for_unauthenticated_user",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectReportDetailTests.test_project_report_detail_view_should_update_report_on_post": {
            "name": "test_project_report_detail_view_should_update_report_on_post",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectReportDetailTests.test_project_report_detail_view_should_not_update_report_on_post_if_form_is_invalid": {
            "name": "test_project_report_detail_view_should_not_update_report_on_post_if_form_is_invalid",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectReportDetailTests.test_project_report_detail_view_should_show_data_from_current_report_not_from_latest_report": {
            "name": "test_project_report_detail_view_should_show_data_from_current_report_not_from_latest_report",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectReportDetailTests.test_success_message_should_be_added_on_post_if_form_is_valid": {
            "name": "test_success_message_should_be_added_on_post_if_form_is_valid",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectReportDetailTests.test_that_success_message_should_be_displayed_in_template_on_get_after_report_create_if_form_is_valid": {
            "name": "test_that_success_message_should_be_displayed_in_template_on_get_after_report_create_if_form_is_valid",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectReportDetailTests.test_that_success_message_should_not_be_added_if_form_is_invalid": {
            "name": "test_that_success_message_should_not_be_added_if_form_is_invalid",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportDetailViewTests.setUp": {
            "name": "setUp",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportDetailViewTests.test_custom_report_detail_view_should_display_report_details_on_get": {
            "name": "test_custom_report_detail_view_should_display_report_details_on_get",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportDetailViewTests.test_custom_report_list_view_should_not_be_accessible_for_unauthenticated_users": {
            "name": "test_custom_report_list_view_should_not_be_accessible_for_unauthenticated_users",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportDetailViewTests.test_custom_report_detail_view_should_not_render_non_existing_report": {
            "name": "test_custom_report_detail_view_should_not_render_non_existing_report",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportDetailViewTests.test_custom_report_detail_view_should_update_report_on_post": {
            "name": "test_custom_report_detail_view_should_update_report_on_post",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportDetailViewTests.test_custom_report_detail_view_should_not_update_report_on_post_if_form_is_invalid": {
            "name": "test_custom_report_detail_view_should_not_update_report_on_post_if_form_is_invalid",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportDetailViewTests.test_custom_report_detail_view_should_not_update_report_if_author_is_not_a_member_of_selected_project": {
            "name": "test_custom_report_detail_view_should_not_update_report_if_author_is_not_a_member_of_selected_project",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportDetailViewTests.test_custom_report_detail_view_project_field_should_not_display_projects_the_author_is_not_a_member_of": {
            "name": "test_custom_report_detail_view_project_field_should_not_display_projects_the_author_is_not_a_member_of",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportDetailViewTests.test_custom_report_detail_view_should_show_data_from_current_report_not_from_latest_report": {
            "name": "test_custom_report_detail_view_should_show_data_from_current_report_not_from_latest_report",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportDetailViewTests.test_manager_should_be_able_to_update_his_reports_in_project_in_which_he_is_not_manager": {
            "name": "test_manager_should_be_able_to_update_his_reports_in_project_in_which_he_is_not_manager",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportDetailViewTests.test_custom_report_detail_view_should_return_only_one_report_when_are_more_than_one_managers_in_project": {
            "name": "test_custom_report_detail_view_should_return_only_one_report_when_are_more_than_one_managers_in_project",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportDetailViewTests.test_custom_report_detail_view_should_contains_in_project_field_all_project_related_with_user": {
            "name": "test_custom_report_detail_view_should_contains_in_project_field_all_project_related_with_user",
            "location": 247,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportDetailViewTests.test_custom_report_detail_view_should_contains_chosen_project_even_user_is_no_longer_in_project": {
            "name": "test_custom_report_detail_view_should_contains_chosen_project_even_user_is_no_longer_in_project",
            "location": 255,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportDetailViewTests.test_success_message_should_be_added_on_post_if_form_is_valid": {
            "name": "test_success_message_should_be_added_on_post_if_form_is_valid",
            "location": 264,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportDetailViewTests.test_that_success_message_should_be_displayed_in_template_on_get_after_report_create_if_form_is_valid": {
            "name": "test_that_success_message_should_be_displayed_in_template_on_get_after_report_create_if_form_is_valid",
            "location": 271,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportDetailViewTests.test_that_success_message_should_not_be_added_if_form_is_invalid": {
            "name": "test_that_success_message_should_not_be_added_if_form_is_invalid",
            "location": 276,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportDeleteViewTests.setUp": {
            "name": "setUp",
            "location": 285,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportDeleteViewTests.test_delete_report_view_should_delete_report_on_post": {
            "name": "test_delete_report_view_should_delete_report_on_post",
            "location": 292,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportDeleteViewTests.test_success_message_should_be_added_on_post": {
            "name": "test_success_message_should_be_added_on_post",
            "location": 297,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportDeleteViewTests.test_that_success_message_should_be_displayed_in_template_on_get_after_report_delete": {
            "name": "test_that_success_message_should_be_displayed_in_template_on_get_after_report_delete",
            "location": 303,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sheetstorm-master/employees/tests/test_report_list_views.py": {
        "AuthorReportViewTests.setUp": {
            "name": "setUp",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorReportViewTests.test_author_reports_view_should_display_users_report_list_on_get": {
            "name": "test_author_reports_view_should_display_users_report_list_on_get",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorReportViewTests.test_author_report_list_view_should_not_display_other_users_reports": {
            "name": "test_author_report_list_view_should_not_display_other_users_reports",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorReportViewTests.test_author_report_list_view_should_display_message_if_user_has_no_reports": {
            "name": "test_author_report_list_view_should_display_message_if_user_has_no_reports",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorReportViewTests.test_author_report_list_view_should_not_display_reports_from_another_month": {
            "name": "test_author_report_list_view_should_not_display_reports_from_another_month",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorReportViewTests.test_author_report_list_view_should_redirect_to_another_month_on_post": {
            "name": "test_author_report_list_view_should_redirect_to_another_month_on_post",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorReportViewTests.test_author_report_list_view_should_redirect_to_current_date_if_date_parameters_are_out_of_bonds": {
            "name": "test_author_report_list_view_should_redirect_to_current_date_if_date_parameters_are_out_of_bonds",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorReportViewTests.test_author_report_list_view_should_link_to_custom_report_detail_if_user_is_author": {
            "name": "test_author_report_list_view_should_link_to_custom_report_detail_if_user_is_author",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorReportViewTests.test_author_report_list_view_should_link_to_admin_report_detail_if_user_is_author": {
            "name": "test_author_report_list_view_should_link_to_admin_report_detail_if_user_is_author",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthorReportViewTests.test_author_report_list_view_should_display_monthly_hour_sum_in_hour_format": {
            "name": "test_author_report_list_view_should_display_monthly_hour_sum_in_hour_format",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectReportListTests.setUp": {
            "name": "setUp",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectReportListTests.test_project_report_list_view_should_display_projects_report_list_on_get": {
            "name": "test_project_report_list_view_should_display_projects_report_list_on_get",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectReportListTests.test_project_report_list_view_should_not_be_accessible_for_unauthenticated_user": {
            "name": "test_project_report_list_view_should_not_be_accessible_for_unauthenticated_user",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectReportListTests.test_project_report_list_view_should_not_display_non_existing_projects_reports": {
            "name": "test_project_report_list_view_should_not_display_non_existing_projects_reports",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectReportListTests.test_project_report_list_view_should_not_display_other_projects_reports": {
            "name": "test_project_report_list_view_should_not_display_other_projects_reports",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectReportListTests.test_project_report_list_view_should_display_message_if_project_has_no_reports": {
            "name": "test_project_report_list_view_should_display_message_if_project_has_no_reports",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectReportListTests.test_that_project_report_list_should_return_list_of_all_reports_assigned_to_project": {
            "name": "test_that_project_report_list_should_return_list_of_all_reports_assigned_to_project",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectReportListTests.test_project_report_list_view_should_not_display_reports_from_different_month_than_specified": {
            "name": "test_project_report_list_view_should_not_display_reports_from_different_month_than_specified",
            "location": 239,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectReportListTests.test_project_report_list_view_should_redirect_to_another_month_on_post": {
            "name": "test_project_report_list_view_should_redirect_to_another_month_on_post",
            "location": 264,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectReportListTests.test_project_report_list_view_should_redirect_to_current_date_if_date_parameters_are_out_of_bonds": {
            "name": "test_project_report_list_view_should_redirect_to_current_date_if_date_parameters_are_out_of_bonds",
            "location": 271,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectReportListTests.test_project_report_list_view_should_display_inactive_members_reports": {
            "name": "test_project_report_list_view_should_display_inactive_members_reports",
            "location": 285,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectReportListTests._assert_response_contain_report": {
            "name": "_assert_response_contain_report",
            "location": 319,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "response": [
                    "str",
                    "django.http.HttpResponse",
                    "dict"
                ],
                "reports": [
                    "list",
                    "purplship.core.utils.serializable.Deserializable"
                ]
            }
        },
        "ProjectReportListTests.test_project_report_list_view_should_display_monthly_hour_sum_in_hour_format": {
            "name": "test_project_report_list_view_should_display_monthly_hour_sum_in_hour_format",
            "location": 335,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportCustomListTests.setUp": {
            "name": "setUp",
            "location": 352,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportCustomListTests.test_custom_list_view_should_display_users_report_list_on_get": {
            "name": "test_custom_list_view_should_display_users_report_list_on_get",
            "location": 376,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportCustomListTests.test_custom_list_view_should_not_display_other_users_reports": {
            "name": "test_custom_list_view_should_not_display_other_users_reports",
            "location": 383,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportCustomListTests.test_custom_list_view_should_not_display_other_users_reports_when_user_does_not_have_reports": {
            "name": "test_custom_list_view_should_not_display_other_users_reports_when_user_does_not_have_reports",
            "location": 390,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportCustomListTests.test_custom_report_list_view_should_redirect_to_another_month_if_month_switch_was_called_on_post": {
            "name": "test_custom_report_list_view_should_redirect_to_another_month_if_month_switch_was_called_on_post",
            "location": 397,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportCustomListTests.test_custom_report_list_view_should_not_display_reports_from_different_month_than_selected": {
            "name": "test_custom_report_list_view_should_not_display_reports_from_different_month_than_selected",
            "location": 402,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportCustomListTests.test_custom_report_list_view_should_display_monthly_hour_sum_in_hour_format": {
            "name": "test_custom_report_list_view_should_display_monthly_hour_sum_in_hour_format",
            "location": 415,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorReportProjectView.setUp": {
            "name": "setUp",
            "location": 429,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorReportProjectView.test_view_should_display_author_reports_of_project_on_admin_get": {
            "name": "test_view_should_display_author_reports_of_project_on_admin_get",
            "location": 447,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorReportProjectView.test_view_should_display_author_reports_of_project_on_manager_project_get": {
            "name": "test_view_should_display_author_reports_of_project_on_manager_project_get",
            "location": 455,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorReportProjectView.test_view_should_not_display_reports_for_any_other_managers": {
            "name": "test_view_should_not_display_reports_for_any_other_managers",
            "location": 464,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorReportProjectView.test_view_should_not_display_reports_for_other_users": {
            "name": "test_view_should_not_display_reports_for_other_users",
            "location": 472,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorReportProjectView.test_view_should_display_author_reports_only_one_project": {
            "name": "test_view_should_display_author_reports_only_one_project",
            "location": 478,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sheetstorm-master/employees/tests/test_summary_and_join_project_views.py": {
        "ReportSummaryTests.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportSummaryTests.test_report_list_should_accurately_evaluate_work_hours_statistics": {
            "name": "test_report_list_should_accurately_evaluate_work_hours_statistics",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportSummaryTests.test_author_report_list_should_accurately_evaluate_work_hours_statistics": {
            "name": "test_author_report_list_should_accurately_evaluate_work_hours_statistics",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportSummaryTests._assert_projects_work_percentage_is_evaluated_accurately": {
            "name": "_assert_projects_work_percentage_is_evaluated_accurately",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "context_data": [
                    "dict",
                    "cmk.utils.type_defs.AgentRawData",
                    "bytes",
                    "Dict[str, Any]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "ReportSummaryTests._generate_user_reports_for_current_and_previous_month_with_uneven_total_hours": {
            "name": "_generate_user_reports_for_current_and_previous_month_with_uneven_total_hours",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportSummaryTests._get_number_of_reported_days_for_each_month": {
            "name": "_get_number_of_reported_days_for_each_month",
            "location": 79,
            "return": [
                "str",
                "datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "reports_per_project": [
                    "cmk.utils.type_defs.HostName",
                    "str",
                    "bool",
                    "cmk.utils.type_defs.Ruleset",
                    "cmk.utils.type_defs.ServiceName",
                    "django.db.migrations.state.StateApps",
                    "Dict[str, Any]"
                ],
                "difference_ratio": [
                    "cmk.utils.type_defs.HostName",
                    "str",
                    "bool",
                    "cmk.utils.type_defs.Ruleset",
                    "cmk.utils.type_defs.ServiceName",
                    "django.db.migrations.state.StateApps",
                    "Dict[str, Any]"
                ]
            }
        },
        "ReportSummaryTests._strip_hours_between_projects": {
            "name": "_strip_hours_between_projects",
            "location": 87,
            "return": [
                "Callable",
                "str",
                "django.db.models.QuerySet"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportSummaryTests._get_total_hours_per_project_and_percentage_from_month": {
            "name": "_get_total_hours_per_project_and_percentage_from_month",
            "location": 94,
            "return": [
                "int",
                "str",
                "Exception",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "JoinProjectViewTests.setUp": {
            "name": "setUp",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "JoinProjectViewTests.test_join_project_view_should_add_user_to_project_selected_in_project_join_form_on_post": {
            "name": "test_join_project_view_should_add_user_to_project_selected_in_project_join_form_on_post",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "JoinProjectViewTests.test_join_project_view_should_redirect_to_report_list_after_successful_request_on_post": {
            "name": "test_join_project_view_should_redirect_to_report_list_after_successful_request_on_post",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "JoinProjectViewTests.test_join_project_view_view_should_not_join_to_any_project_when_not_selected": {
            "name": "test_join_project_view_view_should_not_join_to_any_project_when_not_selected",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "JoinProjectViewTests.test_join_project_view_should_display_message_if_there_are_no_projects_available_to_join_to": {
            "name": "test_join_project_view_should_display_message_if_there_are_no_projects_available_to_join_to",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sheetstorm-master/employees/tests/test_unit_custom_forms.py": {
        "ProjectJoinFormTests.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectJoinFormTests.test_project_join_form_should_create_choice_field_with_project_name_and_id_based_author_passed_in_initial": {
            "name": "test_project_join_form_should_create_choice_field_with_project_name_and_id_based_author_passed_in_initial",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectJoinFormTests._generate_test_projects": {
            "name": "_generate_test_projects",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "queryset_length": [
                    "List[dict]",
                    "int",
                    "Callable",
                    "bool"
                ]
            }
        },
        "ProjectJoinFormTests._compare_id_and_names_of_choices_and_project_for_projects": {
            "name": "_compare_id_and_names_of_choices_and_project_for_projects",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "choices": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "TestDurationFieldForm.test_correct_work_hours_is_same_as_assumpted": {
            "name": "test_correct_work_hours_is_same_as_assumpted",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "initial_value": [
                    "str",
                    "Callable[[], Any]",
                    "tildes.models.user.User",
                    "int",
                    "Callable[[str], None]"
                ],
                "input_value": [
                    "str",
                    "Callable[[], Any]",
                    "tildes.models.user.User",
                    "int",
                    "Callable[[str], None]"
                ],
                "expected_value": [
                    "str",
                    "Callable[[], Any]",
                    "tildes.models.user.User",
                    "int",
                    "Callable[[str], None]"
                ]
            }
        },
        "TestDurationFieldForm.test_incorrect_work_hours_will_raise_exception": {
            "name": "test_incorrect_work_hours_will_raise_exception",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "initial_value": [
                    "bool",
                    "Iterable[dict]"
                ],
                "input_value": [
                    "bool",
                    "Iterable[dict]"
                ]
            }
        },
        "TestDurationFieldForm.test_duration_field_form_is_masked": {
            "name": "test_duration_field_form_is_masked",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDurationFieldForm._test_duration_field_form": {
            "name": "_test_duration_field_form",
            "location": 76,
            "return": [
                "str",
                "Tuple[int, int, bool]"
            ],
            "arguments": {
                "self": [],
                "input_value": [
                    "str",
                    "Dict[str, str]",
                    "List[str]"
                ]
            }
        },
        "MonthSwitchFormTests.test_init_with_provided_optional_date_parameter_should_add_equal_initial_value_to_date_field": {
            "name": "test_init_with_provided_optional_date_parameter_should_add_equal_initial_value_to_date_field",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MonthSwitchFormTests.test_eq_should_return_true_if_both_forms_share_the_same_date_field_data": {
            "name": "test_eq_should_return_true_if_both_forms_share_the_same_date_field_data",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MonthSwitchFormTests.test_eq_should_return_false_if_both_forms_have_different_initial_value": {
            "name": "test_eq_should_return_false_if_both_forms_have_different_initial_value",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sheetstorm-master/employees/tests/test_unit_custom_mixins.py": {
        "MonthNavigationMixinCustomMethodsTests.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MonthNavigationMixinCustomMethodsTests.test_get_url_from_date_should_return_url_with_no_pk_if_none_is_provided": {
            "name": "test_get_url_from_date_should_return_url_with_no_pk_if_none_is_provided",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MonthNavigationMixinCustomMethodsTests.test_get_title_date_should_return_five_character_string_containing_month_number_separator_and_two_last_digits_of_year_number": {
            "name": "test_get_title_date_should_return_five_character_string_containing_month_number_separator_and_two_last_digits_of_year_number",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MonthNavigationMixinCustomMethodsTests.test_get_next_month_url_should_generate_url_for_next_month_for_given_path": {
            "name": "test_get_next_month_url_should_generate_url_for_next_month_for_given_path",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MonthNavigationMixinCustomMethodsTests.test_get_previous_month_url_should_generate_url_for_previous_month_for_given_path": {
            "name": "test_get_previous_month_url_should_generate_url_for_previous_month_for_given_path",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MonthNavigationMixinCustomMethodsTests.test_get_recent_month_url_should_generate_url_for_current_month_for_given_path": {
            "name": "test_get_recent_month_url_should_generate_url_for_current_month_for_given_path",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDateOutOfBoundsMethod._test_date_out_of_bounds_method": {
            "name": "_test_date_out_of_bounds_method",
            "location": 87,
            "return": [
                "bool",
                "str",
                "datetime.date.time",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "year": [
                    "int",
                    "Iterable[int]",
                    "Tuple[float]",
                    "datetime.datetime"
                ],
                "month": [
                    "int",
                    "Iterable[int]",
                    "Tuple[float]",
                    "datetime.datetime"
                ]
            }
        },
        "TestDateOutOfBoundsMethod.test_date_out_of_bounds_should_return_true_if_selected_date_is_inside_the_defined_scope": {
            "name": "test_date_out_of_bounds_should_return_true_if_selected_date_is_inside_the_defined_scope",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "year": [
                    "datetime.date.time",
                    "int",
                    "mode.utils.types.trees.NodeT",
                    "bytes",
                    "raiden.utils.ChannelID",
                    "raiden.utils.Address"
                ],
                "month": [
                    "datetime.date.time",
                    "int",
                    "mode.utils.types.trees.NodeT",
                    "bytes",
                    "raiden.utils.ChannelID",
                    "raiden.utils.Address"
                ]
            }
        },
        "TestDateOutOfBoundsMethod.test_date_out_of_bounds_should_return_false_if_selected_date_is_outside_of_defined_scope": {
            "name": "test_date_out_of_bounds_should_return_false_if_selected_date_is_outside_of_defined_scope",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "year": [
                    "int",
                    "str",
                    "bytes"
                ],
                "month": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "MonthNavigationMixinContextDataTests.setUp": {
            "name": "setUp",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MonthNavigationMixinContextDataTests._get_month_navigation_context_data": {
            "name": "_get_month_navigation_context_data",
            "location": 107,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "year": [
                    "dict",
                    "Dict[str, object]",
                    "Dict[str, Any]"
                ],
                "month": [
                    "dict",
                    "Dict[str, object]",
                    "Dict[str, Any]"
                ],
                "pk": [
                    "dict",
                    "Dict[str, object]",
                    "Dict[str, Any]"
                ]
            }
        },
        "MonthNavigationMixinContextDataTests._render_month_navigation_bar": {
            "name": "_render_month_navigation_bar",
            "location": 115,
            "return": [
                "str",
                "bool",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "year": [
                    "int",
                    "str",
                    "bool"
                ],
                "month": [
                    "int",
                    "str",
                    "bool"
                ],
                "pk": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "MonthNavigationMixinContextDataTests._render_month_navigation_bar_with_form": {
            "name": "_render_month_navigation_bar_with_form",
            "location": 120,
            "return": [
                "str",
                "bool",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "year": [
                    "int",
                    "str",
                    "bool"
                ],
                "month": [
                    "int",
                    "str",
                    "bool"
                ],
                "pk": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "MonthNavigationMixinContextDataTests.test_month_navigator_get_context_data_method_should_return_all_data_necessary_for_month_navigator_template": {
            "name": "test_month_navigator_get_context_data_method_should_return_all_data_necessary_for_month_navigator_template",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MonthNavigationMixinContextDataTests.test_month_navigator_should_render_html_with_links_to_other_months_for_given_url": {
            "name": "test_month_navigator_should_render_html_with_links_to_other_months_for_given_url",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MonthNavigationMixinContextDataTests.test_month_navigator_should_not_render_html_with_link_to_next_month_if_upper_limit_is_met": {
            "name": "test_month_navigator_should_not_render_html_with_link_to_next_month_if_upper_limit_is_met",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MonthNavigationMixinContextDataTests.test_month_navigator_should_not_render_html_with_link_to_previous_month_if_lower_limit_is_met": {
            "name": "test_month_navigator_should_not_render_html_with_link_to_previous_month_if_lower_limit_is_met",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MonthNavigationMixinContextDataTests.test_month_navigator_should_render_html_with_month_navigation_form_related_to_post_method_under_request_path": {
            "name": "test_month_navigator_should_render_html_with_month_navigation_form_related_to_post_method_under_request_path",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MonthNavigationMixinContextDataTests.test_redirect_to_another_month_method_should_redirect_to_link_with_provided_date": {
            "name": "test_redirect_to_another_month_method_should_redirect_to_link_with_provided_date",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MonthNavigationMixinContextDataTests.test_redirect_to_another_month_method_should_redirect_to_current_month_when_date_is_malformed": {
            "name": "test_redirect_to_another_month_method_should_redirect_to_current_month_when_date_is_malformed",
            "location": 210,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MonthNavigationMixinContextDataTests.test_redirect_to_another_month_method_shoredirect_tould_redirect_to_request_path_if_provided_date_is_out_of_bonds": {
            "name": "test_redirect_to_another_month_method_shoredirect_tould_redirect_to_request_path_if_provided_date_is_out_of_bonds",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MonthNavigationMixinContextDataTests.test_redirect_to_current_month_method_should_redirect_to_current_month_section": {
            "name": "test_redirect_to_current_month_method_should_redirect_to_current_month_section",
            "location": 235,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sheetstorm-master/employees/tests/test_unit_export_data.py": {
        "DataSetUpToTests.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportViewTest.test_export_reports_should_download_for_single_user_if_he_is_logged": {
            "name": "test_export_reports_should_download_for_single_user_if_he_is_logged",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportViewTest.test_export_reports_should_not_download_data_if_he_is_not_logged": {
            "name": "test_export_reports_should_not_download_data_if_he_is_not_logged",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportViewTest.test_export_reports_for_project_should_download_if_user_is_logged": {
            "name": "test_export_reports_for_project_should_download_if_user_is_logged",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportViewTest.test_export_reports_for_project_should_not_download_if_user_is_not_logged": {
            "name": "test_export_reports_for_project_should_not_download_if_user_is_not_logged",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportViewTest.test_export_reports_should_download_for_single_user_csv": {
            "name": "test_export_reports_should_download_for_single_user_csv",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportViewTest.test_export_reports_for_project_should_download_csv": {
            "name": "test_export_reports_for_project_should_download_csv",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportViewTest.test_export_reports_for_project_author_reports_should_download_if_user_is_manager_of_current_project": {
            "name": "test_export_reports_for_project_author_reports_should_download_if_user_is_manager_of_current_project",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportViewTest.test_export_reports_for_project_author_reports_should_download_csv": {
            "name": "test_export_reports_for_project_author_reports_should_download_csv",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportViewTest.test_export_reports_for_project_author_reports_should_download_xlsx_if_user_is_not_a_manager_of_current_project": {
            "name": "test_export_reports_for_project_author_reports_should_download_xlsx_if_user_is_not_a_manager_of_current_project",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportViewTest.test_export_reports_for_project_author_reports_should_download_csv_if_user_is_not_a_manager_of_current_project": {
            "name": "test_export_reports_for_project_author_reports_should_download_csv_if_user_is_not_a_manager_of_current_project",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportMethodTestForProject.test_sheetnames_should_have_name_and_first_letter_of_surname_and_one_sheet": {
            "name": "test_sheetnames_should_have_name_and_first_letter_of_surname_and_one_sheet",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportMethodTestForProject.test_date_should_be_the_same_in_excel": {
            "name": "test_date_should_be_the_same_in_excel",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportMethodTestForProject.test_task_activity_should_be_the_same_in_excel": {
            "name": "test_task_activity_should_be_the_same_in_excel",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportMethodTestForProject.test_hours_should_be_the_same_in_excel": {
            "name": "test_hours_should_be_the_same_in_excel",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportMethodTestForProject.test_description_should_be_the_same_in_excel": {
            "name": "test_description_should_be_the_same_in_excel",
            "location": 204,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportMethodTestForProject.test_description_should_be_exported_without_illegal_characters": {
            "name": "test_description_should_be_exported_without_illegal_characters",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportMethodTestForProject._hours_date_time_to_excel_time_field": {
            "name": "_hours_date_time_to_excel_time_field",
            "location": 230,
            "return": [
                "str"
            ],
            "arguments": {
                "hours_delta": [
                    "str",
                    "int",
                    "float",
                    "Iterable"
                ]
            }
        },
        "ExportMethodTestForSingleUser.test_sheetnames_should_have_name_and_first_letter_of_surname_and_one_sheet": {
            "name": "test_sheetnames_should_have_name_and_first_letter_of_surname_and_one_sheet",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportMethodTestForSingleUser.test_date_should_be_the_same_in_excel": {
            "name": "test_date_should_be_the_same_in_excel",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportMethodTestForSingleUser.test_project_name_should_be_the_same_in_excel": {
            "name": "test_project_name_should_be_the_same_in_excel",
            "location": 255,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportMethodTestForSingleUser.test_task_activity_should_be_the_same_in_excel": {
            "name": "test_task_activity_should_be_the_same_in_excel",
            "location": 268,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportMethodTestForSingleUser.test_hours_should_be_the_same_in_excel": {
            "name": "test_hours_should_be_the_same_in_excel",
            "location": 279,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ExportMethodTestForSingleUser.test_description_should_be_the_same_in_excel": {
            "name": "test_description_should_be_the_same_in_excel",
            "location": 290,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SaveWorkBookAsCSVTesCase.setUp": {
            "name": "setUp",
            "location": 303,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SaveWorkBookAsCSVTesCase.test_employee_name_should_be_the_same_in_excel": {
            "name": "test_employee_name_should_be_the_same_in_excel",
            "location": 314,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SaveWorkBookAsCSVTesCase.test_date_should_be_the_same_in_excel": {
            "name": "test_date_should_be_the_same_in_excel",
            "location": 318,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SaveWorkBookAsCSVTesCase.test_project_name_should_be_the_same_in_excel": {
            "name": "test_project_name_should_be_the_same_in_excel",
            "location": 331,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SaveWorkBookAsCSVTesCase.test_task_activity_should_be_the_same_in_excel": {
            "name": "test_task_activity_should_be_the_same_in_excel",
            "location": 344,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SaveWorkBookAsCSVTesCase.test_hours_should_be_the_same_in_excel": {
            "name": "test_hours_should_be_the_same_in_excel",
            "location": 357,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SaveWorkBookAsCSVTesCase.test_description_should_be_the_same_in_excel": {
            "name": "test_description_should_be_the_same_in_excel",
            "location": 370,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExportingFunctions.setUp": {
            "name": "setUp",
            "location": 383,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExportingFunctions.test_unsorted_reports_will_be_sorted_asc_by_first_name_and_asc_by_date_in_project_export": {
            "name": "test_unsorted_reports_will_be_sorted_asc_by_first_name_and_asc_by_date_in_project_export",
            "location": 406,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExportingFunctions.test_project_members_with_no_report_will_be_skipped_in_project_export": {
            "name": "test_project_members_with_no_report_will_be_skipped_in_project_export",
            "location": 414,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExportingFunctions.test_unsorted_reports_will_be_sorted_asc_by_date_in_user_export": {
            "name": "test_unsorted_reports_will_be_sorted_asc_by_date_in_user_export",
            "location": 421,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExportingFunctions._assert_reports_are_sorted_in_ascending_order": {
            "name": "_assert_reports_are_sorted_in_ascending_order",
            "location": 426,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "workbook": [
                    "list",
                    "ajapaik.ajapaik_face_recognition.models.FaceRecognitionRectangle",
                    "str",
                    "int"
                ]
            }
        },
        "TestExportingFunctions._assert_dates_are_unique_in_reports_of_user": {
            "name": "_assert_dates_are_unique_in_reports_of_user",
            "location": 438,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "workbook": [
                    "str",
                    "int",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "TestExportingFunctions.test_user_can_export_only_his_own_reports": {
            "name": "test_user_can_export_only_his_own_reports",
            "location": 450,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sheetstorm-master/employees/tests/test_unit_report_model.py": {
        "DataSetUpToTests.setUp": {
            "name": "setUp",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReportModel.test_report_model_save_date_field_should_accept_correct_input": {
            "name": "test_report_model_save_date_field_should_accept_correct_input",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReportModel.test_report_model_description_field_should_accept_correct_input": {
            "name": "test_report_model_description_field_should_accept_correct_input",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReportModel.test_report_model_creation_date_field_should_be_filled_on_save": {
            "name": "test_report_model_creation_date_field_should_be_filled_on_save",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReportModel.test_report_model_last_update_field_should_be_filled_on_save": {
            "name": "test_report_model_last_update_field_should_be_filled_on_save",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReportModel.test_report_model_author_field_should_accept_correct_input": {
            "name": "test_report_model_author_field_should_accept_correct_input",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReportModel.test_report_model_project_field_should_accept_correct_input": {
            "name": "test_report_model_project_field_should_accept_correct_input",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReportModel.test_report_model_work_hours_field_should_accept_correct_input": {
            "name": "test_report_model_work_hours_field_should_accept_correct_input",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReportModel.test_report_model_editable_field_should_have_default_value": {
            "name": "test_report_model_editable_field_should_have_default_value",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReportModel.test_report_model_last_update_field_should_be_changed_on_update": {
            "name": "test_report_model_last_update_field_should_be_changed_on_update",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReportDataParameterFails.test_report_model_date_field_should_not_be_empty": {
            "name": "test_report_model_date_field_should_not_be_empty",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReportDataParameterFails.test_report_model_date_field_should_not_accept_non_date_value": {
            "name": "test_report_model_date_field_should_not_accept_non_date_value",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReportDescriptionParameterFails.test_report_model_description_field_should_not_be_empty": {
            "name": "test_report_model_description_field_should_not_be_empty",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReportProjectParameterFails.test_report_model_project_field_should_not_accept_non_model_value": {
            "name": "test_report_model_project_field_should_not_accept_non_model_value",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReportProjectParameterFails.test_report_model_work_project_field_should_not_be_empty": {
            "name": "test_report_model_work_project_field_should_not_be_empty",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReportAuthorParameterFails.test_report_model_author_field_should_not_accept_non_model_value": {
            "name": "test_report_model_author_field_should_not_accept_non_model_value",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReportAuthorParameterFails.test_report_model_author_field_should_not_be_empty": {
            "name": "test_report_model_author_field_should_not_be_empty",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReportWorkHoursParameter.test_report_model_work_hours_field_should_not_accept_non_numeric_value": {
            "name": "test_report_model_work_hours_field_should_not_accept_non_numeric_value",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReportWorkHoursParameter.test_report_model_work_hours_field_should_not_be_empty": {
            "name": "test_report_model_work_hours_field_should_not_be_empty",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReportWorkHoursParameter.test_report_model_work_hours_field_should_not_accept_value_exceeding_set_maximum": {
            "name": "test_report_model_work_hours_field_should_not_accept_value_exceeding_set_maximum",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReportWorkHoursParameter.test_report_model_work_hours_field_should_not_accept_value_exceeding_set_minimum": {
            "name": "test_report_model_work_hours_field_should_not_accept_value_exceeding_set_minimum",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReportWorkHoursParameter.test_report_model_work_hours_field_should_not_accept_value_which_is_not_divisible_by_15": {
            "name": "test_report_model_work_hours_field_should_not_accept_value_which_is_not_divisible_by_15",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "minutes": [
                    "datetime.date.time",
                    "raiden.utils.Address",
                    "raiden.utils.ChannelID",
                    "raiden.utils.Signature"
                ]
            }
        },
        "TestReportWorkHoursParameter.test_report_model_work_hours_field_should_accept_value_which_is_divisible_by_15": {
            "name": "test_report_model_work_hours_field_should_accept_value_which_is_divisible_by_15",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "minutes": [
                    "int",
                    "datetime.date.time",
                    "raiden.utils.ChannelID"
                ]
            }
        },
        "InitTaskTypeTestCase.setUp": {
            "name": "setUp",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReportQuerySetWorkHoursSumForAllDates.setUp": {
            "name": "setUp",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReportQuerySetWorkHoursSumForAllDates.test_get_work_hours_sum_for_all_dates_should_return_dict_with_sum_total_of_work_hours_for_each_day": {
            "name": "test_get_work_hours_sum_for_all_dates_should_return_dict_with_sum_total_of_work_hours_for_each_day",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReportWorkHoursSumForGivenDayForSingleUser.test_work_hours_sum_for_given_day_for_single_user_can_be_24": {
            "name": "test_work_hours_sum_for_given_day_for_single_user_can_be_24",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReportWorkHoursSumForGivenDayForSingleUser.test_work_hours_sum_for_given_day_for_single_user_should_not_exceed_24": {
            "name": "test_work_hours_sum_for_given_day_for_single_user_should_not_exceed_24",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReportWorkHoursSumForGivenDayForSingleUser.test_editing_report_work_hours_sum_for_given_day_for_single_user_should_not_exceed_24": {
            "name": "test_editing_report_work_hours_sum_for_given_day_for_single_user_should_not_exceed_24",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReportWorkHoursSumForGivenDayForSingleUser.test_edited_report_would_not_be_summed_twice_for_work_hours_sum": {
            "name": "test_edited_report_would_not_be_summed_twice_for_work_hours_sum",
            "location": 227,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReportQuerySetWorkHoursSumForAllAuthors.setUp": {
            "name": "setUp",
            "location": 240,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReportQuerySetWorkHoursSumForAllAuthors.test_monthly_hours_sum_should_return_dict_with_sum_total_of_all_work_hours_for_each_author": {
            "name": "test_monthly_hours_sum_should_return_dict_with_sum_total_of_all_work_hours_for_each_author",
            "location": 248,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReportTaskActivitiesParameter.test_report_model_should_accept_correct_input": {
            "name": "test_report_model_should_accept_correct_input",
            "location": 255,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReportTaskActivitiesParameter.test_report_model_should_not_accept_incorrect_input": {
            "name": "test_report_model_should_not_accept_incorrect_input",
            "location": 258,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReportTaskActivitiesParameter.test_report_model_should_be_create_with_default_value": {
            "name": "test_report_model_should_be_create_with_default_value",
            "location": 262,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReportTaskActivitiesParameter.test_added_task_activity_must_be_accepted_as_correct_input": {
            "name": "test_added_task_activity_must_be_accepted_as_correct_input",
            "location": 266,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetProjectOrderedByLastReportCreationDate.setUp": {
            "name": "setUp",
            "location": 273,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetProjectOrderedByLastReportCreationDate.test_get_project_ordered_by_last_report_creation_date_should_return_projects_ordered_by_last_report_creation_date_desc": {
            "name": "test_get_project_ordered_by_last_report_creation_date_should_return_projects_ordered_by_last_report_creation_date_desc",
            "location": 291,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetProjectOrderedByLastReportCreationDate.test_get_project_ordered_by_last_report_creation_date_should_not_include_other_users_reports": {
            "name": "test_get_project_ordered_by_last_report_creation_date_should_not_include_other_users_reports",
            "location": 297,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetProjectOrderedByLastReportCreationDate.test_get_project_ordered_by_last_report_creation_date_should_put_projects_without_report_at_the_end": {
            "name": "test_get_project_ordered_by_last_report_creation_date_should_put_projects_without_report_at_the_end",
            "location": 303,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sheetstorm-master/employees/tests/test_unit_templatetags.py": {
        "test_timedelta_to_string": {
            "name": "test_timedelta_to_string",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "input_": [
                    "str"
                ],
                "expected_output": [
                    "str"
                ]
            }
        },
        "test_annotate_no_follow_link_with_css_class": {
            "name": "test_annotate_no_follow_link_with_css_class",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "input_": [
                    "str",
                    "IO",
                    "Union[str, int]",
                    "Optional[str]"
                ],
                "output_format": [
                    "str"
                ]
            }
        },
        "GetKeyValueTests.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GetKeyValueTests.test_get_key_value_function_should_return_an_element_of_given_dict_at_given_key": {
            "name": "test_get_key_value_function_should_return_an_element_of_given_dict_at_given_key",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GetKeyValueTests.test_get_key_value_function_should_return_empty_string_on_incorrect_key": {
            "name": "test_get_key_value_function_should_return_empty_string_on_incorrect_key",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DurationHoursTests.test_duration_field_to_string_should_parse_duration_to_string": {
            "name": "test_duration_field_to_string_should_parse_duration_to_string",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConvertToMonthName.test_function_convert_correctly_numbers_to_months_names": {
            "name": "test_function_convert_correctly_numbers_to_months_names",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "month_number": [],
                "month": []
            }
        },
        "TestConvertToMonthName.test_function_raise_value_error_if_value_is_not_a_string_number": {
            "name": "test_function_raise_value_error_if_value_is_not_a_string_number",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConvertToMonthName.test_function_raise_index_error_if_value_is_out_of_range": {
            "name": "test_function_raise_index_error_if_value_is_out_of_range",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sheetstorm-master/employees/tests/__init__.py": {},
    "sheetstorm-master/features/environment.py": {
        "before_scenario": {
            "name": "before_scenario",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "int",
                    "Callable",
                    "str"
                ],
                "_scenario": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "sheetstorm-master/features/fixtures.py": {
        "selenium_browser": {
            "name": "selenium_browser",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "int",
                    "Callable",
                    "dict"
                ]
            }
        },
        "get_chrome_browser": {
            "name": "get_chrome_browser",
            "location": 13,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {}
        }
    },
    "sheetstorm-master/features/__init__.py": {},
    "sheetstorm-master/features/steps/helpers.py": {
        "sign_in": {
            "name": "sign_in",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "Dict[str, str]"
                ],
                "login": [
                    "Optional[bool]",
                    "rotkehlchen.db.settings.ModifiableDBSettings"
                ],
                "browser": [
                    "Optional[Dict]",
                    "Optional[str]",
                    "int",
                    "negmas.common.AgentMechanismInterface"
                ]
            }
        },
        "cautious_click": {
            "name": "cautious_click",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "browser": [
                    "int",
                    "float"
                ],
                "xpath": [
                    "int",
                    "float"
                ],
                "iterations": [
                    "int",
                    "float"
                ],
                "timeout": [
                    "int",
                    "float"
                ]
            }
        },
        "cautious_send_keys": {
            "name": "cautious_send_keys",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "browser": [
                    "bool",
                    "Optional[Collection[Any]]",
                    "float"
                ],
                "xpath": [
                    "bool",
                    "Optional[Collection[Any]]",
                    "float"
                ],
                "sequence": [
                    "bool",
                    "Optional[Collection[Any]]",
                    "float"
                ],
                "iterations": [
                    "bool",
                    "Optional[Collection[Any]]",
                    "float"
                ],
                "timeout": [
                    "bool",
                    "Optional[Collection[Any]]",
                    "float"
                ]
            }
        },
        "cautious_action": {
            "name": "cautious_action",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "browser": [
                    "bool",
                    "Dict[str, str]",
                    "str",
                    "Any"
                ],
                "xpath": [
                    "bool",
                    "Dict[str, str]",
                    "str",
                    "Any"
                ],
                "action": [
                    "bool",
                    "List[Type]",
                    "Optional[List[Type]]",
                    "OrderedDict"
                ],
                "expected_exception": [
                    "bool",
                    "int"
                ]
            }
        }
    },
    "sheetstorm-master/features/steps/user_initialisation_steps.py": {
        "step_impl": {
            "name": "step_impl",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "str"
                ],
                "page_name": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "sheetstorm-master/features/steps/__init__.py": {},
    "sheetstorm-master/managers/admin.py": {},
    "sheetstorm-master/managers/apps.py": {},
    "sheetstorm-master/managers/factories.py": {},
    "sheetstorm-master/managers/forms.py": {
        "ActivityWidget.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectAdminForm.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectAdminForm.save": {
            "name": "save",
            "location": 50,
            "return": [
                "str",
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "commit": [
                    "bool",
                    "dict",
                    "str",
                    "Tuple[Tuple[str, ...]]"
                ]
            }
        },
        "ProjectManagerForm.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectManagerForm.save": {
            "name": "save",
            "location": 67,
            "return": [
                "str",
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "commit": [
                    "bool",
                    "dict",
                    "str",
                    "Tuple[Tuple[str, ...]]"
                ]
            }
        }
    },
    "sheetstorm-master/managers/models.py": {
        "update_user_type": {
            "name": "update_user_type",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [
                    "str"
                ],
                "action": [
                    "str",
                    "bool",
                    "List[Dict[str, int]]"
                ],
                "pk_set": [
                    "set",
                    "bool",
                    "str",
                    "Optional[bool]"
                ]
            }
        },
        "change_user_type_to_manager": {
            "name": "change_user_type_to_manager",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "project": [
                    "NamedTuple",
                    "Dict[str, Any]"
                ]
            }
        },
        "change_user_type_to_employee": {
            "name": "change_user_type_to_employee",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "pk_set": [
                    "set",
                    "dict",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "change_suspended_if_project_has_stop_date": {
            "name": "change_suspended_if_project_has_stop_date",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [
                    "str",
                    "bool"
                ]
            }
        },
        "ProjectQuerySet.filter_suspended": {
            "name": "filter_suspended",
            "location": 26,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[List[Any]]",
                "List[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectQuerySet.filter_active": {
            "name": "filter_active",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProjectQuerySet.filter_completed": {
            "name": "filter_completed",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectQuerySet.get_with_prefetched_reports": {
            "name": "get_with_prefetched_reports",
            "location": 35,
            "return": [
                "str",
                "dict",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": [],
                "reports": [
                    "str",
                    "bool"
                ]
            }
        },
        "Project.__str__": {
            "name": "__str__",
            "location": 50,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.get_report_ordered": {
            "name": "get_report_ordered",
            "location": 53,
            "return": [
                "str",
                "int",
                "django.db.models.query.QuerySet",
                "raiden.utils.TokenAmount",
                "raiden.utils.BlockNumber"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.clean": {
            "name": "clean",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sheetstorm-master/managers/urls.py": {},
    "sheetstorm-master/managers/views.py": {
        "ProjectsListView.get_queryset": {
            "name": "get_queryset",
            "location": 57,
            "return": [
                "bool",
                "str",
                "tracim.models.data.Content",
                "int",
                "List[annofabapi.models.ProjectMember]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectDetailView.get_context_data": {
            "name": "get_context_data",
            "location": 83,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectCreateView.get_form_kwargs": {
            "name": "get_form_kwargs",
            "location": 98,
            "return": [
                "dict",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectCreateView.get_context_data": {
            "name": "get_context_data",
            "location": 103,
            "return": [
                "dict",
                "str",
                "IO[bytes]",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectCreateView.get_success_url": {
            "name": "get_success_url",
            "location": 109,
            "return": [
                "str",
                "bytes",
                "Dict[str, cmk.gui.plugins.views.utils.Painter]",
                "bool",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectCreateView.form_valid": {
            "name": "form_valid",
            "location": 112,
            "return": [
                "int",
                "str",
                "Optional[cmk.utils.type_defs.HostAddress]",
                "tuple",
                "dict"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "Dict[str, Any]",
                    "models.data_frames.data_frame.GUIInterface",
                    "int",
                    "Optional[Union[Any, Any]]"
                ]
            }
        },
        "ProjectUpdateView.get_context_data": {
            "name": "get_context_data",
            "location": 135,
            "return": [
                "dict",
                "str",
                "IO[bytes]",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectUpdateView.get_success_url": {
            "name": "get_success_url",
            "location": 141,
            "return": [
                "Union[str, IO]",
                "str",
                "IO[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectUpdateView.get_form_class": {
            "name": "get_form_class",
            "location": 147,
            "return": [
                "str",
                "List[str]",
                "Callable[..., str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectUpdateView.form_valid": {
            "name": "form_valid",
            "location": 152,
            "return": [
                "int",
                "str",
                "Optional[cmk.utils.type_defs.HostAddress]",
                "tuple",
                "dict"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "Dict[str, Any]",
                    "cmk.utils.type_defs.ServiceName",
                    "str",
                    "qutebrowser.utils.usertypes.Backend",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "ProjectDeleteView.get_success_url": {
            "name": "get_success_url",
            "location": 163,
            "return": [
                "str",
                "bytes",
                "Dict[str, cmk.gui.plugins.views.utils.Painter]",
                "bool",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectDeleteView.delete": {
            "name": "delete",
            "location": 166,
            "return": [
                "str",
                "int",
                "Dict[str, str]",
                "Exception",
                "tartare.core.models.Job",
                "games.models.Game",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "http.MITMRequest"
                ]
            }
        },
        "ManageTaskActivitiesView.get_context_data": {
            "name": "get_context_data",
            "location": 182,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ManageTaskActivitiesView.get_success_url": {
            "name": "get_success_url",
            "location": 187,
            "return": [
                "str",
                "bytes",
                "List[str]",
                "app.models.Tweet",
                "app.models.Position",
                "medtagger.database.models.Slice"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoveTaskActivityView.post": {
            "name": "post",
            "location": 200,
            "return": [
                "List[Dict[str, Any]]",
                "int",
                "float",
                "bool",
                "Dict[int, dict]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "sheetstorm-master/managers/__init__.py": {},
    "sheetstorm-master/managers/commons/constants.py": {},
    "sheetstorm-master/managers/commons/__init__.py": {},
    "sheetstorm-master/managers/migrations/0001_initial.py": {},
    "sheetstorm-master/managers/migrations/0002_auto_20190730_1515.py": {},
    "sheetstorm-master/managers/migrations/0003_project_is_notification_enabled.py": {},
    "sheetstorm-master/managers/migrations/__init__.py": {},
    "sheetstorm-master/managers/templates/managers/partials/__init__.py": {},
    "sheetstorm-master/managers/tests/test_unit_model.py": {
        "TestProjectModel.test_project_should_have_start_date": {
            "name": "test_project_should_have_start_date",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectModel.test_project_name_should_not_be_blank": {
            "name": "test_project_name_should_not_be_blank",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectModel.test_project_name_should_not_be_longer_than_set_max_length": {
            "name": "test_project_name_should_not_be_longer_than_set_max_length",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectModel.test_project_name_should_be_shorter_than_or_equal_set_max_length": {
            "name": "test_project_name_should_be_shorter_than_or_equal_set_max_length",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectModelField.setUp": {
            "name": "setUp",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectModelField.test_project_model_name_field_should_accept_correct_input": {
            "name": "test_project_model_name_field_should_accept_correct_input",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectModelField.test_project_model_name_field_may_not_be_empty": {
            "name": "test_project_model_name_field_may_not_be_empty",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectModelField.test_project_model_name_field_should_not_accept_string_longer_than_set_limit": {
            "name": "test_project_model_name_field_should_not_accept_string_longer_than_set_limit",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectModelField.test_project_model_start_date_field_should_accept_correct_input": {
            "name": "test_project_model_start_date_field_should_accept_correct_input",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectModelField.test_project_model_start_date_field_may_not_be_empty": {
            "name": "test_project_model_start_date_field_may_not_be_empty",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectModelField.test_project_model_start_date_field_should_not_accept_non_date_or_datetime_value": {
            "name": "test_project_model_start_date_field_should_not_accept_non_date_or_datetime_value",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectModelField.test_project_model_stop_date_field_should_accept_correct_input": {
            "name": "test_project_model_stop_date_field_should_accept_correct_input",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectModelField.test_project_model_stop_date_field_may_be_empty": {
            "name": "test_project_model_stop_date_field_may_be_empty",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectModelField.test_project_model_suspended_field_should_accept_correct_input": {
            "name": "test_project_model_suspended_field_should_accept_correct_input",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectModelField.test_project_model_suspended_field_should_have_default_value": {
            "name": "test_project_model_suspended_field_should_have_default_value",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectModelField.test_project_model_managers_field_should_accept_correct_input": {
            "name": "test_project_model_managers_field_should_accept_correct_input",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectModelField.test_project_model_members_field_should_accept_correct_input": {
            "name": "test_project_model_members_field_should_accept_correct_input",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectModelField.test_project_model_end_date_should_not_be_before_start_day": {
            "name": "test_project_model_end_date_should_not_be_before_start_day",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQuerySet.setUp": {
            "name": "setUp",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQuerySet.test_filter_active_projects_should_return_project_with_dates": {
            "name": "test_filter_active_projects_should_return_project_with_dates",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "date": [
                    "str",
                    "int",
                    "datetime.datetime"
                ]
            }
        },
        "TestProjectQuerySet.test_filter_active_projects_should_not_return_project_with_stop_date_less_than_current_date": {
            "name": "test_filter_active_projects_should_not_return_project_with_stop_date_less_than_current_date",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectQuerySet.test_filter_completed_projects_should_return_all_projects_with_stop_date_less_than_current_date": {
            "name": "test_filter_completed_projects_should_return_all_projects_with_stop_date_less_than_current_date",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoveUserFromProjectTests.setUp": {
            "name": "setUp",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoveUserFromProjectTests.test_that_removing_user_from_project_should_not_delete_user_reports_made_for_project": {
            "name": "test_that_removing_user_from_project_should_not_delete_user_reports_made_for_project",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoveUserFromProjectTests._generate_user_reports": {
            "name": "_generate_user_reports",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoveUserFromProjectTests._check_number_of_reports": {
            "name": "_check_number_of_reports",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user_reports": [
                    "domain.common.RecordList",
                    "raiden.utils.Dict",
                    "users.models.JustfixUser",
                    "dict"
                ]
            }
        }
    },
    "sheetstorm-master/managers/tests/test_unit_project_signals.py": {
        "TestProjectSignals.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectSignals.test_user_should_be_updated_to_manager_when_he_is_assigned_as_a_project_manager": {
            "name": "test_user_should_be_updated_to_manager_when_he_is_assigned_as_a_project_manager",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectSignals.test_user_should_be_updated_to_employee_when_he_is_no_longer_manager_of_any_project": {
            "name": "test_user_should_be_updated_to_employee_when_he_is_no_longer_manager_of_any_project",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectSignals.test_admin_should_not_be_updated_to_manager_when_he_is_assigne_as_a_project_manager": {
            "name": "test_admin_should_not_be_updated_to_manager_when_he_is_assigne_as_a_project_manager",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectSignals.test_admin_should_not_be_updated_to_employee_when_he_is_no_longer_manager_of_any_project": {
            "name": "test_admin_should_not_be_updated_to_employee_when_he_is_no_longer_manager_of_any_project",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectSignals.test_project_should_not_be_suspended_when_project_is_completed": {
            "name": "test_project_should_not_be_suspended_when_project_is_completed",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjectSignals.test_project_could_be_suspended_when_stop_date_is_null": {
            "name": "test_project_could_be_suspended_when_stop_date_is_null",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sheetstorm-master/managers/tests/test_views.py": {
        "ProjectBaseTests.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectDetailViewTests.setUp": {
            "name": "setUp",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectDetailViewTests.test_project_detail_view_should_display_project_details_on_get": {
            "name": "test_project_detail_view_should_display_project_details_on_get",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsListViewTests.setUp": {
            "name": "setUp",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsListViewTests.test_projects_list_view_for_admin_should_show_all_projects": {
            "name": "test_projects_list_view_for_admin_should_show_all_projects",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsListViewTests.test_projects_list_view_for_manager_should_show_only_projects_in_which_he_is_manager": {
            "name": "test_projects_list_view_for_manager_should_show_only_projects_in_which_he_is_manager",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsListViewTests.test_projects_list_view_should_not_be_accessible_by_employee": {
            "name": "test_projects_list_view_should_not_be_accessible_by_employee",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsListOrderingViewTests.setUp": {
            "name": "setUp",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsListOrderingViewTests.test_project_list_view_should_display_projects_sorted_by_name_ascending": {
            "name": "test_project_list_view_should_display_projects_sorted_by_name_ascending",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsListOrderingViewTests.test_project_list_view_should_display_projects_sorted_by_name_descending": {
            "name": "test_project_list_view_should_display_projects_sorted_by_name_descending",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsListOrderingViewTests.test_project_list_view_should_display_projects_sorted_by_start_date_ascending": {
            "name": "test_project_list_view_should_display_projects_sorted_by_start_date_ascending",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsListOrderingViewTests.test_project_list_view_should_display_projects_sorted_by_start_date_descending": {
            "name": "test_project_list_view_should_display_projects_sorted_by_start_date_descending",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsListOrderingViewTests.test_project_list_view_should_display_projects_sorted_by_stop_date_ascending": {
            "name": "test_project_list_view_should_display_projects_sorted_by_stop_date_ascending",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsListOrderingViewTests.test_project_list_view_should_display_projects_sorted_by_stop_date_descending": {
            "name": "test_project_list_view_should_display_projects_sorted_by_stop_date_descending",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsListOrderingViewTests.test_project_list_view_should_display_projects_sorted_by_members_count_ascending": {
            "name": "test_project_list_view_should_display_projects_sorted_by_members_count_ascending",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsListOrderingViewTests.test_project_list_view_should_display_projects_sorted_by_members_count_descending": {
            "name": "test_project_list_view_should_display_projects_sorted_by_members_count_descending",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectCreateViewTests.setUp": {
            "name": "setUp",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectCreateViewTests.test_project_create_view_should_display_create_project_form_on_get": {
            "name": "test_project_create_view_should_display_create_project_form_on_get",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectCreateViewTests.test_project_create_view_should_exclude_inactive_users_from_members_field": {
            "name": "test_project_create_view_should_exclude_inactive_users_from_members_field",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectCreateViewTests.test_project_create_view_should_add_new_project_on_post_and_add_user_of_request_to_managers": {
            "name": "test_project_create_view_should_add_new_project_on_post_and_add_user_of_request_to_managers",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectCreateViewTests.test_project_create_view_should_not_add_new_project_on_post_if_data_is_invalid": {
            "name": "test_project_create_view_should_not_add_new_project_on_post_if_data_is_invalid",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectUpdateViewTestCase.setUp": {
            "name": "setUp",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectUpdateViewTestCase.test_project_update_view_should_display_update_template": {
            "name": "test_project_update_view_should_display_update_template",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectUpdateViewTestCase.test_project_update_view_should_return_404_status_code_on_get_if_project_does_not_exist": {
            "name": "test_project_update_view_should_return_404_status_code_on_get_if_project_does_not_exist",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectUpdateViewTestCase.test_project_create_view_should_exclude_inactive_users_from_members_field": {
            "name": "test_project_create_view_should_exclude_inactive_users_from_members_field",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectUpdateViewTestCase.test_project_update_view_should_update_project_on_post": {
            "name": "test_project_update_view_should_update_project_on_post",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectUpdateViewTestCase.test_project_update_view_should_update_project_on_post_if_data_is_invalid": {
            "name": "test_project_update_view_should_update_project_on_post_if_data_is_invalid",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectUpdateViewTestCase.test_project_update_view_should_not_update_managers_if_user_is_manager": {
            "name": "test_project_update_view_should_not_update_managers_if_user_is_manager",
            "location": 216,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectUpdateViewTestCase.test_project_update_view_should_display_all_aggregated_managers_on_get": {
            "name": "test_project_update_view_should_display_all_aggregated_managers_on_get",
            "location": 226,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectDeleteViewTests.setUp": {
            "name": "setUp",
            "location": 240,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectDeleteViewTests.test_delete_project_function_view_should_delete_project_on_admin_type_user_post": {
            "name": "test_delete_project_function_view_should_delete_project_on_admin_type_user_post",
            "location": 245,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectDeleteViewTests.test_delete_project_function_view_should_not_delete_project_on_non_admin_request": {
            "name": "test_delete_project_function_view_should_not_delete_project_on_non_admin_request",
            "location": 251,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user_type": [
                    "str",
                    "bool",
                    "Optional[List[cmk.gui.plugins.views.utils.Sorter.Spec]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ManageTaskActivitiesViewTests.setUp": {
            "name": "setUp",
            "location": 260,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManageTaskActivitiesViewTests.test_manage_task_activities_view_should_return_200_status_code_when_user_is_manager_or_admin": {
            "name": "test_manage_task_activities_view_should_return_200_status_code_when_user_is_manager_or_admin",
            "location": 268,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManageTaskActivitiesViewTests.test_manage_task_activities_should_redirect_on_employee_get": {
            "name": "test_manage_task_activities_should_redirect_on_employee_get",
            "location": 280,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManageTaskActivitiesViewTests.test_manage_task_activities_view_should_add_new_task_activity_on_post_and_it_should_be_active": {
            "name": "test_manage_task_activities_view_should_add_new_task_activity_on_post_and_it_should_be_active",
            "location": 288,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManageTaskActivitiesViewTests.test_manage_task_activities_view_should_not_allow_to_create_two_tasks_with_the_same_name": {
            "name": "test_manage_task_activities_view_should_not_allow_to_create_two_tasks_with_the_same_name",
            "location": 295,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManageTaskActivitiesViewTests.test_manage_task_activities_view_should_not_add_new_entry_when_task_is_inactive": {
            "name": "test_manage_task_activities_view_should_not_add_new_entry_when_task_is_inactive",
            "location": 310,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoveTaskActivityViewTests.setUp": {
            "name": "setUp",
            "location": 320,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoveTaskActivityViewTests.test_remove_task_activities_view_should_only_handle_post": {
            "name": "test_remove_task_activities_view_should_only_handle_post",
            "location": 329,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RemoveTaskActivityViewTests.test_remove_task_activities_view_should_change_task_status_to_not_active": {
            "name": "test_remove_task_activities_view_should_change_task_status_to_not_active",
            "location": 336,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sheetstorm-master/managers/tests/__init__.py": {},
    "sheetstorm-master/sheetstorm/apps.py": {
        "SheetstormConfig.ready": {
            "name": "ready",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sheetstorm-master/sheetstorm/system_check.py": {
        "create_error_01_valid_email_domain_list_is_not_a_list": {
            "name": "create_error_01_valid_email_domain_list_is_not_a_list",
            "location": 14,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "create_warning_01_duplicated_values_in_valid_email_domain_list": {
            "name": "create_warning_01_duplicated_values_in_valid_email_domain_list",
            "location": 18,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "create_error_02_invalid_domain_address": {
            "name": "create_error_02_invalid_domain_address",
            "location": 24,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "domain": [
                    "str",
                    "django.db.models.Model"
                ]
            }
        },
        "create_warning_02_empty_valid_email_domain_list": {
            "name": "create_warning_02_empty_valid_email_domain_list",
            "location": 28,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {}
        },
        "create_error_03_site_id_value_must_be_integer": {
            "name": "create_error_03_site_id_value_must_be_integer",
            "location": 36,
            "return": [
                "bool",
                "Dict[str, bool]",
                "str"
            ],
            "arguments": {}
        },
        "create_error_04_email_backend_value_must_be_string": {
            "name": "create_error_04_email_backend_value_must_be_string",
            "location": 40,
            "return": [
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {}
        },
        "create_error_05_module_does_not_have_attribute": {
            "name": "create_error_05_module_does_not_have_attribute",
            "location": 44,
            "return": [
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "module": [
                    "str",
                    "type",
                    "Sequence[type]"
                ],
                "attribute": [
                    "str",
                    "type",
                    "Sequence[type]"
                ]
            }
        },
        "create_error_06_can_not_import_path": {
            "name": "create_error_06_can_not_import_path",
            "location": 48,
            "return": [
                "dict",
                "Dict[str, Union[str, Set]]",
                "Callable",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "create_error_07_setting_does_not_exist": {
            "name": "create_error_07_setting_does_not_exist",
            "location": 52,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict]"
            ],
            "arguments": {
                "setting": [
                    "str",
                    "Dict[str, Any]",
                    "type",
                    "dict"
                ]
            }
        },
        "check_settings_valid_email_domain_list": {
            "name": "check_settings_valid_email_domain_list",
            "location": 57,
            "return": [
                "str",
                "common.Octree",
                "List[List[Any]]",
                "List[str]",
                "list"
            ],
            "arguments": {}
        },
        "check_settings_site_id": {
            "name": "check_settings_site_id",
            "location": 77,
            "return": [
                "list",
                "List[List[Any]]",
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {}
        },
        "check_settings_email_backend": {
            "name": "check_settings_email_backend",
            "location": 87,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "sheetstorm-master/sheetstorm/urls.py": {},
    "sheetstorm-master/sheetstorm/views.py": {},
    "sheetstorm-master/sheetstorm/wsgi.py": {},
    "sheetstorm-master/sheetstorm/__init__.py": {},
    "sheetstorm-master/sheetstorm/management/__init__.py": {},
    "sheetstorm-master/sheetstorm/management/commands/constants.py": {},
    "sheetstorm-master/sheetstorm/management/commands/generate_test_data.py": {
        "Command.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command._init_values_from_given_options": {
            "name": "_init_values_from_given_options",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "options": [
                    "dict",
                    "lms.lmsdb.models.Solution"
                ]
            }
        },
        "Command._get_list_of_created_users_and_projects": {
            "name": "_get_list_of_created_users_and_projects",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command._create_list_of_task_activities": {
            "name": "_create_list_of_task_activities",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command._get_request_to_create_data_using_prepared_set": {
            "name": "_get_request_to_create_data_using_prepared_set",
            "location": 146,
            "return": [
                "int",
                "bool",
                "rotkehlchen.db.dbhandler.DBHandler",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command._pick_dataset_to_create": {
            "name": "_pick_dataset_to_create",
            "location": 149,
            "return": [
                "str",
                "core.models.Grouping",
                "core.models.Registration",
                "Dict[str, Dict[str, str]]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.execute_creating_users": {
            "name": "execute_creating_users",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command._get_user_options": {
            "name": "_get_user_options",
            "location": 163,
            "return": [
                "str",
                "models.Name",
                "lightbus.transports.base.RpcMessage",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command._get_superuser_request": {
            "name": "_get_superuser_request",
            "location": 170,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.create_user": {
            "name": "create_user",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_type": [
                    "str",
                    "int"
                ],
                "number_of_users_to_create": [
                    "int",
                    "Optional[Dict[str, Any]]",
                    "Optional[List[str]]",
                    "Dict[str, object]",
                    "models.AutoTestStepResultState",
                    "str",
                    "bytes"
                ]
            }
        },
        "Command._set_user_factory_parameters": {
            "name": "_set_user_factory_parameters",
            "location": 186,
            "return": [
                "bool"
            ],
            "arguments": {
                "user_type": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Command.execute_creating_project": {
            "name": "execute_creating_project",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command._set_number_of_projects_to_create": {
            "name": "_set_number_of_projects_to_create",
            "location": 199,
            "return": [
                "bool",
                "Callable[[str], str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command._compute_number_of_projects_to_create": {
            "name": "_compute_number_of_projects_to_create",
            "location": 206,
            "return": [
                "dict",
                "Dict[str, str]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "project_type": [
                    "str",
                    "Union[str, Pattern]",
                    "boto3.resources.factory.ec2.Instance"
                ]
            }
        },
        "Command.create_project": {
            "name": "create_project",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project_type": [
                    "str",
                    "bool",
                    "int",
                    "list"
                ],
                "number_of_projects_to_create": [
                    "int",
                    "str",
                    "Optional[Union[Dict, str, int, bytes]]"
                ]
            }
        },
        "Command._set_project_factory_parameters": {
            "name": "_set_project_factory_parameters",
            "location": 232,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "project_type": [
                    "str",
                    "Set[mtg_ssm.scryfall.models.ScrySetType]"
                ]
            }
        },
        "Command._create_start_date": {
            "name": "_create_start_date",
            "location": 240,
            "return": [
                "int",
                "Tuple[str]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "time_delta": [
                    "str",
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "Command._create_stop_date": {
            "name": "_create_stop_date",
            "location": 244,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "time_delta": [
                    "int",
                    "float",
                    "bool",
                    "T"
                ]
            }
        },
        "Command.execute_adding_users_to_projects": {
            "name": "execute_adding_users_to_projects",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command._parse_data_to_add_users_to_projects": {
            "name": "_parse_data_to_add_users_to_projects",
            "location": 263,
            "return": [
                "str",
                "blurr.core.schema_loader.SchemaLoader"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.add_users_to_projects": {
            "name": "add_users_to_projects",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "users_list": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "Callable",
                    "dict"
                ],
                "projects_list": [
                    "str",
                    "List[str]"
                ],
                "user_type": [
                    "str",
                    "audiopyle.lib.models.file_meta.CompressedAudioFileMeta"
                ],
                "project_type": [
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "logging.Logger"
                ],
                "max_number_of_users_in_projects": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Command._get_list_of_users": {
            "name": "_get_list_of_users",
            "location": 313,
            "return": [
                "list",
                "List[List[Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "user_type": [
                    "str",
                    "Dict[str,str]",
                    "core.types.UserRole",
                    "fal.models.Season"
                ],
                "is_superuser": [
                    "str",
                    "Dict[str,str]",
                    "core.types.UserRole",
                    "fal.models.Season"
                ]
            }
        },
        "Command._get_list_of_projects": {
            "name": "_get_list_of_projects",
            "location": 317,
            "return": [
                "str",
                "List[str]",
                "bool",
                "Set[str]"
            ],
            "arguments": {
                "project_type": [
                    "str",
                    "dict"
                ]
            }
        },
        "Command.add_specified_users_to_project": {
            "name": "add_specified_users_to_project",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project": [
                    "List[str]",
                    "raiden.utils.PaymentAmount",
                    "bool",
                    "raiden.utils.PaymentID",
                    "Optional[int]"
                ],
                "users_to_add_to_project": [
                    "int",
                    "bool",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[str]"
                ],
                "as_manager": [
                    "int",
                    "bool",
                    "Optional[List[str]]",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "Command._add_manager_to_project_if_not_added_yet": {
            "name": "_add_manager_to_project_if_not_added_yet",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "project": [
                    "str",
                    "Mapping[str, Any]",
                    "List[str]",
                    "aaLogbook.models.xmlElementModel.LogbookElement"
                ],
                "manager": [
                    "str",
                    "Mapping[str, Any]",
                    "List[str]",
                    "aaLogbook.models.xmlElementModel.LogbookElement"
                ]
            }
        },
        "Command._add_member_to_project_if_not_added_yet": {
            "name": "_add_member_to_project_if_not_added_yet",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "project": [
                    "str",
                    "Mapping[str, Any]",
                    "List[str]",
                    "aaLogbook.models.xmlElementModel.LogbookElement"
                ],
                "member": [
                    "str",
                    "Mapping[str, Any]",
                    "List[str]",
                    "aaLogbook.models.xmlElementModel.LogbookElement"
                ]
            }
        },
        "Command.remove_all_random_user_projects": {
            "name": "remove_all_random_user_projects",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_type": [
                    "str",
                    "gardnr.models.Driver",
                    "Optional[gdpr.models.LegalReason]",
                    "Optional[str]"
                ]
            }
        },
        "Command.execute_creating_reports": {
            "name": "execute_creating_reports",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.create_task_activities": {
            "name": "create_task_activities",
            "location": 364,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Command.create_users_reports": {
            "name": "create_users_reports",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_type": [
                    "bool",
                    "utils.CWLObjectType",
                    "models.Project",
                    "str"
                ],
                "maximum_number_of_reports_per_day": [
                    "int",
                    "float",
                    "bool",
                    "list"
                ]
            }
        },
        "Command.check_that_user_is_member_of_any_project": {
            "name": "check_that_user_is_member_of_any_project",
            "location": 380,
            "return": [
                "str"
            ],
            "arguments": {
                "user": [
                    "str",
                    "app.models.Game"
                ]
            }
        },
        "Command.create_specified_number_of_reports_per_day": {
            "name": "create_specified_number_of_reports_per_day",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "Optional[str]",
                    "bool",
                    "int",
                    "str"
                ],
                "maximum_number_of_reports_per_day": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "Command.get_dates_from_range_of_project_duration": {
            "name": "get_dates_from_range_of_project_duration",
            "location": 392,
            "return": [
                "str",
                "dict",
                "List[str]",
                "Type[db.models.BaseModel]",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.create_report": {
            "name": "create_report",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "Optional[str]",
                    "str"
                ],
                "report_publication_date": [
                    "Optional[str]",
                    "str"
                ],
                "number_of_reports": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "Command._pick_random_user_project": {
            "name": "_pick_random_user_project",
            "location": 411,
            "return": [
                "Dict[str, Any]",
                "str",
                "bool",
                "core.track.Track",
                "List[src.scrape.models.ProductSearchResult]",
                "cmk.utils.type_defs.EventRule"
            ],
            "arguments": {
                "user": [
                    "int",
                    "Union[server.models.User, int]",
                    "List[manager.models.training.Training]",
                    "models.Submission"
                ]
            }
        },
        "Command._get_random_work_hours": {
            "name": "_get_random_work_hours",
            "location": 417,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "number_of_reports": [
                    "int"
                ],
                "max_work_hours_per_day": [
                    "int"
                ]
            }
        },
        "Command.pick_random_task_activity": {
            "name": "pick_random_task_activity",
            "location": 427,
            "return": [
                "Awaitable",
                "dict",
                "int",
                "Sequence[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 430,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": []
            }
        }
    },
    "sheetstorm-master/sheetstorm/management/commands/__init__.py": {},
    "sheetstorm-master/sheetstorm/settings/base.py": {},
    "sheetstorm-master/sheetstorm/settings/development.py": {},
    "sheetstorm-master/sheetstorm/settings/production.py": {},
    "sheetstorm-master/sheetstorm/settings/testing.py": {},
    "sheetstorm-master/sheetstorm/settings/__init__.py": {},
    "sheetstorm-master/sheetstorm/tests/test_integrity_generate_test_data.py": {
        "CreateUsersTests.test_that_command_should_create_superuser_when_superuser_is_requested": {
            "name": "test_that_command_should_create_superuser_when_superuser_is_requested",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateUsersTests.test_that_command_should_not_create_superuser_when_superuser_is_not_requested": {
            "name": "test_that_command_should_not_create_superuser_when_superuser_is_not_requested",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateUsersTests.test_that_command_should_not_create_superuser_when_superuser_is_requested_but_already_exists": {
            "name": "test_that_command_should_not_create_superuser_when_superuser_is_requested_but_already_exists",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateUsersTests.test_that_result_of_command_should_be_specified_number_of_users_in_database": {
            "name": "test_that_result_of_command_should_be_specified_number_of_users_in_database",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user_type": [
                    "str",
                    "Callable[[str], None]"
                ],
                "number_of_users_to_create": [
                    "str",
                    "Callable[[str], None]"
                ]
            }
        },
        "CreateUsersTests.test_that_command_should_not_create_any_user_when_any_argument_is_not_specified": {
            "name": "test_that_command_should_not_create_any_user_when_any_argument_is_not_specified",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateUsersTests.test_that_command_should_not_require_all_arguments_to_create_specified_users": {
            "name": "test_that_command_should_not_require_all_arguments_to_create_specified_users",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user_type": [
                    "str",
                    "Callable[[str], None]"
                ],
                "number_of_users_to_create": [
                    "str",
                    "Callable[[str], None]"
                ]
            }
        },
        "CreateUsersTests.test_that_command_should_not_create_users_when_specified_number_is_not_greater_than_0": {
            "name": "test_that_command_should_not_create_users_when_specified_number_is_not_greater_than_0",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user_type": [
                    "str"
                ],
                "number_of_users_to_create": [
                    "bool",
                    "str",
                    "Optional[zerver.models.UserProfile]",
                    "zerver.models.Realm"
                ],
                "expected_number_of_users_in_database": [
                    "Dict[str, str]",
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "CreateUsersTests.test_that_despite_filled_database_command_should_create_specified_number_of_users": {
            "name": "test_that_despite_filled_database_command_should_create_specified_number_of_users",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user_type": [
                    "str",
                    "boucanpy.db.models.user.User"
                ],
                "number_of_users": [
                    "str",
                    "boucanpy.db.models.user.User"
                ]
            }
        },
        "CreateProjectsTests.test_that_result_of_command_should_be_specified_number_of_projects_in_database": {
            "name": "test_that_result_of_command_should_be_specified_number_of_projects_in_database",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateProjectsTests.test_that_command_should_not_create_any_project_when_any_argument_is_not_specified": {
            "name": "test_that_command_should_not_create_any_project_when_any_argument_is_not_specified",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateProjectsTests.test_that_command_should_not_require_all_arguments_to_create_specified_projects": {
            "name": "test_that_command_should_not_require_all_arguments_to_create_specified_projects",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "project_type": [
                    "Mapping",
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "tartare.core.readers.CsvReader",
                    "Dict[str, str]"
                ],
                "number_of_projects_to_create": [
                    "Mapping",
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "tartare.core.readers.CsvReader",
                    "Dict[str, str]"
                ]
            }
        },
        "CreateProjectsTests.test_that_command_should_not_create_projects_when_specified_number_is_not_greater_than_0": {
            "name": "test_that_command_should_not_create_projects_when_specified_number_is_not_greater_than_0",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "project_type": [
                    "str",
                    "Callable",
                    "Command.OptionsDictType",
                    "NamedTuple",
                    "bool"
                ],
                "number_of_projects_to_create": [
                    "str",
                    "utils.MinMaxStats",
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "dict",
                    "zam_repondeur.models.Lecture",
                    "Dict[str, str]",
                    "Command.OptionsDictType"
                ],
                "expected_number_of_projects_in_database": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "CreateProjectsTests.test_that_despite_filled_database_command_should_create_specified_number_of_projects": {
            "name": "test_that_despite_filled_database_command_should_create_specified_number_of_projects",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "project_type": [
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]",
                    "str"
                ],
                "number_of_projects": [
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]",
                    "str"
                ]
            }
        },
        "CreateProjectsTests.check_number_of_projects_in_database": {
            "name": "check_number_of_projects_in_database",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "project_type": [
                    "Exception"
                ],
                "expected_number_of_projects": [
                    "int",
                    "List[str]",
                    "str",
                    "bool",
                    "Tuple[str]"
                ]
            }
        },
        "CombinedOptionsTests.setUp": {
            "name": "setUp",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CombinedOptionsTests.test_that_passing_users_arguments_should_not_affect_creating_projects": {
            "name": "test_that_passing_users_arguments_should_not_affect_creating_projects",
            "location": 202,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CombinedOptionsTests.test_that_passing_projects_arguments_should_not_affect_creating_users": {
            "name": "test_that_passing_projects_arguments_should_not_affect_creating_users",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CombinedOptionsTests.test_that_result_of_passing_all_arguments_should_be_created_specified_number_of_projects_and_users": {
            "name": "test_that_result_of_passing_all_arguments_should_be_created_specified_number_of_projects_and_users",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CombinedOptionsTests.check_number_of_all_projects_in_database": {
            "name": "check_number_of_all_projects_in_database",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CombinedOptionsTests.check_number_of_all_users_in_database": {
            "name": "check_number_of_all_users_in_database",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PassIncorrectArgumentsTests.test_that_passing_text_instead_of_number_for_users_arguments_should_raise_error": {
            "name": "test_that_passing_text_instead_of_number_for_users_arguments_should_raise_error",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user_type": [
                    "str",
                    "raiden.utils.List[raiden.utils.TokenAddress]",
                    "Callable",
                    "bool"
                ],
                "test_text": [
                    "str",
                    "raiden.utils.List[raiden.utils.TokenAddress]",
                    "Callable",
                    "bool"
                ]
            }
        },
        "PassIncorrectArgumentsTests.test_that_passing_text_instead_of_number_for_projects_arguments_should_raise_error": {
            "name": "test_that_passing_text_instead_of_number_for_projects_arguments_should_raise_error",
            "location": 247,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "project_type": [
                    "str",
                    "bool",
                    "dict"
                ],
                "test_text": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "PassIncorrectArgumentsTests.test_that_passing_any_value_for_positional_superuser_argument_should_raise_error": {
            "name": "test_that_passing_any_value_for_positional_superuser_argument_should_raise_error",
            "location": 254,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_value": [
                    "str",
                    "taskiapplication.models.projecProject",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "PassIncorrectArgumentsTests.test_that_passing_any_value_for_data_size_parameter_other_than_defined_sizes_should_raise_error": {
            "name": "test_that_passing_any_value_for_data_size_parameter_other_than_defined_sizes_should_raise_error",
            "location": 259,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_value": [
                    "int",
                    "taskiapplication.models.projecProject",
                    "str"
                ]
            }
        },
        "CreateDataFromPreparedSetTests.test_that_command_should_create_specified_set_when_there_is_request": {
            "name": "test_that_command_should_create_specified_set_when_there_is_request",
            "location": 267,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateDataFromPreparedSetTests.test_that_result_of_passing_all_arguments_when_prepared_set_is_requested_should_be_created_specified_set": {
            "name": "test_that_result_of_passing_all_arguments_when_prepared_set_is_requested_should_be_created_specified_set",
            "location": 272,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateDataFromPreparedSetTests.compare_quantity_in_database_with_small_set": {
            "name": "compare_quantity_in_database_with_small_set",
            "location": 288,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AddUsersToProjectsTests.setUp": {
            "name": "setUp",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddUsersToProjectsTests.test_that_number_of_added_users_to_project_should_be_less_or_equal_to_specified_max_number_in_prepared_set": {
            "name": "test_that_number_of_added_users_to_project_should_be_less_or_equal_to_specified_max_number_in_prepared_set",
            "location": 311,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AddUsersToProjectsTests.test_that_number_of_added_managers_to_project_should_be_less_or_equal_to_specified_max_number_in_prepared_set": {
            "name": "test_that_number_of_added_managers_to_project_should_be_less_or_equal_to_specified_max_number_in_prepared_set",
            "location": 340,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateUserReportsTests.setUp": {
            "name": "setUp",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateUserReportsTests.test_that_user_should_have_at_least_number_of_reports_equal_to_number_of_days_project_lasts_minus_one_day": {
            "name": "test_that_user_should_have_at_least_number_of_reports_equal_to_number_of_days_project_lasts_minus_one_day",
            "location": 356,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateUserReportsTests.test_that_command_should_not_create_new_reports_if_the_database_already_contains_reports": {
            "name": "test_that_command_should_not_create_new_reports_if_the_database_already_contains_reports",
            "location": 365,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateUserReportsTests.get_user_that_is_member_of_any_project": {
            "name": "get_user_that_is_member_of_any_project",
            "location": 373,
            "return": [
                "str",
                "int",
                "Iterable[T]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "CreateUserReportsTests.get_number_of_possible_days_with_reports": {
            "name": "get_number_of_possible_days_with_reports",
            "location": 381,
            "return": [
                "List[int]",
                "dict"
            ],
            "arguments": {}
        }
    },
    "sheetstorm-master/sheetstorm/tests/test_unit_generate_test_data.py": {
        "CreateUserMethodsTests.test_get_users_options_function_should_return_only_users_options": {
            "name": "test_get_users_options_function_should_return_only_users_options",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateUserMethodsTests.test_get_superuser_request_function_should_return_true_if_there_is_superuser_request": {
            "name": "test_get_superuser_request_function_should_return_true_if_there_is_superuser_request",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateUserMethodsTests.test_get_superuser_request_function_should_return_false_if_there_is_no_superuser_request": {
            "name": "test_get_superuser_request_function_should_return_false_if_there_is_no_superuser_request",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateUserMethodsTests.test_get_superuser_request_function_should_return_false_if_superuser_already_exists": {
            "name": "test_get_superuser_request_function_should_return_false_if_superuser_already_exists",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateUserMethodsTests.test_superuser_should_have_staff_property": {
            "name": "test_superuser_should_have_staff_property",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateUserMethodsTests.test_any_user_should_not_have_staff_property_except_superuser": {
            "name": "test_any_user_should_not_have_staff_property_except_superuser",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user_type": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "CreateUserMethodsTests.test_any_user_should_not_have_superuser_property_except_superuser": {
            "name": "test_any_user_should_not_have_superuser_property_except_superuser",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user_type": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "CreateUserMethodsTests.test_superuser_should_have_superuser_property": {
            "name": "test_superuser_should_have_superuser_property",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateUserMethodsTests.test_admin_and_superuser_should_have_user_type_coded_as_admin": {
            "name": "test_admin_and_superuser_should_have_user_type_coded_as_admin",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user_type": [
                    "str",
                    "zerver.models.UserProfile",
                    "dict"
                ]
            }
        },
        "CreateUserMethodsTests.test_employee_and_manager_should_have_user_type_coded_as_based_of_user_type_name": {
            "name": "test_employee_and_manager_should_have_user_type_coded_as_based_of_user_type_name",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user_type": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "CreateUserMethodsTests.test_result_of_create_user_function_should_be_specified_number_of_users_in_database": {
            "name": "test_result_of_create_user_function_should_be_specified_number_of_users_in_database",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user_type": [
                    "str",
                    "float",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "number_of_users_to_create": [
                    "str",
                    "float",
                    "Optional[float]",
                    "Optional[str]"
                ]
            }
        },
        "CreateUserMethodsTests.test_despite_filled_database_result_of_create_user_function_should_be_specified_number_of_users_in_database": {
            "name": "test_despite_filled_database_result_of_create_user_function_should_be_specified_number_of_users_in_database",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user_type": [
                    "str",
                    "int"
                ],
                "number_of_users_to_create": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "CreateUserMethodsTests.test_create_user_function_should_not_create_users_if_number_in_database_is_greater_than_or_equal_to_specified": {
            "name": "test_create_user_function_should_not_create_users_if_number_in_database_is_greater_than_or_equal_to_specified",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user_type": [
                    "str",
                    "zerver.models.Realm",
                    "bool"
                ],
                "number_of_users_to_subtract_from_existing": [
                    "str",
                    "bool",
                    "django.contrib.auth.models.AbstractUser",
                    "projects.project_models.Project"
                ]
            }
        },
        "CreateUserMethodsTests.test_result_of_execute_creating_users_function_should_be_specified_number_of_users_in_database": {
            "name": "test_result_of_execute_creating_users_function_should_be_specified_number_of_users_in_database",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateUserMethodsTests.test_despite_filled_database_result_of_execute_function_should_be_specified_number_of_users_in_database": {
            "name": "test_despite_filled_database_result_of_execute_function_should_be_specified_number_of_users_in_database",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateUserMethodsTests._generate_test_users": {
            "name": "_generate_test_users",
            "location": 168,
            "return": [
                "zerver.models.Realm",
                "Optional[str]",
                "models.User",
                "app.models.GameMember",
                "app.models.course.Course"
            ],
            "arguments": {
                "number_of_users_to_fill_database": [
                    "bool",
                    "List[str]",
                    "Optional[str]",
                    "int",
                    "list"
                ],
                "user_type": [
                    "str",
                    "Dict[Hashable, Any]",
                    "List[str]",
                    "int",
                    "megatron.models.PlatformUser",
                    "django.db.models.QuerySet"
                ]
            }
        },
        "CreateProjectMethodsTests.setUp": {
            "name": "setUp",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateProjectMethodsTests.test_number_of_projects_to_create_should_be_a_difference_of_number_of_projects_in_database_and_defined_number": {
            "name": "test_number_of_projects_to_create_should_be_a_difference_of_number_of_projects_in_database_and_defined_number",
            "location": 201,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "project_type": [
                    "str"
                ],
                "expected_result": [
                    "str",
                    "List[str]",
                    "projects.project_models.Project"
                ]
            }
        },
        "CreateProjectMethodsTests.test_compute_number_of_projects_to_create_function_should_raise_error_if_project_type_does_not_exist": {
            "name": "test_compute_number_of_projects_to_create_function_should_raise_error_if_project_type_does_not_exist",
            "location": 208,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateProjectMethodsTests.test_compute_number_of_projects_to_create_function_should_return_0_if_number_of_projects_is_not_specified": {
            "name": "test_compute_number_of_projects_to_create_function_should_return_0_if_number_of_projects_is_not_specified",
            "location": 213,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "project_type": [
                    "str",
                    "List[str]",
                    "projects.project_models.Project"
                ]
            }
        },
        "CreateProjectMethodsTests.test_number_of_projects_to_create_should_be_set_and_equal_to_computed_number": {
            "name": "test_number_of_projects_to_create_should_be_set_and_equal_to_computed_number",
            "location": 222,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateProjectMethodsTests.test_start_date_should_be_of_datetime_type_and_set_in_past": {
            "name": "test_start_date_should_be_of_datetime_type_and_set_in_past",
            "location": 247,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateProjectMethodsTests.test_stop_date_should_be_of_datetime_type_and_set_in_past": {
            "name": "test_stop_date_should_be_of_datetime_type_and_set_in_past",
            "location": 253,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateProjectMethodsTests.test_suspended_projects_should_have_suspended_property": {
            "name": "test_suspended_projects_should_have_suspended_property",
            "location": 259,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateProjectMethodsTests.test_active_and_completed_projects_should_not_have_suspended_property": {
            "name": "test_active_and_completed_projects_should_not_have_suspended_property",
            "location": 265,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "project_type": [
                    "str"
                ]
            }
        },
        "CreateProjectMethodsTests.test_completed_projects_should_have_stop_date": {
            "name": "test_completed_projects_should_have_stop_date",
            "location": 268,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateProjectMethodsTests.test_active_and_suspended_projects_should_not_have_stop_date": {
            "name": "test_active_and_suspended_projects_should_not_have_stop_date",
            "location": 274,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "project_type": [
                    "str"
                ]
            }
        },
        "CreateProjectMethodsTests.test_any_project_should_have_start_date": {
            "name": "test_any_project_should_have_start_date",
            "location": 278,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "project_type": [
                    "str"
                ]
            }
        },
        "CreateProjectMethodsTests.test_result_of_execute_function_should_be_specified_number_of_projects_in_database": {
            "name": "test_result_of_execute_function_should_be_specified_number_of_projects_in_database",
            "location": 281,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateProjectMethodsTests.test_create_project_function_should_create_computed_number_of_suspended_projects": {
            "name": "test_create_project_function_should_create_computed_number_of_suspended_projects",
            "location": 288,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateProjectMethodsTests.test_create_project_function_should_create_computed_number_of_active_projects": {
            "name": "test_create_project_function_should_create_computed_number_of_active_projects",
            "location": 301,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateProjectMethodsTests.test_create_project_function_should_create_computed_number_of_completed_projects": {
            "name": "test_create_project_function_should_create_computed_number_of_completed_projects",
            "location": 312,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateProjectMethodsTests.test_projects_should_not_be_created_if_number_of_projects_in_database_is_greater_than_or_equal_to_specified": {
            "name": "test_projects_should_not_be_created_if_number_of_projects_in_database_is_greater_than_or_equal_to_specified",
            "location": 326,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "number_of_projects_to_subtract_from_existing": [
                    "List[bytes]",
                    "contests.models.Submission",
                    "dict",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "tracim.models.data.Workspace",
                    "bool"
                ]
            }
        },
        "CreateProjectMethodsTests._generate_test_projects": {
            "name": "_generate_test_projects",
            "location": 362,
            "return": [
                "bool",
                "str",
                "int",
                "List[annofabapi.models.Project]",
                "dict",
                "Tuple[Any, Any, Any]"
            ],
            "arguments": {
                "number_of_projects_to_fill_database": [
                    "django.db.models.QuerySet",
                    "int",
                    "str",
                    "bool"
                ],
                "project_type": [
                    "bool",
                    "str",
                    "Dict[str, int]",
                    "Optional[bool]"
                ]
            }
        },
        "CreateProjectMethodsTests._compute_number_of_projects": {
            "name": "_compute_number_of_projects",
            "location": 379,
            "return": [
                "int",
                "List[str]"
            ],
            "arguments": {
                "options": [
                    "str",
                    "Dict[str, Any]",
                    "List[Dict[str, str]]",
                    "Project",
                    "list"
                ],
                "projects_in_database": [
                    "str",
                    "Dict[str, Any]",
                    "List[Dict[str, str]]",
                    "Project",
                    "list"
                ],
                "project_type": [
                    "str",
                    "Union[str, Pattern]",
                    "utils.CWLObjectType"
                ]
            }
        },
        "CreateDataFromPreparedSetTests.setUp": {
            "name": "setUp",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateDataFromPreparedSetTests.test_get_request_to_create_data_using_prepared_set_function_should_return_true_if_any_set_requested": {
            "name": "test_get_request_to_create_data_using_prepared_set_function_should_return_true_if_any_set_requested",
            "location": 396,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateDataFromPreparedSetTests.test_get_request_to_create_data_using_prepared_set_function_should_return_false_if_parameters_are_not_provided": {
            "name": "test_get_request_to_create_data_using_prepared_set_function_should_return_false_if_parameters_are_not_provided",
            "location": 401,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateDataFromPreparedSetTests.test_pick_dataset_to_create_function_should_return_one_specified_set_if_there_is_request": {
            "name": "test_pick_dataset_to_create_function_should_return_one_specified_set_if_there_is_request",
            "location": 409,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "requested_set": [
                    "str",
                    "Optional[Dict[str, bytes]]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "CreateDataFromPreparedSetTests.test_pick_dataset_to_create_function_should_return_None_if_there_is_no_request_for_any": {
            "name": "test_pick_dataset_to_create_function_should_return_None_if_there_is_no_request_for_any",
            "location": 414,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AddUsersToProjectsTests.setUp": {
            "name": "setUp",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddUsersToProjectsTests.test_that_get_list_of_users_function_should_return_list_of_users_of_specified_type": {
            "name": "test_that_get_list_of_users_function_should_return_list_of_users_of_specified_type",
            "location": 430,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user_type": [
                    "str",
                    "List[Dict[str, Any]]",
                    "Iterable[str]",
                    "zerver.models.UserProfile",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "AddUsersToProjectsTests.test_that_get_list_of_projects_function_should_return_list_of_only_suspended_projects_if_specified": {
            "name": "test_that_get_list_of_projects_function_should_return_list_of_only_suspended_projects_if_specified",
            "location": 440,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AddUsersToProjectsTests.test_that_get_list_of_projects_function_should_return_list_of_only_completed_projects_if_specified": {
            "name": "test_that_get_list_of_projects_function_should_return_list_of_only_completed_projects_if_specified",
            "location": 447,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AddUsersToProjectsTests.test_that_get_list_of_projects_function_should_return_list_of_only_active_projects_if_specified": {
            "name": "test_that_get_list_of_projects_function_should_return_list_of_only_active_projects_if_specified",
            "location": 454,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AddUsersToProjectsTests.test_that_get_list_of_projects_function_should_raise_error_when_project_type_is_not_valid": {
            "name": "test_that_get_list_of_projects_function_should_raise_error_when_project_type_is_not_valid",
            "location": 461,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AddUsersToProjectsTests.test_that_add_specified_users_to_project_function_should_add_specified_users_as_members_to_specified_project": {
            "name": "test_that_add_specified_users_to_project_function_should_add_specified_users_as_members_to_specified_project",
            "location": 465,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AddUsersToProjectsTests.test_that_add_specified_users_to_project_function_should_add_users_as_managers_and_members_to_specified_project": {
            "name": "test_that_add_specified_users_to_project_function_should_add_users_as_managers_and_members_to_specified_project",
            "location": 476,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AddUsersToProjectsTests.test_that_add_member_to_project_if_not_added_yet_function_should_add_specified_user_as_member_to_project": {
            "name": "test_that_add_member_to_project_if_not_added_yet_function_should_add_specified_user_as_member_to_project",
            "location": 488,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AddUsersToProjectsTests.test_that_add_manager_to_project_if_not_added_yet_function_should_add_specified_user_as_manager_to_project": {
            "name": "test_that_add_manager_to_project_if_not_added_yet_function_should_add_specified_user_as_manager_to_project",
            "location": 498,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AddUsersToProjectsTests.test_that_add_users_to_projects_function_should_add_number_of_users_to_projects_from_specified_range": {
            "name": "test_that_add_users_to_projects_function_should_add_number_of_users_to_projects_from_specified_range",
            "location": 510,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AddUsersToProjectsTests.test_that_remove_all_random_user_projects_function_should_remove_all_user_projects": {
            "name": "test_that_remove_all_random_user_projects_function_should_remove_all_user_projects",
            "location": 535,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user_type": [
                    "str"
                ]
            }
        },
        "AddUsersToProjectsTests.test_that_remove_all_random_user_projects_function_should_remove_all_manager_projects": {
            "name": "test_that_remove_all_random_user_projects_function_should_remove_all_manager_projects",
            "location": 546,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateUserReportsTests.setUp": {
            "name": "setUp",
            "location": 562,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateUserReportsTests.test_that_create_task_activities_function_should_create_tasks_activities": {
            "name": "test_that_create_task_activities_function_should_create_tasks_activities",
            "location": 568,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateUserReportsTests.test_that_pick_random_task_activity_function_should_return_one_of_the_specified_task_activities": {
            "name": "test_that_pick_random_task_activity_function_should_return_one_of_the_specified_task_activities",
            "location": 573,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateUserReportsTests.test_that_get_random_work_hours_function_should_return_timedelta_object_of_seconds_less_than_max_hours_per_day": {
            "name": "test_that_get_random_work_hours_function_should_return_timedelta_object_of_seconds_less_than_max_hours_per_day",
            "location": 583,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "number_of_reports": [
                    "int",
                    "instark.application.managers.SubscriptionManager"
                ]
            }
        },
        "CreateUserReportsTests.test_that_pick_random_user_project_function_should_return_one_of_projects_that_user_is_member_of": {
            "name": "test_that_pick_random_user_project_function_should_return_one_of_projects_that_user_is_member_of",
            "location": 595,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateUserReportsTests.test_that_check_that_user_is_member_of_any_project_function_should_return_true_if_user_is_member_of_any_project": {
            "name": "test_that_check_that_user_is_member_of_any_project_function_should_return_true_if_user_is_member_of_any_project",
            "location": 603,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CreateUserReportsTests.test_that_check_that_user_is_member_of_any_project_function_should_return_false_if_user_is_not_in_any_project": {
            "name": "test_that_check_that_user_is_member_of_any_project_function_should_return_false_if_user_is_not_in_any_project",
            "location": 612,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sheetstorm-master/sheetstorm/tests/test_views.py": {
        "IndexPageTests.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexPageTests.test_not_logged_user_got_redirected_to_login_page": {
            "name": "test_not_logged_user_got_redirected_to_login_page",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "IndexPageTests.test_logged_user_go_to_home_page": {
            "name": "test_logged_user_go_to_home_page",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sheetstorm-master/sheetstorm/tests/__init__.py": {},
    "sheetstorm-master/sheetstorm-deployment/sheetstorm-vm/files/local_settings-local.py": {},
    "sheetstorm-master/users/admin.py": {},
    "sheetstorm-master/users/apps.py": {},
    "sheetstorm-master/users/factories.py": {},
    "sheetstorm-master/users/forms.py": {
        "CustomUserCreationForm.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AdminUserChangeForm.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomUserChangeForm.clean": {
            "name": "clean",
            "location": 87,
            "return": [
                "str",
                "Optional[float]",
                "bool",
                "django.http.HttpRequest"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sheetstorm-master/users/models.py": {
        "update_from_manager_to_employee": {
            "name": "update_from_manager_to_employee",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [
                    "cmk.utils.type_defs.UserId",
                    "str",
                    "allennlp.models.archival.Archive",
                    "int",
                    "List[Tuple[str, int]]",
                    "float",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.BlockNumber"
                ]
            }
        },
        "update_remove_inactive_user_from_projects": {
            "name": "update_remove_inactive_user_from_projects",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [
                    "core.types.UserRole"
                ]
            }
        },
        "create_custom_user_preferences": {
            "name": "create_custom_user_preferences",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "sender": [
                    "dict",
                    "tuple",
                    "bytes",
                    "int",
                    "Dict[int, dict]"
                ],
                "created": [
                    "int",
                    "type",
                    "bool",
                    "Type",
                    "Callable",
                    "Optional[type]"
                ]
            }
        },
        "CustomUserQuerySet.get_with_prefetched_reports": {
            "name": "get_with_prefetched_reports",
            "location": 32,
            "return": [
                "str",
                "dict",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": [],
                "reports": [
                    "str",
                    "bool"
                ]
            }
        },
        "CustomUserQuerySet.active": {
            "name": "active",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomUserManager._create_user": {
            "name": "_create_user",
            "location": 40,
            "return": [
                "zam_repondeur.models.Lecture",
                "core.models.UserPreferences",
                "set",
                "int",
                "bool",
                "django.db.models.QuerySet",
                "asgard.backends.users.UsersBackend"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "float",
                    "str"
                ],
                "password": [
                    "int",
                    "supersemodels.core.Database",
                    "Optional[int]",
                    "models.Payment",
                    "str",
                    "dict"
                ],
                "is_staff": [
                    "supersemodels.core.Database",
                    "int",
                    "Optional[int]",
                    "models.Payment",
                    "str",
                    "jinete.models.services.Service"
                ],
                "is_superuser": [
                    "supersemodels.core.Database",
                    "int",
                    "Optional[int]",
                    "models.Payment",
                    "str",
                    "jinete.models.services.Service"
                ],
                "user_type": [
                    "supersemodels.core.Database",
                    "int",
                    "Optional[int]",
                    "models.Payment",
                    "str",
                    "jinete.models.services.Service"
                ]
            }
        },
        "CustomUserManager.create_superuser": {
            "name": "create_superuser",
            "location": 62,
            "return": [
                "arxiv.users.domain.User",
                "models.User",
                "cmk.utils.type_defs.UserId",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "CustomUser.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 123,
            "return": [
                "str",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomUser.get_full_name": {
            "name": "get_full_name",
            "location": 130,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomUser.get_short_name": {
            "name": "get_short_name",
            "location": 136,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomUser.email_user": {
            "name": "email_user",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "subject": [
                    "bool",
                    "str"
                ],
                "message": [
                    "bool",
                    "str"
                ],
                "from_email": [
                    "bool",
                    "str"
                ]
            }
        },
        "CustomUser.activate_user": {
            "name": "activate_user",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomUser.is_admin": {
            "name": "is_admin",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomUser.is_manager": {
            "name": "is_manager",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomUser.is_employee": {
            "name": "is_employee",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomUser.get_reports_created": {
            "name": "get_reports_created",
            "location": 164,
            "return": [
                "str",
                "django.db.models.query.QuerySet",
                "int",
                "List[Dict[str, Any]]",
                "raiden.utils.TokenAmount",
                "raiden.utils.BlockNumber"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomUser.get_project_ordered_by_last_report_creation_date": {
            "name": "get_project_ordered_by_last_report_creation_date",
            "location": 167,
            "return": [
                "Optional[str]",
                "Optional[bytes]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sheetstorm-master/users/tokens.py": {
        "AccountActivationTokenGenerator._make_hash_value": {
            "name": "_make_hash_value",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "user": [
                    "int",
                    "users.models.CustomUser",
                    "str",
                    "arxiv.users.domain.User",
                    "users.models.JustfixUser",
                    "Union[str, \"TrackingCode\"]"
                ],
                "timestamp": [
                    "int",
                    "users.models.CustomUser",
                    "str",
                    "arxiv.users.domain.User",
                    "users.models.JustfixUser",
                    "Union[str, \"TrackingCode\"]"
                ]
            }
        }
    },
    "sheetstorm-master/users/urls.py": {},
    "sheetstorm-master/users/validators.py": {
        "UserEmailValidation.__call__": {
            "name": "__call__",
            "location": 25,
            "return": [
                "str",
                "BaseException"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "UserNameValidatior.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserNameValidatior.__call__": {
            "name": "__call__",
            "location": 45,
            "return": [
                "str",
                "Exception",
                "Callable[..., T]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ]
            }
        },
        "ReusedPreviousPasswordValidator.validate": {
            "name": "validate",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "password": [
                    "str",
                    "bytes",
                    "int"
                ],
                "user": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "ReusedPreviousPasswordValidator.get_help_text": {
            "name": "get_help_text",
            "location": 60,
            "return": [
                "str",
                "esm.models.ServiceType",
                "core.models.Recipe",
                "Iterable[int]",
                "zam_repondeur.services.fetch.an.dossiers.models.DossierRef",
                "bool"
            ],
            "arguments": {}
        }
    },
    "sheetstorm-master/users/views.py": {
        "menu_expansion_update_view": {
            "name": "menu_expansion_update_view",
            "location": 336,
            "return": [
                "str",
                "Optional[Dict]",
                "models.Dashboard",
                "bool",
                "dict"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "SignUp._send_activation_email": {
            "name": "_send_activation_email",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "services.user.transfer.models.User",
                    "services.ticketing.models.tickeTicket",
                    "arxiv.users.domain.User",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "SignUp.form_valid": {
            "name": "form_valid",
            "location": 73,
            "return": [
                "str",
                "Union[str, IO]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "bytes",
                    "Sequence[Tuple[float, float]]"
                ]
            }
        },
        "UserCreate.get_context_data": {
            "name": "get_context_data",
            "location": 95,
            "return": [
                "dict",
                "str",
                "IO[bytes]",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserCreate.get_success_url": {
            "name": "get_success_url",
            "location": 101,
            "return": [
                "str",
                "bool",
                "recidiviz.utils.regions.Region"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserCreate.get_success_message": {
            "name": "get_success_message",
            "location": 104,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "cleaned_data": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "Optional[List[Dict]]",
                    "dict",
                    "List[bytes]"
                ]
            }
        },
        "UserUpdate.get_object": {
            "name": "get_object",
            "location": 126,
            "return": [
                "int",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "queryset": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "UserUpdate.get_form_class": {
            "name": "get_form_class",
            "location": 129,
            "return": [
                "str",
                "Type",
                "int",
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserUpdate.get_success_url": {
            "name": "get_success_url",
            "location": 134,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserUpdate.form_valid": {
            "name": "form_valid",
            "location": 137,
            "return": [
                "cmk.utils.type_defs.UserId",
                "Sequence[str]",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "str"
                ]
            }
        },
        "UserUpdateByAdmin.get_success_url": {
            "name": "get_success_url",
            "location": 152,
            "return": [
                "str",
                "bool",
                "recidiviz.utils.regions.Region"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateByAdmin.form_valid": {
            "name": "form_valid",
            "location": 155,
            "return": [
                "cmk.utils.type_defs.UserId",
                "Sequence[str]",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "str"
                ]
            }
        },
        "UserUpdateByAdmin.get_context_data": {
            "name": "get_context_data",
            "location": 160,
            "return": [
                "dict",
                "str",
                "IO[bytes]",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateByAdmin.get_success_message": {
            "name": "get_success_message",
            "location": 166,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "cleaned_data": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "Optional[List[Dict]]",
                    "dict",
                    "List[bytes]"
                ]
            }
        },
        "UserList.get_context_data": {
            "name": "get_context_data",
            "location": 182,
            "return": [
                "dict",
                "str",
                "IO[bytes]",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserList._get_ordered_list_of_users": {
            "name": "_get_ordered_list_of_users",
            "location": 191,
            "return": [
                "List[str]",
                "str",
                "List[T]",
                "List[Dict]",
                "list",
                "Union[List, Tuple]"
            ],
            "arguments": {
                "self": [],
                "queryset": [
                    "esm.models.service_instance.ServiceInstance",
                    "transfer.models.Scope",
                    "float",
                    "esm.models.plan.Plan",
                    "dict",
                    "salon.models.Stylist"
                ]
            }
        },
        "UserList._get_users_by_user_type": {
            "name": "_get_users_by_user_type",
            "location": 198,
            "return": [
                "str",
                "Optional[db.models.Taxon]",
                "Optional[str]",
                "Type",
                "Callable",
                "bool"
            ],
            "arguments": {
                "user_type": [
                    "str"
                ],
                "queryset": [
                    "str"
                ]
            }
        },
        "UserList.post": {
            "name": "post",
            "location": 201,
            "return": [
                "str",
                "dict",
                "models.Dashboard",
                "django.contrib.auth.models.User",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "self": [],
                "_request": [
                    "int",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest"
                ]
            }
        },
        "UserList._reverse_user_status": {
            "name": "_reverse_user_status",
            "location": 213,
            "return": [
                "core.models.User",
                "app.models.User",
                "zam_repondeur.models.Lecture"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "str"
                ]
            }
        },
        "CustomPasswordChangeView.form_valid": {
            "name": "form_valid",
            "location": 227,
            "return": [
                "int",
                "List[str]",
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "str"
                ]
            }
        },
        "CustomPasswordChangeView.form_invalid": {
            "name": "form_invalid",
            "location": 232,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "ActivateAccountView.activate": {
            "name": "activate",
            "location": 264,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActivateAccountView.get_context_data": {
            "name": "get_context_data",
            "location": 277,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotificationUserListView.get_queryset": {
            "name": "get_queryset",
            "location": 292,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "deeplearning.ml4pl.models.logger.Logger"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotificationUserListView.get_context_data": {
            "name": "get_context_data",
            "location": 309,
            "return": [
                "dict",
                "str",
                "IO[bytes]",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserPreferencesUpdate.get_object": {
            "name": "get_object",
            "location": 330,
            "return": [
                "str",
                "int",
                "cmk.utils.type_defs.UserId",
                "bool",
                "server.models.User",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "self": [],
                "queryset": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        }
    },
    "sheetstorm-master/users/__init__.py": {},
    "sheetstorm-master/users/common/constants.py": {},
    "sheetstorm-master/users/common/exceptions.py": {
        "SheetStormBaseException.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error_message": [
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[Mapping[str, Any]]",
                    "Optional[List]",
                    "Optional[Sequence[Any]]",
                    "Optional[List[str]]"
                ],
                "error_code": [
                    "int"
                ]
            }
        }
    },
    "sheetstorm-master/users/common/fields.py": {
        "ChoiceEnum.choices": {
            "name": "choices",
            "location": 6,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "AbstractSet[int]",
                    "Callable",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "sheetstorm-master/users/common/model_helpers.py": {
        "create_user_using_full_clean_and_save": {
            "name": "create_user_using_full_clean_and_save",
            "location": 4,
            "return": [
                "int",
                "core.models.UserPreferences",
                "zam_repondeur.models.Lecture",
                "bool",
                "django.db.models.QuerySet",
                "set",
                "lms.lmsdb.models.User"
            ],
            "arguments": {
                "email": [
                    "str",
                    "Optional[str]"
                ],
                "first_name": [
                    "str",
                    "Optional[str]"
                ],
                "last_name": [
                    "str",
                    "Optional[str]"
                ],
                "password": [
                    "str",
                    "float",
                    "int"
                ]
            }
        }
    },
    "sheetstorm-master/users/common/strings.py": {},
    "sheetstorm-master/users/common/utils.py": {
        "generate_random_string_from_letters_and_digits": {
            "name": "generate_random_string_from_letters_and_digits",
            "location": 10,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]",
                "dict"
            ],
            "arguments": {
                "length": [
                    "int",
                    "Tuple[int]"
                ]
            }
        },
        "count_workdays": {
            "name": "count_workdays",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "start_date": [
                    "int",
                    "datetime.date",
                    "datetime.datetime"
                ],
                "days_number": [
                    "int",
                    "datetime.date",
                    "datetime.datetime"
                ]
            }
        }
    },
    "sheetstorm-master/users/management/commands/load_initial_data.py": {
        "Command.handle": {
            "name": "handle",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Command._add_member_to_project_if_not_added_yet": {
            "name": "_add_member_to_project_if_not_added_yet",
            "location": 262,
            "return": [],
            "arguments": {
                "project": [],
                "member": []
            }
        },
        "Command._add_manager_to_project_if_not_added_yet": {
            "name": "_add_manager_to_project_if_not_added_yet",
            "location": 267,
            "return": [],
            "arguments": {
                "project": [],
                "manager": []
            }
        }
    },
    "sheetstorm-master/users/migrations/0001_initial.py": {},
    "sheetstorm-master/users/migrations/0002_auto_20190822_1010.py": {},
    "sheetstorm-master/users/migrations/0003_customuserpreferences.py": {},
    "sheetstorm-master/users/migrations/0004_add_preferences_to_users.py": {
        "add_preferences_for_users": {
            "name": "add_preferences_for_users",
            "location": 3,
            "return": [
                ""
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "Optional[List[str]]",
                    "Dict[str, Any]"
                ],
                "_schema_editor": [
                    "bool",
                    "List[Dict[str, Any]]",
                    "int",
                    "List[str]",
                    "List[Tuple[int, int, str]]",
                    "str",
                    "Callable[[], object]"
                ]
            }
        }
    },
    "sheetstorm-master/users/migrations/__init__.py": {},
    "sheetstorm-master/users/templatetags/url_filter_tags.py": {
        "startswith": {
            "name": "startswith",
            "location": 7,
            "return": [
                "bool",
                "Hashable",
                "Exception",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int"
                ],
                "starts": [
                    "str",
                    "Optional[IO[str]]"
                ]
            }
        }
    },
    "sheetstorm-master/users/templatetags/user_type_tags.py": {
        "get_manager_user_type": {
            "name": "get_manager_user_type",
            "location": 9,
            "return": [
                "BaseException",
                "Exception",
                "Type[BaseException]",
                "type"
            ],
            "arguments": {}
        },
        "get_admin_user_type": {
            "name": "get_admin_user_type",
            "location": 14,
            "return": [
                "BaseException",
                "Exception",
                "Type[BaseException]",
                "type"
            ],
            "arguments": {}
        }
    },
    "sheetstorm-master/users/templatetags/__init__.py": {},
    "sheetstorm-master/users/tests/test_unit_customuser_model.py": {
        "TestCustomUserModel.test_create_user_method_should_raise_custom_validation_error_when_email_is_none": {
            "name": "test_create_user_method_should_raise_custom_validation_error_when_email_is_none",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomUserModel.test_create_user_method_should_raise_custom_validation_error_when_password_is_none": {
            "name": "test_create_user_method_should_raise_custom_validation_error_when_password_is_none",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomUserModel.test_user_create_superuser_method_should_create_user_with_admin_attributes": {
            "name": "test_user_create_superuser_method_should_create_user_with_admin_attributes",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomUserModel.test_user_with_existing_email_full_clean_should_raise_validation_error": {
            "name": "test_user_with_existing_email_full_clean_should_raise_validation_error",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomUserModel.test_user_with_email_without_at_least_one_at_sign_full_clean_should_raise_validation_error": {
            "name": "test_user_with_email_without_at_least_one_at_sign_full_clean_should_raise_validation_error",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomUserModel.test_user_with_first_name_longer_than_FIRST_NAME_MAX_LENGTH_full_clean_should_raise_validation_error": {
            "name": "test_user_with_first_name_longer_than_FIRST_NAME_MAX_LENGTH_full_clean_should_raise_validation_error",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomUserModel.test_user_with_last_name_longer_than_LAST_NAME_MAX_LENGTH_full_clean_should_raise_validation_error": {
            "name": "test_user_with_last_name_longer_than_LAST_NAME_MAX_LENGTH_full_clean_should_raise_validation_error",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomUserModel.test_user_queryset_active_method_should_return_queryset_of_only_active_users": {
            "name": "test_user_queryset_active_method_should_return_queryset_of_only_active_users",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomUserModel.test_full_clean_method_should_be_called_on_save": {
            "name": "test_full_clean_method_should_be_called_on_save",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "mocked_full_clean": []
            }
        },
        "TestCustomUserModel.test_that_save_method_is_called_from_base_model": {
            "name": "test_that_save_method_is_called_from_base_model",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "mocked_save": []
            }
        },
        "TestCustomUserModelMethods.setUp": {
            "name": "setUp",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomUserModelMethods.test_get_absolute_url_method_should_return_absolute_url_with_users_email": {
            "name": "test_get_absolute_url_method_should_return_absolute_url_with_users_email",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomUserModelMethods.test_get_full_name_method_should_return_first_and_last_user_name_with_space_between": {
            "name": "test_get_full_name_method_should_return_first_and_last_user_name_with_space_between",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomUserModelMethods.test_get_short_name_method_should_return_user_first_name": {
            "name": "test_get_short_name_method_should_return_user_first_name",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomUserModelMethods.test_email_user_should_send_email_to_self_user": {
            "name": "test_email_user_should_send_email_to_self_user",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomUserModelMethods.test_activate_user_method_should_activate_user": {
            "name": "test_activate_user_method_should_activate_user",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomUserModelField.setUp": {
            "name": "setUp",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomUserModelField.test_customuser_model_email_field_should_accept_correct_input": {
            "name": "test_customuser_model_email_field_should_accept_correct_input",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomUserModelField.test_customuser_model_email_field_should_not_accept_string_longer_than_set_limit": {
            "name": "test_customuser_model_email_field_should_not_accept_string_longer_than_set_limit",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomUserModelField.test_customuser_model_first_name_field_should_accept_correct_input": {
            "name": "test_customuser_model_first_name_field_should_accept_correct_input",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomUserModelField.test_customuser_model_first_name_field_may_be_empty": {
            "name": "test_customuser_model_first_name_field_may_be_empty",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomUserModelField.test_customuser_model_first_name_field_should_not_accept_string_longer_than_set_limit": {
            "name": "test_customuser_model_first_name_field_should_not_accept_string_longer_than_set_limit",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomUserModelField.test_customuser_model_last_name_field_should_accept_correct_input": {
            "name": "test_customuser_model_last_name_field_should_accept_correct_input",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomUserModelField.test_customuser_model_last_name_field_may_be_empty": {
            "name": "test_customuser_model_last_name_field_may_be_empty",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomUserModelField.test_customuser_model_last_name_field_should_not_accept_string_longer_than_set_limit": {
            "name": "test_customuser_model_last_name_field_should_not_accept_string_longer_than_set_limit",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomUserModelField.test_customuser_model_is_staff_field_should_have_default_value": {
            "name": "test_customuser_model_is_staff_field_should_have_default_value",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomUserModelField.test_customuser_model_is_active_field_should_have_default_value": {
            "name": "test_customuser_model_is_active_field_should_have_default_value",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomUserModelField.test_customuser_model_date_joined_field_should_be_filled_on_save": {
            "name": "test_customuser_model_date_joined_field_should_be_filled_on_save",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomUserModelField.test_customuser_model_updated_at_field_should_be_filled_on_save": {
            "name": "test_customuser_model_updated_at_field_should_be_filled_on_save",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomUserModelField.test_customuser_model_user_type_field_should_accept_correct_input": {
            "name": "test_customuser_model_user_type_field_should_accept_correct_input",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomUserModelField.test_customuser_model_password_field_should_accept_correct_input": {
            "name": "test_customuser_model_password_field_should_accept_correct_input",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sheetstorm-master/users/tests/test_unit_customuser_signals.py": {
        "TestCustomUserSignals.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomUserSignals.test_user_should_not_be_in_project_as_manager_when_he_is_no_longer_manager": {
            "name": "test_user_should_not_be_in_project_as_manager_when_he_is_no_longer_manager",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomUserSignals.test_user_should_not_be_a_project_member_when_he_is_no_longer_active": {
            "name": "test_user_should_not_be_a_project_member_when_he_is_no_longer_active",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomUserSignals.test_custom_user_preferences_object_should_be_created_along_with_new_user_create": {
            "name": "test_custom_user_preferences_object_should_be_created_along_with_new_user_create",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sheetstorm-master/users/tests/test_unit_template_tags.py": {
        "TestUrlFilterTag.test_correct_value_always_return_true": {
            "name": "test_correct_value_always_return_true",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "whole_string": [
                    "str"
                ],
                "test_value": [
                    "str"
                ]
            }
        },
        "TestUrlFilterTag.test_incorrect_value_always_return_false": {
            "name": "test_incorrect_value_always_return_false",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "whole_string": [
                    "str"
                ],
                "test_value": [
                    "str"
                ]
            }
        }
    },
    "sheetstorm-master/users/tests/test_unit_validators.py": {
        "TestUserEmailValidation.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserEmailValidation.test_validator_should_throw_exception_with_invalid_email": {
            "name": "test_validator_should_throw_exception_with_invalid_email",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str"
                ],
                "exception_message": [
                    "str"
                ]
            }
        },
        "TestUserEmailValidation.test_validator_should_allow_all_email_domains_with_empty_valid_domain_list": {
            "name": "test_validator_should_allow_all_email_domains_with_empty_valid_domain_list",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "email": [
                    "bool",
                    "str",
                    "float",
                    "Dict[str, Any]",
                    "int",
                    "Optional[str]"
                ],
                "valid_email_domains": [
                    "dict",
                    "List[int]",
                    "str"
                ]
            }
        },
        "TestUserEmailValidation.test_validator_all_domain_are_not_allowed_if_valid_email_domain_list_is_empty": {
            "name": "test_validator_all_domain_are_not_allowed_if_valid_email_domain_list_is_empty",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestUserNameValidator.setUp": {
            "name": "setUp",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUserNameValidator.test_validator_raise_exception_when_name_contains_special_characters": {
            "name": "test_validator_raise_exception_when_name_contains_special_characters",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "special_char": [
                    "str"
                ]
            }
        },
        "TestUserNameValidator.test_validator_should_pass_when_name_contain_dash": {
            "name": "test_validator_should_pass_when_name_contain_dash",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReusedPreviousPasswordValidator.setUp": {
            "name": "setUp",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReusedPreviousPasswordValidator.test_that_validator_raise_exception_when_new_password_is_the_same_as_previous_password": {
            "name": "test_that_validator_raise_exception_when_new_password_is_the_same_as_previous_password",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReusedPreviousPasswordValidator.test_that_validation_pass_when_new_password_is_different_than_previous": {
            "name": "test_that_validation_pass_when_new_password_is_different_than_previous",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sheetstorm-master/users/tests/test_user_login.py": {
        "TestCustomUserLogin.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomUserLogin.test_user_client_should_log_in_with_correct_email_and_password": {
            "name": "test_user_client_should_log_in_with_correct_email_and_password",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomUserLogin.test_user_client_should_not_log_in_with_wrong_email": {
            "name": "test_user_client_should_not_log_in_with_wrong_email",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomUserLogin.test_user_client_should_not_log_in_with_wrong_password": {
            "name": "test_user_client_should_not_log_in_with_wrong_password",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomUserLogin.test_user_client_should_not_log_in_when_email_is_none": {
            "name": "test_user_client_should_not_log_in_when_email_is_none",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCustomUserLogin.test_user_client_should_not_log_in_when_password_is_none": {
            "name": "test_user_client_should_not_log_in_when_password_is_none",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sheetstorm-master/users/tests/test_views.py": {
        "ChangePasswordTests.setUp": {
            "name": "setUp",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChangePasswordTests.test_change_user_password_view_should_change_user_password_on_post": {
            "name": "test_change_user_password_view_should_change_user_password_on_post",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChangePasswordTests.test_change_user_password_view_should_not_change_user_password_when_old_password_is_incorrect": {
            "name": "test_change_user_password_view_should_not_change_user_password_when_old_password_is_incorrect",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ChangePasswordTests.test_change_user_password_view_should_not_change_user_password_when_new_passwords_does_not_match": {
            "name": "test_change_user_password_view_should_not_change_user_password_when_new_passwords_does_not_match",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserListTests.setUp": {
            "name": "setUp",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserListTests.test_user_list_view_should_display_users_list_on_get": {
            "name": "test_user_list_view_should_display_users_list_on_get",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserListTests.test_user_list_view_should_not_be_accessible_for_unauthenticated_user": {
            "name": "test_user_list_view_should_not_be_accessible_for_unauthenticated_user",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserListTests.test_user_employee_should_not_get_list_of_all_employees": {
            "name": "test_user_employee_should_not_get_list_of_all_employees",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserListTests.test_user_manager_should_not_get_list_of_all_employees": {
            "name": "test_user_manager_should_not_get_list_of_all_employees",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserListTests.test_inactive_user_should_be_listed": {
            "name": "test_inactive_user_should_be_listed",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserListTests.test_get_users_by_user_type_method_should_filter_queryset_by_user_type": {
            "name": "test_get_users_by_user_type_method_should_filter_queryset_by_user_type",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserListTests.test_get_ordered_list_of_users_should_order_users_by_hierarchy": {
            "name": "test_get_ordered_list_of_users_should_order_users_by_hierarchy",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserListTests.test_that_user_list_should_redirect_on_post": {
            "name": "test_that_user_list_should_redirect_on_post",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserListTests.test_that_active_user_status_should_be_changed_on_post": {
            "name": "test_that_active_user_status_should_be_changed_on_post",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserListTests.test_that_inactive_user_status_should_be_changed_on_post": {
            "name": "test_that_inactive_user_status_should_be_changed_on_post",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserCreateTests.setUp": {
            "name": "setUp",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserCreateTests.test_user_create_view_should_display_create_user_form_on_get": {
            "name": "test_user_create_view_should_display_create_user_form_on_get",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserCreateTests.test_user_create_view_should_add_new_user_on_post": {
            "name": "test_user_create_view_should_add_new_user_on_post",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserCreateTests.test_user_create_view_should_not_add_new_user_on_post_if_form_is_invalid": {
            "name": "test_user_create_view_should_not_add_new_user_on_post_if_form_is_invalid",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserCreateTests.test_success_message_should_be_added_on_post_if_form_is_valid": {
            "name": "test_success_message_should_be_added_on_post_if_form_is_valid",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserCreateTests.test_that_success_message_should_be_displayed_in_template_on_get_after_user_create_if_form_is_valid": {
            "name": "test_that_success_message_should_be_displayed_in_template_on_get_after_user_create_if_form_is_valid",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserCreateTests.test_that_success_message_should_not_be_added_if_form_is_invalid": {
            "name": "test_that_success_message_should_not_be_added_if_form_is_invalid",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserCreateTests.test_user_create_view_should_add_new_user_on_post_able_to_login_if_form_is_valid": {
            "name": "test_user_create_view_should_add_new_user_on_post_able_to_login_if_form_is_valid",
            "location": 215,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateTests.setUp": {
            "name": "setUp",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateTests.test_user_update_view_should_display_user_details_on_get": {
            "name": "test_user_update_view_should_display_user_details_on_get",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateTests.test_user_update_view_should_update_user_on_post": {
            "name": "test_user_update_view_should_update_user_on_post",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateTests.test_user_update_view_should_not_update_user_on_post_if_form_is_invalid": {
            "name": "test_user_update_view_should_not_update_user_on_post_if_form_is_invalid",
            "location": 254,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateTests.test_user_update_view_should_update_admin_user_on_post_if_form_is_valid": {
            "name": "test_user_update_view_should_update_admin_user_on_post_if_form_is_valid",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateTests.test_user_update_view_should_not_update_admin_user_on_post_if_form_is_invalid": {
            "name": "test_user_update_view_should_not_update_admin_user_on_post_if_form_is_invalid",
            "location": 278,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateByAdminTests.setUp": {
            "name": "setUp",
            "location": 294,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateByAdminTests.test_user_update_by_admin_view_should_display_user_details_on_get": {
            "name": "test_user_update_by_admin_view_should_display_user_details_on_get",
            "location": 310,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateByAdminTests.test_user_update_by_admin_view_should_not_render_non_existing_user": {
            "name": "test_user_update_by_admin_view_should_not_render_non_existing_user",
            "location": 318,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateByAdminTests.test_user_update_by_admin_view_should_update_user_on_post": {
            "name": "test_user_update_by_admin_view_should_update_user_on_post",
            "location": 322,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateByAdminTests.test_user_update_by_admin_view_should_not_update_user_on_post_if_form_is_invalid": {
            "name": "test_user_update_by_admin_view_should_not_update_user_on_post_if_form_is_invalid",
            "location": 329,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateByAdminTests.test_success_message_should_be_added_on_post_if_form_is_valid": {
            "name": "test_success_message_should_be_added_on_post_if_form_is_valid",
            "location": 335,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateByAdminTests.test_that_success_message_should_be_displayed_in_template_on_get_after_user_update_by_admin_if_form_is_valid": {
            "name": "test_that_success_message_should_be_displayed_in_template_on_get_after_user_update_by_admin_if_form_is_valid",
            "location": 342,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UserUpdateByAdminTests.test_that_success_message_should_not_be_added_if_form_is_invalid": {
            "name": "test_that_success_message_should_not_be_added_if_form_is_invalid",
            "location": 350,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SignUpTests.setUp": {
            "name": "setUp",
            "location": 360,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SignUpTests._register_user_using_signup_view": {
            "name": "_register_user_using_signup_view",
            "location": 364,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SignUpTests.test_signup_view_should_display_signup_form_on_get": {
            "name": "test_signup_view_should_display_signup_form_on_get",
            "location": 378,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SignUpTests.test_signup_view_should_add_new_user_on_post": {
            "name": "test_signup_view_should_add_new_user_on_post",
            "location": 383,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SignUpTests.test_registered_user_must_activate_account_by_activation_link": {
            "name": "test_registered_user_must_activate_account_by_activation_link",
            "location": 391,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SignUpTests.test_registered_user_with_wrong_activation_link_will_not_activate_account": {
            "name": "test_registered_user_with_wrong_activation_link_will_not_activate_account",
            "location": 406,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NotificationsTests.setUp": {
            "name": "setUp",
            "location": 426,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NotificationsTests._check_response": {
            "name": "_check_response",
            "location": 436,
            "return": [],
            "arguments": {
                "self": [],
                "response": [],
                "status_code": [],
                "contains": []
            }
        },
        "NotificationsTests.test_manager_should_not_get_any_notification_about_missing_reports": {
            "name": "test_manager_should_not_get_any_notification_about_missing_reports",
            "location": 444,
            "return": [],
            "arguments": {
                "self": [],
                "test_date": []
            }
        },
        "NotificationsTests.test_manager_should_get_notification_about_missing_reports": {
            "name": "test_manager_should_get_notification_about_missing_reports",
            "location": 460,
            "return": [],
            "arguments": {
                "self": [],
                "test_date": [],
                "missing_reports": []
            }
        },
        "NotificationsTests.test_manager_should_only_get_notifications_about_employees_from_his_projects": {
            "name": "test_manager_should_only_get_notifications_about_employees_from_his_projects",
            "location": 469,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NotificationsTests.test_manager_should_not_get_any_notifications_if_they_are_disabled_for_project": {
            "name": "test_manager_should_not_get_any_notifications_if_they_are_disabled_for_project",
            "location": 478,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NotificationsTests.test_manager_should_not_get_get_notifications_about_inactive_employees": {
            "name": "test_manager_should_not_get_get_notifications_about_inactive_employees",
            "location": 490,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomUserPreferencesTests.setUp": {
            "name": "setUp",
            "location": 502,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomUserPreferencesTests.test_custom_user_preferences_should_display_preferences_form_on_get": {
            "name": "test_custom_user_preferences_should_display_preferences_form_on_get",
            "location": 506,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomUserPreferencesTests.test_custom_user_preferences_should_not_display_for_unauthenticated_user": {
            "name": "test_custom_user_preferences_should_not_display_for_unauthenticated_user",
            "location": 514,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomUserPreferencesTests.test_custom_user_preferences_should_update_preferences_on_post": {
            "name": "test_custom_user_preferences_should_update_preferences_on_post",
            "location": 527,
            "return": [],
            "arguments": {
                "self": [],
                "date_preference": []
            }
        },
        "MenuExpansionUpdateTests.setUp": {
            "name": "setUp",
            "location": 540,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MenuExpansionUpdateTests.test_menu_expansion_update_should_not_allow_methods_other_than_post": {
            "name": "test_menu_expansion_update_should_not_allow_methods_other_than_post",
            "location": 544,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MenuExpansionUpdateTests.test_menu_expansion_update_should_update_menu_expansion_setting_in_user_preferences": {
            "name": "test_menu_expansion_update_should_update_menu_expansion_setting_in_user_preferences",
            "location": 551,
            "return": [],
            "arguments": {
                "self": [],
                "expanded_menu": []
            }
        },
        "ResetPasswordTests.setUp": {
            "name": "setUp",
            "location": 564,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResetPasswordTests.test_help_text_for_reused_password_should_display_in_template_response": {
            "name": "test_help_text_for_reused_password_should_display_in_template_response",
            "location": 571,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResetPasswordTests.test_that_new_password_cannot_be_the_same_as_previous_password": {
            "name": "test_that_new_password_cannot_be_the_same_as_previous_password",
            "location": 575,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ResetPasswordTests._generate_valid_reset_password_confirm_url": {
            "name": "_generate_valid_reset_password_confirm_url",
            "location": 584,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sheetstorm-master/users/tests/__init__.py": {},
    "sheetstorm-master/utils/base_tests.py": {
        "BaseModelTestCase.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModelTestCase.initiate_model": {
            "name": "initiate_model",
            "location": 18,
            "return": [
                "str",
                "esm.models.ServiceType"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "django.db.models.fields.Field",
                    "str",
                    "dict"
                ],
                "value": [
                    "django.db.models.fields.Field",
                    "str",
                    "dict"
                ]
            }
        },
        "BaseModelTestCase.default_model": {
            "name": "default_model",
            "location": 24,
            "return": [
                "str",
                "Mapping",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseModelTestCase._field_input_acceptance_test": {
            "name": "_field_input_acceptance_test",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "Iterable",
                    "Callable",
                    "Optional[str]",
                    "Set[str]"
                ],
                "value": [
                    "str",
                    "Iterable",
                    "Callable",
                    "Optional[str]",
                    "Set[str]"
                ],
                "is_valid": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[str]",
                    "Callable"
                ],
                "error_class": [
                    "keras.Model",
                    "int",
                    "bool",
                    "Set[str]",
                    "float",
                    "str",
                    "Optional[List[str]]"
                ],
                "error_message": [
                    "bool",
                    "str",
                    "Callable[[Any], bool]",
                    "type"
                ]
            }
        },
        "BaseModelTestCase.field_should_accept_input": {
            "name": "field_should_accept_input",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "Callable"
                ],
                "value": [
                    "str",
                    "Callable"
                ]
            }
        },
        "BaseModelTestCase.field_should_not_accept_input": {
            "name": "field_should_not_accept_input",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "field": [
                    "bool",
                    "str",
                    "T"
                ],
                "value": [
                    "bool",
                    "str",
                    "T"
                ],
                "error_class": [
                    "bool",
                    "str",
                    "T"
                ],
                "error_message": [
                    "bool",
                    "str",
                    "T"
                ]
            }
        },
        "BaseModelTestCase.field_should_accept_null": {
            "name": "field_should_accept_null",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "field": [
                    "django.db.models.fields.Field",
                    "str",
                    "type"
                ]
            }
        },
        "BaseModelTestCase.field_should_not_accept_null": {
            "name": "field_should_not_accept_null",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "field": [
                    "type",
                    "Type"
                ],
                "error_class": [
                    "type",
                    "Type"
                ],
                "error_message": [
                    "type",
                    "Type"
                ]
            }
        },
        "BaseModelTestCase.field_auto_now_test": {
            "name": "field_auto_now_test",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "auto_field": [
                    "Type[T]",
                    "int",
                    "bool",
                    "dict"
                ],
                "update_field": [
                    "models.Route",
                    "models.Trip",
                    "bool",
                    "int",
                    "str",
                    "passzero.models.entries.Entry"
                ],
                "value": [
                    "models.Route",
                    "models.Trip",
                    "bool",
                    "int",
                    "str",
                    "passzero.models.entries.Entry"
                ]
            }
        },
        "BaseModelTestCase.field_should_have_non_null_default": {
            "name": "field_should_have_non_null_default",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "field": [
                    "bool",
                    "conductor.planner.models.Student",
                    "str"
                ],
                "value": [
                    "str",
                    "Type[T]"
                ]
            }
        },
        "BaseModelTestCase.key_should_not_accept_incorrect_input": {
            "name": "key_should_not_accept_incorrect_input",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "AnyStr",
                    "Set[str]",
                    "type"
                ],
                "value": [
                    "str",
                    "AnyStr",
                    "Set[str]",
                    "type"
                ],
                "error_message": [
                    "str",
                    "Match[str]",
                    "int",
                    "zam_repondeur.services.fetch.an.dossiers.models.DossierRef",
                    "bool"
                ]
            }
        },
        "BaseSerializerTestCase.setUp": {
            "name": "setUp",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSerializerTestCase.initiate_serializer": {
            "name": "initiate_serializer",
            "location": 127,
            "return": [
                "Tuple[int, Optional[str]]",
                "dict",
                "Awaitable[bytes]"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "django.db.models.Field"
                ],
                "value": [
                    "str",
                    "django.db.models.Field"
                ]
            }
        },
        "BaseSerializerTestCase.default_serializer": {
            "name": "default_serializer",
            "location": 132,
            "return": [
                "Dict[str, Set[str]]",
                "int",
                "Dict[str, Any]",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseSerializerTestCase._field_input_acceptance_test": {
            "name": "_field_input_acceptance_test",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "field": [
                    "bool",
                    "str",
                    "Tuple[str]",
                    "Optional[\"Scope\"]"
                ],
                "value": [
                    "str",
                    "bool"
                ],
                "should_be_valid": [
                    "Dict[str, Any]",
                    "List[str]",
                    "Optional[str]",
                    "List[Tuple[str, str]]",
                    "str",
                    "bool"
                ],
                "error_message": [
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "Optional[bool]",
                    "Optional[Union[str, Any]]",
                    "Optional[List[str]]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "BaseSerializerTestCase.field_should_accept_input": {
            "name": "field_should_accept_input",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "Optional[str]",
                    "Type"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "Type"
                ]
            }
        },
        "BaseSerializerTestCase.field_should_not_accept_input": {
            "name": "field_should_not_accept_input",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Optional[str]",
                    "str",
                    "Union[str, Callable]"
                ],
                "value": [
                    "Optional[str]",
                    "str",
                    "Union[str, Callable]"
                ],
                "error_message": [
                    "Optional[str]",
                    "str",
                    "Union[str, Callable]"
                ]
            }
        },
        "BaseSerializerTestCase.field_should_accept_null": {
            "name": "field_should_accept_null",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "field": [
                    "django.db.models.fields.Field",
                    "str",
                    "type"
                ]
            }
        },
        "BaseSerializerTestCase.field_should_not_accept_null": {
            "name": "field_should_not_accept_null",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "field": [
                    "django.db.models.fields.Field",
                    "str",
                    "type"
                ]
            }
        }
    },
    "sheetstorm-master/utils/context_processors.py": {
        "user_preferences": {
            "name": "user_preferences",
            "location": 8,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "Dict[str, Any]",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "Tuple[int]"
                ]
            }
        }
    },
    "sheetstorm-master/utils/decorators.py": {
        "check_permissions": {
            "name": "check_permissions",
            "location": 13,
            "return": [
                "Type[T]",
                "bool",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "allowed_user_types": [
                    "Optional[str]",
                    "List[str]",
                    "str",
                    "list",
                    "Dict[str, Any]"
                ],
                "redirect_path": [
                    "Optional[str]",
                    "List[str]",
                    "str",
                    "list",
                    "Dict[str, Any]"
                ]
            }
        },
        "check_permissions.decorator": {
            "name": "decorator",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "view_func": [
                    "Callable",
                    "Callable[..., Dict]",
                    "bool"
                ]
            }
        },
        "check_permissions.decorator._wrapped_view": {
            "name": "_wrapped_view",
            "location": 25,
            "return": [
                "models.Dashboard",
                "int"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "str"
                ]
            }
        }
    },
    "sheetstorm-master/utils/mixins.py": {
        "UserIsManagerOfCurrentProjectMixin.get_queryset": {
            "name": "get_queryset",
            "location": 18,
            "return": [
                "str",
                "Callable[[], T]",
                "app.models.GameMember",
                "app.models.course.Course",
                "int",
                "zerver.models.Realm",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserIsManagerOfCurrentReportProjectOrAuthorOfCurrentReportMixin.get_queryset": {
            "name": "get_queryset",
            "location": 26,
            "return": [
                "str",
                "Callable[[KT], VT]",
                "Iterable[str]",
                "Type[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserIsAuthorOfCurrentReportMixin.get_queryset": {
            "name": "get_queryset",
            "location": 39,
            "return": [
                "str",
                "Callable[[], T]",
                "app.models.GameMember",
                "app.models.course.Course",
                "int",
                "zerver.models.Realm",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsWorkPercentageMixin.get_context_data": {
            "name": "get_context_data",
            "location": 47,
            "return": [
                "dict",
                "str",
                "IO[bytes]",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsWorkPercentageMixin._get_projects_work_hours_and_percentage": {
            "name": "_get_projects_work_hours_and_percentage",
            "location": 57,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "report_set": [
                    "bool",
                    "str",
                    "Optional[List[str]]",
                    "Dict[str, str]"
                ]
            }
        },
        "ProjectsWorkPercentageMixin._generate_hours_per_project_queryset_from_reports_queryset": {
            "name": "_generate_hours_per_project_queryset_from_reports_queryset",
            "location": 67,
            "return": [
                "purplship.core.models.RateDetails",
                "Callable[[str], None]",
                "cmk.utils.type_defs.HostName",
                "purplship.core.models.TrackingDetails",
                "Optional[purplship.core.models.ShipmentDetails]"
            ],
            "arguments": {
                "reports_queryset": [
                    "django.db.models.QuerySet",
                    "str",
                    "int"
                ]
            }
        },
        "ProjectsWorkPercentageMixin._get_sum_total_of_work_hours_sum_from_hours_per_project_queryset": {
            "name": "_get_sum_total_of_work_hours_sum_from_hours_per_project_queryset",
            "location": 71,
            "return": [
                "bool",
                "str",
                "models.User",
                "float",
                "int",
                "Hashable"
            ],
            "arguments": {
                "hours_per_project_queryset": [
                    "django.db.models.QuerySet",
                    "int"
                ]
            }
        },
        "ProjectsWorkPercentageMixin._get_dict_of_total_work_hours_per_project_statistics": {
            "name": "_get_dict_of_total_work_hours_per_project_statistics",
            "location": 76,
            "return": [
                "str",
                "dict",
                "Exception",
                "tartare.core.models.Job",
                "Dict[str, Any]",
                "tildes.models.scraper.ScraperResult"
            ],
            "arguments": {
                "self": [],
                "queryset": [
                    "purplship.core.utils.Element",
                    "docker.models.containers.Container",
                    "str",
                    "django.db.models.Model",
                    "purplship.core.utils.xml.Element"
                ],
                "work_hours_sum": [
                    "purplship.core.utils.Element",
                    "docker.models.containers.Container",
                    "str",
                    "django.db.models.Model",
                    "purplship.core.utils.xml.Element"
                ]
            }
        },
        "ProjectsWorkPercentageMixin._get_project_hours_sum_and_percentage": {
            "name": "_get_project_hours_sum_and_percentage",
            "location": 87,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool",
                "set",
                "Optional[Dict[str, Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "project_hours": [
                    "django.utils.timezone.timedelta",
                    "Callable",
                    "dict",
                    "Dict[str, Any]"
                ],
                "all_hours": [
                    "django.utils.timezone.timedelta",
                    "Callable",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "sheetstorm-master/utils/models.py": {
        "BaseModel.save": {
            "name": "save",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "force_insert": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "dict",
                    "float"
                ],
                "force_update": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "dict",
                    "float"
                ],
                "using": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "dict",
                    "float"
                ],
                "update_fields": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "dict",
                    "float"
                ]
            }
        }
    },
    "sheetstorm-master/utils/__init__.py": {},
    "sheetstorm-master/utils/tests/test_access_permissions.py": {
        "AccessPermissionsTestCase.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AccessPermissionsTestCase.test_sending_request_to_view_should_be_allowed_only_for_defined_user_types": {
            "name": "test_sending_request_to_view_should_be_allowed_only_for_defined_user_types",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sheetstorm-master/utils/tests/test_mixins.py": {
        "UserIsAuthorOfCurrentReportMixinTestCase.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UserIsAuthorOfCurrentReportMixinTestCase.test_user_is_author_of_current_report_mixin_should_limit_view_report_queryset_if_user_is_employee": {
            "name": "test_user_is_author_of_current_report_mixin_should_limit_view_report_queryset_if_user_is_employee",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UserIsAuthorOfCurrentReportMixinTestCase.test_user_is_author_of_current_report_mixin_should_not_limit_view_report_queryset_if_user_is_not_employee": {
            "name": "test_user_is_author_of_current_report_mixin_should_not_limit_view_report_queryset_if_user_is_not_employee",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UserIsManagerOfCurrentProjectMixinTestCase.setUp": {
            "name": "setUp",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UserIsManagerOfCurrentProjectMixinTestCase.test_user_is_manager_of_current_project_mixin_should_limit_view_project_queryset_if_user_is_manager": {
            "name": "test_user_is_manager_of_current_project_mixin_should_limit_view_project_queryset_if_user_is_manager",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UserIsManagerOfCurrentProjectMixinTestCase.test_user_is_manager_of_current_project_mixin_should_not_limit_view_project_queryset_if_user_is_not_manager": {
            "name": "test_user_is_manager_of_current_project_mixin_should_not_limit_view_project_queryset_if_user_is_not_manager",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UserIsManagerOfCurrentReportProjectOrAuthorOfCurrentReportMixinTestCase.setUp": {
            "name": "setUp",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UserIsManagerOfCurrentReportProjectOrAuthorOfCurrentReportMixinTestCase.test_user_is_manager_of_current_project_or_author_of_current_report_mixin_should_limit_view_project_queryset_if_user_is_manager": {
            "name": "test_user_is_manager_of_current_project_or_author_of_current_report_mixin_should_limit_view_project_queryset_if_user_is_manager",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UserIsManagerOfCurrentReportProjectOrAuthorOfCurrentReportMixinTestCase.test_user_is_manager_of_current_project_or_author_of_current_report_mixin_should_not_limit_view_project_queryset_if_user_is_not_manager": {
            "name": "test_user_is_manager_of_current_project_or_author_of_current_report_mixin_should_not_limit_view_project_queryset_if_user_is_not_manager",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsWorkPercentageMixinTestCase.setUp": {
            "name": "setUp",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsWorkPercentageMixinTestCase.test_project_work_percentage_mixin_should_pass_work_hours_summary_to_report_list_view": {
            "name": "test_project_work_percentage_mixin_should_pass_work_hours_summary_to_report_list_view",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectsWorkPercentageMixinTestCase.test_project_work_percentage_mixin_should_pass_work_hours_summary_to_user_detail_view": {
            "name": "test_project_work_percentage_mixin_should_pass_work_hours_summary_to_user_detail_view",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetProjectsWorkPercentage.setUp": {
            "name": "setUp",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetProjectsWorkPercentage.test_get_projects_work_hours_and_percentage_should_return_dictionary_containing_with_work_time_and_time_percent_per_project": {
            "name": "test_get_projects_work_hours_and_percentage_should_return_dictionary_containing_with_work_time_and_time_percent_per_project",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sheetstorm-master/utils/tests/test_system_check.py": {
        "TestValidEmailDomainList.test_check_settings_valid_email_domain_list_with_correct_list": {
            "name": "test_check_settings_valid_email_domain_list_with_correct_list",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidEmailDomainList.test_check_settings_valid_email_domain_list_warning_message_when_list_contains_duplicates": {
            "name": "test_check_settings_valid_email_domain_list_warning_message_when_list_contains_duplicates",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidEmailDomainList.test_check_settings_valid_email_domain_raise_error_when_it_is_not_instance_of_list": {
            "name": "test_check_settings_valid_email_domain_raise_error_when_it_is_not_instance_of_list",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidEmailDomainList.test_check_settings_valid_email_domain_warning_message_when_list_is_empty": {
            "name": "test_check_settings_valid_email_domain_warning_message_when_list_is_empty",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidEmailDomainList.test_check_settings_valid_email_domain_raise_error_when_domain_doesnt_have_dot": {
            "name": "test_check_settings_valid_email_domain_raise_error_when_domain_doesnt_have_dot",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidEmailDomainList.test_check_settings_valid_email_domain_raise_error_when_domain_contains_prohibited_signs": {
            "name": "test_check_settings_valid_email_domain_raise_error_when_domain_contains_prohibited_signs",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidEmailDomainList.test_check_settings_valid_email_domain_list_raise_error_when_setting_does_not_exist": {
            "name": "test_check_settings_valid_email_domain_list_raise_error_when_setting_does_not_exist",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSiteId.test_check_settings_site_id_raise_error_when_it_is_not_instance_of_integer": {
            "name": "test_check_settings_site_id_raise_error_when_it_is_not_instance_of_integer",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSiteId.test_check_site_id_with_correct_value": {
            "name": "test_check_site_id_with_correct_value",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSiteId.test_check_settings_site_id_raise_error_when_setting_does_not_exist": {
            "name": "test_check_settings_site_id_raise_error_when_setting_does_not_exist",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmailBackend.test_check_settings_email_backend_with_correct_path": {
            "name": "test_check_settings_email_backend_with_correct_path",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmailBackend.test_check_settings_email_backend_should_raise_error_when_it_is_not_instance_of_string": {
            "name": "test_check_settings_email_backend_should_raise_error_when_it_is_not_instance_of_string",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmailBackend.test_check_settings_email_backend_should_raise_error_when_some_module_does_not_exist": {
            "name": "test_check_settings_email_backend_should_raise_error_when_some_module_does_not_exist",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmailBackend.test_check_settings_email_backend_should_raise_error_when_file_does_not_have_attribute": {
            "name": "test_check_settings_email_backend_should_raise_error_when_file_does_not_have_attribute",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmailBackend.test_check_settings_email_backend_raise_error_when_setting_does_not_exist": {
            "name": "test_check_settings_email_backend_raise_error_when_setting_does_not_exist",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sheetstorm-master/utils/tests/__init__.py": {}
}
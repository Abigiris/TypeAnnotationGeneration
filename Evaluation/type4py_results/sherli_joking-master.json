{
    "sherli_joking-master/download_corpora.py": {
        "main": {
            "name": "main",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "sherli_joking-master/know_your_intent.py": {
        "initialize": {
            "name": "initialize",
            "location": 92,
            "return": [],
            "arguments": {}
        },
        "get_synonyms": {
            "name": "get_synonyms",
            "location": 109,
            "return": [],
            "arguments": {
                "word": [],
                "number": []
            }
        },
        "read_CSV_datafile": {
            "name": "read_CSV_datafile",
            "location": 426,
            "return": [],
            "arguments": {
                "filepath": [],
                "intent_dict": []
            }
        },
        "preprocess": {
            "name": "preprocess",
            "location": 445,
            "return": [],
            "arguments": {
                "doc": []
            }
        },
        "find_ngrams": {
            "name": "find_ngrams",
            "location": 457,
            "return": [],
            "arguments": {
                "input_list": [],
                "n": []
            }
        },
        "semhash_tokenizer": {
            "name": "semhash_tokenizer",
            "location": 461,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "semhash_corpus": {
            "name": "semhash_corpus",
            "location": 472,
            "return": [],
            "arguments": {
                "corpus": []
            }
        },
        "get_vectorizer": {
            "name": "get_vectorizer",
            "location": 481,
            "return": [],
            "arguments": {
                "corpus": [],
                "vectorizer_name": []
            }
        },
        "trim": {
            "name": "trim",
            "location": 500,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "_new_classifiers": {
            "name": "_new_classifiers",
            "location": 505,
            "return": [],
            "arguments": {}
        },
        "benchmark": {
            "name": "benchmark",
            "location": 542,
            "return": [],
            "arguments": {
                "clf": [],
                "X_train": [],
                "y_train": [],
                "X_test": [],
                "y_test": [],
                "target_names": [],
                "print_report": [],
                "feature_names": [],
                "print_top10": [],
                "print_cm": []
            }
        },
        "data_for_training": {
            "name": "data_for_training",
            "location": 602,
            "return": [],
            "arguments": {
                "vectorizer_name": [],
                "X_train_raw": [],
                "X_test_raw": [],
                "y_train_raw": [],
                "y_test_raw": []
            }
        },
        "evaluate_dataset": {
            "name": "evaluate_dataset",
            "location": 612,
            "return": [],
            "arguments": {
                "benchmark_dataset": []
            }
        },
        "_get_target_names": {
            "name": "_get_target_names",
            "location": 690,
            "return": [],
            "arguments": {
                "benchmark_dataset": [],
                "prefix": []
            }
        },
        "_get_intent_dict": {
            "name": "_get_intent_dict",
            "location": 695,
            "return": [],
            "arguments": {
                "target_names": []
            }
        },
        "train_classifiers": {
            "name": "train_classifiers",
            "location": 702,
            "return": [],
            "arguments": {
                "benchmark_dataset": []
            }
        },
        "get_vectorized_utterance": {
            "name": "get_vectorized_utterance",
            "location": 745,
            "return": [],
            "arguments": {
                "utterance": [],
                "vectorizer": []
            }
        },
        "predict_intent": {
            "name": "predict_intent",
            "location": 751,
            "return": [],
            "arguments": {
                "vectorized_utterance": [],
                "clf": [],
                "target_names": []
            }
        },
        "print_intent_prediction": {
            "name": "print_intent_prediction",
            "location": 759,
            "return": [],
            "arguments": {
                "utterance": [],
                "classifiers": [],
                "vectorizer": [],
                "target_names": []
            }
        },
        "_get_data_hash": {
            "name": "_get_data_hash",
            "location": 770,
            "return": [],
            "arguments": {
                "orig_csv": [],
                "intents_txt": []
            }
        },
        "_do_fingerprints_match": {
            "name": "_do_fingerprints_match",
            "location": 775,
            "return": [],
            "arguments": {
                "fingerprint_path": [],
                "new_hash": []
            }
        },
        "_update_fingerprint": {
            "name": "_update_fingerprint",
            "location": 785,
            "return": [],
            "arguments": {
                "fingerprint_parent": [],
                "orig_data_path": [],
                "intents_txt_path": []
            }
        },
        "save_models": {
            "name": "save_models",
            "location": 795,
            "return": [],
            "arguments": {
                "dataset_name": [],
                "classifiers": [],
                "vectorizer": []
            }
        },
        "load_models": {
            "name": "load_models",
            "location": 817,
            "return": [],
            "arguments": {
                "dataset_name": [],
                "models_prefix": []
            }
        },
        "write_dataset_traintest": {
            "name": "write_dataset_traintest",
            "location": 842,
            "return": [],
            "arguments": {
                "benchmark_dataset": []
            }
        },
        "_handle_state_predict": {
            "name": "_handle_state_predict",
            "location": 879,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 892,
            "return": [],
            "arguments": {}
        },
        "MeraDataset.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "dataset_path": [],
                "mistake_distance": [],
                "oversample": [],
                "augment_extra_samples": [],
                "synonym_extra_samples": [],
                "additional_synonyms": []
            }
        },
        "MeraDataset.get_nearest_to_i": {
            "name": "get_nearest_to_i",
            "location": 261,
            "return": [],
            "arguments": {
                "self": [],
                "keyboard_cartesian": [],
                "mistake_distance": []
            }
        },
        "MeraDataset._shuffle_word": {
            "name": "_shuffle_word",
            "location": 275,
            "return": [],
            "arguments": {
                "self": [],
                "word": [],
                "cutoff": []
            }
        },
        "MeraDataset._euclidean_distance": {
            "name": "_euclidean_distance",
            "location": 290,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "b": []
            }
        },
        "MeraDataset._get_augment_sentence": {
            "name": "_get_augment_sentence",
            "location": 302,
            "return": [],
            "arguments": {
                "self": [],
                "sentence": []
            }
        },
        "MeraDataset._synonym_word": {
            "name": "_synonym_word",
            "location": 308,
            "return": [],
            "arguments": {
                "word": [],
                "cutoff": []
            }
        },
        "MeraDataset._get_synonym_sentence": {
            "name": "_get_synonym_sentence",
            "location": 316,
            "return": [],
            "arguments": {
                "self": [],
                "sentence": [],
                "cutoff": []
            }
        },
        "MeraDataset._oversample_split": {
            "name": "_oversample_split",
            "location": 322,
            "return": [],
            "arguments": {
                "self": [],
                "X_train": [],
                "y_train": [],
                "synonym_extra_samples": [],
                "augment_extra_samples": []
            }
        },
        "MeraDataset._synonym_split": {
            "name": "_synonym_split",
            "location": 355,
            "return": [],
            "arguments": {
                "self": [],
                "X_train": [],
                "y_train": [],
                "additional_synonyms": []
            }
        },
        "MeraDataset.load": {
            "name": "load",
            "location": 370,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MeraDataset.stratified_split": {
            "name": "stratified_split",
            "location": 387,
            "return": [],
            "arguments": {
                "self": [],
                "oversample": [],
                "augment_extra_samples": [],
                "synonym_extra_samples": [],
                "additional_synonyms": []
            }
        },
        "MeraDataset.get_splits": {
            "name": "get_splits",
            "location": 416,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sherli_joking-master/sherlibot_server.py": {
        "main": {
            "name": "main",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "sherli_joking-master/nemo_utils/AllentoNewsQuery.py": {},
    "sherli_joking-master/nemo_utils/BackendNewsFunctions.py": {
        "initialize": {
            "name": "initialize",
            "location": 27,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "generate_query": {
            "name": "generate_query",
            "location": 51,
            "return": [
                "int",
                "float",
                "str",
                "List[str]"
            ],
            "arguments": {
                "user_sentence": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "extract_news": {
            "name": "extract_news",
            "location": 100,
            "return": [
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "List[str]",
                "str",
                "Dict[str, dict]",
                "Tuple[str, Optional[int]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "user_sentence": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "bool"
                ],
                "include_category": [
                    "str",
                    "Optional[cmk.utils.type_defs.UserId]",
                    "float",
                    "bytes",
                    "bool",
                    "int"
                ],
                "exclude_category": [
                    "str",
                    "Optional[cmk.utils.type_defs.UserId]",
                    "float",
                    "bytes",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "sherli_joking-master/nemo_utils/NewsSummary.py": {},
    "sherli_joking-master/nemo_utils/ReadingCompre.py": {},
    "sherli_joking-master/sherlibot/bot.py": {
        "_generate_bot_response": {
            "name": "_generate_bot_response",
            "location": 27,
            "return": [
                "dict"
            ],
            "arguments": {
                "user_message": [
                    "dialogue.DialogueStates",
                    "jgikbase.idmapping.core.user.User",
                    "Dict[str, Any]",
                    "Optional[Mapping]"
                ],
                "state": [
                    "dialogue.DialogueStates",
                    "str"
                ],
                "session_attributes": [
                    "session_attributes.SessionAttributes",
                    "str",
                    "int",
                    "Dict[Hashable, Iterable[Hashable]]"
                ]
            }
        },
        "Bot.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dynamodb_table_name": [
                    "str",
                    "Optional[str]"
                ],
                "dynamodb_endpoint_url": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Bot._handle_message_impl": {
            "name": "_handle_message_impl",
            "location": 122,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "user_message": [
                    "slowbro.core.user_message.UserMessage",
                    "Dict[str, Any]"
                ],
                "ser_session_attributes": [
                    "Dict[str, Any]",
                    "Optional[Dict[str, str]]",
                    "bool"
                ]
            }
        }
    },
    "sherli_joking-master/sherlibot/dialogue.py": {
        "DialogueStateResult.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "next_state": [
                    "int",
                    "raiden.utils.FeeAmount",
                    "raiden.utils.PaymentID",
                    "raiden.utils.PaymentHashInvoice",
                    "raiden.utils.TargetAddress",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.SecreHash",
                    "raiden.utils.PaymentAmount"
                ],
                "bot_message": [
                    "Optional[str]",
                    "raiden.utils.TokenAmount",
                    "int",
                    "List[List[str]]",
                    "List[int]",
                    "bool",
                    "str",
                    "Sequence[str]"
                ],
                "memory_dict": [
                    "List[Dict[str, Any]]",
                    "Optional[Dict[str, Any]]",
                    "dict",
                    "Tuple['cirq.Qid']",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "sherli_joking-master/sherlibot/intents.py": {
        "initialize": {
            "name": "initialize",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "get_model": {
            "name": "get_model",
            "location": 42,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "dataset_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "clf_by_name": {
            "name": "clf_by_name",
            "location": 54,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "Container[str]"
            ],
            "arguments": {
                "classifiers": [
                    "List[Tuple[Any, str]]",
                    "List[str]",
                    "str",
                    "Iterable[str]",
                    "bool",
                    "Optional[str]"
                ],
                "classifier_name": [
                    "str"
                ]
            }
        },
        "predict_intent": {
            "name": "predict_intent",
            "location": 64,
            "return": [
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "utterance": [
                    "str"
                ],
                "dataset_enum": [
                    "Union[str, Pattern]",
                    "type",
                    "Optional[str]",
                    "int",
                    "dict"
                ]
            }
        }
    },
    "sherli_joking-master/sherlibot/round_attributes.py": {
        "RoundAttributes.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "round_index": [
                    "str",
                    "bool"
                ],
                "user_message": [
                    "int",
                    "str"
                ],
                "bot_message": [
                    "str",
                    "bool"
                ]
            }
        },
        "RoundAttributes.from_dict": {
            "name": "from_dict",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "json_obj": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "RoundAttributes.to_dict": {
            "name": "to_dict",
            "location": 32,
            "return": [
                "str",
                "bytes",
                "bool",
                "Sequence[float]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sherli_joking-master/sherlibot/session_attributes.py": {
        "SessionAttributes.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "search_topics": [
                    "int",
                    "List[str]",
                    "str",
                    "Union[str, float]"
                ],
                "queried_articles": [
                    "int",
                    "List[str]",
                    "str",
                    "Union[str, float]"
                ],
                "current_article": [
                    "Callable[[T], bool]",
                    "int",
                    "str",
                    "Tuple[str]"
                ],
                "current_article_index": [
                    "int",
                    "str",
                    "Tuple[str]",
                    "bool",
                    "Optional[str]",
                    "List[str]"
                ],
                "substate_memory": [
                    "int",
                    "List[str]",
                    "str",
                    "Union[str, float]"
                ],
                "next_round_index": [
                    "int",
                    "List[str]",
                    "str",
                    "Union[str, float]"
                ],
                "next_dialogue_state": [
                    "int",
                    "float",
                    "Optional[bool]"
                ]
            }
        },
        "SessionAttributes.article_candidate": {
            "name": "article_candidate",
            "location": 46,
            "return": [
                "bool",
                "Dict[str, Set[str]]",
                "Dict[str, Any]",
                "Type",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "SessionAttributes.current_article_index": {
            "name": "current_article_index",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "int",
                    "float",
                    "Iterator",
                    "Dict[str, Any]"
                ]
            }
        },
        "SessionAttributes.update_search": {
            "name": "update_search",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "search_topics": [
                    "dict",
                    "Set[str]",
                    "int",
                    "float",
                    "str",
                    "Sequence"
                ],
                "queried_articles": [
                    "dict",
                    "Set[str]",
                    "int",
                    "float",
                    "str",
                    "Sequence"
                ]
            }
        },
        "SessionAttributes.update_current_article": {
            "name": "update_current_article",
            "location": 70,
            "return": [
                "str",
                "Set[str]",
                "DefaultDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "SessionAttributes.to_dict": {
            "name": "to_dict",
            "location": 91,
            "return": [
                "str",
                "bytes",
                "bool",
                "Sequence[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SessionAttributes.from_dict": {
            "name": "from_dict",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "json_obj": [
                    "dict",
                    "Dict[str, bool]"
                ]
            }
        }
    },
    "sherli_joking-master/sherlibot/utils.py": {
        "get_config_dir": {
            "name": "get_config_dir",
            "location": 15,
            "return": [
                "pathlib.Path",
                "str",
                "pathlib.PurePath",
                "List[int]"
            ],
            "arguments": {}
        },
        "AutoName._generate_next_value_": {
            "name": "_generate_next_value_",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "List[int]",
                    "Optional[str]",
                    "int"
                ],
                "start": [
                    "int",
                    "List[str]",
                    "bool",
                    "str"
                ],
                "count": [
                    "int",
                    "List[str]",
                    "bool",
                    "str"
                ],
                "last_values": [
                    "int",
                    "List[str]",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "sherli_joking-master/sherlibot/__init__.py": {},
    "sherli_joking-master/sherlibot/dialogue_states/find_article.py": {
        "_extract_topics_from_utterance": {
            "name": "_extract_topics_from_utterance",
            "location": 39,
            "return": [
                "bool",
                "Optional[int]",
                "Optional[bool]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "utterance": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[Sequence[str]]",
                    "Set[str]"
                ]
            }
        },
        "initialize": {
            "name": "initialize",
            "location": 48,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "entrypoint": {
            "name": "entrypoint",
            "location": 59,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "user_message": [
                    "slowbro.core.user_message.UserMessage",
                    "str",
                    "List[str]"
                ],
                "session_attributes": [
                    "session_attributes.SessionAttributes",
                    "axion.utils.types.AnyCallable",
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "memory_dict": [
                    "Optional[Dict[str, Any]]",
                    "Iterable[str]",
                    "bool",
                    "List[str]",
                    "Dict[str, Any]",
                    "user_message.UserMessage"
                ]
            }
        }
    },
    "sherli_joking-master/sherlibot/dialogue_states/list_articles.py": {
        "initialize": {
            "name": "initialize",
            "location": 49,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "entrypoint": {
            "name": "entrypoint",
            "location": 72,
            "return": [
                "bool",
                "str",
                "Optional[List[int]]"
            ],
            "arguments": {
                "user_message": [
                    "str",
                    "Optional[cmk.utils.type_defs.UserId]",
                    "bool"
                ],
                "session_attributes": [
                    "session_attributes.SessionAttributes",
                    "str"
                ],
                "memory_dict": [
                    "Optional[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "ListArticleMemory.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sub_state": []
            }
        },
        "ListArticleMemory.from_dict": {
            "name": "from_dict",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "json_obj": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "ListArticleMemory.to_dict": {
            "name": "to_dict",
            "location": 43,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sherli_joking-master/sherlibot/dialogue_states/qna.py": {
        "initialize": {
            "name": "initialize",
            "location": 49,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "entrypoint": {
            "name": "entrypoint",
            "location": 83,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "user_message": [
                    "str",
                    "int"
                ],
                "session_attributes": [
                    "session_attributes.SessionAttributes",
                    "str"
                ],
                "memory_dict": [
                    "Optional[Dict[str, Any]]",
                    "allennlp.common.util.JsonDict",
                    "str"
                ]
            }
        },
        "QnaMemory.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sub_state": [
                    "numpy.random.RandomState",
                    "core.models.GroupingState",
                    "raiden.utils.List[raiden.transfer.state.RouteState]"
                ]
            }
        },
        "QnaMemory.from_dict": {
            "name": "from_dict",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "json_obj": [
                    "Dict[str, Any]",
                    "raiden.utils.SecreHash",
                    "dict"
                ]
            }
        },
        "QnaMemory.to_dict": {
            "name": "to_dict",
            "location": 43,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sherli_joking-master/sherlibot/dialogue_states/_common.py": {
        "get_echo_query_message": {
            "name": "get_echo_query_message",
            "location": 9,
            "return": [
                "str",
                "int",
                "tuple",
                "List[str]"
            ],
            "arguments": {
                "session_attributes": [
                    "session_attributes.SessionAttributes",
                    "int",
                    "Iterable[float]"
                ]
            }
        }
    },
    "sherli_joking-master/sherlibot/dialogue_states/__init__.py": {},
    "sherli_joking-master/slowbro/__init__.py": {},
    "sherli_joking-master/slowbro/channels/__init__.py": {},
    "sherli_joking-master/slowbro/channels/alexaprize/bot_builder.py": {
        "AlexaPrizeBotBuilder.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot": [
                    "int",
                    "bool",
                    "float"
                ],
                "loglevel": [
                    "int",
                    "Optional[str]",
                    "Iterable[str]"
                ],
                "logfile": [
                    "int",
                    "Optional[str]",
                    "Iterable[str]"
                ]
            }
        }
    },
    "sherli_joking-master/slowbro/channels/alexaprize/exception_handlers.py": {
        "DefaultExceptionHandler.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DefaultExceptionHandler.can_handle": {
            "name": "can_handle",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "handler_input": [
                    "Exception",
                    "str",
                    "ask_sdk_core.handler_inpuHandlerInput",
                    "int",
                    "List[str]",
                    "bool"
                ],
                "exception": [
                    "Exception",
                    "str",
                    "ask_sdk_core.handler_inpuHandlerInput",
                    "int",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "DefaultExceptionHandler.handle": {
            "name": "handle",
            "location": 27,
            "return": [
                "dict",
                "Tuple[flask.Response, int]"
            ],
            "arguments": {
                "self": [],
                "handler_input": [
                    "ask_sdk_core.handler_inpuHandlerInput",
                    "int",
                    "Optional[bool]",
                    "bool"
                ],
                "exception": [
                    "Exception",
                    "str",
                    "ask_sdk_core.handler_inpuHandlerInput",
                    "int",
                    "List[str]",
                    "bool"
                ]
            }
        }
    },
    "sherli_joking-master/slowbro/channels/alexaprize/request_handlers.py": {
        "LaunchRequestHandler.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "LaunchRequestHandler.can_handle": {
            "name": "can_handle",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "handler_input": [
                    "ask_sdk_core.handler_inpuHandlerInput",
                    "type"
                ]
            }
        },
        "LaunchRequestHandler.handle": {
            "name": "handle",
            "location": 30,
            "return": [
                "dict",
                "Tuple[flask.Response, int]"
            ],
            "arguments": {
                "self": [],
                "handler_input": [
                    "ask_sdk_core.handler_inpuHandlerInput"
                ]
            }
        },
        "IntentRequestHandler.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "IntentRequestHandler.can_handle": {
            "name": "can_handle",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "handler_input": [
                    "ask_sdk_core.handler_inpuHandlerInput",
                    "type"
                ]
            }
        },
        "IntentRequestHandler.handle": {
            "name": "handle",
            "location": 56,
            "return": [
                "dict",
                "Tuple[flask.Response, int]"
            ],
            "arguments": {
                "self": [],
                "handler_input": [
                    "ask_sdk_core.handler_inpuHandlerInput",
                    "core.board.Board"
                ]
            }
        },
        "SessionEndedRequestHandler.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "SessionEndedRequestHandler.can_handle": {
            "name": "can_handle",
            "location": 83,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "handler_input": [
                    "ask_sdk_core.handler_inpuHandlerInput",
                    "type"
                ]
            }
        },
        "SessionEndedRequestHandler.handle": {
            "name": "handle",
            "location": 86,
            "return": [
                "dict",
                "Tuple[flask.Response, int]"
            ],
            "arguments": {
                "self": [],
                "handler_input": [
                    "Callable"
                ]
            }
        }
    },
    "sherli_joking-master/slowbro/channels/alexaprize/utils.py": {
        "parse_handler_input": {
            "name": "parse_handler_input",
            "location": 16,
            "return": [
                "bool",
                "str",
                "Mapping",
                "Optional[str]",
                "set"
            ],
            "arguments": {
                "handler_input": [
                    "ask_sdk_core.handler_inpuHandlerInput",
                    "bool",
                    "str"
                ]
            }
        },
        "build_response": {
            "name": "build_response",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "bot_message": [
                    "slowbro.core.bot_message.BotMessage",
                    "dict",
                    "List[Dict[str, Any]]"
                ],
                "response_builder": [
                    "core_lib.core.processing_chain.Chain",
                    "bool"
                ]
            }
        }
    },
    "sherli_joking-master/slowbro/channels/alexaprize/__init__.py": {},
    "sherli_joking-master/slowbro/core/bot_base.py": {
        "BotBase.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "round_saver_adapter": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "BotBase.handle_message": {
            "name": "handle_message",
            "location": 22,
            "return": [
                "str",
                "MutableMapping[str, Any]",
                "Callable[[T], None]"
            ],
            "arguments": {
                "self": [],
                "user_message": [
                    "int",
                    "Dict[str, Any]",
                    "user_message.UserMessage"
                ],
                "ser_session_attributes": [
                    "int",
                    "Dict[str, Any]",
                    "user_message.UserMessage"
                ]
            }
        },
        "BotBase._handle_message_impl": {
            "name": "_handle_message_impl",
            "location": 41,
            "return": [
                "typing.Tuple[builtins.int, typing.Dict[builtins.str, typing.Any], bot_message.BotMessage, typing.Dict[builtins.str, typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "user_message": [
                    "Dict[str, Any]",
                    "user_message.UserMessage",
                    "Optional[str]",
                    "str",
                    "Optional"
                ],
                "ser_session_attributes": [
                    "Dict[str, Any]",
                    "user_message.UserMessage",
                    "Optional[str]",
                    "str",
                    "Optional"
                ]
            }
        },
        "BotBase.handle_exception": {
            "name": "handle_exception",
            "location": 47,
            "return": [
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "user_message": [
                    "bool",
                    "Sequence[int]",
                    "int",
                    "slowbro.core.user_message.UserMessage",
                    "float"
                ],
                "ser_session_attributes": [
                    "Dict[str, Any]",
                    "Exception",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Any",
                    "Optional[Dict]"
                ],
                "exception": [
                    "Dict[str, Any]",
                    "Exception",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Any",
                    "Optional[Dict]"
                ]
            }
        },
        "BotBase._save_round_attributes": {
            "name": "_save_round_attributes",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session_id": [
                    "str",
                    "int",
                    "bool"
                ],
                "round_index": [
                    "str",
                    "int",
                    "bool"
                ],
                "ser_round_attributes": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "sherli_joking-master/slowbro/core/bot_builder_base.py": {
        "_configure_logging": {
            "name": "_configure_logging",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "loglevel": [
                    "int",
                    "str",
                    "bool"
                ],
                "logfile": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "BotBuilderBase.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loglevel": [
                    "int",
                    "Optional[str]",
                    "Type",
                    "Iterable"
                ],
                "logfile": [
                    "int",
                    "Optional[str]",
                    "Type",
                    "Iterable"
                ]
            }
        },
        "BotBuilderBase.lambda_function": {
            "name": "lambda_function",
            "location": 40,
            "return": [
                "int",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotBuilderBase.run_server": {
            "name": "run_server",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "bool"
                ],
                "port": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "sherli_joking-master/slowbro/core/bot_message.py": {
        "BotMessage.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response_ssml": [
                    "str",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "List[Tuple[str, str]]",
                    "bool"
                ],
                "reprompt_ssml": [
                    "bool",
                    "Union[Callable, str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]"
                ],
                "card_title": [
                    "bool",
                    "Union[Callable, str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]"
                ],
                "card_content": [
                    "str",
                    "bytes",
                    "bool",
                    "Mapping"
                ],
                "should_end_session": [
                    "Optional[bool]",
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "BotMessage.to_dict": {
            "name": "to_dict",
            "location": 20,
            "return": [
                "str",
                "bytes",
                "bool",
                "Sequence[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BotMessage.from_dict": {
            "name": "from_dict",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "json_obj": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "sherli_joking-master/slowbro/core/dynamodb_utils.py": {
        "dump_item_to_dynamodb": {
            "name": "dump_item_to_dynamodb",
            "location": 17,
            "return": [
                "Optional[int]",
                "Optional[bool]",
                "Optional[float]"
            ],
            "arguments": {
                "item": [
                    "list",
                    "str",
                    "List[str]",
                    "Counter[str]"
                ]
            }
        },
        "load_item_from_dynamodb": {
            "name": "load_item_from_dynamodb",
            "location": 74,
            "return": [
                "Optional[str]",
                "Optional[float]",
                "Optional[dict]",
                "Optional[int]"
            ],
            "arguments": {
                "item": [
                    "Dict[str, Any]",
                    "NamedTuple",
                    "Mapping[str, str]",
                    "list",
                    "str",
                    "bool"
                ]
            }
        },
        "batch_get_items_wrapper": {
            "name": "batch_get_items_wrapper",
            "location": 113,
            "return": [
                "dict",
                "Optional[Dict[str, Any]]",
                "str",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "request_items": [
                    "bool",
                    "Dict[str, Dict[str, Any]]",
                    "str"
                ],
                "dynamodb_client": [
                    "Dict[str, Dict[str, Any]]",
                    "Optional[Dict[str, str]]"
                ]
            }
        }
    },
    "sherli_joking-master/slowbro/core/round_saver.py": {
        "RoundSaverAdapterBase.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RoundSaverAdapterBase.save_round": {
            "name": "save_round",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session_id": [
                    "int",
                    "Dict[str, object]",
                    "str",
                    "bool",
                    "List[str]"
                ],
                "round_index": [
                    "int",
                    "Dict[str, object]",
                    "str",
                    "bool",
                    "List[str]"
                ],
                "round_attributes": [
                    "int",
                    "Dict[str, object]",
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "RoundSaverAdapterBase.get_round": {
            "name": "get_round",
            "location": 31,
            "return": [
                "typing.Optional[typing.Dict[builtins.str, typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "session_id": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "list",
                    "bool",
                    "set",
                    "Optional[bool]"
                ],
                "round_index": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "list",
                    "bool",
                    "set",
                    "Optional[bool]"
                ],
                "attribute_names": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "list",
                    "bool",
                    "set",
                    "Optional[bool]"
                ]
            }
        },
        "RoundSaver.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "saver_adapter": [
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[Callable]",
                    "Optional[Hashable]"
                ]
            }
        },
        "RoundSaver.save_round": {
            "name": "save_round",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session_id": [
                    "str",
                    "int",
                    "bool",
                    "authentication.session.models.current_user.CurrentUser"
                ],
                "round_index": [
                    "str",
                    "int",
                    "bool",
                    "authentication.session.models.current_user.CurrentUser"
                ],
                "round_attributes": [
                    "str",
                    "int",
                    "bool",
                    "authentication.session.models.current_user.CurrentUser"
                ]
            }
        },
        "RoundSaver.get_round": {
            "name": "get_round",
            "location": 60,
            "return": [
                "bool",
                "Optional[str]",
                "int",
                "str",
                "sqlalchemy.orm.session.Session",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "session_id": [
                    "int",
                    "str",
                    "bytes",
                    "List[str]"
                ],
                "round_index": [
                    "int",
                    "str",
                    "bytes",
                    "List[str]"
                ],
                "attribute_names": [
                    "int",
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "DynamoDbRoundSaverAdapter.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "endpoint_url": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "DynamoDbRoundSaverAdapter.save_round": {
            "name": "save_round",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session_id": [
                    "int",
                    "Set[str]"
                ],
                "round_index": [
                    "int",
                    "Set[str]"
                ],
                "round_attributes": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "DynamoDbRoundSaverAdapter.get_round": {
            "name": "get_round",
            "location": 109,
            "return": [
                "Optional[int]",
                "bool",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "session_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "round_index": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "attribute_names": [
                    "str",
                    "Optional[str]",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "DynamoDbRoundSaverAdapter._create_table_if_not_exists": {
            "name": "_create_table_if_not_exists",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dynamodb_resource": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "sherli_joking-master/slowbro/core/slowbro_logger.py": {
        "SlowbroLogger.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "logging.Logger",
                    "int",
                    "str",
                    "bool"
                ],
                "request_id": [
                    "str"
                ]
            }
        },
        "SlowbroLogger.process": {
            "name": "process",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "List[List[str]]",
                    "Dict[str, Any]",
                    "str"
                ],
                "kwargs": []
            }
        }
    },
    "sherli_joking-master/slowbro/core/user_message.py": {
        "AsrHypothesisToken.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T",
                    "int",
                    "float",
                    "str"
                ],
                "confidence": [
                    "int",
                    "list",
                    "str",
                    "bool",
                    "float"
                ],
                "start_offset": [
                    "int",
                    "Optional[int]",
                    "Tuple[int, int]"
                ],
                "end_offset": [
                    "Tuple[int, int]",
                    "float",
                    "int"
                ]
            }
        },
        "AsrHypothesisToken.to_dict": {
            "name": "to_dict",
            "location": 23,
            "return": [
                "str",
                "bytes",
                "bool",
                "Sequence[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsrHypothesisToken.from_dict": {
            "name": "from_dict",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "json_obj": [
                    "float",
                    "int",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "AsrHypothesisUtterance.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "str",
                    "List[str]"
                ],
                "confidence": [
                    "Sequence",
                    "str",
                    "bool"
                ]
            }
        },
        "AsrHypothesisUtterance.__str__": {
            "name": "__str__",
            "location": 49,
            "return": [
                "List[float]",
                "int",
                "Dict[str, Any]",
                "List[Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsrHypothesisUtterance.to_dict": {
            "name": "to_dict",
            "location": 55,
            "return": [
                "str",
                "bytes",
                "bool",
                "Sequence[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AsrHypothesisUtterance.from_dict": {
            "name": "from_dict",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "json_obj": [
                    "dict",
                    "Dict[str, Any]",
                    "Exception",
                    "str"
                ]
            }
        },
        "UserMessage.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "str",
                    "bytes",
                    "int",
                    "bool"
                ],
                "channel": [
                    "str",
                    "bytes",
                    "int",
                    "bool"
                ],
                "request_id": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "session_id": [
                    "str",
                    "Set[int]",
                    "int",
                    "Optional[int]"
                ],
                "user_id": [
                    "str",
                    "int",
                    "bytes"
                ],
                "text": [
                    "str",
                    "bytes",
                    "int",
                    "bool"
                ],
                "asr_hypos": [
                    "str",
                    "bytes",
                    "int",
                    "bool"
                ]
            }
        },
        "UserMessage.to_dict": {
            "name": "to_dict",
            "location": 94,
            "return": [
                "str",
                "bytes",
                "bool",
                "Sequence[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserMessage.from_dict": {
            "name": "from_dict",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "json_obj": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "UserMessage.get_utterance": {
            "name": "get_utterance",
            "location": 121,
            "return": [
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sherli_joking-master/slowbro/core/__init__.py": {},
    "sherli_joking-master/tests/__init__.py": {},
    "sherli_joking-master/tests/sherlibot/test_intents.py": {
        "init_intent_detector": {
            "name": "init_intent_detector",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_predict_intent": {
            "name": "test_predict_intent",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "dataset_enum": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "sherli_joking-master/tests/sherlibot/test_round_attributes.py": {
        "test_dict_serialization": {
            "name": "test_dict_serialization",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "round_attributes": [
                    "dict"
                ]
            }
        }
    },
    "sherli_joking-master/tests/sherlibot/test_session_attributes.py": {
        "test_dict_serialization": {
            "name": "test_dict_serialization",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "session_attributes": [
                    "bool",
                    "List[Dict[str, Any]]"
                ]
            }
        }
    },
    "sherli_joking-master/tests/sherlibot/__init__.py": {},
    "sherli_joking-master/tests/sherlibot/dialogue_states/test_find_article.py": {
        "_SessionAttributesStrategy": {
            "name": "_SessionAttributesStrategy",
            "location": 24,
            "return": [
                "dict",
                "Exception",
                "tartare.core.models.Job",
                "Dict[str, Any]",
                "str",
                "Dict[str, Union[str, Set]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "draw": [
                    "Optional[int]",
                    "Dict[int, dict]",
                    "str",
                    "Callable",
                    "List[List[int]]"
                ]
            }
        },
        "_pseudo_init_list_articles": {
            "name": "_pseudo_init_list_articles",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_keyprhase_extraction": {
            "name": "test_keyprhase_extraction",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "utterance": [
                    "str"
                ]
            }
        },
        "test_entrypoint": {
            "name": "test_entrypoint",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "data_strategy": [
                    "int",
                    "Dict[str, Any]",
                    "tuple"
                ],
                "user_message": [
                    "Optional[str]",
                    "str",
                    "int",
                    "bool"
                ],
                "session_attributes": [
                    "Optional[str]",
                    "str",
                    "int",
                    "bool"
                ],
                "memory_dict": [
                    "bool",
                    "str"
                ]
            }
        },
        "_PseudoNewsAPIClient.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data_strategy": [
                    "List[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "_PseudoNewsAPIClient.get_everything": {
            "name": "get_everything",
            "location": 60,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "q": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "_PseudoNewsAPIClientContext.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data_strategy": [
                    "List[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "_PseudoNewsAPIClientContext.__enter__": {
            "name": "__enter__",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_PseudoNewsAPIClientContext.__exit__": {
            "name": "__exit__",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_PseudoExtractTopicsFromUtterance.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data_strategy": [
                    "List[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "_PseudoExtractTopicsFromUtterance._pseudo_extract_topics": {
            "name": "_pseudo_extract_topics",
            "location": 94,
            "return": [
                "bool",
                "str",
                "List[Dict[str, Any]]",
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_PseudoExtractTopicsFromUtterance.__enter__": {
            "name": "__enter__",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_PseudoExtractTopicsFromUtterance.__exit__": {
            "name": "__exit__",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sherli_joking-master/tests/sherlibot/dialogue_states/test_list_articles.py": {
        "_SessionAttributesStrategy": {
            "name": "_SessionAttributesStrategy",
            "location": 26,
            "return": [
                "dict",
                "Exception",
                "tartare.core.models.Job",
                "Dict[str, Any]",
                "str",
                "Dict[str, Union[str, Set]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "draw": [
                    "Optional[int]",
                    "Dict[int, dict]",
                    "str",
                    "Callable",
                    "List[List[int]]"
                ]
            }
        },
        "_pseudo_init_list_articles": {
            "name": "_pseudo_init_list_articles",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_list_articles_memory_dict_serialization": {
            "name": "test_list_articles_memory_dict_serialization",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "memory": [
                    "core.models.Grouping",
                    "str",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Callable"
                ]
            }
        },
        "test_entrypoint": {
            "name": "test_entrypoint",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "data_strategy": [
                    "int",
                    "Dict[str, Any]",
                    "tuple"
                ],
                "user_message": [
                    "bool",
                    "str"
                ],
                "session_attributes": [
                    "bool",
                    "str"
                ],
                "memory_dict": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "sherli_joking-master/tests/sherlibot/dialogue_states/test_qna.py": {
        "_pseudo_init_qna": {
            "name": "_pseudo_init_qna",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_qnamemory_dict_serialization": {
            "name": "test_qnamemory_dict_serialization",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "memory": [
                    "core.models.Grouping",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "Callable"
                ]
            }
        },
        "test_entrypoint": {
            "name": "test_entrypoint",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "data_strategy": [
                    "int",
                    "Dict[str, Any]",
                    "tuple"
                ],
                "user_message": [
                    "Sequence['UserProfile']",
                    "bool",
                    "str"
                ],
                "session_attributes": [
                    "Sequence['UserProfile']",
                    "bool",
                    "str"
                ],
                "memory_dict": [
                    "Sequence['UserProfile']",
                    "bool"
                ]
            }
        },
        "_PseudoPredictor.predict": {
            "name": "predict",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "passage": [
                    "str",
                    "Sequence[T]",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "question": [
                    "str",
                    "Sequence[T]",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        }
    },
    "sherli_joking-master/tests/sherlibot/dialogue_states/_common.py": {
        "PseudoPredictIntent.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data_strategy": [
                    "str",
                    "List['PlotInfo']"
                ]
            }
        },
        "PseudoPredictIntent._pseudo_predict_intent": {
            "name": "_pseudo_predict_intent",
            "location": 17,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "utterance": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "dataset_enum": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "PseudoPredictIntent.__enter__": {
            "name": "__enter__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PseudoPredictIntent.__exit__": {
            "name": "__exit__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sherli_joking-master/tests/sherlibot/dialogue_states/__init__.py": {}
}
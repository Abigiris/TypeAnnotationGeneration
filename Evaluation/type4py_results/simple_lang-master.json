{
    "simple_lang-master/functionality_tester.py": {},
    "simple_lang-master/simple_lang.py": {
        "calcualte_crc": {
            "name": "calcualte_crc",
            "location": 14,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "file_data": [
                    "bytes",
                    "str",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "compile_file": {
            "name": "compile_file",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "pathlib.Path",
                    "Optional[str]",
                    "Optional[pathlib.Path]",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "execute_file": {
            "name": "execute_file",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Union[str, pathlib.Path]",
                    "pathlib.Path"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 89,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "str",
                    "Mapping",
                    "Dict[str, Any]"
                ]
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 116,
            "return": [
                "argparse.ArgumentParser",
                "Type[Parser]"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "simple_lang-master/interpreter/__init__.py": {},
    "simple_lang-master/interpreter/src/__init__.py": {},
    "simple_lang-master/interpreter/src/lexer/keywords.py": {},
    "simple_lang-master/interpreter/src/lexer/__init__.py": {},
    "simple_lang-master/interpreter/src/parser/errors.py": {
        "ParsingError.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "line_index": [
                    "float",
                    "Optional[Mapping]",
                    "Type['AbstractIntegrationConversation']",
                    "int",
                    "str"
                ],
                "line": [
                    "str",
                    "float",
                    "int",
                    "dict"
                ],
                "exception": [
                    "float",
                    "Optional[Mapping]",
                    "Type['AbstractIntegrationConversation']",
                    "int",
                    "str"
                ]
            }
        }
    },
    "simple_lang-master/interpreter/src/parser/operation.py": {},
    "simple_lang-master/interpreter/src/parser/parser.py": {
        "is_inplace": {
            "name": "is_inplace",
            "location": 203,
            "return": [
                "str",
                "int",
                "List[str]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "argument": [
                    "float",
                    "str",
                    "bool",
                    "Union[int, float]",
                    "List[List[int]]"
                ]
            }
        },
        "Parser.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Parser.parse": {
            "name": "parse",
            "location": 51,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str"
                ]
            }
        },
        "Parser.parse_line": {
            "name": "parse_line",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ]
            }
        },
        "Parser.parse_argument": {
            "name": "parse_argument",
            "location": 153,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "argument": [],
                "is_label_or_jump": [
                    "bool"
                ]
            }
        }
    },
    "simple_lang-master/interpreter/src/parser/__init__.py": {},
    "simple_lang-master/interpreter/src/parser/test/test_errors.py": {
        "test_parsing_error": {
            "name": "test_parsing_error",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "simple_lang-master/interpreter/src/parser/test/test_parser.py": {
        "test_is_inplace": {
            "name": "test_is_inplace",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parser_ok": {
            "name": "test_parser_ok",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parser_error": {
            "name": "test_parser_error",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parser_hack_not": {
            "name": "test_parser_hack_not",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parser_parse_arg": {
            "name": "test_parser_parse_arg",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parser_parse_line": {
            "name": "test_parser_parse_line",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "simple_lang-master/interpreter/src/parser/test/__init__.py": {},
    "simple_lang-master/interpreter/src/virtual_machine/bytecode.py": {},
    "simple_lang-master/interpreter/src/virtual_machine/byte_cc.py": {
        "BytecodeCompiler.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file_crc": [
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "BytecodeCompiler.compile": {
            "name": "compile",
            "location": 27,
            "return": [
                "Mapping",
                "int"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "List[interpreter.src.parser.operation.Operation]",
                    "str",
                    "int",
                    "bool",
                    "bytes"
                ]
            }
        },
        "BytecodeCompiler.generate_metadata": {
            "name": "generate_metadata",
            "location": 58,
            "return": [
                "str",
                "Optional[int]",
                "Optional[str]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "file_crc": [
                    "int",
                    "str"
                ]
            }
        },
        "BytecodeCompiler.encode_operation": {
            "name": "encode_operation",
            "location": 68,
            "return": [
                "Union[str, List[str]]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "operation": [
                    "cirq.ops.Operation",
                    "int",
                    "Iterable[Any]",
                    "str",
                    "cirq.Operation"
                ]
            }
        }
    },
    "simple_lang-master/interpreter/src/virtual_machine/errors.py": {},
    "simple_lang-master/interpreter/src/virtual_machine/__init__.py": {},
    "simple_lang-master/interpreter/src/virtual_machine/test/test_byte_cc.py": {
        "test_compiler_compile_ok": {
            "name": "test_compiler_compile_ok",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_compiler_compile_exception": {
            "name": "test_compiler_compile_exception",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "simple_lang-master/interpreter/src/virtual_machine/test/__init__.py": {},
    "simple_lang-master/interpreter/src/virtual_machine/test/vm/test_binary_ops.py": {
        "gen_bytecode": {
            "name": "gen_bytecode",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "line": [
                    "str",
                    "List[str]",
                    "Union[List[str], str]"
                ]
            }
        },
        "test_gen_binary_ops_reg_reg": {
            "name": "test_gen_binary_ops_reg_reg",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_gen_binary_ops_point_reg": {
            "name": "test_gen_binary_ops_point_reg",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_gen_binary_ops_point_point": {
            "name": "test_gen_binary_ops_point_point",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_gen_binary_ops_reg_in_place": {
            "name": "test_gen_binary_ops_reg_in_place",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_gen_binary_ops_error_1_arg": {
            "name": "test_gen_binary_ops_error_1_arg",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_gen_binary_ops_error_2_arg": {
            "name": "test_gen_binary_ops_error_2_arg",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "simple_lang-master/interpreter/src/virtual_machine/test/vm/test_executor.py": {
        "test_initialize": {
            "name": "test_initialize",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_execute": {
            "name": "test_execute",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "simple_lang-master/interpreter/src/virtual_machine/test/vm/test_io.py": {
        "test_vm_print": {
            "name": "test_vm_print",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_vm_print_error": {
            "name": "test_vm_print_error",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_vm_input": {
            "name": "test_vm_input",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_vm_input_error": {
            "name": "test_vm_input_error",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "simple_lang-master/interpreter/src/virtual_machine/test/vm/test_jump.py": {
        "test_generate_jump": {
            "name": "test_generate_jump",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_generate_jump_bad_label": {
            "name": "test_generate_jump_bad_label",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_vm_label": {
            "name": "test_vm_label",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_vm_nop": {
            "name": "test_vm_nop",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_vm_cmp": {
            "name": "test_vm_cmp",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_vm_cmp_error_1_arg": {
            "name": "test_vm_cmp_error_1_arg",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_vm_cmp_error_2_arg": {
            "name": "test_vm_cmp_error_2_arg",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_vm_end": {
            "name": "test_vm_end",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_vm_call": {
            "name": "test_vm_call",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_vm_ret": {
            "name": "test_vm_ret",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_vm_ret_error": {
            "name": "test_vm_ret_error",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "simple_lang-master/interpreter/src/virtual_machine/test/vm/__init__.py": {},
    "simple_lang-master/interpreter/src/virtual_machine/vm/binary_ops.py": {
        "gen_binary_operation": {
            "name": "gen_binary_operation",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "operation_name": [
                    "str",
                    "List[str]",
                    "Callable[[], Any]"
                ],
                "func": [
                    "Callable",
                    "Callable[[], object]",
                    "bool",
                    "Optional[Any]",
                    "str"
                ]
            }
        },
        "gen_binary_operation.gen": {
            "name": "gen",
            "location": 33,
            "return": [
                "Callable"
            ],
            "arguments": {
                "vm_state": [
                    "interpreter.src.virtual_machine.vm.vm_def.VmState"
                ]
            }
        }
    },
    "simple_lang-master/interpreter/src/virtual_machine/vm/helpers.py": {
        "vm_operation": {
            "name": "vm_operation",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "vm_operation.wrapper": {
            "name": "wrapper",
            "location": 21,
            "return": [
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "vm_state": []
            }
        }
    },
    "simple_lang-master/interpreter/src/virtual_machine/vm/io_ops.py": {
        "vm_input": {
            "name": "vm_input",
            "location": 11,
            "return": [
                "Callable"
            ],
            "arguments": {
                "vm_state": [
                    "list"
                ]
            }
        },
        "vm_print": {
            "name": "vm_print",
            "location": 39,
            "return": [
                "Callable"
            ],
            "arguments": {
                "vm_state": [
                    "interpreter.src.virtual_machine.vm.vm_def.VmState"
                ]
            }
        }
    },
    "simple_lang-master/interpreter/src/virtual_machine/vm/jumps_and_labels.py": {
        "generate_jump": {
            "name": "generate_jump",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "jmp_name": [
                    "str"
                ],
                "cond": [
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Iterable[float]",
                    "Any",
                    "Optional[Callable]",
                    "int"
                ]
            }
        },
        "set_called_subroutine": {
            "name": "set_called_subroutine",
            "location": 62,
            "return": [
                "bool"
            ],
            "arguments": {
                "state": [
                    "interpreter.src.virtual_machine.vm.vm_def.VmState",
                    "list"
                ]
            }
        },
        "vm_ret": {
            "name": "vm_ret",
            "location": 73,
            "return": [
                "Callable",
                "str",
                "List[str]"
            ],
            "arguments": {
                "vm_state": [
                    "Optional[\"PaymentState\"]",
                    "int",
                    "Optional[\"ShipmentState\"]"
                ]
            }
        },
        "vm_label": {
            "name": "vm_label",
            "location": 89,
            "return": [
                "Callable",
                "str",
                "int"
            ],
            "arguments": {
                "vm_state": [
                    "str",
                    "Optional[\"PaymentState\"]"
                ]
            }
        },
        "vm_cmp": {
            "name": "vm_cmp",
            "location": 105,
            "return": [
                "Callable"
            ],
            "arguments": {
                "vm_state": [
                    "interpreter.src.virtual_machine.vm.vm_def.VmState"
                ]
            }
        },
        "vm_nop": {
            "name": "vm_nop",
            "location": 153,
            "return": [
                "Callable"
            ],
            "arguments": {
                "vm_state": [
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "vm_end": {
            "name": "vm_end",
            "location": 163,
            "return": [
                "Callable"
            ],
            "arguments": {
                "vm_state": [
                    "List[int]"
                ]
            }
        },
        "generate_jump.gen": {
            "name": "gen",
            "location": 33,
            "return": [
                "Callable"
            ],
            "arguments": {
                "vm_state": [
                    "interpreter.src.virtual_machine.vm.vm_def.VmState"
                ]
            }
        }
    },
    "simple_lang-master/interpreter/src/virtual_machine/vm/vm_def.py": {
        "get_registers_map": {
            "name": "get_registers_map",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_default_memory": {
            "name": "get_default_memory",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "simple_lang-master/interpreter/src/virtual_machine/vm/vm_executor.py": {
        "initialize_vm": {
            "name": "initialize_vm",
            "location": 11,
            "return": [
                "Callable"
            ],
            "arguments": {
                "bytecode": [
                    "eth.vm.computation.BaseComputation",
                    "int",
                    "str"
                ]
            }
        },
        "execute_bytecode": {
            "name": "execute_bytecode",
            "location": 44,
            "return": [
                "Callable"
            ],
            "arguments": {
                "bytecode": [
                    "int"
                ]
            }
        }
    },
    "simple_lang-master/interpreter/src/virtual_machine/vm/__init__.py": {}
}
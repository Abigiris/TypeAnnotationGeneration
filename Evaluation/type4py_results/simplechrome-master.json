{
    "simplechrome-master/setup.py": {
        "find_version": {
            "name": "find_version",
            "location": 10,
            "return": [
                "bool",
                "str",
                "Union[int, float, complex]"
            ],
            "arguments": {}
        },
        "get_requirements": {
            "name": "get_requirements",
            "location": 19,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "simplechrome-master/simplechrome/browser_fetcher.py": {
        "platform_short_name": {
            "name": "platform_short_name",
            "location": 35,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, object]"
            ],
            "arguments": {
                "pltfrm": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "archive_name": {
            "name": "archive_name",
            "location": 53,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "platform": [
                    "str"
                ],
                "revision": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "Container[str]",
                    "bool",
                    "Union[List, Dict]"
                ]
            }
        },
        "download_url": {
            "name": "download_url",
            "location": 65,
            "return": [
                "float",
                "List[List[Any]]"
            ],
            "arguments": {
                "platform": [
                    "str",
                    "bool",
                    "int"
                ],
                "host": [
                    "str",
                    "bool",
                    "int"
                ],
                "revision": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "get_progress_bar": {
            "name": "get_progress_bar",
            "location": 218,
            "return": [
                "Optional[str]",
                "bool",
                "str",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "Optional[int]"
            ],
            "arguments": {
                "revision": [
                    "str",
                    "int"
                ],
                "total_length": [
                    "str",
                    "int"
                ]
            }
        },
        "RevisionInfo.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "revision": [
                    "str",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "url": [
                    "str",
                    "Dict[str, str]",
                    "List[str]"
                ],
                "executablePath": [
                    "pathlib.Path",
                    "str"
                ],
                "folderPath": [
                    "pathlib.Path",
                    "str"
                ],
                "local": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "BrowserFetcher.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rootDir": [
                    "str",
                    "Callable[[Any, Any], Any]",
                    "Optional[str]",
                    "bool",
                    "dict"
                ],
                "options": [
                    "Dict[str, Any]",
                    "dict",
                    "type"
                ]
            }
        },
        "BrowserFetcher.download_host": {
            "name": "download_host",
            "location": 100,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BrowserFetcher.downloads_folder": {
            "name": "downloads_folder",
            "location": 104,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BrowserFetcher.platform": {
            "name": "platform",
            "location": 108,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BrowserFetcher.revision_exe_path": {
            "name": "revision_exe_path",
            "location": 148,
            "return": [
                "str",
                "TextIO",
                "BinaryIO",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "revision": [
                    "str",
                    "pathlib.Path",
                    "type",
                    "Union[str, pathlib.Path]"
                ]
            }
        },
        "BrowserFetcher.revision_info": {
            "name": "revision_info",
            "location": 152,
            "return": [
                "str",
                "int",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "revision": [
                    "str",
                    "TextIO"
                ]
            }
        },
        "BrowserFetcher.local_revisions": {
            "name": "local_revisions",
            "location": 163,
            "return": [
                "str",
                "list",
                "List[List[str]]",
                "int",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "BrowserFetcher.remove": {
            "name": "remove",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "revision": [
                    "str",
                    "bool",
                    "pathlib.Path"
                ]
            }
        },
        "BrowserFetcher._getFolderPath": {
            "name": "_getFolderPath",
            "location": 185,
            "return": [
                "dict",
                "str",
                "Union[str, bytes]"
            ],
            "arguments": {
                "self": [],
                "revision": [
                    "str",
                    "bool"
                ]
            }
        },
        "BrowserFetcher._revision_exe": {
            "name": "_revision_exe",
            "location": 188,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "folder_path": [
                    "str"
                ],
                "revision": [
                    "str"
                ]
            }
        },
        "BrowserFetcher.__str__": {
            "name": "__str__",
            "location": 211,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BrowserFetcher.__repr__": {
            "name": "__repr__",
            "location": 214,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "simplechrome-master/simplechrome/chrome.py": {
        "Chrome.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "connection": [],
                "contextIds": [],
                "ignoreHTTPSErrors": [],
                "defaultViewport": [],
                "process": [],
                "closeCallback": [],
                "targetInfo": [],
                "loop": []
            }
        },
        "Chrome.process": {
            "name": "process",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Chrome.wsEndpoint": {
            "name": "wsEndpoint",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Chrome.defaultBrowserContext": {
            "name": "defaultBrowserContext",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Chrome.browserContexts": {
            "name": "browserContexts",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Chrome.targets": {
            "name": "targets",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Chrome.target": {
            "name": "target",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "target_id": []
            }
        },
        "Chrome._getVersion": {
            "name": "_getVersion",
            "location": 260,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Chrome._on_close": {
            "name": "_on_close",
            "location": 263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Chrome.__str__": {
            "name": "__str__",
            "location": 266,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Chrome.__repr__": {
            "name": "__repr__",
            "location": 269,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BrowserContext.__init__": {
            "name": "__init__",
            "location": 277,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "browser": [],
                "contextId": [],
                "loop": []
            }
        },
        "BrowserContext.targets": {
            "name": "targets",
            "location": 289,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BrowserContext.isIncognito": {
            "name": "isIncognito",
            "location": 296,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BrowserContext.newPage": {
            "name": "newPage",
            "location": 299,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BrowserContext.browser": {
            "name": "browser",
            "location": 305,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BrowserContext.waitForTarget": {
            "name": "waitForTarget",
            "location": 308,
            "return": [],
            "arguments": {
                "self": [],
                "predicate": [],
                "timeout": []
            }
        },
        "BrowserContext.__str__": {
            "name": "__str__",
            "location": 365,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BrowserContext.__repr__": {
            "name": "__repr__",
            "location": 368,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Chrome.waitForTarget.check": {
            "name": "check",
            "location": 149,
            "return": [],
            "arguments": {
                "atarget": []
            }
        }
    },
    "simplechrome-master/simplechrome/connection.py": {
        "connection_from_session": {
            "name": "connection_from_session",
            "location": 27,
            "return": [
                "float",
                "bytes",
                "Sequence[float]",
                "Tuple[int, int]",
                "tuple"
            ],
            "arguments": {
                "connection": [
                    "Dict[str, Dict[str, Any]]",
                    "Optional[Exception]",
                    "bytes",
                    "dict"
                ]
            }
        }
    },
    "simplechrome-master/simplechrome/console_message.py": {
        "ConsoleMessage.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "List[dict]",
                    "_typings.CDPEvent"
                ],
                "context": [
                    "bool",
                    "Dict[str, Any]"
                ],
                "jsHandleFactory": [
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "ConsoleMessage.type": {
            "name": "type",
            "location": 40,
            "return": [
                "str",
                "type",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsoleMessage.text": {
            "name": "text",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsoleMessage.args": {
            "name": "args",
            "location": 71,
            "return": [
                "str",
                "List[str]",
                "Iterable[str]",
                "Optional[Iterable[str]]",
                "Tuple[str]",
                "Callable[[None], None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsoleMessage.location": {
            "name": "location",
            "location": 76,
            "return": [
                "bool",
                "float",
                "str",
                "Optional[Any]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsoleMessage.timestamp": {
            "name": "timestamp",
            "location": 81,
            "return": [
                "bool",
                "Mapping[str, Any]",
                "dict",
                "List[Tuple[str, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsoleMessage.executionContextId": {
            "name": "executionContextId",
            "location": 86,
            "return": [
                "str",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsoleMessage.stackTrace": {
            "name": "stackTrace",
            "location": 91,
            "return": [
                "bool",
                "Mapping[str, Any]",
                "dict",
                "List[Tuple[str, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsoleMessage.consoleContext": {
            "name": "consoleContext",
            "location": 96,
            "return": [
                "str",
                "Optional[int]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsoleMessage.__init": {
            "name": "__init",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "int",
                    "bool",
                    "Callable[[], None]",
                    "dict"
                ],
                "jsHandleFactory": [
                    "str",
                    "int",
                    "bool",
                    "Callable[[], None]",
                    "dict"
                ]
            }
        },
        "ConsoleMessage.__str__": {
            "name": "__str__",
            "location": 135,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsoleMessage.__repr__": {
            "name": "__repr__",
            "location": 138,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "simplechrome-master/simplechrome/cookie.py": {
        "parse_cookie_str": {
            "name": "parse_cookie_str",
            "location": 24,
            "return": [
                "float",
                "int",
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {
                "cookie_str": [
                    "str",
                    "Union[str, bytes]"
                ]
            }
        },
        "Cookie.from_string": {
            "name": "from_string",
            "location": 47,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "connection.ClientType",
                    "dict"
                ],
                "cookie_str": [
                    "str",
                    "connection.ClientType",
                    "dict"
                ],
                "client": [
                    "str",
                    "connection.ClientType",
                    "dict"
                ]
            }
        },
        "Cookie.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "List[Tuple[bool, Any]]",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "cookie": [
                    "dict",
                    "str"
                ]
            }
        },
        "Cookie.name": {
            "name": "name",
            "location": 72,
            "return": [
                "str",
                "Type",
                "Callable[..., T]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cookie.value": {
            "name": "value",
            "location": 77,
            "return": [
                "str",
                "int",
                "dict",
                "tuple",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cookie.domain": {
            "name": "domain",
            "location": 82,
            "return": [
                "bool",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cookie.path": {
            "name": "path",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cookie.url": {
            "name": "url",
            "location": 92,
            "return": [
                "type",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cookie.expires": {
            "name": "expires",
            "location": 99,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cookie.size": {
            "name": "size",
            "location": 104,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cookie.httpOnly": {
            "name": "httpOnly",
            "location": 109,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cookie.secure": {
            "name": "secure",
            "location": 114,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cookie.sameSite": {
            "name": "sameSite",
            "location": 119,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cookie.session": {
            "name": "session",
            "location": 131,
            "return": [
                "Dict[str, Any]",
                "str",
                "Dict[str, Union[str, Set]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cookie.cookie_params": {
            "name": "cookie_params",
            "location": 135,
            "return": [
                "Tuple[int, int]",
                "str",
                "int",
                "T"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cookie.modify_param": {
            "name": "modify_param",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "param": [
                    "int",
                    "bool"
                ],
                "value": [
                    "str",
                    "bytes",
                    "int",
                    "float"
                ]
            }
        },
        "Cookie.remove_param": {
            "name": "remove_param",
            "location": 154,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "param": [
                    "bytes",
                    "int"
                ]
            }
        },
        "Cookie._create_cookie_params": {
            "name": "_create_cookie_params",
            "location": 240,
            "return": [
                "set",
                "int",
                "Sequence[str]",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ],
                "url": [
                    "str",
                    "Dict[str, List[bytes]]"
                ],
                "domain": [
                    "str",
                    "Optional[str]",
                    "Optional[Callable]",
                    "bool"
                ],
                "path": [
                    "str",
                    "Optional[str]"
                ],
                "expires": [
                    "Optional[str]",
                    "Optional[int]",
                    "List[Tuple[str, Any]]",
                    "List[Tuple[int, int]]",
                    "Sequence[int]",
                    "str"
                ],
                "httpOnly": [
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[Any]"
                ],
                "secure": [
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[Any]"
                ],
                "sameSite": [
                    "Optional[str]",
                    "Optional[int]",
                    "List[Tuple[str, Any]]",
                    "List[Tuple[int, int]]",
                    "Sequence[int]",
                    "str"
                ]
            }
        },
        "Cookie.__str__": {
            "name": "__str__",
            "location": 276,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cookie.__repr__": {
            "name": "__repr__",
            "location": 279,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "simplechrome-master/simplechrome/device_descriptors.py": {},
    "simplechrome-master/simplechrome/dialog.py": {
        "Dialog.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "List[Tuple[bool, Any]]",
                    "Dict[str, str]"
                ],
                "event": [
                    "str",
                    "Callable[..., None]",
                    "_typings.CDPEvent"
                ]
            }
        },
        "Dialog.type": {
            "name": "type",
            "location": 36,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dialog.message": {
            "name": "message",
            "location": 41,
            "return": [
                "bool",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dialog.defaultValue": {
            "name": "defaultValue",
            "location": 46,
            "return": [
                "str",
                "Dict[int, dict]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dialog.url": {
            "name": "url",
            "location": 51,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dialog.hasBrowserHandler": {
            "name": "hasBrowserHandler",
            "location": 56,
            "return": [
                "bool",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dialog.handled": {
            "name": "handled",
            "location": 65,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dialog.__str__": {
            "name": "__str__",
            "location": 84,
            "return": [
                "str",
                "BaseException"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dialog.__repr__": {
            "name": "__repr__",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "simplechrome-master/simplechrome/domWorld.py": {
        "DOMWorld.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "frameManager": [],
                "frame": [],
                "timeoutSettings": [],
                "loop": []
            }
        },
        "DOMWorld.frame": {
            "name": "frame",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DOMWorld.timeout_settings": {
            "name": "timeout_settings",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DOMWorld.loop": {
            "name": "loop",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DOMWorld.detached": {
            "name": "detached",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DOMWorld.add_wait_task": {
            "name": "add_wait_task",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "wait_task": []
            }
        },
        "DOMWorld.remove_wait_task": {
            "name": "remove_wait_task",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "wait_task": []
            }
        },
        "DOMWorld.waitForSelector": {
            "name": "waitForSelector",
            "location": 332,
            "return": [],
            "arguments": {
                "self": [],
                "selector": [],
                "options": []
            }
        },
        "DOMWorld.waitForXPath": {
            "name": "waitForXPath",
            "location": 339,
            "return": [],
            "arguments": {
                "self": [],
                "xpath": [],
                "options": []
            }
        },
        "DOMWorld.waitForFunction": {
            "name": "waitForFunction",
            "location": 346,
            "return": [],
            "arguments": {
                "self": [],
                "pageFunction": [],
                "options": []
            }
        },
        "DOMWorld._setContext": {
            "name": "_setContext",
            "location": 409,
            "return": [],
            "arguments": {
                "self": [],
                "context": []
            }
        },
        "DOMWorld._detach": {
            "name": "_detach",
            "location": 420,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DOMWorld._hasContext": {
            "name": "_hasContext",
            "location": 427,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "simplechrome-master/simplechrome/emulation_manager.py": {
        "EmulationManager.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "List[Tuple[bool, Any]]",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "EmulationManager.emulatingMobile": {
            "name": "emulatingMobile",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmulationManager.emulatingTouch": {
            "name": "emulatingTouch",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmulationManager.isScriptExecutionDisabled": {
            "name": "isScriptExecutionDisabled",
            "location": 49,
            "return": [
                "Dict[str, Callable]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmulationManager.emulatedMedia": {
            "name": "emulatedMedia",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "simplechrome-master/simplechrome/errors.py": {
        "NavigationError.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NavigationError.TimedOut": {
            "name": "TimedOut",
            "location": 70,
            "return": [
                "Dict[str, Any]",
                "Optional[str]",
                "Tuple[Optional[str], str]",
                "Optional[bool]",
                "bool",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[\"Response\"]",
                    "requests.Response"
                ],
                "msg": [
                    "str",
                    "Optional[\"Response\"]",
                    "requests.Response"
                ],
                "response": [
                    "str",
                    "Optional[\"Response\"]",
                    "requests.Response"
                ]
            }
        },
        "NavigationError.Failed": {
            "name": "Failed",
            "location": 76,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[\"Response\"]",
                    "requests.Response",
                    "Optional[str]",
                    "List[str]"
                ],
                "msg": [
                    "str",
                    "Optional[\"Response\"]",
                    "requests.Response",
                    "Optional[str]",
                    "List[str]"
                ],
                "response": [
                    "str",
                    "Optional[\"Response\"]",
                    "requests.Response",
                    "Optional[str]",
                    "List[str]"
                ],
                "tb": [
                    "Optional[bool]",
                    "Optional[str]",
                    "Optional[T]",
                    "Optional[int]"
                ]
            }
        },
        "NavigationError.Disconnected": {
            "name": "Disconnected",
            "location": 85,
            "return": [
                "Dict[str, List[str]]",
                "Dict[str, Any]",
                "Optional[bool]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[\"Response\"]",
                    "MutableMapping",
                    "dict"
                ],
                "msg": [
                    "str",
                    "Optional[\"Response\"]",
                    "MutableMapping",
                    "dict"
                ],
                "response": [
                    "str",
                    "Optional[\"Response\"]",
                    "MutableMapping",
                    "dict"
                ]
            }
        }
    },
    "simplechrome-master/simplechrome/events.py": {},
    "simplechrome-master/simplechrome/execution_context.py": {
        "ExecutionContext.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "List[Tuple[bool, Any]]",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "contextPayload": [
                    "dict",
                    "_typings.CDPEvent"
                ],
                "world": [
                    "Optional[\"Page\"]"
                ]
            }
        },
        "ExecutionContext.default": {
            "name": "default",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExecutionContext.contextId": {
            "name": "contextId",
            "location": 52,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExecutionContext.frame": {
            "name": "frame",
            "location": 56,
            "return": [
                "bool",
                "str",
                "Optional[bool]",
                "Optional[str]",
                "List[str]",
                "Optional[float]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExecutionContext._convertArgument": {
            "name": "_convertArgument",
            "location": 173,
            "return": [
                "float",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "Tuple[int, int, int]",
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "ExecutionContext.__str__": {
            "name": "__str__",
            "location": 217,
            "return": [
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExecutionContext.__repr__": {
            "name": "__repr__",
            "location": 221,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "simplechrome-master/simplechrome/frame_manager.py": {
        "FrameManager.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "timeoutSettings": [],
                "page": [],
                "networkManager": [],
                "isolateWorlds": [],
                "loop": [],
                "frameTree": []
            }
        },
        "FrameManager.isolatingWorlds": {
            "name": "isolatingWorlds",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FrameManager.mainFrame": {
            "name": "mainFrame",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FrameManager.page": {
            "name": "page",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FrameManager.network_idle_promise": {
            "name": "network_idle_promise",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "num_inflight": [],
                "idle_time": [],
                "global_wait": []
            }
        },
        "FrameManager.setDefaultNavigationTimeout": {
            "name": "setDefaultNavigationTimeout",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "FrameManager.enable_lifecycle_emitting": {
            "name": "enable_lifecycle_emitting",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FrameManager.disable_lifecycle_emitting": {
            "name": "disable_lifecycle_emitting",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FrameManager.executionContextById": {
            "name": "executionContextById",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "contextId": []
            }
        },
        "FrameManager.frames": {
            "name": "frames",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FrameManager.frame": {
            "name": "frame",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "frameId": []
            }
        },
        "FrameManager._onLifecycleEvent": {
            "name": "_onLifecycleEvent",
            "location": 305,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "FrameManager._handleFrameTree": {
            "name": "_handleFrameTree",
            "location": 312,
            "return": [],
            "arguments": {
                "self": [],
                "frameTree": [],
                "is_first": []
            }
        },
        "FrameManager._onFrameAttached": {
            "name": "_onFrameAttached",
            "location": 332,
            "return": [],
            "arguments": {
                "self": [],
                "eventOrFrame": []
            }
        },
        "FrameManager._onFrameNavigated": {
            "name": "_onFrameNavigated",
            "location": 342,
            "return": [],
            "arguments": {
                "self": [],
                "eventOrFrame": []
            }
        },
        "FrameManager._onFrameDetached": {
            "name": "_onFrameDetached",
            "location": 379,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "FrameManager._onFrameStoppedLoading": {
            "name": "_onFrameStoppedLoading",
            "location": 385,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "FrameManager._onFrameNavigatedWithinDocument": {
            "name": "_onFrameNavigatedWithinDocument",
            "location": 393,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "FrameManager._onExecutionContextCreated": {
            "name": "_onExecutionContextCreated",
            "location": 403,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "FrameManager._onExecutionContextDestroyed": {
            "name": "_onExecutionContextDestroyed",
            "location": 429,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "FrameManager._onExecutionContextsCleared": {
            "name": "_onExecutionContextsCleared",
            "location": 438,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FrameManager._removeFramesRecursively": {
            "name": "_removeFramesRecursively",
            "location": 444,
            "return": [],
            "arguments": {
                "self": [],
                "frame": []
            }
        },
        "Frame.from_cdp_frame": {
            "name": "from_cdp_frame",
            "location": 500,
            "return": [],
            "arguments": {
                "cls": [],
                "frameManager": [],
                "client": [],
                "parentFrame": [],
                "cdp_frame": [],
                "loop": []
            }
        },
        "Frame.__init__": {
            "name": "__init__",
            "location": 513,
            "return": [],
            "arguments": {
                "self": [],
                "frameManager": [],
                "client": [],
                "parentFrame": [],
                "frameId": [],
                "loop": []
            }
        },
        "Frame.domWorld": {
            "name": "domWorld",
            "location": 544,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frame.mainDOMWorld": {
            "name": "mainDOMWorld",
            "location": 550,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frame.secondaryDOMWorld": {
            "name": "secondaryDOMWorld",
            "location": 554,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frame.emits_lifecycle": {
            "name": "emits_lifecycle",
            "location": 558,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frame.life_cycle": {
            "name": "life_cycle",
            "location": 562,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frame.did_load": {
            "name": "did_load",
            "location": 566,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frame.dom_loaded": {
            "name": "dom_loaded",
            "location": 570,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frame.name": {
            "name": "name",
            "location": 574,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frame.url": {
            "name": "url",
            "location": 579,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frame.id": {
            "name": "id",
            "location": 584,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frame.parentFrame": {
            "name": "parentFrame",
            "location": 588,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frame.childFrames": {
            "name": "childFrames",
            "location": 596,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frame.enable_lifecycle_emitting": {
            "name": "enable_lifecycle_emitting",
            "location": 600,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frame.disable_lifecycle_emitting": {
            "name": "disable_lifecycle_emitting",
            "location": 603,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frame.isDetached": {
            "name": "isDetached",
            "location": 606,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frame.goto": {
            "name": "goto",
            "location": 613,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "options": []
            }
        },
        "Frame.waitForNavigation": {
            "name": "waitForNavigation",
            "location": 618,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "Frame.executionContext": {
            "name": "executionContext",
            "location": 623,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frame.evaluateHandle": {
            "name": "evaluateHandle",
            "location": 626,
            "return": [],
            "arguments": {
                "self": [],
                "pageFunction": []
            }
        },
        "Frame.evaluate": {
            "name": "evaluate",
            "location": 633,
            "return": [],
            "arguments": {
                "self": [],
                "pageFunction": []
            }
        },
        "Frame.evaluate_expression": {
            "name": "evaluate_expression",
            "location": 638,
            "return": [],
            "arguments": {
                "self": [],
                "expression": [],
                "withCliAPI": []
            }
        },
        "Frame.querySelector": {
            "name": "querySelector",
            "location": 648,
            "return": [],
            "arguments": {
                "self": [],
                "selector": []
            }
        },
        "Frame.querySelectorEval": {
            "name": "querySelectorEval",
            "location": 655,
            "return": [],
            "arguments": {
                "self": [],
                "selector": [],
                "pageFunction": []
            }
        },
        "Frame.querySelectorAll": {
            "name": "querySelectorAll",
            "location": 664,
            "return": [],
            "arguments": {
                "self": [],
                "selector": []
            }
        },
        "Frame.querySelectorAllEval": {
            "name": "querySelectorAllEval",
            "location": 671,
            "return": [],
            "arguments": {
                "self": [],
                "selector": [],
                "pageFunction": []
            }
        },
        "Frame.xpath": {
            "name": "xpath",
            "location": 680,
            "return": [],
            "arguments": {
                "self": [],
                "expression": []
            }
        },
        "Frame.content": {
            "name": "content",
            "location": 689,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frame.setContent": {
            "name": "setContent",
            "location": 693,
            "return": [],
            "arguments": {
                "self": [],
                "html": [],
                "options": []
            }
        },
        "Frame.addScriptTag": {
            "name": "addScriptTag",
            "location": 699,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "Frame.addStyleTag": {
            "name": "addStyleTag",
            "location": 708,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "Frame.click": {
            "name": "click",
            "location": 717,
            "return": [],
            "arguments": {
                "self": [],
                "selector": [],
                "button": [],
                "clickCount": [],
                "delay": []
            }
        },
        "Frame.focus": {
            "name": "focus",
            "location": 730,
            "return": [],
            "arguments": {
                "self": [],
                "selector": []
            }
        },
        "Frame.hover": {
            "name": "hover",
            "location": 737,
            "return": [],
            "arguments": {
                "self": [],
                "selector": []
            }
        },
        "Frame.select": {
            "name": "select",
            "location": 744,
            "return": [],
            "arguments": {
                "self": [],
                "selector": []
            }
        },
        "Frame.waitFor": {
            "name": "waitFor",
            "location": 769,
            "return": [],
            "arguments": {
                "self": [],
                "selectorOrFunctionOrTimeout": [],
                "options": []
            }
        },
        "Frame.waitForFunction": {
            "name": "waitForFunction",
            "location": 805,
            "return": [],
            "arguments": {
                "self": [],
                "pageFunction": [],
                "options": []
            }
        },
        "Frame.title": {
            "name": "title",
            "location": 818,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frame.navigation_waiter": {
            "name": "navigation_waiter",
            "location": 863,
            "return": [],
            "arguments": {
                "self": [],
                "loop": [],
                "timeout": []
            }
        },
        "Frame.loaded_waiter": {
            "name": "loaded_waiter",
            "location": 912,
            "return": [],
            "arguments": {
                "self": [],
                "loop": [],
                "timeout": []
            }
        },
        "Frame.network_idle_waiter": {
            "name": "network_idle_waiter",
            "location": 921,
            "return": [],
            "arguments": {
                "self": [],
                "loop": [],
                "timeout": []
            }
        },
        "Frame._navigated": {
            "name": "_navigated",
            "location": 941,
            "return": [],
            "arguments": {
                "self": [],
                "framePayload": []
            }
        },
        "Frame._navigatedWithinDocument": {
            "name": "_navigatedWithinDocument",
            "location": 947,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "Frame._onLoadingStopped": {
            "name": "_onLoadingStopped",
            "location": 950,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frame._onLifecycleEvent": {
            "name": "_onLifecycleEvent",
            "location": 954,
            "return": [],
            "arguments": {
                "self": [],
                "loaderId": [],
                "name": []
            }
        },
        "Frame._detach": {
            "name": "_detach",
            "location": 965,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frame.__str__": {
            "name": "__str__",
            "location": 976,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frame.__repr__": {
            "name": "__repr__",
            "location": 979,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Frame.navigation_waiter.set_true": {
            "name": "set_true",
            "location": 871,
            "return": [],
            "arguments": {}
        },
        "Frame._wait_for_life_cycle.on_life_cycle": {
            "name": "on_life_cycle",
            "location": 891,
            "return": [],
            "arguments": {
                "lc": []
            }
        }
    },
    "simplechrome-master/simplechrome/frame_resource_tree.py": {
        "FrameResource.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frameResourceInfo": [
                    "dict",
                    "Exception",
                    "list",
                    "str",
                    "Dict[str, bool]",
                    "Callable",
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ],
                "frame": [
                    "List[int]",
                    "bool",
                    "str"
                ],
                "frameManager": [
                    "bool"
                ]
            }
        },
        "FrameResource.url": {
            "name": "url",
            "location": 38,
            "return": [
                "dict",
                "str",
                "Optional[int]",
                "Dict[int, dict]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrameResource.type": {
            "name": "type",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrameResource.mimeType": {
            "name": "mimeType",
            "location": 48,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrameResource.lastModified": {
            "name": "lastModified",
            "location": 53,
            "return": [
                "Optional[Dict[str, Any]]",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrameResource.contentSize": {
            "name": "contentSize",
            "location": 58,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrameResource.failed": {
            "name": "failed",
            "location": 63,
            "return": [
                "Dict[int, dict]",
                "int",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrameResource.canceled": {
            "name": "canceled",
            "location": 68,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrameResource.getContent": {
            "name": "getContent",
            "location": 72,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrameResource.as_dict": {
            "name": "as_dict",
            "location": 77,
            "return": [
                "bool",
                "Tuple[bool, Optional[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrameResource.__str__": {
            "name": "__str__",
            "location": 80,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrameResource.__repr__": {
            "name": "__repr__",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrameResourceTree.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resourceTree": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "frameManager": [
                    "bool"
                ]
            }
        },
        "FrameResourceTree.raw_tree": {
            "name": "raw_tree",
            "location": 111,
            "return": [
                "Optional[\"TreeNode\"]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrameResourceTree.children": {
            "name": "children",
            "location": 115,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrameResourceTree.resources": {
            "name": "resources",
            "location": 119,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrameResourceTree.as_dict": {
            "name": "as_dict",
            "location": 123,
            "return": [
                "bytes",
                "int",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrameResourceTree.walk_tree": {
            "name": "walk_tree",
            "location": 126,
            "return": [
                "typing.Generator[typing.Tuple[typing.List[FrameResource], \"Frame\"], typing.Any, None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrameResourceTree._build_tree": {
            "name": "_build_tree",
            "location": 140,
            "return": [
                "Set[VT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrameResourceTree.__str__": {
            "name": "__str__",
            "location": 155,
            "return": [
                "str",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrameResourceTree.__repr__": {
            "name": "__repr__",
            "location": 158,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "simplechrome-master/simplechrome/helper.py": {
        "Helper.is_number": {
            "name": "is_number",
            "location": 45,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "maybe_number": [
                    "str",
                    "int"
                ]
            }
        },
        "Helper.is_boolean": {
            "name": "is_boolean",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "maybe_boolean": [
                    "str",
                    "int"
                ]
            }
        },
        "Helper.is_string": {
            "name": "is_string",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "maybe_string": [
                    "str"
                ]
            }
        },
        "Helper.is_jsfunc": {
            "name": "is_jsfunc",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "func": [
                    "Callable[..., None]",
                    "float",
                    "Callable[..., Awaitable]",
                    "BaseException"
                ]
            }
        },
        "Helper.evaluationString": {
            "name": "evaluationString",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "fun": [
                    "int",
                    "List[str]",
                    "Union",
                    "str",
                    "Callable"
                ]
            }
        },
        "Helper.getExceptionMessage": {
            "name": "getExceptionMessage",
            "location": 73,
            "return": [
                "Optional[str]",
                "str",
                "dict",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "exceptionDetails": [
                    "str",
                    "Dict[str, type]",
                    "T",
                    "dict",
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "Helper.addEventListener": {
            "name": "addEventListener",
            "location": 88,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "emitter": [
                    "str",
                    "Callable",
                    "Callable[[str], str]"
                ],
                "eventName": [
                    "str",
                    "Callable",
                    "Callable[[str], str]"
                ],
                "handler": [
                    "str",
                    "Callable",
                    "Callable[[str], str]"
                ]
            }
        },
        "Helper.removeEventListeners": {
            "name": "removeEventListeners",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "listeners": [
                    "List[dict]",
                    "int",
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "Helper.valueFromRemoteObject": {
            "name": "valueFromRemoteObject",
            "location": 106,
            "return": [
                "Optional[int]",
                "bool",
                "Optional[Dict]",
                "dict",
                "str"
            ],
            "arguments": {
                "remoteObject": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Helper.get_positive_int": {
            "name": "get_positive_int",
            "location": 140,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "obj": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Helper.cleanup_futures": {
            "name": "cleanup_futures",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Helper.remove_dict_keys": {
            "name": "remove_dict_keys",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "dictionary": [
                    "Optional[str]",
                    "Callable",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "Helper.noop": {
            "name": "noop",
            "location": 161,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "Helper.merge_dict": {
            "name": "merge_dict",
            "location": 165,
            "return": [
                "bool",
                "Callable",
                "Sequence"
            ],
            "arguments": {
                "dict1": [
                    "dict",
                    "MutableMapping",
                    "Dict[str, object]"
                ],
                "dict2": [
                    "dict",
                    "MutableMapping",
                    "Dict[str, object]"
                ]
            }
        },
        "Helper.make_aiohttp_session": {
            "name": "make_aiohttp_session",
            "location": 174,
            "return": [
                "str",
                "List[str]",
                "gidgethub.aiohttp.GitHubAPI"
            ],
            "arguments": {
                "loop": [
                    "Optional[asyncio.AbstractEventLoop]",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "Helper.ensure_loop": {
            "name": "ensure_loop",
            "location": 188,
            "return": [
                "bool"
            ],
            "arguments": {
                "loop": [
                    "Optional[int]",
                    "Optional[List[Callable]]",
                    "str"
                ]
            }
        },
        "Helper.waitForEvent": {
            "name": "waitForEvent",
            "location": 221,
            "return": [
                "str"
            ],
            "arguments": {
                "emitter": [
                    "str",
                    "int"
                ],
                "eventName": [
                    "dict",
                    "List[str]"
                ],
                "predicate": [
                    "str",
                    "int",
                    "asyncio.AbstractEventLoop"
                ],
                "to": [
                    "str",
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "Helper.wait_for_first_done": {
            "name": "wait_for_first_done",
            "location": 249,
            "return": [
                "Dict[str, Dict[str, int]]",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "Helper.waitForEvent.listener": {
            "name": "listener",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "Optional[str]",
                    "dict",
                    "Pattern[str]",
                    "str",
                    "Dict[str, int]"
                ]
            }
        }
    },
    "simplechrome-master/simplechrome/input.py": {
        "modifierBit": {
            "name": "modifierBit",
            "location": 188,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "Keyboard.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "Keyboard._keyDescriptionForString": {
            "name": "_keyDescriptionForString",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "keyString": []
            }
        },
        "Mouse.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "keyboard": []
            }
        },
        "Touchscreen.__init__": {
            "name": "__init__",
            "location": 317,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "keyboard": []
            }
        },
        "Input.__init__": {
            "name": "__init__",
            "location": 354,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "Input.keyboard": {
            "name": "keyboard",
            "location": 361,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Input.mouse": {
            "name": "mouse",
            "location": 365,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Input.touchscreen": {
            "name": "touchscreen",
            "location": 369,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "simplechrome-master/simplechrome/jsHandle.py": {
        "createJSHandle": {
            "name": "createJSHandle",
            "location": 20,
            "return": [],
            "arguments": {
                "context": [],
                "remoteObject": []
            }
        },
        "intersectQuadWithViewport": {
            "name": "intersectQuadWithViewport",
            "location": 619,
            "return": [],
            "arguments": {
                "quad": [],
                "width": [],
                "height": []
            }
        },
        "fromProtocolQuad": {
            "name": "fromProtocolQuad",
            "location": 628,
            "return": [],
            "arguments": {
                "quad": []
            }
        },
        "computeQuadArea": {
            "name": "computeQuadArea",
            "location": 637,
            "return": [],
            "arguments": {
                "quad": []
            }
        },
        "JSHandle.create": {
            "name": "create",
            "location": 42,
            "return": [],
            "arguments": {
                "cls": [],
                "context": [],
                "remoteObject": []
            }
        },
        "JSHandle.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "client": [],
                "remoteObject": []
            }
        },
        "JSHandle.executionContext": {
            "name": "executionContext",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSHandle.asElement": {
            "name": "asElement",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSHandle.toString": {
            "name": "toString",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSHandle._properties": {
            "name": "_properties",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSHandle._handle_list": {
            "name": "_handle_list",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "properties": []
            }
        },
        "JSHandle._element_list": {
            "name": "_element_list",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "properties": []
            }
        },
        "JSHandle.__str__": {
            "name": "__str__",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSHandle.__repr__": {
            "name": "__repr__",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElementHandle.__init__": {
            "name": "__init__",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "client": [],
                "remoteObject": [],
                "page": [],
                "frameManager": []
            }
        },
        "ElementHandle.isIntersectingViewport": {
            "name": "isIntersectingViewport",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElementHandle.innerText": {
            "name": "innerText",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "ElementHandle.innerHTML": {
            "name": "innerHTML",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "html": []
            }
        },
        "ElementHandle.outerHTML": {
            "name": "outerHTML",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "html": []
            }
        },
        "ElementHandle.hasChildNodes": {
            "name": "hasChildNodes",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElementHandle.childElementCount": {
            "name": "childElementCount",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ElementHandle.getAttribute": {
            "name": "getAttribute",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "attr": []
            }
        }
    },
    "simplechrome-master/simplechrome/launcher.py": {
        "args_include": {
            "name": "args_include",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": [],
                "needle": [
                    "str",
                    "int"
                ]
            }
        },
        "includes_starting_page": {
            "name": "includes_starting_page",
            "location": 77,
            "return": [
                "bool"
            ],
            "arguments": {
                "args": []
            }
        },
        "default_args": {
            "name": "default_args",
            "location": 84,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "List[Tuple[str, str]]",
                "bool"
            ],
            "arguments": {
                "opts": [
                    "dict",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "Launcher.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "projectRoot": [
                    "str",
                    "int"
                ],
                "preferredRevision": [
                    "str",
                    "int",
                    "Callable[[str], str]"
                ]
            }
        },
        "Launcher.__kill_chrome": {
            "name": "__kill_chrome",
            "location": 229,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "simplechrome-master/simplechrome/lifecycle_watcher.py": {
        "LifecycleWatcher.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frameManager": [
                    "str"
                ],
                "frame": [
                    "bool",
                    "int",
                    "float",
                    "Callable"
                ],
                "waitUntil": [
                    "Union[Iterable[str], str]",
                    "asyncio.AbstractEventLoop",
                    "Callable[..., Awaitable]",
                    "Callable",
                    "Union[str, int]",
                    "Optional[List[str]]",
                    "Optional[Callable]",
                    "Union[str, Sequence]"
                ],
                "to": [
                    "Tuple[int, int]",
                    "str",
                    "bool",
                    "List[str]"
                ],
                "all_frames": [
                    "bool",
                    "List[List[int]]"
                ],
                "loop": [
                    "bool",
                    "int",
                    "float",
                    "Callable"
                ]
            }
        },
        "LifecycleWatcher.timeoutPromise": {
            "name": "timeoutPromise",
            "location": 114,
            "return": [
                "int",
                "bool",
                "type",
                "List[dict]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LifecycleWatcher.terminationPromise": {
            "name": "terminationPromise",
            "location": 118,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LifecycleWatcher.newDocumentNavigationPromise": {
            "name": "newDocumentNavigationPromise",
            "location": 122,
            "return": [
                "int",
                "Sequence[str]",
                "Iterable[str]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "LifecycleWatcher.sameDocumentNavigationPromise": {
            "name": "sameDocumentNavigationPromise",
            "location": 126,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LifecycleWatcher.lifecyclePromise": {
            "name": "lifecyclePromise",
            "location": 130,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LifecycleWatcher.navigationResponse": {
            "name": "navigationResponse",
            "location": 134,
            "return": [
                "str",
                "bool",
                "Tuple[dict, int]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "LifecycleWatcher.dispose": {
            "name": "dispose",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LifecycleWatcher._checkLifecycleComplete": {
            "name": "_checkLifecycleComplete",
            "location": 149,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "LifecycleWatcher._checkLifecycle": {
            "name": "_checkLifecycle",
            "location": 170,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "pyppeteer.frame_manager.Frame",
                    "Frame",
                    "int"
                ],
                "expectedLifecycle": [
                    "int",
                    "str",
                    "bool",
                    "IO[str]"
                ]
            }
        },
        "LifecycleWatcher._terminate": {
            "name": "_terminate",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "dict",
                    "Optional[str]",
                    "Callable",
                    "Dict[str, Any]",
                    "Mapping"
                ]
            }
        },
        "LifecycleWatcher._onFrameDetached": {
            "name": "_onFrameDetached",
            "location": 184,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "LifecycleWatcher._navigatedWithinDocument": {
            "name": "_navigatedWithinDocument",
            "location": 194,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "LifecycleWatcher._onRequest": {
            "name": "_onRequest",
            "location": 200,
            "return": [
                "concurrenfutures.Future",
                "Iterable[Type]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict",
                    "aiohttp.web.Request",
                    "Tuple[int]"
                ]
            }
        },
        "LifecycleWatcher._createTimeoutPromise": {
            "name": "_createTimeoutPromise",
            "location": 205,
            "return": [
                "str",
                "bool",
                "Sequence[T]",
                "Callable[[T], bool]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "LifecycleWatcher._build_expected_lifecyle": {
            "name": "_build_expected_lifecyle",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LifecycleWatcher.__str__": {
            "name": "__str__",
            "location": 236,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LifecycleWatcher.__repr__": {
            "name": "__repr__",
            "location": 240,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "simplechrome-master/simplechrome/log.py": {
        "Log.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "List[Tuple[bool, Any]]",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "loop": [
                    "int",
                    "Optional[asyncio.AbstractEventLoop]",
                    "_typings.OptionalLoop"
                ]
            }
        },
        "Log.enabled": {
            "name": "enabled",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Log.reporting_violations": {
            "name": "reporting_violations",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Log._onLogEntryAdded": {
            "name": "_onLogEntryAdded",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict",
                    "_typings.CDPEvent",
                    "Dict[str, bool]"
                ]
            }
        },
        "Log.__str__": {
            "name": "__str__",
            "location": 100,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Log.__repr__": {
            "name": "__repr__",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogEntry.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "dict",
                    "float",
                    "Optional[List[str]]",
                    "Generator"
                ]
            }
        },
        "LogEntry.cdp_entry": {
            "name": "cdp_entry",
            "location": 130,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogEntry.level": {
            "name": "level",
            "location": 135,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogEntry.lineNumber": {
            "name": "lineNumber",
            "location": 147,
            "return": [
                "Tuple[List[Any], int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogEntry.location": {
            "name": "location",
            "location": 152,
            "return": [
                "bool",
                "float",
                "str",
                "Optional[Any]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogEntry.networkRequestId": {
            "name": "networkRequestId",
            "location": 157,
            "return": [
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogEntry.stackTrace": {
            "name": "stackTrace",
            "location": 162,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogEntry.source": {
            "name": "source",
            "location": 167,
            "return": [
                "str",
                "Tuple[int, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogEntry.timestamp": {
            "name": "timestamp",
            "location": 188,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogEntry.type": {
            "name": "type",
            "location": 193,
            "return": [
                "str",
                "Exception",
                "Callable[..., T]",
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogEntry.url": {
            "name": "url",
            "location": 198,
            "return": [
                "type",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogEntry.workerId": {
            "name": "workerId",
            "location": 203,
            "return": [
                "str",
                "Union[int, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogEntry.__str__": {
            "name": "__str__",
            "location": 207,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogEntry.__repr__": {
            "name": "__repr__",
            "location": 210,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "simplechrome-master/simplechrome/network_idle_monitor.py": {
        "NetworkIdleMonitor.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "Dict[str, str]",
                    "dict"
                ],
                "num_inflight": [
                    "int",
                    "dict",
                    "Tuple[int, int]",
                    "Mapping[str, Any]"
                ],
                "idle_time": [
                    "int",
                    "str",
                    "Union[None, int]",
                    "Mapping[str, Any]"
                ],
                "global_wait": [
                    "int",
                    "dict",
                    "Tuple[int, int]",
                    "Mapping[str, Any]",
                    "str"
                ],
                "loop": [
                    "_typings.OptionalLoop",
                    "int"
                ]
            }
        },
        "NetworkIdleMonitor.monitor": {
            "name": "monitor",
            "location": 51,
            "return": [
                "int",
                "Iterable[int]",
                "str"
            ],
            "arguments": {
                "cls": [],
                "client": [],
                "num_inflight": [],
                "idle_time": [],
                "global_wait": [],
                "loop": []
            }
        },
        "NetworkIdleMonitor.create_idle_future": {
            "name": "create_idle_future",
            "location": 68,
            "return": [
                "Dict[int, dict]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworkIdleMonitor.idle_cb": {
            "name": "idle_cb",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworkIdleMonitor.clean_up": {
            "name": "clean_up",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NetworkIdleMonitor.req_started": {
            "name": "req_started",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "info": []
            }
        },
        "NetworkIdleMonitor.req_finished": {
            "name": "req_finished",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "info": [
                    "Tuple[float, float]"
                ]
            }
        }
    },
    "simplechrome-master/simplechrome/network_manager.py": {
        "NetworkManager.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "ignoreHTTPSErrors": [],
                "loop": []
            }
        },
        "NetworkManager.service_workers_bypassed": {
            "name": "service_workers_bypassed",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NetworkManager.cache_disabled": {
            "name": "cache_disabled",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NetworkManager.network_idle_promise": {
            "name": "network_idle_promise",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "num_inflight": [],
                "idle_time": [],
                "global_wait": []
            }
        },
        "NetworkManager.setFrameManager": {
            "name": "setFrameManager",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "frameManager": []
            }
        },
        "NetworkManager.extraHTTPHeaders": {
            "name": "extraHTTPHeaders",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NetworkManager._onRequestWillBeSent": {
            "name": "_onRequestWillBeSent",
            "location": 312,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "NetworkManager._onRequest": {
            "name": "_onRequest",
            "location": 326,
            "return": [],
            "arguments": {
                "self": [],
                "event": [],
                "interceptionId": []
            }
        },
        "NetworkManager._onRequestSeveredFromCache": {
            "name": "_onRequestSeveredFromCache",
            "location": 349,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "NetworkManager._handleRequestRedirect": {
            "name": "_handleRequestRedirect",
            "location": 354,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "event": []
            }
        },
        "NetworkManager._onResponseReceived": {
            "name": "_onResponseReceived",
            "location": 367,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "NetworkManager._onLoadingFinished": {
            "name": "_onLoadingFinished",
            "location": 376,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "NetworkManager._onLoadingFailed": {
            "name": "_onLoadingFailed",
            "location": 391,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "NetworkManager._onAuthRequired": {
            "name": "_onAuthRequired",
            "location": 408,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "NetworkManager._onRequestPaused": {
            "name": "_onRequestPaused",
            "location": 430,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        }
    },
    "simplechrome-master/simplechrome/page.py": {
        "convertPrintParameterToInches": {
            "name": "convertPrintParameterToInches",
            "location": 1516,
            "return": [],
            "arguments": {
                "parameter": []
            }
        },
        "process_clip": {
            "name": "process_clip",
            "location": 1544,
            "return": [],
            "arguments": {
                "clip": []
            }
        },
        "Page.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "target": [],
                "ignoreHTTPSErrors": [],
                "isolateWorlds": [],
                "screenshotTaskQueue": [],
                "loop": []
            }
        },
        "Page.frame_manager": {
            "name": "frame_manager",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.network_manager": {
            "name": "network_manager",
            "location": 251,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.emulation_manager": {
            "name": "emulation_manager",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.worker_manager": {
            "name": "worker_manager",
            "location": 259,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.keyboard": {
            "name": "keyboard",
            "location": 263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.touchscreen": {
            "name": "touchscreen",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.mouse": {
            "name": "mouse",
            "location": 273,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.tracing": {
            "name": "tracing",
            "location": 278,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.log": {
            "name": "log",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.target": {
            "name": "target",
            "location": 286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.mainFrame": {
            "name": "mainFrame",
            "location": 291,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.url": {
            "name": "url",
            "location": 296,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.frames": {
            "name": "frames",
            "location": 304,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.viewport": {
            "name": "viewport",
            "location": 309,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.setDefaultNavigationTimeout": {
            "name": "setDefaultNavigationTimeout",
            "location": 316,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "Page.setDefaultTimeout": {
            "name": "setDefaultTimeout",
            "location": 332,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "Page.setDefaultJSTimeout": {
            "name": "setDefaultJSTimeout",
            "location": 335,
            "return": [],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "Page.network_idle_promise": {
            "name": "network_idle_promise",
            "location": 338,
            "return": [],
            "arguments": {
                "self": [],
                "num_inflight": [],
                "idle_time": [],
                "global_wait": []
            }
        },
        "Page.enable_lifecycle_emitting": {
            "name": "enable_lifecycle_emitting",
            "location": 345,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.disable_lifecycle_emitting": {
            "name": "disable_lifecycle_emitting",
            "location": 348,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.getResourceTree": {
            "name": "getResourceTree",
            "location": 354,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.getResourceContent": {
            "name": "getResourceContent",
            "location": 361,
            "return": [],
            "arguments": {
                "self": [],
                "frameId": [],
                "url": []
            }
        },
        "Page.tap": {
            "name": "tap",
            "location": 366,
            "return": [],
            "arguments": {
                "self": [],
                "selector": []
            }
        },
        "Page.querySelectorEval": {
            "name": "querySelectorEval",
            "location": 376,
            "return": [],
            "arguments": {
                "self": [],
                "selector": [],
                "pageFunction": []
            }
        },
        "Page.querySelectorAllEval": {
            "name": "querySelectorAllEval",
            "location": 394,
            "return": [],
            "arguments": {
                "self": [],
                "selector": [],
                "pageFunction": []
            }
        },
        "Page.querySelectorAll": {
            "name": "querySelectorAll",
            "location": 410,
            "return": [],
            "arguments": {
                "self": [],
                "selector": []
            }
        },
        "Page.querySelector": {
            "name": "querySelector",
            "location": 424,
            "return": [],
            "arguments": {
                "self": [],
                "selector": []
            }
        },
        "Page.xpath": {
            "name": "xpath",
            "location": 438,
            "return": [],
            "arguments": {
                "self": [],
                "expression": []
            }
        },
        "Page.evaluateHandle": {
            "name": "evaluateHandle",
            "location": 450,
            "return": [],
            "arguments": {
                "self": [],
                "pageFunction": []
            }
        },
        "Page.addScriptTag": {
            "name": "addScriptTag",
            "location": 465,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "Page.addStyleTag": {
            "name": "addStyleTag",
            "location": 483,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "Page.content": {
            "name": "content",
            "location": 501,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.title": {
            "name": "title",
            "location": 508,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.click": {
            "name": "click",
            "location": 515,
            "return": [],
            "arguments": {
                "self": [],
                "selector": [],
                "button": [],
                "clickCount": [],
                "delay": []
            }
        },
        "Page.hover": {
            "name": "hover",
            "location": 534,
            "return": [],
            "arguments": {
                "self": [],
                "selector": []
            }
        },
        "Page.focus": {
            "name": "focus",
            "location": 544,
            "return": [],
            "arguments": {
                "self": [],
                "selector": []
            }
        },
        "Page.select": {
            "name": "select",
            "location": 554,
            "return": [],
            "arguments": {
                "self": [],
                "selector": []
            }
        },
        "Page.type": {
            "name": "type",
            "location": 564,
            "return": [],
            "arguments": {
                "self": [],
                "selector": [],
                "text": [],
                "delay": []
            }
        },
        "Page.waitFor": {
            "name": "waitFor",
            "location": 583,
            "return": [],
            "arguments": {
                "self": [],
                "selectorOrFunctionOrTimeout": [],
                "options": []
            }
        },
        "Page.waitForSelector": {
            "name": "waitForSelector",
            "location": 622,
            "return": [],
            "arguments": {
                "self": [],
                "selector": [],
                "options": []
            }
        },
        "Page.waitForXPath": {
            "name": "waitForXPath",
            "location": 652,
            "return": [],
            "arguments": {
                "self": [],
                "xpath": [],
                "options": []
            }
        },
        "Page.waitForFunction": {
            "name": "waitForFunction",
            "location": 683,
            "return": [],
            "arguments": {
                "self": [],
                "pageFunction": [],
                "options": []
            }
        },
        "Page.enableNetworkCache": {
            "name": "enableNetworkCache",
            "location": 714,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.disableNetworkCache": {
            "name": "disableNetworkCache",
            "location": 717,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.cookies": {
            "name": "cookies",
            "location": 720,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.getAllCookies": {
            "name": "getAllCookies",
            "location": 732,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page.screenshot": {
            "name": "screenshot",
            "location": 1080,
            "return": [],
            "arguments": {
                "self": [],
                "options": []
            }
        },
        "Page.evaluate": {
            "name": "evaluate",
            "location": 1258,
            "return": [],
            "arguments": {
                "self": [],
                "pageFunction": []
            }
        },
        "Page._onTargetCrashed": {
            "name": "_onTargetCrashed",
            "location": 1421,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Page._check_worker": {
            "name": "_check_worker",
            "location": 1424,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "Page._onLogEntryAdded": {
            "name": "_onLogEntryAdded",
            "location": 1435,
            "return": [],
            "arguments": {
                "self": [],
                "entry": []
            }
        },
        "Page._on_lifecycle": {
            "name": "_on_lifecycle",
            "location": 1438,
            "return": [],
            "arguments": {
                "self": [],
                "le": []
            }
        },
        "Page._emitMetrics": {
            "name": "_emitMetrics",
            "location": 1441,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "Page._buildMetricsObject": {
            "name": "_buildMetricsObject",
            "location": 1450,
            "return": [],
            "arguments": {
                "self": [],
                "metrics": []
            }
        },
        "Page._handleException": {
            "name": "_handleException",
            "location": 1457,
            "return": [],
            "arguments": {
                "self": [],
                "exceptionDetails": []
            }
        },
        "Page._onConsoleAPI": {
            "name": "_onConsoleAPI",
            "location": 1461,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "Page._onDialog": {
            "name": "_onDialog",
            "location": 1472,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "Page._onDomContentEventFired": {
            "name": "_onDomContentEventFired",
            "location": 1475,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "Page._onLoadEventFired": {
            "name": "_onLoadEventFired",
            "location": 1478,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "Page._onExceptionThrown": {
            "name": "_onExceptionThrown",
            "location": 1481,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "Page.__init__.closed": {
            "name": "closed",
            "location": 240,
            "return": [],
            "arguments": {}
        },
        "Page.waitForRequest.wrapped_predicate": {
            "name": "wrapped_predicate",
            "location": 964,
            "return": [],
            "arguments": {
                "req": []
            }
        },
        "Page.waitForResponse.wrapped_predicate": {
            "name": "wrapped_predicate",
            "location": 984,
            "return": [],
            "arguments": {
                "res": []
            }
        }
    },
    "simplechrome-master/simplechrome/request_response.py": {
        "headers_array": {
            "name": "headers_array",
            "location": 16,
            "return": [],
            "arguments": {
                "headers": []
            }
        },
        "Request.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "cdpEvent": [],
                "frame": [],
                "interceptionId": [],
                "userRequestInterceptionEnabled": [],
                "redirectChain": []
            }
        },
        "Request.wasCanceled": {
            "name": "wasCanceled",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.blockedReason": {
            "name": "blockedReason",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.url": {
            "name": "url",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.method": {
            "name": "method",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.postData": {
            "name": "postData",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.headers": {
            "name": "headers",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.urlFragment": {
            "name": "urlFragment",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.hasPostData": {
            "name": "hasPostData",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.requestId": {
            "name": "requestId",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.loaderId": {
            "name": "loaderId",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.timeStamp": {
            "name": "timeStamp",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.wallTime": {
            "name": "wallTime",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.initiator": {
            "name": "initiator",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.resourceType": {
            "name": "resourceType",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.frameId": {
            "name": "frameId",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.frame": {
            "name": "frame",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.hasUserGesture": {
            "name": "hasUserGesture",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.documentURL": {
            "name": "documentURL",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.isNavigationRequest": {
            "name": "isNavigationRequest",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.initialPriority": {
            "name": "initialPriority",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.referrerPolicy": {
            "name": "referrerPolicy",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.isLinkPreload": {
            "name": "isLinkPreload",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.mixedContentType": {
            "name": "mixedContentType",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.response": {
            "name": "response",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.redirectChain": {
            "name": "redirectChain",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.failureText": {
            "name": "failureText",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.failure": {
            "name": "failure",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.as_dict": {
            "name": "as_dict",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.__str__": {
            "name": "__str__",
            "location": 344,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Request.__repr__": {
            "name": "__repr__",
            "location": 347,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.__init__": {
            "name": "__init__",
            "location": 368,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "request": [],
                "cdpEvent": [],
                "loop": []
            }
        },
        "Response.frame": {
            "name": "frame",
            "location": 389,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.url": {
            "name": "url",
            "location": 393,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.protocol": {
            "name": "protocol",
            "location": 398,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.mimeType": {
            "name": "mimeType",
            "location": 402,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.ok": {
            "name": "ok",
            "location": 406,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.status": {
            "name": "status",
            "location": 414,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.headers": {
            "name": "headers",
            "location": 419,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.headersText": {
            "name": "headersText",
            "location": 424,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.requestHeaders": {
            "name": "requestHeaders",
            "location": 428,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.requestHeadersText": {
            "name": "requestHeadersText",
            "location": 433,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.remoteIPAddress": {
            "name": "remoteIPAddress",
            "location": 437,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.remotePort": {
            "name": "remotePort",
            "location": 441,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.requestId": {
            "name": "requestId",
            "location": 445,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.loaderId": {
            "name": "loaderId",
            "location": 449,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.resourceType": {
            "name": "resourceType",
            "location": 453,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.frameId": {
            "name": "frameId",
            "location": 457,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.timestamp": {
            "name": "timestamp",
            "location": 461,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.request": {
            "name": "request",
            "location": 465,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.fromCache": {
            "name": "fromCache",
            "location": 470,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.fromServiceWorker": {
            "name": "fromServiceWorker",
            "location": 478,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.encodedDataLength": {
            "name": "encodedDataLength",
            "location": 483,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.securityDetails": {
            "name": "securityDetails",
            "location": 487,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.securityState": {
            "name": "securityState",
            "location": 496,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.as_dict": {
            "name": "as_dict",
            "location": 500,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.buffer": {
            "name": "buffer",
            "location": 513,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.__str__": {
            "name": "__str__",
            "location": 532,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Response.__repr__": {
            "name": "__repr__",
            "location": 544,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "simplechrome-master/simplechrome/security_details.py": {
        "SecurityDetails.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "details": [
                    "dict",
                    "float",
                    "Optional[List[str]]",
                    "Generator"
                ]
            }
        },
        "SecurityDetails.keyExchange": {
            "name": "keyExchange",
            "location": 17,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "dict",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecurityDetails.keyExchangeGroup": {
            "name": "keyExchangeGroup",
            "location": 22,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "dict",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecurityDetails.cipher": {
            "name": "cipher",
            "location": 27,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecurityDetails.mac": {
            "name": "mac",
            "location": 32,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecurityDetails.certificateId": {
            "name": "certificateId",
            "location": 37,
            "return": [
                "str",
                "Union[int, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecurityDetails.sanList": {
            "name": "sanList",
            "location": 42,
            "return": [
                "str",
                "List[str]",
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecurityDetails.certificateTransparencyCompliance": {
            "name": "certificateTransparencyCompliance",
            "location": 47,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecurityDetails.signedCertificateTimestampList": {
            "name": "signedCertificateTimestampList",
            "location": 52,
            "return": [
                "bool",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecurityDetails.subjectName": {
            "name": "subjectName",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecurityDetails.issuer": {
            "name": "issuer",
            "location": 62,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecurityDetails.validFrom": {
            "name": "validFrom",
            "location": 67,
            "return": [
                "Dict[str, Union[int, str]]",
                "Dict[str, Dict]",
                "Optional[Dict[str, str]]",
                "Dict[int, List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecurityDetails.validTo": {
            "name": "validTo",
            "location": 72,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "Dict[str, Union[str, Set]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecurityDetails.protocol": {
            "name": "protocol",
            "location": 77,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecurityDetails.as_dict": {
            "name": "as_dict",
            "location": 81,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecurityDetails.__str__": {
            "name": "__str__",
            "location": 84,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecurityDetails.__repr__": {
            "name": "__repr__",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "simplechrome-master/simplechrome/target.py": {
        "Target.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "targetInfo": [
                    "Optional[str]",
                    "str",
                    "bool"
                ],
                "browserContext": [
                    "bool",
                    "str",
                    "dict",
                    "int",
                    "List[str]",
                    "Any"
                ],
                "sessionFactory": [
                    "int",
                    "Tuple[Optional[str], Optional[str]]",
                    "bool",
                    "Optional[bool]"
                ],
                "ignoreHTTPSErrors": [
                    "bool",
                    "Optional[List[str]]",
                    "str",
                    "FrozenSet",
                    "List[str]"
                ],
                "defaultViewport": [
                    "Optional[Callable]",
                    "Optional[str]",
                    "Optional[Dict[str, int]]",
                    "str"
                ],
                "screenshotTaskQueue": [
                    "List[str]",
                    "str",
                    "list",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "loop": [
                    "int",
                    "str",
                    "Callable"
                ]
            }
        },
        "Target.target_id": {
            "name": "target_id",
            "location": 64,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Target.initialized": {
            "name": "initialized",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Target.url": {
            "name": "url",
            "location": 72,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Target.type": {
            "name": "type",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Target.is_page_type": {
            "name": "is_page_type",
            "location": 90,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Target.opener": {
            "name": "opener",
            "location": 95,
            "return": [
                "dict",
                "bool",
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Target.browser": {
            "name": "browser",
            "location": 102,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Target.browserContext": {
            "name": "browserContext",
            "location": 106,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Target.page": {
            "name": "page",
            "location": 109,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Target.createSession": {
            "name": "createSession",
            "location": 114,
            "return": [
                "str",
                "Dict[str, Any]",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "Target._targetInfoChanged": {
            "name": "_targetInfoChanged",
            "location": 118,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "targetInfo": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "Target._initializedCallback": {
            "name": "_initializedCallback",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bl": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Target._closedCallback": {
            "name": "_closedCallback",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "simplechrome-master/simplechrome/task_queue.py": {
        "TaskQueue.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "TaskQueue.post_task": {
            "name": "post_task",
            "location": 16,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "asyncio.AbstractEventLoop",
                    "Coroutine[Any, Any, Any]",
                    "aioquic.asyncio.QuicConnectionProtocol"
                ]
            }
        }
    },
    "simplechrome-master/simplechrome/timeoutSettings.py": {
        "TimeoutSettings.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jsTimeout": [
                    "_typings.OptionalNumber",
                    "bool",
                    "float",
                    "int",
                    "Optional[Dict]"
                ],
                "navigationTimeout": [
                    "_typings.OptionalNumber",
                    "bool",
                    "float",
                    "int",
                    "Optional[Dict]"
                ],
                "defaultTimeout": [
                    "int",
                    "bytes"
                ]
            }
        },
        "TimeoutSettings.setDefaultJSTimeout": {
            "name": "setDefaultJSTimeout",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "str",
                    "Optional[\"Address\"]",
                    "_typings.Number",
                    "bytes",
                    "Union[None, bytes]"
                ]
            }
        },
        "TimeoutSettings.setDefaultNavigationTimeout": {
            "name": "setDefaultNavigationTimeout",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "_typings.Number",
                    "int",
                    "str",
                    "Tuple[int, int, int]",
                    "Optional[float]",
                    "bytes",
                    "Dict[str, Any]"
                ]
            }
        },
        "TimeoutSettings.setDefaultTimeout": {
            "name": "setDefaultTimeout",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [
                    "_typings.Number",
                    "str",
                    "Optional[\"Address\"]",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "TimeoutSettings.js_timeout": {
            "name": "js_timeout",
            "location": 49,
            "return": [
                "int",
                "tuple",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeoutSettings.navigationTimeout": {
            "name": "navigationTimeout",
            "location": 56,
            "return": [
                "int",
                "str",
                "float",
                "Mapping[str, Sequence[str]]",
                "Mapping[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeoutSettings.timeout": {
            "name": "timeout",
            "location": 65,
            "return": [
                "int",
                "Tuple[float, float, float, float]",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeoutSettings.__str__": {
            "name": "__str__",
            "location": 71,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "TimeoutSettings.__repr__": {
            "name": "__repr__",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "simplechrome-master/simplechrome/tracing.py": {
        "Tracing.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "List[Tuple[bool, Any]]",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "loop": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "simplechrome-master/simplechrome/us_keyboard_layout.py": {},
    "simplechrome-master/simplechrome/waitTask.py": {
        "WaitTask.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "domWorld": [
                    "bool",
                    "str",
                    "List[List[str]]",
                    "Optional[List[str]]",
                    "Optional[str]"
                ],
                "predicateBody": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "title": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "polling": [
                    "str",
                    "Optional[str]"
                ],
                "timeout": [
                    "Optional[int]",
                    "Optional[Dict[str, str]]"
                ],
                "js_timeout": [
                    "int",
                    "bytes",
                    "float",
                    "str"
                ]
            }
        },
        "WaitTask.promise": {
            "name": "promise",
            "location": 76,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaitTask.terminate": {
            "name": "terminate",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "Exception",
                    "bool",
                    "\"URL\"",
                    "str"
                ]
            }
        },
        "WaitTask._cleanup": {
            "name": "_cleanup",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaitTask.__await__": {
            "name": "__await__",
            "location": 166,
            "return": [
                "List[int]",
                "Dict[str, int]",
                "List[dict]",
                "asyncio.Future"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "simplechrome-master/simplechrome/workers.py": {
        "Worker.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "Union[None, str]"
                ],
                "url": [
                    "Optional[str]"
                ],
                "type_": [
                    "str",
                    "bool",
                    "dict",
                    "int"
                ],
                "loop": [
                    "_typings.OptionalLoop",
                    "int"
                ]
            }
        },
        "Worker.url": {
            "name": "url",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker.type": {
            "name": "type",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Worker.executionContext": {
            "name": "executionContext",
            "location": 59,
            "return": [
                "float",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Worker._on_console_api": {
            "name": "_on_console_api",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "events.events_base.EventType",
                    "aioquic.quic.events.QuicEvent",
                    "raiden_libs.events.Event"
                ]
            }
        },
        "Worker._on_exception": {
            "name": "_on_exception",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "aioquic.h3.events.H3Event",
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "Worker._once_execution_context_created": {
            "name": "_once_execution_context_created",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict",
                    "_typings.CDPEvent",
                    "Dict[str, bool]"
                ]
            }
        },
        "ServiceWorker.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "manager": [
                    "Optional[asyncio.AbstractEventLoop]",
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "ServiceWorker.as_dict": {
            "name": "as_dict",
            "location": 100,
            "return": [
                "str",
                "OrderedDict",
                "Dict[str, List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceWorker.origin": {
            "name": "origin",
            "location": 104,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceWorker.versionId": {
            "name": "versionId",
            "location": 108,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceWorker.registrationId": {
            "name": "registrationId",
            "location": 112,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceWorker.scopeURL": {
            "name": "scopeURL",
            "location": 116,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceWorker.isDeleted": {
            "name": "isDeleted",
            "location": 120,
            "return": [
                "str",
                "Callable",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceWorker.runningStatus": {
            "name": "runningStatus",
            "location": 124,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceWorker.status": {
            "name": "status",
            "location": 128,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceWorker.scriptLastModified": {
            "name": "scriptLastModified",
            "location": 132,
            "return": [
                "Optional[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceWorker.scriptResponseTime": {
            "name": "scriptResponseTime",
            "location": 136,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceWorker.targetId": {
            "name": "targetId",
            "location": 140,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceWorker.controlledClients": {
            "name": "controlledClients",
            "location": 144,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceWorker._bookKeeping": {
            "name": "_bookKeeping",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "update_how": [
                    "bool",
                    "Dict[str, str]",
                    "List[Dict[str, Any]]",
                    "Iterable[str]",
                    "Mapping[str, Any]"
                ],
                "is_version": [
                    "bool",
                    "List[str]",
                    "list"
                ]
            }
        },
        "ServiceWorker._error_reported": {
            "name": "_error_reported",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": []
            }
        },
        "ServiceWorker._destroyed": {
            "name": "_destroyed",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceWorker.__str__": {
            "name": "__str__",
            "location": 204,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceWorker.__repr__": {
            "name": "__repr__",
            "location": 207,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "simplechrome-master/simplechrome/worker_manager.py": {
        "WorkerManager.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "loop": []
            }
        },
        "WorkerManager.serviceWorkers": {
            "name": "serviceWorkers",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkerManager.workers": {
            "name": "workers",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WorkerManager.serviceWorker": {
            "name": "serviceWorker",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "registration_id": []
            }
        },
        "WorkerManager._onAttachedToTarget": {
            "name": "_onAttachedToTarget",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "WorkerManager._onDetachedFromTarget": {
            "name": "_onDetachedFromTarget",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "WorkerManager._onWorkerErrorReported": {
            "name": "_onWorkerErrorReported",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "WorkerManager._onWorkerRegistrationUpdated": {
            "name": "_onWorkerRegistrationUpdated",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "WorkerManager._onWorkerVersionUpdated": {
            "name": "_onWorkerVersionUpdated",
            "location": 235,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "WorkerManager._update_sw": {
            "name": "_update_sw",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "update_how": [],
                "is_version": []
            }
        },
        "WorkerManager._remove_service_worker": {
            "name": "_remove_service_worker",
            "location": 253,
            "return": [],
            "arguments": {
                "self": [],
                "reg_id": []
            }
        },
        "WorkerManager._ensure_serviceWorker_swapped": {
            "name": "_ensure_serviceWorker_swapped",
            "location": 258,
            "return": [],
            "arguments": {
                "self": [],
                "sw": [],
                "prev_id": []
            }
        },
        "WorkerManager._clear_workers": {
            "name": "_clear_workers",
            "location": 266,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "simplechrome-master/simplechrome/_typings.py": {},
    "simplechrome-master/simplechrome/__init__.py": {},
    "simplechrome-master/tests/base_test.py": {
        "handle_page_crash": {
            "name": "handle_page_crash",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "e": [
                    "int",
                    "Union[int, float]",
                    "bool",
                    "Union[str, Tuple[Any]]",
                    "str"
                ]
            }
        },
        "BaseChromeTest.setup_method": {
            "name": "setup_method",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "dict",
                    "Iterable[str]",
                    "tuple"
                ]
            }
        },
        "BaseChromeTest.full_test_url": {
            "name": "full_test_url",
            "location": 25,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "page": [
                    "Union[str, IO]",
                    "Dict[str, Any]",
                    "Callable[[str], T]",
                    "IO[str]",
                    "IO"
                ]
            }
        },
        "BaseChromeTest.tserver_endpoint_url": {
            "name": "tserver_endpoint_url",
            "location": 29,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "BaseChromeTest.goto_test": {
            "name": "goto_test",
            "location": 33,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "testpage": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "utils.MinMaxStats",
                    "Iterable[str]",
                    "Pattern"
                ],
                "options": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "utils.MinMaxStats",
                    "Iterable[str]",
                    "Pattern"
                ],
                "reset": [
                    "bool",
                    "dict",
                    "str"
                ]
            }
        },
        "BaseChromeTest.goto_empty": {
            "name": "goto_empty",
            "location": 44,
            "return": [
                "trezor.utils.Writer",
                "str",
                "Dict[str, Any]",
                "float"
            ],
            "arguments": {
                "self": [],
                "options": [
                    "OrderedDict",
                    "dict",
                    "Type['DataclassT']"
                ],
                "reset": [
                    "bool",
                    "str"
                ]
            }
        },
        "BaseChromeTest.goto_never_loads": {
            "name": "goto_never_loads",
            "location": 54,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "options": [
                    "Mapping[str, Any]",
                    "Type",
                    "Mapping",
                    "Callable[[Any], str]",
                    "Dict[str, float]",
                    "Dict[str, Any]"
                ],
                "reset": [
                    "int",
                    "List[Tuple[str, str]]",
                    "Type[T]",
                    "List[Dict[str, str]]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "BaseChromeTest.goto_about_blank": {
            "name": "goto_about_blank",
            "location": 64,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseChromeTest._goto": {
            "name": "_goto",
            "location": 93,
            "return": [
                "str",
                "Union[str, Dict]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Callable[[str], str]"
                ],
                "options": [
                    "str",
                    "Callable[[str], str]"
                ]
            }
        }
    },
    "simplechrome-master/tests/conftest.py": {
        "reaper": {
            "name": "reaper",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "oproc": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ee_helper": {
            "name": "ee_helper",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "test_server": {
            "name": "test_server",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "request": []
            }
        },
        "test_server_url": {
            "name": "test_server_url",
            "location": 80,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "request": [
                    "SubRequest"
                ]
            }
        },
        "event_loop": {
            "name": "event_loop",
            "location": 111,
            "return": [
                "asyncio.AbstractEventLoop"
            ],
            "arguments": {
                "request": [
                    "SubRequest",
                    "str"
                ]
            }
        },
        "eloop": {
            "name": "eloop",
            "location": 118,
            "return": [
                "bool",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "travis_project_root": {
            "name": "travis_project_root",
            "location": 123,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "SubRequest",
                    "dict"
                ]
            }
        },
        "reaper.kill_it": {
            "name": "kill_it",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "chrome_page.handle_page_crash": {
            "name": "handle_page_crash",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "e": [
                    "int",
                    "Union[int, float]",
                    "bool",
                    "Union[str, Tuple[Any]]",
                    "str"
                ]
            }
        }
    },
    "simplechrome-master/tests/frame_utils.py": {
        "dumpFrames": {
            "name": "dumpFrames",
            "location": 41,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "frame": [
                    "simplechrome.frame_manager.Frame",
                    "List[str]",
                    "bytes",
                    "list",
                    "str"
                ]
            }
        }
    },
    "simplechrome-master/tests/server.py": {
        "get_app": {
            "name": "get_app",
            "location": 39,
            "return": [
                "pypi2nix.path.Path"
            ],
            "arguments": {}
        }
    },
    "simplechrome-master/tests/server2.py": {
        "read_root": {
            "name": "read_root",
            "location": 23,
            "return": [
                "bool",
                "Callable",
                "List[dict]",
                "int",
                "str"
            ],
            "arguments": {}
        }
    },
    "simplechrome-master/tests/test_connection.py": {},
    "simplechrome-master/tests/test_dialog.py": {},
    "simplechrome-master/tests/test_element_handle.py": {},
    "simplechrome-master/tests/test_execution_context.py": {},
    "simplechrome-master/tests/test_frames.py": {},
    "simplechrome-master/tests/test_input.py": {},
    "simplechrome-master/tests/test_launcher.py": {
        "TestLauncher.test_create_argless_no_throw": {
            "name": "test_create_argless_no_throw",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "simplechrome-master/tests/test_page.py": {
        "TestPage.test_console_event.log": {
            "name": "log",
            "location": 245,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "TestPage.test_request.no_favico": {
            "name": "no_favico",
            "location": 312,
            "return": [],
            "arguments": {
                "req": []
            }
        }
    },
    "simplechrome-master/tests/test_wait_task.py": {},
    "simplechrome-master/tests/utils.py": {
        "dummy_predicate": {
            "name": "dummy_predicate",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "PageCrashState.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "crashed": [
                    "bool",
                    "int",
                    "Optional[bool]",
                    "str",
                    "float"
                ]
            }
        },
        "PageCrashState.crashed": {
            "name": "crashed",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageCrashState._page_crashed": {
            "name": "_page_crashed",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageCrashState.reset": {
            "name": "reset",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EEHandler.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EEHandler.addEventListener": {
            "name": "addEventListener",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "emitter": [
                    "str",
                    "Callable",
                    "Callable[[str], str]",
                    "Mapping"
                ],
                "eventName": [
                    "str",
                    "Callable",
                    "Callable[[str], str]",
                    "Mapping"
                ],
                "handler": [
                    "str",
                    "Callable",
                    "Callable[[str], str]",
                    "Mapping"
                ]
            }
        },
        "EEHandler.addEventListeners": {
            "name": "addEventListeners",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "emitter": [
                    "str",
                    "Callable",
                    "Dict[str, Any]"
                ],
                "eventsHandlers": [
                    "List[Tuple[str, Callable]]",
                    "str",
                    "int"
                ]
            }
        },
        "EEHandler.clean_up": {
            "name": "clean_up",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUtil.dumpFrames": {
            "name": "dumpFrames",
            "location": 96,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "frame": [
                    "simplechrome.frame_manager.Frame",
                    "List[str]",
                    "bytes",
                    "list",
                    "str"
                ]
            }
        },
        "TestUtil.waitEvent.listener": {
            "name": "listener",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [
                    "str",
                    "Dict[str, Any]",
                    "Callable[[T], bool]",
                    "Callable"
                ]
            }
        }
    },
    "simplechrome-master/tests/__init__.py": {}
}
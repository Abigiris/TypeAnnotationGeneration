{
    "slackbuild-master/main.py": {
        "slackbuild_webhook": {
            "name": "slackbuild_webhook",
            "location": 20,
            "return": [
                "Tuple[str, int, Dict[str, str]]",
                "Dict[str, Any]",
                "Response",
                "str",
                "Sequence[Sequence[str]]"
            ],
            "arguments": {
                "req": [
                    "flask.Request",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "slackbuild_pubsub": {
            "name": "slackbuild_pubsub",
            "location": 67,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Dict[str, str]",
                    "bytes",
                    "MutableMapping",
                    "Iterable[str]",
                    "dict"
                ],
                "context": [
                    "str",
                    "dict",
                    "bytes",
                    "bytearray"
                ]
            }
        }
    },
    "slackbuild-master/__init__.py": {},
    "slackbuild-master/slackbuild/build_status.py": {
        "BuildStatus.toMessage": {
            "name": "toMessage",
            "location": 28,
            "return": [
                "dict"
            ],
            "arguments": {
                "data": [
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Dict]",
                    "Optional[dict]",
                    "bool",
                    "Mapping"
                ],
                "config": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "Optional[dict]"
                ]
            }
        },
        "BuildStatus.__add_timing": {
            "name": "__add_timing",
            "location": 60,
            "return": [
                "bytes",
                "Dict[str, Set[str]]"
            ],
            "arguments": {
                "build": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ],
                "variables": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "BuildStatus.__add_git_info": {
            "name": "__add_git_info",
            "location": 72,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]",
                "dict",
                "Dict[str, Set[str]]"
            ],
            "arguments": {
                "build": [
                    "dict",
                    "Dict[str, str]"
                ],
                "variables": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "config": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "BuildStatus.__decode_data": {
            "name": "__decode_data",
            "location": 108,
            "return": [
                "str",
                "int",
                "Generator",
                "bool"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "int",
                    "Iterable",
                    "Optional[dict]"
                ]
            }
        }
    },
    "slackbuild-master/slackbuild/colors.py": {},
    "slackbuild-master/slackbuild/command.py": {
        "Command.run": {
            "name": "run",
            "location": 10,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "argv": [
                    "list",
                    "List[List[int]]",
                    "int"
                ],
                "cloudbuild": [
                    "str",
                    "bool",
                    "Union[str, Callable]"
                ],
                "config": [
                    "str",
                    "Optional[pyramid.config.Configurator]"
                ]
            }
        },
        "Command.help": {
            "name": "help",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "Command.cancel": {
            "name": "cancel",
            "location": 47,
            "return": [
                "List[str]",
                "Union[List, str]"
            ],
            "arguments": {
                "argv": [
                    "int",
                    "T",
                    "List[str]",
                    "Dict[str, int]"
                ],
                "cloudbuild": [
                    "str",
                    "Optional[str]",
                    "Mapping[str, Any]"
                ],
                "project": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Command.retry": {
            "name": "retry",
            "location": 71,
            "return": [
                "List[str]",
                "Union[List, str]"
            ],
            "arguments": {
                "argv": [
                    "int",
                    "T",
                    "List[str]",
                    "Dict[str, int]"
                ],
                "cloudbuild": [
                    "str",
                    "Optional[str]",
                    "Mapping[str, Any]"
                ],
                "project": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Command.trigger": {
            "name": "trigger",
            "location": 96,
            "return": [
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "argv": [
                    "bytes",
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "cloudbuild": [
                    "Optional[List[str]]",
                    "pyramid.config.Configurator",
                    "_pytesconfig.Config",
                    "cerise.config.Config",
                    "dict",
                    "sphinx.config.Config"
                ],
                "project": [
                    "sphinx.config.Config",
                    "pyramid.config.Configurator",
                    "_pytesconfig.Config",
                    "types.Config"
                ],
                "config": [
                    "Dict[str, Any]",
                    "dict",
                    "pyramid.config.Configurator"
                ]
            }
        },
        "Command._api_call": {
            "name": "_api_call",
            "location": 121,
            "return": [
                "str"
            ],
            "arguments": {
                "method": [
                    "str",
                    "Dict[str, Any]"
                ],
                "include_resp": [
                    "Dict[str, int]",
                    "str"
                ]
            }
        }
    },
    "slackbuild-master/slackbuild/config.py": {
        "Config.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "dict",
                    "Callable",
                    "str"
                ],
                "config_override": [
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "Config.get": {
            "name": "get",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "int",
                    "KT"
                ],
                "default": [
                    "str",
                    "bool",
                    "int",
                    "KT"
                ]
            }
        }
    },
    "slackbuild-master/slackbuild/slack.py": {
        "Slack.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]",
                    "yacron.config.JobConfig",
                    "types.Config"
                ],
                "client": [
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Slack.render_message": {
            "name": "render_message",
            "location": 25,
            "return": [
                "int",
                "bool",
                "Optional[float]",
                "Dict[str, str]",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "variables": [
                    "List[str]",
                    "dict"
                ],
                "template": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Slack.render_interactive_message": {
            "name": "render_interactive_message",
            "location": 49,
            "return": [
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "str",
                    "T",
                    "bytes"
                ],
                "success": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ],
                "message": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Slack.post_message": {
            "name": "post_message",
            "location": 98,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "bool",
                    "Optional[\"Frame\"]",
                    "str",
                    "Dict[str, Any]",
                    "Callable[[List, bool], None]"
                ]
            }
        },
        "Slack.verify_webhook": {
            "name": "verify_webhook",
            "location": 112,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "req": [
                    "int"
                ]
            }
        },
        "Slack.is_interactive_message": {
            "name": "is_interactive_message",
            "location": 144,
            "return": [
                "str"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "Slack.parse_command": {
            "name": "parse_command",
            "location": 161,
            "return": [
                "list",
                "int",
                "str"
            ],
            "arguments": {
                "data": [
                    "str",
                    "dict",
                    "bytes",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Slack.parse_request": {
            "name": "parse_request",
            "location": 184,
            "return": [
                "bytes",
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "req": [
                    "str",
                    "bool",
                    "bytes",
                    "List[int]"
                ]
            }
        }
    },
    "slackbuild-master/templates/test_render.py": {},
    "slackbuild-master/tests/test_build_status.py": {
        "TestBuildStatus.test_get_invalid": {
            "name": "test_get_invalid",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuildStatus.test_get_valid_working": {
            "name": "test_get_valid_working",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuildStatus.test_get_valid_success_triggered": {
            "name": "test_get_valid_success_triggered",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuildStatus.test_get_valid_success_manual": {
            "name": "test_get_valid_success_manual",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBuildStatus.test_template_config": {
            "name": "test_template_config",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slackbuild-master/tests/test_command.py": {
        "TestCommand.test_run_bad_input": {
            "name": "test_run_bad_input",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommand.test_run_success": {
            "name": "test_run_success",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCommand.test_run_error": {
            "name": "test_run_error",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Mock_CloudBuild.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "list",
                    "Tuple[float, float]",
                    "Iterator[Dict[str, Any]]",
                    "float",
                    "Pattern[str]",
                    "int"
                ],
                "kwargs": [],
                "return_val": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "error": [
                    "int",
                    "float",
                    "str",
                    "List[\"Outcome\"]",
                    "Union[float, int]"
                ]
            }
        },
        "Mock_CloudBuild.__getattr__": {
            "name": "__getattr__",
            "location": 155,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "Callable",
                    "List[str]",
                    "list"
                ]
            }
        },
        "Mock_CloudBuild.__call__": {
            "name": "__call__",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Mock_Response.__init__": {
            "name": "__init__",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "status": [
                    "int",
                    "str",
                    "bool"
                ],
                "reason": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "slackbuild-master/tests/test_config.py": {
        "TestConfig.test_config_valid": {
            "name": "test_config_valid",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_config_missing_required": {
            "name": "test_config_missing_required",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_config_extra": {
            "name": "test_config_extra",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_config_example": {
            "name": "test_config_example",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slackbuild-master/tests/test_slack.py": {
        "TestSlack.test_render_message_default": {
            "name": "test_render_message_default",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSlack.test_post_message_success": {
            "name": "test_post_message_success",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSlack.test_verify_webhook_valid": {
            "name": "test_verify_webhook_valid",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSlack.test_verify_webhook_invalid": {
            "name": "test_verify_webhook_invalid",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSlack.test_verify_webhook_max_content_length": {
            "name": "test_verify_webhook_max_content_length",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSlack.test_is_interactive_message": {
            "name": "test_is_interactive_message",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSlack.test_parse_command": {
            "name": "test_parse_command",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSlack.test_parse_request": {
            "name": "test_parse_request",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSlack.test_render_interactive_message": {
            "name": "test_render_interactive_message",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Mock_SlackClient.__init__": {
            "name": "__init__",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "call": [
                    "str",
                    "float",
                    "Set[str]",
                    "int"
                ],
                "response": [
                    "str",
                    "float",
                    "Set[str]",
                    "int"
                ],
                "call_args": [
                    "bool"
                ]
            }
        },
        "Mock_SlackClient.api_call": {
            "name": "api_call",
            "location": 203,
            "return": [
                "Sequence",
                "str",
                "Dict[str, Any]",
                "Callable",
                "dict",
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "self": [],
                "call": [
                    "Dict[str, Optional[str]]",
                    "Type"
                ]
            }
        },
        "Mock_Request.__init__": {
            "name": "__init__",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "headers": [
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "body": [
                    "str",
                    "Dict[str, str]",
                    "bool",
                    "List[Callable]"
                ],
                "content_length": [
                    "str",
                    "bool",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "Mock_Request.get_data": {
            "name": "get_data",
            "location": 217,
            "return": [
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "as_text": [
                    "int",
                    "str",
                    "bool",
                    "List[str]",
                    "Iterable[str]",
                    "list"
                ]
            }
        },
        "Mock_Request.to_dict": {
            "name": "to_dict",
            "location": 220,
            "return": [
                "int",
                "bool",
                "dict",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
{
    "snippets-master/algorithms/search/binary.py": {
        "BinarySearch.sort": {
            "name": "sort",
            "location": 7,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "array": [
                    "list",
                    "float",
                    "str",
                    "List[int]",
                    "List[float]"
                ]
            }
        },
        "BinarySearch._quick_sort": {
            "name": "_quick_sort",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "array": [
                    "int",
                    "float",
                    "List[int]"
                ],
                "low": [
                    "int",
                    "bytes"
                ],
                "high": [
                    "int",
                    "str",
                    "bytearray"
                ]
            }
        },
        "BinarySearch._partition": {
            "name": "_partition",
            "location": 18,
            "return": [
                "int",
                "slice",
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "array": [
                    "list",
                    "int",
                    "List[int]",
                    "List['cirq.Qid']"
                ],
                "low": [
                    "int",
                    "str",
                    "bool",
                    "Callable"
                ],
                "high": [
                    "int",
                    "Tuple[int]",
                    "List[List[int]]",
                    "list",
                    "float"
                ]
            }
        },
        "BinarySearch.search": {
            "name": "search",
            "location": 30,
            "return": [
                "str",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "array": [
                    "List[int]",
                    "List[List[int]]",
                    "Sequence[str]",
                    "int",
                    "str",
                    "list",
                    "Set[str]",
                    "Tuple[int]"
                ],
                "target": [
                    "int",
                    "list",
                    "List[float]"
                ]
            }
        },
        "BinarySearch._binary_search": {
            "name": "_binary_search",
            "location": 34,
            "return": [
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "array": [
                    "List[int]",
                    "int",
                    "str"
                ],
                "low": [
                    "Optional[str]"
                ],
                "high": [
                    "bytes",
                    "IO",
                    "str"
                ],
                "target": [
                    "List[int]",
                    "int",
                    "str"
                ]
            }
        }
    },
    "snippets-master/algorithms/sort/quick_sort.py": {
        "QuickSort.sort": {
            "name": "sort",
            "location": 6,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "array": [
                    "list",
                    "float",
                    "str",
                    "List[int]",
                    "List[float]"
                ]
            }
        },
        "QuickSort._quick_sort": {
            "name": "_quick_sort",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "array": [
                    "int",
                    "float",
                    "List[int]"
                ],
                "low": [
                    "int",
                    "bytes"
                ],
                "high": [
                    "int",
                    "str",
                    "bytearray"
                ]
            }
        },
        "QuickSort._partition": {
            "name": "_partition",
            "location": 17,
            "return": [
                "int",
                "slice",
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "array": [
                    "list",
                    "int",
                    "List[int]",
                    "List['cirq.Qid']"
                ],
                "low": [
                    "int",
                    "str",
                    "bool",
                    "Callable"
                ],
                "high": [
                    "int",
                    "Tuple[int]",
                    "List[List[int]]",
                    "list",
                    "float"
                ]
            }
        }
    },
    "snippets-master/lang/python/dict_convert.py": {
        "convert": {
            "name": "convert",
            "location": 14,
            "return": [
                "int",
                "Sequence[str]"
            ],
            "arguments": {
                "doc": [
                    "bytes",
                    "str",
                    "dict"
                ]
            }
        }
    },
    "snippets-master/lang/python/dynamic_class.py": {
        "CanDoSomething.has_permission": {
            "name": "has_permission",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": []
            }
        },
        "CanDoSomethingOrReadOnly.has_permission": {
            "name": "has_permission",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view": []
            }
        },
        "HasPermissionToDo.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "permission_code": [
                    "str",
                    "bool",
                    "int",
                    "MutableMapping"
                ]
            }
        },
        "HasPermissionToDo.__new__": {
            "name": "__new__",
            "location": 26,
            "return": [
                "str",
                "Literal"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[Any]",
                    "Optional[str]"
                ],
                "permission_code": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "snippets-master/lang/python/async-sanic/hello.py": {
        "test": {
            "name": "test",
            "location": 8,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "snippets-master/lang/python/gevent/gevent-actors.py": {
        "Actor.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Actor.receive": {
            "name": "receive",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Actor._run": {
            "name": "_run",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Pinger.receive": {
            "name": "receive",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int"
                ]
            }
        },
        "Ponger.receive": {
            "name": "receive",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "snippets-master/lang/python/gevent/gevent-asynchronous.py": {
        "task": {
            "name": "task",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "pid": [
                    "str",
                    "int"
                ]
            }
        },
        "synchronous": {
            "name": "synchronous",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "asynchronous": {
            "name": "asynchronous",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "snippets-master/lang/python/gevent/gevent-asyncresult.py": {
        "setter": {
            "name": "setter",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "waiter": {
            "name": "waiter",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "snippets-master/lang/python/gevent/gevent-chatroom.py": {},
    "snippets-master/lang/python/gevent/gevent-event.py": {
        "setter": {
            "name": "setter",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "waiter": {
            "name": "waiter",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "snippets-master/lang/python/gevent/gevent-first.py": {
        "foo": {
            "name": "foo",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "bar": {
            "name": "bar",
            "location": 11,
            "return": [],
            "arguments": {}
        }
    },
    "snippets-master/lang/python/gevent/gevent-group.py": {
        "hello_from": {
            "name": "hello_from",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "bool",
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "intensive": {
            "name": "intensive",
            "location": 19,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "snippets-master/lang/python/gevent/gevent-monkey.py": {},
    "snippets-master/lang/python/gevent/gevent-polling.py": {
        "producer": {
            "name": "producer",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "ajax_endpoint": {
            "name": "ajax_endpoint",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "environ": [],
                "start_response": []
            }
        }
    },
    "snippets-master/lang/python/gevent/gevent-pool-socket.py": {
        "SocketPool.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SocketPool.listen": {
            "name": "listen",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "socket": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "snippets-master/lang/python/gevent/gevent-pool.py": {
        "hello_from": {
            "name": "hello_from",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "bool",
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        }
    },
    "snippets-master/lang/python/gevent/gevent-queue.py": {
        "worker": {
            "name": "worker",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "boss": {
            "name": "boss",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "snippets-master/lang/python/gevent/gevent-select.py": {
        "gr1": {
            "name": "gr1",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "gr2": {
            "name": "gr2",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "gr3": {
            "name": "gr3",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "gr4": {
            "name": "gr4",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "snippets-master/lang/python/gevent/gevent-simpleserver.py": {
        "handle": {
            "name": "handle",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "socket": [
                    "str",
                    "IO"
                ],
                "address": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "snippets-master/lang/python/gevent/threading-gevent.py": {},
    "snippets-master/lang/python/tornado/asynchronous_handler.py": {
        "CoroutineHandler.get": {
            "name": "get",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AsyncHandler.get": {
            "name": "get",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AsyncHandler.on_response": {
            "name": "on_response",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "response": []
            }
        }
    },
    "snippets-master/lang/python/tornado/context.py": {},
    "snippets-master/lang/python/tornado/coroutine_event_loop.py": {
        "fib": {
            "name": "fib",
            "location": 12,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "print_every": {
            "name": "print_every",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "message": [
                    "str",
                    "bool",
                    "int"
                ],
                "interval": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "read_input": {
            "name": "read_input",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "loop": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "sleep_for_seconds.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "wait_time": [
                    "int",
                    "float"
                ]
            }
        },
        "EventLoop.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EventLoop.resume_task": {
            "name": "resume_task",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "coroutine": [
                    "T",
                    "dict",
                    "types.Comparison",
                    "Callable"
                ],
                "value": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Callable",
                    "Any"
                ],
                "stack": [
                    "Optional[SupportsFloat]",
                    "Optional[str]",
                    "Match"
                ]
            }
        },
        "EventLoop.schedule": {
            "name": "schedule",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "coroutine": [
                    "str",
                    "Match[str]",
                    "SupportsInt",
                    "bool",
                    "Optional[Sequence[T]]",
                    "T"
                ],
                "value": [
                    "str",
                    "Match[str]",
                    "SupportsInt",
                    "bool",
                    "Optional[Sequence[T]]",
                    "T"
                ],
                "stack": [
                    "str",
                    "Match[str]",
                    "SupportsInt",
                    "bool",
                    "Optional[Sequence[T]]",
                    "T"
                ],
                "when": [
                    "Optional[T]",
                    "bool",
                    "str",
                    "int",
                    "Type[Any]",
                    "float"
                ]
            }
        },
        "EventLoop.stop": {
            "name": "stop",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EventLoop.do_on_next_tick": {
            "name": "do_on_next_tick",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Dict[str, Any]",
                    "Callable",
                    "list",
                    "tuple",
                    "dict"
                ]
            }
        },
        "EventLoop.run_forever": {
            "name": "run_forever",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "snippets-master/lang/python/tornado/invalid_exception.py": {
        "callback": {
            "name": "callback",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "func": {
            "name": "func",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "out": {
            "name": "out",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "callback1": {
            "name": "callback1",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "like_other": {
            "name": "like_other",
            "location": 44,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "func1": {
            "name": "func1",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "env": {
            "name": "env",
            "location": 61,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "out1": {
            "name": "out1",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "func2": {
            "name": "func2",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "env1": {
            "name": "env1",
            "location": 87,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "out2": {
            "name": "out2",
            "location": 94,
            "return": [],
            "arguments": {}
        },
        "like_other.wrapper": {
            "name": "wrapper",
            "location": 45,
            "return": [],
            "arguments": {}
        }
    },
    "snippets-master/lang/python/tornado/spider.py": {
        "get_links_from_url": {
            "name": "get_links_from_url",
            "location": 19,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "remove_fragment": {
            "name": "remove_fragment",
            "location": 34,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "get_links": {
            "name": "get_links",
            "location": 39,
            "return": [],
            "arguments": {
                "html": []
            }
        },
        "main": {
            "name": "main",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "main.fetch_url": {
            "name": "fetch_url",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "main.worker": {
            "name": "worker",
            "location": 82,
            "return": [],
            "arguments": {}
        },
        "get_links.URLSeeker.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "get_links.URLSeeker.handle_starttag": {
            "name": "handle_starttag",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "tag": [],
                "attrs": []
            }
        }
    },
    "snippets-master/lang/python/tornado/test.py": {},
    "snippets-master/lang/python/tornado/tornado_echo_server.py": {
        "handle_client": {
            "name": "handle_client",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "cli_addr": [
                    "str",
                    "int"
                ],
                "fd": [
                    "str",
                    "int"
                ],
                "event": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "handle_server": {
            "name": "handle_server",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "fd": [
                    "str",
                    "List[str]",
                    "dict"
                ],
                "event": [
                    "int",
                    "dict",
                    "bool",
                    "Type[T]"
                ]
            }
        }
    },
    "snippets-master/leetcode/001_two_sum.py": {
        "Solution.twoSum": {
            "name": "twoSum",
            "location": 28,
            "return": [
                "int",
                "slice",
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "nums": [
                    "int",
                    "Callable",
                    "str"
                ],
                "target": [
                    "Iterable[Any]",
                    "int",
                    "Iterable",
                    "List[int]",
                    "str",
                    "float"
                ]
            }
        },
        "SolutionHash.twoSum": {
            "name": "twoSum",
            "location": 46,
            "return": [
                "Set[str]",
                "List[str]",
                "set",
                "str"
            ],
            "arguments": {
                "self": [],
                "nums": [
                    "int",
                    "Callable",
                    "str"
                ],
                "target": [
                    "Tuple['cirq.Qid']",
                    "List[str]"
                ]
            }
        },
        "SolutionHashOneLoop.twoSum": {
            "name": "twoSum",
            "location": 66,
            "return": [
                "int",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "nums": [
                    "int",
                    "Callable",
                    "str"
                ],
                "target": [
                    "Tuple['cirq.Qid']",
                    "List[str]"
                ]
            }
        }
    },
    "snippets-master/leetcode/002_add_two_numbers.py": {
        "ListNode.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "ListNode.create_from_list": {
            "name": "create_from_list",
            "location": 20,
            "return": [
                "str",
                "int",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "T",
                    "Dict[str, Any]",
                    "Callable[[T], Optional[T]]"
                ],
                "l": [
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "ListNode.list": {
            "name": "list",
            "location": 29,
            "return": [
                "List[str]",
                "AbstractSet[Type[object]]",
                "str",
                "Sequence[dict]",
                "Tuple[float, float]",
                "MutableMapping[str, int]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListNode.integer": {
            "name": "integer",
            "location": 39,
            "return": [
                "str",
                "Union[str, List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListNode.__str__": {
            "name": "__str__",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Solution.addTwoNumbers": {
            "name": "addTwoNumbers",
            "location": 52,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "l1": [
                    "int",
                    "str",
                    "Container",
                    "Collection[int]"
                ],
                "l2": [
                    "int",
                    "str",
                    "Container",
                    "Collection[int]"
                ]
            }
        },
        "SolutionComplex.addTwoNumbers": {
            "name": "addTwoNumbers",
            "location": 79,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "l1": [
                    "int"
                ],
                "l2": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "SolutionConvert.list_to_integer": {
            "name": "list_to_integer",
            "location": 114,
            "return": [
                "int",
                "str",
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "head": [
                    "bool",
                    "int",
                    "List[str]",
                    "Optional[int]"
                ]
            }
        },
        "SolutionConvert.integer_to_list": {
            "name": "integer_to_list",
            "location": 123,
            "return": [
                "str",
                "List[str]",
                "List[Dict]",
                "list"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "SolutionConvert.addTwoNumbers": {
            "name": "addTwoNumbers",
            "location": 141,
            "return": [
                "dict",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": [],
                "l1": [
                    "int",
                    "float",
                    "Mapping[Any, Any]"
                ],
                "l2": [
                    "int",
                    "float",
                    "Mapping[Any, Any]"
                ]
            }
        }
    },
    "snippets-master/leetcode/003_longest_substring.py": {
        "Solution.lengthOfLongestSubstring": {
            "name": "lengthOfLongestSubstring",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "SolutionB.lengthOfLongestSubstring": {
            "name": "lengthOfLongestSubstring",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "SolutionC.lengthOfLongestSubstring": {
            "name": "lengthOfLongestSubstring",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "Solution.lengthOfLongestSubstring.search": {
            "name": "search",
            "location": 30,
            "return": [],
            "arguments": {
                "s": []
            }
        }
    },
    "snippets-master/leetcode/004_median_of_two_sorted_arrays.py": {
        "Solution.findMedianSortedArrays": {
            "name": "findMedianSortedArrays",
            "location": 23,
            "return": [
                "bool",
                "Optional[Set[str]]"
            ],
            "arguments": {
                "self": [],
                "nums1": [
                    "int",
                    "float",
                    "list",
                    "List[Tuple[int, int]]",
                    "Sequence[T]",
                    "str"
                ],
                "nums2": [
                    "int",
                    "bytes",
                    "str",
                    "list"
                ]
            }
        },
        "SolutionB.findMedianSortedArrays": {
            "name": "findMedianSortedArrays",
            "location": 62,
            "return": [
                "str",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "nums1": [
                    "list",
                    "List[List[Any]]",
                    "str",
                    "int",
                    "Tuple[int]",
                    "Union[List[float], List[int]]"
                ],
                "nums2": [
                    "list",
                    "List[List[Any]]",
                    "str",
                    "int",
                    "Tuple[int]",
                    "Union[List[float], List[int]]"
                ]
            }
        },
        "SolutionC.findMedianSortedArrays": {
            "name": "findMedianSortedArrays",
            "location": 97,
            "return": [
                "str",
                "bool",
                "int",
                "float",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "str",
                    "Iterable",
                    "Iterable[str]",
                    "Sequence[T]",
                    "bool"
                ],
                "b": [
                    "str",
                    "Iterable",
                    "Iterable[str]",
                    "Sequence[T]",
                    "bool"
                ]
            }
        },
        "SolutionB.findMedianSortedArrays.search": {
            "name": "search",
            "location": 71,
            "return": [
                "dict",
                "str",
                "Union[type, Tuple[type, ...]]",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "l1": [
                    "\"Atom\"",
                    "bool",
                    "bytes",
                    "float"
                ],
                "l2": [
                    "List[int]",
                    "dict",
                    "Union[Sequence[int], Sequence[dict]]",
                    "T",
                    "Iterable[str]"
                ],
                "k": [
                    "Callable",
                    "float"
                ]
            }
        }
    },
    "snippets-master/leetcode/005_longest_palindromic_substring.py": {
        "is_palindrome": {
            "name": "is_palindrome",
            "location": 22,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "Solution.longestPalindrome": {
            "name": "longestPalindrome",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "SolutionB.longestPalindrome": {
            "name": "longestPalindrome",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "SolutionC.longestPalindrome": {
            "name": "longestPalindrome",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "SolutionD.lengthOfLongestSubstring": {
            "name": "lengthOfLongestSubstring",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "SolutionD.lengthOfLongestSubstring.lps": {
            "name": "lps",
            "location": 148,
            "return": [],
            "arguments": {
                "s": [],
                "i": [],
                "j": []
            }
        }
    },
    "snippets-master/leetcode/006_zigzag_conversion.py": {
        "Solution.convert": {
            "name": "convert",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "int",
                    "list",
                    "List[str]",
                    "List['Node']",
                    "str"
                ],
                "numRows": [
                    "int",
                    "list",
                    "Union[List[int], float, str]",
                    "str"
                ]
            }
        },
        "SolutionB.convert": {
            "name": "convert",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "int",
                    "list",
                    "str",
                    "List['Node']"
                ],
                "numRows": [
                    "int",
                    "str",
                    "list"
                ]
            }
        },
        "SolutionC.convert": {
            "name": "convert",
            "location": 100,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "List[str]",
                    "str",
                    "int",
                    "set",
                    "list",
                    "List[int]",
                    "List[Dict[str, Any]]"
                ],
                "numRows": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "snippets-master/leetcode/007_reverse_integer.py": {
        "Solution.reverse": {
            "name": "reverse",
            "location": 16,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "float"
                ]
            }
        },
        "SolutionB.reverse": {
            "name": "reverse",
            "location": 38,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        }
    },
    "snippets-master/leetcode/008_string_to_integer.py": {
        "Solution.myAtoi": {
            "name": "myAtoi",
            "location": 19,
            "return": [
                "int",
                "str",
                "List[str]",
                "List[dict]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "str": [
                    "str",
                    "bytes"
                ]
            }
        },
        "SolutionB.myAtoi": {
            "name": "myAtoi",
            "location": 42,
            "return": [
                "int",
                "str",
                "List[str]",
                "List[dict]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "str": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "snippets-master/leetcode/009_palindrome_number.py": {
        "Solution.isPalindrome": {
            "name": "isPalindrome",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "SolutionB.isPalindrome": {
            "name": "isPalindrome",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "bool",
                    "bytes",
                    "Optional[Union[int, float]]",
                    "int"
                ]
            }
        }
    },
    "snippets-master/leetcode/010_regular_expression_matching.py": {
        "Solution.isMatch": {
            "name": "isMatch",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "s": [],
                "p": []
            }
        },
        "SolutionB.isMatch": {
            "name": "isMatch",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "s": [],
                "p": []
            }
        }
    },
    "snippets-master/leetcode/011_container_with_most_water.py": {
        "Solution.maxArea": {
            "name": "maxArea",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "height": [
                    "int",
                    "List[int]"
                ]
            }
        }
    },
    "snippets-master/leetcode/012_integer_to_roman.py": {
        "Solution.intToRoman": {
            "name": "intToRoman",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "num": []
            }
        },
        "SolutionB.intToRoman": {
            "name": "intToRoman",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "num": []
            }
        }
    },
    "snippets-master/leetcode/013_roman_to_integer.py": {
        "Solution.romanToInt": {
            "name": "romanToInt",
            "location": 56,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "bytes",
                    "int",
                    "Union[str, bytes]"
                ]
            }
        },
        "SolutionB.romanToInt": {
            "name": "romanToInt",
            "location": 78,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]",
                "List[object]"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "Union[bytes, bytearray]",
                    "str",
                    "AnyStr",
                    "Iterable[T]",
                    "bool"
                ]
            }
        }
    },
    "snippets-master/leetcode/014_longest_common_prefix.py": {
        "Solution.longestCommonPrefix": {
            "name": "longestCommonPrefix",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "strs": []
            }
        },
        "SolutionB.longestCommonPrefix": {
            "name": "longestCommonPrefix",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "strs": []
            }
        }
    },
    "snippets-master/leetcode/015_3sum.py": {
        "Solution.threeSum": {
            "name": "threeSum",
            "location": 25,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": [],
                "nums": [
                    "list",
                    "List[List[str]]",
                    "int",
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "SolutionB.get_id": {
            "name": "get_id",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "nums": [
                    "list",
                    "int",
                    "Sequence['cirq.Qid']"
                ]
            }
        },
        "SolutionB.threeSum": {
            "name": "threeSum",
            "location": 62,
            "return": [
                "str",
                "List[Dict]",
                "Union[int, slice]",
                "bool",
                "Union[List[float], List[int]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "nums": [
                    "[[]]",
                    "str",
                    "list",
                    "List[int]",
                    "Tuple[FrozenSet[int]]",
                    "Sequence[str]"
                ]
            }
        }
    },
    "snippets-master/leetcode/016_3sum_closest.py": {
        "Solution.threeSumClosest": {
            "name": "threeSumClosest",
            "location": 18,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "nums": [
                    "str",
                    "List[int]",
                    "bool",
                    "bytearray",
                    "list",
                    "int"
                ],
                "target": [
                    "bool",
                    "float"
                ]
            }
        }
    },
    "snippets-master/leetcode/017_letter_combinations_of_a_phone_number.py": {
        "Solution.letterCombinations": {
            "name": "letterCombinations",
            "location": 33,
            "return": [
                "bool",
                "dict",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "digits": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "SolutionB.letterCombinations": {
            "name": "letterCombinations",
            "location": 67,
            "return": [
                "List[str]",
                "str",
                "List[Dict]"
            ],
            "arguments": {
                "self": [],
                "digits": [
                    "List[int]",
                    "Optional[int]"
                ]
            }
        }
    },
    "snippets-master/leetcode/018_4sum.py": {
        "Solution.fourSum": {
            "name": "fourSum",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "nums": [],
                "target": []
            }
        },
        "SolutionRecursive.fourSum": {
            "name": "fourSum",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "nums": [],
                "target": []
            }
        },
        "SolutionRecursive.fourSum.find_nsum": {
            "name": "find_nsum",
            "location": 81,
            "return": [],
            "arguments": {
                "low": [],
                "high": [],
                "target": [],
                "n": [],
                "subresult": []
            }
        }
    },
    "snippets-master/leetcode/019_remove_nth_node_from_end_olf_list.py": {
        "Solution.removeNthFromEnd": {
            "name": "removeNthFromEnd",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "head": [],
                "n": []
            }
        },
        "SolutionOnce.removeNthFromEnd": {
            "name": "removeNthFromEnd",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "head": [],
                "n": []
            }
        },
        "SolutionOnce.find_from_end": {
            "name": "find_from_end",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "head": [],
                "n": []
            }
        }
    },
    "snippets-master/leetcode/020_valid_parentheses.py": {
        "Solution.isValid": {
            "name": "isValid",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ]
            }
        }
    },
    "snippets-master/leetcode/021_merge_two_sorted_lists.py": {
        "Solution.mergeTwoLists": {
            "name": "mergeTwoLists",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "l1": [],
                "l2": []
            }
        },
        "SolutionB.mergeTwoLists": {
            "name": "mergeTwoLists",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "l1": [],
                "l2": []
            }
        },
        "SolutionRecursive.mergeTwoLists": {
            "name": "mergeTwoLists",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "l1": [],
                "l2": []
            }
        }
    },
    "snippets-master/leetcode/022_generate_parenthess.py": {
        "Solution.isValid": {
            "name": "isValid",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "Solution.generateParenthesis": {
            "name": "generateParenthesis",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "SolutionRecursive.generateParenthesis": {
            "name": "generateParenthesis",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "SolutionRecursive.findmatch": {
            "name": "findmatch",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "s": [],
                "para": [],
                "n": [],
                "left": [],
                "right": []
            }
        },
        "SolutionDP.generateParenthesis": {
            "name": "generateParenthesis",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "Solution.generateParenthesis.generate": {
            "name": "generate",
            "location": 44,
            "return": [],
            "arguments": {
                "s": []
            }
        }
    },
    "snippets-master/leetcode/023_merge_k_sorted_lists.py": {
        "Solution.mergeTwoLists": {
            "name": "mergeTwoLists",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "l1": [],
                "l2": []
            }
        },
        "Solution.mergeKLists": {
            "name": "mergeKLists",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "lists": []
            }
        },
        "SolutionMergeRecursive.mergeTwoLists": {
            "name": "mergeTwoLists",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "l1": [],
                "l2": []
            }
        },
        "SolutionMergeRecursive.mergeKLists": {
            "name": "mergeKLists",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "lists": []
            }
        },
        "SolutionSimple.addToList": {
            "name": "addToList",
            "location": 91,
            "return": [],
            "arguments": {
                "lists": []
            }
        },
        "SolutionSimple.mergeKLists": {
            "name": "mergeKLists",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "lists": []
            }
        },
        "SolutionBasedOnDeque.addToList": {
            "name": "addToList",
            "location": 124,
            "return": [],
            "arguments": {
                "lists": []
            }
        },
        "SolutionBasedOnDeque.mergeKLists": {
            "name": "mergeKLists",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "lists": []
            }
        }
    },
    "snippets-master/leetcode/024_swap_nodes_in_pairs.py": {
        "generate_linked_list": {
            "name": "generate_linked_list",
            "location": 24,
            "return": [],
            "arguments": {
                "n": [],
                "step": []
            }
        },
        "iter_linked_list": {
            "name": "iter_linked_list",
            "location": 34,
            "return": [],
            "arguments": {
                "head": []
            }
        },
        "ListNode.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Solution.swapPairs": {
            "name": "swapPairs",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "head": []
            }
        }
    },
    "snippets-master/leetcode/025_reverse_nodes_in_k_group.py": {
        "generate_linked_list": {
            "name": "generate_linked_list",
            "location": 24,
            "return": [],
            "arguments": {
                "n": [],
                "step": []
            }
        },
        "iter_linked_list": {
            "name": "iter_linked_list",
            "location": 34,
            "return": [],
            "arguments": {
                "head": []
            }
        },
        "ListNode.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Solution.reverseKGroup": {
            "name": "reverseKGroup",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "head": [],
                "k": []
            }
        },
        "SolutionRecursive.reverseKGroup": {
            "name": "reverseKGroup",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "head": [],
                "k": []
            }
        },
        "SolutionRecursive.reverseHelper": {
            "name": "reverseHelper",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "head": [],
                "k": [],
                "count": []
            }
        }
    },
    "snippets-master/leetcode/026_remove_duplicates_from_sorted_array.py": {
        "Solution.removeDuplicates": {
            "name": "removeDuplicates",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "nums": []
            }
        },
        "SolutionFast.removeDuplicates": {
            "name": "removeDuplicates",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "nums": []
            }
        },
        "SolutionSlow.removeDuplicates": {
            "name": "removeDuplicates",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "nums": []
            }
        }
    },
    "snippets-master/leetcode/027_remove_element.py": {
        "Solution.removeElement": {
            "name": "removeElement",
            "location": 33,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "nums": [
                    "str",
                    "list"
                ],
                "val": [
                    "int",
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "SolutionBasedOnPop.removeElement": {
            "name": "removeElement",
            "location": 54,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "nums": [
                    "list",
                    "List[str]",
                    "Optional[Union[str, Any, Any, Any]]",
                    "Optional[List[float]]",
                    "Sequence['cirq.Qid']",
                    "Dict[str, str]",
                    "int"
                ],
                "val": [
                    "str"
                ]
            }
        }
    },
    "snippets-master/leetcode/028_implement_strStr.py": {
        "Solution.strStr": {
            "name": "strStr",
            "location": 32,
            "return": [
                "int",
                "Optional[int]",
                "list"
            ],
            "arguments": {
                "self": [],
                "haystack": [
                    "list",
                    "bool",
                    "str",
                    "int"
                ],
                "needle": [
                    "str",
                    "list",
                    "List[T]",
                    "Optional[str]"
                ]
            }
        }
    },
    "snippets-master/leetcode/029_divide_two_integers.py": {
        "Solution.divide": {
            "name": "divide",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "dividend": [],
                "divisor": []
            }
        },
        "SolutionBasedSubtraction.divide": {
            "name": "divide",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "dividend": [],
                "divisor": []
            }
        },
        "Solution.divide.divide": {
            "name": "divide",
            "location": 60,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        }
    },
    "snippets-master/leetcode/030_substring_with_concatenation_of_all_words.py": {
        "Solution.findSubstring": {
            "name": "findSubstring",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "s": [],
                "words": []
            }
        },
        "SolutionSlow.strStr": {
            "name": "strStr",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "haystack": [],
                "needle": []
            }
        },
        "SolutionSlow.getAllString": {
            "name": "getAllString",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "words": []
            }
        },
        "SolutionSlow.findSubstring": {
            "name": "findSubstring",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "s": [],
                "words": []
            }
        }
    },
    "snippets-master/leetcode/031_next_permutation.py": {
        "Solution.nextPermutation": {
            "name": "nextPermutation",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "nums": []
            }
        }
    },
    "snippets-master/leetcode/032_longest_valid_parentheses.py": {
        "Solution.longestValidParentheses": {
            "name": "longestValidParentheses",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "SolutionSimple.longestValidParentheses": {
            "name": "longestValidParentheses",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "SolutionDP.longestValidParentheses": {
            "name": "longestValidParentheses",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "SolutionWithoutSpace.longestValidParentheses": {
            "name": "longestValidParentheses",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "SolutionSlow.isValid": {
            "name": "isValid",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "SolutionSlow.longestValidParentheses": {
            "name": "longestValidParentheses",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        }
    },
    "snippets-master/leetcode/033_search_in_rotated_sorted_array.py": {
        "Solution.search": {
            "name": "search",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "nums": [],
                "target": []
            }
        },
        "SoltuionIteration.search": {
            "name": "search",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "nums": [],
                "target": []
            }
        },
        "Solution.search.find": {
            "name": "find",
            "location": 35,
            "return": [],
            "arguments": {
                "nums": [],
                "l": [],
                "r": [],
                "key": []
            }
        }
    },
    "snippets-master/leetcode/034_find_first_and_last_position_of_element_in_sorted_array.py": {
        "Solution.searchRange": {
            "name": "searchRange",
            "location": 24,
            "return": [
                "Dict[str, Tuple[int, int]]",
                "Optional[int]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "nums": [
                    "list",
                    "List[int]",
                    "str",
                    "Optional[str]",
                    "int",
                    "Sequence[int]"
                ],
                "target": [
                    "Type",
                    "IO[str]",
                    "int",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Solution.searchRange.search": {
            "name": "search",
            "location": 33,
            "return": [
                "Union[tuple, list]",
                "Set[str]",
                "Iterator[object]"
            ],
            "arguments": {
                "nums": [
                    "str",
                    "int",
                    "List[int]",
                    "bool"
                ],
                "l": [
                    "int"
                ],
                "r": [
                    "dict",
                    "int",
                    "tuple",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        }
    },
    "snippets-master/leetcode/035_search_insert_position.py": {
        "Solution.searchInsert": {
            "name": "searchInsert",
            "location": 32,
            "return": [
                "str",
                "float",
                "int",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "nums": [
                    "int",
                    "bytes"
                ],
                "target": [
                    "int"
                ]
            }
        }
    },
    "snippets-master/leetcode/036_valid_sudoku.py": {
        "Solution.notInRow": {
            "name": "notInRow",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "matrix": [
                    "bytes"
                ],
                "row": [
                    "bytes"
                ]
            }
        },
        "Solution.notInCol": {
            "name": "notInCol",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {
                "matrix": [
                    "str"
                ],
                "col": [
                    "str"
                ]
            }
        },
        "Solution.notInBox": {
            "name": "notInBox",
            "location": 77,
            "return": [
                "bool"
            ],
            "arguments": {
                "matrix": [
                    "int",
                    "str",
                    "float"
                ],
                "startRow": [
                    "int",
                    "str",
                    "float"
                ],
                "startCol": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "Solution.isValidSudoku": {
            "name": "isValidSudoku",
            "location": 88,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "bool",
                    "int",
                    "Callable[[str], object]"
                ]
            }
        },
        "SolutionSimple.isValidSudoku": {
            "name": "isValidSudoku",
            "location": 103,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "Optional[Sequence[Any]]",
                    "Callable[[str], str]",
                    "str"
                ]
            }
        }
    },
    "snippets-master/leetcode/037_sudoku_solver.py": {
        "print_grid": {
            "name": "print_grid",
            "location": 21,
            "return": [],
            "arguments": {
                "arr": []
            }
        },
        "Solution.inRow": {
            "name": "inRow",
            "location": 42,
            "return": [],
            "arguments": {
                "matrix": [],
                "row": [],
                "num": []
            }
        },
        "Solution.inCol": {
            "name": "inCol",
            "location": 49,
            "return": [],
            "arguments": {
                "matrix": [],
                "col": [],
                "num": []
            }
        },
        "Solution.inBox": {
            "name": "inBox",
            "location": 56,
            "return": [],
            "arguments": {
                "matrix": [],
                "row": [],
                "col": [],
                "num": []
            }
        },
        "Solution.findEmptyCell": {
            "name": "findEmptyCell",
            "location": 64,
            "return": [],
            "arguments": {
                "matrix": []
            }
        },
        "Solution.solve": {
            "name": "solve",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "matrix": []
            }
        },
        "Solution.solveSudoku": {
            "name": "solveSudoku",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "board": []
            }
        }
    },
    "snippets-master/leetcode/038_count_and_say.py": {
        "Solution.countAndSay": {
            "name": "countAndSay",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "Solution.calculate": {
            "name": "calculate",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        }
    },
    "snippets-master/leetcode/039_combination_sum.py": {
        "Solution.combinationSum": {
            "name": "combinationSum",
            "location": 37,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "candidates": [
                    "T",
                    "int",
                    "List[bytes]",
                    "List[str]"
                ],
                "target": [
                    "float",
                    "Dict[str, List[float]]",
                    "callable"
                ]
            }
        },
        "Solution.find": {
            "name": "find",
            "location": 47,
            "return": [
                "set"
            ],
            "arguments": {
                "self": [],
                "candidates": [
                    "int",
                    "List[int]",
                    "str",
                    "Sized",
                    "List[float]"
                ],
                "target": [
                    "int"
                ],
                "answer": [
                    "List[int]",
                    "List[List[int]]",
                    "int",
                    "bytes"
                ],
                "results": [
                    "int",
                    "Callable",
                    "List[Tuple[str, Any]]",
                    "Tuple[int]",
                    "float"
                ],
                "i": [
                    "int",
                    "List[int]",
                    "str",
                    "Sized",
                    "List[float]"
                ]
            }
        },
        "SolutionB.combinationSum": {
            "name": "combinationSum",
            "location": 65,
            "return": [
                "set",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "candidate": [
                    "list",
                    "int",
                    "Callable",
                    "List[str]"
                ],
                "target": [
                    "int",
                    "Type[\"SerializationDialect\"]",
                    "str",
                    "float"
                ]
            }
        },
        "SolutionB.find": {
            "name": "find",
            "location": 69,
            "return": [
                "str",
                "bool",
                "int",
                "Dict[str, Tuple[int, int]]"
            ],
            "arguments": {
                "self": [],
                "candidates": [
                    "int",
                    "Dict[str, str]",
                    "bool",
                    "str",
                    "Optional[Dict[str, Dict]]"
                ],
                "target": [
                    "int",
                    "bool",
                    "Tuple[int, int]"
                ]
            }
        },
        "SolutionDP.combinationSum": {
            "name": "combinationSum",
            "location": 87,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "candidates": [
                    "list",
                    "int",
                    "Callable",
                    "List[str]"
                ],
                "target": [
                    "int",
                    "float",
                    "Tuple[int, int]",
                    "bool"
                ]
            }
        }
    },
    "snippets-master/leetcode/040_combination_sum_II.py": {
        "Solution.combinationSum2": {
            "name": "combinationSum2",
            "location": 39,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "candidates": [
                    "str",
                    "List[T]"
                ],
                "target": [
                    "str",
                    "List[T]"
                ]
            }
        },
        "Solution.dfs": {
            "name": "dfs",
            "location": 45,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": [],
                "candidates": [
                    "int",
                    "List[int]",
                    "List[float]",
                    "Sized",
                    "List[str]"
                ],
                "target": [
                    "bool",
                    "Tuple[int]",
                    "str",
                    "list",
                    "Optional[str]"
                ],
                "answer": [
                    "int",
                    "list",
                    "Sized",
                    "str"
                ],
                "results": [
                    "int",
                    "list",
                    "Sized",
                    "str"
                ],
                "i": [
                    "int",
                    "List[int]",
                    "List[float]",
                    "list",
                    "bytearray"
                ]
            }
        },
        "SolutionBacktracking.combinationSum2": {
            "name": "combinationSum2",
            "location": 64,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "candidates": [
                    "str",
                    "List[T]"
                ],
                "target": [
                    "str",
                    "List[T]"
                ]
            }
        },
        "SolutionBacktracking.find": {
            "name": "find",
            "location": 70,
            "return": [
                "set"
            ],
            "arguments": {
                "self": [],
                "candidates": [
                    "List[int]",
                    "int",
                    "list",
                    "tuple"
                ],
                "target": [
                    "int",
                    "str"
                ],
                "answer": [
                    "List[int]",
                    "int",
                    "bytes",
                    "List[List[int]]",
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, list]"
                ],
                "results": [
                    "float",
                    "int",
                    "str"
                ],
                "start": [
                    "int"
                ]
            }
        }
    },
    "snippets-master/leetcode/041_first_missing_positive.py": {
        "Solution.firstMissingPositive": {
            "name": "firstMissingPositive",
            "location": 28,
            "return": [
                "int",
                "slice",
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "nums": [
                    "Optional[Union[str, Any]]",
                    "Dict[str, T]",
                    "int",
                    "List[int]"
                ]
            }
        }
    },
    "snippets-master/leetcode/042_trapping_rain_water.py": {
        "Solution.trap": {
            "name": "trap",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "height": []
            }
        },
        "Solution.calculate": {
            "name": "calculate",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "height": [],
                "total": []
            }
        },
        "Solution.fix": {
            "name": "fix",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "height": []
            }
        },
        "SolutionB.trap": {
            "name": "trap",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "height": []
            }
        },
        "SolutionDP.trap": {
            "name": "trap",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "height": []
            }
        },
        "SolutionStack.trap": {
            "name": "trap",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "height": []
            }
        },
        "Solution.fix._fix": {
            "name": "_fix",
            "location": 52,
            "return": [],
            "arguments": {
                "height": [],
                "start": []
            }
        }
    },
    "snippets-master/leetcode/043_multiply_strings.py": {
        "Solution.multiply": {
            "name": "multiply",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "num1": [
                    "int",
                    "bool"
                ],
                "num2": [
                    "int",
                    "bool"
                ]
            }
        },
        "SolutionB.multiply": {
            "name": "multiply",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "num1": [
                    "str",
                    "int",
                    "float",
                    "bytes"
                ],
                "num2": [
                    "int",
                    "Optional[int]",
                    "str",
                    "float"
                ]
            }
        }
    },
    "snippets-master/leetcode/044_wildcard_matching.py": {
        "Solution.isMatch": {
            "name": "isMatch",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "s": [],
                "p": []
            }
        },
        "SolutionDP.isMatch": {
            "name": "isMatch",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "s": [],
                "p": []
            }
        }
    },
    "snippets-master/leetcode/045_jump_game_II.py": {
        "Solution.jump": {
            "name": "jump",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "nums": [
                    "List[int]",
                    "List[List[str]]",
                    "list",
                    "bytearray",
                    "List[float]"
                ]
            }
        },
        "SolutionDP.jump": {
            "name": "jump",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "nums": [
                    "int",
                    "List[List[Any]]",
                    "List[int]",
                    "list",
                    "List[float]",
                    "Tuple[int]"
                ]
            }
        }
    },
    "snippets-master/leetcode/046_permutations.py": {
        "SolutionBacktrace.cal": {
            "name": "cal",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "nums": [],
                "l": [],
                "r": [],
                "result": []
            }
        },
        "SolutionBacktrace.permute": {
            "name": "permute",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "nums": []
            }
        },
        "SolutionB.permute": {
            "name": "permute",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "nums": []
            }
        },
        "SolutionDFS.permute": {
            "name": "permute",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "nums": []
            }
        },
        "SolutionDFS.dfs": {
            "name": "dfs",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "nums": [],
                "path": [],
                "res": []
            }
        }
    },
    "snippets-master/leetcode/047_permutations_II.py": {
        "Solution.permuteUnique": {
            "name": "permuteUnique",
            "location": 21,
            "return": [
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "nums": [
                    "List[List[Any]]",
                    "list",
                    "int",
                    "Tuple[int]",
                    "str"
                ]
            }
        },
        "SolutionDFS.permuteUnique": {
            "name": "permuteUnique",
            "location": 40,
            "return": [
                "bool",
                "Union[int, float, complex]",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "nums": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "SolutionDFS.dfs": {
            "name": "dfs",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "nums": [
                    "List[int]",
                    "list",
                    "str",
                    "float"
                ],
                "path": [
                    "List[int]",
                    "List[List[int]]",
                    "Sequence[T]",
                    "int",
                    "Tuple[int]",
                    "bool"
                ],
                "res": [
                    "List[int]",
                    "List[List[int]]",
                    "Sequence[T]",
                    "int",
                    "Tuple[int]",
                    "bool"
                ]
            }
        }
    },
    "snippets-master/leetcode/048_rotate_image.py": {
        "Solution.rotate": {
            "name": "rotate",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "matrix": []
            }
        }
    },
    "snippets-master/leetcode/049_group_anagrams.py": {
        "Solution.groupAnagrams": {
            "name": "groupAnagrams",
            "location": 29,
            "return": [
                "str",
                "Hashable",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "strs": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "snippets-master/leetcode/050_Pow(x,n).py": {
        "Solution.myPow": {
            "name": "myPow",
            "location": 29,
            "return": [
                "str",
                "Tuple[int, int]",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "bool",
                    "Iterable[float]",
                    "int"
                ],
                "n": [
                    "float",
                    "bool",
                    "Iterable[float]",
                    "int"
                ]
            }
        }
    },
    "snippets-master/leetcode/051_n_quees.py": {
        "Solution.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Solution.printResults": {
            "name": "printResults",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Solution.isSafe": {
            "name": "isSafe",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "List[str]",
                    "int"
                ],
                "row": [
                    "int"
                ],
                "col": [
                    "int",
                    "float"
                ]
            }
        },
        "Solution.solve": {
            "name": "solve",
            "location": 71,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "str",
                    "List[str]",
                    "List[Tuple[int, str]]",
                    "list",
                    "List[Tuple[str, str]]",
                    "List[Tuple[int, int, Any]]",
                    "Set[str]"
                ],
                "col": [
                    "int",
                    "str",
                    "set",
                    "bool"
                ]
            }
        },
        "Solution.solveNQueens": {
            "name": "solveNQueens",
            "location": 87,
            "return": [
                "bool",
                "Optional[Union[str, Any]]",
                "int",
                "Counter[str]",
                "Dict[str, int]",
                "\"CollectionList\""
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "Optional[int]"
                ]
            }
        }
    },
    "snippets-master/leetcode/052_n_quees_II.py": {
        "Solution.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Solution.isSafe": {
            "name": "isSafe",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "board": [],
                "row": [],
                "col": []
            }
        },
        "Solution.solve": {
            "name": "solve",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "board": [],
                "col": []
            }
        },
        "Solution.totalNQueens": {
            "name": "totalNQueens",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "SolutionDFS.totalNQueens": {
            "name": "totalNQueens",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "SolutionDFS.totalNQueens.dfs": {
            "name": "dfs",
            "location": 91,
            "return": [],
            "arguments": {
                "state": [],
                "pd": [],
                "nd": []
            }
        }
    },
    "snippets-master/leetcode/053_maximum_subarray.py": {
        "Solution.maxSubArray": {
            "name": "maxSubArray",
            "location": 22,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "nums": [
                    "bytes",
                    "int",
                    "list",
                    "List[int]"
                ]
            }
        },
        "SolutionDivideConquer.maxSubArray": {
            "name": "maxSubArray",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "nums": [
                    "List[int]",
                    "list",
                    "bool",
                    "List[float]",
                    "str",
                    "int"
                ]
            }
        },
        "SolutionDivideConquer.divide": {
            "name": "divide",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "nums": [
                    "int",
                    "Callable",
                    "str"
                ],
                "left": [
                    "List['cirq.Qid']"
                ],
                "right": [
                    "float",
                    "bool",
                    "List['cirq.Qid']"
                ]
            }
        }
    },
    "snippets-master/leetcode/054_spiral_matrix.py": {
        "Solution.spiralOrder": {
            "name": "spiralOrder",
            "location": 33,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "matrix": [
                    "list",
                    "List[str]",
                    "List[int]",
                    "T",
                    "dict"
                ]
            }
        }
    },
    "snippets-master/leetcode/055_jump_game.py": {
        "Solution.canJump": {
            "name": "canJump",
            "location": 31,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "nums": [
                    "List[int]",
                    "List[float]",
                    "List[List[str]]",
                    "List[Tuple[int, int]]",
                    "str",
                    "Sequence[str]"
                ]
            }
        }
    },
    "snippets-master/leetcode/056_merge_intervals.py": {
        "Solution.merge": {
            "name": "merge",
            "location": 28,
            "return": [
                "List[int]",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "intervals": [
                    "List[dict]",
                    "List[Tuple[Any, Any]]",
                    "List[tuple]",
                    "List[Tuple[int, int]]",
                    "List[Tuple[int, Any]]",
                    "List[str]",
                    "Iterable[Tuple[str, str]]",
                    "float",
                    "list"
                ]
            }
        }
    },
    "snippets-master/leetcode/057_insert_interval.py": {
        "Solution.insert": {
            "name": "insert",
            "location": 25,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "intervals": [
                    "List[List[int]]",
                    "list",
                    "List[int]",
                    "List[Tuple[str, int]]",
                    "int",
                    "dict"
                ],
                "newInterval": [
                    "List[int]",
                    "int",
                    "List[List]",
                    "Sequence[T]",
                    "type",
                    "list"
                ]
            }
        },
        "Solution.merge": {
            "name": "merge",
            "location": 47,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "intervals": [
                    "int",
                    "List[List[int]]",
                    "List[int]",
                    "List[Tuple[int, int]]"
                ]
            }
        }
    },
    "snippets-master/leetcode/058_length_of_last_word.py": {
        "Solution.lengthOfLastWord": {
            "name": "lengthOfLastWord",
            "location": 22,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ]
            }
        }
    },
    "snippets-master/leetcode/059_spiral_maxtrix_II.py": {
        "Solution.generateMatrix": {
            "name": "generateMatrix",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "Optional[int]",
                    "List[List[str]]"
                ]
            }
        }
    },
    "snippets-master/leetcode/060_permutation_sequence.py": {
        "Solution.getPermutation": {
            "name": "getPermutation",
            "location": 36,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ],
                "k": [
                    "int"
                ]
            }
        },
        "SolutionB.getPermutation": {
            "name": "getPermutation",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ],
                "k": [
                    "int",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "SolutionB.permutations": {
            "name": "permutations",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "iterable": [
                    "Optional[Iterable[str]]",
                    "Iterator[T]",
                    "List[str]",
                    "Generator"
                ]
            }
        },
        "SolutionB.product": {
            "name": "product",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "iterable": [
                    "tuple",
                    "List[float]",
                    "Optional[int]",
                    "List[int]"
                ]
            }
        }
    },
    "snippets-master/leetcode/061_rotate_list.py": {
        "ListNode.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "val": [
                    "int",
                    "bool",
                    "float"
                ],
                "next": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ListNode.toString": {
            "name": "toString",
            "location": 37,
            "return": [
                "str",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListNode.createList": {
            "name": "createList",
            "location": 46,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "dict",
                    "bool"
                ],
                "ints": [
                    "List[int]",
                    "Iterable[str]",
                    "int",
                    "List[str]",
                    "tuple",
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Set[str]"
                ]
            }
        },
        "Solution.rotateRight": {
            "name": "rotateRight",
            "location": 60,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "head": [
                    "Optional[float]",
                    "bool",
                    "Optional[Dict[str, str]]",
                    "Optional[dict]",
                    "slice",
                    "Union[str, dict]"
                ],
                "k": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "snippets-master/leetcode/062_unique_paths.py": {
        "Solution.uniquePaths": {
            "name": "uniquePaths",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "m": [],
                "n": []
            }
        }
    },
    "snippets-master/leetcode/063_unique_paths_II.py": {
        "Solution.uniquePathsWithObstacles": {
            "name": "uniquePathsWithObstacles",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "obstacleGrid": []
            }
        }
    },
    "snippets-master/leetcode/064_minimum_path_sum.py": {
        "Solution.minPathSum": {
            "name": "minPathSum",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "grid": []
            }
        }
    },
    "snippets-master/leetcode/065_valid_number.py": {
        "Solution.is_number": {
            "name": "is_number",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ]
            }
        },
        "SolutionB.is_number": {
            "name": "is_number",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "snippets-master/leetcode/066_plus_one.py": {
        "Solution.plus_one": {
            "name": "plus_one",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "digits": [
                    "float",
                    "str",
                    "Iterable",
                    "Iterable[Any]"
                ]
            }
        },
        "Solution.plus_one_2": {
            "name": "plus_one_2",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "digits": [
                    "List[List[str]]",
                    "int",
                    "List[int]",
                    "List[Tuple[int, int]]",
                    "list",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "snippets-master/leetcode/067_add_binary.py": {
        "Solution.add_binary": {
            "name": "add_binary",
            "location": 24,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "str",
                    "List[int]",
                    "Collection[int]"
                ],
                "b": [
                    "str",
                    "List['cirq.Circuit']",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "snippets-master/leetcode/068_text_justification.py": {
        "Solution.full_justify": {
            "name": "full_justify",
            "location": 73,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "self": [],
                "words": [
                    "int",
                    "float",
                    "str"
                ],
                "max_width": [
                    "int",
                    "str"
                ]
            }
        },
        "Solution.format": {
            "name": "format",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "line": [
                    "int",
                    "str"
                ],
                "length": [
                    "int",
                    "Optional[int]"
                ],
                "max_width": [
                    "int",
                    "Optional[int]"
                ],
                "res": [
                    "str",
                    "Optional[str]",
                    "tuple"
                ]
            }
        }
    },
    "snippets-master/leetcode/069_sqrt(x).py": {
        "Solution.my_sqrt": {
            "name": "my_sqrt",
            "location": 28,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        }
    },
    "snippets-master/leetcode/104_maximum_depth_of_binary_tree.py": {
        "Solution.max_depth": {
            "name": "max_depth",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "root": []
            }
        },
        "SolutionB.max_depth": {
            "name": "max_depth",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "root": []
            }
        },
        "Solution.max_depth.traverse": {
            "name": "traverse",
            "location": 41,
            "return": [],
            "arguments": {
                "root": []
            }
        }
    },
    "snippets-master/leetcode/105_construct_binary_tree_from_preorder_and_inorder_traversal.py": {
        "Solution.buildTree": {
            "name": "buildTree",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "preorder": [],
                "inorder": []
            }
        }
    },
    "snippets-master/leetcode/106_construct_binary_tree_from_inorder_and_postorder_traversal.py": {
        "Solution.buildTree": {
            "name": "buildTree",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "inorder": [],
                "postorder": []
            }
        },
        "SolutionB.buildTree": {
            "name": "buildTree",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "inorder": [],
                "postorder": []
            }
        },
        "SolutionC.buildTree": {
            "name": "buildTree",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "inorder": [],
                "postorder": []
            }
        },
        "SolutionB.buildTree.build": {
            "name": "build",
            "location": 64,
            "return": [],
            "arguments": {
                "low": [],
                "high": []
            }
        },
        "SolutionC.buildTree.build": {
            "name": "build",
            "location": 90,
            "return": [],
            "arguments": {
                "postorder": [],
                "post_start": [],
                "post_end": [],
                "inorder": [],
                "in_start": [],
                "in_end": []
            }
        }
    },
    "snippets-master/leetcode/114_flatten_binary_tree_to_linked_list.py": {
        "Solution.flatten": {
            "name": "flatten",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "root": []
            }
        }
    },
    "snippets-master/leetcode/116_populating_next_right_pointers_in_each_node.py": {
        "Solution.connect": {
            "name": "connect",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "root": []
            }
        },
        "SolutionB.connect": {
            "name": "connect",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "root": []
            }
        },
        "SolutionB.connect_two_node": {
            "name": "connect_two_node",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "node1": [],
                "node2": []
            }
        }
    },
    "snippets-master/leetcode/226_invert_binary_tree.py": {
        "Solution.invertTree": {
            "name": "invertTree",
            "location": 40,
            "return": [
                "Optional[int]",
                "list",
                "Optional[float]",
                "type"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "Optional[TreeNode]",
                    "TreeNode",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "snippets-master/leetcode/230_kth_smallest_element_in_bst.py": {
        "Solution.kthSmallest": {
            "name": "kthSmallest",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "root": [],
                "k": []
            }
        },
        "Solution.traverse": {
            "name": "traverse",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "root": []
            }
        }
    },
    "snippets-master/leetcode/235_lowest_common_ancestor_of_binary_search_tree.py": {
        "Solution.lowestCommonAncestor": {
            "name": "lowestCommonAncestor",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "root": [],
                "p": [],
                "q": []
            }
        }
    },
    "snippets-master/leetcode/236_lowest_common_ancestor_of_binary_tree.py": {
        "Solution.lowestCommonAncestor": {
            "name": "lowestCommonAncestor",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "root": [],
                "p": [],
                "q": []
            }
        },
        "SolutionB.lowestCommonAncestor": {
            "name": "lowestCommonAncestor",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "root": [],
                "p": [],
                "q": []
            }
        },
        "SolutionB.traverse": {
            "name": "traverse",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "root": []
            }
        },
        "SolutionB.found": {
            "name": "found",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "root": [],
                "left": []
            }
        }
    },
    "snippets-master/leetcode/303_range_sum_query_immutable.py": {
        "NumArray.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "nums": [
                    "List[int]",
                    "int"
                ]
            }
        },
        "NumArray.sumRange": {
            "name": "sumRange",
            "location": 43,
            "return": [
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "left": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict"
                ],
                "right": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "NumArray.get": {
            "name": "get",
            "location": 46,
            "return": [
                "int",
                "str",
                "bool",
                "bytes",
                "List[Dict]"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "List[List[int]]",
                    "bool"
                ]
            }
        }
    },
    "snippets-master/leetcode/304_range_sum_query_2D_immutable.py": {
        "NumMatrix.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "matrix": []
            }
        },
        "NumMatrix.sumRegion": {
            "name": "sumRegion",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "row1": [],
                "col1": [],
                "row2": [],
                "col2": []
            }
        }
    },
    "snippets-master/leetcode/315_count_of_smaller_numbers_after_self.py": {
        "Solution.countSmaller": {
            "name": "countSmaller",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "nums": []
            }
        },
        "Solution._merge_sort": {
            "name": "_merge_sort",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "pairs": [],
                "lo": [],
                "hi": []
            }
        },
        "Solution._merge": {
            "name": "_merge",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "pairs": [],
                "lo": [],
                "mid": [],
                "hi": []
            }
        },
        "SolutionB.countSmaller": {
            "name": "countSmaller",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "nums": []
            }
        },
        "SolutionB.found_right_smaller_count": {
            "name": "found_right_smaller_count",
            "location": 95,
            "return": [],
            "arguments": {
                "nums": [],
                "index": []
            }
        }
    },
    "snippets-master/leetcode/327_count_of_range_sum.py": {
        "Solution.countRangeSum": {
            "name": "countRangeSum",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "nums": [],
                "lower": [],
                "upper": []
            }
        },
        "Solution._sort": {
            "name": "_sort",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "nums": []
            }
        },
        "Solution._merge_sort": {
            "name": "_merge_sort",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "nums": [],
                "lo": [],
                "hi": []
            }
        },
        "Solution._merge": {
            "name": "_merge",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "nums": [],
                "lo": [],
                "mid": [],
                "hi": []
            }
        },
        "SolutionB.countRangeSum": {
            "name": "countRangeSum",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "nums": [],
                "lower": [],
                "upper": []
            }
        }
    },
    "snippets-master/leetcode/493_reverse_pairs.py": {
        "Solution.reversePairs": {
            "name": "reversePairs",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "nums": []
            }
        },
        "Solution._merge_sort": {
            "name": "_merge_sort",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "nums": [],
                "lo": [],
                "hi": []
            }
        },
        "Solution._merge": {
            "name": "_merge",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "nums": [],
                "lo": [],
                "mid": [],
                "hi": []
            }
        },
        "SolutionB.reversePairs": {
            "name": "reversePairs",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "nums": []
            }
        },
        "SolutionB._merge_sort": {
            "name": "_merge_sort",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "nums": []
            }
        }
    },
    "snippets-master/leetcode/543_diameter_of_binary_tree.py": {
        "Solution.diameterOfBinaryTree": {
            "name": "diameterOfBinaryTree",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "root": []
            }
        },
        "Solution.traverse": {
            "name": "traverse",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "root": []
            }
        },
        "Solution.max_depth": {
            "name": "max_depth",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "root": []
            }
        },
        "SolutionB.diameterOfBinaryTree": {
            "name": "diameterOfBinaryTree",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "root": []
            }
        },
        "SolutionB.max_depth": {
            "name": "max_depth",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "root": []
            }
        }
    },
    "snippets-master/leetcode/560_subarray_sum_equals_k.py": {
        "Solution.subarraySum": {
            "name": "subarraySum",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "nums": [],
                "k": []
            }
        },
        "SolutionB.subarraySum": {
            "name": "subarraySum",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "nums": [],
                "k": []
            }
        }
    },
    "snippets-master/leetcode/652_find_duplicate_subtrees.py": {
        "Solution.findDuplicateSubtrees": {
            "name": "findDuplicateSubtrees",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "root": []
            }
        },
        "Solution.traverse": {
            "name": "traverse",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "root": []
            }
        }
    },
    "snippets-master/leetcode/654_maximum_binary_tree.py": {
        "Solution.constructMaximumBinaryTree": {
            "name": "constructMaximumBinaryTree",
            "location": 57,
            "return": [
                "Optional[int]",
                "Optional[float]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "nums": [
                    "int",
                    "List[int]",
                    "Dict[int, Any]",
                    "set",
                    "Union[int, float]",
                    "str"
                ]
            }
        }
    },
    "snippets-master/leetcode/876_middle_of_the_linked_list.py": {
        "Solution.middleNode": {
            "name": "middleNode",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "head": []
            }
        }
    },
    "snippets-master/leetcode/889_construct_binary_tree_from_preorder_and_postorder_traversal.py": {
        "Solution.constructFromPrePost": {
            "name": "constructFromPrePost",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "preorder": [],
                "postorder": []
            }
        },
        "SolutionB.constructFromPrePost": {
            "name": "constructFromPrePost",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "preorder": [],
                "postorder": []
            }
        },
        "Solution.constructFromPrePost.build": {
            "name": "build",
            "location": 60,
            "return": [],
            "arguments": {
                "preorder": [],
                "pre_start": [],
                "pre_end": [],
                "postorder": [],
                "post_start": [],
                "post_end": []
            }
        }
    },
    "snippets-master/leetcode/912_sort_a_array.py": {
        "Solution.sortArray": {
            "name": "sortArray",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "nums": []
            }
        },
        "Solution._merge_sort": {
            "name": "_merge_sort",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "nums": []
            }
        },
        "Solution._merge": {
            "name": "_merge",
            "location": 35,
            "return": [],
            "arguments": {
                "left_nums": [],
                "right_nums": []
            }
        },
        "SolutionB.sortArray": {
            "name": "sortArray",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "nums": []
            }
        },
        "SolutionB._merge_sort": {
            "name": "_merge_sort",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "nums": [],
                "lo": [],
                "hi": []
            }
        },
        "SolutionB._merge": {
            "name": "_merge",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "nums": [],
                "lo": [],
                "mid": [],
                "hi": []
            }
        },
        "SolutionC.sortArray": {
            "name": "sortArray",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "nums": []
            }
        },
        "SolutionC._quik_sort": {
            "name": "_quik_sort",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "nums": [],
                "low": [],
                "high": []
            }
        },
        "SolutionC._partition": {
            "name": "_partition",
            "location": 106,
            "return": [],
            "arguments": {
                "nums": [],
                "low": [],
                "high": []
            }
        }
    },
    "snippets-master/leetcode/__init__.py": {},
    "snippets-master/leetcode/utils/binary_tree.py": {
        "TreeNode.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "val": [
                    "int",
                    "bool",
                    "float"
                ],
                "left": [
                    "int",
                    "bool",
                    "float"
                ],
                "right": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "TreeNode.is_separator": {
            "name": "is_separator",
            "location": 12,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeNode.__str__": {
            "name": "__str__",
            "location": 15,
            "return": [
                "bool",
                "list",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinaryTreeBuilder.build_from_level_ordered": {
            "name": "build_from_level_ordered",
            "location": 22,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[Any, bool]",
                "Optional[dict]",
                "Union[str, None]"
            ],
            "arguments": {
                "level_ordered_tree": [
                    "int",
                    "dict"
                ]
            }
        },
        "BinaryTreeFormatter.level_order": {
            "name": "level_order",
            "location": 48,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "root": [
                    "Optional[str]"
                ]
            }
        },
        "BinaryTreeFormatter.level_order_with_connected_binary_tree": {
            "name": "level_order_with_connected_binary_tree",
            "location": 64,
            "return": [
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {
                "root": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Tuple[str, int]]",
                    "Optional[Union[int, str]]",
                    "Optional[List[str]]"
                ]
            }
        },
        "BinaryTreeFormatter.level_order_with_separator_for_perfect_binary_tree": {
            "name": "level_order_with_separator_for_perfect_binary_tree",
            "location": 80,
            "return": [
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {
                "root": [
                    "Optional[List[Any]]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "BinaryTreeFormatter.inorder": {
            "name": "inorder",
            "location": 102,
            "return": [
                "typing.List[TreeNode]"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "Sequence[str]",
                    "dict",
                    "int"
                ]
            }
        },
        "BinaryTreeFormatter.preorder": {
            "name": "preorder",
            "location": 106,
            "return": [
                "typing.List[TreeNode]"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "Sequence[str]",
                    "dict",
                    "int"
                ]
            }
        },
        "BinaryTreeFormatter.postorder": {
            "name": "postorder",
            "location": 110,
            "return": [
                "typing.List[TreeNode]"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "Sequence[str]",
                    "dict",
                    "int"
                ]
            }
        }
    },
    "snippets-master/leetcode/utils/list.py": {
        "create_linked_list": {
            "name": "create_linked_list",
            "location": 22,
            "return": [
                "int",
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]",
                "DefaultDict",
                "bool"
            ],
            "arguments": {
                "nums": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "ListNode.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict[str, Any]",
                    "int",
                    "List[str]",
                    "Set[str]",
                    "str"
                ]
            }
        },
        "ListNode.__iter__": {
            "name": "__iter__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ListNode.__str__": {
            "name": "__str__",
            "location": 15,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListNode.__repr__": {
            "name": "__repr__",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "snippets-master/leetcode/utils/test_binary_tree.py": {
        "TestBinaryTreeFormatter.test_level_order": {
            "name": "test_level_order",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "snippets-master/leetcode/utils/__init__.py": {},
    "snippets-master/problems/001_parse_navs_from_markdown.py": {
        "Solution.parse_navs": {
            "name": "parse_navs",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        }
    },
    "snippets-master/structure/bplustree/bplustree.py": {
        "printTree": {
            "name": "printTree",
            "location": 280,
            "return": [
                ""
            ],
            "arguments": {
                "tree": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "order": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Node.insert_at_leaf": {
            "name": "insert_at_leaf",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "leaf": [
                    "int",
                    "str",
                    "bool",
                    "list"
                ],
                "value": [
                    "T",
                    "Iterable",
                    "List[str]",
                    "Dict[str, str]",
                    "type",
                    "str"
                ],
                "key": [
                    "str",
                    "List[str]",
                    "dict",
                    "List[int]",
                    "Dict[str, str]"
                ]
            }
        },
        "BplusTree.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "order": [
                    "Callable[[None], None]",
                    "List[int]",
                    "str"
                ]
            }
        },
        "BplusTree.insert": {
            "name": "insert",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "T"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "BplusTree.search": {
            "name": "search",
            "location": 63,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "BplusTree.find": {
            "name": "find",
            "location": 80,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict[str, Any]",
                    "T",
                    "Optional[str]",
                    "dict",
                    "Union[str, List[str]]",
                    "Optional[Dict[str, Any]]",
                    "Literal"
                ],
                "key": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "BplusTree.insert_in_parent": {
            "name": "insert_in_parent",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "n": [
                    "bool",
                    "float",
                    "T"
                ],
                "value": [
                    "T",
                    "list"
                ],
                "ndash": [
                    "dict",
                    "str",
                    "type"
                ]
            }
        },
        "BplusTree.delete": {
            "name": "delete",
            "location": 127,
            "return": [
                "Union[str, bytes]",
                "set",
                "dict"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Dict[str, Any]"
                ],
                "key": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "set"
                ]
            }
        },
        "BplusTree.deleteEntry": {
            "name": "deleteEntry",
            "location": 154,
            "return": [
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "node_": [
                    "Sequence[Dict[str, Any]]",
                    "Callable",
                    "float",
                    "str"
                ],
                "value": [
                    "int",
                    "T",
                    "Union[int, float, str]",
                    "type",
                    "str",
                    "float"
                ],
                "key": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        }
    },
    "snippets-master/web/blog/app.py": {
        "IndexHandler.get": {
            "name": "get",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MainHandler.get": {
            "name": "get",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "bytes",
                    "List[str]",
                    "int",
                    "bool"
                ]
            }
        }
    }
}
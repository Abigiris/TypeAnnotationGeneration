{
    "sockeye-main/setup.py": {
        "get_long_description": {
            "name": "get_long_description",
            "location": 13,
            "return": [
                "str",
                "list"
            ],
            "arguments": {}
        },
        "get_version": {
            "name": "get_version",
            "location": 19,
            "return": [
                "str",
                "List[List[str]]",
                "bytes"
            ],
            "arguments": {}
        },
        "get_git_hash": {
            "name": "get_git_hash",
            "location": 25,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {}
        },
        "temporarily_write_git_hash": {
            "name": "temporarily_write_git_hash",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "git_hash": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "get_requirements": {
            "name": "get_requirements",
            "location": 53,
            "return": [
                "List[str]",
                "List[Tuple[str, str]]",
                "list",
                "bool",
                "Sequence[str]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        }
    },
    "sockeye-main/docs/tutorials/multilingual/add_tag_to_lines.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 8,
            "return": [
                "List[str]",
                "Iterable[str]",
                "Optional[Iterable[str]]",
                "Callable[[None], None]",
                "str",
                "Tuple[str]"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "sockeye-main/docs/tutorials/multilingual/remove_tag_from_translations.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 10,
            "return": [
                "List[str]",
                "Iterable[str]",
                "Optional[Iterable[str]]",
                "Callable[[None], None]",
                "str",
                "Tuple[str]"
            ],
            "arguments": {}
        },
        "is_tag": {
            "name": "is_tag",
            "location": 20,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "token": [
                    "str",
                    "bytes",
                    "int",
                    "List[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "sockeye-main/docs/tutorials/seqcopy/genseqcopy.py": {
        "to_str": {
            "name": "to_str",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "l": [
                    "bool",
                    "str",
                    "T"
                ]
            }
        },
        "write_data": {
            "name": "write_data",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "samples": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable",
                    "Iterable[str]",
                    "List[str]",
                    "int"
                ],
                "prefix": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "sockeye-main/sockeye/arguments.py": {
        "save_args": {
            "name": "save_args",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "args": [],
                "fname": [
                    "str",
                    "types.ServiceT",
                    "List[str]"
                ]
            }
        },
        "load_args": {
            "name": "load_args",
            "location": 101,
            "return": [
                "int",
                "Iterable[str]",
                "str",
                "dict"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "int",
                    "set"
                ]
            }
        },
        "regular_file": {
            "name": "regular_file",
            "location": 106,
            "return": [
                "str",
                "list"
            ],
            "arguments": {}
        },
        "regular_folder": {
            "name": "regular_folder",
            "location": 123,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "int_greater_or_equal": {
            "name": "int_greater_or_equal",
            "location": 139,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "threshold": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "float_greater_or_equal": {
            "name": "float_greater_or_equal",
            "location": 156,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "threshold": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "bool_str": {
            "name": "bool_str",
            "location": 173,
            "return": [
                "int",
                "cmk.utils.type_defs.EventRule",
                "List[List[int]]",
                "Callable"
            ],
            "arguments": {}
        },
        "simple_dict": {
            "name": "simple_dict",
            "location": 193,
            "return": [
                "str",
                "bool",
                "List[Dict]",
                "Mapping[str, Any]",
                "Dict[int, Dict[str, Any]]",
                "dict"
            ],
            "arguments": {}
        },
        "multiple_values": {
            "name": "multiple_values",
            "location": 226,
            "return": [
                "int",
                "str",
                "Tuple[int, int]",
                "Tuple[str, int]",
                "T",
                "float"
            ],
            "arguments": {
                "num_values": [
                    "Optional[float]",
                    "int",
                    "Callable",
                    "Optional[Any]",
                    "Optional[bool]",
                    "Optional[str]",
                    "Union[str, Callable]",
                    "Optional[Callable]"
                ],
                "greater_or_equal": [
                    "Optional[float]",
                    "int",
                    "Callable",
                    "Optional[Any]",
                    "Optional[bool]",
                    "Optional[str]",
                    "Union[str, Callable]",
                    "Optional[Callable]"
                ],
                "data_type": [
                    "Optional[float]",
                    "int",
                    "Callable",
                    "Optional[Any]",
                    "Optional[bool]",
                    "Optional[str]",
                    "Union[str, Callable]",
                    "Optional[Callable]"
                ]
            }
        },
        "file_or_stdin": {
            "name": "file_or_stdin",
            "location": 256,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "add_average_args": {
            "name": "add_average_args",
            "location": 270,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "dict",
                    "int",
                    "Callable",
                    "core.types.UserRole",
                    "str",
                    "List[str]"
                ]
            }
        },
        "add_rerank_args": {
            "name": "add_rerank_args",
            "location": 298,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "dict",
                    "int",
                    "Callable",
                    "core.types.UserRole",
                    "str",
                    "List[str]"
                ]
            }
        },
        "add_lexicon_args": {
            "name": "add_lexicon_args",
            "location": 341,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "int",
                    "List[cmk.gui.plugins.visuals.utils.Filter]",
                    "Callable[[Dict], None]",
                    "bool",
                    "cmk.utils.type_defs.HostName"
                ],
                "is_for_block_lexicon": [
                    "Callable",
                    "bool",
                    "str"
                ]
            }
        },
        "add_lexicon_create_args": {
            "name": "add_lexicon_create_args",
            "location": 350,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "int",
                    "str",
                    "List[cmk.gui.plugins.visuals.utils.Filter]",
                    "Callable[[Dict], None]"
                ],
                "is_for_block_lexicon": [
                    "Callable",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "add_lexicon_inspect_args": {
            "name": "add_lexicon_inspect_args",
            "location": 361,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "dict",
                    "Callable",
                    "int",
                    "core.types.UserRole"
                ]
            }
        },
        "add_logging_args": {
            "name": "add_logging_args",
            "location": 366,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "dict",
                    "Tuple[Optional[float], Optional[float]]",
                    "Callable",
                    "Dict[str, Any]"
                ]
            }
        },
        "add_training_data_args": {
            "name": "add_training_data_args",
            "location": 391,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "argparse._SubParsersAction",
                    "argparse.Namespace",
                    "List[str]",
                    "bool"
                ],
                "required": [
                    "argparse._SubParsersAction",
                    "argparse.Namespace",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "add_validation_data_params": {
            "name": "add_validation_data_params",
            "location": 428,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "argparse.ArgumentParser",
                    "argparse._SubParsersAction"
                ]
            }
        },
        "add_prepared_data_args": {
            "name": "add_prepared_data_args",
            "location": 453,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "str",
                    "argparse.Namespace",
                    "Dict[str, Any]",
                    "Sequence[str]"
                ]
            }
        },
        "add_training_output_args": {
            "name": "add_training_output_args",
            "location": 459,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "argparse._SubParsersAction",
                    "List[str]",
                    "argparse.ArgumentParser"
                ]
            }
        },
        "add_training_io_args": {
            "name": "add_training_io_args",
            "location": 468,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "Dict[str, Dict[str, Any]]",
                    "bool",
                    "purplship.core.utils.xml.Element"
                ]
            }
        },
        "add_bucketing_args": {
            "name": "add_bucketing_args",
            "location": 481,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "argparse.ArgumentParser",
                    "argparse._SubParsersAction",
                    "argparse._ArgumentGroup"
                ]
            }
        },
        "add_process_pool_args": {
            "name": "add_process_pool_args",
            "location": 503,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "bool",
                    "Tuple[int, int, bool]"
                ]
            }
        },
        "add_prepare_data_cli_args": {
            "name": "add_prepare_data_cli_args",
            "location": 510,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "argparse.ArgumentParser",
                    "str",
                    "utils.parser.BinaryParser"
                ]
            }
        },
        "add_device_args": {
            "name": "add_device_args",
            "location": 539,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "dict",
                    "int",
                    "Callable",
                    "core.types.UserRole",
                    "str",
                    "List[str]"
                ]
            }
        },
        "add_vocab_args": {
            "name": "add_vocab_args",
            "location": 555,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "argparse._SubParsersAction",
                    "argparse._ArgumentGroup",
                    "argparse.ArgumentParser"
                ]
            }
        },
        "add_model_parameters": {
            "name": "add_model_parameters",
            "location": 598,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "List[str]",
                    "dict",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "add_batch_args": {
            "name": "add_batch_args",
            "location": 779,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "bool",
                    "List[Tuple[str, str]]",
                    "str",
                    "List[str]"
                ],
                "default_batch_size": [
                    "bool",
                    "int",
                    "str"
                ],
                "default_batch_type": [
                    "bool",
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "add_nvs_train_parameters": {
            "name": "add_nvs_train_parameters",
            "location": 808,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "List[str]",
                    "argparse._SubParsersAction",
                    "rouver.types.WSGIEnvironment",
                    "scripts.utils.command_line_args.CommandMap",
                    "argparse.Action",
                    "argparse.Namespace",
                    "dict"
                ]
            }
        },
        "add_training_args": {
            "name": "add_training_args",
            "location": 827,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "dict",
                    "int",
                    "Callable",
                    "core.types.UserRole",
                    "str",
                    "List[str]"
                ]
            }
        },
        "add_train_cli_args": {
            "name": "add_train_cli_args",
            "location": 1086,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "argparse.ArgumentParser",
                    "utils.parser.BinaryParser"
                ]
            }
        },
        "add_translate_cli_args": {
            "name": "add_translate_cli_args",
            "location": 1094,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "dict"
                ]
            }
        },
        "add_score_cli_args": {
            "name": "add_score_cli_args",
            "location": 1100,
            "return": [
                ""
            ],
            "arguments": {
                "params": []
            }
        },
        "add_inference_args": {
            "name": "add_inference_args",
            "location": 1145,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "dict",
                    "int",
                    "Callable",
                    "core.types.UserRole",
                    "str",
                    "List[str]"
                ]
            }
        },
        "add_length_penalty_args": {
            "name": "add_length_penalty_args",
            "location": 1313,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "argparse._SubParsersAction",
                    "argparse.ArgumentParser"
                ]
            }
        },
        "add_brevity_penalty_args": {
            "name": "add_brevity_penalty_args",
            "location": 1327,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "str",
                    "argparse.Action",
                    "Callable"
                ]
            }
        },
        "add_evaluate_args": {
            "name": "add_evaluate_args",
            "location": 1347,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "dict",
                    "int",
                    "Callable",
                    "core.types.UserRole",
                    "str",
                    "List[str]"
                ]
            }
        },
        "add_build_vocab_args": {
            "name": "add_build_vocab_args",
            "location": 1376,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "argparse._SubParsersAction"
                ]
            }
        },
        "ConfigArgumentParser.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigArgumentParser._register_argument": {
            "name": "_register_argument",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_action": [
                    "str",
                    "list",
                    "tuple",
                    "Callable[[], None]"
                ]
            }
        },
        "ConfigArgumentParser._overwrite_add_argument": {
            "name": "_overwrite_add_argument",
            "location": 55,
            "return": [
                "hashdecoder.lib.types.hint_type",
                "cmk.utils.type_defs.EventRule",
                "float",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": [],
                "original_object": [
                    "utils.parser.BinaryParser",
                    "argparse.ArgumentParser"
                ]
            }
        },
        "ConfigArgumentParser.add_argument_group": {
            "name": "add_argument_group",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigArgumentParser.parse_args": {
            "name": "parse_args",
            "location": 70,
            "return": [
                "Mapping[str, Sequence[str]]",
                "Optional[Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "namespace": [
                    "List[str]",
                    "int",
                    "str"
                ]
            }
        },
        "StoreDeprecatedAction.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "option_strings": [
                    "str",
                    "Optional[str]"
                ],
                "dest": [
                    "str",
                    "Optional[str]"
                ],
                "deprecated_dest": [
                    "int",
                    "str",
                    "Dict[str, 'LabwareDefinition']",
                    "List[int]"
                ],
                "nargs": [
                    "bool",
                    "str"
                ]
            }
        },
        "StoreDeprecatedAction.__call__": {
            "name": "__call__",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "argparse.ArgumentParser",
                    "Optional[str]",
                    "str"
                ],
                "namespace": [
                    "bool",
                    "int",
                    "argparse.Namespace",
                    "Optional[str]",
                    "str",
                    "Callable"
                ],
                "value": [
                    "bool",
                    "int",
                    "argparse.Namespace",
                    "Optional[str]",
                    "str",
                    "Callable"
                ],
                "option_string": [
                    "argparse.ArgumentParser",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "regular_file.check_regular_file": {
            "name": "check_regular_file",
            "location": 114,
            "return": [
                "str"
            ],
            "arguments": {
                "value_to_check": [
                    "str"
                ]
            }
        },
        "regular_folder.check_regular_directory": {
            "name": "check_regular_directory",
            "location": 130,
            "return": [
                "str",
                "bytes",
                "int",
                "Optional[float]"
            ],
            "arguments": {
                "value_to_check": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "int_greater_or_equal.check_greater_equal": {
            "name": "check_greater_equal",
            "location": 147,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "float_greater_or_equal.check_greater_equal": {
            "name": "check_greater_equal",
            "location": 164,
            "return": [
                "str",
                "bytes",
                "int",
                "Optional[float]"
            ],
            "arguments": {
                "value": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "bool_str.parse": {
            "name": "parse",
            "location": 180,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "simple_dict.parse": {
            "name": "parse",
            "location": 202,
            "return": [],
            "arguments": {
                "dict_str": []
            }
        },
        "multiple_values.parse": {
            "name": "parse",
            "location": 239,
            "return": [],
            "arguments": {
                "value_to_check": []
            }
        },
        "file_or_stdin.parse": {
            "name": "parse",
            "location": 261,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ConfigArgumentParser._overwrite_add_argument._new_add_argument": {
            "name": "_new_add_argument",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "this_self": [
                    "Callable",
                    "str",
                    "Sequence[str]",
                    "tuple"
                ]
            }
        },
        "simple_dict.parse._parse": {
            "name": "_parse",
            "location": 204,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "int",
                    "str",
                    "Collection[str]",
                    "float",
                    "bool",
                    "complex"
                ]
            }
        }
    },
    "sockeye-main/sockeye/average.py": {
        "average": {
            "name": "average",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "param_paths": [
                    "str",
                    "Optional[Tuple[str, ...]]",
                    "Optional['Directory']",
                    "Optional[str]"
                ]
            }
        },
        "find_checkpoints": {
            "name": "find_checkpoints",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "model_path": [
                    "str",
                    "int"
                ],
                "size": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, int]"
                ],
                "strategy": [
                    "str",
                    "bytes"
                ],
                "metric": [
                    "str",
                    "int"
                ]
            }
        },
        "strategy_best": {
            "name": "strategy_best",
            "location": 105,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "points": [
                    "list",
                    "dict",
                    "int",
                    "List[str]",
                    "Optional[Dict[str, Any]]",
                    "List[Dict]"
                ],
                "size": [
                    "list",
                    "dict",
                    "int",
                    "List[str]",
                    "Optional[Dict[str, Any]]",
                    "List[Dict]"
                ],
                "maximize": [
                    "list",
                    "dict",
                    "int",
                    "List[str]",
                    "Optional[Dict[str, Any]]",
                    "List[Dict]"
                ]
            }
        },
        "strategy_last": {
            "name": "strategy_last",
            "location": 110,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "points": [
                    "int",
                    "str",
                    "List[List[int]]"
                ],
                "size": [
                    "int",
                    "float"
                ],
                "maximize": [
                    "list",
                    "bool",
                    "int",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]"
                ]
            }
        },
        "strategy_lifespan": {
            "name": "strategy_lifespan",
            "location": 117,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "points": [
                    "int",
                    "Iterable",
                    "str",
                    "Tuple[int, int]"
                ],
                "size": [
                    "List[Tuple[Any, Any]]",
                    "List[tuple]"
                ],
                "maximize": [
                    "int",
                    "Tuple[int, int]",
                    "List[Tuple[int, int]]",
                    "Optional[List[str]]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "average_parameters": {
            "name": "average_parameters",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "sockeye-main/sockeye/beam_search.py": {
        "_get_vocab_slice_ids": {
            "name": "_get_vocab_slice_ids",
            "location": 532,
            "return": [
                "bool",
                "model.Integration",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "restrict_lexicon": [
                    "raiden.utils.PaymentAmount",
                    "raiden.utils.TokenNetworkAddress",
                    "raiden.utils.PaymentID",
                    "raiden.utils.TargetAddress",
                    "str"
                ],
                "source_words": [
                    "str",
                    "int"
                ],
                "eos_id": [
                    "int",
                    "torch.nn.modules.linear.Linear",
                    "bool",
                    "List[numpy.ndarray]"
                ],
                "beam_size": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "target_prefix": [
                    "int",
                    "Optional['psef.models.GroupSet']",
                    "raiden.utils.TokenAddress",
                    "dict",
                    "Sequence[str]",
                    "Optional[int]",
                    "raiden.utils.ChainID"
                ],
                "output_vocab_size": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "_get_nvs_vocab_slice_ids": {
            "name": "_get_nvs_vocab_slice_ids",
            "location": 572,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]",
                "torch.Tensor",
                "IO[str]",
                "Awaitable"
            ],
            "arguments": {
                "nvs_thresh": [
                    "str",
                    "torch.Tensor",
                    "bytes",
                    "float"
                ],
                "nvs_prediction": [
                    "str",
                    "torch.Tensor",
                    "bytes",
                    "float"
                ],
                "restrict_lexicon": [
                    "float",
                    "Optional[dict]"
                ],
                "target_prefix": [
                    "str",
                    "Optional[float]"
                ]
            }
        },
        "get_search_algorithm": {
            "name": "get_search_algorithm",
            "location": 1062,
            "return": [
                "str",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "models": [
                    "int",
                    "str",
                    "numpy.ndarray",
                    "sensibility.model.lstm.DualLSTMModel",
                    "cmk.utils.type_defs.UserId",
                    "float",
                    "bool"
                ],
                "beam_size": [
                    "int",
                    "bool",
                    "bytes",
                    "torch.Tensor"
                ],
                "device": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "output_scores": [
                    "bool",
                    "Union[Iterable, str]",
                    "str",
                    "int"
                ],
                "scorer": [
                    "int",
                    "str",
                    "float"
                ],
                "ensemble_mode": [
                    "int",
                    "str",
                    "Tuple[str, str]"
                ],
                "beam_search_stop": [
                    "int",
                    "str",
                    "float"
                ],
                "constant_length_ratio": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "sample": [
                    "Optional[int]",
                    "Optional[str]"
                ],
                "prevent_unk": [
                    "int",
                    "str",
                    "float"
                ],
                "greedy": [
                    "bool",
                    "int"
                ],
                "skip_nvs": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "nvs_thresh": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "_Inference.state_structure": {
            "name": "state_structure",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_Inference.encode_and_initialize": {
            "name": "encode_and_initialize",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "list",
                    "str",
                    "bool"
                ],
                "valid_length": [
                    "list",
                    "str",
                    "bool"
                ]
            }
        },
        "_Inference.decode_step": {
            "name": "decode_step",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "step_input": [
                    "list",
                    "Optional[str]",
                    "str",
                    "List[str]"
                ],
                "states": [
                    "list",
                    "Optional[str]",
                    "str",
                    "List[str]"
                ],
                "vocab_slice_ids": [
                    "list",
                    "Optional[str]",
                    "str",
                    "List[str]"
                ],
                "target_prefix_factor_mask": [
                    "list",
                    "Optional[str]",
                    "str",
                    "List[str]"
                ],
                "factor_vocab_size": [
                    "list",
                    "Optional[str]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "_Inference.model_output_vocab_size": {
            "name": "model_output_vocab_size",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_Inference.model_output_factor_vocab_size": {
            "name": "model_output_factor_vocab_size",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_SingleModelInference.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "skip_softmax": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "constant_length_ratio": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ]
            }
        },
        "_SingleModelInference.state_structure": {
            "name": "state_structure",
            "location": 73,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SingleModelInference.encode_and_initialize": {
            "name": "encode_and_initialize",
            "location": 76,
            "return": [
                "dict",
                "hackathon.utils.utils.DataMessage",
                "Union[str, List[str]]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Optional[dict]",
                    "str",
                    "numpy.ndarray"
                ],
                "valid_length": [
                    "Optional[dict]",
                    "str",
                    "numpy.ndarray"
                ]
            }
        },
        "_SingleModelInference.decode_step": {
            "name": "decode_step",
            "location": 80,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "step_input": [
                    "raiden.utils.PrivateKey",
                    "raiden.utils.Optional[raiden.utils.Address]",
                    "raiden.utils.ChannelMap"
                ],
                "states": [
                    "raiden.utils.Address",
                    "raiden.utils.TokenAmount"
                ],
                "vocab_slice_ids": [
                    "raiden.utils.PrivateKey",
                    "raiden.utils.Optional[raiden.utils.Address]",
                    "raiden.utils.ChannelMap"
                ],
                "target_prefix_factor_mask": [
                    "Union[int, argonautica.utils.Void]",
                    "str",
                    "List[str]",
                    "float",
                    "Optional[dict]"
                ],
                "factor_vocab_size": [
                    "int",
                    "bool",
                    "numpy.ndarray",
                    "torch.Tensor",
                    "torch.LongTensor",
                    "Optional[float]"
                ]
            }
        },
        "_SingleModelInference.model_output_vocab_size": {
            "name": "model_output_vocab_size",
            "location": 110,
            "return": [
                "str",
                "utils.JSON"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SingleModelInference.model_output_factor_vocab_size": {
            "name": "model_output_factor_vocab_size",
            "location": 114,
            "return": [
                "str",
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_EnsembleInference.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "models": [
                    "int",
                    "Callable",
                    "float"
                ],
                "ensemble_mode": [
                    "str",
                    "bool",
                    "int"
                ],
                "constant_length_ratio": [
                    "int",
                    "Callable",
                    "float"
                ]
            }
        },
        "_EnsembleInference.state_structure": {
            "name": "state_structure",
            "location": 133,
            "return": [
                "bool",
                "str",
                "Dict[str, Tuple[str, str]]",
                "Type[Exception]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_EnsembleInference.encode_and_initialize": {
            "name": "encode_and_initialize",
            "location": 136,
            "return": [
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Optional[dict]",
                    "str",
                    "numpy.ndarray"
                ],
                "valid_length": [
                    "Optional[dict]",
                    "str",
                    "numpy.ndarray"
                ]
            }
        },
        "_EnsembleInference.decode_step": {
            "name": "decode_step",
            "location": 153,
            "return": [
                "dict",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "step_input": [
                    "raiden.utils.Address",
                    "raiden.utils.PaymentNetworkID",
                    "raiden.utils.TokenAddress",
                    "int",
                    "float",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.BlockNumber"
                ],
                "states": [
                    "torch.Tensor",
                    "list",
                    "numpy.random.RandomState",
                    "int",
                    "tuple",
                    "List[int]"
                ],
                "vocab_slice_ids": [
                    "raiden.utils.Address",
                    "raiden.utils.PaymentNetworkID",
                    "raiden.utils.TokenAddress",
                    "int",
                    "float",
                    "raiden.utils.TokenNetworkID",
                    "raiden.utils.BlockNumber"
                ],
                "target_prefix_factor_mask": [
                    "float",
                    "raiden.utils.MonitoringServiceAddress",
                    "raiden.utils.OneToNAddress"
                ],
                "factor_vocab_size": [
                    "int",
                    "torch.Tensor",
                    "dict",
                    "torch.LongTensor",
                    "numpy.ndarray",
                    "str"
                ]
            }
        },
        "_EnsembleInference.linear_interpolation": {
            "name": "linear_interpolation",
            "location": 188,
            "return": [
                "Callable",
                "torch.Tensor",
                "Optional[torch.Tensor]",
                "str",
                "Tuple[Any, Any, Any]",
                "torch.FloatTensor",
                "trezor.utils.Writer",
                "list",
                "torch.nn.utils.rnn.PackedSequence"
            ],
            "arguments": {
                "predictions": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_EnsembleInference.log_linear_interpolation": {
            "name": "log_linear_interpolation",
            "location": 192,
            "return": [
                "float",
                "numpy.ndarray",
                "bool",
                "tuple",
                "str",
                "list",
                "int"
            ],
            "arguments": {
                "predictions": [
                    "dict",
                    "int"
                ]
            }
        },
        "_EnsembleInference.model_output_vocab_size": {
            "name": "model_output_vocab_size",
            "location": 197,
            "return": [
                "str",
                "utils.JSON"
            ],
            "arguments": {
                "self": []
            }
        },
        "_EnsembleInference.model_output_factor_vocab_size": {
            "name": "model_output_factor_vocab_size",
            "location": 201,
            "return": [
                "str",
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateScores.__init__": {
            "name": "__init__",
            "location": 225,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "prevent_unk": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "UpdateScores.forward": {
            "name": "forward",
            "location": 230,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "target_dists": [
                    "str",
                    "raiden.utils.Port",
                    "int",
                    "Dict[str, Any]"
                ],
                "finished": [
                    "int",
                    "str",
                    "Union[numpy.ndarray, xarray.DataArray]",
                    "torch.Tensor",
                    "bool",
                    "float"
                ],
                "scores_accumulated": [
                    "slice",
                    "List[int]",
                    "int",
                    "str",
                    "List[str]"
                ],
                "lengths": [
                    "int"
                ],
                "max_lengths": [
                    "int",
                    "numpy.random.RandomState",
                    "str",
                    "float"
                ],
                "pad_dist": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "eos_dist": [
                    "int",
                    "bool",
                    "float",
                    "numpy.random.RandomState"
                ]
            }
        },
        "LengthPenalty.__init__": {
            "name": "__init__",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alpha": [
                    "int",
                    "bool",
                    "float"
                ],
                "beta": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "LengthPenalty.forward": {
            "name": "forward",
            "location": 274,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "lengths": [
                    "int"
                ]
            }
        },
        "BrevityPenalty.__init__": {
            "name": "__init__",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "weight": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "BrevityPenalty.forward": {
            "name": "forward",
            "location": 298,
            "return": [
                "Tuple[Any, Any, Any]",
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "hyp_lengths": [
                    "int",
                    "numpy.random.RandomState"
                ],
                "reference_lengths": [
                    "torch.Tensor",
                    "int",
                    "bytes",
                    "Optional[str]",
                    "Dict[str, torch.LongTensor]"
                ]
            }
        },
        "CandidateScorer.__init__": {
            "name": "__init__",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "length_penalty_alpha": [
                    "int",
                    "bool",
                    "float"
                ],
                "length_penalty_beta": [
                    "int",
                    "bool",
                    "float"
                ],
                "brevity_penalty_weight": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "CandidateScorer.forward": {
            "name": "forward",
            "location": 326,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "scores": [
                    "float",
                    "Tuple[int, int]",
                    "str",
                    "torch.Tensor",
                    "int"
                ],
                "lengths": [
                    "int",
                    "str",
                    "bool"
                ],
                "reference_lengths": [
                    "List[AnyStr]",
                    "int",
                    "float",
                    "Tuple[int, int]"
                ]
            }
        },
        "CandidateScorer.unnormalize": {
            "name": "unnormalize",
            "location": 341,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "scores": [
                    "float",
                    "List[AnyStr]",
                    "List[list]",
                    "torch.Tensor"
                ],
                "lengths": [
                    "int",
                    "Optional[int]",
                    "Union[int, None]",
                    "bool",
                    "float",
                    "numpy.ndarray",
                    "Optional[numpy.ndarray]"
                ],
                "reference_lengths": [
                    "int",
                    "Optional[float]",
                    "torch.LongTensor",
                    "numpy.ndarray",
                    "Optional[Callable]",
                    "bool"
                ]
            }
        },
        "SortNormalizeAndUpdateFinished.__init__": {
            "name": "__init__",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pad_id": [
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "eos_id": [
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "scorer": [
                    "int",
                    "str",
                    "List[str]",
                    "List[int]",
                    "float"
                ],
                "expect_factors": [
                    "int",
                    "dict",
                    "Dict[str, str]",
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "SortNormalizeAndUpdateFinished.forward": {
            "name": "forward",
            "location": 365,
            "return": [
                "Optional[int]",
                "numpy.ndarray",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "best_hyp_indices": [
                    "int",
                    "torch.Tensor",
                    "numpy.ndarray"
                ],
                "best_word_indices": [
                    "numpy.ndarray"
                ],
                "finished": [
                    "int",
                    "Callable",
                    "str"
                ],
                "scores_accumulated": [
                    "float",
                    "bool",
                    "int",
                    "str"
                ],
                "lengths": [
                    "float",
                    "torch.Tensor",
                    "numpy.ndarray",
                    "int"
                ],
                "reference_lengths": [
                    "float",
                    "bool",
                    "torch.ByteTensor",
                    "Optional[List[str]]",
                    "torch.Tensor"
                ]
            }
        },
        "TopK.__init__": {
            "name": "__init__",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "int",
                    "bool",
                    "str",
                    "float",
                    "Tuple[str]"
                ]
            }
        },
        "TopK.forward": {
            "name": "forward",
            "location": 419,
            "return": [
                "Optional[int]",
                "int",
                "float",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "scores": [
                    "torch.Tensor",
                    "eth.abc.ComputationAPI",
                    "int"
                ]
            }
        },
        "SampleK.__init__": {
            "name": "__init__",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "SampleK.forward": {
            "name": "forward",
            "location": 449,
            "return": [
                "Optional[int]",
                "int",
                "float",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "scores": [
                    "List[str]",
                    "List[int]",
                    "torch.Tensor",
                    "Union[Callable, None]",
                    "List[gmail_img_dl.model.Attachment]",
                    "str"
                ],
                "target_dists": [
                    "int",
                    "str"
                ],
                "finished": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "RepeatStates.__init__": {
            "name": "__init__",
            "location": 485,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "beam_size": [
                    "int",
                    "bytes",
                    "Iterator[int]",
                    "bool",
                    "List[str]",
                    "Iterable[str]"
                ],
                "state_structure": [
                    "List[int]",
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "RepeatStates.forward": {
            "name": "forward",
            "location": 490,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "SortStates.__init__": {
            "name": "__init__",
            "location": 509,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state_structure": [
                    "Sequence[str]",
                    "Iterable",
                    "Callable",
                    "str"
                ]
            }
        },
        "SortStates.forward": {
            "name": "forward",
            "location": 513,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "best_hyp_indices": [
                    "raiden.utils.TokenAmount",
                    "Union[int, numpy.ndarray]",
                    "torch.Tensor"
                ]
            }
        },
        "GreedySearch.__init__": {
            "name": "__init__",
            "location": 623,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dtype": [
                    "str",
                    "Optional[str]"
                ],
                "bos_id": [
                    "str",
                    "int",
                    "bytes"
                ],
                "eos_id": [
                    "str",
                    "int",
                    "bytes"
                ],
                "device": [
                    "str",
                    "Optional[str]"
                ],
                "num_source_factors": [
                    "str",
                    "bytes",
                    "int"
                ],
                "num_target_factors": [
                    "int",
                    "Callable[[], None]",
                    "str",
                    "List[str]"
                ],
                "inference": [
                    "int",
                    "Callable[[int], int]",
                    "bool"
                ],
                "skip_nvs": [
                    "str",
                    "Optional[str]"
                ],
                "nvs_thresh": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "GreedySearch.forward": {
            "name": "forward",
            "location": 650,
            "return": [
                "bool",
                "str",
                "model.Integration",
                "OrderedDict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "int",
                    "bool"
                ],
                "source_length": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "torch.Tensor",
                    "Optional[float]"
                ],
                "restrict_lexicon": [
                    "bool",
                    "int",
                    "str",
                    "List[bytes]",
                    "Optional[Union[int, str]]"
                ],
                "max_output_lengths": [
                    "int"
                ],
                "target_prefix": [
                    "bool",
                    "int",
                    "str",
                    "List[bytes]",
                    "Optional[Union[int, str]]"
                ],
                "target_prefix_factors": [
                    "Tuple[str, int]",
                    "Union[None, float, int]",
                    "float",
                    "Optional[gluonts.model.common.Tensor]"
                ]
            }
        },
        "GreedyTop1.forward": {
            "name": "forward",
            "location": 755,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "scores": [
                    "bool",
                    "str",
                    "dict",
                    "Sequence",
                    "Tuple[int, int, int]"
                ],
                "vocab_slice_ids": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "float"
                ],
                "target_factors": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "BeamSearch.__init__": {
            "name": "__init__",
            "location": 784,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "beam_size": [
                    "int",
                    "str"
                ],
                "dtype": [
                    "int",
                    "List[Dict[str, Any]]",
                    "Optional[int]",
                    "bytes",
                    "float",
                    "str"
                ],
                "bos_id": [
                    "int",
                    "str"
                ],
                "eos_id": [
                    "int",
                    "List[int]",
                    "Optional[float]",
                    "numpy.ndarray"
                ],
                "device": [
                    "int",
                    "List[Dict[str, Any]]",
                    "Optional[int]",
                    "bytes",
                    "float",
                    "str"
                ],
                "output_vocab_size": [
                    "int"
                ],
                "scorer": [
                    "int",
                    "str",
                    "Optional[int]",
                    "dict",
                    "Set[int]"
                ],
                "num_source_factors": [
                    "int",
                    "bytes"
                ],
                "num_target_factors": [
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "tuple",
                    "float"
                ],
                "inference": [
                    "int",
                    "bool",
                    "tuple"
                ],
                "beam_search_stop": [
                    "bool"
                ],
                "sample": [
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[bool]",
                    "torch.LongTensor"
                ],
                "prevent_unk": [
                    "int",
                    "bool"
                ],
                "skip_nvs": [
                    "int",
                    "List[Dict[str, Any]]",
                    "Optional[int]",
                    "bytes",
                    "float",
                    "str"
                ],
                "nvs_thresh": [
                    "int",
                    "List[Dict[str, Any]]",
                    "Optional[int]",
                    "bytes",
                    "float",
                    "str"
                ]
            }
        },
        "BeamSearch.forward": {
            "name": "forward",
            "location": 836,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Union[int, float, complex]",
                "model.Integration"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "int",
                    "numpy.ndarray",
                    "numpy.array"
                ],
                "source_length": [
                    "Dict[str, torch.LongTensor]",
                    "int",
                    "Optional[lexicon.TopKLexicon]",
                    "raiden.utils.Secret",
                    "raiden.utils.PaymentAmount"
                ],
                "restrict_lexicon": [
                    "int"
                ],
                "max_output_lengths": [
                    "int",
                    "Tuple[int, int]",
                    "float"
                ],
                "target_prefix": [
                    "Optional[float]",
                    "float"
                ],
                "target_prefix_factors": [
                    "Tuple[str, int]",
                    "Union[None, float, int]",
                    "float",
                    "Optional[gluonts.model.common.Tensor]"
                ]
            }
        },
        "BeamSearch._should_stop": {
            "name": "_should_stop",
            "location": 1054,
            "return": [
                "trezor.utils.Writer",
                "numpy.ndarray",
                "Callable",
                "torch.Tensor",
                "Optional[torch.Tensor]",
                "Dict[str, Any]",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "finished": [
                    "int",
                    "numpy.ndarray",
                    "Tuple[int, int]"
                ],
                "batch_size": [
                    "int",
                    "numpy.ndarray",
                    "Tuple[int, int]",
                    "List[float]",
                    "float"
                ]
            }
        }
    },
    "sockeye-main/sockeye/checkpoint_decoder.py": {
        "parallel_subsample": {
            "name": "parallel_subsample",
            "location": 226,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "parallel_sequences": [
                    "int",
                    "Callable",
                    "List[int]"
                ],
                "sample_size": [
                    "int",
                    "Callable",
                    "List[int]"
                ],
                "seed": [
                    "int",
                    "Optional[Tuple[int, ...]]",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "write_to_file": {
            "name": "write_to_file",
            "location": 234,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "List[str]",
                    "str",
                    "List[dict]",
                    "bool",
                    "List[Dict]"
                ],
                "fname": [
                    "str",
                    "dict",
                    "bytes",
                    "frozenset[str]"
                ]
            }
        },
        "CheckpointDecoder.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_folder": [
                    "str",
                    "Optional[int]",
                    "List[str]"
                ],
                "inputs": [
                    "str",
                    "bool",
                    "int",
                    "List[str]"
                ],
                "references": [
                    "str",
                    "bool",
                    "int",
                    "List[str]"
                ],
                "source_vocabs": [
                    "int",
                    "List[int]",
                    "bool",
                    "torch.Tensor",
                    "str"
                ],
                "target_vocabs": [
                    "int",
                    "List[int]",
                    "bool",
                    "torch.Tensor",
                    "str"
                ],
                "model": [
                    "int",
                    "bool",
                    "Type",
                    "torch.nn.Module"
                ],
                "device": [
                    "int",
                    "List[int]",
                    "bool",
                    "torch.Tensor",
                    "str"
                ],
                "max_input_len": [
                    "int",
                    "Optional[int]"
                ],
                "batch_size": [
                    "Optional[C]",
                    "int",
                    "src.autoks.backend.model.RawGPModelType"
                ],
                "beam_size": [
                    "bool",
                    "int",
                    "Optional[int]",
                    "float",
                    "Optional[C]"
                ],
                "nbest_size": [
                    "torch.Tensor",
                    "int",
                    "Optional[C]",
                    "float",
                    "bool"
                ],
                "bucket_width_source": [
                    "bool",
                    "Optional[Callable]"
                ],
                "length_penalty_alpha": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Type[T]",
                    "bool",
                    "Optional[List[str]]"
                ],
                "length_penalty_beta": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Type[T]",
                    "bool",
                    "Optional[List[str]]"
                ],
                "max_output_length_num_stds": [
                    "str",
                    "Tuple[int, int, int, int]",
                    "Optional[str]",
                    "List[str]",
                    "bool",
                    "bytes"
                ],
                "ensemble_mode": [
                    "int",
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "sample_size": [
                    "bytes",
                    "int",
                    "str",
                    "List[str]"
                ],
                "random_seed": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "CheckpointDecoder.decode_and_evaluate": {
            "name": "decode_and_evaluate",
            "location": 142,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "output_name": [
                    "str",
                    "bool",
                    "Optional[Tuple[int, int]]",
                    "Optional[Dict]"
                ]
            }
        },
        "CheckpointDecoder.warmup": {
            "name": "warmup",
            "location": 213,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sockeye-main/sockeye/config.py": {
        "TaggedYamlObjectMetaclass.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "bool",
                    "Set[str]"
                ],
                "name": [
                    "str",
                    "Callable",
                    "Optional[str]"
                ],
                "bases": [
                    "str",
                    "Optional[str]",
                    "Tuple[type]",
                    "Dict[str, Any]"
                ],
                "kwds": [
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, object]",
                    "Mapping[str, str]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]"
                ]
            }
        },
        "SafeLoaderWithTuple.construct_python_tuple": {
            "name": "construct_python_tuple",
            "location": 33,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int"
                ]
            }
        },
        "Config.save": {
            "name": "save",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Config.load": {
            "name": "load",
            "location": 62,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "bool"
                ]
            }
        },
        "Config.copy": {
            "name": "copy",
            "location": 73,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.disable_dropout": {
            "name": "disable_dropout",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sockeye-main/sockeye/constants.py": {},
    "sockeye-main/sockeye/data_io.py": {
        "define_buckets": {
            "name": "define_buckets",
            "location": 44,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "max_seq_len": [
                    "int",
                    "str",
                    "Optional[int]",
                    "float",
                    "IO[bytes]"
                ],
                "step": [
                    "int",
                    "Optional[int]",
                    "IO[bytes]",
                    "float",
                    "List[int]"
                ]
            }
        },
        "define_parallel_buckets": {
            "name": "define_parallel_buckets",
            "location": 61,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "max_seq_len_source": [
                    "int",
                    "Callable"
                ],
                "max_seq_len_target": [
                    "int",
                    "raiden.utils.TokenAmount",
                    "bool",
                    "Optional[Union[int, float]]",
                    "torch.Tensor"
                ],
                "bucket_width": [
                    "int",
                    "float",
                    "Sequence[str]",
                    "bool"
                ],
                "bucket_scaling": [
                    "Optional[int]",
                    "float",
                    "int",
                    "List[str]"
                ],
                "length_ratio": [
                    "float",
                    "int"
                ]
            }
        },
        "get_bucket": {
            "name": "get_bucket",
            "location": 103,
            "return": [
                "str",
                "Optional[str]",
                "Optional[List[str]]",
                "Optional[Sequence[str]]",
                "Union[None, List[str]]"
            ],
            "arguments": {
                "seq_len": [
                    "str",
                    "Optional[str]",
                    "Optional[float]",
                    "bool",
                    "int"
                ],
                "buckets": [
                    "str"
                ]
            }
        },
        "define_bucket_batch_sizes": {
            "name": "define_bucket_batch_sizes",
            "location": 124,
            "return": [
                "str",
                "IO",
                "bool",
                "bytes"
            ],
            "arguments": {
                "buckets": [
                    "int",
                    "bool",
                    "List[str]"
                ],
                "batch_size": [
                    "int",
                    "bool"
                ],
                "batch_type": [
                    "str",
                    "Dict[str, Any]"
                ],
                "data_target_average_len": [
                    "int",
                    "list",
                    "List[Tuple[int, int]]",
                    "List[str]"
                ],
                "batch_sentences_multiple_of": [
                    "int",
                    "Optional[int]",
                    "Iterable[numpy.ndarray]",
                    "bool"
                ]
            }
        },
        "calculate_length_statistics": {
            "name": "calculate_length_statistics",
            "location": 202,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "source_iterables": [
                    "Sequence[Iterable[Any]]",
                    "Iterable[Any]",
                    "bool",
                    "Iterable",
                    "str",
                    "Optional[int]"
                ],
                "target_iterables": [
                    "Sequence[Iterable[Any]]",
                    "Iterable[Any]",
                    "bool",
                    "Iterable",
                    "str",
                    "Optional[int]"
                ],
                "max_seq_len_source": [
                    "int",
                    "str",
                    "Mapping[str, str]",
                    "dict"
                ],
                "max_seq_len_target": [
                    "int",
                    "str",
                    "Mapping[str, str]",
                    "dict"
                ]
            }
        },
        "analyze_sequence_lengths": {
            "name": "analyze_sequence_lengths",
            "location": 229,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sources": [
                    "str",
                    "List[str]",
                    "List[vocab.Vocab]",
                    "vocab.Vocab",
                    "int",
                    "dss.config.Replica"
                ],
                "targets": [
                    "str",
                    "List[str]",
                    "List[vocab.Vocab]",
                    "vocab.Vocab",
                    "int",
                    "dss.config.Replica"
                ],
                "vocab_sources": [
                    "List[vocab.Vocab]",
                    "vocab.Vocab",
                    "str",
                    "List[str]"
                ],
                "vocab_targets": [
                    "List[vocab.Vocab]",
                    "vocab.Vocab",
                    "str",
                    "List[str]"
                ],
                "max_seq_len_source": [
                    "bool",
                    "int",
                    "str",
                    "type",
                    "Dict[str, Tuple[str, int, int]]",
                    "Dict[str, Tuple[str, str, Any]]"
                ],
                "max_seq_len_target": [
                    "bool",
                    "int",
                    "str",
                    "type",
                    "Dict[str, Tuple[str, int, int]]",
                    "Dict[str, Tuple[str, str, Any]]"
                ]
            }
        },
        "are_none": {
            "name": "are_none",
            "location": 249,
            "return": [
                "bool"
            ],
            "arguments": {
                "sequences": [
                    "Optional[float]",
                    "Match[str]",
                    "Optional[torch.Tensor]"
                ]
            }
        },
        "are_token_parallel": {
            "name": "are_token_parallel",
            "location": 258,
            "return": [
                "bool"
            ],
            "arguments": {
                "sequences": [
                    "str",
                    "list",
                    "List[int]",
                    "bytes"
                ]
            }
        },
        "create_shards": {
            "name": "create_shards",
            "location": 355,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "source_fnames": [
                    "str",
                    "dict",
                    "int",
                    "Optional[str]"
                ],
                "target_fnames": [
                    "str"
                ],
                "num_shards": [
                    "str"
                ],
                "output_prefix": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[int]",
                    "bytes"
                ]
            }
        },
        "get_num_shards": {
            "name": "get_num_shards",
            "location": 508,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "num_samples": [
                    "int",
                    "raiden.utils.Nonce",
                    "float",
                    "Optional[Union[int, float]]",
                    "Optional[str]"
                ],
                "samples_per_shard": [
                    "int",
                    "raiden.utils.Nonce",
                    "float",
                    "Optional[Union[int, float]]",
                    "Optional[str]"
                ],
                "min_num_shards": [
                    "int",
                    "raiden.utils.Nonce",
                    "float",
                    "Optional[Union[int, float]]",
                    "Optional[str]"
                ]
            }
        },
        "save_shard": {
            "name": "save_shard",
            "location": 520,
            "return": [
                "str"
            ],
            "arguments": {
                "shard_idx": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "data_loader": [
                    "int",
                    "str",
                    "bool"
                ],
                "shard_sources": [
                    "bool"
                ],
                "shard_targets": [
                    "bool"
                ],
                "source_vocabs": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "target_vocabs": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "length_ratio_mean": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "length_ratio_std": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "buckets": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "output_prefix": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "keep_tmp_shard_files": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "prepare_data": {
            "name": "prepare_data",
            "location": 580,
            "return": [
                ""
            ],
            "arguments": {
                "source_fnames": [
                    "str",
                    "Optional[float]",
                    "vocab.Vocab"
                ],
                "target_fnames": [
                    "str",
                    "Optional[float]",
                    "vocab.Vocab"
                ],
                "source_vocabs": [
                    "str",
                    "List[vocab.Vocab]",
                    "List[str]"
                ],
                "target_vocabs": [
                    "str",
                    "Optional[annofabcli.common.dataclasses.WaitOptions]",
                    "bool",
                    "vocab.Vocab",
                    "Optional[str]"
                ],
                "source_vocab_paths": [
                    "str",
                    "Optional[float]",
                    "vocab.Vocab"
                ],
                "target_vocab_paths": [
                    "str",
                    "Optional[float]",
                    "vocab.Vocab"
                ],
                "shared_vocab": [
                    "str",
                    "Optional[float]",
                    "vocab.Vocab"
                ],
                "max_seq_len_source": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Set[str]"
                ],
                "max_seq_len_target": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Set[str]"
                ],
                "bucketing": [
                    "int",
                    "Dict[str, str]",
                    "float"
                ],
                "bucket_width": [
                    "int",
                    "Dict[str, str]",
                    "float"
                ],
                "num_shards": [
                    "str",
                    "Optional[float]",
                    "vocab.Vocab"
                ],
                "output_prefix": [
                    "str",
                    "List[vocab.Vocab]",
                    "bool"
                ],
                "bucket_scaling": [
                    "int",
                    "Dict[str, str]",
                    "float"
                ],
                "keep_tmp_shard_files": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "config.Config",
                    "int"
                ],
                "pool": [
                    "bool",
                    "Dict[str, Tuple[str, str, Any]]",
                    "Optional[str]",
                    "int",
                    "str",
                    "Dict[str, Tuple[str, int, int]]"
                ],
                "shards": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Set[str]"
                ]
            }
        },
        "get_data_statistics": {
            "name": "get_data_statistics",
            "location": 703,
            "return": [
                "dict",
                "Dict[str, str]",
                "Dict[str, List[int]]",
                "bytes"
            ],
            "arguments": {
                "source_readers": [
                    "bool",
                    "Optional[float]",
                    "int",
                    "Optional[str]"
                ],
                "target_readers": [
                    "Iterable",
                    "str",
                    "Union[str, Tuple[str, ...]]"
                ],
                "buckets": [
                    "str",
                    "Tuple[str]",
                    "Optional[str]"
                ],
                "length_ratio_mean": [
                    "str",
                    "Tuple[str]",
                    "Optional[str]"
                ],
                "length_ratio_std": [
                    "str",
                    "Tuple[str]",
                    "Optional[str]"
                ],
                "source_vocabs": [
                    "str",
                    "Tuple[str]",
                    "Optional[str]"
                ],
                "target_vocabs": [
                    "str",
                    "Tuple[str]",
                    "Optional[str]"
                ]
            }
        },
        "get_validation_data_iter": {
            "name": "get_validation_data_iter",
            "location": 728,
            "return": [
                "bytes",
                "List[str]"
            ],
            "arguments": {
                "data_loader": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "str"
                ],
                "validation_sources": [
                    "bool",
                    "int",
                    "str"
                ],
                "validation_targets": [
                    "bool",
                    "int",
                    "str"
                ],
                "buckets": [
                    "bool",
                    "raiden.utils.Tuple[raiden.utils.Tuple[raiden.utils.TokenAddress, raiden.utils.ProportionalFeeAmount], ...]",
                    "Optional[\"ShippingInfo\"]",
                    "bytes"
                ],
                "bucket_batch_sizes": [
                    "bool",
                    "Dict[str, List[int]]",
                    "Dict[str, Dict[str, Any]]",
                    "dict",
                    "Tuple[str, str, str]"
                ],
                "source_vocabs": [
                    "bool",
                    "int",
                    "str"
                ],
                "target_vocabs": [
                    "bool",
                    "int",
                    "str"
                ],
                "max_seq_len_source": [
                    "bool",
                    "int",
                    "str"
                ],
                "max_seq_len_target": [
                    "bool",
                    "int",
                    "str"
                ],
                "batch_size": [
                    "int",
                    "Callable",
                    "list"
                ],
                "permute": [
                    "int",
                    "Callable",
                    "list"
                ]
            }
        },
        "get_prepared_data_iters": {
            "name": "get_prepared_data_iters",
            "location": 778,
            "return": [
                "bool",
                "List[str]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "prepared_data_dir": [
                    "str",
                    "bytes",
                    "bool",
                    "Dict[str, numpy.ndarray]"
                ],
                "validation_sources": [
                    "str",
                    "Dict[str, str]"
                ],
                "validation_targets": [
                    "str",
                    "Dict[str, str]"
                ],
                "shared_vocab": [
                    "bool",
                    "str",
                    "logging.Logger"
                ],
                "batch_size": [
                    "int",
                    "bytes",
                    "dict",
                    "str"
                ],
                "batch_type": [
                    "int",
                    "bytes",
                    "dict",
                    "str"
                ],
                "batch_sentences_multiple_of": [
                    "int",
                    "bytes",
                    "dict",
                    "str"
                ],
                "permute": [
                    "bool",
                    "int"
                ]
            }
        },
        "get_training_data_iters": {
            "name": "get_training_data_iters",
            "location": 869,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "sources": [
                    "str",
                    "bool"
                ],
                "targets": [
                    "str",
                    "bool"
                ],
                "validation_sources": [
                    "bool",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "validation_targets": [
                    "bool",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "source_vocabs": [
                    "str",
                    "bool"
                ],
                "target_vocabs": [
                    "str",
                    "bool"
                ],
                "source_vocab_paths": [
                    "str",
                    "Optional[str]",
                    "TextIO"
                ],
                "target_vocab_paths": [
                    "str",
                    "Optional[str]",
                    "TextIO"
                ],
                "shared_vocab": [
                    "str",
                    "Optional[str]",
                    "TextIO"
                ],
                "batch_size": [
                    "int",
                    "float",
                    "bool"
                ],
                "batch_type": [
                    "int",
                    "float",
                    "bool"
                ],
                "max_seq_len_source": [
                    "bool",
                    "Optional[annofabcli.common.dataclasses.WaitOptions]",
                    "Union[str, Callable]",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "int"
                ],
                "max_seq_len_target": [
                    "bool",
                    "Optional[annofabcli.common.dataclasses.WaitOptions]",
                    "Union[str, Callable]",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "int"
                ],
                "bucketing": [
                    "int",
                    "bool",
                    "float"
                ],
                "bucket_width": [
                    "int",
                    "bool",
                    "float"
                ],
                "bucket_scaling": [
                    "int",
                    "bool",
                    "float"
                ],
                "allow_empty": [
                    "bool",
                    "Optional[List[str]]",
                    "str",
                    "Iterable[int]",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "batch_sentences_multiple_of": [
                    "int",
                    "float",
                    "bool"
                ],
                "permute": [
                    "int",
                    "bool",
                    "Union[str, os.PathLike]"
                ]
            }
        },
        "get_scoring_data_iters": {
            "name": "get_scoring_data_iters",
            "location": 993,
            "return": [
                "str"
            ],
            "arguments": {
                "sources": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[int]"
                ],
                "targets": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[int]"
                ],
                "source_vocabs": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[int]"
                ],
                "target_vocabs": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[int]"
                ],
                "batch_size": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[int]"
                ],
                "max_seq_len_source": [
                    "int",
                    "Tuple[int, int]"
                ],
                "max_seq_len_target": [
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "describe_data_and_buckets": {
            "name": "describe_data_and_buckets",
            "location": 1082,
            "return": [
                ""
            ],
            "arguments": {
                "data_statistics": [
                    "List[Dict]",
                    "int",
                    "Sequence[T]",
                    "str",
                    "List[str]",
                    "bool"
                ],
                "bucket_batch_sizes": [
                    "List[Dict]",
                    "int",
                    "Sequence[T]",
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "read_content": {
            "name": "read_content",
            "location": 1128,
            "return": [
                "typing.Iterator[typing.List[builtins.str]]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool"
                ],
                "limit": [
                    "Optional[int]",
                    "int",
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "tokens2ids": {
            "name": "tokens2ids",
            "location": 1143,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Optional[cmk.utils.type_defs.HostName]"
            ],
            "arguments": {
                "tokens": [
                    "Iterable[str]",
                    "Dict[str, int]",
                    "dict",
                    "eth.abc.DatabaseAPI",
                    "str",
                    "raiden.utils.Dict"
                ],
                "vocab": [
                    "Iterable[str]",
                    "Dict[str, int]",
                    "dict",
                    "eth.abc.DatabaseAPI",
                    "str",
                    "raiden.utils.Dict"
                ]
            }
        },
        "strids2ids": {
            "name": "strids2ids",
            "location": 1154,
            "return": [
                "str",
                "List[Dict]",
                "List[str]",
                "list"
            ],
            "arguments": {
                "tokens": [
                    "Iterable[str]",
                    "str",
                    "int",
                    "set"
                ]
            }
        },
        "ids2tokens": {
            "name": "ids2tokens",
            "location": 1164,
            "return": [
                "str",
                "Optional[str]",
                "list",
                "Dict[str, Any]",
                "Callable"
            ],
            "arguments": {
                "token_ids": [
                    "int",
                    "str"
                ],
                "vocab_inv": [
                    "int",
                    "str",
                    "Optional[float]"
                ],
                "exclude_set": [
                    "Set[int]",
                    "int"
                ]
            }
        },
        "create_sequence_readers": {
            "name": "create_sequence_readers",
            "location": 1228,
            "return": [
                "str",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "sources": [
                    "int",
                    "raiden.tests.fuzz.utils.SendUnlockInNode",
                    "bool",
                    "raiden.tests.fuzz.utils.SendLockedTransferInNode",
                    "Type[eth.abc.SignedTransactionAPI]",
                    "raiden.tests.fuzz.utils.SendSecretRequestInNode",
                    "float"
                ],
                "targets": [
                    "str",
                    "bool"
                ],
                "vocab_sources": [
                    "int",
                    "raiden.tests.fuzz.utils.SendUnlockInNode",
                    "bool",
                    "raiden.tests.fuzz.utils.SendLockedTransferInNode",
                    "Type[eth.abc.SignedTransactionAPI]",
                    "raiden.tests.fuzz.utils.SendSecretRequestInNode",
                    "float"
                ],
                "vocab_targets": [
                    "str",
                    "bool"
                ]
            }
        },
        "parallel_iter": {
            "name": "parallel_iter",
            "location": 1247,
            "return": [
                "str",
                "Optional[List[str]]"
            ],
            "arguments": {
                "source_iterables": [
                    "Optional[bool]",
                    "dict",
                    "numpy.ndarray",
                    "int",
                    "Optional[Callable[[List], Any]]"
                ],
                "target_iterables": [
                    "int",
                    "bool",
                    "float",
                    "numpy.array",
                    "str"
                ],
                "skip_blanks": [
                    "int",
                    "Callable",
                    "str",
                    "bool",
                    "float"
                ],
                "check_token_parallel": [
                    "int",
                    "Callable",
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "parallel_iterate": {
            "name": "parallel_iterate",
            "location": 1267,
            "return": [
                ""
            ],
            "arguments": {
                "source_iterators": [
                    "Tuple[str, str, str]",
                    "bool",
                    "list",
                    "int",
                    "str",
                    "bytes",
                    "Callable"
                ],
                "target_iterators": [
                    "bool",
                    "int"
                ],
                "skip_blanks": [
                    "Optional[int]",
                    "Optional[numpy.array]",
                    "Optional[List[float]]",
                    "dict",
                    "Optional[Callable[[List], Any]]",
                    "int",
                    "Optional[List[Any]]",
                    "Callable"
                ],
                "check_token_parallel": [
                    "bool",
                    "list",
                    "str",
                    "int"
                ]
            }
        },
        "get_parallel_bucket": {
            "name": "get_parallel_bucket",
            "location": 1310,
            "return": [
                "Optional[str]",
                "str",
                "list"
            ],
            "arguments": {
                "buckets": [
                    "List[Tuple[int, int]]",
                    "int",
                    "str",
                    "Optional[str]",
                    "float"
                ],
                "length_source": [
                    "int",
                    "str",
                    "Union[dict, list]"
                ],
                "length_target": [
                    "int",
                    "str",
                    "Union[dict, list]"
                ]
            }
        },
        "get_target_bucket": {
            "name": "get_target_bucket",
            "location": 1329,
            "return": [
                "str"
            ],
            "arguments": {
                "buckets": [
                    "List[Tuple[int, int]]",
                    "int",
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "length_target": [
                    "List[Tuple[int, int]]",
                    "int",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "get_permutations": {
            "name": "get_permutations",
            "location": 1485,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "bucket_counts": [
                    "List[int]",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "get_batch_indices": {
            "name": "get_batch_indices",
            "location": 1507,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "data": [
                    "int",
                    "List[str]",
                    "str",
                    "Union[int, argonautica.utils.Void]"
                ],
                "bucket_batch_sizes": [
                    "int",
                    "torch.LongTensor",
                    "Union[Tuple[int, int], int]"
                ]
            }
        },
        "create_target_and_shifted_label_sequences": {
            "name": "create_target_and_shifted_label_sequences",
            "location": 1921,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "target_and_label": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "create_batch_from_parallel_sample": {
            "name": "create_batch_from_parallel_sample",
            "location": 1933,
            "return": [
                "str",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "source": [
                    "str",
                    "float"
                ],
                "target": [
                    "str",
                    "Sequence[str]"
                ],
                "label": [
                    "str"
                ]
            }
        },
        "DataStatisticsAccumulator.__init__": {
            "name": "__init__",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "buckets": [
                    "List[str]",
                    "List[int]",
                    "List[Tuple[int, int, str]]",
                    "Dict[str, str]",
                    "Optional[str]"
                ],
                "vocab_source": [
                    "int",
                    "list",
                    "Union[float, int]",
                    "Type[eth.abc.SignedTransactionAPI]"
                ],
                "vocab_target": [
                    "int",
                    "torch.Tensor",
                    "Tuple[int, int]"
                ],
                "length_ratio_mean": [
                    "str",
                    "Optional[List[str]]",
                    "Dict[int, int]",
                    "List[str]",
                    "int"
                ],
                "length_ratio_std": [
                    "str",
                    "Optional[List[str]]",
                    "Dict[int, int]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "DataStatisticsAccumulator.sequence_pair": {
            "name": "sequence_pair",
            "location": 299,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "bytes",
                    "List[dict]",
                    "AsyncIterator[T]",
                    "Dict[str, Dict[str, str]]",
                    "Dict[Tuple[int, ...], int]",
                    "Optional[str]"
                ],
                "target": [
                    "int",
                    "bool",
                    "List[str]",
                    "List[int]"
                ],
                "bucket_idx": [
                    "Optional[Any]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "DataStatisticsAccumulator.mean_len_target_per_bucket": {
            "name": "mean_len_target_per_bucket",
            "location": 325,
            "return": [
                "bool",
                "List[List[str]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataStatisticsAccumulator.length_ratio_stats_per_bucket": {
            "name": "length_ratio_stats_per_bucket",
            "location": 330,
            "return": [
                "bool",
                "List[List[str]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataStatisticsAccumulator.statistics": {
            "name": "statistics",
            "location": 335,
            "return": [
                "raiden.utils.signer.Signer",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RawParallelDatasetLoader.__init__": {
            "name": "__init__",
            "location": 427,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "buckets": [
                    "int",
                    "float",
                    "str"
                ],
                "eos_id": [
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "pad_id": [
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "skip_blanks": [
                    "int",
                    "float",
                    "str"
                ],
                "dtype": [
                    "int",
                    "float",
                    "str"
                ],
                "shift_target_factors": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "RawParallelDatasetLoader.load": {
            "name": "load",
            "location": 441,
            "return": [
                "str",
                "Optional[int]",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "source_iterables": [
                    "int",
                    "str",
                    "dict"
                ],
                "target_iterables": [
                    "int",
                    "numpy.ndarray",
                    "Optional[str]",
                    "raiden.utils.Locksroot",
                    "raiden.utils.Signature"
                ],
                "num_samples_per_bucket": [
                    "int",
                    "tuple",
                    "float"
                ]
            }
        },
        "DataStatistics.log": {
            "name": "log",
            "location": 1069,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bucket_batch_sizes": [
                    "Optional[int]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "SequenceReader.__init__": {
            "name": "__init__",
            "location": 1192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "bool",
                    "str"
                ],
                "vocabulary": [
                    "Optional[Set[int]]",
                    "Optional[str]"
                ],
                "add_bos": [
                    "bool",
                    "str",
                    "int",
                    "List[str]"
                ],
                "add_eos": [
                    "bool",
                    "str",
                    "int",
                    "List[str]"
                ],
                "limit": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Optional[List[Any]]",
                    "float",
                    "bool"
                ]
            }
        },
        "SequenceReader.__iter__": {
            "name": "__iter__",
            "location": 1212,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParallelDataSet.__init__": {
            "name": "__init__",
            "location": 1353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "Tuple[int, int]",
                    "IO",
                    "bytes",
                    "Iterable[bytes]",
                    "memoryview"
                ],
                "target": [
                    "Tuple[int, int]",
                    "dict",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "ParallelDataSet.__len__": {
            "name": "__len__",
            "location": 1361,
            "return": [
                "str",
                "int",
                "os.PathLike"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParallelDataSet.get_bucket_counts": {
            "name": "get_bucket_counts",
            "location": 1364,
            "return": [
                "List[str]",
                "Set[str]",
                "Tuple[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParallelDataSet.save": {
            "name": "save",
            "location": 1367,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str"
                ]
            }
        },
        "ParallelDataSet.load": {
            "name": "load",
            "location": 1374,
            "return": [
                "str"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "IO[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ParallelDataSet.fill_up": {
            "name": "fill_up",
            "location": 1415,
            "return": [
                "str",
                "bytes",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "bucket_batch_sizes": [
                    "int",
                    "Union[int, float]",
                    "str",
                    "bool"
                ],
                "seed": [
                    "int",
                    "Sequence[int]",
                    "List[int]",
                    "str"
                ]
            }
        },
        "ParallelDataSet.permute": {
            "name": "permute",
            "location": 1461,
            "return": [
                "str",
                "bytes",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "permutations": [
                    "Sequence[T]",
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "List[int]",
                    "list"
                ]
            }
        },
        "BaseParallelSampleIter.__init__": {
            "name": "__init__",
            "location": 1545,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "buckets": [
                    "int",
                    "Iterable[str]",
                    "List[str]",
                    "bool"
                ],
                "batch_size": [
                    "int",
                    "Callable[[int], bool]",
                    "str",
                    "Callable[[float], None]"
                ],
                "bucket_batch_sizes": [
                    "int",
                    "Callable[[int], bool]",
                    "float",
                    "str",
                    "Callable[[float], None]"
                ],
                "num_source_factors": [
                    "int",
                    "str",
                    "dict",
                    "bool"
                ],
                "num_target_factors": [
                    "int",
                    "Dict[str, str]",
                    "str"
                ],
                "permute": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "int",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "dtype": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "int",
                    "Optional[bool]",
                    "Optional[str]"
                ]
            }
        },
        "BaseParallelSampleIter.__iter__": {
            "name": "__iter__",
            "location": 1561,
            "return": [
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseParallelSampleIter.reset": {
            "name": "reset",
            "location": 1565,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseParallelSampleIter.iter_next": {
            "name": "iter_next",
            "location": 1569,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseParallelSampleIter.next": {
            "name": "next",
            "location": 1573,
            "return": [
                "'Batch'"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseParallelSampleIter.__next__": {
            "name": "__next__",
            "location": 1576,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseParallelSampleIter.save_state": {
            "name": "save_state",
            "location": 1580,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "BaseParallelSampleIter.load_state": {
            "name": "load_state",
            "location": 1584,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str",
                    "bool",
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "BatchedRawParallelSampleIter.__init__": {
            "name": "__init__",
            "location": 1595,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_loader": [
                    "bool",
                    "int",
                    "Optional[dict]"
                ],
                "sources": [
                    "bool",
                    "recidiviz.utils.regions.Region",
                    "Optional[tuple]"
                ],
                "targets": [
                    "bool",
                    "recidiviz.utils.regions.Region",
                    "Optional[tuple]"
                ],
                "source_vocabs": [
                    "bool",
                    "recidiviz.utils.regions.Region",
                    "Optional[tuple]"
                ],
                "target_vocabs": [
                    "bool",
                    "recidiviz.utils.regions.Region",
                    "Optional[tuple]"
                ],
                "bucket": [
                    "int",
                    "bool"
                ],
                "batch_size": [
                    "int",
                    "bool"
                ],
                "max_lens": [
                    "int",
                    "bool",
                    "str"
                ],
                "num_source_factors": [
                    "int",
                    "bool"
                ],
                "num_target_factors": [
                    "int",
                    "bool"
                ],
                "dtype": [
                    "int",
                    "bool"
                ]
            }
        },
        "BatchedRawParallelSampleIter.reset": {
            "name": "reset",
            "location": 1623,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BatchedRawParallelSampleIter.iter_next": {
            "name": "iter_next",
            "location": 1626,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatchedRawParallelSampleIter.next": {
            "name": "next",
            "location": 1673,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatchedRawParallelSampleIter.save_state": {
            "name": "save_state",
            "location": 1681,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "BatchedRawParallelSampleIter.load_state": {
            "name": "load_state",
            "location": 1684,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str",
                    "bool",
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "ShardedParallelSampleIter.__init__": {
            "name": "__init__",
            "location": 1694,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "shards_fnames": [
                    "bool",
                    "int",
                    "list",
                    "List[str]",
                    "BoundMethod[Callable(logging.Logger.debug)[Any, Any], logging.Logger]"
                ],
                "buckets": [
                    "int",
                    "float",
                    "bool",
                    "str"
                ],
                "batch_size": [
                    "int",
                    "float",
                    "bool",
                    "str"
                ],
                "bucket_batch_sizes": [
                    "int",
                    "float",
                    "bool",
                    "str"
                ],
                "num_source_factors": [
                    "int",
                    "float",
                    "bool",
                    "str"
                ],
                "num_target_factors": [
                    "int",
                    "float",
                    "bool",
                    "str"
                ],
                "permute": [
                    "int",
                    "float",
                    "bool",
                    "str"
                ],
                "dtype": [
                    "int",
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "ShardedParallelSampleIter._load_shard": {
            "name": "_load_shard",
            "location": 1712,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ShardedParallelSampleIter.reset": {
            "name": "reset",
            "location": 1725,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ShardedParallelSampleIter.iter_next": {
            "name": "iter_next",
            "location": 1753,
            "return": [
                "int",
                "Optional[utils.CWLOutputType]",
                "Awaitable",
                "numpy.ndarray",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShardedParallelSampleIter.next": {
            "name": "next",
            "location": 1757,
            "return": [
                "set",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShardedParallelSampleIter.save_state": {
            "name": "save_state",
            "location": 1766,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "bool"
                ]
            }
        },
        "ShardedParallelSampleIter.load_state": {
            "name": "load_state",
            "location": 1772,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "bool",
                    "cmk.utils.type_defs.UserId"
                ]
            }
        },
        "ParallelSampleIter.__init__": {
            "name": "__init__",
            "location": 1786,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "list",
                    "List[str]",
                    "bool",
                    "str",
                    "List[List[Any]]",
                    "Union[str, List[str], Tuple[str, ...]]"
                ],
                "buckets": [
                    "int",
                    "float",
                    "bool",
                    "str"
                ],
                "batch_size": [
                    "int",
                    "float",
                    "bool",
                    "str"
                ],
                "bucket_batch_sizes": [
                    "int",
                    "float",
                    "bool",
                    "str"
                ],
                "num_source_factors": [
                    "int",
                    "float",
                    "bool",
                    "str"
                ],
                "num_target_factors": [
                    "int",
                    "float",
                    "bool",
                    "str"
                ],
                "permute": [
                    "int",
                    "float",
                    "bool",
                    "str"
                ],
                "dtype": [
                    "int",
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "ParallelSampleIter.reset": {
            "name": "reset",
            "location": 1814,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParallelSampleIter.iter_next": {
            "name": "iter_next",
            "location": 1835,
            "return": [
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParallelSampleIter.next": {
            "name": "next",
            "location": 1841,
            "return": [
                "str",
                "numpy.ndarray",
                "OrderedDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParallelSampleIter.save_state": {
            "name": "save_state",
            "location": 1856,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "ParallelSampleIter.load_state": {
            "name": "load_state",
            "location": 1870,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str",
                    "float"
                ]
            }
        },
        "Batch.load": {
            "name": "load",
            "location": 1912,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "sockeye-main/sockeye/decoder.py": {
        "get_decoder": {
            "name": "get_decoder",
            "location": 33,
            "return": [
                "Dict[str, Any]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "config": [
                    "Optional[Iterable[str]]",
                    "Mapping[str, Any]"
                ],
                "inference_only": [
                    "Optional[Iterable[str]]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Decoder.register": {
            "name": "register",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[bool]",
                    "str",
                    "Callable",
                    "ClassVar"
                ],
                "config_type": [
                    "bool",
                    "Optional[bool]",
                    "str",
                    "Callable",
                    "ClassVar"
                ]
            }
        },
        "Decoder.get_decoder": {
            "name": "get_decoder",
            "location": 66,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "Mapping[str, Any]",
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ],
                "config": [
                    "dict",
                    "str"
                ],
                "inference_only": [
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "Decoder.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Decoder.state_structure": {
            "name": "state_structure",
            "location": 86,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Decoder.init_state_from_encoder": {
            "name": "init_state_from_encoder",
            "location": 90,
            "return": [
                "typing.List[torch.Tensor]"
            ],
            "arguments": {
                "self": [],
                "encoder_outputs": [
                    "str"
                ],
                "encoder_valid_length": [
                    "str"
                ],
                "target_embed": [
                    "str"
                ]
            }
        },
        "Decoder.decode_seq": {
            "name": "decode_seq",
            "location": 97,
            "return": [
                "torch.Tensor"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "dict"
                ],
                "states": [
                    "dict"
                ]
            }
        },
        "Decoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformerDecoder.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ],
                "inference_only": [
                    "Dict[str, Any]",
                    "torch.nn.Module"
                ]
            }
        },
        "TransformerDecoder.state_structure": {
            "name": "state_structure",
            "location": 150,
            "return": [
                "int",
                "Sequence[Tuple[float, float]]",
                "Dict[str, str]",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformerDecoder.init_state_from_encoder": {
            "name": "init_state_from_encoder",
            "location": 166,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "encoder_outputs": [
                    "int",
                    "bool",
                    "List[float]",
                    "str"
                ],
                "encoder_valid_length": [
                    "int",
                    "bool"
                ],
                "target_embed": [
                    "Optional[Any]",
                    "int",
                    "Optional[dict]",
                    "bool"
                ]
            }
        },
        "TransformerDecoder.decode_seq": {
            "name": "decode_seq",
            "location": 223,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "str",
                    "dict"
                ],
                "states": [
                    "str",
                    "dict"
                ]
            }
        },
        "TransformerDecoder.forward": {
            "name": "forward",
            "location": 235,
            "return": [
                "dict",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "step_input": [
                    "torch.Tensor",
                    "bool",
                    "Optional[Tuple[torch.Tensor, torch.Tensor]]",
                    "float",
                    "int",
                    "Optional[Tuple[int, ...]]"
                ],
                "states": [
                    "List[str]",
                    "torch.Tensor"
                ]
            }
        },
        "TransformerDecoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 290,
            "return": [
                "Dict[str, Any]",
                "str",
                "raiden.constants.Environment",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Decoder.register.wrapper": {
            "name": "wrapper",
            "location": 59,
            "return": [
                "str",
                "Pattern",
                "int",
                "OrderedDict"
            ],
            "arguments": {
                "target_cls": [
                    "int",
                    "Container[int]",
                    "str"
                ]
            }
        }
    },
    "sockeye-main/sockeye/embeddings.py": {
        "compute_sims": {
            "name": "compute_sims",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "inputs": [
                    "bytes",
                    "str",
                    "Tuple[int, int]"
                ],
                "normalize": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "nearest_k": {
            "name": "nearest_k",
            "location": 53,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "similarity_matrix": [
                    "str",
                    "int",
                    "float"
                ],
                "query_word_id": [
                    "str",
                    "int",
                    "float"
                ],
                "k": [
                    "str",
                    "int",
                    "float"
                ],
                "gamma": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "embeddings": {
            "name": "embeddings",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "sockeye-main/sockeye/encoder.py": {
        "get_transformer_encoder": {
            "name": "get_transformer_encoder",
            "location": 26,
            "return": [
                "Dict[str, Any]",
                "str",
                "Optional[str]",
                "dict",
                "bool",
                "app.config.MQConfig"
            ],
            "arguments": {
                "config": [
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "slackbuild.config.Config",
                    "sphinx.config.Config",
                    "pyramid.config.Configurator",
                    "str"
                ],
                "inference_only": [
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "slackbuild.config.Config",
                    "sphinx.config.Config",
                    "pyramid.config.Configurator",
                    "str"
                ]
            }
        },
        "Encoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 40,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Encoder.get_encoded_seq_len": {
            "name": "get_encoded_seq_len",
            "location": 46,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": [],
                "seq_len": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "Encoder.get_max_seq_len": {
            "name": "get_max_seq_len",
            "location": 52,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmbeddingConfig.__post_init__": {
            "name": "__post_init__",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Embedding.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "pyramid.config.Configurator",
                    "Mapping[str, Any]",
                    "dict"
                ],
                "embedding": [
                    "Optional[pyramid.config.Configurator]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "Embedding.forward": {
            "name": "forward",
            "location": 114,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "torch.Tensor",
                    "int"
                ]
            }
        },
        "Embedding.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 148,
            "return": [
                "Dict[str, Any]",
                "str",
                "Optional[str]",
                "Optional[type]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformerEncoder.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "pyramid.config.Configurator",
                    "dict",
                    "Dict[str, Any]"
                ],
                "inference_only": []
            }
        },
        "TransformerEncoder.forward": {
            "name": "forward",
            "location": 185,
            "return": [
                "str",
                "Dict[str, Any]",
                "List[str]",
                "OrderedDict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "torch.Tensor"
                ],
                "valid_length": [
                    "dict",
                    "int"
                ]
            }
        },
        "TransformerEncoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 207,
            "return": [
                "Dict[str, Any]",
                "str",
                "_vendor.traitlets.config.Config",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sockeye-main/sockeye/evaluate.py": {
        "raw_corpus_bleu": {
            "name": "raw_corpus_bleu",
            "location": 37,
            "return": [
                "Optional[int]",
                "Optional[bool]",
                "int",
                "numpy.ndarray",
                "trezor.utils.Writer",
                "str"
            ],
            "arguments": {
                "hypotheses": [
                    "int"
                ],
                "references": [
                    "int"
                ],
                "offset": [
                    "int"
                ]
            }
        },
        "raw_corpus_chrf": {
            "name": "raw_corpus_chrf",
            "location": 49,
            "return": [
                "Optional[int]",
                "Dict[str, int]",
                "Optional[bool]",
                "int",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "hypotheses": [
                    "Iterable[str]",
                    "float",
                    "list"
                ],
                "references": [
                    "Iterable[str]",
                    "float",
                    "list"
                ]
            }
        },
        "raw_corpus_ter": {
            "name": "raw_corpus_ter",
            "location": 60,
            "return": [
                "Optional[int]",
                "Dict[str, int]",
                "Optional[bool]",
                "int",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "hypotheses": [
                    "Iterable[str]",
                    "float",
                    "list"
                ],
                "references": [
                    "Iterable[str]",
                    "float",
                    "list"
                ]
            }
        },
        "raw_corpus_rouge1": {
            "name": "raw_corpus_rouge1",
            "location": 72,
            "return": [
                "Dict[str, int]",
                "str",
                "dict",
                "trezor.utils.Writer",
                "OrderedDict"
            ],
            "arguments": {
                "hypotheses": [
                    "Iterable[str]",
                    "float",
                    "list"
                ],
                "references": [
                    "Iterable[str]",
                    "float",
                    "list"
                ]
            }
        },
        "raw_corpus_rouge2": {
            "name": "raw_corpus_rouge2",
            "location": 83,
            "return": [
                "Dict[str, int]",
                "str",
                "dict",
                "trezor.utils.Writer",
                "OrderedDict"
            ],
            "arguments": {
                "hypotheses": [
                    "Iterable[str]",
                    "float",
                    "list"
                ],
                "references": [
                    "Iterable[str]",
                    "float",
                    "list"
                ]
            }
        },
        "raw_corpus_rougel": {
            "name": "raw_corpus_rougel",
            "location": 94,
            "return": [
                "Optional[int]",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "utils.Node",
                "numpy.ndarray",
                "int",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "hypotheses": [
                    "Iterable[str]",
                    "float",
                    "list"
                ],
                "references": [
                    "Iterable[str]",
                    "float",
                    "list"
                ]
            }
        },
        "raw_corpus_length_ratio": {
            "name": "raw_corpus_length_ratio",
            "location": 105,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "hypotheses": [
                    "str",
                    "int",
                    "List[int]",
                    "list",
                    "List[List[Any]]",
                    "Tuple[float, int]"
                ],
                "references": [
                    "str",
                    "int",
                    "List[int]",
                    "list",
                    "List[List[Any]]",
                    "Tuple[float, int]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_print_mean_std_score": {
            "name": "_print_mean_std_score",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "metrics": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "scores": [
                    "Iterable[Type]",
                    "bool",
                    "Dict[str, Set[str]]"
                ]
            }
        }
    },
    "sockeye-main/sockeye/inference.py": {
        "models_max_input_output_length": {
            "name": "models_max_input_output_length",
            "location": 40,
            "return": [
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "models": [
                    "int",
                    "float",
                    "bool"
                ],
                "num_stds": [
                    "Optional[int]",
                    "int",
                    "str",
                    "Dict[Tuple[int, int], int]"
                ],
                "forced_max_input_length": [
                    "Optional[int]",
                    "int",
                    "str",
                    "Dict[Tuple[int, int], int]"
                ],
                "forced_max_output_length": [
                    "Optional[int]",
                    "int",
                    "str",
                    "Dict[Tuple[int, int], int]"
                ]
            }
        },
        "get_max_input_output_length": {
            "name": "get_max_input_output_length",
            "location": 70,
            "return": [
                "float",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "supported_max_seq_len_source": [
                    "Optional[int]",
                    "float",
                    "int"
                ],
                "supported_max_seq_len_target": [
                    "Optional[int]",
                    "float",
                    "int"
                ],
                "length_ratio_mean": [
                    "Optional[int]",
                    "float",
                    "int"
                ],
                "length_ratio_std": [
                    "Optional[int]",
                    "float",
                    "int"
                ],
                "num_stds": [
                    "Optional[int]",
                    "float",
                    "int"
                ],
                "forced_max_input_len": [
                    "Optional[int]",
                    "float",
                    "int"
                ],
                "forced_max_output_len": [
                    "Optional[int]",
                    "float",
                    "int"
                ]
            }
        },
        "_bad_input": {
            "name": "_bad_input",
            "location": 262,
            "return": [
                "dict",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "sentence_id": [
                    "str",
                    "int"
                ],
                "reason": [
                    "str"
                ]
            }
        },
        "make_input_from_plain_string": {
            "name": "make_input_from_plain_string",
            "location": 267,
            "return": [
                "bool",
                "Callable",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "sentence_id": [
                    "str",
                    "bytes",
                    "List[str]",
                    "int"
                ],
                "string": [
                    "str",
                    "bytes",
                    "List[str]",
                    "int"
                ]
            }
        },
        "make_input_from_json_string": {
            "name": "make_input_from_json_string",
            "location": 278,
            "return": [
                "str",
                "int",
                "bool",
                "Tuple[List[Any], int]"
            ],
            "arguments": {
                "sentence_id": [
                    "str"
                ],
                "json_string": [
                    "str"
                ],
                "translator": [
                    "int",
                    "str",
                    "Union[int,str]"
                ]
            }
        },
        "make_input_from_dict": {
            "name": "make_input_from_dict",
            "location": 301,
            "return": [
                "Dict[str, int]",
                "int",
                "numpy.ndarray",
                "numpy.array"
            ],
            "arguments": {
                "sentence_id": [
                    "str",
                    "int"
                ],
                "input_dict": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Dict[int, Dict]",
                    "Optional[Dict[str, str]]"
                ],
                "translator": [
                    "int",
                    "str"
                ]
            }
        },
        "make_input_from_factored_string": {
            "name": "make_input_from_factored_string",
            "location": 419,
            "return": [
                "str"
            ],
            "arguments": {
                "sentence_id": [
                    "int",
                    "str"
                ],
                "factored_string": [
                    "str",
                    "int"
                ],
                "translator": [
                    "str",
                    "int",
                    "Optional[str]",
                    "list"
                ],
                "delimiter": [
                    "str"
                ]
            }
        },
        "make_input_from_multiple_strings": {
            "name": "make_input_from_multiple_strings",
            "location": 459,
            "return": [
                "numpy.ndarray",
                "dict",
                "int",
                "bool"
            ],
            "arguments": {
                "sentence_id": [
                    "str",
                    "Optional[str]",
                    "Optional[float]",
                    "int"
                ],
                "strings": [
                    "int",
                    "List[str]",
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "empty_translation": {
            "name": "empty_translation",
            "location": 560,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "add_nbest": [
                    "bool",
                    "str",
                    "Union[int, str]",
                    "int"
                ]
            }
        },
        "_concat_nbest_translations": {
            "name": "_concat_nbest_translations",
            "location": 599,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "translations": [
                    "int",
                    "torch.Tensor",
                    "float"
                ],
                "stop_ids": [
                    "beam_search.CandidateScorer",
                    "Set[int]",
                    "List[str]",
                    "int",
                    "List[int]",
                    "str",
                    "List[model.objects.JUnitCommitReport]"
                ],
                "scorer": [
                    "beam_search.CandidateScorer",
                    "Set[int]",
                    "List[str]",
                    "int",
                    "List[int]",
                    "str",
                    "List[model.objects.JUnitCommitReport]"
                ]
            }
        },
        "_reduce_nbest_translations": {
            "name": "_reduce_nbest_translations",
            "location": 622,
            "return": [
                "str",
                "Optional[int]",
                "Callable",
                "numpy.ndarray",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "nbest_translations_list": [
                    "int",
                    "list",
                    "Iterable[str]",
                    "List[Dict[str, Any]]",
                    "List[Tuple[int, int]]",
                    "Tuple[int, int]",
                    "List[numpy.ndarray]"
                ]
            }
        },
        "_expand_nbest_translation": {
            "name": "_expand_nbest_translation",
            "location": 643,
            "return": [
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {
                "translation": [
                    "src.core.model.profile.Profile",
                    "str",
                    "utils.CWLObjectType"
                ]
            }
        },
        "_remove_target_prefix_tokens": {
            "name": "_remove_target_prefix_tokens",
            "location": 658,
            "return": [
                "str"
            ],
            "arguments": {
                "target_ids": [
                    "int",
                    "str",
                    "Optional[float]"
                ],
                "num_target_prefix_tokens": [
                    "int"
                ]
            }
        },
        "_concat_translations": {
            "name": "_concat_translations",
            "location": 670,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "translations": [
                    "int",
                    "dict",
                    "IO[bytes]",
                    "type",
                    "str"
                ],
                "stop_ids": [
                    "Set[int]",
                    "str",
                    "Union[int,str]",
                    "int"
                ],
                "scorer": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "_unshift_target_factors": {
            "name": "_unshift_target_factors",
            "location": 1279,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sequence": [
                    "int",
                    "gluonts.model.common.Tensor",
                    "float",
                    "str"
                ],
                "fill_last_with": [
                    "int",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "get_max_input_output_length.get_max_output_length": {
            "name": "get_max_output_length",
            "location": 102,
            "return": [
                "str",
                "Union[str, List[str]]",
                "raiden.utils.Any"
            ],
            "arguments": {
                "input_length": [
                    "int",
                    "str"
                ]
            }
        },
        "TranslatorInput.__str__": {
            "name": "__str__",
            "location": 144,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TranslatorInput.__len__": {
            "name": "__len__",
            "location": 147,
            "return": [
                "bytes",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "TranslatorInput.num_factors": {
            "name": "num_factors",
            "location": 151,
            "return": [
                "int",
                "numpy.ndarray",
                "str",
                "deque"
            ],
            "arguments": {
                "self": []
            }
        },
        "TranslatorInput.get_source_prefix_tokens": {
            "name": "get_source_prefix_tokens",
            "location": 157,
            "return": [
                "str",
                "Optional[str]",
                "dict",
                "List[str]",
                "Dict[str, dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TranslatorInput.num_source_prefix_tokens": {
            "name": "num_source_prefix_tokens",
            "location": 164,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TranslatorInput.get_target_prefix_tokens": {
            "name": "get_target_prefix_tokens",
            "location": 170,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TranslatorInput.num_target_prefix_tokens": {
            "name": "num_target_prefix_tokens",
            "location": 177,
            "return": [
                "Mapping[str, Any]",
                "raiden.utils.Address",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TranslatorInput.get_target_prefix_factors": {
            "name": "get_target_prefix_factors",
            "location": 183,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TranslatorInput.num_target_prefix_factors": {
            "name": "num_target_prefix_factors",
            "location": 190,
            "return": [
                "str",
                "bool",
                "dict",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TranslatorInput.chunks": {
            "name": "chunks",
            "location": 196,
            "return": [
                "typing.Generator['TranslatorInput', None, None]"
            ],
            "arguments": {
                "self": [],
                "chunk_size": [
                    "int"
                ]
            }
        },
        "TranslatorInput.with_eos": {
            "name": "with_eos",
            "location": 236,
            "return": [
                "dict",
                "bool",
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BadTranslatorInput.__init__": {
            "name": "__init__",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sentence_id": [
                    "str",
                    "Optional[str]",
                    "List[int]"
                ],
                "tokens": [
                    "str",
                    "Optional[str]",
                    "List[int]"
                ]
            }
        },
        "TranslatorOutput.json": {
            "name": "json",
            "location": 510,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Translator.__init__": {
            "name": "__init__",
            "location": 750,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": [
                    "bool",
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[str]",
                    "str",
                    "float",
                    "int"
                ],
                "ensemble_mode": [
                    "int",
                    "str",
                    "float"
                ],
                "scorer": [
                    "bool",
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[str]",
                    "str",
                    "float",
                    "int"
                ],
                "batch_size": [
                    "int",
                    "Tuple[int, int, int]",
                    "bool",
                    "Optional[int]",
                    "Tuple[int]"
                ],
                "beam_search_stop": [
                    "dict",
                    "int",
                    "List[raiden.utils.Address]"
                ],
                "models": [
                    "int",
                    "float"
                ],
                "source_vocabs": [
                    "str",
                    "int",
                    "bool",
                    "data_io.DataConfig",
                    "List[str]"
                ],
                "target_vocabs": [
                    "int",
                    "Sequence[Any]"
                ],
                "beam_size": [
                    "int",
                    "numpy.ndarray",
                    "Tuple[int]",
                    "Optional[numpy.ndarray]"
                ],
                "nbest_size": [
                    "int",
                    "Optional[int]",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray",
                    "Union[Tuple[int, int], int]",
                    "torch.FloatTensor"
                ],
                "restrict_lexicon": [
                    "int",
                    "numpy.ndarray",
                    "bool",
                    "Optional[List[Any]]",
                    "bytes"
                ],
                "strip_unknown_words": [
                    "bool",
                    "int",
                    "constants.HttpVersion",
                    "Callable",
                    "dict"
                ],
                "sample": [
                    "int",
                    "str",
                    "float"
                ],
                "output_scores": [
                    "int",
                    "str",
                    "float"
                ],
                "constant_length_ratio": [
                    "int",
                    "str",
                    "float"
                ],
                "max_output_length_num_stds": [
                    "Optional[int]",
                    "int",
                    "raiden.utils.BlockExpiration",
                    "raiden.utils.BlockHash"
                ],
                "max_input_length": [
                    "Optional[int]",
                    "int",
                    "raiden.utils.BlockExpiration",
                    "raiden.utils.BlockHash"
                ],
                "max_output_length": [
                    "Optional[int]",
                    "int",
                    "raiden.utils.BlockExpiration",
                    "raiden.utils.BlockHash"
                ],
                "prevent_unk": [
                    "int",
                    "str",
                    "float"
                ],
                "greedy": [
                    "int",
                    "str",
                    "float"
                ],
                "skip_nvs": [
                    "int",
                    "str",
                    "float"
                ],
                "nvs_thresh": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "Translator.max_input_length": {
            "name": "max_input_length",
            "location": 839,
            "return": [
                "bool",
                "float",
                "Optional[int]",
                "int",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Translator.max_batch_size": {
            "name": "max_batch_size",
            "location": 846,
            "return": [
                "int",
                "str",
                "List[float]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Translator.num_source_factors": {
            "name": "num_source_factors",
            "location": 853,
            "return": [
                "Set[str]",
                "bool",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": []
            }
        },
        "Translator.num_target_factors": {
            "name": "num_target_factors",
            "location": 857,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Translator.translate": {
            "name": "translate",
            "location": 860,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "trans_inputs": [
                    "List[int]",
                    "list",
                    "bool",
                    "List[float]",
                    "str",
                    "int"
                ],
                "fill_up_batches": [
                    "Dict[str, Any]",
                    "Sequence[T]",
                    "Callable[[], float]",
                    "torch.Tensor",
                    "List[str]",
                    "int",
                    "List[List[int]]"
                ]
            }
        },
        "Translator._get_inference_input": {
            "name": "_get_inference_input",
            "location": 985,
            "return": [
                "str",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "trans_inputs": [
                    "List[int]",
                    "int",
                    "bytes",
                    "torch.Tensor",
                    "numpy.ndarray"
                ]
            }
        },
        "Translator._get_translation_tokens_and_factors": {
            "name": "_get_translation_tokens_and_factors",
            "location": 1086,
            "return": [
                "int",
                "raiden.utils.List[raiden.utils.Tuple[str, raiden.utils.Any]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "target_ids": [
                    "str",
                    "int"
                ]
            }
        },
        "Translator._make_result": {
            "name": "_make_result",
            "location": 1117,
            "return": [
                "str",
                "int",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "trans_input": [
                    "str",
                    "List[List[int]]"
                ],
                "translation": [
                    "str",
                    "int"
                ]
            }
        },
        "Translator._translate_np": {
            "name": "_translate_np",
            "location": 1162,
            "return": [
                "List[str]",
                "str",
                "Tuple[float]",
                "int",
                "src.core.model.library.Library",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "int",
                    "Tuple[int, int]",
                    "Union[numpy.ndarray, numpy.void]",
                    "Dict[str, Any]",
                    "Optional[Union[numpy.ndarray, numpy.void]]"
                ],
                "source_length": [
                    "int",
                    "Tuple[int, int]",
                    "Union[numpy.ndarray, numpy.void]",
                    "Dict[str, Any]",
                    "Optional[Union[numpy.ndarray, numpy.void]]"
                ],
                "restrict_lexicon": [
                    "int",
                    "Tuple[int, int]",
                    "Union[numpy.ndarray, numpy.void]",
                    "Dict[str, Any]",
                    "Optional[Union[numpy.ndarray, numpy.void]]"
                ],
                "max_output_lengths": [
                    "int",
                    "Tuple[int, int]",
                    "Union[numpy.ndarray, numpy.void]",
                    "Dict[str, Any]",
                    "Optional[Union[numpy.ndarray, numpy.void]]"
                ],
                "target_prefix": [
                    "int",
                    "Tuple[int, int]",
                    "Union[numpy.ndarray, numpy.void]",
                    "Dict[str, Any]",
                    "Optional[Union[numpy.ndarray, numpy.void]]"
                ],
                "target_prefix_factors": [
                    "int",
                    "Tuple[int, int]",
                    "Union[numpy.ndarray, numpy.void]",
                    "Dict[str, Any]",
                    "Optional[Union[numpy.ndarray, numpy.void]]"
                ]
            }
        },
        "Translator._get_best_translations": {
            "name": "_get_best_translations",
            "location": 1189,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "result": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Translator._get_best_word_indices_for_kth_hypotheses": {
            "name": "_get_best_word_indices_for_kth_hypotheses",
            "location": 1228,
            "return": [
                "Dict[str, Any]",
                "dict",
                "list",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "ks": [
                    "int",
                    "List[str]",
                    "Optional[bool]",
                    "bytes"
                ],
                "all_hyp_indices": [
                    "Callable",
                    "tuple"
                ]
            }
        },
        "Translator._assemble_translation": {
            "name": "_assemble_translation",
            "location": 1252,
            "return": [
                "tuple"
            ],
            "arguments": {
                "sequence": [
                    "torch.Tensor",
                    "float",
                    "list",
                    "int",
                    "Optional[recidiviz.common.constants.state.state_incarceration_period.StateIncarcerationPeriodAdmissionReason]",
                    "Tuple[int]"
                ],
                "length": [
                    "int",
                    "bool",
                    "Dict[str, int]",
                    "Dict[int, str]",
                    "str",
                    "float"
                ],
                "seq_scores": [
                    "Union[torch.Tensor, float, Tuple[float, float], List[float]]",
                    "int",
                    "List[utils.CWLObjectType]",
                    "Union[float, Tuple[float, float]]"
                ],
                "estimated_reference_length": [
                    "Optional[float]",
                    "Optional[Any]",
                    "Optional[Dict]"
                ],
                "unshift_target_factors": [
                    "bool",
                    "Optional[bool]"
                ]
            }
        }
    },
    "sockeye-main/sockeye/initial_setup.py": {
        "handle_env_cli_arg": {
            "name": "handle_env_cli_arg",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "sockeye-main/sockeye/layers.py": {
        "get_activation": {
            "name": "get_activation",
            "location": 28,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "act_type": [
                    "str",
                    "int"
                ],
                "inplace": [
                    "str",
                    "float"
                ]
            }
        },
        "interleaved_matmul_encdec_qk": {
            "name": "interleaved_matmul_encdec_qk",
            "location": 168,
            "return": [
                "int",
                "Callable",
                "str",
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "q": [
                    "torch.Tensor"
                ],
                "kv": [
                    "int",
                    "Callable",
                    "str"
                ],
                "heads": [
                    "str",
                    "torch.Tensor",
                    "bool",
                    "AsyncIterator",
                    "float"
                ]
            }
        },
        "interleaved_matmul_encdec_valatt": {
            "name": "interleaved_matmul_encdec_valatt",
            "location": 196,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "kv": [
                    "int",
                    "torch.Tensor",
                    "str",
                    "Optional[int]"
                ],
                "att": [
                    "int",
                    "Callable",
                    "str"
                ],
                "heads": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "prepare_source_length_mask": {
            "name": "prepare_source_length_mask",
            "location": 260,
            "return": [
                "str",
                "int",
                "Type[Any]",
                "complex"
            ],
            "arguments": {
                "lengths": [
                    "int",
                    "str",
                    "logging.LogRecord",
                    "bool",
                    "List[List[str]]"
                ],
                "heads": [
                    "int",
                    "float",
                    "list",
                    "Tuple[int]"
                ],
                "max_length": [
                    "int",
                    "str",
                    "bool"
                ],
                "expand": [
                    "int",
                    "float",
                    "list",
                    "Tuple[int]"
                ]
            }
        },
        "interleave_kv": {
            "name": "interleave_kv",
            "location": 584,
            "return": [
                ""
            ],
            "arguments": {
                "module": [
                    "str",
                    "django.utils.safestring.SafeText",
                    "dataclasses.Field",
                    "Dict[str, Any]"
                ]
            }
        },
        "separate_kv": {
            "name": "separate_kv",
            "location": 591,
            "return": [
                ""
            ],
            "arguments": {
                "module": [
                    "str",
                    "django.utils.safestring.SafeText",
                    "dataclasses.Field",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_positional_embeddings": {
            "name": "get_positional_embeddings",
            "location": 599,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "length": [
                    "int",
                    "slice",
                    "list",
                    "float"
                ],
                "depth": [
                    "str",
                    "bytes"
                ]
            }
        },
        "LHUC.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_hidden": [
                    "dict",
                    "Optional[int]",
                    "str",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "LHUC.forward": {
            "name": "forward",
            "location": 50,
            "return": [
                "raiden.utils.signer.Signer",
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "Union[bytes, bytearray, memoryview]"
                ]
            }
        },
        "OutputLayer.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hidden_size": [
                    "int",
                    "float",
                    "Union[Tuple[int, int], int]"
                ],
                "vocab_size": [
                    "int",
                    "bool",
                    "bytes",
                    "float"
                ],
                "weight": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "OutputLayer.extra_repr": {
            "name": "extra_repr",
            "location": 87,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OutputLayer._is_new_slice": {
            "name": "_is_new_slice",
            "location": 91,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "Match",
                    "int"
                ]
            }
        },
        "OutputLayer._take_slice": {
            "name": "_take_slice",
            "location": 96,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "vocab_slice_ids": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "OutputLayer.forward": {
            "name": "forward",
            "location": 101,
            "return": [
                "str",
                "pywirelessmbus.utils.WMbusMessage"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "int"
                ],
                "vocab_slice_ids": [
                    "Optional[int]",
                    "bytes",
                    "str",
                    "int",
                    "Optional[Set[int]]"
                ]
            }
        },
        "LengthRatio.__init__": {
            "name": "__init__",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hidden_size": [
                    "torch.Tensor",
                    "bool",
                    "float",
                    "Optional[Iterable]",
                    "int",
                    "list"
                ],
                "num_layers": [
                    "int",
                    "bool",
                    "Optional[int]",
                    "Tuple[int, int]",
                    "str",
                    "Optional[float]"
                ]
            }
        },
        "LengthRatio.forward": {
            "name": "forward",
            "location": 148,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "source_encoded": [
                    "bool",
                    "Optional[int]",
                    "rl_algorithms.utils.config.ConfigDict",
                    "torch.autograd.Variable",
                    "List['GridQid']",
                    "float"
                ],
                "source_encoded_length": [
                    "float",
                    "bool",
                    "int",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "DotAttentionCell.__init__": {
            "name": "__init__",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dropout": [
                    "bool",
                    "Optional[bool]",
                    "str",
                    "torch.Tensor",
                    "float"
                ],
                "heads": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DotAttentionCell.forward": {
            "name": "forward",
            "location": 230,
            "return": [
                "Optional[int]",
                "str",
                "Optional[str]",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "queries": [
                    "str"
                ],
                "key_values": [
                    "str",
                    "Tuple[str, List[str]]"
                ],
                "mask": [
                    "Optional[float]",
                    "Optional[object]",
                    "Union[str, dict]",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "MultiHeadAttentionBase.__init__": {
            "name": "__init__",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "depth_att": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "heads": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "depth_out": [
                    "int",
                    "bool",
                    "Optional[float]"
                ],
                "dropout": [
                    "Union[torch.Tensor, float, Tuple[float, float], List[float]]",
                    "float",
                    "Union[float, Tuple[float, float]]",
                    "int",
                    "bool"
                ]
            }
        },
        "MultiHeadAttentionBase._attend": {
            "name": "_attend",
            "location": 298,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "queries": [
                    "Optional[dict]",
                    "int"
                ],
                "key_values": [
                    "Optional[dict]",
                    "int"
                ],
                "mask": [
                    "Optional[dict]",
                    "int"
                ]
            }
        },
        "AutoregressiveLayer.num_state_tensors": {
            "name": "num_state_tensors",
            "location": 323,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutoregressiveLayer.needs_mask": {
            "name": "needs_mask",
            "location": 329,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutoregressiveLayer.get_state_shape": {
            "name": "get_state_shape",
            "location": 334,
            "return": [
                "typing.Tuple"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "AutoregressiveLayer.forward": {
            "name": "forward",
            "location": 342,
            "return": [
                "typing.Tuple"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "BaseException"
                ],
                "previous_states": [
                    "BaseException"
                ]
            }
        },
        "MultiHeadSelfAttention.__init__": {
            "name": "__init__",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "depth_att": [
                    "int",
                    "str",
                    "raiden.utils.MessageID",
                    "bool",
                    "torch.optim.Optimizer"
                ],
                "heads": [
                    "int",
                    "str",
                    "raiden.utils.MessageID",
                    "bool",
                    "torch.optim.Optimizer"
                ],
                "depth_out": [
                    "int",
                    "str",
                    "raiden.utils.MessageID",
                    "bool",
                    "torch.optim.Optimizer"
                ],
                "dropout": [
                    "int",
                    "bool",
                    "List[Tuple[str, str]]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "MultiHeadSelfAttention.separate_kv": {
            "name": "separate_kv",
            "location": 377,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiHeadSelfAttention.interleave_kv": {
            "name": "interleave_kv",
            "location": 389,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiHeadSelfAttention.train": {
            "name": "train",
            "location": 399,
            "return": [
                "str",
                "torch.Tensor"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "bytes",
                    "Iterable[str]",
                    "str",
                    "Callable[[bytes], bytes]",
                    "float",
                    "int"
                ]
            }
        },
        "MultiHeadSelfAttention._load_from_state_dict": {
            "name": "_load_from_state_dict",
            "location": 412,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiHeadSelfAttention.num_state_tensors": {
            "name": "num_state_tensors",
            "location": 417,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiHeadSelfAttention.needs_mask": {
            "name": "needs_mask",
            "location": 422,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiHeadSelfAttention.get_state_shape": {
            "name": "get_state_shape",
            "location": 426,
            "return": [
                "str",
                "bool",
                "List[str]",
                "int",
                "Dict[str, Any]",
                "torch.optim.Optimizer"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int",
                    "bool"
                ]
            }
        },
        "MultiHeadSelfAttention.forward": {
            "name": "forward",
            "location": 434,
            "return": [
                "Iterable[str]",
                "IO[str]",
                "int",
                "MutableSequence[utils.CWLObjectType]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "torch.Tensor",
                    "torch.nn.utils.rnn.PackedSequence",
                    "Dict[str, int]"
                ],
                "previous_states": [
                    "Optional[Tuple[torch.Tensor, torch.Tensor]]",
                    "torch.IntTensor",
                    "torch.Tensor",
                    "Optional[torch.Tensor]",
                    "torch.LongTensor"
                ],
                "mask": [
                    "torch.Tensor",
                    "torch.nn.utils.rnn.PackedSequence",
                    "Dict[str, int]"
                ]
            }
        },
        "MultiHeadAttention.__init__": {
            "name": "__init__",
            "location": 488,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "depth_att": [
                    "bool"
                ],
                "heads": [
                    "bool",
                    "str"
                ],
                "depth_out": [
                    "bool",
                    "str"
                ],
                "dropout": [
                    "str",
                    "int"
                ],
                "depth_key_value": [
                    "str",
                    "bool"
                ]
            }
        },
        "MultiHeadAttention.separate_kv": {
            "name": "separate_kv",
            "location": 503,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiHeadAttention.interleave_kv": {
            "name": "interleave_kv",
            "location": 514,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiHeadAttention.train": {
            "name": "train",
            "location": 524,
            "return": [
                "str",
                "torch.Tensor"
            ],
            "arguments": {
                "self": [],
                "mode": [
                    "bytes",
                    "Iterable[str]",
                    "str",
                    "Callable[[bytes], bytes]",
                    "float",
                    "int"
                ]
            }
        },
        "MultiHeadAttention._load_from_state_dict": {
            "name": "_load_from_state_dict",
            "location": 537,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiHeadAttention.forward": {
            "name": "forward",
            "location": 541,
            "return": [
                "bytes",
                "Sequence",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "queries": [
                    "int",
                    "dict",
                    "Sequence[Union[str, int]]",
                    "Sequence[str]",
                    "str"
                ],
                "key_values": [
                    "int",
                    "dict",
                    "Sequence[Union[str, int]]",
                    "Sequence[str]",
                    "str"
                ],
                "mask": [
                    "int",
                    "dict",
                    "Sequence[Union[str, int]]",
                    "Sequence[str]",
                    "str"
                ],
                "projected_memory_kv": [
                    "Optional[str]",
                    "Optional[Tuple[int, int]]",
                    "Optional[Callable[[Any], Any]]",
                    "Optional[Tuple[str, Any]]",
                    "Optional[Union[Any, Any]]"
                ]
            }
        },
        "PositionalEmbeddings.__init__": {
            "name": "__init__",
            "location": 628,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "weight_type": [
                    "bool",
                    "Callable",
                    "type"
                ],
                "num_embed": [
                    "int",
                    "bool",
                    "Optional[int]",
                    "List[int]"
                ],
                "max_seq_len": [
                    "int",
                    "float",
                    "str"
                ],
                "scale_up_input": [
                    "bool",
                    "int",
                    "Optional[recidiviz.common.constants.state.state_supervision_period.StateSupervisionLevel]",
                    "str",
                    "Optional[str]"
                ],
                "scale_down_positions": [
                    "bool",
                    "int",
                    "Optional[recidiviz.common.constants.state.state_supervision_period.StateSupervisionLevel]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "PositionalEmbeddings.forward": {
            "name": "forward",
            "location": 653,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "torch.Tensor",
                    "int"
                ],
                "steps": [
                    "Optional[int]",
                    "int",
                    "Tuple[Optional[str], Any]",
                    "Optional[torch.Tensor]"
                ]
            }
        },
        "SSRU.__init__": {
            "name": "__init__",
            "location": 704,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_size": [
                    "int",
                    "float"
                ],
                "inference_only": [
                    "int",
                    "str",
                    "raiden.utils.ChannelID",
                    "raiden.utils.BlockIdentifier"
                ]
            }
        },
        "SSRU.num_state_tensors": {
            "name": "num_state_tensors",
            "location": 720,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSRU.needs_mask": {
            "name": "needs_mask",
            "location": 725,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SSRU.get_state_shape": {
            "name": "get_state_shape",
            "location": 729,
            "return": [
                "int",
                "bool",
                "str",
                "Optional[float]",
                "raiden.utils.SecretHash"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int",
                    "bool"
                ]
            }
        },
        "SSRU._training_cell_state_transform": {
            "name": "_training_cell_state_transform",
            "location": 738,
            "return": [
                "raiden.utils.PaymentNetworkID",
                "bool",
                "str"
            ],
            "arguments": {
                "previous_cell_state": [],
                "weighted_inputs": [],
                "forget_rates": []
            }
        },
        "SSRU._inference_cell_state_transform": {
            "name": "_inference_cell_state_transform",
            "location": 752,
            "return": [
                "torch.nn.Module",
                "bool",
                "str"
            ],
            "arguments": {
                "previous_cell_state": [
                    "int",
                    "raiden.utils.TokenAmount"
                ],
                "weighted_inputs": [
                    "int",
                    "raiden.utils.TokenAmount"
                ],
                "forget_rates": [
                    "int",
                    "raiden.utils.TokenAmount"
                ]
            }
        },
        "SSRU.forward": {
            "name": "forward",
            "location": 758,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [
                    "torch.Tensor",
                    "dict",
                    "int"
                ],
                "previous_states": [
                    "torch.Tensor"
                ]
            }
        }
    },
    "sockeye-main/sockeye/lexicon.py": {
        "lexicon_iterator": {
            "name": "lexicon_iterator",
            "location": 38,
            "return": [
                "typing.Generator[typing.Tuple[builtins.int, builtins.int, builtins.float], None, None]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "vocab_source": [
                    "str",
                    "Union[int, float]",
                    "dict",
                    "bytes",
                    "Dict[str, Dict[str, str]]"
                ],
                "vocab_target": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Callable",
                    "dict",
                    "Optional[Dict]"
                ]
            }
        },
        "read_lexicon": {
            "name": "read_lexicon",
            "location": 62,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool",
                    "List[List[str]]",
                    "List[str]"
                ],
                "vocab_source": [
                    "bytes",
                    "str",
                    "int"
                ],
                "vocab_target": [
                    "str",
                    "List[int]",
                    "Tuple[int, str]",
                    "Optional[bytes]",
                    "Dict[str, List[int]]"
                ]
            }
        },
        "load_restrict_lexicon": {
            "name": "load_restrict_lexicon",
            "location": 138,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Dict[cmk.utils.type_defs.HostName, str]",
                    "Optional[str]"
                ],
                "vocab_source": [
                    "str",
                    "bool"
                ],
                "vocab_target": [
                    "str",
                    "bool"
                ],
                "k": [
                    "str",
                    "int",
                    "List[str]",
                    "Dict[str, str]",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "create": {
            "name": "create",
            "location": 311,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        },
        "create_block_lexicon_from_file": {
            "name": "create_block_lexicon_from_file",
            "location": 327,
            "return": [
                "str",
                "int",
                "bool",
                "Type",
                "Union[type, Tuple[type, ...]]",
                "Dict[str, Tuple[int, int]]"
            ],
            "arguments": {
                "args": []
            }
        },
        "create_block_lexicon_for_model": {
            "name": "create_block_lexicon_for_model",
            "location": 341,
            "return": [
                "Dict[str, Any]",
                "Callable[..., None]",
                "numpy.ndarray"
            ],
            "arguments": {
                "block_tokens": [
                    "str",
                    "Callable"
                ],
                "model_path": [
                    "str",
                    "List[int]",
                    "list"
                ],
                "output_path": [
                    "str",
                    "Callable"
                ],
                "lowercase": [
                    "str",
                    "Callable"
                ]
            }
        },
        "create_block_lexicon": {
            "name": "create_block_lexicon",
            "location": 346,
            "return": [
                ""
            ],
            "arguments": {
                "block_tokens": [
                    "str",
                    "bool",
                    "bytes",
                    "int"
                ],
                "vocab_target": [
                    "str",
                    "bool",
                    "Dict[str, List[Any]]",
                    "utils.MinMaxStats",
                    "Dict[str, List[str]]",
                    "Sequence[str]",
                    "Dict[str, Any]"
                ],
                "output_path": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "lowercase": [
                    "bool",
                    "Sequence[str]",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "inspect": {
            "name": "inspect",
            "location": 363,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 388,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "RestrictLexicon.save": {
            "name": "save",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "RestrictLexicon.load_np": {
            "name": "load_np",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "lex": [
                    "str",
                    "bool",
                    "Type[T]",
                    "float",
                    "List[str]"
                ],
                "k": [
                    "str",
                    "bool",
                    "Type[T]",
                    "float",
                    "List[str]"
                ]
            }
        },
        "RestrictLexicon.requires_src_ids": {
            "name": "requires_src_ids",
            "location": 118,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RestrictLexicon.is_blocking": {
            "name": "is_blocking",
            "location": 124,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RestrictLexicon.get_allowed_trg_ids": {
            "name": "get_allowed_trg_ids",
            "location": 130,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "src_ids": [
                    "str",
                    "utils.types.Id",
                    "Set[str]",
                    "int"
                ]
            }
        },
        "RestrictLexicon.get_blocked_trg_ids": {
            "name": "get_blocked_trg_ids",
            "location": 134,
            "return": [
                "numpy.ndarray"
            ],
            "arguments": {
                "self": [],
                "src_ids": [
                    "str",
                    "int",
                    "Optional[str]",
                    "dict",
                    "tuple",
                    "Dict[str, List]",
                    "Tuple[List, List]",
                    "list"
                ]
            }
        },
        "TopKLexicon.__init__": {
            "name": "__init__",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab_source": [
                    "Dict[str, Dict]",
                    "Tuple[str, float]",
                    "Dict[str, Any]",
                    "cmk.utils.type_defs.Item"
                ],
                "vocab_target": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "TopKLexicon.create": {
            "name": "create",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Optional[str]",
                    "Optional[List[Any]]"
                ],
                "k": [
                    "list",
                    "Optional[str]",
                    "List[List[int]]",
                    "dict"
                ]
            }
        },
        "TopKLexicon.load_np": {
            "name": "load_np",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "lex": [
                    "bytes",
                    "List[int]",
                    "raiden.utils.FeeAmount",
                    "raiden.utils.PaymentAmount",
                    "list",
                    "int"
                ],
                "k": [
                    "Optional[float]",
                    "numpy.ndarray",
                    "Optional[str]",
                    "Optional[Callable[..., Any]]"
                ]
            }
        },
        "TopKLexicon.load": {
            "name": "load",
            "location": 223,
            "return": [
                "List[Callable]",
                "Optional[Callable[[str], bool]]",
                "str",
                "bool",
                "numpy.ndarray",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "Sequence[str]"
                ],
                "k": [
                    "bool",
                    "str",
                    "type",
                    "TextIO"
                ]
            }
        },
        "TopKLexicon.requires_src_ids": {
            "name": "requires_src_ids",
            "location": 237,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TopKLexicon.is_blocking": {
            "name": "is_blocking",
            "location": 240,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TopKLexicon.get_trg_ids": {
            "name": "get_trg_ids",
            "location": 243,
            "return": [
                "str",
                "Optional[str]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "src_ids": [
                    "str"
                ]
            }
        },
        "TopKLexicon.get_allowed_trg_ids": {
            "name": "get_allowed_trg_ids",
            "location": 248,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "src_ids": [
                    "str",
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "TopKLexicon.get_blocked_trg_ids": {
            "name": "get_blocked_trg_ids",
            "location": 260,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "src_ids": [
                    "str",
                    "int",
                    "Optional[str]",
                    "dict",
                    "tuple",
                    "Dict[str, List]",
                    "Tuple[List, List]",
                    "list"
                ]
            }
        },
        "StaticBlockLexicon.__init__": {
            "name": "__init__",
            "location": 269,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "lex": [
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Callable]",
                    "Optional[Hashable]",
                    "int"
                ]
            }
        },
        "StaticBlockLexicon.create": {
            "name": "create",
            "location": 273,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "block_tokens": [
                    "list",
                    "str",
                    "Set[frozenset[int]]",
                    "set",
                    "Set[object]"
                ],
                "vocab_target": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict]"
                ]
            }
        },
        "StaticBlockLexicon.load_np": {
            "name": "load_np",
            "location": 294,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "lex": [
                    "bool",
                    "int",
                    "List[float]",
                    "str"
                ],
                "k": [
                    "str",
                    "bool",
                    "Type[T]",
                    "float",
                    "List[str]"
                ]
            }
        },
        "StaticBlockLexicon.requires_src_ids": {
            "name": "requires_src_ids",
            "location": 297,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StaticBlockLexicon.is_blocking": {
            "name": "is_blocking",
            "location": 300,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StaticBlockLexicon.get_blocked_trg_ids": {
            "name": "get_blocked_trg_ids",
            "location": 303,
            "return": [
                "int",
                "str",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "src_ids": [
                    "str",
                    "int",
                    "Optional[str]",
                    "dict",
                    "tuple",
                    "Dict[str, List]",
                    "Tuple[List, List]",
                    "list"
                ]
            }
        },
        "StaticBlockLexicon.get_allowed_trg_ids": {
            "name": "get_allowed_trg_ids",
            "location": 307,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "src_ids": [
                    "str",
                    "utils.types.Id",
                    "Set[str]",
                    "int"
                ]
            }
        }
    },
    "sockeye-main/sockeye/log.py": {
        "setup_main_logger": {
            "name": "setup_main_logger",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "file_logging": [
                    "Optional[BinaryIO]",
                    "Sequence[str]",
                    "str",
                    "BinaryIO",
                    "bool"
                ],
                "console": [
                    "Optional[BinaryIO]",
                    "Sequence[str]",
                    "str",
                    "BinaryIO",
                    "bool"
                ],
                "path": [
                    "Optional[BinaryIO]",
                    "Sequence[str]",
                    "str",
                    "BinaryIO",
                    "bool"
                ],
                "level": [
                    "Optional[BinaryIO]",
                    "Sequence[str]",
                    "str",
                    "BinaryIO",
                    "bool"
                ],
                "console_level": [
                    "Optional[BinaryIO]",
                    "Sequence[str]",
                    "str",
                    "BinaryIO",
                    "bool"
                ]
            }
        },
        "log_sockeye_version": {
            "name": "log_sockeye_version",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "logger": [
                    "str",
                    "logging.Logger",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "log_torch_version": {
            "name": "log_torch_version",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "logger": [
                    "str",
                    "int",
                    "logging.Logger",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "setup_main_logger.exception_hook": {
            "name": "exception_hook",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "exc_type": [
                    "Exception",
                    "Type"
                ],
                "exc_value": [
                    "Exception",
                    "Type"
                ],
                "exc_traceback": [
                    "Exception",
                    "Type"
                ]
            }
        }
    },
    "sockeye-main/sockeye/loss.py": {
        "_label_to_bow": {
            "name": "_label_to_bow",
            "location": 253,
            "return": [
                "Tuple[bytes]",
                "bool",
                "str",
                "IO[Any]",
                "float",
                "int"
            ],
            "arguments": {
                "label": [
                    "numpy.ndarray",
                    "bool",
                    "List[List[str]]",
                    "float",
                    "Tuple[Any, Any, Any]",
                    "Sequence[float]",
                    "dict",
                    "Union[int, numpy.ndarray]"
                ],
                "num_labels": [
                    "int",
                    "float",
                    "Tuple[Any, Any, Any]"
                ]
            }
        },
        "Loss.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "output_name": [
                    "str",
                    "bool"
                ],
                "label_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "weight": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "metric_prefix": [
                    "str",
                    "Dict[str, bytes]",
                    "raiden.utils.Type",
                    "type",
                    "Tuple[type]"
                ]
            }
        },
        "Loss.__call__": {
            "name": "__call__",
            "location": 52,
            "return": [
                "dict",
                "T",
                "Match",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "outputs": [
                    "str",
                    "bytes",
                    "T"
                ],
                "labels": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Loss.create_metric": {
            "name": "create_metric",
            "location": 66,
            "return": [
                "'LossMetric'"
            ],
            "arguments": {
                "self": []
            }
        },
        "Loss.metric": {
            "name": "metric",
            "location": 73,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Loss.weight": {
            "name": "weight",
            "location": 79,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Loss.name": {
            "name": "name",
            "location": 83,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Loss.output_name": {
            "name": "output_name",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Loss.label_name": {
            "name": "label_name",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LossMetric.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[bytes]",
                    "Optional[str]",
                    "List[str]"
                ],
                "short_name": [
                    "str",
                    "Optional[str]"
                ],
                "prefix": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "LossMetric.__repr__": {
            "name": "__repr__",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LossMetric.__str__": {
            "name": "__str__",
            "location": 106,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LossMetric.name": {
            "name": "name",
            "location": 110,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LossMetric.short_name": {
            "name": "short_name",
            "location": 114,
            "return": [
                "str",
                "List[Tuple[str]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LossMetric.update": {
            "name": "update",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "loss": [
                    "int",
                    "bool",
                    "Union[str, float]"
                ],
                "num_samples": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "LossMetric.get": {
            "name": "get",
            "location": 121,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LossMetric.reset": {
            "name": "reset",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CrossEntropyLoss.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "float"
                ],
                "weight": [
                    "str",
                    "float"
                ],
                "label_smoothing": [
                    "bool",
                    "Optional[str]",
                    "Sequence",
                    "str",
                    "Optional[int]"
                ],
                "dtype": [
                    "bool",
                    "Optional[str]",
                    "Sequence",
                    "str",
                    "Optional[int]"
                ],
                "output_name": [
                    "str",
                    "float"
                ],
                "label_name": [
                    "str",
                    "float"
                ],
                "ignore_label": [
                    "str",
                    "Sequence[str]",
                    "Optional[List[str]]"
                ],
                "metric_prefix": [
                    "str",
                    "float"
                ],
                "label_smoothing_impl": [
                    "bool",
                    "Optional[str]",
                    "Sequence",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "CrossEntropyLoss._smoothed_loss_as_in_mxnet": {
            "name": "_smoothed_loss_as_in_mxnet",
            "location": 160,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "logits": [
                    "torch.Tensor",
                    "Optional[torch.Tensor]",
                    "float",
                    "Sequence[str]"
                ],
                "labels": [
                    "str",
                    "List[Optional[str]]",
                    "Optional[List[Any]]",
                    "torch.Tensor"
                ]
            }
        },
        "CrossEntropyLoss._smoothed_loss_as_in_fairseq": {
            "name": "_smoothed_loss_as_in_fairseq",
            "location": 181,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "logits": [
                    "str",
                    "Sequence[Sequence[str]]",
                    "Sequence[Tuple[str, int]]",
                    "Sequence[str]",
                    "numpy.ndarray"
                ],
                "labels": [
                    "str",
                    "numpy.array",
                    "numpy.ndarray"
                ]
            }
        },
        "CrossEntropyLoss._torch_cross_entropy_loss": {
            "name": "_torch_cross_entropy_loss",
            "location": 206,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "logits": [
                    "float",
                    "torch.Tensor",
                    "Dict[str, int]",
                    "List[Set[int]]"
                ],
                "labels": [
                    "int",
                    "torch.Tensor",
                    "aiocometd.constants.TransportState"
                ]
            }
        },
        "CrossEntropyLoss.forward": {
            "name": "forward",
            "location": 218,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "logits": [
                    "numpy.ndarray",
                    "torch.IntTensor",
                    "Dict[str, torch.LongTensor]",
                    "float",
                    "List[str]",
                    "Sequence[str]"
                ],
                "labels": [
                    "numpy.ndarray",
                    "torch.IntTensor",
                    "Dict[str, torch.LongTensor]",
                    "float",
                    "List[str]",
                    "Sequence[str]"
                ]
            }
        },
        "CrossEntropyLoss.create_metric": {
            "name": "create_metric",
            "location": 222,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "DynamicBCEWithLogitsLoss.__init__": {
            "name": "__init__",
            "location": 232,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "weight": [
                    "Optional[numpy.ndarray]",
                    "Optional[float]",
                    "Optional[Iterable[str]]",
                    "Dict[str, Any]",
                    "float"
                ],
                "size_average": [
                    "bool",
                    "int"
                ],
                "reduce": [
                    "bool",
                    "int"
                ],
                "reduction": [
                    "int",
                    "float"
                ],
                "pos_weight": [
                    "Optional[numpy.ndarray]",
                    "Optional[float]",
                    "Tuple[str, int]",
                    "float",
                    "List[int]"
                ]
            }
        },
        "DynamicBCEWithLogitsLoss.forward": {
            "name": "forward",
            "location": 240,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "input": [
                    "bool",
                    "numpy.ndarray"
                ],
                "target": [
                    "bool",
                    "numpy.ndarray"
                ],
                "pos_weight": [
                    "Optional[numpy.ndarray]",
                    "Optional[float]",
                    "Optional[torch.Tensor]",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "BinaryCrossEntropyBowLoss.__init__": {
            "name": "__init__",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "float"
                ],
                "pos_weight": [
                    "bool",
                    "Sequence",
                    "str",
                    "Optional[str]"
                ],
                "weight": [
                    "str",
                    "float"
                ],
                "dtype": [
                    "bool",
                    "Sequence",
                    "str",
                    "Optional[str]"
                ],
                "output_name": [
                    "str",
                    "float"
                ],
                "label_name": [
                    "str",
                    "float"
                ],
                "num_labels": [
                    "int",
                    "List[int]",
                    "float",
                    "Optional[str]",
                    "str",
                    "bytes"
                ],
                "metric_prefix": [
                    "str",
                    "float"
                ]
            }
        },
        "BinaryCrossEntropyBowLoss.forward": {
            "name": "forward",
            "location": 281,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "output": [
                    "str",
                    "Type[T]",
                    "list",
                    "int"
                ],
                "label": [
                    "str",
                    "List[int]"
                ]
            }
        },
        "BinaryCrossEntropyBowLoss.create_metric": {
            "name": "create_metric",
            "location": 317,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "PerplexityMetric.__init__": {
            "name": "__init__",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "short_name": [
                    "str"
                ]
            }
        },
        "PerplexityMetric.update": {
            "name": "update",
            "location": 326,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "batch_cross_entropy": [
                    "int",
                    "bool",
                    "List[str]"
                ],
                "batch_num_valid": [
                    "bool",
                    "str",
                    "raiden.utils.TokenAmount",
                    "raiden.utils.PaymentHashInvoice",
                    "torch.Tensor",
                    "list",
                    "List[str]",
                    "Dict[str, torch.Tensor]"
                ]
            }
        },
        "PerplexityMetric.get": {
            "name": "get",
            "location": 330,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PoissonLoss.__init__": {
            "name": "__init__",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "float"
                ],
                "weight": [
                    "str",
                    "float"
                ],
                "output_name": [
                    "str",
                    "float"
                ],
                "label_name": [
                    "str",
                    "float"
                ]
            }
        },
        "PoissonLoss.forward": {
            "name": "forward",
            "location": 348,
            "return": [
                "int",
                "List[int]",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "length_predictions": [
                    "float",
                    "numpy.ndarray",
                    "torch.Tensor",
                    "torch.LongTensor",
                    "int",
                    "bool"
                ],
                "labels": [
                    "bool",
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "PoissonLoss.create_metric": {
            "name": "create_metric",
            "location": 363,
            "return": [
                "str",
                "bool",
                "Dict[str, Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MSELoss.__init__": {
            "name": "__init__",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "float"
                ],
                "weight": [
                    "str",
                    "float"
                ],
                "output_name": [
                    "str",
                    "float"
                ],
                "label_name": [
                    "str",
                    "float"
                ]
            }
        },
        "MSELoss.forward": {
            "name": "forward",
            "location": 380,
            "return": [
                "int",
                "List[int]",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "length_predictions": [
                    "torch.Tensor",
                    "numpy.array",
                    "int",
                    "numpy.ndarray",
                    "str"
                ],
                "labels": [
                    "torch.Tensor",
                    "bool",
                    "Sequence[str]",
                    "str"
                ]
            }
        },
        "MSELoss.create_metric": {
            "name": "create_metric",
            "location": 395,
            "return": [
                "str",
                "bool",
                "Dict[str, Dict]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sockeye-main/sockeye/lr_scheduler.py": {
        "get_lr_scheduler": {
            "name": "get_lr_scheduler",
            "location": 193,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "scheduler_type": [
                    "int"
                ],
                "base_learning_rate": [
                    "int",
                    "bool",
                    "Mapping[str, Tuple[float, float, float]]"
                ],
                "learning_rate_t_scale": [
                    "int",
                    "bool",
                    "Mapping[str, Tuple[float, float, float]]"
                ],
                "learning_rate_reduce_factor": [
                    "str",
                    "bool"
                ],
                "learning_rate_reduce_num_not_improved": [
                    "str",
                    "int",
                    "Callable"
                ],
                "learning_rate_warmup": [
                    "int",
                    "bool",
                    "Mapping[str, Tuple[float, float, float]]"
                ],
                "max_updates": [
                    "int",
                    "Optional[int]",
                    "Optional[List[int]]",
                    "bool",
                    "str"
                ]
            }
        },
        "LearningRateScheduler.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_lr": [
                    "str",
                    "bool",
                    "Iterable[Any]",
                    "Iterable[float]",
                    "List[bytes]"
                ],
                "warmup": [
                    "int",
                    "bool",
                    "float"
                ],
                "t_scale": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "LearningRateScheduler.__call__": {
            "name": "__call__",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "t": [
                    "T",
                    "float"
                ]
            }
        },
        "LearningRateScheduler._warmup": {
            "name": "_warmup",
            "location": 40,
            "return": [
                "str",
                "bytearray",
                "bytes",
                "slice"
            ],
            "arguments": {
                "self": [],
                "scaled_t": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "AdaptiveLearningRateScheduler.new_evaluation_result": {
            "name": "new_evaluation_result",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "has_improved": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "LearningRateSchedulerInvSqrtDecay.__call__": {
            "name": "__call__",
            "location": 75,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "float",
                    "int"
                ]
            }
        },
        "LearningRateSchedulerLinearDecay.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_lr": [
                    "str",
                    "Optional[Dict]",
                    "Optional[str]",
                    "int",
                    "Optional[int]"
                ],
                "total_steps": [
                    "float",
                    "int",
                    "bool"
                ],
                "warmup": [
                    "str",
                    "Optional[Dict]",
                    "Optional[str]",
                    "int",
                    "Optional[int]"
                ],
                "t_scale": [
                    "str",
                    "Optional[Dict]",
                    "Optional[str]",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "LearningRateSchedulerLinearDecay.__call__": {
            "name": "__call__",
            "location": 112,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "float",
                    "int"
                ]
            }
        },
        "LearningRateSchedulerPlateauReduce.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_lr": [
                    "str",
                    "Optional[int]",
                    "List[str]",
                    "Optional[List[str]]"
                ],
                "reduce_factor": [
                    "bool",
                    "int"
                ],
                "reduce_num_not_improved": [
                    "bool",
                    "str",
                    "int",
                    "List[str]",
                    "logging.Logger"
                ],
                "warmup": [
                    "str",
                    "Optional[int]",
                    "List[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "LearningRateSchedulerPlateauReduce.new_evaluation_result": {
            "name": "new_evaluation_result",
            "location": 151,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "has_improved": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "LearningRateSchedulerPlateauReduce.__call__": {
            "name": "__call__",
            "location": 174,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "t": [
                    "float"
                ]
            }
        },
        "LearningRateSchedulerPlateauReduce.__repr__": {
            "name": "__repr__",
            "location": 183,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sockeye-main/sockeye/model.py": {
        "initialize_parameters": {
            "name": "initialize_parameters",
            "location": 574,
            "return": [
                ""
            ],
            "arguments": {
                "module": []
            }
        },
        "load_model": {
            "name": "load_model",
            "location": 613,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "model_folder": [
                    "bool",
                    "dict",
                    "Union[dict, list]"
                ],
                "device": [
                    "str",
                    "dict",
                    "float",
                    "Optional[str]",
                    "int"
                ],
                "dtype": [
                    "dict"
                ],
                "checkpoint": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Optional[Dict]"
                ],
                "inference_only": [
                    "int",
                    "torch.nn.Module",
                    "str",
                    "Callable[..., Awaitable]",
                    "Optional[str]"
                ],
                "train_decoder_only": [
                    "int",
                    "torch.nn.Module",
                    "str",
                    "Callable[..., Awaitable]",
                    "Optional[str]"
                ],
                "allow_missing": [
                    "str",
                    "bool",
                    "Exception",
                    "dict"
                ],
                "set_grad_req_null": [
                    "List[Dict[str, str]]",
                    "int",
                    "dict",
                    "List[str]",
                    "str",
                    "List[Tuple[str, str]]",
                    "Type[T]"
                ],
                "forward_pass_cache_size": [
                    "int",
                    "torch.nn.Module",
                    "str",
                    "Callable[..., Awaitable]",
                    "Optional[str]"
                ]
            }
        },
        "load_models": {
            "name": "load_models",
            "location": 686,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "device": [
                    "str"
                ],
                "model_folders": [
                    "List[str]",
                    "str",
                    "bool",
                    "IO[str]",
                    "Iterable[str]",
                    "list",
                    "int"
                ],
                "checkpoints": [
                    "Optional[int]",
                    "str",
                    "Optional[str]",
                    "torch.LongTensor",
                    "Optional[List[str]]"
                ],
                "dtype": [
                    "str"
                ],
                "inference_only": [
                    "str"
                ],
                "train_decoder_only": [
                    "str"
                ],
                "allow_missing": [
                    "str"
                ],
                "set_grad_req_null": [
                    "str"
                ],
                "forward_pass_cache_size": [
                    "str"
                ]
            }
        },
        "SockeyeModel.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "nucypher.config.characters.UrsulaConfiguration",
                    "bool",
                    "Config",
                    "str"
                ],
                "inference_only": [
                    "nucypher.config.characters.UrsulaConfiguration",
                    "str",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "raiden.utils.Address",
                    "raiden.constants.RoutingMode"
                ],
                "train_decoder_only": [
                    "int",
                    "bool",
                    "Callable",
                    "str"
                ],
                "forward_pass_cache_size": [
                    "int",
                    "Tuple[int, int]",
                    "str",
                    "float",
                    "torch.Tensor",
                    "Tuple[int]"
                ]
            }
        },
        "SockeyeModel.cast": {
            "name": "cast",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dtype": [
                    "dict",
                    "torch.Tensor",
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "SockeyeModel.state_structure": {
            "name": "state_structure",
            "location": 174,
            "return": [
                "int",
                "bool",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SockeyeModel.encode": {
            "name": "encode",
            "location": 177,
            "return": [
                "str",
                "utils.CWLObjectType"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "Optional[Dict[str, Any]]",
                    "str"
                ],
                "valid_length": [
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "SockeyeModel.encode_and_initialize": {
            "name": "encode_and_initialize",
            "location": 195,
            "return": [
                "dict",
                "hackathon.utils.utils.DataMessage",
                "Union[str, List[str]]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "raiden.tests.fuzz.utils.Scrambling",
                    "bytes"
                ],
                "valid_length": [
                    "raiden.tests.fuzz.utils.Scrambling",
                    "bytes"
                ],
                "constant_length_ratio": [
                    "List[List[int]]"
                ]
            }
        },
        "SockeyeModel._embed_and_encode": {
            "name": "_embed_and_encode",
            "location": 223,
            "return": [
                "str",
                "utils.CWLObjectType"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "T",
                    "str",
                    "int",
                    "deque"
                ],
                "source_length": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "target": [
                    "int",
                    "\"Sections\"",
                    "\"Prefs\"",
                    "Dict[str, Dict[str, float]]",
                    "Callable"
                ]
            }
        },
        "SockeyeModel.decode_step": {
            "name": "decode_step",
            "location": 249,
            "return": [
                "dict",
                "Dict[str, Any]",
                "int",
                "List[List[int]]"
            ],
            "arguments": {
                "self": [],
                "step_input": [
                    "str",
                    "Sequence[str]",
                    "List[int]",
                    "torch.Tensor"
                ],
                "states": [
                    "str",
                    "Sequence[str]",
                    "List[int]",
                    "torch.Tensor"
                ],
                "vocab_slice_ids": [
                    "torch.LongTensor",
                    "dict",
                    "raiden.utils.BlockIdentifier",
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Tuple[int, int]]"
                ]
            }
        },
        "SockeyeModel.forward": {
            "name": "forward",
            "location": 280,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "int",
                    "raiden.utils.Dict[str, raiden.utils.Any]"
                ],
                "source_length": [
                    "int",
                    "raiden.utils.Dict[str, raiden.utils.Any]"
                ],
                "target": [
                    "int"
                ],
                "target_length": [
                    "Callable"
                ]
            }
        },
        "SockeyeModel.predict_output_length": {
            "name": "predict_output_length",
            "location": 308,
            "return": [
                "List[int]",
                "str",
                "bytes",
                "torch.Tensor"
            ],
            "arguments": {
                "self": [],
                "source_encoded": [
                    "bool",
                    "str",
                    "Optional[List[str]]"
                ],
                "source_encoded_length": [
                    "float",
                    "str",
                    "Dict[str, float]",
                    "List[str]"
                ],
                "constant_length_ratio": [
                    "int",
                    "dict",
                    "str"
                ]
            }
        },
        "SockeyeModel.save_config": {
            "name": "save_config",
            "location": 325,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "folder": [
                    "str",
                    "List[str]",
                    "Optional[int]"
                ]
            }
        },
        "SockeyeModel.load_config": {
            "name": "load_config",
            "location": 336,
            "return": [
                "str",
                "bool",
                "neuromation.api.Config",
                "dict",
                "app.config.HealthCheckConfig",
                "Optional[dict]",
                "Sequence",
                "cmk.utils.type_defs.OptionalConfigSerial"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "SockeyeModel.save_parameters": {
            "name": "save_parameters",
            "location": 347,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "logging.Logger",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "SockeyeModel.load_parameters": {
            "name": "load_parameters",
            "location": 367,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ],
                "device": [
                    "str",
                    "List[Callable]",
                    "Union[str, Dict[str, Any]]",
                    "Optional[object]",
                    "List[str]"
                ],
                "allow_missing": [
                    "str",
                    "bool",
                    "int"
                ],
                "ignore_extra": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "SockeyeModel.set_parameters": {
            "name": "set_parameters",
            "location": 411,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "new_params": [
                    "str",
                    "Iterable[cmk.utils.type_defs.SectionName]"
                ],
                "allow_missing": [
                    "List[int]",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "List[Dict[str, Any]]"
                ],
                "ignore_extra": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "SockeyeModel.save_version": {
            "name": "save_version",
            "location": 438,
            "return": [
                ""
            ],
            "arguments": {
                "folder": [
                    "str",
                    "Optional[int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "SockeyeModel._get_embeddings": {
            "name": "_get_embeddings",
            "location": 448,
            "return": [
                "str",
                "Union[str, int]",
                "Optional[int]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "SockeyeModel.num_source_factors": {
            "name": "num_source_factors",
            "location": 478,
            "return": [
                "str",
                "Dict[str, Dict[str, Any]]",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SockeyeModel.num_target_factors": {
            "name": "num_target_factors",
            "location": 483,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SockeyeModel.target_factor_configs": {
            "name": "target_factor_configs",
            "location": 488,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SockeyeModel.training_max_observed_len_source": {
            "name": "training_max_observed_len_source",
            "location": 496,
            "return": [
                "int",
                "Optional[Union[int, float]]",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SockeyeModel.training_max_observed_len_target": {
            "name": "training_max_observed_len_target",
            "location": 501,
            "return": [
                "int",
                "Optional[Union[int, float]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SockeyeModel.max_supported_len_source": {
            "name": "max_supported_len_source",
            "location": 506,
            "return": [
                "str",
                "raiden.constants.Environment"
            ],
            "arguments": {
                "self": []
            }
        },
        "SockeyeModel.max_supported_len_target": {
            "name": "max_supported_len_target",
            "location": 511,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SockeyeModel.length_ratio_mean": {
            "name": "length_ratio_mean",
            "location": 516,
            "return": [
                "int",
                "Optional[Union[int, float]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SockeyeModel.length_ratio_std": {
            "name": "length_ratio_std",
            "location": 520,
            "return": [
                "int",
                "Optional[Union[int, float]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SockeyeModel.output_layer_vocab_size": {
            "name": "output_layer_vocab_size",
            "location": 524,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "SockeyeModel._cache_wrapper": {
            "name": "_cache_wrapper",
            "location": 527,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "class_func": [
                    "str",
                    "UnicodeError",
                    "List[str]",
                    "type"
                ]
            }
        },
        "_DecodeStep.__init__": {
            "name": "__init__",
            "location": 542,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "embedding_target": [
                    "int",
                    "str",
                    "List[str]",
                    "Mapping[str, Any]"
                ],
                "decoder": [
                    "int",
                    "str",
                    "List[str]",
                    "Mapping[str, Any]"
                ],
                "output_layer": [
                    "int",
                    "str",
                    "Union[Iterable[str], str]"
                ],
                "factor_output_layers": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "_DecodeStep.forward": {
            "name": "forward",
            "location": 554,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "step_input": [
                    "str",
                    "Sequence[str]",
                    "List[int]",
                    "torch.Tensor"
                ],
                "states": [
                    "int",
                    "bool",
                    "Set[Tuple[str, ...]]",
                    "float"
                ],
                "vocab_slice_ids": [
                    "int",
                    "bytes",
                    "Optional[bytes]",
                    "dict"
                ]
            }
        },
        "SockeyeModel._cache_wrapper.cache_func": {
            "name": "cache_func",
            "location": 529,
            "return": [
                "BaseException"
            ],
            "arguments": {}
        }
    },
    "sockeye-main/sockeye/nvs.py": {
        "NeuralVocabSelection.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "model_size": [
                    "int",
                    "bool"
                ],
                "vocab_target_size": [
                    "int",
                    "Optional[int]",
                    "str",
                    "Union[str, int, float]"
                ],
                "model_type": [
                    "int",
                    "List[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "NeuralVocabSelection.forward": {
            "name": "forward",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "source_encoded": [
                    "int",
                    "List[Tuple[int, int]]"
                ],
                "source_length": [
                    "int",
                    "bool",
                    "dict"
                ],
                "att_mask": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        }
    },
    "sockeye-main/sockeye/optimizers.py": {
        "get_optimizer": {
            "name": "get_optimizer",
            "location": 50,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "model": [
                    "Dict[str, Any]",
                    "pyramid.config.Configurator",
                    "dict",
                    "torch.nn.Module"
                ],
                "config": [
                    "dict",
                    "cbc_casper_simulator.simulator.config.Config",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "sockeye-main/sockeye/output_handler.py": {
        "get_output_handler": {
            "name": "get_output_handler",
            "location": 25,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "bytes"
            ],
            "arguments": {
                "output_type": [
                    "str",
                    "int"
                ],
                "output_fname": [
                    "str",
                    "Optional[List[\"Address\"]]",
                    "raiden.utils.Address",
                    "Mapping"
                ]
            }
        },
        "OutputHandler.handle": {
            "name": "handle",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "t_input": [
                    "float",
                    "inference.TranslatorInput"
                ],
                "t_output": [
                    "float",
                    "inference.TranslatorInput"
                ],
                "t_walltime": [
                    "float",
                    "inference.TranslatorInput"
                ]
            }
        },
        "OutputHandler.reports_score": {
            "name": "reports_score",
            "location": 71,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringOutputHandler.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "StringOutputHandler.handle": {
            "name": "handle",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "t_input": [
                    "float",
                    "inference.TranslatorInput"
                ],
                "t_output": [
                    "inference.TranslatorOutput",
                    "inference.TranslatorInput",
                    "float"
                ],
                "t_walltime": [
                    "float",
                    "inference.TranslatorInput"
                ]
            }
        },
        "StringOutputHandler.reports_score": {
            "name": "reports_score",
            "location": 100,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringWithScoreOutputHandler.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "StringWithScoreOutputHandler.handle": {
            "name": "handle",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "t_input": [
                    "float",
                    "inference.TranslatorInput"
                ],
                "t_output": [
                    "inference.TranslatorOutput",
                    "inference.TranslatorInput",
                    "float"
                ],
                "t_walltime": [
                    "float",
                    "inference.TranslatorInput"
                ]
            }
        },
        "StringWithScoreOutputHandler.reports_score": {
            "name": "reports_score",
            "location": 126,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScoreOutputHandler.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ScoreOutputHandler.handle": {
            "name": "handle",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "t_input": [
                    "float",
                    "inference.TranslatorInput"
                ],
                "t_output": [
                    "inference.TranslatorOutput",
                    "inference.TranslatorInput",
                    "float"
                ],
                "t_walltime": [
                    "float",
                    "inference.TranslatorInput"
                ]
            }
        },
        "ScoreOutputHandler.reports_score": {
            "name": "reports_score",
            "location": 155,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PairWithScoreOutputHandler.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "PairWithScoreOutputHandler.handle": {
            "name": "handle",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "t_input": [
                    "inference.TranslatorOutput",
                    "inference.TranslatorInput",
                    "float"
                ],
                "t_output": [
                    "inference.TranslatorOutput",
                    "inference.TranslatorInput",
                    "float"
                ],
                "t_walltime": [
                    "float",
                    "inference.TranslatorInput"
                ]
            }
        },
        "PairWithScoreOutputHandler.reports_score": {
            "name": "reports_score",
            "location": 182,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BenchmarkOutputHandler.handle": {
            "name": "handle",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "t_input": [
                    "inference.TranslatorOutput",
                    "inference.TranslatorInput",
                    "float"
                ],
                "t_output": [
                    "inference.TranslatorOutput",
                    "inference.TranslatorInput",
                    "float"
                ],
                "t_walltime": [
                    "inference.TranslatorOutput",
                    "inference.TranslatorInput",
                    "float"
                ]
            }
        },
        "BenchmarkOutputHandler.reports_score": {
            "name": "reports_score",
            "location": 208,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "JSONOutputHandler.__init__": {
            "name": "__init__",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "JSONOutputHandler.handle": {
            "name": "handle",
            "location": 221,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "t_input": [
                    "float",
                    "inference.TranslatorInput"
                ],
                "t_output": [
                    "inference.TranslatorOutput",
                    "float",
                    "inference.TranslatorInput"
                ],
                "t_walltime": [
                    "float",
                    "inference.TranslatorInput"
                ]
            }
        },
        "JSONOutputHandler.reports_score": {
            "name": "reports_score",
            "location": 231,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FactoredStringOutputHandler.__init__": {
            "name": "__init__",
            "location": 241,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "FactoredStringOutputHandler.handle": {
            "name": "handle",
            "location": 244,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "t_input": [
                    "float",
                    "inference.TranslatorInput"
                ],
                "t_output": [
                    "inference.TranslatorOutput",
                    "inference.TranslatorInput",
                    "float"
                ],
                "t_walltime": [
                    "float",
                    "inference.TranslatorInput"
                ]
            }
        },
        "FactoredStringOutputHandler.reports_score": {
            "name": "reports_score",
            "location": 257,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sockeye-main/sockeye/prepare_data.py": {
        "main": {
            "name": "main",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "prepare_data": {
            "name": "prepare_data",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "sockeye-main/sockeye/rerank.py": {
        "rerank": {
            "name": "rerank",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Reranker.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metric": [
                    "str"
                ],
                "isometric_alpha": [
                    "str",
                    "bool",
                    "int",
                    "float",
                    "Optional[Callable[[Any], None]]"
                ],
                "return_score": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "Reranker.rerank": {
            "name": "rerank",
            "location": 69,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "hypotheses": [
                    "float",
                    "Iterable[str]",
                    "int"
                ],
                "reference": [
                    "Iterable[str]",
                    "float",
                    "list"
                ]
            }
        },
        "Reranker._get_ranking_indices": {
            "name": "_get_ranking_indices",
            "location": 100,
            "return": [
                "List[Dict]",
                "bytes",
                "List[int]",
                "Union[str, List[Any]]",
                "list",
                "List[List[Any]]",
                "Tuple[int]",
                "List[str]"
            ],
            "arguments": {
                "scores": [
                    "bytes",
                    "str"
                ],
                "kind": [
                    "bytes",
                    "str"
                ],
                "order": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "Reranker._sort_by_ranking": {
            "name": "_sort_by_ranking",
            "location": 107,
            "return": [
                "Mapping",
                "Dict[str, str]",
                "Dict[str, Any]",
                "Dict[str, List[Any]]",
                "Dict[str, float]"
            ],
            "arguments": {
                "hypotheses": [
                    "Dict[str, Any]",
                    "dict",
                    "Callable"
                ],
                "ranking": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Reranker._sort_by_ranking.ranksort": {
            "name": "ranksort",
            "location": 108,
            "return": [
                "List[str]",
                "Optional[Iterable[str]]",
                "bool",
                "Tuple[str]"
            ],
            "arguments": {
                "l": [
                    "numpy.ndarray",
                    "mode.utils.Deque[T]",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "sockeye-main/sockeye/score.py": {
        "main": {
            "name": "main",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "score": {
            "name": "score",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "sockeye-main/sockeye/scoring.py": {
        "BatchScorer.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scorer": [
                    "bool",
                    "int",
                    "List[float]",
                    "List[str]"
                ],
                "score_type": [
                    "str",
                    "bool"
                ],
                "constant_length_ratio": [
                    "bool",
                    "int",
                    "List[float]",
                    "List[str]"
                ],
                "softmax_temperature": [
                    "Optional[str]",
                    "Optional[T]",
                    "Optional[Sequence[Any]]",
                    "Iterable[T]",
                    "Optional[List[Any]]",
                    "Optional[Any]"
                ]
            }
        },
        "BatchScorer.forward": {
            "name": "forward",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "logits": [
                    "bool",
                    "Sequence[int]",
                    "List[float]"
                ],
                "labels": [
                    "int",
                    "numpy.ndarray",
                    "str"
                ],
                "length_ratio": [
                    "int",
                    "Optional[int]",
                    "torch.LongTensor",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray",
                    "List[List[int]]",
                    "List[Tuple[int, int]]"
                ],
                "source_length": [
                    "int",
                    "Dict[str, torch.Tensor]",
                    "numpy.ndarray",
                    "torch.nn.modules.linear.Linear"
                ],
                "target_length": [
                    "List[bool]",
                    "str",
                    "torch.Tensor"
                ],
                "factor_logits_and_labels": [
                    "int",
                    "bytes",
                    "Callable",
                    "List['cirq.Circuit']"
                ]
            }
        },
        "Scorer.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "int",
                    "bool",
                    "numpy.ndarray",
                    "float",
                    "str"
                ],
                "batch_scorer": [
                    "int",
                    "str",
                    "bool",
                    "numpy.array"
                ],
                "source_vocabs": [
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "data_io.DataConfig",
                    "str"
                ],
                "target_vocabs": [
                    "str",
                    "bool",
                    "torch.Tensor",
                    "Optional[int]"
                ],
                "device": [
                    "int",
                    "str",
                    "bool",
                    "numpy.array"
                ]
            }
        },
        "Scorer.score_batch": {
            "name": "score_batch",
            "location": 122,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "gluonts.model.common.Tensor",
                    "int"
                ]
            }
        },
        "Scorer.score": {
            "name": "score",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "score_iter": [
                    "data_io.BaseParallelSampleIter",
                    "str",
                    "numpy.ndarray",
                    "float",
                    "bool",
                    "bytes"
                ],
                "output_handler": [
                    "Exception"
                ]
            }
        }
    },
    "sockeye-main/sockeye/test_utils.py": {
        "generate_digits_file": {
            "name": "generate_digits_file",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "source_path": [
                    "str",
                    "TextIO",
                    "BinaryIO",
                    "int",
                    "Optional[bool]"
                ],
                "target_path": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "line_count": [
                    "int",
                    "List[str]"
                ],
                "line_length": [
                    "int",
                    "Set[int]",
                    "str",
                    "tuple"
                ],
                "sort_target": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "line_count_empty": [
                    "int",
                    "str"
                ],
                "seed": [
                    "int",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "generate_json_input_file_with_tgt_prefix": {
            "name": "generate_json_input_file_with_tgt_prefix",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "src_path": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "List[str]"
                ],
                "tgt_path": [
                    "bool",
                    "List[str]"
                ],
                "json_file_with_tgt_prefix_path": [
                    "str",
                    "Pattern[str]",
                    "Dict[str, str]"
                ],
                "src_factors_path": [
                    "Optional[str]",
                    "Optional[TextIO]",
                    "str",
                    "Union[str, bool]"
                ],
                "tgt_factors_path": [
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "seed": [
                    "int",
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "generate_low_high_factors": {
            "name": "generate_low_high_factors",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "input_path": [
                    "str"
                ],
                "output_path": [
                    "str",
                    "Optional[Tuple[str, ...]]",
                    "Optional[bool]",
                    "List[str]"
                ]
            }
        },
        "generate_odd_even_factors": {
            "name": "generate_odd_even_factors",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "input_path": [
                    "str"
                ],
                "output_path": [
                    "str",
                    "Optional[Tuple[str, ...]]",
                    "Optional[bool]",
                    "List[str]"
                ]
            }
        },
        "generate_fast_align_lex": {
            "name": "generate_fast_align_lex",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "lex_path": [
                    "str"
                ]
            }
        },
        "tmp_digits_dataset": {
            "name": "tmp_digits_dataset",
            "location": 142,
            "return": [
                "typing.Dict[builtins.str, typing.Any]"
            ],
            "arguments": {
                "prefix": [
                    "str"
                ],
                "train_line_count": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Union['Context', int]"
                ],
                "train_line_count_empty": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Union['Context', int]"
                ],
                "train_max_length": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Union['Context', int]"
                ],
                "dev_line_count": [
                    "int"
                ],
                "dev_max_length": [
                    "int"
                ],
                "test_line_count": [
                    "int",
                    "Union['Context', int]",
                    "bool",
                    "Optional[int]",
                    "float"
                ],
                "test_line_count_empty": [
                    "int",
                    "Union['Context', int]",
                    "bool",
                    "Optional[int]",
                    "float"
                ],
                "test_max_length": [
                    "int",
                    "Union['Context', int]",
                    "bool",
                    "Optional[int]",
                    "float"
                ],
                "sort_target": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Union['Context', int]"
                ],
                "seed_train": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Union['Context', int]"
                ],
                "seed_dev": [
                    "int"
                ],
                "with_n_source_factors": [
                    "str",
                    "bool"
                ],
                "with_n_target_factors": [
                    "int",
                    "Set[str]",
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "run_train_translate": {
            "name": "run_train_translate",
            "location": 246,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[int, Tuple[int, int]]"
            ],
            "arguments": {
                "train_params": [
                    "str",
                    "dict",
                    "int",
                    "Dict[str, Any]"
                ],
                "translate_params": [
                    "dict",
                    "int",
                    "str",
                    "Tuple[int, int]",
                    "Dict[str, Any]"
                ],
                "data": [
                    "str",
                    "int",
                    "dict",
                    "Dict[str, List[str]]"
                ],
                "use_prepared_data": [
                    "bool",
                    "Optional[bytes]",
                    "str",
                    "int"
                ],
                "max_seq_len": [
                    "int",
                    "str"
                ],
                "seed": [
                    "int",
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "run_translate_restrict": {
            "name": "run_translate_restrict",
            "location": 389,
            "return": [
                "str",
                "Dict[str, Any]",
                "Dict[int, Tuple[int, int]]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "Iterable[str]",
                    "Dict[str, str]"
                ],
                "translate_params": [
                    "str",
                    "bytes",
                    "Dict[str, str]",
                    "dict",
                    "Optional[Any]",
                    "Union[Mapping, str]"
                ]
            }
        },
        "collect_translate_output_and_scores": {
            "name": "collect_translate_output_and_scores",
            "location": 431,
            "return": [
                "List[int]",
                "str",
                "int"
            ],
            "arguments": {
                "out_path": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        }
    },
    "sockeye-main/sockeye/train.py": {
        "none_if_negative": {
            "name": "none_if_negative",
            "location": 56,
            "return": [
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "val": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "_list_to_tuple": {
            "name": "_list_to_tuple",
            "location": 60,
            "return": [
                "Mapping",
                "Tuple[float, float, float, float]",
                "Optional[Callable]",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "v": [
                    "List[str]",
                    "str",
                    "Type[Any]",
                    "bool"
                ]
            }
        },
        "_dict_difference": {
            "name": "_dict_difference",
            "location": 67,
            "return": [
                "str",
                "Mapping[str, Any]",
                "Tuple[int, int, int]",
                "bool",
                "Dict[str, Any]",
                "List[Dict]"
            ],
            "arguments": {
                "dict1": [
                    "dict",
                    "Dict[str, Any]",
                    "List[\"libkol.types.ItemQuantity\"]",
                    "Dict[str, bytes]",
                    "Dict[str, str]",
                    "Mapping[str, utils.mssql_counters.Section]",
                    "Dict[str, bool]"
                ],
                "dict2": [
                    "dict",
                    "Dict[str, object]",
                    "Dict[str, Any]",
                    "Mapping[str, utils.mssql_counters.Section]",
                    "str"
                ]
            }
        },
        "check_arg_compatibility": {
            "name": "check_arg_compatibility",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        },
        "check_resume": {
            "name": "check_resume",
            "location": 135,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "args": [],
                "output_folder": [
                    "str",
                    "model.objects.BenchmarkStatistics"
                ]
            }
        },
        "create_checkpoint_decoder": {
            "name": "create_checkpoint_decoder",
            "location": 183,
            "return": [
                "Optional[bool]",
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "args": [],
                "device": [
                    "bool",
                    "Callable",
                    "str",
                    "dict",
                    "argparse.Namespace"
                ],
                "sockeye_model": [
                    "bool",
                    "Callable",
                    "str",
                    "dict",
                    "argparse.Namespace"
                ],
                "source_vocabs": [
                    "bool",
                    "Callable",
                    "str",
                    "dict",
                    "argparse.Namespace"
                ],
                "target_vocabs": [
                    "bool",
                    "Callable",
                    "str",
                    "dict",
                    "argparse.Namespace"
                ]
            }
        },
        "use_shared_vocab": {
            "name": "use_shared_vocab",
            "location": 222,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "args": []
            }
        },
        "create_data_iters_and_vocabs": {
            "name": "create_data_iters_and_vocabs",
            "location": 238,
            "return": [
                "str",
                "bool",
                "Dict[str, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "args": [],
                "max_seq_len_source": [
                    "raiden.tests.fuzz.utils.SendSecretRevealInNode"
                ],
                "max_seq_len_target": [
                    "raiden.tests.fuzz.utils.SendSecretRevealInNode"
                ],
                "shared_vocab": [
                    "vocab.Vocab",
                    "str",
                    "torch.device",
                    "int",
                    "Mapping[str, str]"
                ],
                "resume_training": [
                    "bool",
                    "List[str]",
                    "List[dict]",
                    "str",
                    "Optional[int]",
                    "Optional[constants.AgeClass]",
                    "Container[\"Taxon\"]"
                ],
                "output_folder": [
                    "str",
                    "List[int]",
                    "bytes"
                ]
            }
        },
        "create_encoder_config": {
            "name": "create_encoder_config",
            "location": 410,
            "return": [
                "cmk.utils.type_defs.OptionalConfigSerial",
                "_vendor.traitlets.config.Config",
                "argparse.Namespace",
                "Dict[str, Any]",
                "cerise.config.Config",
                "neuromation.api.Config"
            ],
            "arguments": {
                "args": [],
                "max_seq_len_source": [
                    "str",
                    "int",
                    "float"
                ],
                "max_seq_len_target": [
                    "str",
                    "int",
                    "float"
                ],
                "num_embed_source": [
                    "int"
                ]
            }
        },
        "create_decoder_config": {
            "name": "create_decoder_config",
            "location": 461,
            "return": [
                "Optional[dict]",
                "dict",
                "str",
                "neuromation.api.Config",
                "app.config.HealthCheckConfig",
                "cmk.utils.type_defs.OptionalConfigSerial",
                "Sequence"
            ],
            "arguments": {
                "args": [],
                "encoder_num_hidden": [
                    "bool",
                    "str",
                    "int",
                    "Optional[List[Any]]",
                    "Dict[int, str]",
                    "Dict[str, Tuple[str, int, int]]",
                    "Dict[str, Tuple[str, str, Any]]"
                ],
                "max_seq_len_source": [
                    "bool",
                    "str",
                    "int",
                    "Optional[List[Any]]",
                    "Dict[int, str]",
                    "Dict[str, Tuple[str, int, int]]",
                    "Dict[str, Tuple[str, str, Any]]"
                ],
                "max_seq_len_target": [
                    "bool",
                    "str",
                    "int",
                    "Optional[List[Any]]",
                    "Dict[int, str]",
                    "Dict[str, Tuple[str, int, int]]",
                    "Dict[str, Tuple[str, str, Any]]"
                ],
                "num_embed_target": [
                    "int",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "get_num_embed": {
            "name": "get_num_embed",
            "location": 513,
            "return": [
                "str",
                "dict",
                "Pattern",
                "Dict[str, Any]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "args": []
            }
        },
        "create_model_config": {
            "name": "create_model_config",
            "location": 579,
            "return": [
                "dict",
                "Optional[dict]",
                "Config",
                "Dict[str, Any]",
                "Sequence"
            ],
            "arguments": {
                "args": [],
                "source_vocab_sizes": [
                    "int"
                ],
                "target_vocab_sizes": [
                    "int",
                    "Tuple[int, int]",
                    "str"
                ],
                "max_seq_len_source": [
                    "float",
                    "List[str]",
                    "int",
                    "Callable[..., str]",
                    "bool"
                ],
                "max_seq_len_target": [
                    "float",
                    "List[str]",
                    "int",
                    "Callable[..., str]",
                    "bool"
                ],
                "config_data": [
                    "str",
                    "bool",
                    "int",
                    "tuple",
                    "dict"
                ]
            }
        },
        "create_losses": {
            "name": "create_losses",
            "location": 688,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "args": [],
                "all_num_classes": [
                    "Set[str]",
                    "Callable",
                    "tuple",
                    "bool",
                    "Callable[..., T]"
                ]
            }
        },
        "create_optimizer_config": {
            "name": "create_optimizer_config",
            "location": 743,
            "return": [
                "Optional[dict]",
                "dict",
                "str",
                "neuromation.api.Config",
                "app.config.HealthCheckConfig",
                "cmk.utils.type_defs.OptionalConfigSerial",
                "Sequence"
            ],
            "arguments": {
                "args": []
            }
        },
        "unset_requires_grad_for_fixed_params": {
            "name": "unset_requires_grad_for_fixed_params",
            "location": 786,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "dict",
                    "str",
                    "pyramid.config.Configurator",
                    "entity_embeddings.Config",
                    "zaimcsvconverter.config.SFCardViewerConfig"
                ],
                "params": [
                    "str",
                    "dict",
                    "int",
                    "isorsettings.Config",
                    "Optional[str]"
                ],
                "fixed_param_names": [
                    "str",
                    "dict",
                    "int"
                ],
                "fixed_param_strategy": [
                    "str",
                    "NamedTuple",
                    "Config"
                ]
            }
        },
        "fixed_param_names_from_strategy": {
            "name": "fixed_param_names_from_strategy",
            "location": 807,
            "return": [
                "List[str]",
                "Iterable[str]",
                "List[Tuple[str, Any]]",
                "bool",
                "str"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "_pytesconfig.Config",
                    "str",
                    "Mapping[str, Any]",
                    "Config",
                    "Dict[str, Any]"
                ],
                "params": [
                    "str",
                    "Config",
                    "type",
                    "argparse.Namespace",
                    "MutableMapping[str, str]",
                    "Dict[str, Any]",
                    "dict",
                    "Union[Dict, List]"
                ],
                "strategy": [
                    "dict",
                    "_pytesconfig.Config",
                    "str",
                    "Mapping[str, Any]",
                    "Config",
                    "Dict[str, Any]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 854,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "train": {
            "name": "train",
            "location": 862,
            "return": [
                "Callable"
            ],
            "arguments": {
                "args": [],
                "custom_metrics_logger": [
                    "cmk.utils.type_defs.HostName"
                ],
                "checkpoint_callback": [
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "fixed_param_names_from_strategy.is_fixed": {
            "name": "is_fixed",
            "location": 818,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "sockeye-main/sockeye/training.py": {
        "safe_custom_metrics_logger": {
            "name": "safe_custom_metrics_logger",
            "location": 869,
            "return": [
                "int",
                "Union[tuple, list]",
                "List[int]",
                "Union[int, slice]"
            ],
            "arguments": {
                "logging_function": [
                    "Callable",
                    "Callable[..., T]",
                    "Optional[Any]",
                    "Optional[Tuple[int, int]]",
                    "Optional[int]",
                    "Optional[checkpoint_decoder.CheckpointDecoder]"
                ],
                "metrics": [
                    "dict",
                    "int",
                    "IO[str]",
                    "str",
                    "T"
                ],
                "global_step": [
                    "dict",
                    "int",
                    "IO[str]",
                    "str",
                    "T"
                ]
            }
        },
        "cleanup_params_files": {
            "name": "cleanup_params_files",
            "location": 887,
            "return": [
                "Iterator[object]",
                "str",
                "bool",
                "Tuple[int, str]",
                "List[str]"
            ],
            "arguments": {
                "output_folder": [
                    "str"
                ],
                "max_to_keep": [
                    "int",
                    "bool"
                ],
                "checkpoint": [
                    "int",
                    "bool"
                ],
                "best_checkpoint": [
                    "int",
                    "numpy.ndarray",
                    "bool",
                    "float",
                    "Optional[int]"
                ],
                "keep_first": [
                    "int",
                    "bool"
                ],
                "max_params_files_to_cache": [
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "Optional[bytes]",
                    "List[int]",
                    "int"
                ],
                "cache_metric": [
                    "str",
                    "bool"
                ],
                "cache_strategy": [
                    "str",
                    "bytes",
                    "int",
                    "Tuple[int]",
                    "numpy.ndarray",
                    "Union[bytes, bytearray]"
                ]
            }
        },
        "TrainState.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "early_stopping_metric": [
                    "float",
                    "Optional[cirq.google.optimizers.GateTabulation]",
                    "str",
                    "List[torch.Tensor]",
                    "numpy.ndarray"
                ]
            }
        },
        "TrainState.save": {
            "name": "save",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str",
                    "Dict[str, str]",
                    "bool",
                    "int"
                ]
            }
        },
        "TrainState.load": {
            "name": "load",
            "location": 119,
            "return": [
                "int",
                "raiden.utils.List[raiden.utils.Tuple[str, raiden.utils.Any]]",
                "bool",
                "bytes"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "bool"
                ]
            }
        },
        "TrainState.update_time_elapsed": {
            "name": "update_time_elapsed",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainState.time_elapsed": {
            "name": "time_elapsed",
            "location": 135,
            "return": [
                "str",
                "int",
                "float",
                "numpy.ndarray",
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainState.__getstate__": {
            "name": "__getstate__",
            "location": 138,
            "return": [
                "Set[str]",
                "Dict[str, str]",
                "List[str]",
                "Dict[int, Dict[int, Any]]",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainState.__setstate__": {
            "name": "__setstate__",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "EarlyStoppingTrainer.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "Callable",
                    "config.Config",
                    "Dict[str, str]",
                    "str"
                ],
                "optimizer_config": [
                    "bool",
                    "Callable",
                    "str"
                ],
                "sockeye_model": [
                    "str",
                    "dict",
                    "bool",
                    "cmk.utils.type_defs.HostAddress"
                ],
                "training_model": [
                    "str",
                    "dict",
                    "bool",
                    "cmk.utils.type_defs.HostAddress"
                ],
                "optimizer": [
                    "str",
                    "dict",
                    "bool",
                    "cmk.utils.type_defs.HostAddress"
                ],
                "zero_grad_kwargs": [
                    "str",
                    "dict",
                    "bool",
                    "cmk.utils.type_defs.HostAddress"
                ],
                "loss_functions": [
                    "str",
                    "dict",
                    "bool",
                    "cmk.utils.type_defs.HostAddress"
                ],
                "device": [
                    "str",
                    "dict",
                    "bool",
                    "cmk.utils.type_defs.HostAddress"
                ],
                "using_amp": [
                    "bool"
                ],
                "using_apex_amp": [
                    "bool",
                    "Optional[bool]"
                ],
                "custom_metrics_logger": [
                    "Dict[str, Any]",
                    "int",
                    "List['ValidatorRecord']",
                    "caladrius.model.topology.heron.queueing_theory.QTTopologyModel",
                    "str"
                ],
                "checkpoint_callback": [
                    "str",
                    "dict",
                    "bool",
                    "cmk.utils.type_defs.HostAddress"
                ]
            }
        },
        "EarlyStoppingTrainer.fit": {
            "name": "fit",
            "location": 179,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "train_iter": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "numpy.ndarray"
                ],
                "validation_iter": [
                    "bool",
                    "str"
                ],
                "checkpoint_decoder": [
                    "Optional[\"AbstractPurpose\"]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "EarlyStoppingTrainer._create_checkpoint": {
            "name": "_create_checkpoint",
            "location": 272,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "checkpoint_decoder": [
                    "str",
                    "int"
                ],
                "time_cost": [
                    "bool",
                    "set",
                    "routemaster.config.State",
                    "routemaster.config.StateMachine",
                    "dict",
                    "int",
                    "Config"
                ],
                "train_iter": [
                    "float",
                    "int",
                    "numpy.ndarray"
                ],
                "validation_iter": [
                    "str",
                    "int"
                ]
            }
        },
        "EarlyStoppingTrainer._forward_backward": {
            "name": "_forward_backward",
            "location": 308,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "bool",
                    "Callable[..., Awaitable]",
                    "golem.model.RequestedSubtask"
                ],
                "is_update_batch": [
                    "numpy.ndarray",
                    "float",
                    "int",
                    "tuple"
                ]
            }
        },
        "EarlyStoppingTrainer._step": {
            "name": "_step",
            "location": 340,
            "return": [
                "str",
                "List[List[str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "batch": [
                    "str",
                    "numpy.ndarray",
                    "int",
                    "Callable"
                ]
            }
        },
        "EarlyStoppingTrainer._evaluate": {
            "name": "_evaluate",
            "location": 388,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "checkpoint": [
                    "str",
                    "int",
                    "Optional[Dict]",
                    "bool"
                ],
                "data_iter": [
                    "list",
                    "Union[Sequence[int], Sequence[dict]]",
                    "Callable",
                    "Dict[str, Any]",
                    "dict",
                    "Optional[bytes]"
                ],
                "checkpoint_decoder": [
                    "bool",
                    "Union[float, int]",
                    "Optional[object]"
                ]
            }
        },
        "EarlyStoppingTrainer._determine_improvement": {
            "name": "_determine_improvement",
            "location": 436,
            "return": [
                "str",
                "bytes",
                "dict",
                "int",
                "raiden.utils.Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "val_metrics": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "EarlyStoppingTrainer._determine_convergence": {
            "name": "_determine_convergence",
            "location": 482,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EarlyStoppingTrainer._determine_divergence": {
            "name": "_determine_divergence",
            "location": 526,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "val_metrics": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "EarlyStoppingTrainer._adjust_learning_rate": {
            "name": "_adjust_learning_rate",
            "location": 542,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "has_improved": [
                    "hackathon.utils.utils.DataMessage",
                    "int",
                    "str"
                ]
            }
        },
        "EarlyStoppingTrainer._write_and_log_metrics": {
            "name": "_write_and_log_metrics",
            "location": 563,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "train_metrics": [
                    "List[str]",
                    "bool",
                    "AbstractSet[str]",
                    "Callable",
                    "int",
                    "str"
                ],
                "val_metrics": [
                    "List[str]",
                    "bool",
                    "AbstractSet[str]",
                    "Callable",
                    "int",
                    "str"
                ]
            }
        },
        "EarlyStoppingTrainer._update_best_params": {
            "name": "_update_best_params",
            "location": 591,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EarlyStoppingTrainer._save_params": {
            "name": "_save_params",
            "location": 601,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EarlyStoppingTrainer._save_optimizer_state": {
            "name": "_save_optimizer_state",
            "location": 611,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str",
                    "bool"
                ]
            }
        },
        "EarlyStoppingTrainer._load_optimizer_state": {
            "name": "_load_optimizer_state",
            "location": 615,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "Dict[str, List[str]]",
                    "int",
                    "str",
                    "backup.config.Config",
                    "pricemonitor.config.Coin",
                    "Dict[str, Any]"
                ]
            }
        },
        "EarlyStoppingTrainer._save_lr_scheduler": {
            "name": "_save_lr_scheduler",
            "location": 619,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "int",
                    "str",
                    "bool",
                    "metrics_backend.utils.Address"
                ]
            }
        },
        "EarlyStoppingTrainer._load_lr_scheduler": {
            "name": "_load_lr_scheduler",
            "location": 625,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fname": [
                    "str",
                    "Optional[str]",
                    "model.Snapshot"
                ]
            }
        },
        "EarlyStoppingTrainer._save_training_state": {
            "name": "_save_training_state",
            "location": 631,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "train_iter": [
                    "data_io.BaseParallelSampleIter",
                    "Type",
                    "str"
                ]
            }
        },
        "EarlyStoppingTrainer._load_training_state": {
            "name": "_load_training_state",
            "location": 691,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "train_iter": [
                    "data_io.BaseParallelSampleIter"
                ]
            }
        },
        "EarlyStoppingTrainer._cleanup": {
            "name": "_cleanup",
            "location": 733,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "keep_training_state": [
                    "BaseException"
                ]
            }
        },
        "EarlyStoppingTrainer.metrics_fname": {
            "name": "metrics_fname",
            "location": 751,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EarlyStoppingTrainer.current_params_fname": {
            "name": "current_params_fname",
            "location": 755,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EarlyStoppingTrainer.best_params_fname": {
            "name": "best_params_fname",
            "location": 759,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EarlyStoppingTrainer.training_state_dirname": {
            "name": "training_state_dirname",
            "location": 763,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "EarlyStoppingTrainer.best_optimizer_state_fname": {
            "name": "best_optimizer_state_fname",
            "location": 767,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "EarlyStoppingTrainer.best_lr_scheduler_fname": {
            "name": "best_lr_scheduler_fname",
            "location": 771,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TensorboardLogger.__init__": {
            "name": "__init__",
            "location": 785,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logdir": [
                    "str",
                    "list",
                    "Optional[Callable[[Any], None]]"
                ],
                "source_vocab": [
                    "Optional[Dict]",
                    "Optional[vocab.Vocab]",
                    "List[vocab.Vocab]",
                    "str"
                ],
                "target_vocab": [
                    "raiden.tests.fuzz.utils.SendSecretRequestInNode"
                ]
            }
        },
        "TensorboardLogger.log_metrics": {
            "name": "log_metrics",
            "location": 800,
            "return": [
                "Generator[Tuple[int, Any], None, None]",
                "Iterator[Dict[str, Any]]",
                "Generator",
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "metrics": [
                    "Dict[str, Any]",
                    "Dict[str, float]",
                    "Dict[int, int]",
                    "Dict[int, float]",
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, object]"
                ],
                "checkpoint": [
                    "int",
                    "str",
                    "torch.Tensor",
                    "Optional[torch.Tensor]",
                    "Dict[str, torch.Tensor]",
                    "Collection[T]"
                ]
            }
        },
        "Speedometer.__init__": {
            "name": "__init__",
            "location": 822,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frequency": [
                    "int",
                    "bool",
                    "float"
                ],
                "auto_reset": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Speedometer.__call__": {
            "name": "__call__",
            "location": 832,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "epoch": [
                    "int",
                    "numpy.ndarray",
                    "Optional[int]",
                    "bool",
                    "Union[int, Tuple[int, int]]"
                ],
                "batches": [
                    "bytes",
                    "bool",
                    "int",
                    "List[str]"
                ],
                "updates": [
                    "bool",
                    "torch.Tensor",
                    "Tuple[int, int]",
                    "int",
                    "Iterable[List[str]]"
                ],
                "samples": [
                    "bool",
                    "torch.Tensor",
                    "Tuple[int, int]",
                    "int",
                    "Iterable[List[str]]"
                ],
                "tokens": [
                    "Dict[int, int]",
                    "dict",
                    "bytes",
                    "Tuple['cirq.Qid']"
                ],
                "metrics": [
                    "Optional[int]",
                    "tuple",
                    "Optional[bool]",
                    "Optional[numpy.ndarray]",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "float",
                    "int"
                ]
            }
        }
    },
    "sockeye-main/sockeye/transformer.py": {
        "TransformerEncoderBlock.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "pyramid.config.Configurator",
                    "tracim.config.CFG",
                    "Dict[str, Any]",
                    "cmk.base.config.ConfigCache"
                ],
                "inference_only": []
            }
        },
        "TransformerEncoderBlock.forward": {
            "name": "forward",
            "location": 82,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, torch.Tensor]",
                    "str",
                    "int"
                ],
                "att_mask": [
                    "Optional[torch.Tensor]",
                    "Optional[int]"
                ]
            }
        },
        "TransformerDecoderBlock.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "inference_only": [
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "TransformerDecoderBlock.num_state_tensors": {
            "name": "num_state_tensors",
            "location": 166,
            "return": [
                "int",
                "cmk.gui.config.LoggedInUser"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformerDecoderBlock.needs_mask": {
            "name": "needs_mask",
            "location": 171,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransformerDecoderBlock.get_states_shape": {
            "name": "get_states_shape",
            "location": 175,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "str",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "TransformerDecoderBlock.forward": {
            "name": "forward",
            "location": 182,
            "return": [
                "List[List[str]]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int",
                    "bool",
                    "str",
                    "List[int]"
                ],
                "target_mask": [
                    "int",
                    "bool",
                    "str",
                    "List[int]"
                ],
                "source": [
                    "str",
                    "bool"
                ],
                "source_mask": [
                    "str",
                    "bool"
                ],
                "autoregr_states": [
                    "int",
                    "bool",
                    "str",
                    "List[int]"
                ],
                "enc_att_kv": [
                    "str",
                    "bool"
                ]
            }
        },
        "TransformerProcessBlock.__init__": {
            "name": "__init__",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sequence": [
                    "int",
                    "Dict[str, Any]",
                    "float",
                    "bytes"
                ],
                "dropout": [
                    "int",
                    "Dict[str, Any]",
                    "float",
                    "bytes"
                ],
                "num_hidden": [
                    "int",
                    "Optional[torch.device]",
                    "float"
                ]
            }
        },
        "TransformerProcessBlock.forward": {
            "name": "forward",
            "location": 237,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "dict",
                "torch.LongTensor"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "List[Dict[str, Any]]",
                    "Optional[torch.Tensor]",
                    "bytes",
                    "bytearray"
                ],
                "prev": [
                    "Union[None, int, str]",
                    "bytes",
                    "int"
                ]
            }
        },
        "TransformerFeedForward.__init__": {
            "name": "__init__",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_hidden": [
                    "int",
                    "float",
                    "Optional[int]"
                ],
                "num_model": [
                    "int",
                    "float",
                    "Optional[int]"
                ],
                "act_type": [
                    "Tuple[str, str, str]",
                    "int",
                    "str"
                ],
                "dropout": [
                    "bool",
                    "int",
                    "float"
                ],
                "use_glu": [
                    "bool"
                ],
                "inference_only": [
                    "Tuple[str, str, str]",
                    "int",
                    "str"
                ]
            }
        },
        "TransformerFeedForward.forward": {
            "name": "forward",
            "location": 288,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "int",
                    "bytes"
                ]
            }
        },
        "AutoRegressiveMask.forward": {
            "name": "forward",
            "location": 301,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "torch.Tensor"
                ]
            }
        }
    },
    "sockeye-main/sockeye/translate.py": {
        "main": {
            "name": "main",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "run_translate": {
            "name": "run_translate",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        },
        "make_inputs": {
            "name": "make_inputs",
            "location": 153,
            "return": [
                "typing.Generator[inference.TranslatorInput, None, None]"
            ],
            "arguments": {
                "input_file": [
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "bool",
                    "Optional[Set[int]]"
                ],
                "translator": [
                    "inference.Translator",
                    "bool",
                    "float",
                    "Optional[List[float]]",
                    "Optional[int]",
                    "int"
                ],
                "input_is_json": [
                    "bool",
                    "int"
                ],
                "input_factors": [
                    "List[dict]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "read_and_translate": {
            "name": "read_and_translate",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "translator": [
                    "int"
                ],
                "output_handler": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[int]",
                    "bool"
                ],
                "chunk_size": [
                    "int",
                    "str",
                    "bytes",
                    "raiden.utils.Secret",
                    "Dict[str, str]"
                ],
                "input_file": [
                    "bool",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "int",
                    "float"
                ],
                "input_factors": [
                    "bool",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "int",
                    "float"
                ],
                "input_is_json": [
                    "bool",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "int",
                    "float"
                ]
            }
        },
        "translate": {
            "name": "translate",
            "location": 242,
            "return": [
                "int",
                "List[str]",
                "str",
                "Optional[float]"
            ],
            "arguments": {
                "output_handler": [
                    "sockeye.output_handler.OutputHandler",
                    "OSError",
                    "str",
                    "Dict[str, List[Any]]",
                    "dict",
                    "Optional[bool]"
                ],
                "trans_inputs": [
                    "List[int]",
                    "int",
                    "tuple",
                    "\"Pipeline\"",
                    "list"
                ],
                "translator": [
                    "torch.nn.utils.rnn.PackedSequence",
                    "str",
                    "Iterator[str]",
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "sockeye-main/sockeye/utils.py": {
        "check_version": {
            "name": "check_version",
            "location": 46,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "version": [
                    "str",
                    "list",
                    "List[str]",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "load_version": {
            "name": "load_version",
            "location": 66,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "parse_version": {
            "name": "parse_version",
            "location": 80,
            "return": [
                "int",
                "list",
                "bytes",
                "List[str]"
            ],
            "arguments": {
                "version_string": [
                    "str"
                ]
            }
        },
        "log_basic_info": {
            "name": "log_basic_info",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "seed_rngs": {
            "name": "seed_rngs",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "seed": [
                    "int",
                    "str",
                    "float",
                    "Callable"
                ]
            }
        },
        "check_condition": {
            "name": "check_condition",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "condition": [
                    "bool"
                ],
                "error_message": [
                    "str",
                    "int"
                ]
            }
        },
        "chunks": {
            "name": "chunks",
            "location": 166,
            "return": [
                "typing.Iterable[typing.List]"
            ],
            "arguments": {
                "some_list": [
                    "int",
                    "list",
                    "Sequence[int]"
                ],
                "n": [
                    "int",
                    "list",
                    "Sequence[int]"
                ]
            }
        },
        "get_tokens": {
            "name": "get_tokens",
            "location": 172,
            "return": [
                "typing.Iterator[builtins.str]"
            ],
            "arguments": {
                "line": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "is_gzip_file": {
            "name": "is_gzip_file",
            "location": 184,
            "return": [],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "smart_open": {
            "name": "smart_open",
            "location": 190,
            "return": [
                "bool",
                "int",
                "float"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "mode": [
                    "str"
                ],
                "ftype": [
                    "str"
                ],
                "errors": [
                    "str"
                ]
            }
        },
        "combine_means": {
            "name": "combine_means",
            "location": 220,
            "return": [
                "bool"
            ],
            "arguments": {
                "means": [
                    "int"
                ],
                "num_sents": [
                    "int"
                ]
            }
        },
        "combine_stds": {
            "name": "combine_stds",
            "location": 234,
            "return": [
                "torch.FloatTensor",
                "BaseException"
            ],
            "arguments": {
                "stds": [
                    "int",
                    "list",
                    "List[int]"
                ],
                "means": [
                    "int",
                    "list",
                    "List[str]",
                    "Sized"
                ],
                "num_sents": [
                    "int",
                    "list",
                    "List[str]",
                    "Sized"
                ]
            }
        },
        "average_tensors": {
            "name": "average_tensors",
            "location": 252,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tensors": [
                    "bool",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "gen_prefix_masking": {
            "name": "gen_prefix_masking",
            "location": 267,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "prefix": [
                    "int",
                    "bytes",
                    "numpy.ndarray",
                    "List[int]",
                    "list"
                ],
                "vocab_size": [
                    "numpy.ndarray",
                    "List[int]",
                    "bool",
                    "int",
                    "list",
                    "List[Tuple[int, int]]"
                ],
                "dtype": [
                    "int",
                    "str",
                    "Optional[Sequence[int]]",
                    "bool",
                    "torch.Tensor",
                    "Tuple[int, int]"
                ]
            }
        },
        "shift_prefix_factors": {
            "name": "shift_prefix_factors",
            "location": 311,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "prefix_factors": [
                    "torch.Tensor",
                    "List[torch.Tensor]",
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "adjust_first_step_masking": {
            "name": "adjust_first_step_masking",
            "location": 324,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "target_prefix": [
                    "int",
                    "Union[int, float]",
                    "str"
                ],
                "first_step_mask": [
                    "int",
                    "torch.Tensor",
                    "Sequence['cirq.Qid']",
                    "torch.nn.utils.rnn.PackedSequence"
                ]
            }
        },
        "parse_metrics_line": {
            "name": "parse_metrics_line",
            "location": 414,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "line_number": [
                    "int",
                    "TextIO",
                    "str",
                    "List[Tuple[int, int]]",
                    "List[int]"
                ],
                "line": [
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "read_metrics_file": {
            "name": "read_metrics_file",
            "location": 438,
            "return": [
                "bool",
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "write_metrics_file": {
            "name": "write_metrics_file",
            "location": 450,
            "return": [
                ""
            ],
            "arguments": {
                "metrics": [
                    "List[Dict[str, Any]]",
                    "int",
                    "str",
                    "Optional[List[str]]"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "get_validation_metric_points": {
            "name": "get_validation_metric_points",
            "location": 463,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "model_path": [
                    "str"
                ],
                "metric": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "grouper": {
            "name": "grouper",
            "location": 475,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "float",
                    "bytes",
                    "set"
                ],
                "size": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "metric_value_is_better": {
            "name": "metric_value_is_better",
            "location": 491,
            "return": [
                "Optional[str]",
                "Optional[Iterable[str]]",
                "Optional[Any]"
            ],
            "arguments": {
                "new": [
                    "float",
                    "str",
                    "int",
                    "Final"
                ],
                "old": [
                    "float",
                    "str",
                    "int",
                    "Final"
                ],
                "metric": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "_print_dtype": {
            "name": "_print_dtype",
            "location": 513,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "dtype": [
                    "Dict[str, Any]",
                    "dict",
                    "list",
                    "Dict[str, str]"
                ]
            }
        },
        "log_parameters": {
            "name": "log_parameters",
            "location": 517,
            "return": [
                ""
            ],
            "arguments": {
                "model": [
                    "bool",
                    "type",
                    "Dict[str, Any]"
                ]
            }
        },
        "no_context": {
            "name": "no_context",
            "location": 555,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "create_pool": {
            "name": "create_pool",
            "location": 577,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "max_processes": [
                    "int",
                    "float"
                ]
            }
        },
        "is_distributed": {
            "name": "is_distributed",
            "location": 584,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "is_primary_worker": {
            "name": "is_primary_worker",
            "location": 588,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "get_local_rank": {
            "name": "get_local_rank",
            "location": 596,
            "return": [
                "dict",
                "Iterable[int]",
                "float"
            ],
            "arguments": {}
        },
        "broadcast_object": {
            "name": "broadcast_object",
            "location": 603,
            "return": [
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {
                "obj": [
                    "T",
                    "List[str]",
                    "bool",
                    "list",
                    "Union[str, List]"
                ],
                "src": [
                    "str",
                    "int",
                    "Callable[[], None]"
                ]
            }
        },
        "all_gather_object": {
            "name": "all_gather_object",
            "location": 613,
            "return": [
                "List[List[int]]",
                "Tuple[List, List]",
                "list",
                "List[str]"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Collection[T]",
                    "float",
                    "str"
                ]
            }
        },
        "count_seq_len": {
            "name": "count_seq_len",
            "location": 620,
            "return": [
                "int",
                "str",
                "List[str]"
            ],
            "arguments": {
                "sample": [
                    "str"
                ],
                "count_type": [
                    "str",
                    "Dict[str, Any]"
                ],
                "replace_tokens": [
                    "Optional[T]",
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[Dict]",
                    "List[str]"
                ]
            }
        },
        "compute_isometric_score": {
            "name": "compute_isometric_score",
            "location": 636,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "hypothesis": [
                    "multiprocessing.Process",
                    "int",
                    "str"
                ],
                "hypothesis_score": [
                    "str",
                    "bool",
                    "Union[int, float]"
                ],
                "source": [
                    "str",
                    "numpy.ndarray",
                    "int"
                ],
                "isometric_metric": [
                    "torch.Tensor",
                    "int"
                ],
                "isometric_alpha": [
                    "str",
                    "bool",
                    "Union[int, float]"
                ]
            }
        },
        "OnlineMeanAndVariance.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OnlineMeanAndVariance.update": {
            "name": "update",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "numpy.ndarray",
                    "bool",
                    "int",
                    "list",
                    "Iterable[T]",
                    "Type[Any]"
                ]
            }
        },
        "OnlineMeanAndVariance.count": {
            "name": "count",
            "location": 146,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OnlineMeanAndVariance.mean": {
            "name": "mean",
            "location": 150,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OnlineMeanAndVariance.variance": {
            "name": "variance",
            "location": 154,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OnlineMeanAndVariance.std": {
            "name": "std",
            "location": 161,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingleProcessPool.map": {
            "name": "map",
            "location": 564,
            "return": [
                "str",
                "List[str]",
                "List[Dict]",
                "Union[List, Tuple]",
                "numpy.array",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "bool"
                ],
                "iterable": [
                    "Callable",
                    "bool"
                ]
            }
        },
        "SingleProcessPool.starmap": {
            "name": "starmap",
            "location": 567,
            "return": [
                "str",
                "List[str]",
                "List[Dict]",
                "Union[List, Tuple]",
                "numpy.array",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "bool"
                ],
                "iterable": [
                    "Callable",
                    "bool"
                ]
            }
        },
        "SingleProcessPool.__enter__": {
            "name": "__enter__",
            "location": 570,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingleProcessPool.__exit__": {
            "name": "__exit__",
            "location": 573,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        }
    },
    "sockeye-main/sockeye/vocab.py": {
        "count_tokens_for_path": {
            "name": "count_tokens_for_path",
            "location": 33,
            "return": [
                "Mapping[str, Any]",
                "str",
                "dict",
                "Dict[str, str]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "build_from_paths": {
            "name": "build_from_paths",
            "location": 42,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "paths": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "num_words": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "min_count": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "pad_to_multiple_of": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "mapper": [
                    "str",
                    "Callable",
                    "bool",
                    "int"
                ]
            }
        },
        "build_vocab": {
            "name": "build_vocab",
            "location": 66,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "data": [
                    "int",
                    "dict",
                    "List[str]",
                    "Optional[\"ShippingInfo\"]",
                    "Optional[int]",
                    "Sequence[str]",
                    "str",
                    "Dict[str, Any]"
                ],
                "num_words": [
                    "int",
                    "float",
                    "Tuple[int, int]"
                ],
                "min_count": [
                    "int",
                    "float",
                    "Tuple[int, int]"
                ],
                "pad_to_multiple_of": [
                    "int",
                    "float",
                    "Tuple[int, int]"
                ]
            }
        },
        "build_pruned_vocab": {
            "name": "build_pruned_vocab",
            "location": 86,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "raw_vocab": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "List[int]",
                    "bytes"
                ],
                "num_words": [
                    "Optional[int]",
                    "Optional[Tuple[float, float]]",
                    "Optional[dict]",
                    "Optional[Dict]"
                ],
                "min_count": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "List[int]",
                    "bytes"
                ],
                "pad_to_multiple_of": [
                    "Optional[int]",
                    "Optional[utils.types.Vec3D]"
                ]
            }
        },
        "count_tokens": {
            "name": "count_tokens",
            "location": 134,
            "return": [
                "List[str]",
                "List[int]"
            ],
            "arguments": {
                "data": [
                    "list",
                    "Dict[str, Any]",
                    "Tuple[int, int, bytearray]"
                ]
            }
        },
        "vocab_to_json": {
            "name": "vocab_to_json",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "vocab": [
                    "str"
                ],
                "path": [
                    "str",
                    "Union[os.PathLike, str]"
                ]
            }
        },
        "is_valid_vocab": {
            "name": "is_valid_vocab",
            "location": 156,
            "return": [
                "bool"
            ],
            "arguments": {
                "vocab": [
                    "Callable[..., Awaitable]",
                    "str",
                    "int"
                ]
            }
        },
        "vocab_from_json": {
            "name": "vocab_from_json",
            "location": 190,
            "return": [
                "float",
                "Sequence[float]",
                "Tuple[int, int]",
                "tuple"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "encoding": [
                    "str"
                ]
            }
        },
        "save_source_vocabs": {
            "name": "save_source_vocabs",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {
                "source_vocabs": [
                    "str",
                    "int",
                    "raiden.utils.Any",
                    "Dict[str, Any]"
                ],
                "folder": [
                    "str"
                ]
            }
        },
        "save_target_vocabs": {
            "name": "save_target_vocabs",
            "location": 216,
            "return": [
                ""
            ],
            "arguments": {
                "target_vocabs": [
                    "slice",
                    "int",
                    "List[int]",
                    "str"
                ],
                "folder": [
                    "str",
                    "Union[int, str]"
                ]
            }
        },
        "_get_sorted_source_vocab_fnames": {
            "name": "_get_sorted_source_vocab_fnames",
            "location": 227,
            "return": [
                "List[str]",
                "bool",
                "int",
                "Counter",
                "Optional[dict]",
                "Optional[T]"
            ],
            "arguments": {
                "folder": [
                    "int",
                    "dict",
                    "Optional[int]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "_get_sorted_target_vocab_fnames": {
            "name": "_get_sorted_target_vocab_fnames",
            "location": 232,
            "return": [
                "bool",
                "int",
                "str",
                "Optional[dict]",
                "List[str]",
                "Counter",
                "Optional[T]"
            ],
            "arguments": {
                "folder": [
                    "dict",
                    "List[str]",
                    "bytes",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "load_source_vocabs": {
            "name": "load_source_vocabs",
            "location": 237,
            "return": [
                "dict",
                "List[str]",
                "cmk.utils.type_defs.UserId",
                "Optional[str]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "folder": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "load_target_vocabs": {
            "name": "load_target_vocabs",
            "location": 248,
            "return": [
                "str",
                "bool",
                "cmk.utils.type_defs.UserId",
                "int",
                "Dict[str, str]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "folder": [
                    "bool",
                    "Union[bool, str]"
                ]
            }
        },
        "load_or_create_vocab": {
            "name": "load_or_create_vocab",
            "location": 259,
            "return": [
                "str"
            ],
            "arguments": {
                "data": [
                    "int",
                    "bool",
                    "List[int]"
                ],
                "vocab_path": [
                    "Optional[str]",
                    "str",
                    "Optional[List[str]]"
                ],
                "num_words": [
                    "int",
                    "bool",
                    "List[int]"
                ],
                "word_min_count": [
                    "int",
                    "bool",
                    "List[int]"
                ],
                "pad_to_multiple_of": [
                    "int",
                    "bool",
                    "List[int]"
                ],
                "mapper": [
                    "int",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "load_or_create_vocabs": {
            "name": "load_or_create_vocabs",
            "location": 273,
            "return": [
                "str",
                "Mapping[str, str]"
            ],
            "arguments": {
                "shard_source_paths": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ],
                "shard_target_paths": [
                    "str"
                ],
                "source_vocab_paths": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "source_factor_vocab_same_as_source": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "target_vocab_paths": [
                    "str",
                    "NameError"
                ],
                "target_factor_vocab_same_as_target": [
                    "int",
                    "list",
                    "List[str]",
                    "Union[List[int], float, str]",
                    "TextIO",
                    "List[int]"
                ],
                "shared_vocab": [
                    "str",
                    "int"
                ],
                "num_words_source": [
                    "str",
                    "int"
                ],
                "word_min_count_source": [
                    "str"
                ],
                "num_words_target": [
                    "str",
                    "int"
                ],
                "word_min_count_target": [
                    "str"
                ],
                "pad_to_multiple_of": [
                    "str",
                    "Tuple[str]"
                ],
                "mapper": [
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "reverse_vocab": {
            "name": "reverse_vocab",
            "location": 401,
            "return": [
                "Set[str]",
                "dict",
                "Dict[str, str]",
                "Dict[str, Any]",
                "Dict[str, List[Callable]]"
            ],
            "arguments": {
                "vocab": [
                    "Optional[Union[str, Any, Any, Any]]",
                    "Dict[str, Set[str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_ordered_tokens_from_vocab": {
            "name": "get_ordered_tokens_from_vocab",
            "location": 411,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "dict",
                "str",
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "vocab": [
                    "dict"
                ]
            }
        },
        "are_identical": {
            "name": "are_identical",
            "location": 421,
            "return": [
                "str",
                "dict",
                "Dict[str, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 426,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "prepare_vocab": {
            "name": "prepare_vocab",
            "location": 435,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "sockeye-main/sockeye/__init__.py": {},
    "sockeye-main/sockeye_contrib/plot_metrics.py": {
        "ax_label": {
            "name": "ax_label",
            "location": 58,
            "return": [
                "int",
                "Exception",
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "read_metrics_file": {
            "name": "read_metrics_file",
            "location": 64,
            "return": [
                "bool",
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "fname": [
                    "bool",
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "average_points": {
            "name": "average_points",
            "location": 76,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "points": [
                    "bool",
                    "int",
                    "Iterable[T]",
                    "Sequence[str]",
                    "float"
                ],
                "num_points": [
                    "int",
                    "List[int]",
                    "str",
                    "float"
                ],
                "cmp": [
                    "int",
                    "List[int]",
                    "str",
                    "float"
                ]
            }
        },
        "points_since_improvement": {
            "name": "points_since_improvement",
            "location": 86,
            "return": [
                "str",
                "List[int]",
                "Optional[str]",
                "List[str]",
                "Tuple[int, int]",
                "List[Tuple[int, int]]",
                "float"
            ],
            "arguments": {
                "points": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "cmp": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "window_improvement": {
            "name": "window_improvement",
            "location": 99,
            "return": [
                "List[List[int]]",
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "points": [
                    "List[str]",
                    "bool",
                    "int",
                    "List[dict]",
                    "Iterable"
                ],
                "num_points": [
                    "int"
                ],
                "cmp": [
                    "int",
                    "float",
                    "Optional[List[str]]"
                ]
            }
        },
        "slope": {
            "name": "slope",
            "location": 115,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "points": [
                    "List[int]",
                    "int",
                    "Collection[int]",
                    "float"
                ],
                "num_points": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "plot_metrics": {
            "name": "plot_metrics",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "sockeye-main/sockeye_contrib/rouge.py": {
        "_get_ngrams": {
            "name": "_get_ngrams",
            "location": 32,
            "return": [],
            "arguments": {
                "n": [],
                "text": []
            }
        },
        "_split_into_words": {
            "name": "_split_into_words",
            "location": 50,
            "return": [],
            "arguments": {
                "sentences": []
            }
        },
        "_get_word_ngrams": {
            "name": "_get_word_ngrams",
            "location": 55,
            "return": [],
            "arguments": {
                "n": [],
                "sentences": []
            }
        },
        "_len_lcs": {
            "name": "_len_lcs",
            "location": 65,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "_lcs": {
            "name": "_lcs",
            "location": 83,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "_recon_lcs": {
            "name": "_recon_lcs",
            "location": 110,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "rouge_n": {
            "name": "rouge_n",
            "location": 140,
            "return": [],
            "arguments": {
                "evaluated_sentences": [],
                "reference_sentences": [],
                "n": []
            }
        },
        "_f_p_r_lcs": {
            "name": "_f_p_r_lcs",
            "location": 186,
            "return": [],
            "arguments": {
                "llcs": [],
                "m": [],
                "n": []
            }
        },
        "rouge_l_sentence_level": {
            "name": "rouge_l_sentence_level",
            "location": 209,
            "return": [],
            "arguments": {
                "evaluated_sentences": [],
                "reference_sentences": []
            }
        },
        "_union_lcs": {
            "name": "_union_lcs",
            "location": 246,
            "return": [],
            "arguments": {
                "evaluated_sentences": [],
                "reference_sentence": []
            }
        },
        "rouge_l_summary_level": {
            "name": "rouge_l_summary_level",
            "location": 283,
            "return": [],
            "arguments": {
                "evaluated_sentences": [],
                "reference_sentences": []
            }
        },
        "rouge": {
            "name": "rouge",
            "location": 327,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": []
            }
        },
        "rouge_1": {
            "name": "rouge_1",
            "location": 368,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": []
            }
        },
        "rouge_2": {
            "name": "rouge_2",
            "location": 379,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": []
            }
        },
        "rouge_l": {
            "name": "rouge_l",
            "location": 390,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": []
            }
        },
        "_recon_lcs._recon": {
            "name": "_recon",
            "location": 125,
            "return": [],
            "arguments": {
                "i": [],
                "j": []
            }
        }
    },
    "sockeye-main/sockeye_contrib/__init__.py": {},
    "sockeye-main/sockeye_contrib/benchmark/benchmark_to_output.py": {
        "read_benchmark_handler_output": {
            "name": "read_benchmark_handler_output",
            "location": 20,
            "return": [
                "typing.Iterator[typing.Dict[builtins.str, builtins.str]]"
            ],
            "arguments": {
                "stream": [
                    "float",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "get_output_from_benchmark_output": {
            "name": "get_output_from_benchmark_output",
            "location": 27,
            "return": [
                "typing.Iterator[builtins.str]"
            ],
            "arguments": {
                "input_stream": [
                    "bool",
                    "float",
                    "int",
                    "Counter",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "sockeye-main/sockeye_contrib/benchmark/benchmark_to_percentiles.py": {
        "read_benchmark_handler_output": {
            "name": "read_benchmark_handler_output",
            "location": 20,
            "return": [
                "typing.Iterator[typing.Dict[builtins.str, builtins.str]]"
            ],
            "arguments": {
                "stream": [
                    "float",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "compute_percentiles": {
            "name": "compute_percentiles",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "lengths": [
                    "int",
                    "float"
                ],
                "length_percentile": [
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "List[int]",
                    "bytearray"
                ],
                "times": [
                    "int",
                    "Optional[Union[float, Any]]",
                    "List[float]"
                ],
                "time_percentile": [
                    "int",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "percentiles_from_benchmark_output": {
            "name": "percentiles_from_benchmark_output",
            "location": 41,
            "return": [
                "bool",
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "input_stream": [
                    "Tuple[int, int, int, int]",
                    "Tuple[int, int, int]",
                    "int",
                    "Tuple[int]",
                    "Union[int, str]",
                    "dict"
                ],
                "length_percentile": [
                    "int",
                    "str"
                ],
                "time_percentile": [
                    "int",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "sockeye-main/sockeye_contrib/vistools/generate_graphs.py": {
        "_add_graph_level": {
            "name": "_add_graph_level",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "graph": [
                    "str",
                    "bool",
                    "T"
                ],
                "level": [
                    "int",
                    "bytes"
                ],
                "parent_ids": [
                    "str"
                ],
                "names": [
                    "Optional[str]",
                    "str",
                    "Optional[Union[int, float]]"
                ],
                "scores": [
                    "Iterable[int]",
                    "str",
                    "float",
                    "Union[int, float]",
                    "int"
                ],
                "normalized_scores": [
                    "int",
                    "bool",
                    "Dict[str, str]",
                    "Union[int, float]",
                    "str",
                    "Callable"
                ],
                "include_pad": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "create_graph": {
            "name": "create_graph",
            "location": 99,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "predicted_ids": [
                    "str",
                    "List[str]"
                ],
                "parent_ids": [
                    "int",
                    "str",
                    "float"
                ],
                "scores": [
                    "int",
                    "str",
                    "float"
                ],
                "normalized_scores": [
                    "int",
                    "str",
                    "float"
                ],
                "include_pad": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "generate": {
            "name": "generate",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "input_data": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "output_dir": [
                    "str",
                    "Optional[str]"
                ],
                "include_pad": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "sockeye-main/sockeye_contrib/vistools/test/test_integration.py": {
        "test_beam_generation": {
            "name": "test_beam_generation",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "beams": [
                    "int"
                ],
                "expected_output": [
                    "str",
                    "IO[bytes]"
                ],
                "tmpdir": [
                    "IO[bytes]",
                    "IO[Any]"
                ]
            }
        }
    },
    "sockeye-main/sockeye_contrib/vistools/test/__init__.py": {},
    "sockeye-main/test/common.py": {
        "check_train_translate": {
            "name": "check_train_translate",
            "location": 33,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "train_params": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "bool"
                ],
                "translate_params": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "bool"
                ],
                "data": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "bool"
                ],
                "use_prepared_data": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "bool"
                ],
                "max_seq_len": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "bool"
                ],
                "compare_output": [
                    "int",
                    "str"
                ],
                "seed": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "bool"
                ]
            }
        },
        "test_translate_equivalence": {
            "name": "test_translate_equivalence",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "str",
                    "Dict[str, Any]"
                ],
                "translate_params_equiv": [
                    "str",
                    "Dict[str, Any]",
                    "IO"
                ],
                "compare_output": [
                    "bool",
                    "Dict[str, str]",
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "test_scoring": {
            "name": "test_scoring",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes"
                ],
                "translate_params": [
                    "str",
                    "int"
                ],
                "test_similar_scores": [
                    "bool",
                    "Dict[str, str]",
                    "int",
                    "str"
                ]
            }
        },
        "_translate_output_is_valid": {
            "name": "_translate_output_is_valid",
            "location": 261,
            "return": [
                "bool"
            ],
            "arguments": {
                "translate_outputs": [
                    "List[str]",
                    "bytes",
                    "numpy.ma.MaskedArray",
                    "Iterable[str]"
                ]
            }
        },
        "test_odd_even_target_factors": {
            "name": "test_odd_even_target_factors",
            "location": 277,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "list",
                    "str",
                    "int",
                    "numpy.array",
                    "DefaultDict[int, List[Any]]"
                ]
            }
        }
    },
    "sockeye-main/test/__init__.py": {},
    "sockeye-main/test/integration/test_backwards_compatibility.py": {
        "test_backwards_compatibility": {
            "name": "test_backwards_compatibility",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "sockeye-main/test/integration/test_seq_copy_int.py": {
        "test_seq_copy": {
            "name": "test_seq_copy",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "train_params": [
                    "str",
                    "bool"
                ],
                "translate_params": [
                    "str",
                    "bool"
                ],
                "use_prepared_data": [
                    "str",
                    "bool"
                ],
                "n_source_factors": [
                    "int",
                    "bool",
                    "str",
                    "list"
                ],
                "n_target_factors": [
                    "int",
                    "bool",
                    "str",
                    "list"
                ]
            }
        },
        "test_other_clis": {
            "name": "test_other_clis",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "train_params": [
                    "str",
                    "int"
                ],
                "translate_params": [
                    "str",
                    "int"
                ]
            }
        },
        "_test_evaluate_cli": {
            "name": "_test_evaluate_cli",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {
                "test_outputs": [
                    "List[str]"
                ],
                "test_target_path": [
                    "str"
                ]
            }
        },
        "_test_parameter_averaging": {
            "name": "_test_parameter_averaging",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {
                "model_path": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "_test_checkpoint_decoder": {
            "name": "_test_checkpoint_decoder",
            "location": 243,
            "return": [
                ""
            ],
            "arguments": {
                "dev_source_path": [
                    "str",
                    "int"
                ],
                "dev_target_path": [
                    "str",
                    "int",
                    "IO[bytes]"
                ],
                "model_path": [
                    "str"
                ]
            }
        }
    },
    "sockeye-main/test/integration/__init__.py": {},
    "sockeye-main/test/system/test_seq_copy_sys.py": {
        "test_seq_copy": {
            "name": "test_seq_copy",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "train_params": [
                    "str",
                    "float",
                    "int",
                    "Optional[str]"
                ],
                "translate_params": [
                    "str",
                    "float",
                    "int",
                    "Optional[str]"
                ],
                "use_prepared_data": [
                    "str",
                    "float",
                    "int",
                    "Optional[str]"
                ],
                "perplexity_thresh": [
                    "str",
                    "bool",
                    "list",
                    "Optional[bool]",
                    "List[int]",
                    "int"
                ],
                "bleu_thresh": [
                    "str",
                    "bool",
                    "list",
                    "Optional[bool]",
                    "List[int]",
                    "int"
                ]
            }
        },
        "test_seq_sort": {
            "name": "test_seq_sort",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "range",
                    "logging.Logger",
                    "bool",
                    "logging.Formatter",
                    "Optional[str]"
                ],
                "train_params": [
                    "str",
                    "int",
                    "float"
                ],
                "translate_params": [
                    "str",
                    "int",
                    "float"
                ],
                "use_prepared_data": [
                    "str",
                    "int",
                    "float"
                ],
                "n_source_factors": [
                    "int",
                    "float"
                ],
                "n_target_factors": [
                    "int",
                    "float"
                ],
                "perplexity_thresh": [
                    "str",
                    "int",
                    "Iterable[str]",
                    "bool",
                    "Optional[bool]"
                ],
                "bleu_thresh": [
                    "str",
                    "int",
                    "Iterable[str]",
                    "bool",
                    "Optional[bool]"
                ]
            }
        }
    },
    "sockeye-main/test/system/__init__.py": {},
    "sockeye-main/test/unit/test_arguments.py": {
        "test_simple_dict": {
            "name": "test_simple_dict",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_io_args": {
            "name": "test_io_args",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "test_params": [],
                "expected_params": []
            }
        },
        "test_logging_args": {
            "name": "test_logging_args",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "test_params": [
                    "str",
                    "Tuple[str]"
                ],
                "expected_params": [
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "test_device_args": {
            "name": "test_device_args",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "test_params": [
                    "Tuple[str]"
                ],
                "expected_params": [
                    "Tuple[str]"
                ]
            }
        },
        "test_model_parameters": {
            "name": "test_model_parameters",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "test_params": [
                    "Tuple[str]"
                ],
                "expected_params": [
                    "Tuple[str]"
                ]
            }
        },
        "test_inference_args": {
            "name": "test_inference_args",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "test_params": [
                    "Tuple[str]"
                ],
                "expected_params": [
                    "Tuple[str]"
                ]
            }
        },
        "test_training_arg": {
            "name": "test_training_arg",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {
                "test_params": [
                    "Tuple[str]"
                ],
                "expected_params": [
                    "Tuple[str]"
                ]
            }
        },
        "test_tutorial_translate_args": {
            "name": "test_tutorial_translate_args",
            "location": 249,
            "return": [
                ""
            ],
            "arguments": {
                "test_params": [],
                "expected_params": [],
                "expected_params_present": []
            }
        },
        "test_tutorial_averaging_args": {
            "name": "test_tutorial_averaging_args",
            "location": 260,
            "return": [
                ""
            ],
            "arguments": {
                "test_params": [],
                "expected_params": [],
                "expected_params_present": []
            }
        },
        "test_tutorial_prepare_data_cli_args": {
            "name": "test_tutorial_prepare_data_cli_args",
            "location": 295,
            "return": [
                ""
            ],
            "arguments": {
                "test_params": [
                    "str",
                    "Tuple[str]"
                ],
                "expected_params": [
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "test_prepare_data_cli_args": {
            "name": "test_prepare_data_cli_args",
            "location": 329,
            "return": [
                ""
            ],
            "arguments": {
                "test_params": [
                    "str",
                    "Tuple[str]"
                ],
                "expected_params": [
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "_create_argument_values_that_must_be_files_or_dirs": {
            "name": "_create_argument_values_that_must_be_files_or_dirs",
            "location": 333,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "params": [
                    "str"
                ]
            }
        },
        "_delete_argument_values_that_must_be_files_or_dirs": {
            "name": "_delete_argument_values_that_must_be_files_or_dirs",
            "location": 360,
            "return": [
                ""
            ],
            "arguments": {
                "to_unlink": [
                    "str",
                    "int",
                    "Sequence[int]",
                    "List[dict]",
                    "Iterator[int]",
                    "bool"
                ]
            }
        },
        "_test_args": {
            "name": "_test_args",
            "location": 371,
            "return": [
                ""
            ],
            "arguments": {
                "test_params": [
                    "str",
                    "Dict[str, str]"
                ],
                "expected_params": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "args_func": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "_test_args_subset": {
            "name": "_test_args_subset",
            "location": 382,
            "return": [
                ""
            ],
            "arguments": {
                "test_params": [
                    "str",
                    "bool"
                ],
                "expected_params": [
                    "str",
                    "dict",
                    "bool",
                    "Dict[str, None]"
                ],
                "expected_params_present": [
                    "bool",
                    "Optional[Tuple]",
                    "List[str]",
                    "str"
                ],
                "args_func": [
                    "str",
                    "Type"
                ]
            }
        },
        "test_config_file": {
            "name": "test_config_file",
            "location": 411,
            "return": [
                ""
            ],
            "arguments": {
                "plain_command_line": [],
                "config_command_line": [
                    "List[str]"
                ],
                "config_contents": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_config_file_required": {
            "name": "test_config_file_required",
            "location": 442,
            "return": [
                ""
            ],
            "arguments": {
                "config_command_line": [
                    "str",
                    "Callable"
                ],
                "config_contents": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "test_arguments_allowed_to_differ": {
            "name": "test_arguments_allowed_to_differ",
            "location": 461,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_create_argument_values_that_must_be_files_or_dirs.grouper": {
            "name": "grouper",
            "location": 338,
            "return": [
                "str",
                "Union[str, Dict]",
                "int"
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "dict",
                    "argparse.Namespace",
                    "bool"
                ],
                "n": [
                    "int",
                    "dict",
                    "argparse.Namespace",
                    "bool"
                ],
                "fillvalue": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "sockeye-main/test/unit/test_average.py": {
        "test_strategy_best": {
            "name": "test_strategy_best",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "test_points": [
                    "float",
                    "int",
                    "torch.IntTensor"
                ],
                "expected_top_n": [
                    "str",
                    "List[int]",
                    "float",
                    "dict",
                    "Dict[str, Any]"
                ],
                "size": [
                    "float",
                    "int",
                    "torch.IntTensor"
                ],
                "maximize": [
                    "float",
                    "int",
                    "torch.IntTensor"
                ]
            }
        },
        "test_strategy_last": {
            "name": "test_strategy_last",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "test_points": [
                    "str",
                    "float",
                    "int",
                    "Sequence[int]",
                    "Optional[float]"
                ],
                "expected_top_n": [
                    "str",
                    "dict",
                    "List[int]",
                    "float"
                ],
                "size": [
                    "str",
                    "float",
                    "int",
                    "Sequence[int]",
                    "Optional[float]"
                ],
                "maximize": [
                    "str",
                    "float",
                    "int",
                    "Sequence[int]",
                    "Optional[float]"
                ]
            }
        },
        "test_strategy_lifespan": {
            "name": "test_strategy_lifespan",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "test_points": [
                    "float",
                    "int",
                    "torch.IntTensor"
                ],
                "expected_top_n": [
                    "str",
                    "List[int]",
                    "float",
                    "dict",
                    "Dict[str, Any]"
                ],
                "size": [
                    "float",
                    "int",
                    "torch.IntTensor"
                ],
                "maximize": [
                    "float",
                    "int",
                    "torch.IntTensor"
                ]
            }
        },
        "test_average": {
            "name": "test_average",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "sockeye-main/test/unit/test_beam_search.py": {
        "test_length_penalty_default": {
            "name": "test_length_penalty_default",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_length_penalty": {
            "name": "test_length_penalty",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_length_penalty_int_input": {
            "name": "test_length_penalty_int_input",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_brevity_penalty_default": {
            "name": "test_brevity_penalty_default",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_brevity_penalty": {
            "name": "test_brevity_penalty",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_brevity_penalty_int_input": {
            "name": "test_brevity_penalty_int_input",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_candidate_scorer": {
            "name": "test_candidate_scorer",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "numpy_topk": {
            "name": "numpy_topk",
            "location": 97,
            "return": [
                "Optional[int]",
                "int",
                "float",
                "List[int]",
                "str"
            ],
            "arguments": {
                "scores": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "bool"
                ],
                "k": [
                    "str",
                    "Callable",
                    "int",
                    "Optional[str]"
                ],
                "offset": [
                    "int",
                    "float",
                    "numpy.array",
                    "Iterable[T]",
                    "numpy.ndarray"
                ]
            }
        },
        "test_topk_func": {
            "name": "test_topk_func",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "batch_size": [
                    "int",
                    "torch.IntTensor"
                ],
                "beam_size": [
                    "int",
                    "torch.IntTensor"
                ],
                "target_vocab_size": [
                    "int",
                    "torch.IntTensor",
                    "Tuple[int, int]"
                ]
            }
        },
        "test_greedytop1": {
            "name": "test_greedytop1",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "target_vocab_size": [
                    "int",
                    "Optional[Tuple[int, ...]]",
                    "float"
                ]
            }
        },
        "test_samplek_func": {
            "name": "test_samplek_func",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "batch_size": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "beam_size": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "target_vocab_size": [
                    "int",
                    "List[int]"
                ],
                "top_n": [
                    "int",
                    "Optional[int]",
                    "float",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]"
                ]
            }
        },
        "test_update_scores": {
            "name": "test_update_scores",
            "location": 208,
            "return": [
                ""
            ],
            "arguments": {
                "use_unk_dist": [
                    "Callable",
                    "Iterable[Any]",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "test_beam_search": {
            "name": "test_beam_search",
            "location": 305,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_nvs_vocab_slice_ids": {
            "name": "test_get_nvs_vocab_slice_ids",
            "location": 348,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_vocab_slice_ids_blocking": {
            "name": "test_get_vocab_slice_ids_blocking",
            "location": 407,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_TestInference.__init__": {
            "name": "__init__",
            "location": 244,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "output_vocab_size": [
                    "int",
                    "Optional[int]",
                    "bytes",
                    "float"
                ]
            }
        },
        "_TestInference.state_structure": {
            "name": "state_structure",
            "location": 248,
            "return": [
                "int",
                "str",
                "List[Dict[str, Any]]",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestInference.encode_and_initialize": {
            "name": "encode_and_initialize",
            "location": 251,
            "return": [
                "dict",
                "Union[str, List[str]]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "torch.Tensor",
                    "str",
                    "Tuple[torch.Tensor, torch.Tensor]",
                    "List[list]",
                    "float",
                    "List[int]",
                    "Type[numpy.number]",
                    "numpy.ndarray"
                ],
                "valid_length": [
                    "list",
                    "str",
                    "bool"
                ]
            }
        },
        "_TestInference.decode_step": {
            "name": "decode_step",
            "location": 263,
            "return": [
                "Optional[str]",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "step_input": [
                    "int",
                    "numpy.ndarray",
                    "numpy.array"
                ],
                "states": [
                    "int",
                    "List[str]",
                    "numpy.random.RandomState"
                ],
                "vocab_slice_ids": [
                    "list",
                    "Optional[str]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "_TestInference.model_output_vocab_size": {
            "name": "model_output_vocab_size",
            "location": 295,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "_TestInference.model_output_factor_vocab_size": {
            "name": "model_output_factor_vocab_size",
            "location": 299,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sockeye-main/test/unit/test_bleu.py": {
        "test_bleu": {
            "name": "test_bleu",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "hypotheses": [
                    "Callable",
                    "str"
                ],
                "references": [
                    "Callable",
                    "str"
                ],
                "expected_bleu": [
                    "str",
                    "Callable",
                    "int"
                ]
            }
        },
        "test_effective_order": {
            "name": "test_effective_order",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "hypotheses": [
                    "Callable",
                    "str"
                ],
                "references": [
                    "Callable",
                    "str"
                ],
                "expected_bleu": [
                    "str",
                    "Callable",
                    "int"
                ]
            }
        },
        "test_statistics": {
            "name": "test_statistics",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "hypothesis": [
                    "str",
                    "bool"
                ],
                "reference": [
                    "str",
                    "bool"
                ],
                "expected_stat": [
                    "str",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "test_scoring": {
            "name": "test_scoring",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "statistics": [
                    "str",
                    "Dict[str, Any]"
                ],
                "expected_score": [
                    "str",
                    "int",
                    "List[Tuple[str, Any]]",
                    "List[str]",
                    "bytearray"
                ]
            }
        },
        "test_offset": {
            "name": "test_offset",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "hypothesis": [
                    "Optional[Tuple[int, ...]]",
                    "Optional[int]",
                    "Tuple[int, int]"
                ],
                "reference": [
                    "Optional[Tuple[int, ...]]",
                    "Optional[int]",
                    "Tuple[int, int]"
                ],
                "expected_with_offset": [
                    "bool",
                    "Type[Exception]",
                    "int",
                    "Union[int, slice]"
                ],
                "expected_without_offset": [
                    "bool",
                    "Type[Exception]",
                    "int",
                    "Union[int, slice]"
                ]
            }
        },
        "test_degenerate_statistics": {
            "name": "test_degenerate_statistics",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "statistics": [
                    "Dict[str, Any]"
                ],
                "offset": [
                    "Dict[str, Any]"
                ],
                "expected_score": [
                    "str",
                    "int",
                    "Type[Exception]"
                ]
            }
        },
        "test_degenerate_uneven": {
            "name": "test_degenerate_uneven",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "hypotheses": [
                    "Dict[str, Sequence[Any]]"
                ],
                "references": [
                    "Dict[str, Sequence[Any]]"
                ]
            }
        }
    },
    "sockeye-main/test/unit/test_chrf.py": {
        "test_chrf": {
            "name": "test_chrf",
            "location": 42,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": [],
                "expected_score": []
            }
        },
        "test_chrf_keep_whitespace": {
            "name": "test_chrf_keep_whitespace",
            "location": 48,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": [],
                "expected_score": []
            }
        }
    },
    "sockeye-main/test/unit/test_config.py": {
        "test_config_repr": {
            "name": "test_config_repr",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_config_eq": {
            "name": "test_config_eq",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_config_serialization": {
            "name": "test_config_serialization",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_config_copy": {
            "name": "test_config_copy",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_config_missing_attributes_filled_with_default": {
            "name": "test_config_missing_attributes_filled_with_default",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "sockeye-main/test/unit/test_data_io.py": {
        "test_define_buckets": {
            "name": "test_define_buckets",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "max_seq_len": [
                    "int",
                    "bool",
                    "str"
                ],
                "step": [
                    "int",
                    "bool",
                    "str"
                ],
                "expected_buckets": [
                    "str",
                    "Dict[str, Sequence[Any]]"
                ]
            }
        },
        "test_define_parallel_buckets": {
            "name": "test_define_parallel_buckets",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "max_seq_len_source": [
                    "int",
                    "List[int]",
                    "float"
                ],
                "max_seq_len_target": [
                    "int",
                    "List[int]",
                    "float"
                ],
                "bucket_width": [
                    "int",
                    "List[int]",
                    "float"
                ],
                "bucket_scaling": [
                    "int",
                    "List[int]",
                    "float"
                ],
                "length_ratio": [
                    "int",
                    "List[int]",
                    "float"
                ],
                "expected_buckets": [
                    "int"
                ]
            }
        },
        "test_get_bucket": {
            "name": "test_get_bucket",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "buckets": [
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]"
                ],
                "length": [
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]"
                ],
                "expected_bucket": [
                    "int",
                    "str",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "test_tokens2ids": {
            "name": "test_tokens2ids",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "tokens": [
                    "str",
                    "int"
                ],
                "vocab": [
                    "str",
                    "int"
                ],
                "expected_ids": [
                    "str",
                    "Optional[int]",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "test_strids2ids": {
            "name": "test_strids2ids",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "tokens": [
                    "str",
                    "raiden_contracts.utils.type_aliases.ChainID",
                    "Dict[str, Any]",
                    "int"
                ],
                "expected_ids": [
                    "str",
                    "int"
                ]
            }
        },
        "test_sequence_reader": {
            "name": "test_sequence_reader",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "sequences": [
                    "int",
                    "numpy.ndarray",
                    "float"
                ],
                "use_vocab": [
                    "bool",
                    "utils.SinkType",
                    "Optional[Callable]",
                    "raiden.utils.Optional[raiden.utils.Dict[str, raiden.utils.Any]]",
                    "bool or str"
                ],
                "add_bos": [
                    "str"
                ],
                "add_eos": []
            }
        },
        "test_nonparallel_iter": {
            "name": "test_nonparallel_iter",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "source_iterables": [
                    "str",
                    "Union[str, Iterable[str]]"
                ],
                "target_iterables": [
                    "str",
                    "Union[str, Iterable[str]]"
                ]
            }
        },
        "test_not_source_token_parallel_iter": {
            "name": "test_not_source_token_parallel_iter",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "source_iterables": [
                    "str",
                    "Union[str, Iterable[str]]"
                ],
                "target_iterables": [
                    "str",
                    "Union[str, Iterable[str]]"
                ]
            }
        },
        "test_not_target_token_parallel_iter": {
            "name": "test_not_target_token_parallel_iter",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "source_iterables": [
                    "str",
                    "Union[str, Iterable[str]]",
                    "numpy.ndarray"
                ],
                "target_iterables": [
                    "str",
                    "Union[str, Iterable[str]]",
                    "numpy.ndarray"
                ]
            }
        },
        "test_parallel_iter": {
            "name": "test_parallel_iter",
            "location": 225,
            "return": [
                ""
            ],
            "arguments": {
                "source_iterables": [
                    "numpy.ndarray",
                    "str"
                ],
                "target_iterables": [
                    "numpy.ndarray",
                    "str"
                ],
                "expected": [
                    "numpy.ndarray",
                    "str"
                ]
            }
        },
        "test_sample_based_define_bucket_batch_sizes": {
            "name": "test_sample_based_define_bucket_batch_sizes",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_word_based_define_bucket_batch_sizes": {
            "name": "test_word_based_define_bucket_batch_sizes",
            "location": 248,
            "return": [
                ""
            ],
            "arguments": {
                "length_ratio": [
                    "Callable",
                    "float",
                    "int",
                    "random.Random"
                ],
                "batch_sentences_multiple_of": [
                    "Callable",
                    "int",
                    "float",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "Optional[float]",
                    "Optional[int]",
                    "Iterable[Any]"
                ],
                "expected_batch_sizes": [
                    "bool",
                    "float",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "test_max_word_based_define_bucket_batch_sizes": {
            "name": "test_max_word_based_define_bucket_batch_sizes",
            "location": 269,
            "return": [
                ""
            ],
            "arguments": {
                "length_ratio": [
                    "int",
                    "float",
                    "Callable",
                    "random.Random"
                ],
                "batch_sentences_multiple_of": [
                    "Callable",
                    "int",
                    "Optional[float]",
                    "Optional[int]",
                    "Iterable[Any]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ],
                "expected_batch_sizes": [
                    "bool",
                    "float",
                    "List[str]",
                    "Callable",
                    "int"
                ]
            }
        },
        "_get_random_bucketed_data": {
            "name": "_get_random_bucketed_data",
            "location": 285,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "buckets": [
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[float]",
                    "Optional[constants.AgeClass]",
                    "dict",
                    "Optional[Callable]",
                    "Iterable[str]"
                ],
                "min_count": [
                    "int",
                    "str",
                    "Optional[float]"
                ],
                "max_count": [
                    "int",
                    "str",
                    "Optional[float]"
                ],
                "bucket_counts": [
                    "Optional[int]",
                    "int",
                    "str",
                    "Optional[Union[int, str]]",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "test_parallel_data_set": {
            "name": "test_parallel_data_set",
            "location": 311,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parallel_data_set_fill_up": {
            "name": "test_parallel_data_set_fill_up",
            "location": 329,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_permutations": {
            "name": "test_get_permutations",
            "location": 347,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parallel_data_set_permute": {
            "name": "test_parallel_data_set_permute",
            "location": 367,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_batch_indices": {
            "name": "test_get_batch_indices",
            "location": 392,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_parallel_bucket": {
            "name": "test_get_parallel_bucket",
            "location": 431,
            "return": [
                ""
            ],
            "arguments": {
                "buckets": [
                    "str",
                    "Exception"
                ],
                "source_length": [
                    "str",
                    "Exception"
                ],
                "target_length": [
                    "str",
                    "Exception"
                ],
                "expected_bucket_index": [
                    "str",
                    "bool",
                    "Type[Exception]",
                    "int"
                ],
                "expected_bucket": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "int",
                    "Optional[\"Game\"]",
                    "bytes"
                ]
            }
        },
        "test_calculate_length_statistics": {
            "name": "test_calculate_length_statistics",
            "location": 444,
            "return": [
                ""
            ],
            "arguments": {
                "sources": [
                    "str",
                    "raiden.tests.fuzz.utils.Scrambling",
                    "Dict[str, Any]",
                    "Optional[raiden.utils.Address]",
                    "Tuple[int, int]"
                ],
                "targets": [
                    "str",
                    "raiden.tests.fuzz.utils.Scrambling",
                    "Dict[str, Any]",
                    "Optional[raiden.utils.Address]",
                    "Tuple[int, int]"
                ],
                "expected_num_sents": [
                    "int"
                ],
                "expected_mean": [
                    "str",
                    "raiden.utils.TokenNetworkRegistryAddress"
                ],
                "expected_std": [
                    "str",
                    "raiden.utils.TokenNetworkRegistryAddress"
                ]
            }
        },
        "test_non_parallel_calculate_length_statistics": {
            "name": "test_non_parallel_calculate_length_statistics",
            "location": 458,
            "return": [
                ""
            ],
            "arguments": {
                "sources": [
                    "str",
                    "List[str]",
                    "Optional[Callable[[Any], None]]"
                ],
                "targets": [
                    "str",
                    "List[str]",
                    "Optional[Callable[[Any], None]]"
                ]
            }
        },
        "test_get_training_data_iters": {
            "name": "test_get_training_data_iters",
            "location": 463,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_data_batches_equal": {
            "name": "_data_batches_equal",
            "location": 542,
            "return": [
                "str",
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "db1": [
                    "Dict[str, Any]"
                ],
                "db2": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_parallel_sample_iter": {
            "name": "test_parallel_sample_iter",
            "location": 554,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sharded_parallel_sample_iter": {
            "name": "test_sharded_parallel_sample_iter",
            "location": 611,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sharded_parallel_sample_iter_num_batches": {
            "name": "test_sharded_parallel_sample_iter_num_batches",
            "location": 677,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sharded_and_parallel_iter_same_num_batches": {
            "name": "test_sharded_and_parallel_iter_same_num_batches",
            "location": 710,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_create_target_and_shifted_label_sequences": {
            "name": "test_create_target_and_shifted_label_sequences",
            "location": 758,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parallel_data_set.check_equal": {
            "name": "check_equal",
            "location": 315,
            "return": [
                ""
            ],
            "arguments": {
                "tensors1": [
                    "List[int]",
                    "list",
                    "bool",
                    "List[float]",
                    "str",
                    "int"
                ],
                "tensors2": [
                    "List[int]",
                    "list",
                    "bool",
                    "List[float]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "sockeye-main/test/unit/test_decoder.py": {
        "test_get_decoder": {
            "name": "test_get_decoder",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "lhuc": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "sockeye-main/test/unit/test_encoder.py": {
        "test_embedding_encoder": {
            "name": "test_embedding_encoder",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "dropout": [
                    "int",
                    "Optional[str]"
                ],
                "factor_configs": [
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "test_get_transformer_encoder": {
            "name": "test_get_transformer_encoder",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "lhuc": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "sockeye-main/test/unit/test_fixed_param_strategy.py": {
        "test_fixed_param_strategy": {
            "name": "test_fixed_param_strategy",
            "location": 377,
            "return": [
                ""
            ],
            "arguments": {
                "param_names": [
                    "str",
                    "bool"
                ],
                "strategy": [
                    "str",
                    "dict"
                ],
                "expected_fixed_param_names": [
                    "str"
                ]
            }
        }
    },
    "sockeye-main/test/unit/test_inference.py": {
        "mock_translator": {
            "name": "mock_translator",
            "location": 35,
            "return": [
                "float",
                "Callable[[bytes], None]",
                "bool",
                "str"
            ],
            "arguments": {
                "batch_size": [
                    "int",
                    "str"
                ],
                "beam_size": [
                    "int",
                    "Tuple[int, int]",
                    "Optional[int]"
                ],
                "nbest_size": [
                    "int",
                    "float",
                    "str"
                ],
                "num_source_factors": [
                    "int",
                    "bool"
                ]
            }
        },
        "test_concat_translations": {
            "name": "test_concat_translations",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "lp_alpha": [
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "lp_beta": [
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "bp_weight": [
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "test_translator_input": {
            "name": "test_translator_input",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "sentence_id": [
                    "int",
                    "str",
                    "float",
                    "bool",
                    "Optional[bool]"
                ],
                "sentence": [
                    "str",
                    "int"
                ],
                "factors": [
                    "str",
                    "int",
                    "float",
                    "Optional[str]",
                    "bool"
                ],
                "chunk_size": [
                    "int",
                    "List[str]",
                    "list",
                    "Sequence",
                    "str"
                ]
            }
        },
        "test_translator_input_with_source_prefix": {
            "name": "test_translator_input_with_source_prefix",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "sentence_id": [
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "sentence": [
                    "str",
                    "Optional[str]"
                ],
                "factors": [
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "chunk_size": [
                    "List[int]",
                    "List[Tuple[int, int]]",
                    "Tuple[int, int]",
                    "bytes",
                    "list"
                ],
                "source_prefix": [
                    "str",
                    "bool"
                ],
                "source_prefix_factors": [
                    "Optional[bool]",
                    "Optional[str]"
                ]
            }
        },
        "test_get_max_input_output_length": {
            "name": "test_get_max_input_output_length",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "supported_max_seq_len_source": [],
                "supported_max_seq_len_target": [],
                "forced_max_input_len": [],
                "forced_max_output_len": [],
                "length_ratio_mean": [],
                "length_ratio_std": [],
                "expected_max_input_len": [
                    "Dict[str, Sequence[Any]]",
                    "Dict[str, Any]"
                ],
                "expected_max_output_len": []
            }
        },
        "test_make_input_from_factored_string": {
            "name": "test_make_input_from_factored_string",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {
                "sentence": [
                    "str",
                    "int"
                ],
                "num_expected_factors": [
                    "int",
                    "List[int]"
                ],
                "delimiter": [
                    "str",
                    "int"
                ],
                "expected_tokens": [
                    "str",
                    "bytes"
                ],
                "expected_factors": [
                    "str",
                    "bool",
                    "Type[Exception]",
                    "Callable[..., Awaitable]"
                ]
            }
        },
        "test_factor_parsing": {
            "name": "test_factor_parsing",
            "location": 261,
            "return": [
                ""
            ],
            "arguments": {
                "sentence": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "num_expected_factors": [
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "delimiter": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int"
                ]
            }
        },
        "test_make_input_whitespace_delimiter": {
            "name": "test_make_input_whitespace_delimiter",
            "location": 276,
            "return": [
                ""
            ],
            "arguments": {
                "delimiter": []
            }
        },
        "test_make_input_from_valid_json_string": {
            "name": "test_make_input_from_valid_json_string",
            "location": 296,
            "return": [
                ""
            ],
            "arguments": {
                "text": [
                    "str",
                    "float",
                    "dict"
                ],
                "factors": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_make_input_from_valid_json_string_restrict_lexicon": {
            "name": "test_make_input_from_valid_json_string_restrict_lexicon",
            "location": 312,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_failed_make_input_from_valid_json_string": {
            "name": "test_failed_make_input_from_valid_json_string",
            "location": 340,
            "return": [
                ""
            ],
            "arguments": {
                "text": [
                    "str",
                    "Tuple[str, int]"
                ],
                "text_key": [
                    "str",
                    "Tuple[str, int]"
                ],
                "factors": [
                    "str",
                    "Tuple[str, int]"
                ],
                "factors_key": [
                    "str",
                    "Tuple[str, int]"
                ]
            }
        },
        "test_make_input_from_valid_dict": {
            "name": "test_make_input_from_valid_dict",
            "location": 355,
            "return": [
                ""
            ],
            "arguments": {
                "text": [
                    "str",
                    "Callable",
                    "bool",
                    "List[str]"
                ],
                "factors": [
                    "str",
                    "int"
                ]
            }
        },
        "test_failed_make_input_from_valid_dict": {
            "name": "test_failed_make_input_from_valid_dict",
            "location": 370,
            "return": [
                ""
            ],
            "arguments": {
                "text": [
                    "bool",
                    "str",
                    "dict",
                    "int"
                ],
                "text_key": [
                    "bool",
                    "str",
                    "dict",
                    "int"
                ],
                "factors": [
                    "bool",
                    "str",
                    "dict",
                    "int"
                ],
                "factors_key": [
                    "bool",
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "test_make_input_from_multiple_strings": {
            "name": "test_make_input_from_multiple_strings",
            "location": 382,
            "return": [
                ""
            ],
            "arguments": {
                "strings": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_get_best_word_indices_for_kth_hypotheses": {
            "name": "test_get_best_word_indices_for_kth_hypotheses",
            "location": 392,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_best_translations": {
            "name": "test_get_best_translations",
            "location": 424,
            "return": [
                ""
            ],
            "arguments": {
                "expected_best_ids": [
                    "int",
                    "bool",
                    "str"
                ],
                "expected_best_indices": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "test_unshift_target_factors": {
            "name": "test_unshift_target_factors",
            "location": 469,
            "return": [
                ""
            ],
            "arguments": {
                "sequence": [
                    "Dict[str, Any]"
                ],
                "fill_with": [
                    "Union[str, float]",
                    "str",
                    "int",
                    "Optional[Dict[str, Any]]"
                ],
                "expected_sequence": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "mock_translator.mock_model": {
            "name": "mock_model",
            "location": 58,
            "return": [
                "bytes",
                "int",
                "Dict[str, Any]",
                "dict",
                "Optional[float]",
                "str"
            ],
            "arguments": {}
        }
    },
    "sockeye-main/test/unit/test_layers.py": {
        "test_lhuc": {
            "name": "test_lhuc",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_positional_embeddings": {
            "name": "test_positional_embeddings",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_output_layer": {
            "name": "test_output_layer",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_interleaved_multihead_attention": {
            "name": "test_interleaved_multihead_attention",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "qlen": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "kvlen": [
                    "int"
                ],
                "batch_size": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "hidden": [
                    "int",
                    "Optional[int]",
                    "Optional[Tuple[int, ...]]",
                    "float"
                ],
                "heads": [
                    "dict",
                    "List[str]",
                    "tuple"
                ]
            }
        },
        "test_interleaved_multihead_self_attention": {
            "name": "test_interleaved_multihead_self_attention",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "seq_len": [
                    "int",
                    "Optional[int]"
                ],
                "batch_size": [
                    "int"
                ],
                "hidden": [
                    "str"
                ],
                "heads": [],
                "side": [
                    "bool",
                    "int",
                    "List[Tuple[str, str]]",
                    "List[str]"
                ]
            }
        }
    },
    "sockeye-main/test/unit/test_lexicon.py": {
        "test_topk_lexicon": {
            "name": "test_topk_lexicon",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_create_block_lexicon": {
            "name": "test_create_block_lexicon",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "sockeye-main/test/unit/test_loss.py": {
        "test_loss_block": {
            "name": "test_loss_block",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_loss_metric": {
            "name": "test_loss_metric",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cross_entropy_loss": {
            "name": "test_cross_entropy_loss",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_label_to_bow": {
            "name": "test_label_to_bow",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_binary_cross_entropy_loss": {
            "name": "test_binary_cross_entropy_loss",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_perplexity_metric": {
            "name": "test_perplexity_metric",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "DummyLoss.forward": {
            "name": "forward",
            "location": 28,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "Awaitable"
            ],
            "arguments": {
                "self": [],
                "outputs": [
                    "torch.nn.utils.rnn.PackedSequence",
                    "Tuple[int, int]",
                    "numpy.ndarray"
                ],
                "labels": [
                    "torch.nn.utils.rnn.PackedSequence",
                    "Tuple[int, int]",
                    "numpy.ndarray"
                ]
            }
        },
        "DummyLoss.create_metric": {
            "name": "create_metric",
            "location": 31,
            "return": [
                "int",
                "torch.Tensor",
                "Optional[torch.Tensor]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sockeye-main/test/unit/test_lr_scheduler.py": {
        "test_inv_sqrt_decay_scheduler": {
            "name": "test_inv_sqrt_decay_scheduler",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "learning_rate_warmup": [
                    "int",
                    "Optional[bool]",
                    "float",
                    "List[str]"
                ],
                "learning_rate_t_scale": [
                    "int",
                    "Optional[bool]",
                    "float",
                    "List[str]"
                ]
            }
        },
        "test_linear_decay_scheduler": {
            "name": "test_linear_decay_scheduler",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_lr_scheduler": {
            "name": "test_get_lr_scheduler",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "scheduler_type": [
                    "str",
                    "Union[str, Dict[str, str]]",
                    "bool"
                ],
                "expected_instance": [
                    "Optional[Type[Exception]]",
                    "Dict[str, Any]",
                    "int",
                    "dict",
                    "str"
                ]
            }
        },
        "test_get_lr_scheduler_no_reduce": {
            "name": "test_get_lr_scheduler_no_reduce",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "sockeye-main/test/unit/test_output_handler.py": {
        "test_stream_output_handler": {
            "name": "test_stream_output_handler",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "handler": [
                    "str",
                    "bytes"
                ],
                "translation_input": [
                    "str",
                    "int",
                    "bool",
                    "Dict[str, str]"
                ],
                "translation_output": [
                    "str",
                    "int",
                    "bool",
                    "Dict[str, str]"
                ],
                "translation_walltime": [
                    "str",
                    "int",
                    "bool",
                    "Dict[str, str]"
                ],
                "expected_string": [
                    "str",
                    "IO[bytes]",
                    "io.StringIO"
                ]
            }
        }
    },
    "sockeye-main/test/unit/test_params.py": {
        "test_cleanup_param_files": {
            "name": "test_cleanup_param_files",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_cleanup_param_files_keep_first": {
            "name": "test_cleanup_param_files_keep_first",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "mock_model": {
            "name": "mock_model",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "test_set_parameters": {
            "name": "test_set_parameters",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_set_parameters_allow_missing": {
            "name": "test_set_parameters_allow_missing",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_set_parameters_ignore_extra": {
            "name": "test_set_parameters_ignore_extra",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "sockeye-main/test/unit/test_reranking.py": {
        "test_rerank_hypotheses": {
            "name": "test_rerank_hypotheses",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "source": [
                    "str",
                    "Optional[str]",
                    "Union[Callable, str]"
                ],
                "hypotheses": [
                    "str",
                    "Optional[str]",
                    "Union[Callable, str]"
                ],
                "reference": [
                    "str",
                    "bool",
                    "int"
                ],
                "expected_output": [
                    "int",
                    "bool",
                    "Callable",
                    "str"
                ],
                "metric": [
                    "int",
                    "bool"
                ]
            }
        },
        "test_rerank_hypotheses_isometric": {
            "name": "test_rerank_hypotheses_isometric",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "source": [
                    "str"
                ],
                "hypotheses": [
                    "str"
                ],
                "scores": [
                    "str"
                ],
                "reference": [
                    "str"
                ],
                "expected_output": [
                    "Callable",
                    "bool"
                ],
                "metric": [
                    "Dict[str, Any]",
                    "float",
                    "Callable"
                ]
            }
        },
        "test_rerank_return_score": {
            "name": "test_rerank_return_score",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "source": [
                    "str"
                ],
                "hypotheses": [
                    "str"
                ],
                "reference": [
                    "str",
                    "bytes",
                    "dict",
                    "Optional[str]"
                ],
                "expected_scores": [
                    "str"
                ]
            }
        }
    },
    "sockeye-main/test/unit/test_rouge.py": {
        "test_rouge_1": {
            "name": "test_rouge_1",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "hypotheses": [],
                "references": [],
                "rouge1_score": [],
                "rouge2_score": [],
                "rougel_score": []
            }
        },
        "test_rouge_2": {
            "name": "test_rouge_2",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "hypotheses": [],
                "references": [],
                "rouge1_score": [],
                "rouge2_score": [],
                "rougel_score": []
            }
        },
        "test_rouge_l": {
            "name": "test_rouge_l",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "hypotheses": [],
                "references": [],
                "rouge1_score": [],
                "rouge2_score": [],
                "rougel_score": []
            }
        }
    },
    "sockeye-main/test/unit/test_scoring.py": {
        "test_batch_scorer": {
            "name": "test_batch_scorer",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "sockeye-main/test/unit/test_transformer.py": {
        "test_transformer_feed_forward": {
            "name": "test_transformer_feed_forward",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "use_glu": [
                    "torch.Tensor",
                    "float"
                ]
            }
        },
        "test_pt_autoregressive_mask": {
            "name": "test_pt_autoregressive_mask",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "length": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        }
    },
    "sockeye-main/test/unit/test_translate.py": {
        "mock_open": {
            "name": "mock_open",
            "location": 28,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {}
        },
        "test_translate_by_file": {
            "name": "test_translate_by_file",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_translate_by_stdin_chunk2": {
            "name": "test_translate_by_stdin_chunk2",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "sockeye-main/test/unit/test_utils.py": {
        "test_chunks": {
            "name": "test_chunks",
            "location": 35,
            "return": [],
            "arguments": {
                "some_list": [],
                "expected": []
            }
        },
        "test_check_condition_true": {
            "name": "test_check_condition_true",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_check_condition_false": {
            "name": "test_check_condition_false",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "test_parse_version": {
            "name": "test_parse_version",
            "location": 53,
            "return": [],
            "arguments": {
                "version_string": [],
                "expected_version": []
            }
        },
        "test_check_version_disregards_minor": {
            "name": "test_check_version_disregards_minor",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "_get_later_major_version": {
            "name": "_get_later_major_version",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "test_check_version_checks_major": {
            "name": "test_check_version_checks_major",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "test_version_matches_changelog": {
            "name": "test_version_matches_changelog",
            "location": 75,
            "return": [],
            "arguments": {}
        },
        "test_online_mean_and_variance": {
            "name": "test_online_mean_and_variance",
            "location": 90,
            "return": [],
            "arguments": {
                "samples": [],
                "expected_mean": [],
                "expected_variance": []
            }
        },
        "test_online_mean_and_variance_nan": {
            "name": "test_online_mean_and_variance_nan",
            "location": 104,
            "return": [],
            "arguments": {
                "samples": [],
                "expected_mean": []
            }
        },
        "test_get_tokens": {
            "name": "test_get_tokens",
            "location": 118,
            "return": [],
            "arguments": {
                "line": [],
                "expected_tokens": []
            }
        },
        "test_combine_means": {
            "name": "test_combine_means",
            "location": 131,
            "return": [],
            "arguments": {
                "samples": [],
                "sample_means": [],
                "expected_mean": []
            }
        },
        "test_combine_stds": {
            "name": "test_combine_stds",
            "location": 154,
            "return": [],
            "arguments": {
                "samples": [],
                "sample_means": [],
                "sample_stds": [],
                "expected_std": []
            }
        },
        "test_average_tensors": {
            "name": "test_average_tensors",
            "location": 160,
            "return": [],
            "arguments": {}
        },
        "test_metric_value_is_better": {
            "name": "test_metric_value_is_better",
            "location": 189,
            "return": [],
            "arguments": {
                "new": [],
                "old": [],
                "metric": [],
                "result": []
            }
        },
        "_touch_file": {
            "name": "_touch_file",
            "location": 193,
            "return": [],
            "arguments": {
                "fname": [],
                "compressed": [],
                "empty": []
            }
        },
        "test_is_gzip_file": {
            "name": "test_is_gzip_file",
            "location": 205,
            "return": [],
            "arguments": {}
        },
        "test_smart_open_without_suffix": {
            "name": "test_smart_open_without_suffix",
            "location": 214,
            "return": [],
            "arguments": {}
        },
        "test_parse_metrics_line": {
            "name": "test_parse_metrics_line",
            "location": 232,
            "return": [],
            "arguments": {
                "line_num": [],
                "line": [],
                "expected_metrics": []
            }
        },
        "test_write_read_metric_file": {
            "name": "test_write_read_metric_file",
            "location": 243,
            "return": [],
            "arguments": {}
        },
        "test_adjust_first_step_masking": {
            "name": "test_adjust_first_step_masking",
            "location": 255,
            "return": [],
            "arguments": {}
        },
        "test_count_seq_len": {
            "name": "test_count_seq_len",
            "location": 394,
            "return": [],
            "arguments": {
                "sample": [],
                "count_type": [],
                "replace_tokens": [],
                "expected_seq_len": []
            }
        },
        "test_rerank_hypotheses_isometric": {
            "name": "test_rerank_hypotheses_isometric",
            "location": 418,
            "return": [],
            "arguments": {
                "hypothesis": [],
                "hypothesis_score": [],
                "source": [],
                "metric": [],
                "alpha": [],
                "expected_score": []
            }
        }
    },
    "sockeye-main/test/unit/test_vocab.py": {
        "test_count_tokens": {
            "name": "test_count_tokens",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_build_vocab": {
            "name": "test_build_vocab",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "float"
                ],
                "size": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "float"
                ],
                "min_count": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "float"
                ],
                "expected": [
                    "int",
                    "bool",
                    "bytes"
                ]
            }
        },
        "test_padded_build_vocab": {
            "name": "test_padded_build_vocab",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "num_types": [
                    "int",
                    "Tuple[int, int]",
                    "bytes",
                    "str"
                ],
                "pad_to_multiple_of": [
                    "int",
                    "str",
                    "float"
                ],
                "expected_vocab_size": [
                    "Union[float, int]",
                    "int",
                    "str",
                    "Tuple[float, float]",
                    "List[str]"
                ]
            }
        },
        "test_constants_in_vocab": {
            "name": "test_constants_in_vocab",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "bool",
                    "float",
                    "Optional[Iterable]",
                    "int",
                    "bytes"
                ],
                "size": [
                    "bool",
                    "float",
                    "Optional[Iterable]",
                    "int",
                    "bytes"
                ],
                "min_count": [
                    "bool",
                    "float",
                    "Optional[Iterable]",
                    "int",
                    "bytes"
                ],
                "constants": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "test_get_ordered_tokens_from_vocab": {
            "name": "test_get_ordered_tokens_from_vocab",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "vocab": [
                    "str"
                ],
                "expected_output": [
                    "str"
                ]
            }
        },
        "test_verify_valid_vocab": {
            "name": "test_verify_valid_vocab",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "vocab": [
                    "str",
                    "bytes",
                    "dict"
                ],
                "expected_result": [
                    "str",
                    "bytes",
                    "dict"
                ]
            }
        },
        "test_get_sorted_source_vocab_fnames": {
            "name": "test_get_sorted_source_vocab_fnames",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "sockeye-main/test/unit/__init__.py": {}
}
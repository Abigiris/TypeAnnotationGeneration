{
    "son-analyze-master/setup.py": {
        "read": {
            "name": "read",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "find_version": {
            "name": "find_version",
            "location": 46,
            "return": [
                "bool",
                "str",
                "Union[int, float, complex]"
            ],
            "arguments": {}
        }
    },
    "son-analyze-master/scripts/all.py": {
        "launch_command": {
            "name": "launch_command",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "summaries": [
                    "str",
                    "List[Tuple[str, int]]",
                    "Callable[[str], str]",
                    "bool"
                ],
                "name": [
                    "str",
                    "List[Tuple[str, int]]",
                    "Callable[[str], str]",
                    "bool"
                ],
                "command": [
                    "str"
                ]
            }
        },
        "print_summaries": {
            "name": "print_summaries",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "summaries": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "print_summaries.text_summary": {
            "name": "text_summary",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "return_code": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "son-analyze-master/son-scikit/setup.py": {
        "read": {
            "name": "read",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "find_version": {
            "name": "find_version",
            "location": 46,
            "return": [
                "bool",
                "str",
                "Union[int, float, complex]"
            ],
            "arguments": {}
        }
    },
    "son-analyze-master/son-scikit/src/son_scikit/hl_prometheus.py": {
        "convert_timestamp_to_posix": {
            "name": "convert_timestamp_to_posix",
            "location": 37,
            "return": [
                "str",
                "int",
                "datetime.datetime"
            ],
            "arguments": {
                "timestamp": [
                    "str",
                    "float",
                    "datetime.timedelta",
                    "int",
                    "datetime.datetime"
                ]
            }
        },
        "build_sonata_df_by_id": {
            "name": "build_sonata_df_by_id",
            "location": 44,
            "return": [
                "str",
                "int",
                "list",
                "bool",
                "List[\"models.Name\"]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "prom_data": [
                    "str",
                    "bool",
                    "Tuple[int, int]",
                    "int",
                    "Optional[Any]"
                ]
            }
        }
    },
    "son-analyze-master/son-scikit/src/son_scikit/hl_utils.py": {
        "reset": {
            "name": "reset",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "arr": [
                    "str",
                    "Tuple[str, str]",
                    "float"
                ]
            }
        },
        "interval_to_now": {
            "name": "interval_to_now",
            "location": 43,
            "return": [
                "Optional[str]",
                "str",
                "pandas.Timestamp"
            ],
            "arguments": {
                "grace_seconds": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        },
        "smooth_dataframe": {
            "name": "smooth_dataframe",
            "location": 59,
            "return": [
                "pandas.DataFrame",
                "str",
                "bool"
            ],
            "arguments": {
                "dataf": [
                    "bool"
                ],
                "window": [
                    "bool"
                ]
            }
        }
    },
    "son-analyze-master/son-scikit/src/son_scikit/__init__.py": {},
    "son-analyze-master/son-scikit/src/son_scikit/resources/helpers.py": {
        "foobar": {
            "name": "foobar",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "shade_color": {
            "name": "shade_color",
            "location": 20,
            "return": [
                "List[str]",
                "Tuple[str, int, str]",
                "Type",
                "Type[Any]",
                "float",
                "Type[T]"
            ],
            "arguments": {
                "color": [
                    "int",
                    "Callable",
                    "str"
                ],
                "percent": [
                    "int",
                    "float"
                ]
            }
        },
        "test_stationarity": {
            "name": "test_stationarity",
            "location": 48,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "dataf": [
                    "List[str]",
                    "bool",
                    "Set[int]"
                ]
            }
        },
        "autocorrelation_plot": {
            "name": "autocorrelation_plot",
            "location": 91,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tserie": [
                    "Tuple['cirq.Qid']",
                    "Dict[str, str]",
                    "str",
                    "dict"
                ],
                "lags": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "son-analyze-master/son-scikit/src/son_scikit/resources/__init__.py": {},
    "son-analyze-master/son-scikit/tests/__init__.py": {},
    "son-analyze-master/son-scikit/tests/unit/conftest.py": {
        "_find_sonanalyze_fixtures": {
            "name": "_find_sonanalyze_fixtures",
            "location": 36,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "_read_static_fixtures_file": {
            "name": "_read_static_fixtures_file",
            "location": 41,
            "return": [
                "str",
                "List[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "relative_path": [
                    "str"
                ],
                "from_sonanalyze": [
                    "str",
                    "Union[Dict[str, Any], List[Any]]",
                    "Tuple[str]",
                    "List[str]",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "basic_query_01": {
            "name": "basic_query_01",
            "location": 54,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "son-analyze-master/son-scikit/tests/unit/__init__.py": {},
    "son-analyze-master/son-scikit/tests/unit/son_scikit/hl_prometheus_test.py": {
        "test_build_sonata_df": {
            "name": "test_build_sonata_df",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "basic_query_01": [
                    "bool"
                ]
            }
        },
        "test_build_sonata_df.trans": {
            "name": "trans",
            "location": 50,
            "return": [
                "str",
                "Mapping[str, Any]",
                "List[List[str]]",
                "Optional[bool]",
                "int",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "t": [
                    "pathpy.core.network.Network",
                    "set"
                ]
            }
        }
    },
    "son-analyze-master/son-scikit/tests/unit/son_scikit/hl_utils_test.py": {
        "test_now": {
            "name": "test_now",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "son-analyze-master/son-scikit/tests/unit/son_scikit/__init__.py": {},
    "son-analyze-master/src/son_analyze/__init__.py": {},
    "son-analyze-master/src/son_analyze/cli/fetch_cmd.py": {
        "_print_yml_to_stdout": {
            "name": "_print_yml_to_stdout",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "values": [
                    "str",
                    "Optional[int]",
                    "Union[str, bytes]",
                    "Union[bytes, str, None]",
                    "bool"
                ]
            }
        },
        "_not_available": {
            "name": "_not_available",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "fetch_cmd": {
            "name": "fetch_cmd",
            "location": 54,
            "return": [
                "Union[tuple, list]",
                "ops.Gate",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "gatekeeper": [
                    "bool",
                    "str",
                    "int"
                ],
                "workspace_path": [
                    "bool",
                    "str",
                    "int"
                ],
                "skind": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "target": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "son-analyze-master/src/son_analyze/cli/main.py": {
        "bootstrap": {
            "name": "bootstrap",
            "location": 51,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "run": {
            "name": "run",
            "location": 72,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "version": {
            "name": "version",
            "location": 141,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "resource_target": {
            "name": "resource_target",
            "location": 150,
            "return": [],
            "arguments": {
                "raw_target": []
            }
        },
        "url_type": {
            "name": "url_type",
            "location": 170,
            "return": [],
            "arguments": {
                "raw_url": []
            }
        },
        "fetch_func": {
            "name": "fetch_func",
            "location": 180,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "dispatch": {
            "name": "dispatch",
            "location": 187,
            "return": [],
            "arguments": {
                "raw_args": []
            }
        },
        "main": {
            "name": "main",
            "location": 254,
            "return": [],
            "arguments": {}
        },
        "run.cleanup": {
            "name": "cleanup",
            "location": 120,
            "return": [],
            "arguments": {}
        },
        "run.signal_term_handler": {
            "name": "signal_term_handler",
            "location": 124,
            "return": [],
            "arguments": {
                "unused1": [],
                "unused2": []
            }
        },
        "dispatch.no_command": {
            "name": "no_command",
            "location": 204,
            "return": [],
            "arguments": {
                "_": []
            }
        }
    },
    "son-analyze-master/src/son_analyze/cli/__init__.py": {},
    "son-analyze-master/src/son_analyze/cli/resources/__init__.py": {},
    "son-analyze-master/src/son_analyze/core/prometheus.py": {
        "PrometheusData.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_json": [
                    "str",
                    "bool"
                ],
                "normalize_name": [
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "PrometheusData._rectify_types": {
            "name": "_rectify_types",
            "location": 49,
            "return": [
                "Iterator[Tuple[str, str]]",
                "int",
                "Optional[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrometheusData._build_indexes": {
            "name": "_build_indexes",
            "location": 69,
            "return": [
                "str",
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrometheusData.is_success": {
            "name": "is_success",
            "location": 95,
            "return": [
                "int",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrometheusData.get_metric_values": {
            "name": "get_metric_values",
            "location": 101,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "str",
                "Optional[float]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "metric_name": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]",
                    "Optional[float]"
                ],
                "target_id": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]",
                    "Optional[float]"
                ]
            }
        },
        "PrometheusData.add_entry": {
            "name": "add_entry",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "metric": []
            }
        },
        "PrometheusData._rectify_types.get_conv": {
            "name": "get_conv",
            "location": 60,
            "return": [
                "Optional[str]",
                "Optional[Dict[str, Any]]",
                "str",
                "int",
                "Optional[bool]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "PrometheusData.get_metric_values.somefilter": {
            "name": "somefilter",
            "location": 106,
            "return": [
                "str",
                "List[str]",
                "Optional[int]",
                "Type"
            ],
            "arguments": {
                "result": [
                    "bool",
                    "Tuple[str, str]",
                    "int",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "float"
                ]
            }
        }
    },
    "son-analyze-master/src/son_analyze/core/types.py": {},
    "son-analyze-master/src/son_analyze/core/__init__.py": {},
    "son-analyze-master/src/son_analyze/ops/batch.py": {
        "_create_batches": {
            "name": "_create_batches",
            "location": 40,
            "return": [
                "bool",
                "Union[int, float, complex]",
                "Optional[str]"
            ],
            "arguments": {
                "start": [
                    "int",
                    "Optional[\"Money\"]",
                    "Optional[int]",
                    "float"
                ],
                "end": [
                    "int",
                    "bool",
                    "datetime.datetime",
                    "float"
                ],
                "batch_size": [
                    "int",
                    "Optional[int]",
                    "bool",
                    "Optional[float]",
                    "Sequence[int]",
                    "List[int]"
                ]
            }
        },
        "batch_raw_query": {
            "name": "batch_raw_query",
            "location": 53,
            "return": [
                "typing.Iterable[builtins.bytes]"
            ],
            "arguments": {
                "prometheus_endpoint": [
                    "urllib.parse.ParseResult",
                    "str",
                    "int",
                    "bool"
                ],
                "start_timestamp": [
                    "int",
                    "datetime.datetime",
                    "str"
                ],
                "end_timestamp": [
                    "int",
                    "datetime.datetime",
                    "str"
                ],
                "step": [
                    "datetime.timedelta",
                    "int"
                ],
                "query": [
                    "urllib.parse.ParseResult",
                    "str",
                    "int",
                    "bool"
                ],
                "maxpts": [
                    "datetime.timedelta",
                    "int"
                ]
            }
        },
        "batch_raw_query.sub": {
            "name": "sub",
            "location": 63,
            "return": [
                "str",
                "bytes",
                "Tuple[int, int]"
            ],
            "arguments": {
                "sub_start": [
                    "int",
                    "float"
                ],
                "sub_end": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "son-analyze-master/src/son_analyze/ops/fetch.py": {
        "_get_workspace_token": {
            "name": "_get_workspace_token",
            "location": 61,
            "return": [
                "str",
                "int",
                "tuple",
                "List[str]"
            ],
            "arguments": {
                "workspace_dir": [
                    "str",
                    "Union[List, str]"
                ]
            }
        },
        "_get_path_from_kind": {
            "name": "_get_path_from_kind",
            "location": 84,
            "return": [
                "str",
                "list",
                "List[str]",
                "Dict[str, Any]",
                "Sequence[str]"
            ],
            "arguments": {
                "kind": [
                    "int",
                    "Dict[int, int]",
                    "BaseException",
                    "str",
                    "bool"
                ]
            }
        },
        "_get_childrend_kind": {
            "name": "_get_childrend_kind",
            "location": 99,
            "return": [
                "Optional[str]",
                "bool",
                "list",
                "bytes",
                "str"
            ],
            "arguments": {
                "kind": [
                    "int",
                    "str",
                    "urllib.parse.ParseResult"
                ]
            }
        },
        "fetch_resource_by_uuid": {
            "name": "fetch_resource_by_uuid",
            "location": 118,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "gatekeeper_endpoint": [
                    "str"
                ],
                "workspace_dir": [
                    "str",
                    "int",
                    "bool"
                ],
                "kind": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Mapping[str, int]"
                ],
                "uuid": [
                    "str"
                ]
            }
        },
        "fetch_resource": {
            "name": "fetch_resource",
            "location": 153,
            "return": [
                "str",
                "list",
                "Optional[BaseException]"
            ],
            "arguments": {
                "gatekeeper_endpoint": [
                    "str",
                    "int",
                    "float"
                ],
                "workspace_dir": [
                    "str",
                    "Sequence[str]",
                    "int",
                    "bool"
                ],
                "kind": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[int]"
                ],
                "vendor": [
                    "str",
                    "dict"
                ],
                "name": [
                    "Dict[str, Any]",
                    "dict",
                    "T",
                    "MutableMapping",
                    "str"
                ],
                "version": [
                    "str",
                    "dict"
                ]
            }
        },
        "_complete_nsd_with_vnfds": {
            "name": "_complete_nsd_with_vnfds",
            "location": 201,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "gatekeeper_endpoint": [
                    "str",
                    "int"
                ],
                "workspace_dir": [
                    "str",
                    "int"
                ],
                "uuid": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "nsd": [
                    "str"
                ],
                "kchildren": [
                    "str",
                    "int"
                ]
            }
        },
        "fetch_resources": {
            "name": "fetch_resources",
            "location": 227,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "gatekeeper_endpoint": [
                    "str",
                    "Iterable[str]",
                    "Dict[str, Any]",
                    "Optional[int]"
                ],
                "workspace_dir": [
                    "str",
                    "Iterable[str]",
                    "Dict[str, Any]",
                    "Optional[int]"
                ],
                "kind": [
                    "str",
                    "Iterable[str]",
                    "Optional[int]",
                    "bool"
                ],
                "vendor": [
                    "str",
                    "Dict[str, Any]",
                    "Iterable[str]"
                ],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "Iterable[str]"
                ],
                "version": [
                    "str",
                    "Dict[str, Any]",
                    "Iterable[str]"
                ]
            }
        },
        "fetch_resources_by_uuid": {
            "name": "fetch_resources_by_uuid",
            "location": 241,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "gatekeeper_endpoint": [
                    "str",
                    "bool",
                    "int"
                ],
                "workspace_dir": [
                    "str",
                    "bool",
                    "int"
                ],
                "kind": [
                    "str",
                    "int"
                ],
                "uuid": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "InvalidResourceReferenceError.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nsd": [
                    "str",
                    "int",
                    "bool"
                ],
                "missing_vnf_id": [
                    "int",
                    "bytearray",
                    "bytes",
                    "Optional[int]",
                    "str"
                ]
            }
        }
    },
    "son-analyze-master/src/son_analyze/ops/__init__.py": {},
    "son-analyze-master/tests/__init__.py": {},
    "son-analyze-master/tests/unit/conftest.py": {
        "_read_static_fixtures_file": {
            "name": "_read_static_fixtures_file",
            "location": 42,
            "return": [
                "str",
                "List[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "relative_path": [
                    "str"
                ]
            }
        },
        "basic_query_01": {
            "name": "basic_query_01",
            "location": 53,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "empty_result": {
            "name": "empty_result",
            "location": 58,
            "return": [
                "str",
                "Tuple[str, str]",
                "Tuple[str]"
            ],
            "arguments": {}
        },
        "error_result": {
            "name": "error_result",
            "location": 63,
            "return": [
                "Optional[str]",
                "dict"
            ],
            "arguments": {}
        },
        "sonata_demo_nsd_91460c67": {
            "name": "sonata_demo_nsd_91460c67",
            "location": 68,
            "return": [
                "Dict[str, int]",
                "int",
                "Mapping[Any, Any]"
            ],
            "arguments": {}
        },
        "iperf_vnfd_d0ac3202": {
            "name": "iperf_vnfd_d0ac3202",
            "location": 75,
            "return": [
                "int",
                "float"
            ],
            "arguments": {}
        },
        "firewall_vnfd_dce50374": {
            "name": "firewall_vnfd_dce50374",
            "location": 82,
            "return": [
                "Dict[str, Any]",
                "str",
                "dict",
                "int"
            ],
            "arguments": {}
        },
        "tcpdump_vnfd_18741f2a": {
            "name": "tcpdump_vnfd_18741f2a",
            "location": 89,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {}
        },
        "sonata_demo_mock": {
            "name": "sonata_demo_mock",
            "location": 96,
            "return": [
                "str",
                "dict",
                "bool",
                "list",
                "set"
            ],
            "arguments": {
                "sonata_demo_nsd_91460c67": [
                    "bool",
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "Optional[List[str]]",
                    "Dict[str, Any]"
                ],
                "iperf_vnfd_d0ac3202": [
                    "bool",
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "Optional[List[str]]",
                    "Dict[str, Any]"
                ],
                "firewall_vnfd_dce50374": [
                    "bool",
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "Optional[List[str]]",
                    "Dict[str, Any]"
                ],
                "tcpdump_vnfd_18741f2a": [
                    "bool",
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "Optional[List[str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "firewall_vnfr_9b4663bc": {
            "name": "firewall_vnfr_9b4663bc",
            "location": 133,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "iperf_vnfr_0896785c": {
            "name": "iperf_vnfr_0896785c",
            "location": 139,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {}
        },
        "tcpdump_vnfr_6b64cc54": {
            "name": "tcpdump_vnfr_6b64cc54",
            "location": 145,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "sonata_demo_nsr_0295d535": {
            "name": "sonata_demo_nsr_0295d535",
            "location": 151,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "sonata_demo_nsr_mock": {
            "name": "sonata_demo_nsr_mock",
            "location": 157,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "sonata_demo_nsr_0295d535": [
                    "bool",
                    "int",
                    "Optional[int]"
                ],
                "iperf_vnfr_0896785c": [
                    "bool",
                    "int",
                    "Optional[int]"
                ],
                "firewall_vnfr_9b4663bc": [
                    "bool",
                    "int",
                    "Optional[int]"
                ],
                "tcpdump_vnfr_6b64cc54": [
                    "bool",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "empty_vnf1_sonemu_rx_count_packets": {
            "name": "empty_vnf1_sonemu_rx_count_packets",
            "location": 180,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "empty_vnf1_sonemu_tx_count_packets": {
            "name": "empty_vnf1_sonemu_tx_count_packets",
            "location": 187,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "mn_empty_vnf1_container_memory_usage_bytes": {
            "name": "mn_empty_vnf1_container_memory_usage_bytes",
            "location": 194,
            "return": [
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {}
        },
        "sonemu_batches_cnt_mem": {
            "name": "sonemu_batches_cnt_mem",
            "location": 201,
            "return": [
                "List[Dict]",
                "List[str]",
                "List[int]",
                "str",
                "List[List[Any]]"
            ],
            "arguments": {}
        },
        "tmp_workspace_dir": {
            "name": "tmp_workspace_dir",
            "location": 215,
            "return": [
                "typing.Iterable[builtins.str]"
            ],
            "arguments": {}
        },
        "sonata_demo_mock.compute_urls": {
            "name": "compute_urls",
            "location": 113,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool"
                ],
                "uuid": [
                    "str",
                    "bool"
                ],
                "val": [
                    "str",
                    "bool"
                ]
            }
        },
        "sonata_demo_nsr_mock.compute_url": {
            "name": "compute_url",
            "location": 170,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool",
                    "Tuple[str]",
                    "Optional[Tuple[str, ...]]"
                ],
                "val": [
                    "str",
                    "bool",
                    "Tuple[str]",
                    "Optional[Tuple[str, ...]]"
                ]
            }
        }
    },
    "son-analyze-master/tests/unit/__init__.py": {},
    "son-analyze-master/tests/unit/son_analyze/__init__.py": {},
    "son-analyze-master/tests/unit/son_analyze/cli/fetch_cmd_test.py": {
        "test_fetch_cmd": {
            "name": "test_fetch_cmd",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "bool",
                    "int"
                ],
                "tmp_workspace_dir": [
                    "str",
                    "Dict[str, Any]",
                    "tsrc.teshelpers.cli.CLI"
                ],
                "sonata_demo_mock": [
                    "str"
                ]
            }
        }
    },
    "son-analyze-master/tests/unit/son_analyze/cli/main_test.py": {
        "docker_cli": {
            "name": "docker_cli",
            "location": 45,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "test_version": {
            "name": "test_version",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "capsys": [
                    "float",
                    "Mapping[str, Any]"
                ]
            }
        },
        "run_bg": {
            "name": "run_bg",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "str",
                    "Callable"
                ]
            }
        },
        "test_run": {
            "name": "test_run",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "docker_cli": []
            }
        },
        "run_bg.fin": {
            "name": "fin",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "son-analyze-master/tests/unit/son_analyze/cli/__init__.py": {},
    "son-analyze-master/tests/unit/son_analyze/core/prometheus_test.py": {
        "test_prometheus_data_load": {
            "name": "test_prometheus_data_load",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "basic_query_01": [
                    "str",
                    "List[src.main.core.models.window.Window]",
                    "int",
                    "List[src.main.core.models.display.Display]"
                ],
                "empty_result": [
                    "str",
                    "List[src.main.core.models.window.Window]",
                    "int",
                    "List[src.main.core.models.display.Display]"
                ],
                "error_result": [
                    "str",
                    "List[src.main.core.models.window.Window]",
                    "int",
                    "List[src.main.core.models.display.Display]"
                ]
            }
        },
        "test_add_metric_entry": {
            "name": "test_add_metric_entry",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "basic_query_01": []
            }
        },
        "test_prometheus_data_medium_cnt_load": {
            "name": "test_prometheus_data_medium_cnt_load",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "mn_empty_vnf1_container_memory_usage_bytes": []
            }
        },
        "test_prometheus_data_medium_emu_load": {
            "name": "test_prometheus_data_medium_emu_load",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "empty_vnf1_sonemu_rx_count_packets": []
            }
        }
    },
    "son-analyze-master/tests/unit/son_analyze/ops/batch_test.py": {
        "test__create_batches": {
            "name": "test__create_batches",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_batch_raw_query": {
            "name": "test_batch_raw_query",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]"
                ],
                "sonemu_batches_cnt_mem": []
            }
        }
    },
    "son-analyze-master/tests/unit/son_analyze/ops/fetch_test.py": {
        "test_tmp_workspace_dir": {
            "name": "test_tmp_workspace_dir",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "logging.Logger"
                ],
                "tmp_workspace_dir": [
                    "str"
                ]
            }
        },
        "test_fetch_nsd": {
            "name": "test_fetch_nsd",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "str"
                ],
                "tmp_workspace_dir": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[Callable[[Any], None]]"
                ],
                "sonata_demo_mock": [
                    "str"
                ]
            }
        },
        "test_fetch_vnfd_by_uuid": {
            "name": "test_fetch_vnfd_by_uuid",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "str"
                ],
                "tmp_workspace_dir": [
                    "str"
                ],
                "sonata_demo_mock": [
                    "str"
                ]
            }
        },
        "test_fetch_nfd_by_uuid": {
            "name": "test_fetch_nfd_by_uuid",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "caplog": [
                    "logging.Logger",
                    "Optional[logging.Logger]",
                    "str"
                ],
                "tmp_workspace_dir": [
                    "str"
                ],
                "sonata_demo_mock": [
                    "str"
                ]
            }
        }
    },
    "son-analyze-master/tests/unit/son_analyze/ops/__init__.py": {},
    "son-analyze-master/utils/ci/int_alpha_emulator_workflow.py": {
        "docker_client": {
            "name": "docker_client",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "son_cli_image": {
            "name": "son_cli_image",
            "location": 52,
            "return": [],
            "arguments": {
                "docker_client": []
            }
        },
        "prune_labeled_containers": {
            "name": "prune_labeled_containers",
            "location": 65,
            "return": [],
            "arguments": {
                "docker_client": [],
                "label": []
            }
        },
        "container_is_running": {
            "name": "container_is_running",
            "location": 73,
            "return": [],
            "arguments": {
                "docker_client": [],
                "name": []
            }
        },
        "_create_son_cli_cnt": {
            "name": "_create_son_cli_cnt",
            "location": 82,
            "return": [],
            "arguments": {
                "docker_client": [],
                "son_cli_image": [],
                "label": []
            }
        },
        "_son_cli": {
            "name": "_son_cli",
            "location": 106,
            "return": [],
            "arguments": {
                "docker_client": [],
                "son_cli_image": []
            }
        },
        "son_cli": {
            "name": "son_cli",
            "location": 165,
            "return": [],
            "arguments": {
                "_son_cli": []
            }
        },
        "vnf_image": {
            "name": "vnf_image",
            "location": 176,
            "return": [],
            "arguments": {
                "docker_client": []
            }
        },
        "msd_service": {
            "name": "msd_service",
            "location": 189,
            "return": [],
            "arguments": {}
        },
        "service_packages": {
            "name": "service_packages",
            "location": 199,
            "return": [],
            "arguments": {
                "son_cli": [],
                "vnf_image": []
            }
        },
        "test_run": {
            "name": "test_run",
            "location": 213,
            "return": [],
            "arguments": {
                "son_cli": [],
                "service_packages": [],
                "docker_client": [],
                "msd_service": []
            }
        },
        "_son_cli.run_in_son_cli": {
            "name": "run_in_son_cli",
            "location": 136,
            "return": [],
            "arguments": {
                "timeout_sec": [],
                "command": []
            }
        }
    },
    "son-analyze-master/utils/ci/topology_integration.py": {
        "setup_topology": {
            "name": "setup_topology",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "net": [
                    "cmk.base.api.agent_based.type_defs.Parameters",
                    "bytes"
                ]
            }
        },
        "create_and_start_topology": {
            "name": "create_and_start_topology",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "lock": [
                    "int",
                    "set",
                    "str"
                ],
                "restart_lock": [
                    "int",
                    "set",
                    "str"
                ]
            }
        },
        "spawn_process": {
            "name": "spawn_process",
            "location": 125,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sc": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "create_socket": {
            "name": "create_socket",
            "location": 137,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "listen_socket": {
            "name": "listen_socket",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "server": [
                    "str",
                    "bool",
                    "Callable",
                    "Optional[int]"
                ],
                "sc": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "spawn_socket_thread": {
            "name": "spawn_socket_thread",
            "location": 176,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "sc": [
                    "List[str]",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "SigTermCatcher.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SigTermCatcher.setup_signal": {
            "name": "setup_signal",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SigTermCatcher.ignore_signal": {
            "name": "ignore_signal",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SigTermCatcher.restore_signal": {
            "name": "restore_signal",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SigTermCatcher.register": {
            "name": "register",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "forked_process": [
                    "int",
                    "Callable",
                    "str"
                ],
                "lock": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "SigTermCatcher.stop_containernet": {
            "name": "stop_containernet",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "signum": [
                    "str",
                    "int",
                    "float",
                    "List[List[float]]",
                    "bool"
                ],
                "frame": [
                    "str",
                    "int",
                    "float",
                    "List[List[float]]",
                    "bool"
                ]
            }
        },
        "SigTermCatcher.restart_containernet": {
            "name": "restart_containernet",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "signum": [
                    "str",
                    "int",
                    "float",
                    "List[List[float]]",
                    "bool"
                ],
                "frame": [
                    "str",
                    "int",
                    "float",
                    "List[List[float]]",
                    "bool"
                ]
            }
        },
        "SigTermCatcher.is_alive": {
            "name": "is_alive",
            "location": 80,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SigTermCatcher.add": {
            "name": "add",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "to_be_stopped": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "son-analyze-master/utils/ci/fixtures/sonata-integration/sources/image/p.py": {
        "c": {
            "name": "c",
            "location": 21,
            "return": [
                "T",
                "float",
                "str",
                "int"
            ],
            "arguments": {
                "x_in_period": [
                    "int",
                    "Tuple[str]",
                    "float"
                ]
            }
        },
        "d": {
            "name": "d",
            "location": 30,
            "return": [
                "list",
                "List[T]",
                "List[float]",
                "Optional[int]"
            ],
            "arguments": {
                "x": [
                    "Union[bytes, bytearray, memoryview]",
                    "float",
                    "int"
                ]
            }
        },
        "inverse": {
            "name": "inverse",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "y": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "loop": {
            "name": "loop",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "limit": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        }
    }
}
{
    "soup-io-downloader-master/setup.py": {},
    "soup-io-downloader-master/soup_downloader/download_content.py": {
        "download_content": {
            "name": "download_content",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "urls_file_name": [
                    "str",
                    "Optional[str]"
                ],
                "download_dir": [
                    "str"
                ]
            }
        },
        "download_single": {
            "name": "download_single",
            "location": 23,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "url": [
                    "str",
                    "dict"
                ],
                "target_path": [
                    "str",
                    "BinaryIO"
                ]
            }
        }
    },
    "soup-io-downloader-master/soup_downloader/get_content_urls.py": {
        "get_content_url": {
            "name": "get_content_url",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "content_tag": [
                    "Dict[str, str]",
                    "bs4.elemenTag",
                    "str",
                    "Optional[str]",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "AbstractSoupPageSourceProvider.get_source": {
            "name": "get_source",
            "location": 32,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Callable[[str], str]",
                    "dict"
                ]
            }
        },
        "WebSoupPageSourceProvider.get_source": {
            "name": "get_source",
            "location": 38,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "url": [
                    "str",
                    "dict"
                ]
            }
        },
        "SoupPage.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "html": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "SoupPage.get_next_page_relative_url": {
            "name": "get_next_page_relative_url",
            "location": 46,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SoupPage.get_content_urls": {
            "name": "get_content_urls",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Soup.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "List[str]",
                    "str",
                    "Optional[str]",
                    "list",
                    "logging.Logger"
                ],
                "source_provider": [
                    "str",
                    "int",
                    "type",
                    "bool"
                ]
            }
        },
        "Soup.__iter__": {
            "name": "__iter__",
            "location": 70,
            "return": [
                "typing.Iterator[SoupPage]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Soup.get_next_page_url": {
            "name": "get_next_page_url",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "soup_page": [
                    "eth.abc.ComputationAPI",
                    "List[Tuple[str, int]]",
                    "str"
                ]
            }
        }
    },
    "soup-io-downloader-master/soup_downloader/__init__.py": {},
    "soup-io-downloader-master/stubs/bs4/dammit.py": {
        "chardet_dammit": {
            "name": "chardet_dammit",
            "location": 10,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "EntitySubstitution.quoted_attribute_value": {
            "name": "quoted_attribute_value",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "EntitySubstitution.substitute_xml": {
            "name": "substitute_xml",
            "location": 25,
            "return": [],
            "arguments": {
                "cls": [],
                "value": [],
                "make_quoted_attribute": []
            }
        },
        "EntitySubstitution.substitute_xml_containing_entities": {
            "name": "substitute_xml_containing_entities",
            "location": 27,
            "return": [],
            "arguments": {
                "cls": [],
                "value": [],
                "make_quoted_attribute": []
            }
        },
        "EntitySubstitution.substitute_html": {
            "name": "substitute_html",
            "location": 29,
            "return": [],
            "arguments": {
                "cls": [],
                "s": []
            }
        },
        "EncodingDetector.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "markup": [],
                "override_encodings": [],
                "is_html": [],
                "exclude_encodings": []
            }
        },
        "EncodingDetector.encodings": {
            "name": "encodings",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EncodingDetector.strip_byte_order_mark": {
            "name": "strip_byte_order_mark",
            "location": 41,
            "return": [],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "EncodingDetector.find_declared_encoding": {
            "name": "find_declared_encoding",
            "location": 43,
            "return": [],
            "arguments": {
                "cls": [],
                "markup": [],
                "is_html": [],
                "search_entire_document": []
            }
        },
        "UnicodeDammit.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "markup": [],
                "override_encodings": [],
                "smart_quotes_to": [],
                "is_html": [],
                "exclude_encodings": []
            }
        },
        "UnicodeDammit.declared_html_encoding": {
            "name": "declared_html_encoding",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnicodeDammit.find_codec": {
            "name": "find_codec",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "charset": []
            }
        },
        "UnicodeDammit.detwingle": {
            "name": "detwingle",
            "location": 68,
            "return": [],
            "arguments": {
                "cls": [],
                "in_bytes": [],
                "main_encoding": [],
                "embedded_encoding": []
            }
        }
    },
    "soup-io-downloader-master/stubs/bs4/diagnose.py": {
        "diagnose": {
            "name": "diagnose",
            "location": 10,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "lxml_trace": {
            "name": "lxml_trace",
            "location": 11,
            "return": [],
            "arguments": {
                "data": [],
                "html": []
            }
        },
        "htmlparser_trace": {
            "name": "htmlparser_trace",
            "location": 24,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "rword": {
            "name": "rword",
            "location": 25,
            "return": [],
            "arguments": {
                "length": []
            }
        },
        "rsentence": {
            "name": "rsentence",
            "location": 26,
            "return": [],
            "arguments": {
                "length": []
            }
        },
        "rdoc": {
            "name": "rdoc",
            "location": 27,
            "return": [],
            "arguments": {
                "num_elements": []
            }
        },
        "benchmark_parsers": {
            "name": "benchmark_parsers",
            "location": 28,
            "return": [],
            "arguments": {
                "num_elements": []
            }
        },
        "profile": {
            "name": "profile",
            "location": 29,
            "return": [],
            "arguments": {
                "num_elements": [],
                "parser": []
            }
        },
        "AnnouncingParser.handle_starttag": {
            "name": "handle_starttag",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "attrs": []
            }
        },
        "AnnouncingParser.handle_endtag": {
            "name": "handle_endtag",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "AnnouncingParser.handle_data": {
            "name": "handle_data",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "AnnouncingParser.handle_charref": {
            "name": "handle_charref",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "AnnouncingParser.handle_entityref": {
            "name": "handle_entityref",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "AnnouncingParser.handle_comment": {
            "name": "handle_comment",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "AnnouncingParser.handle_decl": {
            "name": "handle_decl",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "AnnouncingParser.unknown_decl": {
            "name": "unknown_decl",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "AnnouncingParser.handle_pi": {
            "name": "handle_pi",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "soup-io-downloader-master/stubs/bs4/element.py": {
        "NamespacedAttribute.__new__": {
            "name": "__new__",
            "location": 15,
            "return": [],
            "arguments": {
                "cls": [],
                "prefix": [],
                "name": [],
                "namespace": []
            }
        },
        "CharsetMetaAttributeValue.__new__": {
            "name": "__new__",
            "location": 20,
            "return": [],
            "arguments": {
                "cls": [],
                "original_value": []
            }
        },
        "CharsetMetaAttributeValue.encode": {
            "name": "encode",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "encoding": []
            }
        },
        "ContentMetaAttributeValue.__new__": {
            "name": "__new__",
            "location": 25,
            "return": [],
            "arguments": {
                "cls": [],
                "original_value": []
            }
        },
        "ContentMetaAttributeValue.encode": {
            "name": "encode",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "encoding": []
            }
        },
        "HTMLAwareEntitySubstitution.substitute_html": {
            "name": "substitute_html",
            "location": 33,
            "return": [],
            "arguments": {
                "cls": [],
                "ns": []
            }
        },
        "HTMLAwareEntitySubstitution.substitute_xml": {
            "name": "substitute_xml",
            "location": 35,
            "return": [],
            "arguments": {
                "cls": [],
                "ns": []
            }
        },
        "Formatter.substitute_entities": {
            "name": "substitute_entities",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLFormatter.substitute": {
            "name": "substitute",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MinimalHTMLFormatter.substitute": {
            "name": "substitute",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XMLFormatter.substitute": {
            "name": "substitute",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLXMLFormatter.substitute": {
            "name": "substitute",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.format_string": {
            "name": "format_string",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "s": [],
                "formatter": []
            }
        },
        "PageElement.setup": {
            "name": "setup",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "parent": [],
                "previous_element": [],
                "next_element": [],
                "previous_sibling": [],
                "next_sibling": []
            }
        },
        "PageElement.replace_with": {
            "name": "replace_with",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "replace_with": []
            }
        },
        "PageElement.unwrap": {
            "name": "unwrap",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.wrap": {
            "name": "wrap",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "wrap_inside": []
            }
        },
        "PageElement.extract": {
            "name": "extract",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.insert": {
            "name": "insert",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "position": [],
                "new_child": []
            }
        },
        "PageElement.append": {
            "name": "append",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "tag": []
            }
        },
        "PageElement.extend": {
            "name": "extend",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "tags": []
            }
        },
        "PageElement.insert_before": {
            "name": "insert_before",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.insert_after": {
            "name": "insert_after",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.find_next": {
            "name": "find_next",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "attrs": [],
                "text": []
            }
        },
        "PageElement.find_all_next": {
            "name": "find_all_next",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "attrs": [],
                "text": [],
                "limit": []
            }
        },
        "PageElement.find_next_sibling": {
            "name": "find_next_sibling",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "attrs": [],
                "text": []
            }
        },
        "PageElement.find_next_siblings": {
            "name": "find_next_siblings",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "attrs": [],
                "text": [],
                "limit": []
            }
        },
        "PageElement.find_previous": {
            "name": "find_previous",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "attrs": [],
                "text": []
            }
        },
        "PageElement.find_all_previous": {
            "name": "find_all_previous",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "attrs": [],
                "text": [],
                "limit": []
            }
        },
        "PageElement.find_previous_sibling": {
            "name": "find_previous_sibling",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "attrs": [],
                "text": []
            }
        },
        "PageElement.find_previous_siblings": {
            "name": "find_previous_siblings",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "attrs": [],
                "text": [],
                "limit": []
            }
        },
        "PageElement.find_parent": {
            "name": "find_parent",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "attrs": []
            }
        },
        "PageElement.find_parents": {
            "name": "find_parents",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "attrs": [],
                "limit": []
            }
        },
        "PageElement.next": {
            "name": "next",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.previous": {
            "name": "previous",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.next_elements": {
            "name": "next_elements",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.next_siblings": {
            "name": "next_siblings",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.previous_elements": {
            "name": "previous_elements",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.previous_siblings": {
            "name": "previous_siblings",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.parents": {
            "name": "parents",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.nextGenerator": {
            "name": "nextGenerator",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.nextSiblingGenerator": {
            "name": "nextSiblingGenerator",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.previousGenerator": {
            "name": "previousGenerator",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.previousSiblingGenerator": {
            "name": "previousSiblingGenerator",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageElement.parentGenerator": {
            "name": "parentGenerator",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NavigableString.__new__": {
            "name": "__new__",
            "location": 128,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "NavigableString.__copy__": {
            "name": "__copy__",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NavigableString.__getnewargs__": {
            "name": "__getnewargs__",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NavigableString.__getattr__": {
            "name": "__getattr__",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "attr": []
            }
        },
        "NavigableString.output_ready": {
            "name": "output_ready",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "formatter": []
            }
        },
        "NavigableString.name": {
            "name": "name",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "PreformattedString.output_ready": {
            "name": "output_ready",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "formatter": []
            }
        },
        "Doctype.for_name_and_ids": {
            "name": "for_name_and_ids",
            "location": 163,
            "return": [],
            "arguments": {
                "cls": [],
                "name": [],
                "pub_id": [],
                "system_id": []
            }
        },
        "Tag.__init__": {
            "name": "__init__",
            "location": 178,
            "return": [],
            "arguments": {
                "self": [],
                "parser": [],
                "builder": [],
                "name": [],
                "namespace": [],
                "prefix": [],
                "attrs": [],
                "parent": [],
                "previous": [],
                "is_xml": []
            }
        },
        "Tag.__copy__": {
            "name": "__copy__",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tag.is_empty_element": {
            "name": "is_empty_element",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tag.string": {
            "name": "string",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "Tag.stripped_strings": {
            "name": "stripped_strings",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tag.get_text": {
            "name": "get_text",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "separator": [],
                "strip": [],
                "types": []
            }
        },
        "Tag.decompose": {
            "name": "decompose",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tag.clear": {
            "name": "clear",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "decompose": []
            }
        },
        "Tag.index": {
            "name": "index",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "element": []
            }
        },
        "Tag.get": {
            "name": "get",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "Tag.get_attribute_list": {
            "name": "get_attribute_list",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "default": []
            }
        },
        "Tag.has_attr": {
            "name": "has_attr",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Tag.__hash__": {
            "name": "__hash__",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tag.__getitem__": {
            "name": "__getitem__",
            "location": 201,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Tag.__iter__": {
            "name": "__iter__",
            "location": 202,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tag.__len__": {
            "name": "__len__",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tag.__contains__": {
            "name": "__contains__",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Tag.__bool__": {
            "name": "__bool__",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tag.__setitem__": {
            "name": "__setitem__",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "Tag.__delitem__": {
            "name": "__delitem__",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Tag.__call__": {
            "name": "__call__",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tag.__getattr__": {
            "name": "__getattr__",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "tag": []
            }
        },
        "Tag.__eq__": {
            "name": "__eq__",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Tag.__ne__": {
            "name": "__ne__",
            "location": 211,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Tag.__unicode__": {
            "name": "__unicode__",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tag.encode": {
            "name": "encode",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "encoding": [],
                "indent_level": [],
                "formatter": [],
                "errors": []
            }
        },
        "Tag.decode": {
            "name": "decode",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "indent_level": [],
                "eventual_encoding": [],
                "formatter": []
            }
        },
        "Tag.prettify": {
            "name": "prettify",
            "location": 215,
            "return": [],
            "arguments": {
                "self": [],
                "encoding": [],
                "formatter": []
            }
        },
        "Tag.decode_contents": {
            "name": "decode_contents",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "indent_level": [],
                "eventual_encoding": [],
                "formatter": []
            }
        },
        "Tag.encode_contents": {
            "name": "encode_contents",
            "location": 217,
            "return": [],
            "arguments": {
                "self": [],
                "indent_level": [],
                "encoding": [],
                "formatter": []
            }
        },
        "Tag.renderContents": {
            "name": "renderContents",
            "location": 218,
            "return": [],
            "arguments": {
                "self": [],
                "encoding": [],
                "prettyPrint": [],
                "indentLevel": []
            }
        },
        "Tag.find": {
            "name": "find",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "attrs": [],
                "recursive": [],
                "text": []
            }
        },
        "Tag.find_all": {
            "name": "find_all",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "attrs": [],
                "recursive": [],
                "text": [],
                "limit": []
            }
        },
        "Tag.children": {
            "name": "children",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tag.descendants": {
            "name": "descendants",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tag.select_one": {
            "name": "select_one",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "selector": [],
                "namespaces": []
            }
        },
        "Tag.select": {
            "name": "select",
            "location": 229,
            "return": [],
            "arguments": {
                "self": [],
                "selector": [],
                "namespaces": [],
                "limit": []
            }
        },
        "Tag.childGenerator": {
            "name": "childGenerator",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tag.recursiveChildGenerator": {
            "name": "recursiveChildGenerator",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tag.has_key": {
            "name": "has_key",
            "location": 232,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "SoupStrainer.__init__": {
            "name": "__init__",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "attrs": [],
                "text": []
            }
        },
        "SoupStrainer.search_tag": {
            "name": "search_tag",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "markup_name": [],
                "markup_attrs": []
            }
        },
        "SoupStrainer.search": {
            "name": "search",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "markup": []
            }
        },
        "ResultSet.__init__": {
            "name": "__init__",
            "location": 245,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "result": []
            }
        },
        "ResultSet.__getattr__": {
            "name": "__getattr__",
            "location": 246,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        }
    },
    "soup-io-downloader-master/stubs/bs4/testing.py": {
        "skipIf": {
            "name": "skipIf",
            "location": 109,
            "return": [],
            "arguments": {
                "condition": [],
                "reason": []
            }
        },
        "SoupTest.default_builder": {
            "name": "default_builder",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SoupTest.soup": {
            "name": "soup",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "markup": []
            }
        },
        "SoupTest.document_for": {
            "name": "document_for",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "markup": []
            }
        },
        "SoupTest.assertSoupEquals": {
            "name": "assertSoupEquals",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "to_parse": [],
                "compare_parsed_to": []
            }
        },
        "SoupTest.assertConnectedness": {
            "name": "assertConnectedness",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "element": []
            }
        },
        "SoupTest.linkage_validator": {
            "name": "linkage_validator",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "el": [],
                "_recursive_call": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_empty_element_tags": {
            "name": "test_empty_element_tags",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_pickle_and_unpickle_identity": {
            "name": "test_pickle_and_unpickle_identity",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.assertDoctypeHandled": {
            "name": "assertDoctypeHandled",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "doctype_fragment": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_normal_doctypes": {
            "name": "test_normal_doctypes",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_empty_doctype": {
            "name": "test_empty_doctype",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_public_doctype_with_url": {
            "name": "test_public_doctype_with_url",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_system_doctype": {
            "name": "test_system_doctype",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_namespaced_system_doctype": {
            "name": "test_namespaced_system_doctype",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_namespaced_public_doctype": {
            "name": "test_namespaced_public_doctype",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_real_xhtml_document": {
            "name": "test_real_xhtml_document",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_namespaced_html": {
            "name": "test_namespaced_html",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_processing_instruction": {
            "name": "test_processing_instruction",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_deepcopy": {
            "name": "test_deepcopy",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_p_tag_is_never_empty_element": {
            "name": "test_p_tag_is_never_empty_element",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_unclosed_tags_get_closed": {
            "name": "test_unclosed_tags_get_closed",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_br_is_always_empty_element_tag": {
            "name": "test_br_is_always_empty_element_tag",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_nested_formatting_elements": {
            "name": "test_nested_formatting_elements",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_double_head": {
            "name": "test_double_head",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_comment": {
            "name": "test_comment",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_preserved_whitespace_in_pre_and_textarea": {
            "name": "test_preserved_whitespace_in_pre_and_textarea",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_nested_inline_elements": {
            "name": "test_nested_inline_elements",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_nested_block_level_elements": {
            "name": "test_nested_block_level_elements",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_correctly_nested_tables": {
            "name": "test_correctly_nested_tables",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_multivalued_attribute_with_whitespace": {
            "name": "test_multivalued_attribute_with_whitespace",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_deeply_nested_multivalued_attribute": {
            "name": "test_deeply_nested_multivalued_attribute",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_multivalued_attribute_on_html": {
            "name": "test_multivalued_attribute_on_html",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_angle_brackets_in_attribute_values_are_escaped": {
            "name": "test_angle_brackets_in_attribute_values_are_escaped",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_strings_resembling_character_entity_references": {
            "name": "test_strings_resembling_character_entity_references",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_entities_in_foreign_document_encoding": {
            "name": "test_entities_in_foreign_document_encoding",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_entities_in_attributes_converted_to_unicode": {
            "name": "test_entities_in_attributes_converted_to_unicode",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_entities_in_text_converted_to_unicode": {
            "name": "test_entities_in_text_converted_to_unicode",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_quot_entity_converted_to_quotation_mark": {
            "name": "test_quot_entity_converted_to_quotation_mark",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_out_of_range_entity": {
            "name": "test_out_of_range_entity",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_multipart_strings": {
            "name": "test_multipart_strings",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_head_tag_between_head_and_body": {
            "name": "test_head_tag_between_head_and_body",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_multiple_copies_of_a_tag": {
            "name": "test_multiple_copies_of_a_tag",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_basic_namespaces": {
            "name": "test_basic_namespaces",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_multivalued_attribute_value_becomes_list": {
            "name": "test_multivalued_attribute_value_becomes_list",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_can_parse_unicode_document": {
            "name": "test_can_parse_unicode_document",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_soupstrainer": {
            "name": "test_soupstrainer",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_single_quote_attribute_values_become_double_quotes": {
            "name": "test_single_quote_attribute_values_become_double_quotes",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_attribute_values_with_nested_quotes_are_left_alone": {
            "name": "test_attribute_values_with_nested_quotes_are_left_alone",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_attribute_values_with_double_nested_quotes_get_quoted": {
            "name": "test_attribute_values_with_double_nested_quotes_get_quoted",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_ampersand_in_attribute_value_gets_escaped": {
            "name": "test_ampersand_in_attribute_value_gets_escaped",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_escaped_ampersand_in_attribute_value_is_left_alone": {
            "name": "test_escaped_ampersand_in_attribute_value_is_left_alone",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_entities_in_strings_converted_during_parsing": {
            "name": "test_entities_in_strings_converted_during_parsing",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_smart_quotes_converted_on_the_way_in": {
            "name": "test_smart_quotes_converted_on_the_way_in",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_non_breaking_spaces_converted_on_the_way_in": {
            "name": "test_non_breaking_spaces_converted_on_the_way_in",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_entities_converted_on_the_way_out": {
            "name": "test_entities_converted_on_the_way_out",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_real_iso_latin_document": {
            "name": "test_real_iso_latin_document",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_real_shift_jis_document": {
            "name": "test_real_shift_jis_document",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_real_hebrew_document": {
            "name": "test_real_hebrew_document",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_meta_tag_reflects_current_encoding": {
            "name": "test_meta_tag_reflects_current_encoding",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_html5_style_meta_tag_reflects_current_encoding": {
            "name": "test_html5_style_meta_tag_reflects_current_encoding",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_tag_with_no_attributes_can_have_attributes_added": {
            "name": "test_tag_with_no_attributes_can_have_attributes_added",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilderSmokeTest.test_worst_case": {
            "name": "test_worst_case",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XMLTreeBuilderSmokeTest.test_pickle_and_unpickle_identity": {
            "name": "test_pickle_and_unpickle_identity",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XMLTreeBuilderSmokeTest.test_docstring_generated": {
            "name": "test_docstring_generated",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XMLTreeBuilderSmokeTest.test_xml_declaration": {
            "name": "test_xml_declaration",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XMLTreeBuilderSmokeTest.test_processing_instruction": {
            "name": "test_processing_instruction",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XMLTreeBuilderSmokeTest.test_real_xhtml_document": {
            "name": "test_real_xhtml_document",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XMLTreeBuilderSmokeTest.test_nested_namespaces": {
            "name": "test_nested_namespaces",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XMLTreeBuilderSmokeTest.test_formatter_processes_script_tag_for_xml_documents": {
            "name": "test_formatter_processes_script_tag_for_xml_documents",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XMLTreeBuilderSmokeTest.test_can_parse_unicode_document": {
            "name": "test_can_parse_unicode_document",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XMLTreeBuilderSmokeTest.test_popping_namespaced_tag": {
            "name": "test_popping_namespaced_tag",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XMLTreeBuilderSmokeTest.test_docstring_includes_correct_encoding": {
            "name": "test_docstring_includes_correct_encoding",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XMLTreeBuilderSmokeTest.test_large_xml_document": {
            "name": "test_large_xml_document",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XMLTreeBuilderSmokeTest.test_tags_are_empty_element_if_and_only_if_they_are_empty": {
            "name": "test_tags_are_empty_element_if_and_only_if_they_are_empty",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XMLTreeBuilderSmokeTest.test_namespaces_are_preserved": {
            "name": "test_namespaces_are_preserved",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XMLTreeBuilderSmokeTest.test_closing_namespaced_tag": {
            "name": "test_closing_namespaced_tag",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XMLTreeBuilderSmokeTest.test_namespaced_attributes": {
            "name": "test_namespaced_attributes",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XMLTreeBuilderSmokeTest.test_namespaced_attributes_xml_namespace": {
            "name": "test_namespaced_attributes_xml_namespace",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XMLTreeBuilderSmokeTest.test_find_by_prefixed_name": {
            "name": "test_find_by_prefixed_name",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XMLTreeBuilderSmokeTest.test_copy_tag_preserves_namespace": {
            "name": "test_copy_tag_preserves_namespace",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "XMLTreeBuilderSmokeTest.test_worst_case": {
            "name": "test_worst_case",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTML5TreeBuilderSmokeTest.test_real_xhtml_document": {
            "name": "test_real_xhtml_document",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTML5TreeBuilderSmokeTest.test_html_tags_have_namespace": {
            "name": "test_html_tags_have_namespace",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTML5TreeBuilderSmokeTest.test_svg_tags_have_namespace": {
            "name": "test_svg_tags_have_namespace",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTML5TreeBuilderSmokeTest.test_mathml_tags_have_namespace": {
            "name": "test_mathml_tags_have_namespace",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTML5TreeBuilderSmokeTest.test_xml_declaration_becomes_comment": {
            "name": "test_xml_declaration_becomes_comment",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "soup-io-downloader-master/stubs/bs4/__init__.py": {
        "BeautifulSoup.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "markup": [],
                "features": [],
                "builder": [],
                "parse_only": [],
                "from_encoding": [],
                "exclude_encodings": []
            }
        },
        "BeautifulSoup.__copy__": {
            "name": "__copy__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BeautifulSoup.reset": {
            "name": "reset",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BeautifulSoup.new_tag": {
            "name": "new_tag",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "namespace": [],
                "nsprefix": [],
                "attrs": []
            }
        },
        "BeautifulSoup.new_string": {
            "name": "new_string",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "s": [],
                "subclass": []
            }
        },
        "BeautifulSoup.insert_before": {
            "name": "insert_before",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "successor": []
            }
        },
        "BeautifulSoup.insert_after": {
            "name": "insert_after",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "successor": []
            }
        },
        "BeautifulSoup.popTag": {
            "name": "popTag",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BeautifulSoup.pushTag": {
            "name": "pushTag",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "tag": []
            }
        },
        "BeautifulSoup.endData": {
            "name": "endData",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "containerClass": []
            }
        },
        "BeautifulSoup.object_was_parsed": {
            "name": "object_was_parsed",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "o": [],
                "parent": [],
                "most_recent_element": []
            }
        },
        "BeautifulSoup.handle_starttag": {
            "name": "handle_starttag",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "namespace": [],
                "nsprefix": [],
                "attrs": []
            }
        },
        "BeautifulSoup.handle_endtag": {
            "name": "handle_endtag",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "nsprefix": []
            }
        },
        "BeautifulSoup.handle_data": {
            "name": "handle_data",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "BeautifulSoup.decode": {
            "name": "decode",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "pretty_print": [],
                "eventual_encoding": [],
                "formatter": []
            }
        },
        "BeautifulStoneSoup.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "soup-io-downloader-master/stubs/bs4/builder/_htmlparser.py": {
        "BeautifulSoupHTMLParser.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BeautifulSoupHTMLParser.error": {
            "name": "error",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "BeautifulSoupHTMLParser.handle_startendtag": {
            "name": "handle_startendtag",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "attrs": []
            }
        },
        "BeautifulSoupHTMLParser.handle_starttag": {
            "name": "handle_starttag",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "attrs": [],
                "handle_empty_element": []
            }
        },
        "BeautifulSoupHTMLParser.handle_endtag": {
            "name": "handle_endtag",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "check_already_closed": []
            }
        },
        "BeautifulSoupHTMLParser.handle_data": {
            "name": "handle_data",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "BeautifulSoupHTMLParser.handle_charref": {
            "name": "handle_charref",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "BeautifulSoupHTMLParser.handle_entityref": {
            "name": "handle_entityref",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "BeautifulSoupHTMLParser.handle_comment": {
            "name": "handle_comment",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "BeautifulSoupHTMLParser.handle_decl": {
            "name": "handle_decl",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "BeautifulSoupHTMLParser.unknown_decl": {
            "name": "unknown_decl",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "BeautifulSoupHTMLParser.handle_pi": {
            "name": "handle_pi",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "HTMLParserTreeBuilder.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLParserTreeBuilder.prepare_markup": {
            "name": "prepare_markup",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "markup": [],
                "user_specified_encoding": [],
                "document_declared_encoding": [],
                "exclude_encodings": []
            }
        },
        "HTMLParserTreeBuilder.feed": {
            "name": "feed",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "markup": []
            }
        }
    },
    "soup-io-downloader-master/stubs/bs4/builder/__init__.py": {
        "TreeBuilderRegistry.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeBuilderRegistry.register": {
            "name": "register",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "treebuilder_class": []
            }
        },
        "TreeBuilderRegistry.lookup": {
            "name": "lookup",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeBuilder.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeBuilder.initialize_soup": {
            "name": "initialize_soup",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "soup": []
            }
        },
        "TreeBuilder.reset": {
            "name": "reset",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TreeBuilder.can_be_empty_element": {
            "name": "can_be_empty_element",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "tag_name": []
            }
        },
        "TreeBuilder.feed": {
            "name": "feed",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "markup": []
            }
        },
        "TreeBuilder.prepare_markup": {
            "name": "prepare_markup",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "markup": [],
                "user_specified_encoding": [],
                "document_declared_encoding": []
            }
        },
        "TreeBuilder.test_fragment_to_document": {
            "name": "test_fragment_to_document",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "fragment": []
            }
        },
        "TreeBuilder.set_up_substitutions": {
            "name": "set_up_substitutions",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "tag": []
            }
        },
        "SAXTreeBuilder.feed": {
            "name": "feed",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "markup": []
            }
        },
        "SAXTreeBuilder.close": {
            "name": "close",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SAXTreeBuilder.startElement": {
            "name": "startElement",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "attrs": []
            }
        },
        "SAXTreeBuilder.endElement": {
            "name": "endElement",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "SAXTreeBuilder.startElementNS": {
            "name": "startElementNS",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "nsTuple": [],
                "nodeName": [],
                "attrs": []
            }
        },
        "SAXTreeBuilder.endElementNS": {
            "name": "endElementNS",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "nsTuple": [],
                "nodeName": []
            }
        },
        "SAXTreeBuilder.startPrefixMapping": {
            "name": "startPrefixMapping",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": [],
                "nodeValue": []
            }
        },
        "SAXTreeBuilder.endPrefixMapping": {
            "name": "endPrefixMapping",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": []
            }
        },
        "SAXTreeBuilder.characters": {
            "name": "characters",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "SAXTreeBuilder.startDocument": {
            "name": "startDocument",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SAXTreeBuilder.endDocument": {
            "name": "endDocument",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLTreeBuilder.set_up_substitutions": {
            "name": "set_up_substitutions",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "tag": []
            }
        }
    },
    "soup-io-downloader-master/stubs/bs4/tests/test_builder_registry.py": {
        "BuiltInRegistryTest.test_combination": {
            "name": "test_combination",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuiltInRegistryTest.test_lookup_by_markup_type": {
            "name": "test_lookup_by_markup_type",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuiltInRegistryTest.test_named_library": {
            "name": "test_named_library",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BuiltInRegistryTest.test_beautifulsoup_constructor_does_lookup": {
            "name": "test_beautifulsoup_constructor_does_lookup",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RegistryTest.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RegistryTest.builder_for_features": {
            "name": "builder_for_features",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RegistryTest.test_register_with_no_features": {
            "name": "test_register_with_no_features",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RegistryTest.test_register_with_features_makes_lookup_succeed": {
            "name": "test_register_with_features_makes_lookup_succeed",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RegistryTest.test_lookup_fails_when_no_builder_implements_feature": {
            "name": "test_lookup_fails_when_no_builder_implements_feature",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RegistryTest.test_lookup_gets_most_recent_registration_when_no_feature_specified": {
            "name": "test_lookup_gets_most_recent_registration_when_no_feature_specified",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RegistryTest.test_lookup_fails_when_no_tree_builders_registered": {
            "name": "test_lookup_fails_when_no_tree_builders_registered",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RegistryTest.test_lookup_gets_most_recent_builder_supporting_all_features": {
            "name": "test_lookup_gets_most_recent_builder_supporting_all_features",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RegistryTest.test_lookup_fails_when_cannot_reconcile_requested_features": {
            "name": "test_lookup_fails_when_cannot_reconcile_requested_features",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "soup-io-downloader-master/stubs/bs4/tests/test_docs.py": {},
    "soup-io-downloader-master/stubs/bs4/tests/test_html5lib.py": {
        "HTML5LibBuilderSmokeTest.default_builder": {
            "name": "default_builder",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTML5LibBuilderSmokeTest.test_soupstrainer": {
            "name": "test_soupstrainer",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTML5LibBuilderSmokeTest.test_correctly_nested_tables": {
            "name": "test_correctly_nested_tables",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTML5LibBuilderSmokeTest.test_xml_declaration_followed_by_doctype": {
            "name": "test_xml_declaration_followed_by_doctype",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTML5LibBuilderSmokeTest.test_reparented_markup": {
            "name": "test_reparented_markup",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTML5LibBuilderSmokeTest.test_reparented_markup_ends_with_whitespace": {
            "name": "test_reparented_markup_ends_with_whitespace",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTML5LibBuilderSmokeTest.test_reparented_markup_containing_identical_whitespace_nodes": {
            "name": "test_reparented_markup_containing_identical_whitespace_nodes",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTML5LibBuilderSmokeTest.test_reparented_markup_containing_children": {
            "name": "test_reparented_markup_containing_children",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTML5LibBuilderSmokeTest.test_processing_instruction": {
            "name": "test_processing_instruction",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTML5LibBuilderSmokeTest.test_cloned_multivalue_node": {
            "name": "test_cloned_multivalue_node",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTML5LibBuilderSmokeTest.test_foster_parenting": {
            "name": "test_foster_parenting",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTML5LibBuilderSmokeTest.test_extraction": {
            "name": "test_extraction",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTML5LibBuilderSmokeTest.test_empty_comment": {
            "name": "test_empty_comment",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "soup-io-downloader-master/stubs/bs4/tests/test_htmlparser.py": {
        "HTMLParserTreeBuilderSmokeTest.default_builder": {
            "name": "default_builder",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLParserTreeBuilderSmokeTest.test_namespaced_system_doctype": {
            "name": "test_namespaced_system_doctype",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLParserTreeBuilderSmokeTest.test_namespaced_public_doctype": {
            "name": "test_namespaced_public_doctype",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLParserTreeBuilderSmokeTest.test_builder_is_pickled": {
            "name": "test_builder_is_pickled",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLParserTreeBuilderSmokeTest.test_redundant_empty_element_closing_tags": {
            "name": "test_redundant_empty_element_closing_tags",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTMLParserTreeBuilderSmokeTest.test_empty_element": {
            "name": "test_empty_element",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHTMLParserSubclass.test_error": {
            "name": "test_error",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "soup-io-downloader-master/stubs/bs4/tests/test_lxml.py": {
        "LXMLTreeBuilderSmokeTest.default_builder": {
            "name": "default_builder",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LXMLTreeBuilderSmokeTest.test_out_of_range_entity": {
            "name": "test_out_of_range_entity",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LXMLTreeBuilderSmokeTest.test_entities_in_foreign_document_encoding": {
            "name": "test_entities_in_foreign_document_encoding",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LXMLTreeBuilderSmokeTest.test_empty_doctype": {
            "name": "test_empty_doctype",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LXMLTreeBuilderSmokeTest.test_beautifulstonesoup_is_xml_parser": {
            "name": "test_beautifulstonesoup_is_xml_parser",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LXMLXMLTreeBuilderSmokeTest.default_builder": {
            "name": "default_builder",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LXMLXMLTreeBuilderSmokeTest.test_namespace_indexing": {
            "name": "test_namespace_indexing",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "soup-io-downloader-master/stubs/bs4/tests/test_soup.py": {
        "TestConstructor.test_short_unicode_input": {
            "name": "test_short_unicode_input",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConstructor.test_embedded_null": {
            "name": "test_embedded_null",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConstructor.test_exclude_encodings": {
            "name": "test_exclude_encodings",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWarnings.test_warning_if_no_parser_specified": {
            "name": "test_warning_if_no_parser_specified",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWarnings.test_warning_if_parser_specified_too_vague": {
            "name": "test_warning_if_parser_specified_too_vague",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWarnings.test_no_warning_if_explicit_parser_specified": {
            "name": "test_no_warning_if_explicit_parser_specified",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWarnings.test_parseOnlyThese_renamed_to_parse_only": {
            "name": "test_parseOnlyThese_renamed_to_parse_only",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWarnings.test_fromEncoding_renamed_to_from_encoding": {
            "name": "test_fromEncoding_renamed_to_from_encoding",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWarnings.test_unrecognized_keyword_argument": {
            "name": "test_unrecognized_keyword_argument",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWarnings.test_disk_file_warning": {
            "name": "test_disk_file_warning",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWarnings.test_url_warning_with_bytes_url": {
            "name": "test_url_warning_with_bytes_url",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWarnings.test_url_warning_with_unicode_url": {
            "name": "test_url_warning_with_unicode_url",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWarnings.test_url_warning_with_bytes_and_space": {
            "name": "test_url_warning_with_bytes_and_space",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWarnings.test_url_warning_with_unicode_and_space": {
            "name": "test_url_warning_with_unicode_and_space",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSelectiveParsing.test_parse_with_soupstrainer": {
            "name": "test_parse_with_soupstrainer",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEntitySubstitution.setUp": {
            "name": "setUp",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEntitySubstitution.test_simple_html_substitution": {
            "name": "test_simple_html_substitution",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEntitySubstitution.test_smart_quote_substitution": {
            "name": "test_smart_quote_substitution",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEntitySubstitution.test_xml_converstion_includes_no_quotes_if_make_quoted_attribute_is_false": {
            "name": "test_xml_converstion_includes_no_quotes_if_make_quoted_attribute_is_false",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEntitySubstitution.test_xml_attribute_quoting_normally_uses_double_quotes": {
            "name": "test_xml_attribute_quoting_normally_uses_double_quotes",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEntitySubstitution.test_xml_attribute_quoting_uses_single_quotes_when_value_contains_double_quotes": {
            "name": "test_xml_attribute_quoting_uses_single_quotes_when_value_contains_double_quotes",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEntitySubstitution.test_xml_attribute_quoting_escapes_single_quotes_when_value_contains_both_single_and_double_quotes": {
            "name": "test_xml_attribute_quoting_escapes_single_quotes_when_value_contains_both_single_and_double_quotes",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEntitySubstitution.test_xml_quotes_arent_escaped_when_value_is_not_being_quoted": {
            "name": "test_xml_quotes_arent_escaped_when_value_is_not_being_quoted",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEntitySubstitution.test_xml_quoting_handles_angle_brackets": {
            "name": "test_xml_quoting_handles_angle_brackets",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEntitySubstitution.test_xml_quoting_handles_ampersands": {
            "name": "test_xml_quoting_handles_ampersands",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEntitySubstitution.test_xml_quoting_including_ampersands_when_they_are_part_of_an_entity": {
            "name": "test_xml_quoting_including_ampersands_when_they_are_part_of_an_entity",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEntitySubstitution.test_xml_quoting_ignoring_ampersands_when_they_are_part_of_an_entity": {
            "name": "test_xml_quoting_ignoring_ampersands_when_they_are_part_of_an_entity",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEntitySubstitution.test_quotes_not_html_substituted": {
            "name": "test_quotes_not_html_substituted",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncodingConversion.setUp": {
            "name": "setUp",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncodingConversion.test_ascii_in_unicode_out": {
            "name": "test_ascii_in_unicode_out",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncodingConversion.test_unicode_in_unicode_out": {
            "name": "test_unicode_in_unicode_out",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncodingConversion.test_utf8_in_unicode_out": {
            "name": "test_utf8_in_unicode_out",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncodingConversion.test_utf8_out": {
            "name": "test_utf8_out",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncodingConversion.test_attribute_name_containing_unicode_characters": {
            "name": "test_attribute_name_containing_unicode_characters",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeDammit.test_unicode_input": {
            "name": "test_unicode_input",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeDammit.test_smart_quotes_to_unicode": {
            "name": "test_smart_quotes_to_unicode",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeDammit.test_smart_quotes_to_xml_entities": {
            "name": "test_smart_quotes_to_xml_entities",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeDammit.test_smart_quotes_to_html_entities": {
            "name": "test_smart_quotes_to_html_entities",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeDammit.test_smart_quotes_to_ascii": {
            "name": "test_smart_quotes_to_ascii",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeDammit.test_detect_utf8": {
            "name": "test_detect_utf8",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeDammit.test_convert_hebrew": {
            "name": "test_convert_hebrew",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeDammit.test_dont_see_smart_quotes_where_there_are_none": {
            "name": "test_dont_see_smart_quotes_where_there_are_none",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeDammit.test_ignore_inappropriate_codecs": {
            "name": "test_ignore_inappropriate_codecs",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeDammit.test_ignore_invalid_codecs": {
            "name": "test_ignore_invalid_codecs",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeDammit.test_exclude_encodings": {
            "name": "test_exclude_encodings",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeDammit.test_encoding_detector_replaces_junk_in_encoding_name_with_replacement_character": {
            "name": "test_encoding_detector_replaces_junk_in_encoding_name_with_replacement_character",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeDammit.test_detect_html5_style_meta_tag": {
            "name": "test_detect_html5_style_meta_tag",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeDammit.test_last_ditch_entity_replacement": {
            "name": "test_last_ditch_entity_replacement",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeDammit.test_byte_order_mark_removed": {
            "name": "test_byte_order_mark_removed",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeDammit.test_detwingle": {
            "name": "test_detwingle",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeDammit.test_detwingle_ignores_multibyte_characters": {
            "name": "test_detwingle_ignores_multibyte_characters",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNamedspacedAttribute.test_name_may_be_none": {
            "name": "test_name_may_be_none",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNamedspacedAttribute.test_attribute_is_equivalent_to_colon_separated_string": {
            "name": "test_attribute_is_equivalent_to_colon_separated_string",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNamedspacedAttribute.test_attributes_are_equivalent_if_prefix_and_name_identical": {
            "name": "test_attributes_are_equivalent_if_prefix_and_name_identical",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAttributeValueWithCharsetSubstitution.test_content_meta_attribute_value": {
            "name": "test_content_meta_attribute_value",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "soup-io-downloader-master/stubs/bs4/tests/test_tree.py": {
        "TreeTest.assertSelects": {
            "name": "assertSelects",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "tags": [],
                "should_match": []
            }
        },
        "TreeTest.assertSelectsIDs": {
            "name": "assertSelectsIDs",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "tags": [],
                "should_match": []
            }
        },
        "TestFind.test_find_tag": {
            "name": "test_find_tag",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFind.test_unicode_text_find": {
            "name": "test_unicode_text_find",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFind.test_unicode_attribute_find": {
            "name": "test_unicode_attribute_find",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFind.test_find_everything": {
            "name": "test_find_everything",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFind.test_find_everything_with_name": {
            "name": "test_find_everything_with_name",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAll.test_find_all_text_nodes": {
            "name": "test_find_all_text_nodes",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAll.test_find_all_limit": {
            "name": "test_find_all_limit",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAll.test_calling_a_tag_is_calling_findall": {
            "name": "test_calling_a_tag_is_calling_findall",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAll.test_find_all_with_self_referential_data_structure_does_not_cause_infinite_recursion": {
            "name": "test_find_all_with_self_referential_data_structure_does_not_cause_infinite_recursion",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAll.test_find_all_resultset": {
            "name": "test_find_all_resultset",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllBasicNamespaces.test_find_by_namespaced_name": {
            "name": "test_find_by_namespaced_name",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByName.setUp": {
            "name": "setUp",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByName.test_find_all_by_tag_name": {
            "name": "test_find_all_by_tag_name",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByName.test_find_all_by_name_and_text": {
            "name": "test_find_all_by_name_and_text",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByName.test_find_all_on_non_root_element": {
            "name": "test_find_all_on_non_root_element",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByName.test_calling_element_invokes_find_all": {
            "name": "test_calling_element_invokes_find_all",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByName.test_find_all_by_tag_strainer": {
            "name": "test_find_all_by_tag_strainer",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByName.test_find_all_by_tag_names": {
            "name": "test_find_all_by_tag_names",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByName.test_find_all_by_tag_dict": {
            "name": "test_find_all_by_tag_dict",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByName.test_find_all_by_tag_re": {
            "name": "test_find_all_by_tag_re",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByName.test_find_all_with_tags_matching_method": {
            "name": "test_find_all_with_tags_matching_method",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByName.test_find_with_multi_valued_attribute": {
            "name": "test_find_with_multi_valued_attribute",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByAttribute.test_find_all_by_attribute_name": {
            "name": "test_find_all_by_attribute_name",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByAttribute.test_find_all_by_utf8_attribute_value": {
            "name": "test_find_all_by_utf8_attribute_value",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByAttribute.test_find_all_by_attribute_dict": {
            "name": "test_find_all_by_attribute_dict",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByAttribute.test_find_all_by_class": {
            "name": "test_find_all_by_class",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByAttribute.test_find_by_class_when_multiple_classes_present": {
            "name": "test_find_by_class_when_multiple_classes_present",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByAttribute.test_find_all_with_non_dictionary_for_attrs_finds_by_class": {
            "name": "test_find_all_with_non_dictionary_for_attrs_finds_by_class",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByAttribute.test_find_all_with_string_for_attrs_finds_multiple_classes": {
            "name": "test_find_all_with_string_for_attrs_finds_multiple_classes",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByAttribute.test_find_all_by_attribute_soupstrainer": {
            "name": "test_find_all_by_attribute_soupstrainer",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByAttribute.test_find_all_with_missing_attribute": {
            "name": "test_find_all_with_missing_attribute",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByAttribute.test_find_all_with_defined_attribute": {
            "name": "test_find_all_with_defined_attribute",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByAttribute.test_find_all_with_numeric_attribute": {
            "name": "test_find_all_with_numeric_attribute",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByAttribute.test_find_all_with_list_attribute_values": {
            "name": "test_find_all_with_list_attribute_values",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByAttribute.test_find_all_with_regular_expression_attribute_value": {
            "name": "test_find_all_with_regular_expression_attribute_value",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByAttribute.test_find_by_name_and_containing_string": {
            "name": "test_find_by_name_and_containing_string",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByAttribute.test_find_by_name_and_containing_string_when_string_is_buried": {
            "name": "test_find_by_name_and_containing_string_when_string_is_buried",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFindAllByAttribute.test_find_by_attribute_and_containing_string": {
            "name": "test_find_by_attribute_and_containing_string",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIndex.test_index": {
            "name": "test_index",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParentOperations.setUp": {
            "name": "setUp",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParentOperations.test_parent": {
            "name": "test_parent",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParentOperations.test_parent_of_top_tag_is_soup_object": {
            "name": "test_parent_of_top_tag_is_soup_object",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParentOperations.test_soup_object_has_no_parent": {
            "name": "test_soup_object_has_no_parent",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParentOperations.test_find_parents": {
            "name": "test_find_parents",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParentOperations.test_find_parent": {
            "name": "test_find_parent",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParentOperations.test_parent_of_text_element": {
            "name": "test_parent_of_text_element",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParentOperations.test_text_element_find_parent": {
            "name": "test_text_element_find_parent",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParentOperations.test_parent_generator": {
            "name": "test_parent_generator",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProximityTest.setUp": {
            "name": "setUp",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNextOperations.setUp": {
            "name": "setUp",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNextOperations.test_next": {
            "name": "test_next",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNextOperations.test_next_of_last_item_is_none": {
            "name": "test_next_of_last_item_is_none",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNextOperations.test_next_of_root_is_none": {
            "name": "test_next_of_root_is_none",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNextOperations.test_find_all_next": {
            "name": "test_find_all_next",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNextOperations.test_find_next": {
            "name": "test_find_next",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNextOperations.test_find_next_for_text_element": {
            "name": "test_find_next_for_text_element",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNextOperations.test_next_generator": {
            "name": "test_next_generator",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPreviousOperations.setUp": {
            "name": "setUp",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPreviousOperations.test_previous": {
            "name": "test_previous",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPreviousOperations.test_previous_of_first_item_is_none": {
            "name": "test_previous_of_first_item_is_none",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPreviousOperations.test_previous_of_root_is_none": {
            "name": "test_previous_of_root_is_none",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPreviousOperations.test_find_all_previous": {
            "name": "test_find_all_previous",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPreviousOperations.test_find_previous": {
            "name": "test_find_previous",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPreviousOperations.test_find_previous_for_text_element": {
            "name": "test_find_previous_for_text_element",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPreviousOperations.test_previous_generator": {
            "name": "test_previous_generator",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SiblingTest.setUp": {
            "name": "setUp",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNextSibling.setUp": {
            "name": "setUp",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNextSibling.test_next_sibling_of_root_is_none": {
            "name": "test_next_sibling_of_root_is_none",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNextSibling.test_next_sibling": {
            "name": "test_next_sibling",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNextSibling.test_next_sibling_may_not_exist": {
            "name": "test_next_sibling_may_not_exist",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNextSibling.test_find_next_sibling": {
            "name": "test_find_next_sibling",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNextSibling.test_next_siblings": {
            "name": "test_next_siblings",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNextSibling.test_next_sibling_for_text_element": {
            "name": "test_next_sibling_for_text_element",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPreviousSibling.setUp": {
            "name": "setUp",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPreviousSibling.test_previous_sibling_of_root_is_none": {
            "name": "test_previous_sibling_of_root_is_none",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPreviousSibling.test_previous_sibling": {
            "name": "test_previous_sibling",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPreviousSibling.test_previous_sibling_may_not_exist": {
            "name": "test_previous_sibling_may_not_exist",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPreviousSibling.test_find_previous_sibling": {
            "name": "test_find_previous_sibling",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPreviousSibling.test_previous_siblings": {
            "name": "test_previous_siblings",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPreviousSibling.test_previous_sibling_for_text_element": {
            "name": "test_previous_sibling_for_text_element",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTagCreation.test_new_tag": {
            "name": "test_new_tag",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTagCreation.test_tag_inherits_self_closing_rules_from_builder": {
            "name": "test_tag_inherits_self_closing_rules_from_builder",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTagCreation.test_new_string_creates_navigablestring": {
            "name": "test_new_string_creates_navigablestring",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTagCreation.test_new_string_can_create_navigablestring_subclass": {
            "name": "test_new_string_can_create_navigablestring_subclass",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_attribute_modification": {
            "name": "test_attribute_modification",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_new_tag_creation": {
            "name": "test_new_tag_creation",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_append_to_contents_moves_tag": {
            "name": "test_append_to_contents_moves_tag",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_replace_with_returns_thing_that_was_replaced": {
            "name": "test_replace_with_returns_thing_that_was_replaced",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_unwrap_returns_thing_that_was_replaced": {
            "name": "test_unwrap_returns_thing_that_was_replaced",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_replace_with_and_unwrap_give_useful_exception_when_tag_has_no_parent": {
            "name": "test_replace_with_and_unwrap_give_useful_exception_when_tag_has_no_parent",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_replace_tag_with_itself": {
            "name": "test_replace_tag_with_itself",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_replace_tag_with_its_parent_raises_exception": {
            "name": "test_replace_tag_with_its_parent_raises_exception",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_insert_tag_into_itself_raises_exception": {
            "name": "test_insert_tag_into_itself_raises_exception",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_insert_beautifulsoup_object_inserts_children": {
            "name": "test_insert_beautifulsoup_object_inserts_children",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_replace_with_maintains_next_element_throughout": {
            "name": "test_replace_with_maintains_next_element_throughout",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_replace_final_node": {
            "name": "test_replace_final_node",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_consecutive_text_nodes": {
            "name": "test_consecutive_text_nodes",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_insert_string": {
            "name": "test_insert_string",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_insert_tag": {
            "name": "test_insert_tag",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_append_child_thats_already_at_the_end": {
            "name": "test_append_child_thats_already_at_the_end",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_extend": {
            "name": "test_extend",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_move_tag_to_beginning_of_parent": {
            "name": "test_move_tag_to_beginning_of_parent",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_insert_works_on_empty_element_tag": {
            "name": "test_insert_works_on_empty_element_tag",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_insert_before": {
            "name": "test_insert_before",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_insert_multiple_before": {
            "name": "test_insert_multiple_before",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_insert_after": {
            "name": "test_insert_after",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_insert_multiple_after": {
            "name": "test_insert_multiple_after",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_insert_after_raises_exception_if_after_has_no_meaning": {
            "name": "test_insert_after_raises_exception_if_after_has_no_meaning",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_insert_before_raises_notimplementederror_if_before_has_no_meaning": {
            "name": "test_insert_before_raises_notimplementederror_if_before_has_no_meaning",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_replace_with": {
            "name": "test_replace_with",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_replace_first_child": {
            "name": "test_replace_first_child",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_replace_last_child": {
            "name": "test_replace_last_child",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_nested_tag_replace_with": {
            "name": "test_nested_tag_replace_with",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_unwrap": {
            "name": "test_unwrap",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_wrap": {
            "name": "test_wrap",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_wrap_extracts_tag_from_elsewhere": {
            "name": "test_wrap_extracts_tag_from_elsewhere",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_wrap_puts_new_contents_at_the_end": {
            "name": "test_wrap_puts_new_contents_at_the_end",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_extract": {
            "name": "test_extract",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_extract_distinguishes_between_identical_strings": {
            "name": "test_extract_distinguishes_between_identical_strings",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_extract_multiples_of_same_tag": {
            "name": "test_extract_multiples_of_same_tag",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_extract_works_when_element_is_surrounded_by_identical_strings": {
            "name": "test_extract_works_when_element_is_surrounded_by_identical_strings",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_clear": {
            "name": "test_clear",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_string_set": {
            "name": "test_string_set",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_string_set_does_not_affect_original_string": {
            "name": "test_string_set_does_not_affect_original_string",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTreeModification.test_set_string_preserves_class_of_string": {
            "name": "test_set_string_preserves_class_of_string",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElementObjects.test_len": {
            "name": "test_len",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElementObjects.test_member_access_invokes_find": {
            "name": "test_member_access_invokes_find",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElementObjects.test_deprecated_member_access": {
            "name": "test_deprecated_member_access",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElementObjects.test_has_attr": {
            "name": "test_has_attr",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElementObjects.test_attributes_come_out_in_alphabetical_order": {
            "name": "test_attributes_come_out_in_alphabetical_order",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElementObjects.test_string": {
            "name": "test_string",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElementObjects.test_empty_tag_has_no_string": {
            "name": "test_empty_tag_has_no_string",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElementObjects.test_tag_with_multiple_children_has_no_string": {
            "name": "test_tag_with_multiple_children_has_no_string",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElementObjects.test_tag_with_recursive_string_has_string": {
            "name": "test_tag_with_recursive_string_has_string",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElementObjects.test_lack_of_string": {
            "name": "test_lack_of_string",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElementObjects.test_all_text": {
            "name": "test_all_text",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElementObjects.test_get_text_ignores_comments": {
            "name": "test_get_text_ignores_comments",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestElementObjects.test_all_strings_ignores_comments": {
            "name": "test_all_strings_ignores_comments",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCDAtaListAttributes.test_single_value_becomes_list": {
            "name": "test_single_value_becomes_list",
            "location": 195,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCDAtaListAttributes.test_multiple_values_becomes_list": {
            "name": "test_multiple_values_becomes_list",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCDAtaListAttributes.test_multiple_values_separated_by_weird_whitespace": {
            "name": "test_multiple_values_separated_by_weird_whitespace",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCDAtaListAttributes.test_attributes_joined_into_string_on_output": {
            "name": "test_attributes_joined_into_string_on_output",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCDAtaListAttributes.test_get_attribute_list": {
            "name": "test_get_attribute_list",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCDAtaListAttributes.test_accept_charset": {
            "name": "test_accept_charset",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCDAtaListAttributes.test_cdata_attribute_applying_only_to_one_tag": {
            "name": "test_cdata_attribute_applying_only_to_one_tag",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCDAtaListAttributes.test_string_has_immutable_name_property": {
            "name": "test_string_has_immutable_name_property",
            "location": 202,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPersistence.setUp": {
            "name": "setUp",
            "location": 207,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPersistence.test_pickle_and_unpickle_identity": {
            "name": "test_pickle_and_unpickle_identity",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPersistence.test_deepcopy_identity": {
            "name": "test_deepcopy_identity",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPersistence.test_copy_preserves_encoding": {
            "name": "test_copy_preserves_encoding",
            "location": 210,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPersistence.test_unicode_pickle": {
            "name": "test_unicode_pickle",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPersistence.test_copy_navigablestring_is_not_attached_to_tree": {
            "name": "test_copy_navigablestring_is_not_attached_to_tree",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPersistence.test_copy_navigablestring_subclass_has_same_type": {
            "name": "test_copy_navigablestring_subclass_has_same_type",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPersistence.test_copy_entire_soup": {
            "name": "test_copy_entire_soup",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPersistence.test_copy_tag_copies_contents": {
            "name": "test_copy_tag_copies_contents",
            "location": 215,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubstitutions.test_default_formatter_is_minimal": {
            "name": "test_default_formatter_is_minimal",
            "location": 218,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubstitutions.test_formatter_html": {
            "name": "test_formatter_html",
            "location": 219,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubstitutions.test_formatter_html5": {
            "name": "test_formatter_html5",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubstitutions.test_formatter_minimal": {
            "name": "test_formatter_minimal",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubstitutions.test_formatter_null": {
            "name": "test_formatter_null",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubstitutions.test_formatter_custom": {
            "name": "test_formatter_custom",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubstitutions.test_formatter_is_run_on_attribute_values": {
            "name": "test_formatter_is_run_on_attribute_values",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubstitutions.test_formatter_skips_script_tag_for_html_documents": {
            "name": "test_formatter_skips_script_tag_for_html_documents",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubstitutions.test_formatter_skips_style_tag_for_html_documents": {
            "name": "test_formatter_skips_style_tag_for_html_documents",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubstitutions.test_prettify_leaves_preformatted_text_alone": {
            "name": "test_prettify_leaves_preformatted_text_alone",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubstitutions.test_prettify_accepts_formatter_function": {
            "name": "test_prettify_accepts_formatter_function",
            "location": 228,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubstitutions.test_prettify_outputs_unicode_by_default": {
            "name": "test_prettify_outputs_unicode_by_default",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubstitutions.test_prettify_can_encode_data": {
            "name": "test_prettify_can_encode_data",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubstitutions.test_html_entity_substitution_off_by_default": {
            "name": "test_html_entity_substitution_off_by_default",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubstitutions.test_encoding_substitution": {
            "name": "test_encoding_substitution",
            "location": 232,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSubstitutions.test_encoding_substitution_doesnt_happen_if_tag_is_strained": {
            "name": "test_encoding_substitution_doesnt_happen_if_tag_is_strained",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncoding.test_unicode_string_can_be_encoded": {
            "name": "test_unicode_string_can_be_encoded",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncoding.test_tag_containing_unicode_string_can_be_encoded": {
            "name": "test_tag_containing_unicode_string_can_be_encoded",
            "location": 237,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncoding.test_encoding_substitutes_unrecognized_characters_by_default": {
            "name": "test_encoding_substitutes_unrecognized_characters_by_default",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncoding.test_encoding_can_be_made_strict": {
            "name": "test_encoding_can_be_made_strict",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncoding.test_decode_contents": {
            "name": "test_decode_contents",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncoding.test_encode_contents": {
            "name": "test_encode_contents",
            "location": 241,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncoding.test_deprecated_renderContents": {
            "name": "test_deprecated_renderContents",
            "location": 242,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestEncoding.test_repr": {
            "name": "test_repr",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNavigableStringSubclasses.test_cdata": {
            "name": "test_cdata",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNavigableStringSubclasses.test_cdata_is_never_formatted": {
            "name": "test_cdata_is_never_formatted",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNavigableStringSubclasses.test_doctype_ends_in_newline": {
            "name": "test_doctype_ends_in_newline",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNavigableStringSubclasses.test_declaration": {
            "name": "test_declaration",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.setUp": {
            "name": "setUp",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.assertSelects": {
            "name": "assertSelects",
            "location": 256,
            "return": [],
            "arguments": {
                "self": [],
                "selector": [],
                "expected_ids": []
            }
        },
        "TestSoupSelector.assertSelectMultiple": {
            "name": "assertSelectMultiple",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_one_tag_one": {
            "name": "test_one_tag_one",
            "location": 259,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_one_tag_many": {
            "name": "test_one_tag_many",
            "location": 260,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_select_one_returns_none_if_no_match": {
            "name": "test_select_one_returns_none_if_no_match",
            "location": 261,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_tag_in_tag_one": {
            "name": "test_tag_in_tag_one",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_tag_in_tag_many": {
            "name": "test_tag_in_tag_many",
            "location": 263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_limit": {
            "name": "test_limit",
            "location": 264,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_tag_no_match": {
            "name": "test_tag_no_match",
            "location": 265,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_invalid_tag": {
            "name": "test_invalid_tag",
            "location": 266,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_select_dashed_tag_ids": {
            "name": "test_select_dashed_tag_ids",
            "location": 267,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_select_dashed_by_id": {
            "name": "test_select_dashed_by_id",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_dashed_tag_text": {
            "name": "test_dashed_tag_text",
            "location": 269,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_select_dashed_matches_find_all": {
            "name": "test_select_dashed_matches_find_all",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_header_tags": {
            "name": "test_header_tags",
            "location": 271,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_class_one": {
            "name": "test_class_one",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_class_mismatched_tag": {
            "name": "test_class_mismatched_tag",
            "location": 273,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_one_id": {
            "name": "test_one_id",
            "location": 274,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_bad_id": {
            "name": "test_bad_id",
            "location": 275,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_items_in_id": {
            "name": "test_items_in_id",
            "location": 276,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_a_bunch_of_emptys": {
            "name": "test_a_bunch_of_emptys",
            "location": 277,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_multi_class_support": {
            "name": "test_multi_class_support",
            "location": 278,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_multi_class_selection": {
            "name": "test_multi_class_selection",
            "location": 279,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_child_selector": {
            "name": "test_child_selector",
            "location": 280,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_child_selector_id": {
            "name": "test_child_selector_id",
            "location": 281,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_attribute_equals": {
            "name": "test_attribute_equals",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_attribute_tilde": {
            "name": "test_attribute_tilde",
            "location": 283,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_attribute_startswith": {
            "name": "test_attribute_startswith",
            "location": 284,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_attribute_endswith": {
            "name": "test_attribute_endswith",
            "location": 285,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_attribute_contains": {
            "name": "test_attribute_contains",
            "location": 286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_attribute_exact_or_hypen": {
            "name": "test_attribute_exact_or_hypen",
            "location": 287,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_attribute_exists": {
            "name": "test_attribute_exists",
            "location": 288,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_quoted_space_in_selector_name": {
            "name": "test_quoted_space_in_selector_name",
            "location": 289,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_unsupported_pseudoclass": {
            "name": "test_unsupported_pseudoclass",
            "location": 290,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_nth_of_type": {
            "name": "test_nth_of_type",
            "location": 291,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_nth_of_type_direct_descendant": {
            "name": "test_nth_of_type_direct_descendant",
            "location": 292,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_id_child_selector_nth_of_type": {
            "name": "test_id_child_selector_nth_of_type",
            "location": 293,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_select_on_element": {
            "name": "test_select_on_element",
            "location": 294,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_overspecified_child_id": {
            "name": "test_overspecified_child_id",
            "location": 295,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_adjacent_sibling_selector": {
            "name": "test_adjacent_sibling_selector",
            "location": 296,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_general_sibling_selector": {
            "name": "test_general_sibling_selector",
            "location": 297,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_dangling_combinator": {
            "name": "test_dangling_combinator",
            "location": 298,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_sibling_combinator_wont_select_same_tag_twice": {
            "name": "test_sibling_combinator_wont_select_same_tag_twice",
            "location": 299,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_multiple_select": {
            "name": "test_multiple_select",
            "location": 300,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_multiple_select_with_no_space": {
            "name": "test_multiple_select_with_no_space",
            "location": 301,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_multiple_select_with_more_space": {
            "name": "test_multiple_select_with_more_space",
            "location": 302,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_multiple_select_duplicated": {
            "name": "test_multiple_select_duplicated",
            "location": 303,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_multiple_select_sibling": {
            "name": "test_multiple_select_sibling",
            "location": 304,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_multiple_select_tag_and_direct_descendant": {
            "name": "test_multiple_select_tag_and_direct_descendant",
            "location": 305,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_multiple_select_direct_descendant_and_tags": {
            "name": "test_multiple_select_direct_descendant_and_tags",
            "location": 306,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_multiple_select_indirect_descendant": {
            "name": "test_multiple_select_indirect_descendant",
            "location": 307,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_invalid_multiple_select": {
            "name": "test_invalid_multiple_select",
            "location": 308,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_multiple_select_attrs": {
            "name": "test_multiple_select_attrs",
            "location": 309,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_multiple_select_ids": {
            "name": "test_multiple_select_ids",
            "location": 310,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_multiple_select_nested": {
            "name": "test_multiple_select_nested",
            "location": 311,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSoupSelector.test_select_duplicate_elements": {
            "name": "test_select_duplicate_elements",
            "location": 312,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "soup-io-downloader-master/stubs/bs4/tests/__init__.py": {},
    "soup-io-downloader-master/tests/test_get_links_from_page.py": {
        "_get_current_file_dirname": {
            "name": "_get_current_file_dirname",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "_TestSoupPageSourceProvider.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_pages_path": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "_TestSoupPageSourceProvider.get_source": {
            "name": "get_source",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str"
                ]
            }
        },
        "_TestSoupPageSourceProvider._get_test_page_path": {
            "name": "_get_test_page_path",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "test_page_file_name": [
                    "str"
                ]
            }
        },
        "TestGetLinksFromPage.setUpClass": {
            "name": "setUpClass",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        },
        "TestGetLinksFromPage.test_getting_simple_img_url": {
            "name": "test_getting_simple_img_url",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetLinksFromPage.test_getting_content_urls_from_page": {
            "name": "test_getting_content_urls_from_page",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetLinksFromPage.test_getting_next_page_url": {
            "name": "test_getting_next_page_url",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}